
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a5e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046dc  0802a7e8  0802a7e8  0003a7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a9b16  0802eec4  0802eec4  0003eec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000f8  080d89dc  080d89dc  000e89dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000c4  080d8ad4  080d8ad4  000e8ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080d8b98  080d8b98  001898c8  2**0
                  CONTENTS
  7 .ARM          00000008  080d8b98  080d8b98  000e8b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080d8ba0  080d8ba0  001898c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000030  080d8ba0  080d8ba0  000e8ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080d8bd0  080d8bd0  000e8bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000254  20000000  080d8bd8  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00056eb0  20000254  080d8e2c  000f0254  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20057104  080d8e2c  000f7104  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  001898c8  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 000898c8  90000000  90000000  00100000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000d83c1  00000000  00000000  001898f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017475  00000000  00000000  00261cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003fc8  00000000  00000000  00279130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000039c0  00000000  00000000  0027d0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00039e73  00000000  00000000  00280ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004e108  00000000  00000000  002ba92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012f2b7  00000000  00000000  00308a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  00437cea  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00011b7c  00000000  00000000  00437dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000254 	.word	0x20000254
 800021c:	00000000 	.word	0x00000000
 8000220:	0802a7cc 	.word	0x0802a7cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000258 	.word	0x20000258
 800023c:	0802a7cc 	.word	0x0802a7cc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <HAL_TIM_PWM_PulseFinishedCallback>:
static void updateLedsType_0(int8_t activeLeds);
static void updateLedsType_1(int8_t activeLeds);
static float lerp(float A, float B, float Alpha);

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f00f fac6 	bl	800ff6c <HAL_TIM_PWM_Stop_DMA>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <WS2812_Init>:

void WS2812_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e007      	b.n	8000a04 <WS2812_Init+0x1c>
		leds[i] = BIT_0_TIME;
 80009f4:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <WS2812_Init+0x80>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	212b      	movs	r1, #43	; 0x2b
 80009fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000a0a:	dbf3      	blt.n	80009f4 <WS2812_Init+0xc>

	for (int i = 0; i < RESET_LEN; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	e009      	b.n	8000a26 <WS2812_Init+0x3e>
		leds[i + LED_NUMBER * 24] = 0;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <WS2812_Init+0x80>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < RESET_LEN; i++)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b27      	cmp	r3, #39	; 0x27
 8000a2a:	ddf2      	ble.n	8000a12 <WS2812_Init+0x2a>

	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000a2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <WS2812_Init+0x80>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <WS2812_Init+0x84>)
 8000a36:	f00f f88d 	bl	800fb54 <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	e00a      	b.n	8000a56 <WS2812_Init+0x6e>
	{
		updateLedsType_0(i);
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f87b 	bl	8000b40 <updateLedsType_0>
		osDelay(50);
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f010 fe3e 	bl	80116cc <osDelay>
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	3301      	adds	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d9f1      	bls.n	8000a40 <WS2812_Init+0x58>
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20056994 	.word	0x20056994
 8000a6c:	20056fa4 	.word	0x20056fa4

08000a70 <setLed>:

void setLed(uint8_t ledNumber, uint8_t red, uint8_t green, uint8_t blue)
{
 8000a70:	b490      	push	{r4, r7}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4623      	mov	r3, r4
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	4603      	mov	r3, r0
 8000a84:	71bb      	strb	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	717b      	strb	r3, [r7, #5]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	713b      	strb	r3, [r7, #4]
	const uint8_t lookUpTable[8] =
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <setLed+0xc8>)
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a98:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 1, 2, 4, 8, 16, 32, 64, 128 };
	uint16_t ledId = 24 * ledNumber;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	0052      	lsls	r2, r2, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	e03a      	b.n	8000b26 <setLed+0xb6>
	{
		leds[ledId] = red & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000ab0:	f107 0208 	add.w	r2, r7, #8
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	4013      	ands	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <setLed+0x58>
 8000ac4:	2156      	movs	r1, #86	; 0x56
 8000ac6:	e000      	b.n	8000aca <setLed+0x5a>
 8000ac8:	212b      	movs	r1, #43	; 0x2b
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <setLed+0xcc>)
 8000ace:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 8] = green & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000ad2:	f107 0208 	add.w	r2, r7, #8
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <setLed+0x7a>
 8000ae6:	2156      	movs	r1, #86	; 0x56
 8000ae8:	e000      	b.n	8000aec <setLed+0x7c>
 8000aea:	212b      	movs	r1, #43	; 0x2b
 8000aec:	8afb      	ldrh	r3, [r7, #22]
 8000aee:	3308      	adds	r3, #8
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <setLed+0xcc>)
 8000af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 16] = blue & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000af6:	f107 0208 	add.w	r2, r7, #8
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4413      	add	r3, r2
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	793b      	ldrb	r3, [r7, #4]
 8000b02:	4013      	ands	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <setLed+0x9e>
 8000b0a:	2156      	movs	r1, #86	; 0x56
 8000b0c:	e000      	b.n	8000b10 <setLed+0xa0>
 8000b0e:	212b      	movs	r1, #43	; 0x2b
 8000b10:	8afb      	ldrh	r3, [r7, #22]
 8000b12:	3310      	adds	r3, #16
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <setLed+0xcc>)
 8000b16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ledId++;
 8000b1a:	8afb      	ldrh	r3, [r7, #22]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	3301      	adds	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	ddc1      	ble.n	8000ab0 <setLed+0x40>
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc90      	pop	{r4, r7}
 8000b36:	4770      	bx	lr
 8000b38:	0802a7e8 	.word	0x0802a7e8
 8000b3c:	20056994 	.word	0x20056994

08000b40 <updateLedsType_0>:

// turn on leds linearly
void updateLedsType_0(int8_t activeLeds)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	e02b      	b.n	8000ba8 <updateLedsType_0+0x68>
	{
		if (i < activeLeds)
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	da1d      	bge.n	8000b96 <updateLedsType_0+0x56>
		{
			if (i < 5)
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d807      	bhi.n	8000b70 <updateLedsType_0+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b62:	7899      	ldrb	r1, [r3, #2]
 8000b64:	7bf8      	ldrb	r0, [r7, #15]
 8000b66:	2300      	movs	r3, #0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f7ff ff81 	bl	8000a70 <setLed>
 8000b6e:	e018      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
			else if (i < 10)
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b09      	cmp	r3, #9
 8000b74:	d807      	bhi.n	8000b86 <updateLedsType_0+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b78:	78da      	ldrb	r2, [r3, #3]
 8000b7a:	7bf8      	ldrb	r0, [r7, #15]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f7ff ff76 	bl	8000a70 <setLed>
 8000b84:	e00d      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
			else
			{
				setLed(i, 0, 0, displaySetup.blueLedBrightness);
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b88:	791b      	ldrb	r3, [r3, #4]
 8000b8a:	7bf8      	ldrb	r0, [r7, #15]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f7ff ff6e 	bl	8000a70 <setLed>
 8000b94:	e005      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000b96:	7bf8      	ldrb	r0, [r7, #15]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f7ff ff67 	bl	8000a70 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b0e      	cmp	r3, #14
 8000bac:	d9d0      	bls.n	8000b50 <updateLedsType_0+0x10>
		}

	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000bae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <updateLedsType_0+0x88>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <updateLedsType_0+0x8c>)
 8000bb8:	f00e ffcc 	bl	800fb54 <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	20056994 	.word	0x20056994
 8000bcc:	20056fa4 	.word	0x20056fa4

08000bd0 <updateLedsType_1>:

// turn on leds 1-10 linearly, last five turn on together
void updateLedsType_1(int8_t activeLeds)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e034      	b.n	8000c4a <updateLedsType_1+0x7a>
	{
		if (i < activeLeds)
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	da26      	bge.n	8000c38 <updateLedsType_1+0x68>
		{
			if (i < 5)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d807      	bhi.n	8000c00 <updateLedsType_1+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <updateLedsType_1+0x98>)
 8000bf2:	7899      	ldrb	r1, [r3, #2]
 8000bf4:	7bf8      	ldrb	r0, [r7, #15]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f7ff ff39 	bl	8000a70 <setLed>
 8000bfe:	e021      	b.n	8000c44 <updateLedsType_1+0x74>
			}
			else if (i < 10)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b09      	cmp	r3, #9
 8000c04:	d807      	bhi.n	8000c16 <updateLedsType_1+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <updateLedsType_1+0x98>)
 8000c08:	78da      	ldrb	r2, [r3, #3]
 8000c0a:	7bf8      	ldrb	r0, [r7, #15]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f7ff ff2e 	bl	8000a70 <setLed>
 8000c14:	e016      	b.n	8000c44 <updateLedsType_1+0x74>
			}
			else
			{
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	73bb      	strb	r3, [r7, #14]
 8000c1a:	e009      	b.n	8000c30 <updateLedsType_1+0x60>
				{
					setLed(i, 0, 0, displaySetup.blueLedBrightness);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <updateLedsType_1+0x98>)
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	7bf8      	ldrb	r0, [r7, #15]
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	f7ff ff23 	bl	8000a70 <setLed>
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	73bb      	strb	r3, [r7, #14]
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	2b0e      	cmp	r3, #14
 8000c34:	d9f2      	bls.n	8000c1c <updateLedsType_1+0x4c>
 8000c36:	e005      	b.n	8000c44 <updateLedsType_1+0x74>
				}
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000c38:	7bf8      	ldrb	r0, [r7, #15]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f7ff ff16 	bl	8000a70 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	3301      	adds	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b0e      	cmp	r3, #14
 8000c4e:	d9c7      	bls.n	8000be0 <updateLedsType_1+0x10>
		}
	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000c50:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <updateLedsType_1+0x9c>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <updateLedsType_1+0xa0>)
 8000c5a:	f00e ff7b 	bl	800fb54 <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20056994 	.word	0x20056994
 8000c70:	20056fa4 	.word	0x20056fa4

08000c74 <updateLeds>:

void updateLeds(int rpm, int mode)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
	uint16_t minRPM;
	uint16_t maxRPM;
	int8_t activeLeds;
	static uint8_t lastGear = 1;
	switch (mode)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d007      	beq.n	8000c94 <updateLeds+0x20>
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db75      	blt.n	8000d76 <updateLeds+0x102>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d871      	bhi.n	8000d76 <updateLeds+0x102>
 8000c92:	e027      	b.n	8000ce4 <updateLeds+0x70>
	{
	case 0:
		minRPM = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	82bb      	strh	r3, [r7, #20]
		maxRPM = 12000;
 8000c98:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000c9c:	827b      	strh	r3, [r7, #18]
		activeLeds =
				ceil(
						(float) (rpm - minRPM)
 8000c9e:	8abb      	ldrh	r3, [r7, #20]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
								/ (float) (maxRPM - minRPM)* LED_NUMBER);
 8000cac:	8a7a      	ldrh	r2, [r7, #18]
 8000cae:	8abb      	ldrh	r3, [r7, #20]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cbe:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
				ceil(
 8000cc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cca:	eeb0 0b47 	vmov.f64	d0, d7
 8000cce:	f025 f87b 	bl	8025dc8 <ceil>
 8000cd2:	eeb0 7b40 	vmov.f64	d7, d0
		activeLeds =
 8000cd6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cda:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	75fb      	strb	r3, [r7, #23]
		break;
 8000ce2:	e048      	b.n	8000d76 <updateLeds+0x102>
	case 1:
	case 2:
#ifdef USE_OPTIMAL_SHIFT_RPM
		if (telemetryData.gear <= 6 && telemetryData.gear >= 1)
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <updateLeds+0x138>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b06      	cmp	r3, #6
 8000cea:	d807      	bhi.n	8000cfc <updateLeds+0x88>
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <updateLeds+0x138>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <updateLeds+0x88>
		{
			lastGear = telemetryData.gear;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <updateLeds+0x138>)
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <updateLeds+0x13c>)
 8000cfa:	701a      	strb	r2, [r3, #0]
		}

		minRPM = OptimalShiftUpRPM[lastGear - 1] - 2000;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <updateLeds+0x13c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	4a2c      	ldr	r2, [pc, #176]	; (8000db4 <updateLeds+0x140>)
 8000d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d08:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d0c:	82bb      	strh	r3, [r7, #20]
		maxRPM = OptimalShiftUpRPM[lastGear - 1];
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <updateLeds+0x13c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <updateLeds+0x140>)
 8000d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1a:	827b      	strh	r3, [r7, #18]
#else
		minRPM = 9500;
		maxRPM = 11500;
#endif
		uint8_t ledNumber = mode == 1 ? LED_NUMBER : LED_NUMBER - 4;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <updateLeds+0xb2>
 8000d22:	230f      	movs	r3, #15
 8000d24:	e000      	b.n	8000d28 <updateLeds+0xb4>
 8000d26:	230b      	movs	r3, #11
 8000d28:	747b      	strb	r3, [r7, #17]
		activeLeds = ceil(
				(float) (rpm - minRPM) / (float) (maxRPM - minRPM) * ledNumber);
 8000d2a:	8abb      	ldrh	r3, [r7, #20]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d38:	8a7a      	ldrh	r2, [r7, #18]
 8000d3a:	8abb      	ldrh	r3, [r7, #20]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d4a:	7c7b      	ldrb	r3, [r7, #17]
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d54:	ee67 7a27 	vmul.f32	s15, s14, s15
		activeLeds = ceil(
 8000d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8000d60:	f025 f832 	bl	8025dc8 <ceil>
 8000d64:	eeb0 7b40 	vmov.f64	d7, d0
 8000d68:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d70:	793b      	ldrb	r3, [r7, #4]
 8000d72:	75fb      	strb	r3, [r7, #23]

		break;
 8000d74:	bf00      	nop

	}

	switch (mode)
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	dc03      	bgt.n	8000d84 <updateLeds+0x110>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	da04      	bge.n	8000d8c <updateLeds+0x118>
		break;
	case 2:
		updateLedsType_1(activeLeds);
		break;
	}
}
 8000d82:	e00f      	b.n	8000da4 <updateLeds+0x130>
	switch (mode)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d006      	beq.n	8000d98 <updateLeds+0x124>
}
 8000d8a:	e00b      	b.n	8000da4 <updateLeds+0x130>
		updateLedsType_0(activeLeds);
 8000d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fed5 	bl	8000b40 <updateLedsType_0>
		break;
 8000d96:	e005      	b.n	8000da4 <updateLeds+0x130>
		updateLedsType_1(activeLeds);
 8000d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff17 	bl	8000bd0 <updateLedsType_1>
		break;
 8000da2:	bf00      	nop
}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20023998 	.word	0x20023998
 8000db0:	20000009 	.word	0x20000009
 8000db4:	20056cb4 	.word	0x20056cb4

08000db8 <lerp>:

float lerp(float A, float B, float Alpha)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000dc6:	ed87 1a01 	vstr	s2, [r7, #4]
	return A + Alpha * (B - A);
 8000dca:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dde:	edd7 7a03 	vldr	s15, [r7, #12]
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000de6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <ComputeOptimalPoints>:

void ComputeOptimalPoints()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
// Calculation based on https://glennmessersmith.com/shiftpt.html
	const uint16_t MinRPM = 3000;
 8000dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
	const uint16_t MaxRPM = 12000;
 8000e00:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000e04:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		OptimalShiftUpRPM[i]=UpRPM;
		//OptimalGearDownRPM.Add(DownRPM);
	}
#else
	for (int i = GEAR_NUMBER - 2; i >= 0; i--)
 8000e06:	2304      	movs	r3, #4
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0a:	e0fa      	b.n	8001002 <ComputeOptimalPoints+0x20e>
	{
		float MinTorqueLoss = MAX_ENGINE_TORQUE * GearRatios[i];
 8000e0c:	4a81      	ldr	r2, [pc, #516]	; (8001014 <ComputeOptimalPoints+0x220>)
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001018 <ComputeOptimalPoints+0x224>
 8000e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float CurrentGearRatio = GearRatios[i];
 8000e24:	4a7b      	ldr	r2, [pc, #492]	; (8001014 <ComputeOptimalPoints+0x220>)
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	623b      	str	r3, [r7, #32]
		float NextGearRatio = GearRatios[i + 1];
 8000e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e32:	3301      	adds	r3, #1
 8000e34:	4a77      	ldr	r2, [pc, #476]	; (8001014 <ComputeOptimalPoints+0x220>)
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61fb      	str	r3, [r7, #28]
		UpRPM = MaxRPM;
 8000e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e40:	86fb      	strh	r3, [r7, #54]	; 0x36
		for (int j = MaxRPM; j > MinRPM; j -= 50)
 8000e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e46:	e0cd      	b.n	8000fe4 <ComputeOptimalPoints+0x1f0>
		{
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4a:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000e4e:	4a73      	ldr	r2, [pc, #460]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e50:	fb82 1203 	smull	r1, r2, r2, r3
 8000e54:	1192      	asrs	r2, r2, #6
 8000e56:	17db      	asrs	r3, r3, #31
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	4a71      	ldr	r2, [pc, #452]	; (8001020 <ComputeOptimalPoints+0x22c>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					torque[(j - 2000) / 1000], (j % 1000) / 1000.0f);
 8000e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e68:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000e6c:	4a6b      	ldr	r2, [pc, #428]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1192      	asrs	r2, r2, #6
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a69      	ldr	r2, [pc, #420]	; (8001020 <ComputeOptimalPoints+0x22c>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
					torque[(j - 2000) / 1000], (j % 1000) / 1000.0f);
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	4a65      	ldr	r2, [pc, #404]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	1191      	asrs	r1, r2, #6
 8000e8e:	17da      	asrs	r2, r3, #31
 8000e90:	1a8a      	subs	r2, r1, r2
 8000e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e96:	fb01 f202 	mul.w	r2, r1, r2
 8000e9a:	1a9a      	subs	r2, r3, r2
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e9c:	ee07 2a90 	vmov	s15, r2
 8000ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea4:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8001024 <ComputeOptimalPoints+0x230>
 8000ea8:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000eac:	eeb0 1a46 	vmov.f32	s2, s12
 8000eb0:	eef0 0a66 	vmov.f32	s1, s13
 8000eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8000eb8:	f7ff ff7e 	bl	8000db8 <lerp>
 8000ebc:	ed87 0a06 	vstr	s0, [r7, #24]
			// calculate current torque on gearbox output
			float CurrentGearTorque = EngineTorque * CurrentGearRatio;
 8000ec0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ec4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ecc:	edc7 7a05 	vstr	s15, [r7, #20]
			// calculate engine RPM on next gear
			uint16_t NextRPM = NextGearRatio * j / CurrentGearRatio;
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ede:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ee2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eee:	ee17 3a90 	vmov	r3, s15
 8000ef2:	827b      	strh	r3, [r7, #18]
			if (NextRPM < MinRPM)
 8000ef4:	8a7a      	ldrh	r2, [r7, #18]
 8000ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d36f      	bcc.n	8000fdc <ComputeOptimalPoints+0x1e8>
			{
				continue;
			}
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000efc:	8a7b      	ldrh	r3, [r7, #18]
 8000efe:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000f02:	4a46      	ldr	r2, [pc, #280]	; (800101c <ComputeOptimalPoints+0x228>)
 8000f04:	fb82 1203 	smull	r1, r2, r2, r3
 8000f08:	1192      	asrs	r2, r2, #6
 8000f0a:	17db      	asrs	r3, r3, #31
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	4a44      	ldr	r2, [pc, #272]	; (8001020 <ComputeOptimalPoints+0x22c>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					torque[(NextRPM - 2000) / 1000],
 8000f1a:	8a7b      	ldrh	r3, [r7, #18]
 8000f1c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000f20:	4a3e      	ldr	r2, [pc, #248]	; (800101c <ComputeOptimalPoints+0x228>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	1192      	asrs	r2, r2, #6
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	4a3c      	ldr	r2, [pc, #240]	; (8001020 <ComputeOptimalPoints+0x22c>)
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
					(NextRPM % 1000) / 1000.0f);
 8000f38:	8a7b      	ldrh	r3, [r7, #18]
 8000f3a:	4a38      	ldr	r2, [pc, #224]	; (800101c <ComputeOptimalPoints+0x228>)
 8000f3c:	fba2 1203 	umull	r1, r2, r2, r3
 8000f40:	0992      	lsrs	r2, r2, #6
 8000f42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f46:	fb01 f202 	mul.w	r2, r1, r2
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	ee07 3a90 	vmov	s15, r3
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	eddf 5a33 	vldr	s11, [pc, #204]	; 8001024 <ComputeOptimalPoints+0x230>
 8000f5a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000f5e:	eeb0 1a46 	vmov.f32	s2, s12
 8000f62:	eef0 0a66 	vmov.f32	s1, s13
 8000f66:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6a:	f7ff ff25 	bl	8000db8 <lerp>
 8000f6e:	ed87 0a03 	vstr	s0, [r7, #12]
			// calculate torque on gearbox outpur on next gear
			float NextGearTorque = NextGearEngineTorque * NextGearRatio;
 8000f72:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f76:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	edc7 7a02 	vstr	s15, [r7, #8]
			float deltaTorque = CurrentGearTorque - NextGearTorque;
 8000f82:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc7 7a01 	vstr	s15, [r7, #4]
			float absDeltaTorque =
					deltaTorque < 0.0f ? -deltaTorque : deltaTorque;
 8000f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d504      	bpl.n	8000faa <ComputeOptimalPoints+0x1b6>
 8000fa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa4:	eef1 7a67 	vneg.f32	s15, s15
 8000fa8:	e001      	b.n	8000fae <ComputeOptimalPoints+0x1ba>
 8000faa:	edd7 7a01 	vldr	s15, [r7, #4]
			float absDeltaTorque =
 8000fae:	edc7 7a00 	vstr	s15, [r7]
			if (absDeltaTorque < MinTorqueLoss)
 8000fb2:	ed97 7a00 	vldr	s14, [r7]
 8000fb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	d503      	bpl.n	8000fcc <ComputeOptimalPoints+0x1d8>
			{
				UpRPM = j;
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	86fb      	strh	r3, [r7, #54]	; 0x36
				MinTorqueLoss = absDeltaTorque;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if (deltaTorque > 0.0f)
 8000fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	dc0a      	bgt.n	8000ff0 <ComputeOptimalPoints+0x1fc>
 8000fda:	e000      	b.n	8000fde <ComputeOptimalPoints+0x1ea>
				continue;
 8000fdc:	bf00      	nop
		for (int j = MaxRPM; j > MinRPM; j -= 50)
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	3b32      	subs	r3, #50	; 0x32
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f73f af2d 	bgt.w	8000e48 <ComputeOptimalPoints+0x54>
 8000fee:	e000      	b.n	8000ff2 <ComputeOptimalPoints+0x1fe>
			{
				break;
 8000ff0:	bf00      	nop
			}
		}
		OptimalShiftUpRPM[i] = UpRPM;
 8000ff2:	490d      	ldr	r1, [pc, #52]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ff8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = GEAR_NUMBER - 2; i >= 0; i--)
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffe:	3b01      	subs	r3, #1
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
 8001002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001004:	2b00      	cmp	r3, #0
 8001006:	f6bf af01 	bge.w	8000e0c <ComputeOptimalPoints+0x18>
		//OptimalGearDownRPM.Add(DownRPM);
	}
#endif
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3738      	adds	r7, #56	; 0x38
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0802b44c 	.word	0x0802b44c
 8001018:	428c0000 	.word	0x428c0000
 800101c:	10624dd3 	.word	0x10624dd3
 8001020:	0802b464 	.word	0x0802b464
 8001024:	447a0000 	.word	0x447a0000
 8001028:	20056cb4 	.word	0x20056cb4

0800102c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_ADC1_Init+0x98>)
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_ADC1_Init+0xa0>)
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_ADC1_Init+0x98>)
 800107a:	2201      	movs	r2, #1
 800107c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001088:	2201      	movs	r2, #1
 800108a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_ADC1_Init+0x98>)
 800108e:	f009 fae9 	bl	800a664 <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001098:	f001 fbe0 	bl	800285c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800109c:	230b      	movs	r3, #11
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010a4:	2307      	movs	r3, #7
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC1_Init+0x98>)
 80010ae:	f009 fc83 	bl	800a9b8 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010b8:	f001 fbd0 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20056cc0 	.word	0x20056cc0
 80010c8:	40012000 	.word	0x40012000
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a15      	ldr	r2, [pc, #84]	; (8001144 <HAL_ADC_MspInit+0x74>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d123      	bne.n	800113a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_ADC_MspInit+0x78>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <HAL_ADC_MspInit+0x78>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_ADC_MspInit+0x78>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_ADC_MspInit+0x78>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_ADC_MspInit+0x78>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_ADC_MspInit+0x78>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001122:	2302      	movs	r3, #2
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_ADC_MspInit+0x7c>)
 8001136:	f00b fbb7 	bl	800c8a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40012000 	.word	0x40012000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800

08001150 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <FLASH_QSPI_Init+0x70>)
 8001156:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <FLASH_QSPI_Init+0x74>)
 8001158:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 800115a:	4819      	ldr	r0, [pc, #100]	; (80011c0 <FLASH_QSPI_Init+0x70>)
 800115c:	f00c faf4 	bl	800d748 <HAL_QSPI_DeInit>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e028      	b.n	80011bc <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 800116a:	f001 fb7d 	bl	8002868 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 800116e:	f000 f82b 	bl	80011c8 <FLASH_QSPI_ResetChip>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e01f      	b.n	80011bc <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f009 fa4d 	bl	800a61c <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 8001182:	f000 f87f 	bl	8001284 <FLASH_QSPI_AutoPollingMemReady>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e015      	b.n	80011bc <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8001190:	f000 f8b0 	bl	80012f4 <FLASH_QSPI_WriteEnable>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 800119e:	f000 f8f3 	bl	8001388 <FLASH_QSPI_Configuration>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e007      	b.n	80011bc <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 80011ac:	f000 f962 	bl	8001474 <FLASH_QSPI_EnableMemoryMappedMode>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20056ec0 	.word	0x20056ec0
 80011c4:	a0001000 	.word	0xa0001000

080011c8 <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b090      	sub	sp, #64	; 0x40
 80011cc:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 80011d2:	2366      	movs	r3, #102	; 0x66
 80011d4:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011da:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80011dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4619      	mov	r1, r3
 800120a:	481d      	ldr	r0, [pc, #116]	; (8001280 <FLASH_QSPI_ResetChip+0xb8>)
 800120c:	f00c fc7a 	bl	800db04 <HAL_QSPI_Command>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e02e      	b.n	8001278 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 800121a:	2300      	movs	r3, #0
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800121e:	e003      	b.n	8001228 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 8001220:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8001222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001224:	3301      	adds	r3, #1
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800122a:	2b2e      	cmp	r3, #46	; 0x2e
 800122c:	d9f8      	bls.n	8001220 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 800122e:	2399      	movs	r3, #153	; 0x99
 8001230:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001236:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800124a:	2300      	movs	r3, #0
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	; (8001280 <FLASH_QSPI_ResetChip+0xb8>)
 8001268:	f00c fc4c 	bl	800db04 <HAL_QSPI_Command>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3740      	adds	r7, #64	; 0x40
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20056ec0 	.word	0x20056ec0

08001284 <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 800128a:	2305      	movs	r3, #5
 800128c:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800128e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800129c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80012aa:	2300      	movs	r3, #0
 80012ac:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80012ae:	2300      	movs	r3, #0
 80012b0:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80012c2:	2310      	movs	r3, #16
 80012c4:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80012c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ca:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80012cc:	463a      	mov	r2, r7
 80012ce:	f107 0118 	add.w	r1, r7, #24
 80012d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 80012d8:	f00c fda1 	bl	800de1e <HAL_QSPI_AutoPolling>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3750      	adds	r7, #80	; 0x50
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20056ec0 	.word	0x20056ec0

080012f4 <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80012fa:	2306      	movs	r3, #6
 80012fc:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80012fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001308:	2300      	movs	r3, #0
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001318:	2300      	movs	r3, #0
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800131c:	2300      	movs	r3, #0
 800131e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	f241 3288 	movw	r2, #5000	; 0x1388
 8001328:	4619      	mov	r1, r3
 800132a:	4816      	ldr	r0, [pc, #88]	; (8001384 <FLASH_QSPI_WriteEnable+0x90>)
 800132c:	f00c fbea 	bl	800db04 <HAL_QSPI_Command>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e01f      	b.n	800137a <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 800133a:	2302      	movs	r3, #2
 800133c:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 800133e:	2302      	movs	r3, #2
 8001340:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 800134a:	2310      	movs	r3, #16
 800134c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800134e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001352:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8001354:	2305      	movs	r3, #5
 8001356:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800135e:	463a      	mov	r2, r7
 8001360:	f107 0118 	add.w	r1, r7, #24
 8001364:	f241 3388 	movw	r3, #5000	; 0x1388
 8001368:	4806      	ldr	r0, [pc, #24]	; (8001384 <FLASH_QSPI_WriteEnable+0x90>)
 800136a:	f00c fd58 	bl	800de1e <HAL_QSPI_AutoPolling>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3750      	adds	r7, #80	; 0x50
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20056ec0 	.word	0x20056ec0

08001388 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b090      	sub	sp, #64	; 0x40
 800138c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 800138e:	2335      	movs	r3, #53	; 0x35
 8001390:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001396:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80013a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013ae:	2300      	movs	r3, #0
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c2:	4619      	mov	r1, r3
 80013c4:	482a      	ldr	r0, [pc, #168]	; (8001470 <FLASH_QSPI_Configuration+0xe8>)
 80013c6:	f00c fb9d 	bl	800db04 <HAL_QSPI_Command>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e049      	b.n	8001468 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4619      	mov	r1, r3
 80013dc:	4824      	ldr	r0, [pc, #144]	; (8001470 <FLASH_QSPI_Configuration+0xe8>)
 80013de:	f00c fc81 	bl	800dce4 <HAL_QSPI_Receive>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e03d      	b.n	8001468 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 80013ec:	f7ff ff82 	bl	80012f4 <FLASH_QSPI_WriteEnable>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e036      	b.n	8001468 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	b2db      	uxtb	r3, r3
 8001402:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 8001404:	2331      	movs	r3, #49	; 0x31
 8001406:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140c:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001416:	2300      	movs	r3, #0
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800141a:	2300      	movs	r3, #0
 800141c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <FLASH_QSPI_Configuration+0xe8>)
 800143c:	f00c fb62 	bl	800db04 <HAL_QSPI_Command>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001450:	4619      	mov	r1, r3
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <FLASH_QSPI_Configuration+0xe8>)
 8001454:	f00c fbb4 	bl	800dbc0 <HAL_QSPI_Transmit>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 800145e:	f001 f9fd 	bl	800285c <Error_Handler>
		return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3740      	adds	r7, #64	; 0x40
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20056ec0 	.word	0x20056ec0

08001474 <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b090      	sub	sp, #64	; 0x40
 8001478:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 800147a:	23eb      	movs	r3, #235	; 0xeb
 800147c:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800147e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001482:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 800148a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800149c:	2300      	movs	r3, #0
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 80014a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 80014aa:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 80014b8:	2304      	movs	r3, #4
 80014ba:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 80014c0:	463a      	mov	r2, r7
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4619      	mov	r1, r3
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 80014ca:	f00c fd1f 	bl	800df0c <HAL_QSPI_MemoryMapped>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3740      	adds	r7, #64	; 0x40
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20056ec0 	.word	0x20056ec0

080014e8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <MX_CAN1_Init+0x9c>)
 80014f0:	4a25      	ldr	r2, [pc, #148]	; (8001588 <MX_CAN1_Init+0xa0>)
 80014f2:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 9;
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <MX_CAN1_Init+0x9c>)
 80014f6:	2209      	movs	r2, #9
 80014f8:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <MX_CAN1_Init+0x9c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <MX_CAN1_Init+0x9c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <MX_CAN1_Init+0x9c>)
 8001508:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800150c:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <MX_CAN1_Init+0x9c>)
 8001510:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001514:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_CAN1_Init+0x9c>)
 8001518:	2200      	movs	r2, #0
 800151a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <MX_CAN1_Init+0x9c>)
 800151e:	2200      	movs	r2, #0
 8001520:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_CAN1_Init+0x9c>)
 8001524:	2200      	movs	r2, #0
 8001526:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_CAN1_Init+0x9c>)
 800152a:	2201      	movs	r2, #1
 800152c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_CAN1_Init+0x9c>)
 8001530:	2200      	movs	r2, #0
 8001532:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_CAN1_Init+0x9c>)
 8001536:	2200      	movs	r2, #0
 8001538:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800153a:	4812      	ldr	r0, [pc, #72]	; (8001584 <MX_CAN1_Init+0x9c>)
 800153c:	f009 fc80 	bl	800ae40 <HAL_CAN_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_CAN1_Init+0x62>
	{
		Error_Handler();
 8001546:	f001 f989 	bl	800285c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800154a:	2301      	movs	r3, #1
 800154c:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 8; // which filter bank to use from the assigned ones
 800154e:	2308      	movs	r3, #8
 8001550:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 800156e:	230a      	movs	r3, #10
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001572:	463b      	mov	r3, r7
 8001574:	4619      	mov	r1, r3
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_CAN1_Init+0x9c>)
 8001578:	f009 fd5e 	bl	800b038 <HAL_CAN_ConfigFilter>
	//HAL_CAN_Start(&hcan1);

	/* USER CODE END CAN1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20056d30 	.word	0x20056d30
 8001588:	40006400 	.word	0x40006400

0800158c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <MX_CAN2_Init+0xa0>)
 8001594:	4a26      	ldr	r2, [pc, #152]	; (8001630 <MX_CAN2_Init+0xa4>)
 8001596:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <MX_CAN2_Init+0xa0>)
 800159a:	2209      	movs	r2, #9
 800159c:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <MX_CAN2_Init+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_CAN2_Init+0xa0>)
 80015a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015aa:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_CAN2_Init+0xa0>)
 80015ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015b2:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_CAN2_Init+0xa0>)
 80015b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015ba:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_CAN2_Init+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_CAN2_Init+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_CAN2_Init+0xa0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_CAN2_Init+0xa0>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_CAN2_Init+0xa0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_CAN2_Init+0xa0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <MX_CAN2_Init+0xa0>)
 80015e2:	f009 fc2d 	bl	800ae40 <HAL_CAN_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 80015ec:	f001 f936 	bl	800285c <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 80015f4:	2312      	movs	r3, #18
 80015f6:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8001614:	230a      	movs	r3, #10
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8001618:	463b      	mov	r3, r7
 800161a:	4619      	mov	r1, r3
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_CAN2_Init+0xa0>)
 800161e:	f009 fd0b 	bl	800b038 <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

	/* USER CODE END CAN2_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20056d08 	.word	0x20056d08
 8001630:	40006800 	.word	0x40006800

08001634 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (canHandle->Instance == CAN1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_CAN_MspInit+0x150>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d13a      	bne.n	80016cc <HAL_CAN_MspInit+0x98>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 8001656:	4b4c      	ldr	r3, [pc, #304]	; (8001788 <HAL_CAN_MspInit+0x154>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	4a4a      	ldr	r2, [pc, #296]	; (8001788 <HAL_CAN_MspInit+0x154>)
 800165e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8001660:	4b49      	ldr	r3, [pc, #292]	; (8001788 <HAL_CAN_MspInit+0x154>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d10b      	bne.n	8001680 <HAL_CAN_MspInit+0x4c>
		{
			__HAL_RCC_CAN1_CLK_ENABLE();
 8001668:	4b48      	ldr	r3, [pc, #288]	; (800178c <HAL_CAN_MspInit+0x158>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	4a47      	ldr	r2, [pc, #284]	; (800178c <HAL_CAN_MspInit+0x158>)
 800166e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001672:	6413      	str	r3, [r2, #64]	; 0x40
 8001674:	4b45      	ldr	r3, [pc, #276]	; (800178c <HAL_CAN_MspInit+0x158>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	623b      	str	r3, [r7, #32]
 800167e:	6a3b      	ldr	r3, [r7, #32]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b42      	ldr	r3, [pc, #264]	; (800178c <HAL_CAN_MspInit+0x158>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_CAN_MspInit+0x158>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b3f      	ldr	r3, [pc, #252]	; (800178c <HAL_CAN_MspInit+0x158>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	69fb      	ldr	r3, [r7, #28]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8001698:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016aa:	2309      	movs	r3, #9
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	4836      	ldr	r0, [pc, #216]	; (8001790 <HAL_CAN_MspInit+0x15c>)
 80016b6:	f00b f8f7 	bl	800c8a8 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2103      	movs	r1, #3
 80016be:	2014      	movs	r0, #20
 80016c0:	f00a fa2e 	bl	800bb20 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016c4:	2014      	movs	r0, #20
 80016c6:	f00a fa47 	bl	800bb58 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 80016ca:	e056      	b.n	800177a <HAL_CAN_MspInit+0x146>
	else if (canHandle->Instance == CAN2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a30      	ldr	r2, [pc, #192]	; (8001794 <HAL_CAN_MspInit+0x160>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d151      	bne.n	800177a <HAL_CAN_MspInit+0x146>
		__HAL_RCC_CAN3_CLK_ENABLE();
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_CAN_MspInit+0x158>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a2c      	ldr	r2, [pc, #176]	; (800178c <HAL_CAN_MspInit+0x158>)
 80016dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_CAN_MspInit+0x158>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN2_CLK_ENABLE();
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_CAN_MspInit+0x158>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a26      	ldr	r2, [pc, #152]	; (800178c <HAL_CAN_MspInit+0x158>)
 80016f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_CAN_MspInit+0x158>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
		HAL_RCC_CAN1_CLK_ENABLED++;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_CAN_MspInit+0x154>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_CAN_MspInit+0x154>)
 800170e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_CAN_MspInit+0x154>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d10b      	bne.n	8001730 <HAL_CAN_MspInit+0xfc>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_CAN_MspInit+0x158>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <HAL_CAN_MspInit+0x158>)
 800171e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001722:	6413      	str	r3, [r2, #64]	; 0x40
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_CAN_MspInit+0x158>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_CAN_MspInit+0x158>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_CAN_MspInit+0x158>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_CAN_MspInit+0x158>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001748:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800175a:	2309      	movs	r3, #9
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <HAL_CAN_MspInit+0x164>)
 8001766:	f00b f89f 	bl	800c8a8 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2103      	movs	r1, #3
 800176e:	2040      	movs	r0, #64	; 0x40
 8001770:	f00a f9d6 	bl	800bb20 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001774:	2040      	movs	r0, #64	; 0x40
 8001776:	f00a f9ef 	bl	800bb58 <HAL_NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3738      	adds	r7, #56	; 0x38
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40006400 	.word	0x40006400
 8001788:	20000270 	.word	0x20000270
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	40006800 	.word	0x40006800
 8001798:	40020400 	.word	0x40020400

0800179c <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b091      	sub	sp, #68	; 0x44
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	f107 0214 	add.w	r2, r7, #20
 80017ac:	2100      	movs	r1, #0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f009 fd72 	bl	800b298 <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10f      	bne.n	80017de <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	{
		//ComputeEcumasterFrame(RxHeader, RxData);
		ComputeInternalFrame(RxHeader, RxData);
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	9303      	str	r3, [sp, #12]
 80017c4:	466c      	mov	r4, sp
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d8:	f000 f916 	bl	8001a08 <ComputeInternalFrame>
	else
	{
		//ComputeInternalFrame(RxHeader, RxData);
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}
 80017dc:	e00e      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeEcumasterFrame(RxHeader, RxData);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	9303      	str	r3, [sp, #12]
 80017e4:	466c      	mov	r4, sp
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f8:	f000 f806 	bl	8001808 <ComputeEcumasterFrame>
}
 80017fc:	bf00      	nop
 80017fe:	3734      	adds	r7, #52	; 0x34
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	40006400 	.word	0x40006400

08001808 <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 8001808:	b084      	sub	sp, #16
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
 800180e:	f107 0c08 	add.w	ip, r7, #8
 8001812:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == Frame1)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800181c:	d121      	bne.n	8001862 <ComputeEcumasterFrame+0x5a>
	{
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 800181e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001820:	f000 f918 	bl	8001a54 <LittleToBigEndian>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 800182a:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	789a      	ldrb	r2, [r3, #2]
 8001830:	4b71      	ldr	r3, [pc, #452]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001832:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	78da      	ldrb	r2, [r3, #3]
 8001838:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 800183a:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	3304      	adds	r3, #4
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f907 	bl	8001a54 <LittleToBigEndian>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 800184c:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	3306      	adds	r3, #6
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f8fe 	bl	8001a54 <LittleToBigEndian>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 800185e:	80da      	strh	r2, [r3, #6]
			}
			//gear = RxData[1];
			//EcuData.clt = RxData[0];
		}
	}
}
 8001860:	e0c3      	b.n	80019ea <ComputeEcumasterFrame+0x1e2>
	else if (RxHeader.StdId == Frame3)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f240 6202 	movw	r2, #1538	; 0x602
 8001868:	4293      	cmp	r3, r2
 800186a:	d122      	bne.n	80018b2 <ComputeEcumasterFrame+0xaa>
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 800186c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800186e:	f000 f8f1 	bl	8001a54 <LittleToBigEndian>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001878:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	78da      	ldrb	r2, [r3, #3]
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001880:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4] * 0.0625f;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	3304      	adds	r3, #4
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001890:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80019fc <ComputeEcumasterFrame+0x1f4>
 8001894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001898:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 800189a:	edc3 7a03 	vstr	s15, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	3306      	adds	r3, #6
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f8d6 	bl	8001a54 <LittleToBigEndian>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 80018ae:	821a      	strh	r2, [r3, #16]
}
 80018b0:	e09b      	b.n	80019ea <ComputeEcumasterFrame+0x1e2>
	else if (RxHeader.StdId == Frame4)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f240 6203 	movw	r2, #1539	; 0x603
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d123      	bne.n	8001904 <ComputeEcumasterFrame+0xfc>
		EcuData.ignAngle = RxData[0];
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b25a      	sxtb	r2, r3
 80018c2:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 80018c4:	749a      	strb	r2, [r3, #18]
		EcuData.ignDwell = RxData[1];
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	785a      	ldrb	r2, [r3, #1]
 80018ca:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 80018cc:	74da      	strb	r2, [r3, #19]
		EcuData.lambda = RxData[2];
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	789a      	ldrb	r2, [r3, #2]
 80018d2:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 80018d4:	751a      	strb	r2, [r3, #20]
		EcuData.lambdaCorrection = RxData[3];
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	78da      	ldrb	r2, [r3, #3]
 80018da:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 80018dc:	755a      	strb	r2, [r3, #21]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	3304      	adds	r3, #4
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f8b6 	bl	8001a54 <LittleToBigEndian>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 80018ee:	82da      	strh	r2, [r3, #22]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	3306      	adds	r3, #6
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f8ad 	bl	8001a54 <LittleToBigEndian>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001900:	831a      	strh	r2, [r3, #24]
}
 8001902:	e072      	b.n	80019ea <ComputeEcumasterFrame+0x1e2>
	else if (RxHeader.StdId == Frame5)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f240 6204 	movw	r2, #1540	; 0x604
 800190a:	4293      	cmp	r3, r2
 800190c:	d129      	bne.n	8001962 <ComputeEcumasterFrame+0x15a>
		EcuData.gear = RxData[0];
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001914:	769a      	strb	r2, [r3, #26]
		EcuData.ecuTemp = RxData[1];
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	3301      	adds	r3, #1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b25a      	sxtb	r2, r3
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001920:	76da      	strb	r2, [r3, #27]
		EcuData.batt = LittleToBigEndian(&RxData[2]) * 0.027f;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	3302      	adds	r3, #2
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f894 	bl	8001a54 <LittleToBigEndian>
 800192c:	4603      	mov	r3, r0
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001936:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001a00 <ComputeEcumasterFrame+0x1f8>
 800193a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193e:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001940:	edc3 7a07 	vstr	s15, [r3, #28]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	3305      	adds	r3, #5
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f883 	bl	8001a54 <LittleToBigEndian>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001954:	841a      	strh	r2, [r3, #32]
		EcuData.flags1 = RxData[7];
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	79da      	ldrb	r2, [r3, #7]
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 800195c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001960:	e043      	b.n	80019ea <ComputeEcumasterFrame+0x1e2>
	else if (RxHeader.StdId == Frame6)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f240 6205 	movw	r2, #1541	; 0x605
 8001968:	4293      	cmp	r3, r2
 800196a:	d127      	bne.n	80019bc <ComputeEcumasterFrame+0x1b4>
		EcuData.DBWPosition = RxData[0];
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001972:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		EcuData.DBWTrigger = RxData[1];
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	785a      	ldrb	r2, [r3, #1]
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 800197c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3302      	adds	r3, #2
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f865 	bl	8001a54 <LittleToBigEndian>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 8001990:	84da      	strh	r2, [r3, #38]	; 0x26
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	3304      	adds	r3, #4
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f85c 	bl	8001a54 <LittleToBigEndian>
 800199c:	4603      	mov	r3, r0
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 80019a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		EcuData.TCTorqueReduction = RxData[6];
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	799a      	ldrb	r2, [r3, #6]
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 80019ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		EcuData.PitLimitTorqueReduction = RxData[7];
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	79da      	ldrb	r2, [r3, #7]
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <ComputeEcumasterFrame+0x1f0>)
 80019b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 80019ba:	e016      	b.n	80019ea <ComputeEcumasterFrame+0x1e2>
	else if (RxHeader.StdId == 768)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019c2:	d112      	bne.n	80019ea <ComputeEcumasterFrame+0x1e2>
			telemetryData.gear = RxData[1];
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	785a      	ldrb	r2, [r3, #1]
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <ComputeEcumasterFrame+0x1fc>)
 80019ca:	701a      	strb	r2, [r3, #0]
			if (telemetryData.gear == 0)
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <ComputeEcumasterFrame+0x1fc>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d103      	bne.n	80019dc <ComputeEcumasterFrame+0x1d4>
				telemetryData.gear = 1;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <ComputeEcumasterFrame+0x1fc>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
}
 80019da:	e006      	b.n	80019ea <ComputeEcumasterFrame+0x1e2>
			else if (telemetryData.gear == 1)
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <ComputeEcumasterFrame+0x1fc>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <ComputeEcumasterFrame+0x1e2>
				telemetryData.gear = 0;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <ComputeEcumasterFrame+0x1fc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019f2:	b004      	add	sp, #16
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2002396c 	.word	0x2002396c
 80019fc:	3d800000 	.word	0x3d800000
 8001a00:	3cdd2f1b 	.word	0x3cdd2f1b
 8001a04:	20023998 	.word	0x20023998

08001a08 <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 8001a08:	b084      	sub	sp, #16
 8001a0a:	b490      	push	{r4, r7}
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	f107 0408 	add.w	r4, r7, #8
 8001a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (RxHeader.StdId == 768)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a1c:	d112      	bne.n	8001a44 <ComputeInternalFrame+0x3c>
	{
		telemetryData.gear = RxData[1];
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	785a      	ldrb	r2, [r3, #1]
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <ComputeInternalFrame+0x48>)
 8001a24:	701a      	strb	r2, [r3, #0]
		if (telemetryData.gear == 0)
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <ComputeInternalFrame+0x48>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <ComputeInternalFrame+0x2e>
		{
			telemetryData.gear = 1;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <ComputeInternalFrame+0x48>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
		else if (telemetryData.gear == 1)
		{
			telemetryData.gear = 0;
		}
	}
}
 8001a34:	e006      	b.n	8001a44 <ComputeInternalFrame+0x3c>
		else if (telemetryData.gear == 1)
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <ComputeInternalFrame+0x48>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <ComputeInternalFrame+0x3c>
			telemetryData.gear = 0;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <ComputeInternalFrame+0x48>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc90      	pop	{r4, r7}
 8001a4a:	b004      	add	sp, #16
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20023998 	.word	0x20023998

08001a54 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] + data[1] * 0xFF;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	0209      	lsls	r1, r1, #8
 8001a6e:	1acb      	subs	r3, r1, r3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	81fb      	strh	r3, [r7, #14]
	return returnData;
 8001a76:	89fb      	ldrh	r3, [r7, #14]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <MX_CRC_Init+0x3c>)
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <MX_CRC_Init+0x40>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_CRC_Init+0x3c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <MX_CRC_Init+0x3c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_CRC_Init+0x3c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MX_CRC_Init+0x3c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_CRC_Init+0x3c>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_CRC_Init+0x3c>)
 8001aae:	f00a f86f 	bl	800bb90 <HAL_CRC_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001ab8:	f000 fed0 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20056d58 	.word	0x20056d58
 8001ac4:	40023000 	.word	0x40023000

08001ac8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_CRC_MspInit+0x38>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10b      	bne.n	8001af2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_CRC_MspInit+0x3c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_CRC_MspInit+0x3c>)
 8001ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_CRC_MspInit+0x3c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40023000 	.word	0x40023000
 8001b04:	40023800 	.word	0x40023800

08001b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <MX_DMA_Init+0x48>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <MX_DMA_Init+0x48>)
 8001b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <MX_DMA_Init+0x48>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2103      	movs	r1, #3
 8001b2a:	200b      	movs	r0, #11
 8001b2c:	f009 fff8 	bl	800bb20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b30:	200b      	movs	r0, #11
 8001b32:	f00a f811 	bl	800bb58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2103      	movs	r1, #3
 8001b3a:	200f      	movs	r0, #15
 8001b3c:	f009 fff0 	bl	800bb20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001b40:	200f      	movs	r0, #15
 8001b42:	f00a f809 	bl	800bb58 <HAL_NVIC_EnableIRQ>

}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b5a:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <MX_DMA2D_Init+0x6c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001b96:	f00a fc7f 	bl	800c498 <HAL_DMA2D_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8001ba0:	f000 fe5c 	bl	800285c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_DMA2D_Init+0x68>)
 8001ba8:	f00a fde0 	bl	800c76c <HAL_DMA2D_ConfigLayer>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8001bb2:	f000 fe53 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20056d7c 	.word	0x20056d7c
 8001bc0:	4002b000 	.word	0x4002b000

08001bc4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <HAL_DMA2D_MspInit+0x44>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d113      	bne.n	8001bfe <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_DMA2D_MspInit+0x48>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <HAL_DMA2D_MspInit+0x48>)
 8001bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_DMA2D_MspInit+0x48>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2103      	movs	r1, #3
 8001bf2:	205a      	movs	r0, #90	; 0x5a
 8001bf4:	f009 ff94 	bl	800bb20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bf8:	205a      	movs	r0, #90	; 0x5a
 8001bfa:	f009 ffad 	bl	800bb58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	4002b000 	.word	0x4002b000
 8001c0c:	40023800 	.word	0x40023800

08001c10 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
 8001c24:	615a      	str	r2, [r3, #20]
 8001c26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001c28:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c2a:	4a4b      	ldr	r2, [pc, #300]	; (8001d58 <MX_FMC_Init+0x148>)
 8001c2c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c34:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001c40:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c42:	2210      	movs	r2, #16
 8001c44:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001c46:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c52:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c54:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c60:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001c62:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001c74:	2307      	movs	r3, #7
 8001c76:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001c80:	2303      	movs	r3, #3
 8001c82:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4830      	ldr	r0, [pc, #192]	; (8001d54 <MX_FMC_Init+0x144>)
 8001c92:	f00d fcb5 	bl	800f600 <HAL_SDRAM_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001c9c:	f000 fdde 	bl	800285c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cac:	2210      	movs	r2, #16
 8001cae:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	4926      	ldr	r1, [pc, #152]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cc2:	4824      	ldr	r0, [pc, #144]	; (8001d54 <MX_FMC_Init+0x144>)
 8001cc4:	f00d fcd0 	bl	800f668 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f008 fca7 	bl	800a61c <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001cce:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cea:	491c      	ldr	r1, [pc, #112]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cec:	4819      	ldr	r0, [pc, #100]	; (8001d54 <MX_FMC_Init+0x144>)
 8001cee:	f00d fcbb 	bl	800f668 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001d00:	2208      	movs	r2, #8
 8001d02:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	4913      	ldr	r1, [pc, #76]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001d10:	4810      	ldr	r0, [pc, #64]	; (8001d54 <MX_FMC_Init+0x144>)
 8001d12:	f00d fca9 	bl	800f668 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8001d16:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001d1a:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001d1e:	2204      	movs	r2, #4
 8001d20:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001d24:	2210      	movs	r2, #16
 8001d26:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001d32:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	4908      	ldr	r1, [pc, #32]	; (8001d5c <MX_FMC_Init+0x14c>)
 8001d3a:	4806      	ldr	r0, [pc, #24]	; (8001d54 <MX_FMC_Init+0x144>)
 8001d3c:	f00d fc94 	bl	800f668 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 8001d40:	f240 617c 	movw	r1, #1660	; 0x67c
 8001d44:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_FMC_Init+0x144>)
 8001d46:	f00d fcba 	bl	800f6be <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20056dd4 	.word	0x20056dd4
 8001d58:	a0000140 	.word	0xa0000140
 8001d5c:	20000278 	.word	0x20000278

08001d60 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001d74:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <HAL_FMC_MspInit+0x100>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d16d      	bne.n	8001e58 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001d7c:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_FMC_MspInit+0x100>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_FMC_MspInit+0x104>)
 8001d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d86:	4a37      	ldr	r2, [pc, #220]	; (8001e64 <HAL_FMC_MspInit+0x104>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6393      	str	r3, [r2, #56]	; 0x38
 8001d8e:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_FMC_MspInit+0x104>)
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dac:	230c      	movs	r3, #12
 8001dae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	4619      	mov	r1, r3
 8001db4:	482c      	ldr	r0, [pc, #176]	; (8001e68 <HAL_FMC_MspInit+0x108>)
 8001db6:	f00a fd77 	bl	800c8a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dba:	230c      	movs	r3, #12
 8001dbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dca:	230c      	movs	r3, #12
 8001dcc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4826      	ldr	r0, [pc, #152]	; (8001e6c <HAL_FMC_MspInit+0x10c>)
 8001dd4:	f00a fd68 	bl	800c8a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001de8:	230c      	movs	r3, #12
 8001dea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	481f      	ldr	r0, [pc, #124]	; (8001e70 <HAL_FMC_MspInit+0x110>)
 8001df2:	f00a fd59 	bl	800c8a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001df6:	f248 1311 	movw	r3, #33041	; 0x8111
 8001dfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e08:	230c      	movs	r3, #12
 8001e0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4818      	ldr	r0, [pc, #96]	; (8001e74 <HAL_FMC_MspInit+0x114>)
 8001e12:	f00a fd49 	bl	800c8a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e16:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e28:	230c      	movs	r3, #12
 8001e2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4811      	ldr	r0, [pc, #68]	; (8001e78 <HAL_FMC_MspInit+0x118>)
 8001e32:	f00a fd39 	bl	800c8a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001e36:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001e3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e48:	230c      	movs	r3, #12
 8001e4a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <HAL_FMC_MspInit+0x11c>)
 8001e52:	f00a fd29 	bl	800c8a8 <HAL_GPIO_Init>
 8001e56:	e000      	b.n	8001e5a <HAL_FMC_MspInit+0xfa>
    return;
 8001e58:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000274 	.word	0x20000274
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40021400 	.word	0x40021400
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40020c00 	.word	0x40020c00

08001e80 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001e88:	f7ff ff6a 	bl	8001d60 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of hardwareTASK */
	hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL,
 8001e98:	4a10      	ldr	r2, [pc, #64]	; (8001edc <MX_FREERTOS_Init+0x48>)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <MX_FREERTOS_Init+0x4c>)
 8001e9e:	f00f fb3d 	bl	801151c <osThreadNew>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <MX_FREERTOS_Init+0x50>)
 8001ea6:	6013      	str	r3, [r2, #0]
			&hardwareTASK_attributes);

	/* creation of touchGFXTask */
	touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL,
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <MX_FREERTOS_Init+0x54>)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	480f      	ldr	r0, [pc, #60]	; (8001eec <MX_FREERTOS_Init+0x58>)
 8001eae:	f00f fb35 	bl	801151c <osThreadNew>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <MX_FREERTOS_Init+0x5c>)
 8001eb6:	6013      	str	r3, [r2, #0]
			&touchGFXTask_attributes);

	/* creation of infoLed */
	infoLedHandle = osThreadNew(StartInfoLed, NULL, &infoLed_attributes);
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <MX_FREERTOS_Init+0x60>)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <MX_FREERTOS_Init+0x64>)
 8001ebe:	f00f fb2d 	bl	801151c <osThreadNew>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <MX_FREERTOS_Init+0x68>)
 8001ec6:	6013      	str	r3, [r2, #0]

	/* creation of displayBackligh */
	displayBacklighHandle = osThreadNew(StartDisplayBacklight, NULL,
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <MX_FREERTOS_Init+0x6c>)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <MX_FREERTOS_Init+0x70>)
 8001ece:	f00f fb25 	bl	801151c <osThreadNew>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <MX_FREERTOS_Init+0x74>)
 8001ed6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	0802b470 	.word	0x0802b470
 8001ee0:	08001f0d 	.word	0x08001f0d
 8001ee4:	20056e0c 	.word	0x20056e0c
 8001ee8:	0802b494 	.word	0x0802b494
 8001eec:	08001fa1 	.word	0x08001fa1
 8001ef0:	20056e08 	.word	0x20056e08
 8001ef4:	0802b4b8 	.word	0x0802b4b8
 8001ef8:	08001fb5 	.word	0x08001fb5
 8001efc:	20056e10 	.word	0x20056e10
 8001f00:	0802b4dc 	.word	0x0802b4dc
 8001f04:	08001fd1 	.word	0x08001fd1
 8001f08:	20056e14 	.word	0x20056e14

08001f0c <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartHardwareTask */
	HAL_CAN_Start(&hcan2);
 8001f14:	481c      	ldr	r0, [pc, #112]	; (8001f88 <StartHardwareTask+0x7c>)
 8001f16:	f009 f97b 	bl	800b210 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan1);
 8001f1a:	481c      	ldr	r0, [pc, #112]	; (8001f8c <StartHardwareTask+0x80>)
 8001f1c:	f009 f978 	bl	800b210 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f20:	2102      	movs	r1, #2
 8001f22:	4819      	ldr	r0, [pc, #100]	; (8001f88 <StartHardwareTask+0x7c>)
 8001f24:	f009 faca 	bl	800b4bc <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f28:	2102      	movs	r1, #2
 8001f2a:	4818      	ldr	r0, [pc, #96]	; (8001f8c <StartHardwareTask+0x80>)
 8001f2c:	f009 fac6 	bl	800b4bc <HAL_CAN_ActivateNotification>

	WS2812_Init();
 8001f30:	f7fe fd5a 	bl	80009e8 <WS2812_Init>
	ComputeOptimalPoints();
 8001f34:	f7fe ff5e 	bl	8000df4 <ComputeOptimalPoints>

	osDelay(150);
 8001f38:	2096      	movs	r0, #150	; 0x96
 8001f3a:	f00f fbc7 	bl	80116cc <osDelay>
	uint8_t ledMode = displaySetup.ledBarMode;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <StartHardwareTask+0x84>)
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;)
	{

		if (telemetryData.gear == 0)
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <StartHardwareTask+0x88>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d108      	bne.n	8001f5e <StartHardwareTask+0x52>
		{
			HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f52:	4811      	ldr	r0, [pc, #68]	; (8001f98 <StartHardwareTask+0x8c>)
 8001f54:	f00a ff60 	bl	800ce18 <HAL_GPIO_WritePin>
			ledMode = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e008      	b.n	8001f70 <StartHardwareTask+0x64>
		}
		else
		{
			HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <StartHardwareTask+0x8c>)
 8001f66:	f00a ff57 	bl	800ce18 <HAL_GPIO_WritePin>
			ledMode = displaySetup.ledBarMode;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <StartHardwareTask+0x84>)
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	73fb      	strb	r3, [r7, #15]
		}
		updateLeds(EcuData.rpm, ledMode);
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <StartHardwareTask+0x90>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f7fe fe7a 	bl	8000c74 <updateLeds>

		osDelay(100);
 8001f80:	2064      	movs	r0, #100	; 0x64
 8001f82:	f00f fba3 	bl	80116cc <osDelay>
		if (telemetryData.gear == 0)
 8001f86:	e7dd      	b.n	8001f44 <StartHardwareTask+0x38>
 8001f88:	20056d08 	.word	0x20056d08
 8001f8c:	20056d30 	.word	0x20056d30
 8001f90:	20000004 	.word	0x20000004
 8001f94:	20023998 	.word	0x20023998
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	2002396c 	.word	0x2002396c

08001fa0 <StartTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 8001fa8:	f001 f901 	bl	80031ae <MX_TouchGFX_Process>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f00f fb8d 	bl	80116cc <osDelay>
 8001fb2:	e7fb      	b.n	8001fac <StartTouchGFXTask+0xc>

08001fb4 <StartInfoLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInfoLed */
void StartInfoLed(void *argument)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartInfoLed */
	/* Infinite loop */
	for (;;)
	{
		osDelay(250);
 8001fbc:	20fa      	movs	r0, #250	; 0xfa
 8001fbe:	f00f fb85 	bl	80116cc <osDelay>
		HAL_GPIO_TogglePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin);
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	4801      	ldr	r0, [pc, #4]	; (8001fcc <StartInfoLed+0x18>)
 8001fc6:	f00a ff40 	bl	800ce4a <HAL_GPIO_TogglePin>
		osDelay(250);
 8001fca:	e7f7      	b.n	8001fbc <StartInfoLed+0x8>
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <StartDisplayBacklight>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayBacklight */
void StartDisplayBacklight(void *argument)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	ed2d 8b02 	vpush	{d8}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDisplayBacklight */

	// current set point in mA
	uint8_t setPoint = displaySetup.brightness * 1.5f;
 8001fdc:	4b64      	ldr	r3, [pc, #400]	; (8002170 <StartDisplayBacklight+0x1a0>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff4:	edc7 7a00 	vstr	s15, [r7]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	753b      	strb	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	485d      	ldr	r0, [pc, #372]	; (8002174 <StartDisplayBacklight+0x1a4>)
 8002000:	f00d fcae 	bl	800f960 <HAL_TIM_PWM_Start>
	uint8_t PWM_Pulse = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	75fb      	strb	r3, [r7, #23]
	uint8_t PWM_PulseChange = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	75bb      	strb	r3, [r7, #22]
	float voltage = 0.0f;
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
	float current = 0.0f;
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
	uint8_t delay = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	757b      	strb	r3, [r7, #21]
	osDelay(250);
 800201c:	20fa      	movs	r0, #250	; 0xfa
 800201e:	f00f fb55 	bl	80116cc <osDelay>
	/* Infinite loop */
	for (;;)
	{
		HAL_ADC_Start(&hadc1);
 8002022:	4855      	ldr	r0, [pc, #340]	; (8002178 <StartDisplayBacklight+0x1a8>)
 8002024:	f008 fb62 	bl	800a6ec <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8002028:	210a      	movs	r1, #10
 800202a:	4853      	ldr	r0, [pc, #332]	; (8002178 <StartDisplayBacklight+0x1a8>)
 800202c:	f008 fc2c 	bl	800a888 <HAL_ADC_PollForConversion>

		osDelay(100 - delay);
 8002030:	7d7b      	ldrb	r3, [r7, #21]
 8002032:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002036:	4618      	mov	r0, r3
 8002038:	f00f fb48 	bl	80116cc <osDelay>
		voltage = HAL_ADC_GetValue(&hadc1) * 3.3f / 4095.0f;
 800203c:	484e      	ldr	r0, [pc, #312]	; (8002178 <StartDisplayBacklight+0x1a8>)
 800203e:	f008 fcae 	bl	800a99e <HAL_ADC_GetValue>
 8002042:	ee07 0a90 	vmov	s15, r0
 8002046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800217c <StartDisplayBacklight+0x1ac>
 800204e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002052:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002180 <StartDisplayBacklight+0x1b0>
 8002056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800205a:	edc7 7a04 	vstr	s15, [r7, #16]
		current = voltage / 5.1f * 1000.0f;
 800205e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002062:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002184 <StartDisplayBacklight+0x1b4>
 8002066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002188 <StartDisplayBacklight+0x1b8>
 800206e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002072:	edc7 7a03 	vstr	s15, [r7, #12]

		PWM_PulseChange = (int8_t) round((setPoint - current) / 10.0f);
 8002076:	7d3b      	ldrb	r3, [r7, #20]
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002080:	edd7 7a03 	vldr	s15, [r7, #12]
 8002084:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002088:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800208c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002090:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002094:	eeb0 0b47 	vmov.f64	d0, d7
 8002098:	f023 ff54 	bl	8025f44 <round>
 800209c:	eeb0 7b40 	vmov.f64	d7, d0
 80020a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80020a4:	edc7 7a00 	vstr	s15, [r7]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	75bb      	strb	r3, [r7, #22]
		delay = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	757b      	strb	r3, [r7, #21]
		if (PWM_PulseChange > 10)
 80020b2:	7dbb      	ldrb	r3, [r7, #22]
 80020b4:	2b0a      	cmp	r3, #10
 80020b6:	d951      	bls.n	800215c <StartDisplayBacklight+0x18c>
		{
			while (PWM_PulseChange > 0)
 80020b8:	e04c      	b.n	8002154 <StartDisplayBacklight+0x184>
			{
				PWM_Pulse += fmin(fmin(PWM_PulseChange, PWM_CHANGE),
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80020c4:	7dbb      	ldrb	r3, [r7, #22]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020ce:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80020d2:	eeb0 0b47 	vmov.f64	d0, d7
 80020d6:	f023 feef 	bl	8025eb8 <fmin>
 80020da:	eeb0 6b40 	vmov.f64	d6, d0
						215 - PWM_Pulse);
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
				PWM_Pulse += fmin(fmin(PWM_PulseChange, PWM_CHANGE),
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020ec:	eeb0 1b47 	vmov.f64	d1, d7
 80020f0:	eeb0 0b46 	vmov.f64	d0, d6
 80020f4:	f023 fee0 	bl	8025eb8 <fmin>
 80020f8:	eeb0 7b40 	vmov.f64	d7, d0
 80020fc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002100:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002104:	edc7 7a00 	vstr	s15, [r7]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	75fb      	strb	r3, [r7, #23]
				PWM_PulseChange -= fmin(PWM_PulseChange, PWM_CHANGE);
 800210c:	7dbb      	ldrb	r3, [r7, #22]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002116:	7dbb      	ldrb	r3, [r7, #22]
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002120:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8002124:	eeb0 0b47 	vmov.f64	d0, d7
 8002128:	f023 fec6 	bl	8025eb8 <fmin>
 800212c:	eeb0 7b40 	vmov.f64	d7, d0
 8002130:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002134:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002138:	edc7 7a00 	vstr	s15, [r7]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	75bb      	strb	r3, [r7, #22]
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <StartDisplayBacklight+0x1a4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	7dfa      	ldrb	r2, [r7, #23]
 8002146:	635a      	str	r2, [r3, #52]	; 0x34
				osDelay(5);
 8002148:	2005      	movs	r0, #5
 800214a:	f00f fabf 	bl	80116cc <osDelay>
				delay += 5;
 800214e:	7d7b      	ldrb	r3, [r7, #21]
 8002150:	3305      	adds	r3, #5
 8002152:	757b      	strb	r3, [r7, #21]
			while (PWM_PulseChange > 0)
 8002154:	7dbb      	ldrb	r3, [r7, #22]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1af      	bne.n	80020ba <StartDisplayBacklight+0xea>
 800215a:	e762      	b.n	8002022 <StartDisplayBacklight+0x52>
				delay += 5;
			}
		}
		else
		{
			PWM_Pulse += PWM_PulseChange;
 800215c:	7dfa      	ldrb	r2, [r7, #23]
 800215e:	7dbb      	ldrb	r3, [r7, #22]
 8002160:	4413      	add	r3, r2
 8002162:	75fb      	strb	r3, [r7, #23]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <StartDisplayBacklight+0x1a4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	7dfa      	ldrb	r2, [r7, #23]
 800216a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_ADC_Start(&hadc1);
 800216c:	e759      	b.n	8002022 <StartDisplayBacklight+0x52>
 800216e:	bf00      	nop
 8002170:	20000004 	.word	0x20000004
 8002174:	20056f58 	.word	0x20056f58
 8002178:	20056cc0 	.word	0x20056cc0
 800217c:	40533333 	.word	0x40533333
 8002180:	457ff000 	.word	0x457ff000
 8002184:	40a33333 	.word	0x40a33333
 8002188:	447a0000 	.word	0x447a0000

0800218c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021a2:	4b46      	ldr	r3, [pc, #280]	; (80022bc <MX_GPIO_Init+0x130>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a45      	ldr	r2, [pc, #276]	; (80022bc <MX_GPIO_Init+0x130>)
 80021a8:	f043 0310 	orr.w	r3, r3, #16
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <MX_GPIO_Init+0x130>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	623b      	str	r3, [r7, #32]
 80021b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ba:	4b40      	ldr	r3, [pc, #256]	; (80022bc <MX_GPIO_Init+0x130>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <MX_GPIO_Init+0x130>)
 80021c0:	f043 0320 	orr.w	r3, r3, #32
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <MX_GPIO_Init+0x130>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021d2:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <MX_GPIO_Init+0x130>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a39      	ldr	r2, [pc, #228]	; (80022bc <MX_GPIO_Init+0x130>)
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <MX_GPIO_Init+0x130>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <MX_GPIO_Init+0x130>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a33      	ldr	r2, [pc, #204]	; (80022bc <MX_GPIO_Init+0x130>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <MX_GPIO_Init+0x130>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <MX_GPIO_Init+0x130>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a2d      	ldr	r2, [pc, #180]	; (80022bc <MX_GPIO_Init+0x130>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <MX_GPIO_Init+0x130>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <MX_GPIO_Init+0x130>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a27      	ldr	r2, [pc, #156]	; (80022bc <MX_GPIO_Init+0x130>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <MX_GPIO_Init+0x130>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <MX_GPIO_Init+0x130>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a21      	ldr	r2, [pc, #132]	; (80022bc <MX_GPIO_Init+0x130>)
 8002238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <MX_GPIO_Init+0x130>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <MX_GPIO_Init+0x130>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <MX_GPIO_Init+0x130>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <MX_GPIO_Init+0x130>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2104      	movs	r1, #4
 8002266:	4816      	ldr	r0, [pc, #88]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002268:	f00a fdd6 	bl	800ce18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NEUTRAL_LED_Pin|ESP_PD_Pin, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002272:	4814      	ldr	r0, [pc, #80]	; (80022c4 <MX_GPIO_Init+0x138>)
 8002274:	f00a fdd0 	bl	800ce18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_LED_Pin;
 8002278:	2304      	movs	r3, #4
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIGNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	480c      	ldr	r0, [pc, #48]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002290:	f00a fb0a 	bl	800c8a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NEUTRAL_LED_Pin|ESP_PD_Pin;
 8002294:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_GPIO_Init+0x138>)
 80022ae:	f00a fafb 	bl	800c8a8 <HAL_GPIO_Init>

}
 80022b2:	bf00      	nop
 80022b4:	3738      	adds	r7, #56	; 0x38
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40020800 	.word	0x40020800

080022c8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08e      	sub	sp, #56	; 0x38
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2234      	movs	r2, #52	; 0x34
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f023 ff0f 	bl	80260f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80022da:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <MX_LTDC_Init+0xfc>)
 80022dc:	4a3a      	ldr	r2, [pc, #232]	; (80023c8 <MX_LTDC_Init+0x100>)
 80022de:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022e0:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <MX_LTDC_Init+0xfc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80022e6:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <MX_LTDC_Init+0xfc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80022ec:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <MX_LTDC_Init+0xfc>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <MX_LTDC_Init+0xfc>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 80022f8:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <MX_LTDC_Init+0xfc>)
 80022fa:	2203      	movs	r2, #3
 80022fc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 80022fe:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <MX_LTDC_Init+0xfc>)
 8002300:	2227      	movs	r2, #39	; 0x27
 8002302:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8002304:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <MX_LTDC_Init+0xfc>)
 8002306:	220b      	movs	r2, #11
 8002308:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <MX_LTDC_Init+0xfc>)
 800230c:	222f      	movs	r2, #47	; 0x2f
 800230e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <MX_LTDC_Init+0xfc>)
 8002312:	f240 322b 	movw	r2, #811	; 0x32b
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <MX_LTDC_Init+0xfc>)
 800231a:	f240 220f 	movw	r2, #527	; 0x20f
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 8002320:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <MX_LTDC_Init+0xfc>)
 8002322:	f240 3233 	movw	r2, #819	; 0x333
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <MX_LTDC_Init+0xfc>)
 800232a:	f240 2217 	movw	r2, #535	; 0x217
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <MX_LTDC_Init+0xfc>)
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <MX_LTDC_Init+0xfc>)
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <MX_LTDC_Init+0xfc>)
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002348:	481e      	ldr	r0, [pc, #120]	; (80023c4 <MX_LTDC_Init+0xfc>)
 800234a:	f00a fd99 	bl	800ce80 <HAL_LTDC_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002354:	f000 fa82 	bl	800285c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 800235c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002360:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8002366:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800236a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800236c:	2301      	movs	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002370:	23ff      	movs	r3, #255	; 0xff
 8002372:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800237e:	2305      	movs	r3, #5
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002382:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8002388:	f44f 7348 	mov.w	r3, #800	; 0x320
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800238e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002392:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2200      	movs	r2, #0
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_LTDC_Init+0xfc>)
 80023ae:	f00a feef 	bl	800d190 <HAL_LTDC_ConfigLayer>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80023b8:	f000 fa50 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	3738      	adds	r7, #56	; 0x38
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20056e18 	.word	0x20056e18
 80023c8:	40016800 	.word	0x40016800

080023cc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0b4      	sub	sp, #208	; 0xd0
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e8:	2290      	movs	r2, #144	; 0x90
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f023 fe83 	bl	80260f8 <memset>
  if(ltdcHandle->Instance==LTDC)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4aa6      	ldr	r2, [pc, #664]	; (8002690 <HAL_LTDC_MspInit+0x2c4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	f040 8144 	bne.w	8002686 <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023fe:	2308      	movs	r3, #8
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 8002402:	f240 1317 	movw	r3, #279	; 0x117
 8002406:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8002408:	2303      	movs	r3, #3
 800240a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800240c:	2302      	movs	r3, #2
 800240e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002410:	2300      	movs	r3, #0
 8002412:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002414:	2301      	movs	r3, #1
 8002416:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800241c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002422:	4618      	mov	r0, r3
 8002424:	f00c fcc4 	bl	800edb0 <HAL_RCCEx_PeriphCLKConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 800242e:	f000 fa15 	bl	800285c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002432:	4b98      	ldr	r3, [pc, #608]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a97      	ldr	r2, [pc, #604]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	4b95      	ldr	r3, [pc, #596]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800244a:	4b92      	ldr	r3, [pc, #584]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a91      	ldr	r2, [pc, #580]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002450:	f043 0310 	orr.w	r3, r3, #16
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b8f      	ldr	r3, [pc, #572]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002462:	4b8c      	ldr	r3, [pc, #560]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a8b      	ldr	r2, [pc, #556]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002468:	f043 0320 	orr.w	r3, r3, #32
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b89      	ldr	r3, [pc, #548]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247a:	4b86      	ldr	r3, [pc, #536]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a85      	ldr	r2, [pc, #532]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b83      	ldr	r3, [pc, #524]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	4b80      	ldr	r3, [pc, #512]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a7f      	ldr	r2, [pc, #508]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	4b7a      	ldr	r3, [pc, #488]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a79      	ldr	r2, [pc, #484]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b77      	ldr	r3, [pc, #476]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024c2:	4b74      	ldr	r3, [pc, #464]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a73      	ldr	r2, [pc, #460]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b71      	ldr	r3, [pc, #452]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024da:	4b6e      	ldr	r3, [pc, #440]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a6d      	ldr	r2, [pc, #436]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024e0:	f043 0308 	orr.w	r3, r3, #8
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b6b      	ldr	r3, [pc, #428]	; (8002694 <HAL_LTDC_MspInit+0x2c8>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80024f2:	2370      	movs	r3, #112	; 0x70
 80024f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800250a:	230e      	movs	r3, #14
 800250c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002510:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002514:	4619      	mov	r1, r3
 8002516:	4860      	ldr	r0, [pc, #384]	; (8002698 <HAL_LTDC_MspInit+0x2cc>)
 8002518:	f00a f9c6 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800251c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002536:	230e      	movs	r3, #14
 8002538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800253c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002540:	4619      	mov	r1, r3
 8002542:	4856      	ldr	r0, [pc, #344]	; (800269c <HAL_LTDC_MspInit+0x2d0>)
 8002544:	f00a f9b0 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8002548:	23c1      	movs	r3, #193	; 0xc1
 800254a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002560:	230e      	movs	r3, #14
 8002562:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002566:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800256a:	4619      	mov	r1, r3
 800256c:	484c      	ldr	r0, [pc, #304]	; (80026a0 <HAL_LTDC_MspInit+0x2d4>)
 800256e:	f00a f99b 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002572:	f240 437e 	movw	r3, #1150	; 0x47e
 8002576:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800258c:	230e      	movs	r3, #14
 800258e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002596:	4619      	mov	r1, r3
 8002598:	4842      	ldr	r0, [pc, #264]	; (80026a4 <HAL_LTDC_MspInit+0x2d8>)
 800259a:	f00a f985 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800259e:	2303      	movs	r3, #3
 80025a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80025b6:	2309      	movs	r3, #9
 80025b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025c0:	4619      	mov	r1, r3
 80025c2:	4839      	ldr	r0, [pc, #228]	; (80026a8 <HAL_LTDC_MspInit+0x2dc>)
 80025c4:	f00a f970 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80025c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80025cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025e2:	230e      	movs	r3, #14
 80025e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025ec:	4619      	mov	r1, r3
 80025ee:	482e      	ldr	r0, [pc, #184]	; (80026a8 <HAL_LTDC_MspInit+0x2dc>)
 80025f0:	f00a f95a 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 80025f4:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 80025f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800260e:	230e      	movs	r3, #14
 8002610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002614:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002618:	4619      	mov	r1, r3
 800261a:	4824      	ldr	r0, [pc, #144]	; (80026ac <HAL_LTDC_MspInit+0x2e0>)
 800261c:	f00a f944 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002620:	2348      	movs	r3, #72	; 0x48
 8002622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002638:	230e      	movs	r3, #14
 800263a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800263e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002642:	4619      	mov	r1, r3
 8002644:	481a      	ldr	r0, [pc, #104]	; (80026b0 <HAL_LTDC_MspInit+0x2e4>)
 8002646:	f00a f92f 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800264a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800264e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002664:	2309      	movs	r3, #9
 8002666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800266a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800266e:	4619      	mov	r1, r3
 8002670:	480e      	ldr	r0, [pc, #56]	; (80026ac <HAL_LTDC_MspInit+0x2e0>)
 8002672:	f00a f919 	bl	800c8a8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2103      	movs	r1, #3
 800267a:	2058      	movs	r0, #88	; 0x58
 800267c:	f009 fa50 	bl	800bb20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002680:	2058      	movs	r0, #88	; 0x58
 8002682:	f009 fa69 	bl	800bb58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002686:	bf00      	nop
 8002688:	37d0      	adds	r7, #208	; 0xd0
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40016800 	.word	0x40016800
 8002694:	40023800 	.word	0x40023800
 8002698:	40021000 	.word	0x40021000
 800269c:	40021400 	.word	0x40021400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40021800 	.word	0x40021800
 80026b0:	40020c00 	.word	0x40020c00

080026b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026b8:	f3bf 8f4f 	dsb	sy
}
 80026bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026be:	f3bf 8f6f 	isb	sy
}
 80026c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <SCB_EnableICache+0x48>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80026cc:	f3bf 8f4f 	dsb	sy
}
 80026d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026d2:	f3bf 8f6f 	isb	sy
}
 80026d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <SCB_EnableICache+0x48>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <SCB_EnableICache+0x48>)
 80026de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80026e4:	f3bf 8f4f 	dsb	sy
}
 80026e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026ea:	f3bf 8f6f 	isb	sy
}
 80026ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002704:	f7ff ffd6 	bl	80026b4 <SCB_EnableICache>
 // SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002708:	f007 ff5a 	bl	800a5c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270c:	f000 f824 	bl	8002758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002710:	f7ff fd3c 	bl	800218c <MX_GPIO_Init>
  MX_CRC_Init();
 8002714:	f7ff f9b6 	bl	8001a84 <MX_CRC_Init>
  MX_FMC_Init();
 8002718:	f7ff fa7a 	bl	8001c10 <MX_FMC_Init>
  MX_QUADSPI_Init();
 800271c:	f000 f8a4 	bl	8002868 <MX_QUADSPI_Init>
  MX_LTDC_Init();
 8002720:	f7ff fdd2 	bl	80022c8 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8002724:	f7ff fa16 	bl	8001b54 <MX_DMA2D_Init>
  MX_CAN2_Init();
 8002728:	f7fe ff30 	bl	800158c <MX_CAN2_Init>
  MX_CAN1_Init();
 800272c:	f7fe fedc 	bl	80014e8 <MX_CAN1_Init>
  MX_DMA_Init();
 8002730:	f7ff f9ea 	bl	8001b08 <MX_DMA_Init>
  MX_TIM4_Init();
 8002734:	f000 fb98 	bl	8002e68 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002738:	f000 fb20 	bl	8002d7c <MX_TIM3_Init>
  MX_ADC1_Init();
 800273c:	f7fe fc76 	bl	800102c <MX_ADC1_Init>
  MX_TouchGFX_Init();
 8002740:	f000 fd2f 	bl	80031a2 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 8002744:	f7fe fd04 	bl	8001150 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002748:	f00e fe7e 	bl	8011448 <osKernelInitialize>
  MX_FREERTOS_Init();
 800274c:	f7ff fba2 	bl	8001e94 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002750:	f00e feae 	bl	80114b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002754:	e7fe      	b.n	8002754 <main+0x54>
	...

08002758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b094      	sub	sp, #80	; 0x50
 800275c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275e:	f107 031c 	add.w	r3, r7, #28
 8002762:	2234      	movs	r2, #52	; 0x34
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f023 fcc6 	bl	80260f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276c:	f107 0308 	add.w	r3, r7, #8
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <SystemClock_Config+0xd8>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <SystemClock_Config+0xd8>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002786:	6413      	str	r3, [r2, #64]	; 0x40
 8002788:	4b29      	ldr	r3, [pc, #164]	; (8002830 <SystemClock_Config+0xd8>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <SystemClock_Config+0xdc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a26      	ldr	r2, [pc, #152]	; (8002834 <SystemClock_Config+0xdc>)
 800279a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <SystemClock_Config+0xdc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b6:	2302      	movs	r3, #2
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80027c0:	2319      	movs	r3, #25
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80027c4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80027c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027ca:	2302      	movs	r3, #2
 80027cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80027ce:	2302      	movs	r3, #2
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027d2:	2302      	movs	r3, #2
 80027d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d6:	f107 031c 	add.w	r3, r7, #28
 80027da:	4618      	mov	r0, r3
 80027dc:	f00b fe46 	bl	800e46c <HAL_RCC_OscConfig>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80027e6:	f000 f839 	bl	800285c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027ea:	f00a fee1 	bl	800d5b0 <HAL_PWREx_EnableOverDrive>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80027f4:	f000 f832 	bl	800285c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f8:	230f      	movs	r3, #15
 80027fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027fc:	2302      	movs	r3, #2
 80027fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002804:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800280a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002810:	f107 0308 	add.w	r3, r7, #8
 8002814:	2107      	movs	r1, #7
 8002816:	4618      	mov	r0, r3
 8002818:	f00c f8d6 	bl	800e9c8 <HAL_RCC_ClockConfig>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002822:	f000 f81b 	bl	800285c <Error_Handler>
  }
}
 8002826:	bf00      	nop
 8002828:	3750      	adds	r7, #80	; 0x50
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40007000 	.word	0x40007000

08002838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800284a:	f007 fec7 	bl	800a5dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40001000 	.word	0x40001000

0800285c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002860:	b672      	cpsid	i
}
 8002862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002864:	e7fe      	b.n	8002864 <Error_Handler+0x8>
	...

08002868 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <MX_QUADSPI_Init+0x54>)
 8002870:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 8002874:	2203      	movs	r2, #3
 8002876:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 800287a:	2201      	movs	r2, #1
 800287c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 8002880:	2210      	movs	r2, #16
 8002882:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 8002886:	2217      	movs	r2, #23
 8002888:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 800288c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002890:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80028a4:	4804      	ldr	r0, [pc, #16]	; (80028b8 <MX_QUADSPI_Init+0x50>)
 80028a6:	f00a fed3 	bl	800d650 <HAL_QSPI_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80028b0:	f7ff ffd4 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20056ec0 	.word	0x20056ec0
 80028bc:	a0001000 	.word	0xa0001000

080028c0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a39      	ldr	r2, [pc, #228]	; (80029c4 <HAL_QSPI_MspInit+0x104>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d16c      	bne.n	80029bc <HAL_QSPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_QSPI_MspInit+0x108>)
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	4a38      	ldr	r2, [pc, #224]	; (80029c8 <HAL_QSPI_MspInit+0x108>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6393      	str	r3, [r2, #56]	; 0x38
 80028ee:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <HAL_QSPI_MspInit+0x108>)
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028fa:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <HAL_QSPI_MspInit+0x108>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a32      	ldr	r2, [pc, #200]	; (80029c8 <HAL_QSPI_MspInit+0x108>)
 8002900:	f043 0320 	orr.w	r3, r3, #32
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_QSPI_MspInit+0x108>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <HAL_QSPI_MspInit+0x108>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <HAL_QSPI_MspInit+0x108>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_QSPI_MspInit+0x108>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800292a:	23c0      	movs	r3, #192	; 0xc0
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800293a:	2309      	movs	r3, #9
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4821      	ldr	r0, [pc, #132]	; (80029cc <HAL_QSPI_MspInit+0x10c>)
 8002946:	f009 ffaf 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800294a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800295c:	230a      	movs	r3, #10
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	4819      	ldr	r0, [pc, #100]	; (80029cc <HAL_QSPI_MspInit+0x10c>)
 8002968:	f009 ff9e 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800296c:	2304      	movs	r3, #4
 800296e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800297c:	2309      	movs	r3, #9
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	4619      	mov	r1, r3
 8002986:	4812      	ldr	r0, [pc, #72]	; (80029d0 <HAL_QSPI_MspInit+0x110>)
 8002988:	f009 ff8e 	bl	800c8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002998:	2303      	movs	r3, #3
 800299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800299c:	230a      	movs	r3, #10
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4619      	mov	r1, r3
 80029a6:	480a      	ldr	r0, [pc, #40]	; (80029d0 <HAL_QSPI_MspInit+0x110>)
 80029a8:	f009 ff7e 	bl	800c8a8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 3, 0);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2103      	movs	r1, #3
 80029b0:	205c      	movs	r0, #92	; 0x5c
 80029b2:	f009 f8b5 	bl	800bb20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80029b6:	205c      	movs	r0, #92	; 0x5c
 80029b8:	f009 f8ce 	bl	800bb58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80029bc:	bf00      	nop
 80029be:	3728      	adds	r7, #40	; 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	a0001000 	.word	0xa0001000
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40021400 	.word	0x40021400
 80029d0:	40020400 	.word	0x40020400

080029d4 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_QSPI_MspDeInit+0x40>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_QSPI_MspDeInit+0x44>)
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <HAL_QSPI_MspDeInit+0x44>)
 80029ec:	f023 0302 	bic.w	r3, r3, #2
 80029f0:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80029f2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80029f6:	4809      	ldr	r0, [pc, #36]	; (8002a1c <HAL_QSPI_MspDeInit+0x48>)
 80029f8:	f00a f902 	bl	800cc00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 80029fc:	2144      	movs	r1, #68	; 0x44
 80029fe:	4808      	ldr	r0, [pc, #32]	; (8002a20 <HAL_QSPI_MspDeInit+0x4c>)
 8002a00:	f00a f8fe 	bl	800cc00 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8002a04:	205c      	movs	r0, #92	; 0x5c
 8002a06:	f009 f8b5 	bl	800bb74 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	a0001000 	.word	0xa0001000
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40021400 	.word	0x40021400
 8002a20:	40020400 	.word	0x40020400

08002a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_MspInit+0x4c>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_MspInit+0x4c>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <HAL_MspInit+0x4c>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_MspInit+0x4c>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <HAL_MspInit+0x4c>)
 8002a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_MspInit+0x4c>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	210f      	movs	r1, #15
 8002a5e:	f06f 0001 	mvn.w	r0, #1
 8002a62:	f009 f85d 	bl	800bb20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800

08002a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	2036      	movs	r0, #54	; 0x36
 8002a8a:	f009 f849 	bl	800bb20 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a8e:	2036      	movs	r0, #54	; 0x36
 8002a90:	f009 f862 	bl	800bb58 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HAL_InitTick+0xa0>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <HAL_InitTick+0xa0>)
 8002a9a:	f043 0310 	orr.w	r3, r3, #16
 8002a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_InitTick+0xa0>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aac:	f107 0210 	add.w	r2, r7, #16
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f00c f948 	bl	800ed4c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002abc:	f00c f932 	bl	800ed24 <HAL_RCC_GetPCLK1Freq>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <HAL_InitTick+0xa4>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0c9b      	lsrs	r3, r3, #18
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_InitTick+0xa8>)
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <HAL_InitTick+0xac>)
 8002ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_InitTick+0xa8>)
 8002adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ae0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <HAL_InitTick+0xa8>)
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_InitTick+0xa8>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_InitTick+0xa8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002af4:	4809      	ldr	r0, [pc, #36]	; (8002b1c <HAL_InitTick+0xa8>)
 8002af6:	f00c fe02 	bl	800f6fe <HAL_TIM_Base_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d104      	bne.n	8002b0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b00:	4806      	ldr	r0, [pc, #24]	; (8002b1c <HAL_InitTick+0xa8>)
 8002b02:	f00c fe53 	bl	800f7ac <HAL_TIM_Base_Start_IT>
 8002b06:	4603      	mov	r3, r0
 8002b08:	e000      	b.n	8002b0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3730      	adds	r7, #48	; 0x30
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	431bde83 	.word	0x431bde83
 8002b1c:	20056f0c 	.word	0x20056f0c
 8002b20:	40001000 	.word	0x40001000

08002b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <NMI_Handler+0x4>

08002b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <HardFault_Handler+0x4>

08002b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <MemManage_Handler+0x4>

08002b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <BusFault_Handler+0x4>

08002b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <UsageFault_Handler+0x4>

08002b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <DMA1_Stream0_IRQHandler+0x10>)
 8002b56:	f009 fa35 	bl	800bfc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20057050 	.word	0x20057050

08002b64 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <DMA1_Stream4_IRQHandler+0x10>)
 8002b6a:	f009 fa2b 	bl	800bfc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20056ff0 	.word	0x20056ff0

08002b78 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <CAN1_RX0_IRQHandler+0x10>)
 8002b7e:	f008 fcc3 	bl	800b508 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20056d30 	.word	0x20056d30

08002b8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <TIM6_DAC_IRQHandler+0x10>)
 8002b92:	f00d fac5 	bl	8010120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20056f0c 	.word	0x20056f0c

08002ba0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <CAN2_RX0_IRQHandler+0x10>)
 8002ba6:	f008 fcaf 	bl	800b508 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20056d08 	.word	0x20056d08

08002bb4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <LTDC_IRQHandler+0x10>)
 8002bba:	f00a fa31 	bl	800d020 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20056e18 	.word	0x20056e18

08002bc8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <DMA2D_IRQHandler+0x10>)
 8002bce:	f009 fcbd 	bl	800c54c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20056d7c 	.word	0x20056d7c

08002bdc <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <QUADSPI_IRQHandler+0x10>)
 8002be2:	f00a fdd5 	bl	800d790 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20056ec0 	.word	0x20056ec0

08002bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
	return 1;
 8002bf4:	2301      	movs	r3, #1
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_kill>:

int _kill(int pid, int sig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c0a:	f023 fa1b 	bl	8026044 <__errno>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2216      	movs	r2, #22
 8002c12:	601a      	str	r2, [r3, #0]
	return -1;
 8002c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_exit>:

void _exit (int status)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ffe7 	bl	8002c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c32:	e7fe      	b.n	8002c32 <_exit+0x12>

08002c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e00a      	b.n	8002c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c46:	f3af 8000 	nop.w
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	60ba      	str	r2, [r7, #8]
 8002c52:	b2ca      	uxtb	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	dbf0      	blt.n	8002c46 <_read+0x12>
	}

return len;
 8002c64:	687b      	ldr	r3, [r7, #4]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e009      	b.n	8002c94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	60ba      	str	r2, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3301      	adds	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	dbf1      	blt.n	8002c80 <_write+0x12>
	}
	return len;
 8002c9c:	687b      	ldr	r3, [r7, #4]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_close>:

int _close(int file)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
	return -1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cce:	605a      	str	r2, [r3, #4]
	return 0;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <_isatty>:

int _isatty(int file)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <_sbrk+0x5c>)
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <_sbrk+0x60>)
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <_sbrk+0x64>)
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <_sbrk+0x68>)
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d40:	f023 f980 	bl	8026044 <__errno>
 8002d44:	4603      	mov	r3, r0
 8002d46:	220c      	movs	r2, #12
 8002d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	e009      	b.n	8002d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <_sbrk+0x64>)
 8002d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20080000 	.word	0x20080000
 8002d70:	00000400 	.word	0x00000400
 8002d74:	20000288 	.word	0x20000288
 8002d78:	20057108 	.word	0x20057108

08002d7c <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]
 8002daa:	615a      	str	r2, [r3, #20]
 8002dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002db0:	4a2c      	ldr	r2, [pc, #176]	; (8002e64 <MX_TIM3_Init+0xe8>)
 8002db2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002db4:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dba:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002dc2:	2286      	movs	r2, #134	; 0x86
 8002dc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dd2:	4823      	ldr	r0, [pc, #140]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002dd4:	f00c fc93 	bl	800f6fe <HAL_TIM_Base_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002dde:	f7ff fd3d 	bl	800285c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dec:	4619      	mov	r1, r3
 8002dee:	481c      	ldr	r0, [pc, #112]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002df0:	f00d fbc6 	bl	8010580 <HAL_TIM_ConfigClockSource>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002dfa:	f7ff fd2f 	bl	800285c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dfe:	4818      	ldr	r0, [pc, #96]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002e00:	f00c fd4c 	bl	800f89c <HAL_TIM_PWM_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e0a:	f7ff fd27 	bl	800285c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e16:	f107 031c 	add.w	r3, r7, #28
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4810      	ldr	r0, [pc, #64]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002e1e:	f00e f937 	bl	8011090 <HAL_TIMEx_MasterConfigSynchronization>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002e28:	f7ff fd18 	bl	800285c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2c:	2360      	movs	r3, #96	; 0x60
 8002e2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	2200      	movs	r2, #0
 8002e40:	4619      	mov	r1, r3
 8002e42:	4807      	ldr	r0, [pc, #28]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002e44:	f00d fa8c 	bl	8010360 <HAL_TIM_PWM_ConfigChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002e4e:	f7ff fd05 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e52:	4803      	ldr	r0, [pc, #12]	; (8002e60 <MX_TIM3_Init+0xe4>)
 8002e54:	f000 f91e 	bl	8003094 <HAL_TIM_MspPostInit>

}
 8002e58:	bf00      	nop
 8002e5a:	3738      	adds	r7, #56	; 0x38
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20056fa4 	.word	0x20056fa4
 8002e64:	40000400 	.word	0x40000400

08002e68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	; 0x38
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7c:	f107 031c 	add.w	r3, r7, #28
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e88:	463b      	mov	r3, r7
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	611a      	str	r2, [r3, #16]
 8002e96:	615a      	str	r2, [r3, #20]
 8002e98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002e9c:	4a2c      	ldr	r2, [pc, #176]	; (8002f50 <MX_TIM4_Init+0xe8>)
 8002e9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea6:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002eae:	22d7      	movs	r2, #215	; 0xd7
 8002eb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb8:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ebe:	4823      	ldr	r0, [pc, #140]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002ec0:	f00c fc1d 	bl	800f6fe <HAL_TIM_Base_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002eca:	f7ff fcc7 	bl	800285c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ed8:	4619      	mov	r1, r3
 8002eda:	481c      	ldr	r0, [pc, #112]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002edc:	f00d fb50 	bl	8010580 <HAL_TIM_ConfigClockSource>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002ee6:	f7ff fcb9 	bl	800285c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002eea:	4818      	ldr	r0, [pc, #96]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002eec:	f00c fcd6 	bl	800f89c <HAL_TIM_PWM_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002ef6:	f7ff fcb1 	bl	800285c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4619      	mov	r1, r3
 8002f08:	4810      	ldr	r0, [pc, #64]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002f0a:	f00e f8c1 	bl	8011090 <HAL_TIMEx_MasterConfigSynchronization>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002f14:	f7ff fca2 	bl	800285c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f18:	2360      	movs	r3, #96	; 0x60
 8002f1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f28:	463b      	mov	r3, r7
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4807      	ldr	r0, [pc, #28]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002f30:	f00d fa16 	bl	8010360 <HAL_TIM_PWM_ConfigChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002f3a:	f7ff fc8f 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f3e:	4803      	ldr	r0, [pc, #12]	; (8002f4c <MX_TIM4_Init+0xe4>)
 8002f40:	f000 f8a8 	bl	8003094 <HAL_TIM_MspPostInit>

}
 8002f44:	bf00      	nop
 8002f46:	3738      	adds	r7, #56	; 0x38
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20056f58 	.word	0x20056f58
 8002f50:	40000800 	.word	0x40000800

08002f54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a45      	ldr	r2, [pc, #276]	; (8003078 <HAL_TIM_Base_MspInit+0x124>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d142      	bne.n	8002fec <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f66:	4b45      	ldr	r3, [pc, #276]	; (800307c <HAL_TIM_Base_MspInit+0x128>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a44      	ldr	r2, [pc, #272]	; (800307c <HAL_TIM_Base_MspInit+0x128>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	6413      	str	r3, [r2, #64]	; 0x40
 8002f72:	4b42      	ldr	r3, [pc, #264]	; (800307c <HAL_TIM_Base_MspInit+0x128>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002f7e:	4b40      	ldr	r3, [pc, #256]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002f80:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_TIM_Base_MspInit+0x130>)
 8002f82:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002f84:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002f86:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002f8a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f8c:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002f8e:	2240      	movs	r2, #64	; 0x40
 8002f90:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f92:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002f98:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f9e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fa0:	4b37      	ldr	r3, [pc, #220]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fa6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fae:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002fb0:	4b33      	ldr	r3, [pc, #204]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002fb6:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002fc2:	482f      	ldr	r0, [pc, #188]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002fc4:	f008 fece 	bl	800bd64 <HAL_DMA_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8002fce:	f7ff fc45 	bl	800285c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
 8002fd8:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a27      	ldr	r2, [pc, #156]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_TIM_Base_MspInit+0x12c>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002fea:	e040      	b.n	800306e <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a25      	ldr	r2, [pc, #148]	; (8003088 <HAL_TIM_Base_MspInit+0x134>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d13b      	bne.n	800306e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ff6:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_TIM_Base_MspInit+0x128>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a20      	ldr	r2, [pc, #128]	; (800307c <HAL_TIM_Base_MspInit+0x128>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <HAL_TIM_Base_MspInit+0x128>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_TIM_Base_MspInit+0x13c>)
 8003012:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 8003016:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800301a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 800301e:	2240      	movs	r2, #64	; 0x40
 8003020:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 8003024:	2200      	movs	r2, #0
 8003026:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 800302a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800302e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 8003032:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003036:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 800303a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800303e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 8003048:	2200      	movs	r2, #0
 800304a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 800304e:	2200      	movs	r2, #0
 8003050:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8003052:	480e      	ldr	r0, [pc, #56]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 8003054:	f008 fe86 	bl	800bd64 <HAL_DMA_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 800305e:	f7ff fbfd 	bl	800285c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 8003066:	625a      	str	r2, [r3, #36]	; 0x24
 8003068:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_TIM_Base_MspInit+0x138>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40000400 	.word	0x40000400
 800307c:	40023800 	.word	0x40023800
 8003080:	20056ff0 	.word	0x20056ff0
 8003084:	40026070 	.word	0x40026070
 8003088:	40000800 	.word	0x40000800
 800308c:	20057050 	.word	0x20057050
 8003090:	40026010 	.word	0x40026010

08003094 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <HAL_TIM_MspPostInit+0xa8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11c      	bne.n	80030f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_TIM_MspPostInit+0xac>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a21      	ldr	r2, [pc, #132]	; (8003140 <HAL_TIM_MspPostInit+0xac>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <HAL_TIM_MspPostInit+0xac>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030ce:	2310      	movs	r3, #16
 80030d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030de:	2302      	movs	r3, #2
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	4816      	ldr	r0, [pc, #88]	; (8003144 <HAL_TIM_MspPostInit+0xb0>)
 80030ea:	f009 fbdd 	bl	800c8a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80030ee:	e021      	b.n	8003134 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <HAL_TIM_MspPostInit+0xb4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d11c      	bne.n	8003134 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_TIM_MspPostInit+0xac>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a10      	ldr	r2, [pc, #64]	; (8003140 <HAL_TIM_MspPostInit+0xac>)
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_TIM_MspPostInit+0xac>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003120:	2300      	movs	r3, #0
 8003122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003124:	2302      	movs	r3, #2
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	4619      	mov	r1, r3
 800312e:	4807      	ldr	r0, [pc, #28]	; (800314c <HAL_TIM_MspPostInit+0xb8>)
 8003130:	f009 fbba 	bl	800c8a8 <HAL_GPIO_Init>
}
 8003134:	bf00      	nop
 8003136:	3728      	adds	r7, #40	; 0x28
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40000400 	.word	0x40000400
 8003140:	40023800 	.word	0x40023800
 8003144:	40020400 	.word	0x40020400
 8003148:	40000800 	.word	0x40000800
 800314c:	40020c00 	.word	0x40020c00

08003150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003154:	480d      	ldr	r0, [pc, #52]	; (800318c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003156:	490e      	ldr	r1, [pc, #56]	; (8003190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800316c:	4c0b      	ldr	r4, [pc, #44]	; (800319c <LoopFillZerobss+0x26>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800317a:	f007 fa0f 	bl	800a59c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317e:	f022 ff79 	bl	8026074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003182:	f7ff fabd 	bl	8002700 <main>
  bx  lr    
 8003186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003188:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003190:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003194:	080d8bd8 	.word	0x080d8bd8
  ldr r2, =_sbss
 8003198:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 800319c:	20057104 	.word	0x20057104

080031a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC_IRQHandler>

080031a2 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80031a6:	f001 fbdf 	bl	8004968 <touchgfx_init>
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}

080031ae <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80031b2:	f001 fc03 	bl	80049bc <touchgfx_taskEntry>
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    {
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
    }
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	0802b520 	.word	0x0802b520

080031dc <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    }
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ffe9 	bl	80031bc <_ZN8touchgfx15TouchControllerD1Ev>
 80031ea:	2104      	movs	r1, #4
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f022 fdc2 	bl	8025d76 <_ZdlPvj>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	4a05      	ldr	r2, [pc, #20]	; (800324c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ffbd 	bl	80031bc <_ZN8touchgfx15TouchControllerD1Ev>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	0802b508 	.word	0x0802b508

08003250 <_ZN20STM32TouchControllerD0Ev>:
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ffe7 	bl	800322c <_ZN20STM32TouchControllerD1Ev>
 800325e:	2104      	movs	r1, #4
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f022 fd88 	bl	8025d76 <_ZdlPvj>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]

}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	71fb      	strb	r3, [r7, #7]

}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]

}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    {
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
    }
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	0802c428 	.word	0x0802c428

080032d4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    }
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ffe9 	bl	80032b4 <_ZN8touchgfx3HALD1Ev>
 80032e2:	217c      	movs	r1, #124	; 0x7c
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f022 fd46 	bl	8025d76 <_ZdlPvj>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4610      	mov	r0, r2
 800333c:	4798      	blx	r3
 800333e:	4603      	mov	r3, r0
 8003340:	e000      	b.n	8003344 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8003342:	2300      	movs	r3, #0
        }
    }
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f012 fe25 	bl	8015fa4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	33a0      	adds	r3, #160	; 0xa0
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
    }
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
    {
        return false;
 8003378:	2300      	movs	r3, #0
    }
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d106      	bne.n	80033aa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80033a0:	f44f 7125 	mov.w	r1, #660	; 0x294
 80033a4:	4811      	ldr	r0, [pc, #68]	; (80033ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80033a6:	f022 fe1b 	bl	8025fe0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf14      	ite	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	2300      	moveq	r3, #0
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80033ca:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bf14      	ite	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	2300      	moveq	r3, #0
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80033da:	701a      	strb	r2, [r3, #0]
    }
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	0802a828 	.word	0x0802a828
 80033e8:	0802a860 	.word	0x0802a860
 80033ec:	0802a8b0 	.word	0x0802a8b0
 80033f0:	200566f6 	.word	0x200566f6
 80033f4:	200566f7 	.word	0x200566f7

080033f8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003400:	2300      	movs	r3, #0
    }
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	4610      	mov	r0, r2
 800342a:	4798      	blx	r3
        }
    }
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3318      	adds	r3, #24
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4610      	mov	r0, r2
 800344c:	4798      	blx	r3
 800344e:	4603      	mov	r3, r0
    }
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800346c:	429a      	cmp	r2, r3
 800346e:	d017      	beq.n	80034a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8003470:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d12a      	bne.n	80034ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800347a:	881a      	ldrh	r2, [r3, #0]
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800347e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8003482:	881a      	ldrh	r2, [r3, #0]
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8003486:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8003488:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800348a:	881a      	ldrh	r2, [r3, #0]
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800348e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8003490:	4b16      	ldr	r3, [pc, #88]	; (80034ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8003492:	881a      	ldrh	r2, [r3, #0]
 8003494:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8003496:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800349e:	e016      	b.n	80034ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d012      	beq.n	80034ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80034aa:	881a      	ldrh	r2, [r3, #0]
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80034ae:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80034b6:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80034ba:	881a      	ldrh	r2, [r3, #0]
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80034be:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80034c6:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
    }
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	200566f0 	.word	0x200566f0
 80034e0:	200566ec 	.word	0x200566ec
 80034e4:	200566f2 	.word	0x200566f2
 80034e8:	200566ee 	.word	0x200566ee
 80034ec:	200566f4 	.word	0x200566f4

080034f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f011 ff23 	bl	8015346 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	4a05      	ldr	r2, [pc, #20]	; (8003528 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fecb 	bl	80032b4 <_ZN8touchgfx3HALD1Ev>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	0802b884 	.word	0x0802b884

0800352c <_ZN20TouchGFXGeneratedHALD0Ev>:
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ffe7 	bl	8003508 <_ZN20TouchGFXGeneratedHALD1Ev>
 800353a:	217c      	movs	r1, #124	; 0x7c
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f022 fc1a 	bl	8025d76 <_ZdlPvj>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffca 	bl	80034f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_ZN11TouchGFXHAL10initializeEv>:
{
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXHAL::initialize() {
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fee0 	bl	8005334 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
/**
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const {
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	f001 ff7a 	bl	8005480 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
/**
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address) {
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 ff79 	bl	800549c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 *
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect) {
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f001 ff81 	bl	80054c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	f001 ff8e 	bl	8005504 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <_ZN11TouchGFXHAL19configureInterruptsEv>:

/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts() {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 feca 	bl	8005398 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

	// custom code
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	b29b      	uxth	r3, r3
 800360a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <_ZN11TouchGFXHAL19configureInterruptsEv+0x44>)
 8003616:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <_ZN11TouchGFXHAL19configureInterruptsEv+0x48>)
 800362a:	801a      	strh	r2, [r3, #0]
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40016800 	.word	0x40016800
 8003638:	2000028c 	.word	0x2000028c
 800363c:	2000028e 	.word	0x2000028e

08003640 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts() {
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4618      	mov	r0, r3
 800364c:	f001 feb4 	bl	80053b8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts() {
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4618      	mov	r0, r3
 8003664:	f001 feb6 	bl	80053d4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:

/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt() {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4618      	mov	r0, r3
 800367c:	f001 feb8 	bl	80053f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <_ZN11TouchGFXHALD1Ev+0x20>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff35 	bl	8003508 <_ZN20TouchGFXGeneratedHALD1Ev>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	0802b538 	.word	0x0802b538

080036ac <_ZN11TouchGFXHALD0Ev>:
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ffe7 	bl	8003688 <_ZN11TouchGFXHALD1Ev>
 80036ba:	217c      	movs	r1, #124	; 0x7c
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f022 fb5a 	bl	8025d76 <_ZdlPvj>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80036d0:	2200      	movs	r2, #0
 80036d2:	2101      	movs	r1, #1
 80036d4:	2001      	movs	r0, #1
 80036d6:	f00e f827 	bl	8011728 <osSemaphoreNew>
 80036da:	4603      	mov	r3, r0
 80036dc:	4a0f      	ldr	r2, [pc, #60]	; (800371c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80036de:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80036ea:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80036ec:	2126      	movs	r1, #38	; 0x26
 80036ee:	480e      	ldr	r0, [pc, #56]	; (8003728 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80036f0:	f022 fc76 	bl	8025fe0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80036f4:	2200      	movs	r2, #0
 80036f6:	2104      	movs	r1, #4
 80036f8:	2001      	movs	r0, #1
 80036fa:	f00e f96f 	bl	80119dc <osMessageQueueNew>
 80036fe:	4603      	mov	r3, r0
 8003700:	4a0a      	ldr	r2, [pc, #40]	; (800372c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8003702:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8003710:	212a      	movs	r1, #42	; 0x2a
 8003712:	4805      	ldr	r0, [pc, #20]	; (8003728 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8003714:	f022 fc64 	bl	8025fe0 <__assert_func>
}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000290 	.word	0x20000290
 8003720:	0802a8f8 	.word	0x0802a8f8
 8003724:	0802a944 	.word	0x0802a944
 8003728:	0802a974 	.word	0x0802a974
 800372c:	20000294 	.word	0x20000294
 8003730:	0802a9f0 	.word	0x0802a9f0

08003734 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f04f 31ff 	mov.w	r1, #4294967295
 8003740:	4618      	mov	r0, r3
 8003742:	f00e f88d 	bl	8011860 <osSemaphoreAcquire>
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000290 	.word	0x20000290

08003750 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f00e f8e7 	bl	801192c <osSemaphoreRelease>
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000290 	.word	0x20000290

08003768 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f00e f874 	bl	8011860 <osSemaphoreAcquire>
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000290 	.word	0x20000290

08003780 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f00e f8cf 	bl	801192c <osSemaphoreRelease>
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000290 	.word	0x20000290

08003798 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	2200      	movs	r2, #0
 80037a4:	4903      	ldr	r1, [pc, #12]	; (80037b4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80037a6:	f00e f99f 	bl	8011ae8 <osMessageQueuePut>
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000294 	.word	0x20000294
 80037b4:	2000000c 	.word	0x2000000c

080037b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	1d39      	adds	r1, r7, #4
 80037c4:	2300      	movs	r3, #0
 80037c6:	2200      	movs	r2, #0
 80037c8:	f00e fa02 	bl	8011bd0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	1d39      	adds	r1, r7, #4
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	2200      	movs	r2, #0
 80037d8:	f00e f9fa 	bl	8011bd0 <osMessageQueueGet>
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000294 	.word	0x20000294

080037e8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f00d ff69 	bl	80116cc <osDelay>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 8003802:	b580      	push	{r7, lr}
 8003804:	af00      	add	r7, sp, #0
    osThreadYield();
 8003806:	f00d ff2f 	bl	8011668 <osThreadYield>
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <__NVIC_EnableIRQ>:
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4907      	ldr	r1, [pc, #28]	; (8003848 <__NVIC_EnableIRQ+0x38>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100

0800384c <__NVIC_DisableIRQ>:
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	db12      	blt.n	8003884 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	490a      	ldr	r1, [pc, #40]	; (8003890 <__NVIC_DisableIRQ+0x44>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2001      	movs	r0, #1
 800386e:	fa00 f202 	lsl.w	r2, r0, r2
 8003872:	3320      	adds	r3, #32
 8003874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003878:	f3bf 8f4f 	dsb	sy
}
 800387c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800387e:	f3bf 8f6f 	isb	sy
}
 8003882:	bf00      	nop
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100

08003894 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
        : color(0)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
    {
    }
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    {
        return color;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
    }
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
    {
 80038d0:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	601a      	str	r2, [r3, #0]
    }
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	0802b654 	.word	0x0802b654

080038e8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
    }
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ffe9 	bl	80038c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 80038f6:	2104      	movs	r1, #4
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f022 fa3c 	bl	8025d76 <_ZdlPvj>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3344      	adds	r3, #68	; 0x44
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
    }
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
    {
 800392c:	4a04      	ldr	r2, [pc, #16]	; (8003940 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	601a      	str	r2, [r3, #0]
    }
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	0802c968 	.word	0x0802c968

08003944 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
    }
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ffe9 	bl	8003924 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8003952:	210c      	movs	r1, #12
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f022 fa0e 	bl	8025d76 <_ZdlPvj>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	721a      	strb	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	725a      	strb	r2, [r3, #9]
    {
    }
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	0802c968 	.word	0x0802c968

08003998 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80039a0:	2301      	movs	r3, #1
    }
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3328      	adds	r3, #40	; 0x28
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4610      	mov	r0, r2
 80039c2:	4798      	blx	r3
    }
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
        return instance;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
    }
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	200566f8 	.word	0x200566f8

080039e4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4610      	mov	r0, r2
 80039fc:	4798      	blx	r3
    }
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8003a0e:	f7ff ffdd 	bl	80039cc <_ZN8touchgfx3HAL11getInstanceEv>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ffe5 	bl	80039e4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff30 	bl	8003894 <_ZN8touchgfx9colortypeC1Ev>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4610      	mov	r0, r2
 8003a52:	f7ff ff87 	bl	8003964 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8003a56:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <_ZN10STM32F7DMAC1Ev+0x50>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f103 000c 	add.w	r0, r3, #12
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3320      	adds	r3, #32
 8003a66:	2260      	movs	r2, #96	; 0x60
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f012 fc05 	bl	8016278 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3320      	adds	r3, #32
 8003a72:	245f      	movs	r4, #95	; 0x5f
 8003a74:	461d      	mov	r5, r3
 8003a76:	2c00      	cmp	r4, #0
 8003a78:	db05      	blt.n	8003a86 <_ZN10STM32F7DMAC1Ev+0x46>
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f7ff ffd1 	bl	8003a22 <_ZN8touchgfx6BlitOpC1Ev>
 8003a80:	3520      	adds	r5, #32
 8003a82:	3c01      	subs	r4, #1
 8003a84:	e7f7      	b.n	8003a76 <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a90:	0802b604 	.word	0x0802b604

08003a94 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <_ZN10STM32F7DMAD1Ev+0x30>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003aa2:	205a      	movs	r0, #90	; 0x5a
 8003aa4:	f7ff fed2 	bl	800384c <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 faad 	bl	800400c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff35 	bl	8003924 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	0802b604 	.word	0x0802b604

08003ac8 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
}
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ffdf 	bl	8003a94 <_ZN10STM32F7DMAD1Ev>
 8003ad6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f022 f94b 	bl	8025d76 <_ZdlPvj>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003afa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003afe:	6313      	str	r3, [r2, #48]	; 0x30
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b16:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	4a06      	ldr	r2, [pc, #24]	; (8003b38 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b22:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <_ZN10STM32F7DMA10initializeEv+0x50>)
 8003b26:	4a06      	ldr	r2, [pc, #24]	; (8003b40 <_ZN10STM32F7DMA10initializeEv+0x54>)
 8003b28:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003b2a:	205a      	movs	r0, #90	; 0x5a
 8003b2c:	f7ff fe70 	bl	8003810 <__NVIC_EnableIRQ>
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	20056d7c 	.word	0x20056d7c
 8003b40:	08003a07 	.word	0x08003a07

08003b44 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	2b0b      	cmp	r3, #11
 8003b58:	d826      	bhi.n	8003ba8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b9d 	.word	0x08003b9d
 8003b64:	08003b97 	.word	0x08003b97
 8003b68:	08003b91 	.word	0x08003b91
 8003b6c:	08003ba9 	.word	0x08003ba9
 8003b70:	08003ba9 	.word	0x08003ba9
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003ba9 	.word	0x08003ba9
 8003b7c:	08003ba3 	.word	0x08003ba3
 8003b80:	08003ba3 	.word	0x08003ba3
 8003b84:	08003ba3 	.word	0x08003ba3
 8003b88:	08003ba3 	.word	0x08003ba3
 8003b8c:	08003ba3 	.word	0x08003ba3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
        break;
 8003b94:	e00e      	b.n	8003bb4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003b96:	2301      	movs	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
        break;
 8003b9a:	e00b      	b.n	8003bb4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	60fb      	str	r3, [r7, #12]
        break;
 8003ba0:	e008      	b.n	8003bb4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	60fb      	str	r3, [r7, #12]
        break;
 8003ba6:	e005      	b.n	8003bb4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8003baa:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8003bac:	2164      	movs	r1, #100	; 0x64
 8003bae:	4806      	ldr	r0, [pc, #24]	; (8003bc8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8003bb0:	f022 fa16 	bl	8025fe0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	0802aa34 	.word	0x0802aa34
 8003bc4:	0802aa50 	.word	0x0802aa50
 8003bc8:	0802aa9c 	.word	0x0802aa9c

08003bcc <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	2b0a      	cmp	r3, #10
 8003be0:	d821      	bhi.n	8003c26 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c21 	.word	0x08003c21
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c27 	.word	0x08003c27
 8003bf8:	08003c27 	.word	0x08003c27
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c27 	.word	0x08003c27
 8003c04:	08003c1b 	.word	0x08003c1b
 8003c08:	08003c1b 	.word	0x08003c1b
 8003c0c:	08003c1b 	.word	0x08003c1b
 8003c10:	08003c1b 	.word	0x08003c1b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
        break;
 8003c18:	e00b      	b.n	8003c32 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
        break;
 8003c1e:	e008      	b.n	8003c32 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003c20:	2302      	movs	r3, #2
 8003c22:	60fb      	str	r3, [r7, #12]
        break;
 8003c24:	e005      	b.n	8003c32 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8003c28:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8003c2a:	2185      	movs	r1, #133	; 0x85
 8003c2c:	4805      	ldr	r0, [pc, #20]	; (8003c44 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8003c2e:	f022 f9d7 	bl	8025fe0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003c32:	68fb      	ldr	r3, [r7, #12]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	0802aa34 	.word	0x0802aa34
 8003c40:	0802ab14 	.word	0x0802ab14
 8003c44:	0802aa9c 	.word	0x0802aa9c

08003c48 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8003c50:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b089      	sub	sp, #36	; 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	7f5b      	ldrb	r3, [r3, #29]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff67 	bl	8003b44 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003c76:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	7f9b      	ldrb	r3, [r3, #30]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ff60 	bl	8003b44 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003c84:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	7f9b      	ldrb	r3, [r3, #30]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff9d 	bl	8003bcc <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003c92:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	8b5b      	ldrh	r3, [r3, #26]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	8a9b      	ldrh	r3, [r3, #20]
 8003c9e:	1ad2      	subs	r2, r2, r3
 8003ca0:	4b97      	ldr	r3, [pc, #604]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	8b5b      	ldrh	r3, [r3, #26]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	8a9b      	ldrh	r3, [r3, #20]
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	4b93      	ldr	r3, [pc, #588]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cb2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	8b1b      	ldrh	r3, [r3, #24]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	8a9b      	ldrh	r3, [r3, #20]
 8003cbe:	1ad2      	subs	r2, r2, r3
 8003cc0:	4b8f      	ldr	r3, [pc, #572]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cc2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003cc4:	4a8e      	ldr	r2, [pc, #568]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	8adb      	ldrh	r3, [r3, #22]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	8a9b      	ldrh	r3, [r3, #20]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	4b89      	ldr	r3, [pc, #548]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	4b87      	ldr	r3, [pc, #540]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cea:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf4:	d037      	beq.n	8003d66 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8003cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfa:	f200 80e4 	bhi.w	8003ec6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	d015      	beq.n	8003d30 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d08:	f200 80dd 	bhi.w	8003ec6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003d0c:	2b80      	cmp	r3, #128	; 0x80
 8003d0e:	d045      	beq.n	8003d9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	f200 80d8 	bhi.w	8003ec6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	f000 80c0 	beq.w	8003e9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	f200 80d2 	bhi.w	8003ec6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	f000 80a5 	beq.w	8003e72 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	f000 80b7 	beq.w	8003e9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8003d2e:	e0ca      	b.n	8003ec6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	7f1b      	ldrb	r3, [r3, #28]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	4619      	mov	r1, r3
 8003d38:	4a71      	ldr	r2, [pc, #452]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d3a:	4b72      	ldr	r3, [pc, #456]	; (8003f04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	4c6e      	ldr	r4, [pc, #440]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fdb2 	bl	80038b0 <_ZNK8touchgfx9colortypecvmEv>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003d50:	4a6b      	ldr	r2, [pc, #428]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	4b69      	ldr	r3, [pc, #420]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d5c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003d5e:	4b68      	ldr	r3, [pc, #416]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d60:	4a69      	ldr	r2, [pc, #420]	; (8003f08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003d62:	601a      	str	r2, [r3, #0]
        break;
 8003d64:	e0c8      	b.n	8003ef8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	7f1b      	ldrb	r3, [r3, #28]
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4a64      	ldr	r2, [pc, #400]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d70:	4b66      	ldr	r3, [pc, #408]	; (8003f0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	4c61      	ldr	r4, [pc, #388]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fd97 	bl	80038b0 <_ZNK8touchgfx9colortypecvmEv>
 8003d82:	4603      	mov	r3, r0
 8003d84:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003d86:	4a5e      	ldr	r2, [pc, #376]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	4b5b      	ldr	r3, [pc, #364]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d92:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003d94:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d96:	4a5c      	ldr	r2, [pc, #368]	; (8003f08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003d98:	601a      	str	r2, [r3, #0]
        break;
 8003d9a:	e0ad      	b.n	8003ef8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 8003da2:	2301      	movs	r3, #1
 8003da4:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	7f1b      	ldrb	r3, [r3, #28]
 8003daa:	061b      	lsls	r3, r3, #24
 8003dac:	461a      	mov	r2, r3
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	4a53      	ldr	r2, [pc, #332]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003dba:	4a51      	ldr	r2, [pc, #324]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	4b4e      	ldr	r3, [pc, #312]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dc6:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	4b4c      	ldr	r3, [pc, #304]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d00d      	beq.n	8003dfa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8003dde:	e020      	b.n	8003e22 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003de0:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	8852      	ldrh	r2, [r2, #2]
 8003dec:	3a01      	subs	r2, #1
 8003dee:	0212      	lsls	r2, r2, #8
 8003df0:	4611      	mov	r1, r2
 8003df2:	4a43      	ldr	r2, [pc, #268]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	61d3      	str	r3, [r2, #28]
            break;
 8003df8:	e019      	b.n	8003e2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	7f1b      	ldrb	r3, [r3, #28]
 8003dfe:	2bff      	cmp	r3, #255	; 0xff
 8003e00:	d101      	bne.n	8003e06 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 8003e02:	2300      	movs	r3, #0
 8003e04:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003e06:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	8852      	ldrh	r2, [r2, #2]
 8003e12:	3a01      	subs	r2, #1
 8003e14:	0212      	lsls	r2, r2, #8
 8003e16:	4313      	orrs	r3, r2
 8003e18:	4a39      	ldr	r2, [pc, #228]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e1a:	f043 0310 	orr.w	r3, r3, #16
 8003e1e:	61d3      	str	r3, [r2, #28]
            break;
 8003e20:	e005      	b.n	8003e2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 8003e22:	4b3c      	ldr	r3, [pc, #240]	; (8003f14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8003e24:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8003e26:	21ff      	movs	r1, #255	; 0xff
 8003e28:	483c      	ldr	r0, [pc, #240]	; (8003f1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8003e2a:	f022 f8d9 	bl	8025fe0 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003e2e:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	4a33      	ldr	r2, [pc, #204]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e34:	f043 0320 	orr.w	r3, r3, #32
 8003e38:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003e3a:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf14      	ite	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	2300      	moveq	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 8003e50:	f7ff fcd7 	bl	8003802 <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003e54:	e7f1      	b.n	8003e3a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003e56:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e58:	2210      	movs	r2, #16
 8003e5a:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 8003e5c:	7ffb      	ldrb	r3, [r7, #31]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003e62:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e64:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003e66:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 8003e68:	e046      	b.n	8003ef8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003e6a:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e6c:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8003e6e:	601a      	str	r2, [r3, #0]
      break;
 8003e70:	e042      	b.n	8003ef8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	7f1b      	ldrb	r3, [r3, #28]
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	461a      	mov	r2, r3
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	4a20      	ldr	r2, [pc, #128]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e84:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003e86:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e92:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003e98:	601a      	str	r2, [r3, #0]
        break;
 8003e9a:	e02d      	b.n	8003ef8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	7f1b      	ldrb	r3, [r3, #28]
 8003ea0:	061b      	lsls	r3, r3, #24
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	4a15      	ldr	r2, [pc, #84]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eae:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003eb0:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ebc:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ec0:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003ec2:	601a      	str	r2, [r3, #0]
        break;
 8003ec4:	e018      	b.n	8003ef8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	7f1b      	ldrb	r3, [r3, #28]
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	461a      	mov	r2, r3
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	7f5a      	ldrb	r2, [r3, #29]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	7f9b      	ldrb	r3, [r3, #30]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d003      	beq.n	8003eee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ee8:	4a0d      	ldr	r2, [pc, #52]	; (8003f20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8003eea:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8003eec:	e003      	b.n	8003ef6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ef0:	f240 2201 	movw	r2, #513	; 0x201
 8003ef4:	601a      	str	r2, [r3, #0]
        break;
 8003ef6:	bf00      	nop
    }
}
 8003ef8:	bf00      	nop
 8003efa:	3724      	adds	r7, #36	; 0x24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd90      	pop	{r4, r7, pc}
 8003f00:	4002b000 	.word	0x4002b000
 8003f04:	0002000a 	.word	0x0002000a
 8003f08:	00020201 	.word	0x00020201
 8003f0c:	00020009 	.word	0x00020009
 8003f10:	ffff00ef 	.word	0xffff00ef
 8003f14:	0802ab64 	.word	0x0802ab64
 8003f18:	0802ab80 	.word	0x0802ab80
 8003f1c:	0802aa9c 	.word	0x0802aa9c
 8003f20:	00010201 	.word	0x00010201

08003f24 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	7f9b      	ldrb	r3, [r3, #30]
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fe49 	bl	8003bcc <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003f3a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003f3c:	4a2f      	ldr	r2, [pc, #188]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	8adb      	ldrh	r3, [r3, #22]
 8003f46:	461a      	mov	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	8a9b      	ldrh	r3, [r3, #20]
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	8b5b      	ldrh	r3, [r3, #26]
 8003f60:	461a      	mov	r2, r3
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	8a9b      	ldrh	r3, [r3, #20]
 8003f66:	1ad2      	subs	r2, r2, r3
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d12e      	bne.n	8003fd2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	8b5b      	ldrh	r3, [r3, #26]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	8a9b      	ldrh	r3, [r3, #20]
 8003f7e:	1ad2      	subs	r2, r2, r3
 8003f80:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f82:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	8b5b      	ldrh	r3, [r3, #26]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	8a9b      	ldrh	r3, [r3, #20]
 8003f8e:	1ad2      	subs	r2, r2, r3
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f92:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	7f1b      	ldrb	r3, [r3, #28]
 8003f9e:	061b      	lsls	r3, r3, #24
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fa4:	4b16      	ldr	r3, [pc, #88]	; (8004000 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	4c13      	ldr	r4, [pc, #76]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fc7d 	bl	80038b0 <_ZNK8touchgfx9colortypecvmEv>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fc0:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fc8:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003fca:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8003fce:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8003fd0:	e010      	b.n	8003ff4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	4c06      	ldr	r4, [pc, #24]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fc63 	bl	80038b0 <_ZNK8touchgfx9colortypecvmEv>
 8003fea:	4603      	mov	r3, r0
 8003fec:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8003fee:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003ff0:	4a05      	ldr	r2, [pc, #20]	; (8004008 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd90      	pop	{r4, r7, pc}
 8003ffc:	4002b000 	.word	0x4002b000
 8004000:	00010009 	.word	0x00010009
 8004004:	00020201 	.word	0x00020201
 8004008:	00030201 	.word	0x00030201

0800400c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	4a05      	ldr	r2, [pc, #20]	; (800402c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fc53 	bl	80038c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	0802c9b8 	.word	0x0802c9b8

08004030 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ffe7 	bl	800400c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800403e:	2114      	movs	r1, #20
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f021 fe98 	bl	8025d76 <_ZdlPvj>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
        : color(col)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	601a      	str	r2, [r3, #0]
    }
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	801a      	strh	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	805a      	strh	r2, [r3, #2]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	809a      	strh	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	80da      	strh	r2, [r3, #6]
    {
    }
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
    }
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20056774 	.word	0x20056774

080040bc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
    {
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
    }
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	0802b870 	.word	0x0802b870

080040dc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
    }
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ffe9 	bl	80040bc <_ZN8touchgfx12FontProviderD1Ev>
 80040ea:	2104      	movs	r1, #4
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f021 fe42 	bl	8025d76 <_ZdlPvj>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800410a:	4a0b      	ldr	r2, [pc, #44]	; (8004138 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	611a      	str	r2, [r3, #16]
    {
    }
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	0802b860 	.word	0x0802b860

0800413c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
    {
 8004144:	4a04      	ldr	r2, [pc, #16]	; (8004158 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
    }
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	0802b860 	.word	0x0802b860

0800415c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
    }
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ffe9 	bl	800413c <_ZN8touchgfx7MVPHeapD1Ev>
 800416a:	2114      	movs	r1, #20
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f021 fe02 	bl	8025d76 <_ZdlPvj>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
    {
    }
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
    {
    }
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
    {
    }
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	70fb      	strb	r3, [r7, #3]
    {
    }
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
    {
    }
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
    {
    }
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
    {
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
    }
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	0802b838 	.word	0x0802b838

08004220 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    }
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ffe9 	bl	8004200 <_ZN8touchgfx15UIEventListenerD1Ev>
 800422e:	2104      	movs	r1, #4
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f021 fda0 	bl	8025d76 <_ZdlPvj>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
    {
 8004248:	4a04      	ldr	r2, [pc, #16]	; (800425c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	601a      	str	r2, [r3, #0]
    }
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	0802d224 	.word	0x0802d224

08004260 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
    }
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ffe9 	bl	8004240 <_ZN8touchgfx3LCDD1Ev>
 800426e:	2108      	movs	r1, #8
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f021 fd80 	bl	8025d76 <_ZdlPvj>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80042aa:	6810      	ldr	r0, [r2, #0]
 80042ac:	6851      	ldr	r1, [r2, #4]
 80042ae:	c303      	stmia	r3!, {r0, r1}
    }
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    {
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
    }
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	0802b820 	.word	0x0802b820

080042dc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    }
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ffe9 	bl	80042bc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80042ea:	2104      	movs	r1, #4
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f021 fd42 	bl	8025d76 <_ZdlPvj>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	4a05      	ldr	r2, [pc, #20]	; (800431c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff77 	bl	8004200 <_ZN8touchgfx15UIEventListenerD1Ev>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	0802d2fc 	.word	0x0802d2fc

08004320 <_ZN8touchgfx11ApplicationD0Ev>:
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ffe7 	bl	80042fc <_ZN8touchgfx11ApplicationD1Ev>
 800432e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f021 fd1f 	bl	8025d76 <_ZdlPvj>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f804 	bl	8004358 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00f      	beq.n	800438a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4610      	mov	r0, r2
 800437e:	4798      	blx	r3
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800438a:	2300      	movs	r3, #0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00e      	beq.n	80043ae <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4610      	mov	r0, r2
 80043a4:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff ff97 	bl	80042fc <_ZN8touchgfx11ApplicationD1Ev>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	0802b7dc 	.word	0x0802b7dc

080043dc <_ZN8touchgfx14MVPApplicationD0Ev>:
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff ffe7 	bl	80043b8 <_ZN8touchgfx14MVPApplicationD1Ev>
 80043ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f021 fcc1 	bl	8025d76 <_ZdlPvj>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fd07 	bl	8004e28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ffcb 	bl	80043b8 <_ZN8touchgfx14MVPApplicationD1Ev>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	0802b780 	.word	0x0802b780

08004430 <_ZN23FrontendApplicationBaseD0Ev>:
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ffe1 	bl	8004400 <_ZN23FrontendApplicationBaseD1Ev>
 800443e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f021 fc97 	bl	8025d76 <_ZdlPvj>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	4a05      	ldr	r2, [pc, #20]	; (8004474 <_ZN19FrontendApplicationD1Ev+0x20>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ffcb 	bl	8004400 <_ZN23FrontendApplicationBaseD1Ev>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	0802b73c 	.word	0x0802b73c

08004478 <_ZN19FrontendApplicationD0Ev>:
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff ffe7 	bl	8004454 <_ZN19FrontendApplicationD1Ev>
 8004486:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f021 fc73 	bl	8025d76 <_ZdlPvj>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80044a8:	4618      	mov	r0, r3
 80044aa:	f004 fd1d 	bl	8008ee8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f014 fb95 	bl	8018be0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	805a      	strh	r2, [r3, #2]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	809a      	strh	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	80da      	strh	r2, [r3, #6]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	811a      	strh	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	815a      	strh	r2, [r3, #10]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	819a      	strh	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	739a      	strb	r2, [r3, #14]
        {
        }
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ffd5 	bl	80044be <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	611a      	str	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	829a      	strh	r2, [r3, #20]
    {
    }
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800453a:	4a55      	ldr	r2, [pc, #340]	; (8004690 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	611a      	str	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	615a      	str	r2, [r3, #20]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	619a      	str	r2, [r3, #24]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	331c      	adds	r3, #28
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ffcb 	bl	8004504 <_ZN8touchgfx8GesturesC1Ev>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	63da      	str	r2, [r3, #60]	; 0x3c
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3350      	adds	r3, #80	; 0x50
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fd58 	bl	800406e <_ZN8touchgfx4RectC1Ev>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	659a      	str	r2, [r3, #88]	; 0x58
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	661a      	str	r2, [r3, #96]	; 0x60
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	671a      	str	r2, [r3, #112]	; 0x70
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8004646:	4a13      	ldr	r2, [pc, #76]	; (8004694 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800464c:	4a12      	ldr	r2, [pc, #72]	; (8004698 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800464e:	8b3b      	ldrh	r3, [r7, #24]
 8004650:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8004654:	8bbb      	ldrh	r3, [r7, #28]
 8004656:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800465e:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8004664:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8004668:	881a      	ldrh	r2, [r3, #0]
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800466c:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800466e:	8b3a      	ldrh	r2, [r7, #24]
 8004670:	8bbb      	ldrh	r3, [r7, #28]
 8004672:	429a      	cmp	r2, r3
 8004674:	bf34      	ite	cc
 8004676:	2301      	movcc	r3, #1
 8004678:	2300      	movcs	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	0802c428 	.word	0x0802c428
 8004694:	200566f8 	.word	0x200566f8
 8004698:	200566ec 	.word	0x200566ec
 800469c:	200566ee 	.word	0x200566ee
 80046a0:	200566f0 	.word	0x200566f0
 80046a4:	200566f2 	.word	0x200566f2
 80046a8:	200566f4 	.word	0x200566f4

080046ac <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fbb5 	bl	8005e28 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	f7ff fd0b 	bl	80040fc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80046e6:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]
    {

    }
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	0802b728 	.word	0x0802b728

080046fc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4801      	ldr	r0, [pc, #4]	; (8004708 <__tcf_0+0xc>)
 8004702:	f000 f965 	bl	80049d0 <_ZN12FrontendHeapD1Ev>
 8004706:	bd80      	pop	{r7, pc}
 8004708:	200002b0 	.word	0x200002b0

0800470c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f3bf 8f5b 	dmb	ish
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d013      	beq.n	8004754 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800472c:	480b      	ldr	r0, [pc, #44]	; (800475c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800472e:	f021 fb24 	bl	8025d7a <__cxa_guard_acquire>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8004742:	4807      	ldr	r0, [pc, #28]	; (8004760 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8004744:	f000 f868 	bl	8004818 <_ZN12FrontendHeapC1Ev>
 8004748:	4804      	ldr	r0, [pc, #16]	; (800475c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800474a:	f021 fb22 	bl	8025d92 <__cxa_guard_release>
 800474e:	4805      	ldr	r0, [pc, #20]	; (8004764 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8004750:	f021 fc64 	bl	802601c <atexit>
        return instance;
 8004754:	4b02      	ldr	r3, [pc, #8]	; (8004760 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8004756:	4618      	mov	r0, r3
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20022a90 	.word	0x20022a90
 8004760:	200002b0 	.word	0x200002b0
 8004764:	080046fd 	.word	0x080046fd

08004768 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	4a05      	ldr	r2, [pc, #20]	; (8004788 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fcdf 	bl	800413c <_ZN8touchgfx7MVPHeapD1Ev>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	0802b728 	.word	0x0802b728

0800478c <_ZN16FrontendHeapBaseD0Ev>:
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff ffe7 	bl	8004768 <_ZN16FrontendHeapBaseD1Ev>
 800479a:	2114      	movs	r1, #20
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f021 faea 	bl	8025d76 <_ZdlPvj>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f010 fbe0 	bl	8014f7c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80047bc:	4a03      	ldr	r2, [pc, #12]	; (80047cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	0802b6f4 	.word	0x0802b6f4

080047d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4618      	mov	r0, r3
 80047dc:	f010 fbce 	bl	8014f7c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80047e0:	4a03      	ldr	r2, [pc, #12]	; (80047f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	0802b6c0 	.word	0x0802b6c0

080047f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4618      	mov	r0, r3
 8004800:	f010 fbbc 	bl	8014f7c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004804:	4a03      	ldr	r2, [pc, #12]	; (8004814 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	0802b68c 	.word	0x0802b68c

08004818 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af02      	add	r7, sp, #8
 800481e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f103 0414 	add.w	r4, r3, #20
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1c      	ldr	r2, [pc, #112]	; (80048a4 <_ZN12FrontendHeapC1Ev+0x8c>)
 8004832:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <_ZN12FrontendHeapC1Ev+0x90>)
 8004838:	440b      	add	r3, r1
                     app(model, *this)
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	462a      	mov	r2, r5
 8004840:	4621      	mov	r1, r4
 8004842:	f7ff ff41 	bl	80046c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8004846:	4a19      	ldr	r2, [pc, #100]	; (80048ac <_ZN12FrontendHeapC1Ev+0x94>)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3314      	adds	r3, #20
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ffab 	bl	80047ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	332c      	adds	r3, #44	; 0x2c
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ffb8 	bl	80047d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <_ZN12FrontendHeapC1Ev+0x8c>)
 8004864:	4413      	add	r3, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff ffc4 	bl	80047f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <_ZN12FrontendHeapC1Ev+0x98>)
 8004870:	4413      	add	r3, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f004 fb2a 	bl	8008ecc <_ZN5ModelC1Ev>
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <_ZN12FrontendHeapC1Ev+0x90>)
 800487c:	4413      	add	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	490b      	ldr	r1, [pc, #44]	; (80048b0 <_ZN12FrontendHeapC1Ev+0x98>)
 8004882:	4411      	add	r1, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4618      	mov	r0, r3
 8004888:	f004 fb0a 	bl	8008ea0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <_ZN12FrontendHeapC1Ev+0x90>)
 8004892:	4413      	add	r3, r2
 8004894:	4619      	mov	r1, r3
 8004896:	f7ff ff09 	bl	80046ac <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bdb0      	pop	{r4, r5, r7, pc}
 80048a4:	00022670 	.word	0x00022670
 80048a8:	00022688 	.word	0x00022688
 80048ac:	0802b678 	.word	0x0802b678
 80048b0:	00022684 	.word	0x00022684

080048b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	8bbb      	ldrh	r3, [r7, #28]
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	8b3b      	ldrh	r3, [r7, #24]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	f7ff fe2b 	bl	800452c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80048d6:	4a04      	ldr	r2, [pc, #16]	; (80048e8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	601a      	str	r2, [r3, #0]
    }
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	0802b884 	.word	0x0802b884

080048ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	8bbb      	ldrh	r3, [r7, #28]
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	8b3b      	ldrh	r3, [r7, #24]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	f7ff ffd3 	bl	80048b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800490e:	4a04      	ldr	r2, [pc, #16]	; (8004920 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	601a      	str	r2, [r3, #0]
    }
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	0802b538 	.word	0x0802b538

08004924 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	4a04      	ldr	r2, [pc, #16]	; (8004940 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	0802b520 	.word	0x0802b520

08004944 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff ffe8 	bl	8004924 <_ZN8touchgfx15TouchControllerC1Ev>
 8004954:	4a03      	ldr	r2, [pc, #12]	; (8004964 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	0802b508 	.word	0x0802b508

08004968 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b085      	sub	sp, #20
 800496c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800496e:	f000 fffb 	bl	8005968 <_ZN14BitmapDatabase11getInstanceEv>
 8004972:	4604      	mov	r4, r0
 8004974:	f001 f802 	bl	800597c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8004978:	4603      	mov	r3, r0
 800497a:	4619      	mov	r1, r3
 800497c:	2300      	movs	r3, #0
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2300      	movs	r3, #0
 8004982:	2200      	movs	r2, #0
 8004984:	4620      	mov	r0, r4
 8004986:	f017 faeb 	bl	801bf60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800498a:	4809      	ldr	r0, [pc, #36]	; (80049b0 <touchgfx_init+0x48>)
 800498c:	f7ff fb86 	bl	800409c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8004990:	2000      	movs	r0, #0
 8004992:	f003 ffbb 	bl	800890c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8004996:	4807      	ldr	r0, [pc, #28]	; (80049b4 <touchgfx_init+0x4c>)
 8004998:	f017 fa24 	bl	801bde4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800499c:	f7ff feb6 	bl	800470c <_ZN12FrontendHeap11getInstanceEv>
 80049a0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80049a2:	4805      	ldr	r0, [pc, #20]	; (80049b8 <touchgfx_init+0x50>)
 80049a4:	f7fe fdde 	bl	8003564 <_ZN11TouchGFXHAL10initializeEv>
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd90      	pop	{r4, r7, pc}
 80049b0:	20023710 	.word	0x20023710
 80049b4:	20000010 	.word	0x20000010
 80049b8:	20023714 	.word	0x20023714

080049bc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80049c0:	4802      	ldr	r0, [pc, #8]	; (80049cc <touchgfx_taskEntry+0x10>)
 80049c2:	f010 fd24 	bl	801540e <_ZN8touchgfx3HAL9taskEntryEv>
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20023714 	.word	0x20023714

080049d0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <_ZN12FrontendHeapD1Ev+0x4c>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <_ZN12FrontendHeapD1Ev+0x50>)
 80049e2:	4413      	add	r3, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fd35 	bl	8004454 <_ZN19FrontendApplicationD1Ev>
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <_ZN12FrontendHeapD1Ev+0x54>)
 80049ee:	4413      	add	r3, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f82b 	bl	8004a4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	332c      	adds	r3, #44	; 0x2c
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 f848 	bl	8004a90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3314      	adds	r3, #20
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 f867 	bl	8004ad8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff feab 	bl	8004768 <_ZN16FrontendHeapBaseD1Ev>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	0802b678 	.word	0x0802b678
 8004a20:	00022688 	.word	0x00022688
 8004a24:	00022670 	.word	0x00022670

08004a28 <_ZN12FrontendHeapD0Ev>:
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff ffcd 	bl	80049d0 <_ZN12FrontendHeapD1Ev>
 8004a36:	4904      	ldr	r1, [pc, #16]	; (8004a48 <_ZN12FrontendHeapD0Ev+0x20>)
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f021 f99c 	bl	8025d76 <_ZdlPvj>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	000227e0 	.word	0x000227e0

08004a4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	4a05      	ldr	r2, [pc, #20]	; (8004a6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f010 fa8b 	bl	8014f78 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	0802b68c 	.word	0x0802b68c

08004a70 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ffe7 	bl	8004a4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004a7e:	2114      	movs	r1, #20
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f021 f978 	bl	8025d76 <_ZdlPvj>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f010 fa69 	bl	8014f78 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	0802b6c0 	.word	0x0802b6c0

08004ab4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff ffe7 	bl	8004a90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004ac2:	4904      	ldr	r1, [pc, #16]	; (8004ad4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x20>)
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f021 f956 	bl	8025d76 <_ZdlPvj>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	00022644 	.word	0x00022644

08004ad8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f010 fa45 	bl	8014f78 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	0802b6f4 	.word	0x0802b6f4

08004afc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ffe7 	bl	8004ad8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004b0a:	2118      	movs	r1, #24
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f021 f932 	bl	8025d76 <_ZdlPvj>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	4a05      	ldr	r2, [pc, #20]	; (8004b3c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fb87 	bl	8004240 <_ZN8touchgfx3LCDD1Ev>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	0802e2f4 	.word	0x0802e2f4

08004b40 <_ZN8touchgfx8LCD24bppD0Ev>:
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ffe7 	bl	8004b1c <_ZN8touchgfx8LCD24bppD1Ev>
 8004b4e:	2158      	movs	r1, #88	; 0x58
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f021 f910 	bl	8025d76 <_ZdlPvj>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_Z41__static_initialization_and_destruction_0ii>:
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b094      	sub	sp, #80	; 0x50
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	f040 8129 	bne.w	8004dc4 <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f040 8123 	bne.w	8004dc4 <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b90:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004b98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ba4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004bc2:	f107 0320 	add.w	r3, r7, #32
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fa41 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8004bce:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8004bd0:	bf00      	nop
 8004bd2:	461a      	mov	r2, r3
};

namespace colors
{
    using namespace touchgfx;
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004bd4:	4b89      	ldr	r3, [pc, #548]	; (8004dfc <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	23ff      	movs	r3, #255	; 0xff
 8004bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004bf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004c02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	431a      	orrs	r2, r3
 8004c12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004c1c:	f107 031c 	add.w	r3, r7, #28
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fa14 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8004c28:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8004c2a:	bf00      	nop
 8004c2c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8004c2e:	4b74      	ldr	r3, [pc, #464]	; (8004e00 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004c38:	23ff      	movs	r3, #255	; 0xff
 8004c3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c44:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004c48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004c4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004c54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004c5c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c60:	041b      	lsls	r3, r3, #16
 8004c62:	461a      	mov	r2, r3
 8004c64:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004c76:	f107 0318 	add.w	r3, r7, #24
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff f9e7 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8004c82:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8004c84:	bf00      	nop
 8004c86:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8004c88:	4b5e      	ldr	r3, [pc, #376]	; (8004e04 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c92:	2300      	movs	r3, #0
 8004c94:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004c98:	23ff      	movs	r3, #255	; 0xff
 8004c9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004c9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004ca2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004ca6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004caa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004cae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004cb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004cb6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff f9ba 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8004cdc:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8004cde:	bf00      	nop
 8004ce0:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8004ce2:	4b49      	ldr	r3, [pc, #292]	; (8004e08 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	23f7      	movs	r3, #247	; 0xf7
 8004ce8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004cec:	234c      	movs	r3, #76	; 0x4c
 8004cee:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004cf8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004cfc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004d00:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004d04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004d08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d0c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004d10:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004d14:	041b      	lsls	r3, r3, #16
 8004d16:	461a      	mov	r2, r3
 8004d18:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004d2a:	f107 0310 	add.w	r3, r7, #16
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff f98d 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8004d36:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8004d38:	bf00      	nop
 8004d3a:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8004d3c:	4b33      	ldr	r3, [pc, #204]	; (8004e0c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	23f7      	movs	r3, #247	; 0xf7
 8004d42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004d46:	23d2      	movs	r3, #210	; 0xd2
 8004d48:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004d52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8004d5a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004d66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004d6a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	461a      	mov	r2, r3
 8004d72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004d84:	f107 030c 	add.w	r3, r7, #12
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff f960 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8004d90:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8004d92:	bf00      	nop
 8004d94:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8004d98:	601a      	str	r2, [r3, #0]
static STM32TouchController tc;
 8004d9a:	481e      	ldr	r0, [pc, #120]	; (8004e14 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004d9c:	f7ff fdd2 	bl	8004944 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8004da0:	481d      	ldr	r0, [pc, #116]	; (8004e18 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004da2:	f7fe fe4d 	bl	8003a40 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8004da6:	481d      	ldr	r0, [pc, #116]	; (8004e1c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004da8:	f019 fb3c 	bl	801e424 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8004dac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004dba:	4a18      	ldr	r2, [pc, #96]	; (8004e1c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004dbc:	4916      	ldr	r1, [pc, #88]	; (8004e18 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004dbe:	4818      	ldr	r0, [pc, #96]	; (8004e20 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004dc0:	f7ff fd94 	bl	80048ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d113      	bne.n	8004df2 <_Z41__static_initialization_and_destruction_0ii+0x292>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10e      	bne.n	8004df2 <_Z41__static_initialization_and_destruction_0ii+0x292>
 8004dd4:	4812      	ldr	r0, [pc, #72]	; (8004e20 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004dd6:	f7fe fc57 	bl	8003688 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8004dda:	4812      	ldr	r0, [pc, #72]	; (8004e24 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8004ddc:	f000 f846 	bl	8004e6c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8004de0:	480e      	ldr	r0, [pc, #56]	; (8004e1c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004de2:	f7ff fe9b 	bl	8004b1c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8004de6:	480c      	ldr	r0, [pc, #48]	; (8004e18 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004de8:	f7fe fe54 	bl	8003a94 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8004dec:	4809      	ldr	r0, [pc, #36]	; (8004e14 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004dee:	f7fe fa1d 	bl	800322c <_ZN20STM32TouchControllerD1Ev>
}
 8004df2:	bf00      	nop
 8004df4:	3748      	adds	r7, #72	; 0x48
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000298 	.word	0x20000298
 8004e00:	2000029c 	.word	0x2000029c
 8004e04:	200002a0 	.word	0x200002a0
 8004e08:	200002a4 	.word	0x200002a4
 8004e0c:	200002a8 	.word	0x200002a8
 8004e10:	200002ac 	.word	0x200002ac
 8004e14:	20022a94 	.word	0x20022a94
 8004e18:	20022a98 	.word	0x20022a98
 8004e1c:	200236b8 	.word	0x200236b8
 8004e20:	20023714 	.word	0x20023714
 8004e24:	20000010 	.word	0x20000010

08004e28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	4a05      	ldr	r2, [pc, #20]	; (8004e48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fa3f 	bl	80042bc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	0802b7c4 	.word	0x0802b7c4

08004e4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff ffe7 	bl	8004e28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004e5a:	2110      	movs	r1, #16
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f020 ff8a 	bl	8025d76 <_ZdlPvj>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_05 = 5; // JetBrainsMono_Regular_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_06 = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	4a05      	ldr	r2, [pc, #20]	; (8004e8c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff f91d 	bl	80040bc <_ZN8touchgfx12FontProviderD1Ev>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	0802b950 	.word	0x0802b950

08004e90 <_ZN23ApplicationFontProviderD0Ev>:
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ffe7 	bl	8004e6c <_ZN23ApplicationFontProviderD1Ev>
 8004e9e:	2104      	movs	r1, #4
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f020 ff68 	bl	8025d76 <_ZdlPvj>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8004eb8:	2301      	movs	r3, #1
    }
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8004ece:	230c      	movs	r3, #12
    }
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004ee8:	887a      	ldrh	r2, [r7, #2]
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	4413      	add	r3, r2
    }
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004f10:	887a      	ldrh	r2, [r7, #2]
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	4413      	add	r3, r2
    }
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004f34:	2301      	movs	r3, #1
    }
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x18>)
    }
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	0002263c 	.word	0x0002263c

08004f60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004f6c:	887b      	ldrh	r3, [r7, #2]
 8004f6e:	4a06      	ldr	r2, [pc, #24]	; (8004f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8004f70:	fb02 f303 	mul.w	r3, r2, r3
 8004f74:	3308      	adds	r3, #8
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4413      	add	r3, r2
    }
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	0002263c 	.word	0x0002263c

08004f8c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	4a06      	ldr	r2, [pc, #24]	; (8004fb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8004f9c:	fb02 f303 	mul.w	r3, r2, r3
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4413      	add	r3, r2
    }
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	0002263c 	.word	0x0002263c

08004fb8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004fc0:	2301      	movs	r3, #1
    }
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004fd6:	2310      	movs	r3, #16
    }
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004ff0:	887b      	ldrh	r3, [r7, #2]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
    }
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	3308      	adds	r3, #8
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	4413      	add	r3, r2
    }
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	68d2      	ldr	r2, [r2, #12]
 8005038:	1052      	asrs	r2, r2, #1
 800503a:	1899      	adds	r1, r3, r2
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	e00a      	b.n	8005064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68d2      	ldr	r2, [r2, #12]
 8005056:	1052      	asrs	r2, r2, #1
 8005058:	4413      	add	r3, r2
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6892      	ldr	r2, [r2, #8]
 8005060:	4413      	add	r3, r2
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4608      	mov	r0, r1
 8005066:	4798      	blx	r3
    }
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d010      	beq.n	80050a2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d107      	bne.n	8005098 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8005098:	2300      	movs	r3, #0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d001      	beq.n	80050a2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80050a2:	2300      	movs	r3, #0
    }
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <_GLOBAL__sub_I_touchgfx_init>:
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7ff fd51 	bl	8004b60 <_Z41__static_initialization_and_destruction_0ii>
 80050be:	bd80      	pop	{r7, pc}

080050c0 <_GLOBAL__sub_D_touchgfx_init>:
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050c8:	2000      	movs	r0, #0
 80050ca:	f7ff fd49 	bl	8004b60 <_Z41__static_initialization_and_destruction_0ii>
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	331c      	adds	r3, #28
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
    }
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800511a:	3301      	adds	r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d105      	bne.n	8005154 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8005150:	2301      	movs	r3, #1
 8005152:	e027      	b.n	80051a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d123      	bne.n	80051a2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	2b00      	cmp	r3, #0
 8005160:	d014      	beq.n	800518c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3390      	adds	r3, #144	; 0x90
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005176:	429a      	cmp	r2, r3
 8005178:	d008      	beq.n	800518c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800517a:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	f083 0301 	eor.w	r3, r3, #1
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 800518c:	2300      	movs	r3, #0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	78fa      	ldrb	r2, [r7, #3]
 8005196:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 800519a:	2301      	movs	r3, #1
 800519c:	e002      	b.n	80051a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800519e:	2300      	movs	r3, #0
 80051a0:	e000      	b.n	80051a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80051a2:	2300      	movs	r3, #0
    }
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	200566f6 	.word	0x200566f6

080051b0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <__NVIC_EnableIRQ>:
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	db0b      	blt.n	80051f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	f003 021f 	and.w	r2, r3, #31
 80051e4:	4907      	ldr	r1, [pc, #28]	; (8005204 <__NVIC_EnableIRQ+0x38>)
 80051e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	2001      	movs	r0, #1
 80051ee:	fa00 f202 	lsl.w	r2, r0, r2
 80051f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	e000e100 	.word	0xe000e100

08005208 <__NVIC_DisableIRQ>:
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005216:	2b00      	cmp	r3, #0
 8005218:	db12      	blt.n	8005240 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	f003 021f 	and.w	r2, r3, #31
 8005220:	490a      	ldr	r1, [pc, #40]	; (800524c <__NVIC_DisableIRQ+0x44>)
 8005222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	2001      	movs	r0, #1
 800522a:	fa00 f202 	lsl.w	r2, r0, r2
 800522e:	3320      	adds	r3, #32
 8005230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005234:	f3bf 8f4f 	dsb	sy
}
 8005238:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800523a:	f3bf 8f6f 	isb	sy
}
 800523e:	bf00      	nop
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000e100 	.word	0xe000e100

08005250 <__NVIC_SetPriority>:
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	6039      	str	r1, [r7, #0]
 800525a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005260:	2b00      	cmp	r3, #0
 8005262:	db0a      	blt.n	800527a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	490c      	ldr	r1, [pc, #48]	; (800529c <__NVIC_SetPriority+0x4c>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	0112      	lsls	r2, r2, #4
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	440b      	add	r3, r1
 8005274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005278:	e00a      	b.n	8005290 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	4908      	ldr	r1, [pc, #32]	; (80052a0 <__NVIC_SetPriority+0x50>)
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	3b04      	subs	r3, #4
 8005288:	0112      	lsls	r2, r2, #4
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	440b      	add	r3, r1
 800528e:	761a      	strb	r2, [r3, #24]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	e000e100 	.word	0xe000e100
 80052a0:	e000ed00 	.word	0xe000ed00

080052a4 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <SCB_CleanInvalidateDCache+0x8c>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80052b2:	f3bf 8f4f 	dsb	sy
}
 80052b6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <SCB_CleanInvalidateDCache+0x8c>)
 80052ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052be:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	0b5b      	lsrs	r3, r3, #13
 80052c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80052c8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052d2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80052dc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80052e2:	4913      	ldr	r1, [pc, #76]	; (8005330 <SCB_CleanInvalidateDCache+0x8c>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	60ba      	str	r2, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d000      	beq.n	8005300 <SCB_CleanInvalidateDCache+0x5c>
      do {
 80052fe:	e7e9      	b.n	80052d4 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	1e5a      	subs	r2, r3, #1
 8005304:	60fa      	str	r2, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d000      	beq.n	8005316 <SCB_CleanInvalidateDCache+0x72>
    do {
 8005314:	e7d9      	b.n	80052ca <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8005316:	f3bf 8f4f 	dsb	sy
}
 800531a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800531c:	f3bf 8f6f 	isb	sy
}
 8005320:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000ed00 	.word	0xe000ed00

08005334 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8005334:	b5b0      	push	{r4, r5, r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	f010 f853 	bl	80153ea <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8005344:	687d      	ldr	r5, [r7, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	335c      	adds	r3, #92	; 0x5c
 800534c:	681c      	ldr	r4, [r3, #0]
 800534e:	f013 fd43 	bl	8018dd8 <_ZN8touchgfx11Application11getInstanceEv>
 8005352:	4603      	mov	r3, r0
 8005354:	4619      	mov	r1, r3
 8005356:	4628      	mov	r0, r5
 8005358:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	490d      	ldr	r1, [pc, #52]	; (8005394 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff ff26 	bl	80051b0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fee1 	bl	8005130 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3380      	adds	r3, #128	; 0x80
 8005376:	681c      	ldr	r4, [r3, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	2200      	movs	r2, #0
 800537c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005380:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2101      	movs	r1, #1
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff feb0 	bl	80050ec <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bdb0      	pop	{r4, r5, r7, pc}
 8005394:	080037e9 	.word	0x080037e9

08005398 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80053a0:	2109      	movs	r1, #9
 80053a2:	205a      	movs	r0, #90	; 0x5a
 80053a4:	f7ff ff54 	bl	8005250 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80053a8:	2109      	movs	r1, #9
 80053aa:	2058      	movs	r0, #88	; 0x58
 80053ac:	f7ff ff50 	bl	8005250 <__NVIC_SetPriority>
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80053c0:	205a      	movs	r0, #90	; 0x5a
 80053c2:	f7ff ff03 	bl	80051cc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80053c6:	2058      	movs	r0, #88	; 0x58
 80053c8:	f7ff ff00 	bl	80051cc <__NVIC_EnableIRQ>
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80053dc:	205a      	movs	r0, #90	; 0x5a
 80053de:	f7ff ff13 	bl	8005208 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80053e2:	2058      	movs	r0, #88	; 0x58
 80053e4:	f7ff ff10 	bl	8005208 <__NVIC_DisableIRQ>
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800540a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800541e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8005420:	4b08      	ldr	r3, [pc, #32]	; (8005444 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8005422:	881a      	ldrh	r2, [r3, #0]
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005426:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	4a04      	ldr	r2, [pc, #16]	; (8005440 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	6353      	str	r3, [r2, #52]	; 0x34
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40016800 	.word	0x40016800
 8005444:	200237a8 	.word	0x200237a8
 8005448:	200237aa 	.word	0x200237aa

0800544c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	f00f ffae 	bl	80153b8 <_ZN8touchgfx3HAL10beginFrameEv>
 800545c:	4603      	mov	r3, r0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4618      	mov	r0, r3
 8005472:	f00f ffad 	bl	80153d0 <_ZN8touchgfx3HAL8endFrameEv>
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8005488:	4b03      	ldr	r3, [pc, #12]	; (8005498 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40016884 	.word	0x40016884

0800549c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80054a6:	4a06      	ldr	r2, [pc, #24]	; (80054c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40016884 	.word	0x40016884
 80054c4:	40016800 	.word	0x40016800

080054c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f00f ff3b 	bl	8015352 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80054dc:	4b08      	ldr	r3, [pc, #32]	; (8005500 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 80054f2:	f7ff fed7 	bl	80052a4 <SCB_CleanInvalidateDCache>
    }
}
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	e000ed00 	.word	0xe000ed00

08005504 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	f010 f882 	bl	8015622 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800551e:	4603      	mov	r3, r0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8005532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005534:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005540:	b29b      	uxth	r3, r3
 8005542:	3301      	adds	r3, #1
 8005544:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8005546:	89fa      	ldrh	r2, [r7, #14]
 8005548:	89bb      	ldrh	r3, [r7, #12]
 800554a:	429a      	cmp	r2, r3
 800554c:	d304      	bcc.n	8005558 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 800554e:	89fa      	ldrh	r2, [r7, #14]
 8005550:	89bb      	ldrh	r3, [r7, #12]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	b29b      	uxth	r3, r3
 8005556:	e000      	b.n	800555a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40016800 	.word	0x40016800

0800556c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800558a:	f7ff fe8b 	bl	80052a4 <SCB_CleanInvalidateDCache>
    }
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	e000ed00 	.word	0xe000ed00

0800559c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80055a4:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bf14      	ite	ne
 80055b0:	2301      	movne	r3, #1
 80055b2:	2300      	moveq	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 80055ba:	f7ff fe73 	bl	80052a4 <SCB_CleanInvalidateDCache>
    }
}
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	e000ed00 	.word	0xe000ed00

080055cc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <HAL_LTDC_LineEventCallback+0x74>)
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	4a1a      	ldr	r2, [pc, #104]	; (8005644 <HAL_LTDC_LineEventCallback+0x78>)
 80055da:	8812      	ldrh	r2, [r2, #0]
 80055dc:	4293      	cmp	r3, r2
 80055de:	bf0c      	ite	eq
 80055e0:	2301      	moveq	r3, #1
 80055e2:	2300      	movne	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d017      	beq.n	800561a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80055ea:	4b17      	ldr	r3, [pc, #92]	; (8005648 <HAL_LTDC_LineEventCallback+0x7c>)
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f007 fe0b 	bl	800d20c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80055f6:	f7fe f9e9 	bl	80039cc <_ZN8touchgfx3HAL11getInstanceEv>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fd85 	bl	800510c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8005602:	f7fe f8c9 	bl	8003798 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8005606:	f7fe f9e1 	bl	80039cc <_ZN8touchgfx3HAL11getInstanceEv>
 800560a:	4603      	mov	r3, r0
 800560c:	4618      	mov	r0, r3
 800560e:	f010 fcc9 	bl	8015fa4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8005612:	2000      	movs	r0, #0
 8005614:	f7fd fe2c 	bl	8003270 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8005618:	e00e      	b.n	8005638 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_LTDC_LineEventCallback+0x78>)
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f007 fdf3 	bl	800d20c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8005626:	2000      	movs	r0, #0
 8005628:	f7fd fe2d 	bl	8003286 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800562c:	f7fe f9ce 	bl	80039cc <_ZN8touchgfx3HAL11getInstanceEv>
 8005630:	4603      	mov	r3, r0
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fd4c 	bl	80050d0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40016800 	.word	0x40016800
 8005644:	200237a8 	.word	0x200237a8
 8005648:	200237aa 	.word	0x200237aa

0800564c <_Z41__static_initialization_and_destruction_0ii>:
}
 800564c:	b580      	push	{r7, lr}
 800564e:	b092      	sub	sp, #72	; 0x48
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b01      	cmp	r3, #1
 800565a:	f040 8114 	bne.w	8005886 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005664:	4293      	cmp	r3, r2
 8005666:	f040 810e 	bne.w	8005886 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800566a:	2300      	movs	r3, #0
 800566c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8005670:	2300      	movs	r3, #0
 8005672:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8005676:	2300      	movs	r3, #0
 8005678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800567c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005684:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005688:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800568c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005690:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005698:	041b      	lsls	r3, r3, #16
 800569a:	461a      	mov	r2, r3
 800569c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	431a      	orrs	r2, r3
 80056a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80056ae:	f107 0320 	add.w	r3, r7, #32
 80056b2:	4611      	mov	r1, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fe fccb 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 80056ba:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80056bc:	bf00      	nop
 80056be:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80056c0:	4b73      	ldr	r3, [pc, #460]	; (8005890 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	23ff      	movs	r3, #255	; 0xff
 80056c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80056d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80056de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80056ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	461a      	mov	r2, r3
 80056f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	431a      	orrs	r2, r3
 80056fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005702:	4313      	orrs	r3, r2
 8005704:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005708:	f107 031c 	add.w	r3, r7, #28
 800570c:	4611      	mov	r1, r2
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fc9e 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8005714:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8005716:	bf00      	nop
 8005718:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800571a:	4b5e      	ldr	r3, [pc, #376]	; (8005894 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	2300      	movs	r3, #0
 8005720:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005724:	23ff      	movs	r3, #255	; 0xff
 8005726:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800572a:	2300      	movs	r3, #0
 800572c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005730:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005734:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005738:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800573c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8005740:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005744:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005748:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	461a      	mov	r2, r3
 8005750:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	431a      	orrs	r2, r3
 8005758:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800575c:	4313      	orrs	r3, r2
 800575e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005762:	f107 0318 	add.w	r3, r7, #24
 8005766:	4611      	mov	r1, r2
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe fc71 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800576e:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8005770:	bf00      	nop
 8005772:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8005774:	4b48      	ldr	r3, [pc, #288]	; (8005898 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	2300      	movs	r3, #0
 800577a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800577e:	2300      	movs	r3, #0
 8005780:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005784:	23ff      	movs	r3, #255	; 0xff
 8005786:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800578a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800578e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005792:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005796:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800579a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800579e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80057a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80057a6:	041b      	lsls	r3, r3, #16
 80057a8:	461a      	mov	r2, r3
 80057aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	431a      	orrs	r2, r3
 80057b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fc44 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 80057c8:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 80057ca:	bf00      	nop
 80057cc:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 80057ce:	4b33      	ldr	r3, [pc, #204]	; (800589c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	23f7      	movs	r3, #247	; 0xf7
 80057d4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80057d8:	234c      	movs	r3, #76	; 0x4c
 80057da:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80057de:	2302      	movs	r3, #2
 80057e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80057e4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80057e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80057ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80057f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80057f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80057fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	461a      	mov	r2, r3
 8005804:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	431a      	orrs	r2, r3
 800580c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005810:	4313      	orrs	r3, r2
 8005812:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005816:	f107 0310 	add.w	r3, r7, #16
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fc17 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8005822:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8005824:	bf00      	nop
 8005826:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8005828:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	23f7      	movs	r3, #247	; 0xf7
 800582e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005832:	23d2      	movs	r3, #210	; 0xd2
 8005834:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005838:	2302      	movs	r3, #2
 800583a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800583e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005842:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8005846:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005852:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005856:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	461a      	mov	r2, r3
 800585e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	431a      	orrs	r2, r3
 8005866:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800586a:	4313      	orrs	r3, r2
 800586c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005870:	f107 030c 	add.w	r3, r7, #12
 8005874:	4611      	mov	r1, r2
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe fbea 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800587c:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800587e:	bf00      	nop
 8005880:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8005882:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	bf00      	nop
 8005888:	3748      	adds	r7, #72	; 0x48
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20023790 	.word	0x20023790
 8005894:	20023794 	.word	0x20023794
 8005898:	20023798 	.word	0x20023798
 800589c:	2002379c 	.word	0x2002379c
 80058a0:	200237a0 	.word	0x200237a0
 80058a4:	200237a4 	.word	0x200237a4

080058a8 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058b0:	2001      	movs	r0, #1
 80058b2:	f7ff fecb 	bl	800564c <_Z41__static_initialization_and_destruction_0ii>
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d848      	bhi.n	800595c <_ZN23ApplicationFontProvider7getFontEt+0xa4>
 80058ca:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	08005903 	.word	0x08005903
 80058d8:	0800590d 	.word	0x0800590d
 80058dc:	08005917 	.word	0x08005917
 80058e0:	08005921 	.word	0x08005921
 80058e4:	0800592b 	.word	0x0800592b
 80058e8:	08005935 	.word	0x08005935
 80058ec:	0800593f 	.word	0x0800593f
 80058f0:	08005949 	.word	0x08005949
 80058f4:	08005953 	.word	0x08005953
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80058f8:	f003 f880 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 80058fc:	4603      	mov	r3, r0
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	e02d      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8005902:	f003 f87b 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 8005906:	4603      	mov	r3, r0
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	e028      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800590c:	f003 f876 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 8005910:	4603      	mov	r3, r0
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	e023      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005916:	f003 f871 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 800591a:	4603      	mov	r3, r0
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	e01e      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8005920:	f003 f86c 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 8005924:	4603      	mov	r3, r0
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	e019      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_02:
        // JetBrainsMono_Regular_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800592a:	f003 f867 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 800592e:	4603      	mov	r3, r0
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	e014      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_03:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8005934:	f003 f862 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 8005938:	4603      	mov	r3, r0
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	e00f      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800593e:	f003 f85d 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 8005942:	4603      	mov	r3, r0
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	e00a      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_05:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8005948:	f003 f858 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 800594c:	4603      	mov	r3, r0
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	e005      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_06:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005952:	f003 f853 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 8005956:	4603      	mov	r3, r0
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	e000      	b.n	800595e <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    default:
        return 0;
 800595c:	2300      	movs	r3, #0
    }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop

08005968 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
    return bitmap_database;
 800596c:	4b02      	ldr	r3, [pc, #8]	; (8005978 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800596e:	4618      	mov	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	0802b95c 	.word	0x0802b95c

0800597c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8005980:	2301      	movs	r3, #1
}
 8005982:	4618      	mov	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
    {
 8005994:	4a04      	ldr	r2, [pc, #16]	; (80059a8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	601a      	str	r2, [r3, #0]
    }
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	0802bb24 	.word	0x0802bb24

080059ac <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
    }
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff ffe9 	bl	800598c <_ZN8touchgfx4FontD1Ev>
 80059ba:	2110      	movs	r1, #16
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f020 f9da 	bl	8025d76 <_ZdlPvj>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80059cc:	b590      	push	{r4, r7, lr}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80059d8:	887b      	ldrh	r3, [r7, #2]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	e010      	b.n	8005a04 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3308      	adds	r3, #8
 80059f0:	681c      	ldr	r4, [r3, #0]
 80059f2:	f107 030f 	add.w	r3, r7, #15
 80059f6:	f107 0210 	add.w	r2, r7, #16
 80059fa:	8879      	ldrh	r1, [r7, #2]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	47a0      	blx	r4
 8005a00:	6178      	str	r0, [r7, #20]
        return glyph;
 8005a02:	697b      	ldr	r3, [r7, #20]
    }
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd90      	pop	{r4, r7, pc}

08005a0c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	895b      	ldrh	r3, [r3, #10]
    }
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	899b      	ldrh	r3, [r3, #12]
    }
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	889b      	ldrh	r3, [r3, #4]
    }
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	889a      	ldrh	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	799b      	ldrb	r3, [r3, #6]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	4413      	add	r3, r2
 8005a68:	b29b      	uxth	r3, r3
    }
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	79db      	ldrb	r3, [r3, #7]
 8005a82:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8005a86:	b2db      	uxtb	r3, r3
    }
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	79db      	ldrb	r3, [r3, #7]
 8005aa0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005aa4:	b2db      	uxtb	r3, r3
    }
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	4a05      	ldr	r2, [pc, #20]	; (8005ad4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff ff61 	bl	800598c <_ZN8touchgfx4FontD1Ev>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	0802d450 	.word	0x0802d450

08005ad8 <_ZN8touchgfx9ConstFontD0Ev>:
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff ffe7 	bl	8005ab4 <_ZN8touchgfx9ConstFontD1Ev>
 8005ae6:	2118      	movs	r1, #24
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f020 f944 	bl	8025d76 <_ZdlPvj>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ffd3 	bl	8005ab4 <_ZN8touchgfx9ConstFontD1Ev>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	0802b9d0 	.word	0x0802b9d0

08005b1c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff ffe7 	bl	8005af8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005b2a:	2128      	movs	r1, #40	; 0x28
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f020 f922 	bl	8025d76 <_ZdlPvj>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
    {
 8005b44:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
    }
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	0802b978 	.word	0x0802b978

08005b5c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
    }
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ffe9 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>
 8005b6a:	2108      	movs	r1, #8
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f020 f902 	bl	8025d76 <_ZdlPvj>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
 8005b86:	4a07      	ldr	r2, [pc, #28]	; (8005ba4 <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	889a      	ldrh	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	809a      	strh	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	0802b978 	.word	0x0802b978

08005ba8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8005bc8:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	721a      	strb	r2, [r3, #8]
    {
    }
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	0802b9ac 	.word	0x0802b9ac

08005bec <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
    {
 8005bf4:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	601a      	str	r2, [r3, #0]
    }
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	0802b9ac 	.word	0x0802b9ac

08005c0c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
    }
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ffe9 	bl	8005bec <_ZN8touchgfx10TransitionD1Ev>
 8005c1a:	210c      	movs	r1, #12
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f020 f8aa 	bl	8025d76 <_ZdlPvj>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
    {
    }
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
    {
    }
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
    {
    }
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8005c70:	f013 f8b2 	bl	8018dd8 <_ZN8touchgfx11Application11getInstanceEv>
 8005c74:	4603      	mov	r3, r0
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	3230      	adds	r2, #48	; 0x30
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	4790      	blx	r2
    }
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	605a      	str	r2, [r3, #4]
    }
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f013 f8b4 	bl	8018e1c <_ZN8touchgfx11ApplicationC1Ev>
 8005cb4:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8005cce:	6013      	str	r3, [r2, #0]
    }
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	0802b7dc 	.word	0x0802b7dc
 8005ce0:	20056764 	.word	0x20056764

08005ce4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	601a      	str	r2, [r3, #0]
    }
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	721a      	strb	r2, [r3, #8]
    }
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	605a      	str	r2, [r3, #4]
    }
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
	...

08005d38 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8005d48:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d58:	e002      	b.n	8005d60 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8005d5a:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
    }
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	200566f8 	.word	0x200566f8

08005d70 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff ff90 	bl	8005ca4 <_ZN8touchgfx14MVPApplicationC1Ev>
 8005d84:	4a13      	ldr	r2, [pc, #76]	; (8005dd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f89f 	bl	8005ed4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005da6:	f7fd fe11 	bl	80039cc <_ZN8touchgfx3HAL11getInstanceEv>
 8005daa:	4603      	mov	r3, r0
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	3208      	adds	r2, #8
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8005db8:	2000      	movs	r0, #0
 8005dba:	f002 fda7 	bl	800890c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8005dbe:	f7ff ffbb 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f019 fc0e 	bl	801f5e6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	0802b780 	.word	0x0802b780

08005dd8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff ffe9 	bl	8005dd8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	605a      	str	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	3208      	adds	r2, #8
 8005e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8005e28:	b590      	push	{r4, r7, lr}
 8005e2a:	b089      	sub	sp, #36	; 0x24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8005e36:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	f107 0008 	add.w	r0, r7, #8
 8005e42:	f107 0318 	add.w	r3, r7, #24
 8005e46:	cb0c      	ldmia	r3, {r2, r3}
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	f000 f85f 	bl	8005f0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8005e4e:	f107 0308 	add.w	r3, r7, #8
 8005e52:	4619      	mov	r1, r3
 8005e54:	4620      	mov	r0, r4
 8005e56:	f7ff ffcb 	bl	8005df0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8005e5a:	f107 0308 	add.w	r3, r7, #8
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe ffe2 	bl	8004e28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8005e70:	bf00      	nop
 8005e72:	3724      	adds	r7, #36	; 0x24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd90      	pop	{r4, r7, pc}
 8005e78:	08005e7d 	.word	0x08005e7d

08005e7c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005e90:	461a      	mov	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	4b04      	ldr	r3, [pc, #16]	; (8005eac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8005e9c:	4804      	ldr	r0, [pc, #16]	; (8005eb0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8005e9e:	f000 f867 	bl	8005f70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20056758 	.word	0x20056758
 8005eb0:	20056754 	.word	0x20056754

08005eb4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	4a04      	ldr	r2, [pc, #16]	; (8005ed0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	0802b820 	.word	0x0802b820

08005ed4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff ffe8 	bl	8005eb4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005ee4:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	605a      	str	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	609a      	str	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	60da      	str	r2, [r3, #12]
    }
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	0802b7c4 	.word	0x0802b7c4

08005f0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4639      	mov	r1, r7
 8005f18:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff ffc8 	bl	8005eb4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005f24:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	605a      	str	r2, [r3, #4]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3308      	adds	r3, #8
 8005f34:	463a      	mov	r2, r7
 8005f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f3a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	0802b7c4 	.word	0x0802b7c4

08005f4c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fe32 	bl	8005bc0 <_ZN8touchgfx10TransitionC1Ev>
 8005f5c:	4a03      	ldr	r2, [pc, #12]	; (8005f6c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	0802b988 	.word	0x0802b988

08005f70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005f70:	b590      	push	{r4, r7, lr}
 8005f72:	b08f      	sub	sp, #60	; 0x3c
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3320      	adds	r3, #32
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4798      	blx	r3
 8005f90:	4603      	mov	r3, r0
 8005f92:	4a80      	ldr	r2, [pc, #512]	; (8006194 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d805      	bhi.n	8005fa4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8005f98:	4b7f      	ldr	r3, [pc, #508]	; (8006198 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8005f9a:	4a80      	ldr	r2, [pc, #512]	; (800619c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005f9c:	21a3      	movs	r1, #163	; 0xa3
 8005f9e:	4880      	ldr	r0, [pc, #512]	; (80061a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005fa0:	f020 f81e 	bl	8025fe0 <__assert_func>
 8005fa4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3320      	adds	r3, #32
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4798      	blx	r3
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d805      	bhi.n	8005fca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8005fbe:	4b79      	ldr	r3, [pc, #484]	; (80061a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8005fc0:	4a76      	ldr	r2, [pc, #472]	; (800619c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005fc2:	21a4      	movs	r1, #164	; 0xa4
 8005fc4:	4876      	ldr	r0, [pc, #472]	; (80061a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005fc6:	f020 f80b 	bl	8025fe0 <__assert_func>
 8005fca:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3320      	adds	r3, #32
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4798      	blx	r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b0b      	cmp	r3, #11
 8005fe2:	d805      	bhi.n	8005ff0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8005fe4:	4b70      	ldr	r3, [pc, #448]	; (80061a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8005fe6:	4a6d      	ldr	r2, [pc, #436]	; (800619c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005fe8:	21a5      	movs	r1, #165	; 0xa5
 8005fea:	486d      	ldr	r0, [pc, #436]	; (80061a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005fec:	f01f fff8 	bl	8025fe0 <__assert_func>
 8005ff0:	bf00      	nop
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8005ffe:	f012 feeb 	bl	8018dd8 <_ZN8touchgfx11Application11getInstanceEv>
 8006002:	4603      	mov	r3, r0
 8006004:	4618      	mov	r0, r3
 8006006:	f012 feed 	bl	8018de4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4610      	mov	r0, r2
 8006022:	4798      	blx	r3
    if (*currentTrans)
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
    if (*currentScreen)
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3314      	adds	r3, #20
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4610      	mov	r0, r2
 8006054:	4798      	blx	r3
    if (*currentPresenter)
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d008      	beq.n	8006070 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3304      	adds	r3, #4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
    if (*currentScreen)
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4610      	mov	r0, r2
 8006086:	4798      	blx	r3
    if (*currentPresenter)
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3308      	adds	r3, #8
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4610      	mov	r0, r2
 80060a0:	4798      	blx	r3
}
 80060a2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f880 	bl	80061b0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80060b0:	4603      	mov	r3, r0
 80060b2:	4619      	mov	r1, r3
 80060b4:	200c      	movs	r0, #12
 80060b6:	f7ff fd77 	bl	8005ba8 <_ZnwjPv>
 80060ba:	4604      	mov	r4, r0
 80060bc:	4620      	mov	r0, r4
 80060be:	f7ff ff45 	bl	8005f4c <_ZN8touchgfx12NoTransitionC1Ev>
 80060c2:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2100      	movs	r1, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f883 	bl	80061d6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80060d0:	4603      	mov	r3, r0
 80060d2:	4619      	mov	r1, r3
 80060d4:	4835      	ldr	r0, [pc, #212]	; (80061ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x23c>)
 80060d6:	f7ff fd67 	bl	8005ba8 <_ZnwjPv>
 80060da:	4604      	mov	r4, r0
 80060dc:	4620      	mov	r0, r4
 80060de:	f003 f947 	bl	8009370 <_ZN11Screen1ViewC1Ev>
 80060e2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 f886 	bl	80061fc <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 80060f0:	4603      	mov	r3, r0
 80060f2:	4619      	mov	r1, r3
 80060f4:	2010      	movs	r0, #16
 80060f6:	f7ff fd57 	bl	8005ba8 <_ZnwjPv>
 80060fa:	4604      	mov	r4, r0
 80060fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060fe:	4620      	mov	r0, r4
 8006100:	f002 ffa8 	bl	8009054 <_ZN16Screen1PresenterC1ER11Screen1View>
 8006104:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800610a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006110:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006116:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8006118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	3304      	adds	r3, #4
 8006122:	e000      	b.n	8006126 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8006124:	2300      	movs	r3, #0
 8006126:	4619      	mov	r1, r3
 8006128:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800612a:	f7ff fddb 	bl	8005ce4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	3304      	adds	r3, #4
 8006132:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff fdf0 	bl	8005d1a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f86f 	bl	8006222 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69f8      	ldr	r0, [r7, #28]
 800615a:	4798      	blx	r3
    newPresenter->activate();
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69b8      	ldr	r0, [r7, #24]
 8006164:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006166:	6979      	ldr	r1, [r7, #20]
 8006168:	69f8      	ldr	r0, [r7, #28]
 800616a:	f014 fb12 	bl	801a792 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3310      	adds	r3, #16
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6978      	ldr	r0, [r7, #20]
 8006178:	4798      	blx	r3
    newTransition->invalidate();
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6978      	ldr	r0, [r7, #20]
 8006184:	4798      	blx	r3
}
 8006186:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800618a:	4618      	mov	r0, r3
 800618c:	373c      	adds	r7, #60	; 0x3c
 800618e:	46bd      	mov	sp, r7
 8006190:	bd90      	pop	{r4, r7, pc}
 8006192:	bf00      	nop
 8006194:	0002263b 	.word	0x0002263b
 8006198:	0802abc0 	.word	0x0802abc0
 800619c:	0802ac50 	.word	0x0802ac50
 80061a0:	0802ad54 	.word	0x0802ad54
 80061a4:	0802ad9c 	.word	0x0802ad9c
 80061a8:	0802ae40 	.word	0x0802ae40
 80061ac:	0002263c 	.word	0x0002263c

080061b0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3324      	adds	r3, #36	; 0x24
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	887a      	ldrh	r2, [r7, #2]
 80061c6:	4611      	mov	r1, r2
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
 80061cc:	4603      	mov	r3, r0
    }
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3324      	adds	r3, #36	; 0x24
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	887a      	ldrh	r2, [r7, #2]
 80061ec:	4611      	mov	r1, r2
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
 80061f2:	4603      	mov	r3, r0
    }
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3324      	adds	r3, #36	; 0x24
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	887a      	ldrh	r2, [r7, #2]
 8006212:	4611      	mov	r1, r2
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
 8006218:	4603      	mov	r3, r0
    }
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
	...

08006240 <_ZN8touchgfx12NoTransitionD1Ev>:
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	4a05      	ldr	r2, [pc, #20]	; (8006260 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fccb 	bl	8005bec <_ZN8touchgfx10TransitionD1Ev>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	0802b988 	.word	0x0802b988

08006264 <_ZN8touchgfx12NoTransitionD0Ev>:
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ffe7 	bl	8006240 <_ZN8touchgfx12NoTransitionD1Ev>
 8006272:	210c      	movs	r1, #12
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f01f fd7e 	bl	8025d76 <_ZdlPvj>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <_Z41__static_initialization_and_destruction_0ii>:
 8006284:	b580      	push	{r7, lr}
 8006286:	b092      	sub	sp, #72	; 0x48
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b01      	cmp	r3, #1
 8006292:	f040 8114 	bne.w	80064be <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800629c:	4293      	cmp	r3, r2
 800629e:	f040 810e 	bne.w	80064be <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80062a2:	2300      	movs	r3, #0
 80062a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80062a8:	2300      	movs	r3, #0
 80062aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80062ae:	2300      	movs	r3, #0
 80062b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062b4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80062b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80062c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80062cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062d0:	041b      	lsls	r3, r3, #16
 80062d2:	461a      	mov	r2, r3
 80062d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	431a      	orrs	r2, r3
 80062dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80062e6:	f107 0320 	add.w	r3, r7, #32
 80062ea:	4611      	mov	r1, r2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fd feaf 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 80062f2:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80062f4:	bf00      	nop
 80062f6:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80062f8:	4b73      	ldr	r3, [pc, #460]	; (80064c8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	23ff      	movs	r3, #255	; 0xff
 80062fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006302:	2300      	movs	r3, #0
 8006304:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006308:	2300      	movs	r3, #0
 800630a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800630e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006312:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006316:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800631a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006322:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006326:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800632a:	041b      	lsls	r3, r3, #16
 800632c:	461a      	mov	r2, r3
 800632e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	431a      	orrs	r2, r3
 8006336:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800633a:	4313      	orrs	r3, r2
 800633c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006340:	f107 031c 	add.w	r3, r7, #28
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f7fd fe82 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800634c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800634e:	bf00      	nop
 8006350:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8006352:	4b5e      	ldr	r3, [pc, #376]	; (80064cc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800635c:	23ff      	movs	r3, #255	; 0xff
 800635e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8006362:	2300      	movs	r3, #0
 8006364:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006368:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800636c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006370:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006374:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8006378:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800637c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006380:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	461a      	mov	r2, r3
 8006388:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800638c:	021b      	lsls	r3, r3, #8
 800638e:	431a      	orrs	r2, r3
 8006390:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006394:	4313      	orrs	r3, r2
 8006396:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800639a:	f107 0318 	add.w	r3, r7, #24
 800639e:	4611      	mov	r1, r2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fd fe55 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 80063a6:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80063a8:	bf00      	nop
 80063aa:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80063ac:	4b48      	ldr	r3, [pc, #288]	; (80064d0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80063b6:	2300      	movs	r3, #0
 80063b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80063bc:	23ff      	movs	r3, #255	; 0xff
 80063be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80063c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80063c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80063ca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80063ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80063d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80063d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80063da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	461a      	mov	r2, r3
 80063e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	431a      	orrs	r2, r3
 80063ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fd fe28 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8006400:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8006402:	bf00      	nop
 8006404:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8006406:	4b33      	ldr	r3, [pc, #204]	; (80064d4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	23f7      	movs	r3, #247	; 0xf7
 800640c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8006410:	234c      	movs	r3, #76	; 0x4c
 8006412:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8006416:	2302      	movs	r3, #2
 8006418:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800641c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006420:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006424:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006428:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800642c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006430:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006434:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	461a      	mov	r2, r3
 800643c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	431a      	orrs	r2, r3
 8006444:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006448:	4313      	orrs	r3, r2
 800644a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800644e:	f107 0310 	add.w	r3, r7, #16
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f7fd fdfb 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800645a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800645c:	bf00      	nop
 800645e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8006460:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	23f7      	movs	r3, #247	; 0xf7
 8006466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800646a:	23d2      	movs	r3, #210	; 0xd2
 800646c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006470:	2302      	movs	r3, #2
 8006472:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8006476:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800647a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800647e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006486:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800648a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800648e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	461a      	mov	r2, r3
 8006496:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	431a      	orrs	r2, r3
 800649e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80064a8:	f107 030c 	add.w	r3, r7, #12
 80064ac:	4611      	mov	r1, r2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fd fdce 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 80064b4:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 80064b6:	bf00      	nop
 80064b8:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 80064ba:	4b08      	ldr	r3, [pc, #32]	; (80064dc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	bf00      	nop
 80064c0:	3748      	adds	r7, #72	; 0x48
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200237ac 	.word	0x200237ac
 80064cc:	200237b0 	.word	0x200237b0
 80064d0:	200237b4 	.word	0x200237b4
 80064d4:	200237b8 	.word	0x200237b8
 80064d8:	200237bc 	.word	0x200237bc
 80064dc:	200237c0 	.word	0x200237c0

080064e0 <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064e8:	2001      	movs	r0, #1
 80064ea:	f7ff fecb 	bl	8006284 <_Z41__static_initialization_and_destruction_0ii>
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
    }
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af08      	add	r7, sp, #32
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	4611      	mov	r1, r2
 800652c:	461a      	mov	r2, r3
 800652e:	460b      	mov	r3, r1
 8006530:	80fb      	strh	r3, [r7, #6]
 8006532:	4613      	mov	r3, r2
 8006534:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	88b9      	ldrh	r1, [r7, #4]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800653e:	9306      	str	r3, [sp, #24]
 8006540:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800654e:	9303      	str	r3, [sp, #12]
 8006550:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006554:	9302      	str	r3, [sp, #8]
 8006556:	7f3b      	ldrb	r3, [r7, #28]
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	7e3b      	ldrb	r3, [r7, #24]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	460b      	mov	r3, r1
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	f013 fc6f 	bl	8019e44 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8006566:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006570:	619a      	str	r2, [r3, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006576:	61da      	str	r2, [r3, #28]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800657c:	621a      	str	r2, [r3, #32]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006582:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	0802b9d0 	.word	0x0802b9d0

08006594 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	889b      	ldrh	r3, [r3, #4]
 80065a8:	0adb      	lsrs	r3, r3, #11
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4413      	add	r3, r2
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80065c6:	b480      	push	{r7}
 80065c8:	b089      	sub	sp, #36	; 0x24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	460b      	mov	r3, r1
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7b1b      	ldrb	r3, [r3, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e030      	b.n	8006648 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	69da      	ldr	r2, [r3, #28]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	7b5b      	ldrb	r3, [r3, #13]
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	b21b      	sxth	r3, r3
 80065f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065fa:	b219      	sxth	r1, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	7adb      	ldrb	r3, [r3, #11]
 8006600:	b21b      	sxth	r3, r3
 8006602:	430b      	orrs	r3, r1
 8006604:	b21b      	sxth	r3, r3
 8006606:	b29b      	uxth	r3, r3
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	7b1b      	ldrb	r3, [r3, #12]
 8006612:	837b      	strh	r3, [r7, #26]
 8006614:	8b7b      	ldrh	r3, [r7, #26]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d015      	beq.n	8006646 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	897a      	ldrh	r2, [r7, #10]
 8006620:	429a      	cmp	r2, r3
 8006622:	d103      	bne.n	800662c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800662a:	e00d      	b.n	8006648 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	897a      	ldrh	r2, [r7, #10]
 8006632:	429a      	cmp	r2, r3
 8006634:	d306      	bcc.n	8006644 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006636:	8b7b      	ldrh	r3, [r7, #26]
 8006638:	3b01      	subs	r3, #1
 800663a:	837b      	strh	r3, [r7, #26]
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	3304      	adds	r3, #4
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	e7e7      	b.n	8006614 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8006644:	bf00      	nop
        }
    }
    return 0;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3724      	adds	r7, #36	; 0x24
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800665c:	4a14      	ldr	r2, [pc, #80]	; (80066b0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f7fd fd01 	bl	800406e <_ZN8touchgfx4RectC1Ev>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	330c      	adds	r3, #12
 8006670:	4618      	mov	r0, r3
 8006672:	f7fd fcfc 	bl	800406e <_ZN8touchgfx4RectC1Ev>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	615a      	str	r2, [r3, #20]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	619a      	str	r2, [r3, #24]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	61da      	str	r2, [r3, #28]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	841a      	strh	r2, [r3, #32]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	845a      	strh	r2, [r3, #34]	; 0x22
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	0802d3ec 	.word	0x0802d3ec

080066b4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
    {
 80066bc:	4a04      	ldr	r2, [pc, #16]	; (80066d0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]
    }
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	0802d3ec 	.word	0x0802d3ec

080066d4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
    }
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff ffe9 	bl	80066b4 <_ZN8touchgfx8DrawableD1Ev>
 80066e2:	2128      	movs	r1, #40	; 0x28
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f01f fb46 	bl	8025d76 <_ZdlPvj>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	887a      	ldrh	r2, [r7, #2]
 8006704:	809a      	strh	r2, [r3, #4]
    }
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	887a      	ldrh	r2, [r7, #2]
 8006722:	80da      	strh	r2, [r3, #6]
    }
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	887a      	ldrh	r2, [r7, #2]
 8006740:	811a      	strh	r2, [r3, #8]
    }
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	887a      	ldrh	r2, [r7, #2]
 800675e:	815a      	strh	r2, [r3, #10]
    }
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
    {
    }
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
    {
    }
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
    {
    }
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
    {
    }
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
    {
    }
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	807b      	strh	r3, [r7, #2]
 80067e2:	4613      	mov	r3, r2
 80067e4:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3350      	adds	r3, #80	; 0x50
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	8879      	ldrh	r1, [r7, #2]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80067f6:	b292      	uxth	r2, r2
 80067f8:	1a8a      	subs	r2, r1, r2
 80067fa:	b292      	uxth	r2, r2
 80067fc:	b210      	sxth	r0, r2
 80067fe:	8839      	ldrh	r1, [r7, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8006806:	b292      	uxth	r2, r2
 8006808:	1a8a      	subs	r2, r1, r2
 800680a:	b292      	uxth	r2, r2
 800680c:	b212      	sxth	r2, r2
 800680e:	4601      	mov	r1, r0
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
    }
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff ff14 	bl	8006654 <_ZN8touchgfx8DrawableC1Ev>
 800682c:	4a05      	ldr	r2, [pc, #20]	; (8006844 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	0802c104 	.word	0x0802c104

08006848 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	4a05      	ldr	r2, [pc, #20]	; (8006880 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff ff1f 	bl	80066b4 <_ZN8touchgfx8DrawableD1Ev>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	0802c104 	.word	0x0802c104

08006884 <_ZN8touchgfx9ContainerD0Ev>:
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff ffe7 	bl	8006860 <_ZN8touchgfx9ContainerD1Ev>
 8006892:	212c      	movs	r1, #44	; 0x2c
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f01f fa6e 	bl	8025d76 <_ZdlPvj>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
        return 0;
 80068ac:	2300      	movs	r3, #0
    }
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	4608      	mov	r0, r1
 80068c4:	4611      	mov	r1, r2
 80068c6:	461a      	mov	r2, r3
 80068c8:	4603      	mov	r3, r0
 80068ca:	817b      	strh	r3, [r7, #10]
 80068cc:	460b      	mov	r3, r1
 80068ce:	813b      	strh	r3, [r7, #8]
 80068d0:	4613      	mov	r3, r2
 80068d2:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 80068d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80068d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80068dc:	4619      	mov	r1, r3
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f80c 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80068e4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80068e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068ec:	4619      	mov	r1, r3
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f822 	bl	8006938 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	807b      	strh	r3, [r7, #2]
 8006908:	4613      	mov	r3, r2
 800690a:	803b      	strh	r3, [r7, #0]
        setX(x);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	332c      	adds	r3, #44	; 0x2c
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006918:	4611      	mov	r1, r2
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	4798      	blx	r3
        setY(y);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3330      	adds	r3, #48	; 0x30
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f9b7 2000 	ldrsh.w	r2, [r7]
 800692a:	4611      	mov	r1, r2
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
    }
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	807b      	strh	r3, [r7, #2]
 8006944:	4613      	mov	r3, r2
 8006946:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3334      	adds	r3, #52	; 0x34
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006954:	4611      	mov	r1, r2
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
        setHeight(height);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3338      	adds	r3, #56	; 0x38
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006966:	4611      	mov	r1, r2
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
    }
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
        return visible;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
        return touchable;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069b6:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069be:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069c6:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7ff ffe1 	bl	80069a8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]
    }
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
    {
 8006a04:	4a06      	ldr	r2, [pc, #24]	; (8006a20 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff ff26 	bl	8006860 <_ZN8touchgfx9ContainerD1Ev>
    }
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	0802d4e4 	.word	0x0802d4e4

08006a24 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
    }
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ffe5 	bl	80069fc <_ZN8touchgfx6ScreenD1Ev>
 8006a32:	213c      	movs	r1, #60	; 0x3c
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f01f f99e 	bl	8025d76 <_ZdlPvj>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
    {
    }
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
    {
    }
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
    {
    }
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
    {
    }
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f00e fafd 	bl	80150bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	607b      	str	r3, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	817b      	strh	r3, [r7, #10]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff ff48 	bl	8006974 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff ff4e 	bl	800698e <_ZNK8touchgfx8Drawable11isTouchableEv>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8006afc:	2300      	movs	r3, #0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]
        }
    }
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fd9a 	bl	8006654 <_ZN8touchgfx8DrawableC1Ev>
 8006b20:	4a03      	ldr	r2, [pc, #12]	; (8006b30 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	0802baa4 	.word	0x0802baa4

08006b34 <_ZN8touchgfx6WidgetD1Ev>:
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fdb5 	bl	80066b4 <_ZN8touchgfx8DrawableD1Ev>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	0802baa4 	.word	0x0802baa4

08006b58 <_ZN8touchgfx6WidgetD0Ev>:
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ffe7 	bl	8006b34 <_ZN8touchgfx6WidgetD1Ev>
 8006b66:	2128      	movs	r1, #40	; 0x28
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f01f f904 	bl	8025d76 <_ZdlPvj>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4618      	mov	r0, r3
 8006b84:	2326      	movs	r3, #38	; 0x26
 8006b86:	461a      	mov	r2, r3
 8006b88:	2100      	movs	r1, #0
 8006b8a:	f01f fab5 	bl	80260f8 <memset>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff ffbd 	bl	8006b10 <_ZN8touchgfx6WidgetC1Ev>
 8006b96:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <_ZN8touchgfx3BoxC1Ev+0x44>)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	22ff      	movs	r2, #255	; 0xff
 8006ba0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3328      	adds	r3, #40	; 0x28
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fd fa50 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	0802cfa0 	.word	0x0802cfa0

08006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8006be8:	4a06      	ldr	r2, [pc, #24]	; (8006c04 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	887a      	ldrh	r2, [r7, #2]
 8006bf2:	809a      	strh	r2, [r3, #4]
    }
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	0802b978 	.word	0x0802b978

08006c08 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4618      	mov	r0, r3
 8006c14:	2326      	movs	r3, #38	; 0x26
 8006c16:	461a      	mov	r2, r3
 8006c18:	2100      	movs	r1, #0
 8006c1a:	f01f fa6d 	bl	80260f8 <memset>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ff75 	bl	8006b10 <_ZN8touchgfx6WidgetC1Ev>
 8006c26:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3328      	adds	r3, #40	; 0x28
 8006c30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff ffd1 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3330      	adds	r3, #48	; 0x30
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fd fa05 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	869a      	strh	r2, [r3, #52]	; 0x34
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	22ff      	movs	r2, #255	; 0xff
 8006c50:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	0802cef8 	.word	0x0802cef8

08006c7c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3328      	adds	r3, #40	; 0x28
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe ff54 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff ff4c 	bl	8006b34 <_ZN8touchgfx6WidgetD1Ev>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	0802cef8 	.word	0x0802cef8

08006cac <_ZN8touchgfx8TextAreaD0Ev>:
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff ffe1 	bl	8006c7c <_ZN8touchgfx8TextAreaD1Ev>
 8006cba:	213c      	movs	r1, #60	; 0x3c
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f01f f85a 	bl	8025d76 <_ZdlPvj>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff ff96 	bl	8006c08 <_ZN8touchgfx8TextAreaC1Ev>
 8006cdc:	4a05      	ldr	r2, [pc, #20]	; (8006cf4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	0802d004 	.word	0x0802d004

08006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8006d34:	4a09      	ldr	r2, [pc, #36]	; (8006d5c <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	809a      	strh	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	80da      	strh	r2, [r3, #6]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	22ff      	movs	r2, #255	; 0xff
 8006d4a:	721a      	strb	r2, [r3, #8]
    {
    }
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	0802ba90 	.word	0x0802ba90

08006d60 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
    {
 8006d68:	4a04      	ldr	r2, [pc, #16]	; (8006d7c <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
    }
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	0802ba90 	.word	0x0802ba90

08006d80 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
    }
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ffe9 	bl	8006d60 <_ZN8touchgfx15AbstractPainterD1Ev>
 8006d8e:	210c      	movs	r1, #12
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f01e fff0 	bl	8025d76 <_ZdlPvj>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
            : v(i)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	601a      	str	r2, [r3, #0]
        {
        }
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
        {
            return v;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
        }
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8006dd6:	b590      	push	{r4, r7, lr}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3340      	adds	r3, #64	; 0x40
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7ff ffea 	bl	8006dbe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8006dea:	4604      	mov	r4, r0
 8006dec:	463b      	mov	r3, r7
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff ffe5 	bl	8006dbe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8006df4:	4603      	mov	r3, r0
 8006df6:	429c      	cmp	r4, r3
 8006df8:	bf0c      	ite	eq
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d106      	bne.n	8006e12 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f00f fd6a 	bl	80168e4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8006e10:	e000      	b.n	8006e14 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8006e12:	bf00      	nop
    }
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd90      	pop	{r4, r7, pc}
	...

08006e1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff ff80 	bl	8006d2c <_ZN8touchgfx15AbstractPainterC1Ev>
 8006e2c:	4a29      	ldr	r2, [pc, #164]	; (8006ed4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	60da      	str	r2, [r3, #12]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	611a      	str	r2, [r3, #16]
 8006e3e:	2301      	movs	r3, #1
 8006e40:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8006e42:	f7fe ff79 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8006e46:	4603      	mov	r3, r0
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	3224      	adds	r2, #36	; 0x24
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	4790      	blx	r2
 8006e52:	4603      	mov	r3, r0
 8006e54:	461a      	mov	r2, r3
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8006e62:	f7fc fdb3 	bl	80039cc <_ZN8touchgfx3HAL11getInstanceEv>
 8006e66:	4603      	mov	r3, r0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff ff53 	bl	8006d14 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	bf14      	ite	ne
 8006e74:	2301      	movne	r3, #1
 8006e76:	2300      	moveq	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01b      	beq.n	8006eb6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8006e7e:	f7fc fda5 	bl	80039cc <_ZN8touchgfx3HAL11getInstanceEv>
 8006e82:	4603      	mov	r3, r0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff ff45 	bl	8006d14 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	3224      	adds	r2, #36	; 0x24
 8006e90:	6812      	ldr	r2, [r2, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	4790      	blx	r2
 8006e96:	4603      	mov	r3, r0
 8006e98:	461a      	mov	r2, r3
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2301      	moveq	r3, #1
 8006ea2:	2300      	movne	r3, #0
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bf14      	ite	ne
 8006eb0:	2301      	movne	r3, #1
 8006eb2:	2300      	moveq	r3, #0
 8006eb4:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8006ebe:	4a07      	ldr	r2, [pc, #28]	; (8006edc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 8006ec0:	2128      	movs	r1, #40	; 0x28
 8006ec2:	4807      	ldr	r0, [pc, #28]	; (8006ee0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 8006ec4:	f01f f88c 	bl	8025fe0 <__assert_func>
 8006ec8:	bf00      	nop
    }
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	0802ca8c 	.word	0x0802ca8c
 8006ed8:	0802aee4 	.word	0x0802aee4
 8006edc:	0802af44 	.word	0x0802af44
 8006ee0:	0802af80 	.word	0x0802af80

08006ee4 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	4a05      	ldr	r2, [pc, #20]	; (8006f04 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff ff33 	bl	8006d60 <_ZN8touchgfx15AbstractPainterD1Ev>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	0802ca8c 	.word	0x0802ca8c

08006f08 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ffe7 	bl	8006ee4 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8006f16:	2114      	movs	r1, #20
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f01e ff2c 	bl	8025d76 <_ZdlPvj>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff ff71 	bl	8006e1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8006f3a:	4a0a      	ldr	r2, [pc, #40]	; (8006f64 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	751a      	strb	r2, [r3, #20]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	755a      	strb	r2, [r3, #21]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f807 	bl	8006f68 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	0802caac 	.word	0x0802caac

08006f68 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 8006f76:	f107 0314 	add.w	r3, r7, #20
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fc fc98 	bl	80038b0 <_ZNK8touchgfx9colortypecvmEv>
 8006f80:	4603      	mov	r3, r0
 8006f82:	0c1b      	lsrs	r3, r3, #16
 8006f84:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	751a      	strb	r2, [r3, #20]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 8006f8e:	f107 0310 	add.w	r3, r7, #16
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fc fc8c 	bl	80038b0 <_ZNK8touchgfx9colortypecvmEv>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	755a      	strb	r2, [r3, #21]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 8006fa6:	f107 030c 	add.w	r3, r7, #12
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fc fc80 	bl	80038b0 <_ZNK8touchgfx9colortypecvmEv>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	759a      	strb	r2, [r3, #22]
    }
 8006fb8:	bf00      	nop
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <_ZN11tempBoxBaseD1Ev>:

class tempBoxBase : public touchgfx::Container
{
public:
    tempBoxBase();
    virtual ~tempBoxBase() {}
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	4a0d      	ldr	r2, [pc, #52]	; (8007000 <_ZN11tempBoxBaseD1Ev+0x40>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	33b8      	adds	r3, #184	; 0xb8
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff fe52 	bl	8006c7c <_ZN8touchgfx8TextAreaD1Ev>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	33a0      	adds	r3, #160	; 0xa0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 f88f 	bl	8008100 <_ZN8touchgfx13PainterRGB888D1Ev>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	332c      	adds	r3, #44	; 0x2c
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 f868 	bl	80080bc <_ZN8touchgfx4LineD1Ev>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff fc36 	bl	8006860 <_ZN8touchgfx9ContainerD1Ev>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	0802bc04 	.word	0x0802bc04

08007004 <_ZN11tempBoxBaseD0Ev>:
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff ffd7 	bl	8006fc0 <_ZN11tempBoxBaseD1Ev>
 8007012:	21f4      	movs	r1, #244	; 0xf4
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f01e feae 	bl	8025d76 <_ZdlPvj>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 8007024:	b590      	push	{r4, r7, lr}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <_ZN7tempBoxD1Ev+0x7c>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	f646 031c 	movw	r3, #26652	; 0x681c
 8007038:	4413      	add	r3, r2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d011      	beq.n	8007062 <_ZN7tempBoxD1Ev+0x3e>
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	f646 031c 	movw	r3, #26652	; 0x681c
 8007044:	4413      	add	r3, r2
 8007046:	f503 54a5 	add.w	r4, r3, #5280	; 0x14a0
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	f646 031c 	movw	r3, #26652	; 0x681c
 8007050:	4413      	add	r3, r2
 8007052:	429c      	cmp	r4, r3
 8007054:	d005      	beq.n	8007062 <_ZN7tempBoxD1Ev+0x3e>
 8007056:	3c18      	subs	r4, #24
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4620      	mov	r0, r4
 800705e:	4798      	blx	r3
 8007060:	e7f3      	b.n	800704a <_ZN7tempBoxD1Ev+0x26>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d010      	beq.n	800708e <_ZN7tempBoxD1Ev+0x6a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8007072:	f246 34b0 	movw	r4, #25520	; 0x63b0
 8007076:	441c      	add	r4, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800707e:	429c      	cmp	r4, r3
 8007080:	d005      	beq.n	800708e <_ZN7tempBoxD1Ev+0x6a>
 8007082:	3c74      	subs	r4, #116	; 0x74
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4620      	mov	r0, r4
 800708a:	4798      	blx	r3
 800708c:	e7f4      	b.n	8007078 <_ZN7tempBoxD1Ev+0x54>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff ff95 	bl	8006fc0 <_ZN11tempBoxBaseD1Ev>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	bd90      	pop	{r4, r7, pc}
 80070a0:	0802bda0 	.word	0x0802bda0

080070a4 <_ZN7tempBoxD0Ev>:
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ffb9 	bl	8007024 <_ZN7tempBoxD1Ev>
 80070b2:	f647 41bc 	movw	r1, #31932	; 0x7cbc
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f01e fe5d 	bl	8025d76 <_ZdlPvj>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	4a05      	ldr	r2, [pc, #20]	; (80070e8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff fd2b 	bl	8006b34 <_ZN8touchgfx6WidgetD1Ev>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	0802cfa0 	.word	0x0802cfa0

080070ec <_ZN8touchgfx3BoxD0Ev>:
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff ffe7 	bl	80070c8 <_ZN8touchgfx3BoxD1Ev>
 80070fa:	212c      	movs	r1, #44	; 0x2c
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f01e fe3a 	bl	8025d76 <_ZdlPvj>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <_ZN12alertBarBaseD1Ev>:

class alertBarBase : public touchgfx::Container
{
public:
    alertBarBase();
    virtual ~alertBarBase() {}
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	4a0a      	ldr	r2, [pc, #40]	; (8007140 <_ZN12alertBarBaseD1Ev+0x34>)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3360      	adds	r3, #96	; 0x60
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f832 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	332c      	adds	r3, #44	; 0x2c
 8007128:	4618      	mov	r0, r3
 800712a:	f001 f80b 	bl	8008144 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff fb95 	bl	8006860 <_ZN8touchgfx9ContainerD1Ev>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	0802bb78 	.word	0x0802bb78

08007144 <_ZN12alertBarBaseD0Ev>:
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff ffdd 	bl	800710c <_ZN12alertBarBaseD1Ev>
 8007152:	21a0      	movs	r1, #160	; 0xa0
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f01e fe0e 	bl	8025d76 <_ZdlPvj>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	4a05      	ldr	r2, [pc, #20]	; (8007184 <_ZN8alertBarD1Ev+0x20>)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff ffc9 	bl	800710c <_ZN12alertBarBaseD1Ev>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	0802bd14 	.word	0x0802bd14

08007188 <_ZN8alertBarD0Ev>:
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff ffe7 	bl	8007164 <_ZN8alertBarD1Ev>
 8007196:	21d8      	movs	r1, #216	; 0xd8
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f01e fdec 	bl	8025d76 <_ZdlPvj>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	4a05      	ldr	r2, [pc, #20]	; (80071c8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fc1f 	bl	80069fc <_ZN8touchgfx6ScreenD1Ev>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	0802ba5c 	.word	0x0802ba5c

080071cc <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff ffe7 	bl	80071a8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80071da:	2140      	movs	r1, #64	; 0x40
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f01e fdca 	bl	8025d76 <_ZdlPvj>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	4a31      	ldr	r2, [pc, #196]	; (80072bc <_ZN15Screen1ViewBaseD1Ev+0xd0>)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	4b30      	ldr	r3, [pc, #192]	; (80072c0 <_ZN15Screen1ViewBaseD1Ev+0xd4>)
 80071fe:	4413      	add	r3, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f000 ffc1 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	4b2e      	ldr	r3, [pc, #184]	; (80072c4 <_ZN15Screen1ViewBaseD1Ev+0xd8>)
 800720a:	4413      	add	r3, r2
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff ffa9 	bl	8007164 <_ZN8alertBarD1Ev>
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	4b2c      	ldr	r3, [pc, #176]	; (80072c8 <_ZN15Screen1ViewBaseD1Ev+0xdc>)
 8007216:	4413      	add	r3, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff ffa3 	bl	8007164 <_ZN8alertBarD1Ev>
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4b2a      	ldr	r3, [pc, #168]	; (80072cc <_ZN15Screen1ViewBaseD1Ev+0xe0>)
 8007222:	4413      	add	r3, r2
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff fefd 	bl	8007024 <_ZN7tempBoxD1Ev>
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007230:	4413      	add	r3, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fef6 	bl	8007024 <_ZN7tempBoxD1Ev>
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 800723e:	4413      	add	r3, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff feef 	bl	8007024 <_ZN7tempBoxD1Ev>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fee9 	bl	8007024 <_ZN7tempBoxD1Ev>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007258:	4618      	mov	r0, r3
 800725a:	f000 ff95 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007264:	4618      	mov	r0, r3
 8007266:	f000 ff8f 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007270:	4618      	mov	r0, r3
 8007272:	f000 ff89 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800727c:	4618      	mov	r0, r3
 800727e:	f000 ff3f 	bl	8008100 <_ZN8touchgfx13PainterRGB888D1Ev>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	33d8      	adds	r3, #216	; 0xd8
 8007286:	4618      	mov	r0, r3
 8007288:	f000 ff18 	bl	80080bc <_ZN8touchgfx4LineD1Ev>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3398      	adds	r3, #152	; 0x98
 8007290:	4618      	mov	r0, r3
 8007292:	f000 ff79 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	336c      	adds	r3, #108	; 0x6c
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff ff14 	bl	80070c8 <_ZN8touchgfx3BoxD1Ev>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3340      	adds	r3, #64	; 0x40
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff ff0f 	bl	80070c8 <_ZN8touchgfx3BoxD1Ev>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff ff7b 	bl	80071a8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	0802ba28 	.word	0x0802ba28
 80072c0:	0001f6c4 	.word	0x0001f6c4
 80072c4:	0001f5ec 	.word	0x0001f5ec
 80072c8:	0001f514 	.word	0x0001f514
 80072cc:	00017858 	.word	0x00017858

080072d0 <_ZN15Screen1ViewBaseD0Ev>:
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ff87 	bl	80071ec <_ZN15Screen1ViewBaseD1Ev>
 80072de:	4904      	ldr	r1, [pc, #16]	; (80072f0 <_ZN15Screen1ViewBaseD0Ev+0x20>)
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f01e fd48 	bl	8025d76 <_ZdlPvj>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	00022638 	.word	0x00022638

080072f4 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 80072f4:	b590      	push	{r4, r7, lr}
 80072f6:	b0c1      	sub	sp, #260	; 0x104
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fd12 	bl	8007d28 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8007304:	4a96      	ldr	r2, [pc, #600]	; (8007560 <_ZN15Screen1ViewBaseC1Ev+0x26c>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3340      	adds	r3, #64	; 0x40
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff fc32 	bl	8006b78 <_ZN8touchgfx3BoxC1Ev>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	336c      	adds	r3, #108	; 0x6c
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fc2d 	bl	8006b78 <_ZN8touchgfx3BoxC1Ev>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3398      	adds	r3, #152	; 0x98
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff fcd2 	bl	8006ccc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	33d8      	adds	r3, #216	; 0xd8
 800732c:	4618      	mov	r0, r3
 800732e:	f00f fab9 	bl	80168a4 <_ZN8touchgfx4LineC1Ev>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8007338:	f107 0320 	add.w	r3, r7, #32
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f7fc fe86 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007344:	6a39      	ldr	r1, [r7, #32]
 8007346:	4620      	mov	r0, r4
 8007348:	f7ff fdee 	bl	8006f28 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fcba 	bl	8006ccc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff fcb4 	bl	8006ccc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff fcae 	bl	8006ccc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007376:	4618      	mov	r0, r3
 8007378:	f002 fed2 	bl	800a120 <_ZN7tempBoxC1Ev>
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007382:	4413      	add	r3, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f002 fecb 	bl	800a120 <_ZN7tempBoxC1Ev>
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007390:	4413      	add	r3, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f002 fec4 	bl	800a120 <_ZN7tempBoxC1Ev>
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	4b72      	ldr	r3, [pc, #456]	; (8007564 <_ZN15Screen1ViewBaseC1Ev+0x270>)
 800739c:	4413      	add	r3, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f002 febe 	bl	800a120 <_ZN7tempBoxC1Ev>
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4b70      	ldr	r3, [pc, #448]	; (8007568 <_ZN15Screen1ViewBaseC1Ev+0x274>)
 80073a8:	4413      	add	r3, r2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f002 fcb8 	bl	8009d20 <_ZN8alertBarC1Ev>
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	4b6e      	ldr	r3, [pc, #440]	; (800756c <_ZN15Screen1ViewBaseC1Ev+0x278>)
 80073b4:	4413      	add	r3, r2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f002 fcb2 	bl	8009d20 <_ZN8alertBarC1Ev>
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	4b6c      	ldr	r3, [pc, #432]	; (8007570 <_ZN15Screen1ViewBaseC1Ev+0x27c>)
 80073c0:	4413      	add	r3, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fc82 	bl	8006ccc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4b6a      	ldr	r3, [pc, #424]	; (8007574 <_ZN15Screen1ViewBaseC1Ev+0x280>)
 80073cc:	4413      	add	r3, r2
 80073ce:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80073d2:	4618      	mov	r0, r3
 80073d4:	f00f ffec 	bl	80173b0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80073de:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80073e8:	2200      	movs	r2, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	f7ff fa65 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8007402:	2300      	movs	r3, #0
 8007404:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007408:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800740c:	041b      	lsls	r3, r3, #16
 800740e:	461a      	mov	r2, r3
 8007410:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	431a      	orrs	r2, r3
 8007418:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800741c:	4313      	orrs	r3, r2
 800741e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007422:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f7fc fe11 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800742e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007432:	4619      	mov	r1, r3
 8007434:	4620      	mov	r0, r4
 8007436:	f7ff fbc3 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8007440:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	f240 3325 	movw	r3, #805	; 0x325
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	f7ff fa34 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8007458:	2300      	movs	r3, #0
 800745a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800745e:	2300      	movs	r3, #0
 8007460:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8007464:	2300      	movs	r3, #0
 8007466:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 800746a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800746e:	041b      	lsls	r3, r3, #16
 8007470:	461a      	mov	r2, r3
 8007472:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8007476:	021b      	lsls	r3, r3, #8
 8007478:	431a      	orrs	r2, r3
 800747a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800747e:	4313      	orrs	r3, r2
 8007480:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007484:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007488:	4611      	mov	r1, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f7fc fde0 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007494:	4619      	mov	r1, r3
 8007496:	4620      	mov	r0, r4
 8007498:	f7ff fb92 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3398      	adds	r3, #152	; 0x98
 80074a0:	223c      	movs	r2, #60	; 0x3c
 80074a2:	f240 114b 	movw	r1, #331	; 0x14b
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fa28 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80074b2:	23ff      	movs	r3, #255	; 0xff
 80074b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80074b8:	23ff      	movs	r3, #255	; 0xff
 80074ba:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80074be:	23ff      	movs	r3, #255	; 0xff
 80074c0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80074c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074c8:	041b      	lsls	r3, r3, #16
 80074ca:	461a      	mov	r2, r3
 80074cc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	431a      	orrs	r2, r3
 80074d4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80074d8:	4313      	orrs	r3, r2
 80074da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80074de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fc fdb3 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 80074ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074ee:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80074f2:	61fb      	str	r3, [r7, #28]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80074f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80074fc:	bf00      	nop
    gearArea.setLinespacing(0);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3398      	adds	r3, #152	; 0x98
 8007502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007506:	2300      	movs	r3, #0
 8007508:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800750c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007510:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8007514:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007516:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID14).getText());
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4c17      	ldr	r4, [pc, #92]	; (8007578 <_ZN15Screen1ViewBaseC1Ev+0x284>)
 800751c:	441c      	add	r4, r3
 800751e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007522:	210b      	movs	r1, #11
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fb59 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 800752a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800752e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <_ZN15Screen1ViewBaseC1Ev+0x288>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <_ZN15Screen1ViewBaseC1Ev+0x252>
 800753a:	4b11      	ldr	r3, [pc, #68]	; (8007580 <_ZN15Screen1ViewBaseC1Ev+0x28c>)
 800753c:	4a11      	ldr	r2, [pc, #68]	; (8007584 <_ZN15Screen1ViewBaseC1Ev+0x290>)
 800753e:	21ae      	movs	r1, #174	; 0xae
 8007540:	4811      	ldr	r0, [pc, #68]	; (8007588 <_ZN15Screen1ViewBaseC1Ev+0x294>)
 8007542:	f01e fd4d 	bl	8025fe0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007546:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800754a:	889a      	ldrh	r2, [r3, #4]
 800754c:	4b0f      	ldr	r3, [pc, #60]	; (800758c <_ZN15Screen1ViewBaseC1Ev+0x298>)
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d31f      	bcc.n	8007594 <_ZN15Screen1ViewBaseC1Ev+0x2a0>
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <_ZN15Screen1ViewBaseC1Ev+0x29c>)
 8007556:	4a0b      	ldr	r2, [pc, #44]	; (8007584 <_ZN15Screen1ViewBaseC1Ev+0x290>)
 8007558:	21af      	movs	r1, #175	; 0xaf
 800755a:	480b      	ldr	r0, [pc, #44]	; (8007588 <_ZN15Screen1ViewBaseC1Ev+0x294>)
 800755c:	f01e fd40 	bl	8025fe0 <__assert_func>
 8007560:	0802ba28 	.word	0x0802ba28
 8007564:	00017858 	.word	0x00017858
 8007568:	0001f514 	.word	0x0001f514
 800756c:	0001f5ec 	.word	0x0001f5ec
 8007570:	0001f6c4 	.word	0x0001f6c4
 8007574:	0001f758 	.word	0x0001f758
 8007578:	0001f704 	.word	0x0001f704
 800757c:	20056768 	.word	0x20056768
 8007580:	0802afe4 	.word	0x0802afe4
 8007584:	0802b028 	.word	0x0802b028
 8007588:	0802b058 	.word	0x0802b058
 800758c:	2005676c 	.word	0x2005676c
 8007590:	0802b0a0 	.word	0x0802b0a0
    }
 8007594:	bf00      	nop
        return texts->getText(typedTextId);
 8007596:	4bc1      	ldr	r3, [pc, #772]	; (800789c <_ZN15Screen1ViewBaseC1Ev+0x5a8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fa0a 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 80075a4:	4603      	mov	r3, r0
 80075a6:	bf00      	nop
 80075a8:	4abd      	ldr	r2, [pc, #756]	; (80078a0 <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 80075aa:	2102      	movs	r1, #2
 80075ac:	4620      	mov	r0, r4
 80075ae:	f014 fc0b 	bl	801bdc8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80075b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fac0 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4bb7      	ldr	r3, [pc, #732]	; (80078a4 <_ZN15Screen1ViewBaseC1Ev+0x5b0>)
 80075c6:	4413      	add	r3, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	f7ff fb95 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3398      	adds	r3, #152	; 0x98
 80075d2:	4618      	mov	r0, r3
 80075d4:	f00f fd14 	bl	8017000 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80075de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff faf9 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 80075ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075ee:	4619      	mov	r1, r3
 80075f0:	4620      	mov	r0, r4
 80075f2:	f00f fd22 	bl	801703a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80075f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fa9e 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8007606:	2314      	movs	r3, #20
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	2398      	movs	r3, #152	; 0x98
 800760c:	228c      	movs	r2, #140	; 0x8c
 800760e:	f240 1149 	movw	r1, #329	; 0x149
 8007612:	f7ff f952 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800761c:	23ff      	movs	r3, #255	; 0xff
 800761e:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8007622:	23ff      	movs	r3, #255	; 0xff
 8007624:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8007628:	23ff      	movs	r3, #255	; 0xff
 800762a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 800762e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	461a      	mov	r2, r3
 8007636:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	431a      	orrs	r2, r3
 800763e:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8007642:	4313      	orrs	r3, r2
 8007644:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007648:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800764c:	4611      	mov	r1, r2
 800764e:	4618      	mov	r0, r3
 8007650:	f7fc fcfe 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007654:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007656:	4619      	mov	r1, r3
 8007658:	4620      	mov	r0, r4
 800765a:	f7ff fc85 	bl	8006f68 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800766a:	4619      	mov	r1, r3
 800766c:	4610      	mov	r0, r2
 800766e:	f00e ff3d 	bl	80164ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	33d8      	adds	r3, #216	; 0xd8
 8007676:	2200      	movs	r2, #0
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fb6a 	bl	8007d54 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	33d8      	adds	r3, #216	; 0xd8
 8007684:	2200      	movs	r2, #0
 8007686:	2196      	movs	r1, #150	; 0x96
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fb89 	bl	8007da0 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	33d8      	adds	r3, #216	; 0xd8
 8007692:	2104      	movs	r1, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fba9 	bl	8007dec <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	33d8      	adds	r3, #216	; 0xd8
 800769e:	2101      	movs	r1, #1
 80076a0:	4618      	mov	r0, r3
 80076a2:	f00f fa45 	bl	8016b30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 80076ac:	2345      	movs	r3, #69	; 0x45
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	23d4      	movs	r3, #212	; 0xd4
 80076b2:	2247      	movs	r2, #71	; 0x47
 80076b4:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80076b8:	f7ff f8ff 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 80076c2:	2300      	movs	r3, #0
 80076c4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80076c8:	2366      	movs	r3, #102	; 0x66
 80076ca:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80076ce:	23ff      	movs	r3, #255	; 0xff
 80076d0:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 80076d4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80076d8:	041b      	lsls	r3, r3, #16
 80076da:	461a      	mov	r2, r3
 80076dc:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	431a      	orrs	r2, r3
 80076e4:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80076e8:	4313      	orrs	r3, r2
 80076ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80076ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fc fcab 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 80076fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076fc:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8007700:	61bb      	str	r3, [r7, #24]
        this->color = color;
 8007702:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800770a:	bf00      	nop
    rpmArea.setLinespacing(0);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007716:	2300      	movs	r3, #0
 8007718:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        linespace = space;
 800771c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007720:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8007724:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007726:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4c5f      	ldr	r4, [pc, #380]	; (80078a8 <_ZN15Screen1ViewBaseC1Ev+0x5b4>)
 800772c:	441c      	add	r4, r3
 800772e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007732:	210a      	movs	r1, #10
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff fa51 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 800773a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800773e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007742:	4b5a      	ldr	r3, [pc, #360]	; (80078ac <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d105      	bne.n	8007756 <_ZN15Screen1ViewBaseC1Ev+0x462>
 800774a:	4b59      	ldr	r3, [pc, #356]	; (80078b0 <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 800774c:	4a59      	ldr	r2, [pc, #356]	; (80078b4 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 800774e:	21ae      	movs	r1, #174	; 0xae
 8007750:	4859      	ldr	r0, [pc, #356]	; (80078b8 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8007752:	f01e fc45 	bl	8025fe0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007756:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800775a:	889a      	ldrh	r2, [r3, #4]
 800775c:	4b57      	ldr	r3, [pc, #348]	; (80078bc <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d305      	bcc.n	8007770 <_ZN15Screen1ViewBaseC1Ev+0x47c>
 8007764:	4b56      	ldr	r3, [pc, #344]	; (80078c0 <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 8007766:	4a53      	ldr	r2, [pc, #332]	; (80078b4 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 8007768:	21af      	movs	r1, #175	; 0xaf
 800776a:	4853      	ldr	r0, [pc, #332]	; (80078b8 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 800776c:	f01e fc38 	bl	8025fe0 <__assert_func>
    }
 8007770:	bf00      	nop
        return texts->getText(typedTextId);
 8007772:	4b4a      	ldr	r3, [pc, #296]	; (800789c <_ZN15Screen1ViewBaseC1Ev+0x5a8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f001 f91c 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 8007780:	4603      	mov	r3, r0
 8007782:	bf00      	nop
 8007784:	4a46      	ldr	r2, [pc, #280]	; (80078a0 <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 8007786:	210a      	movs	r1, #10
 8007788:	4620      	mov	r0, r4
 800778a:	f014 fb1d 	bl	801bdc8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800778e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe f9d2 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	4b41      	ldr	r3, [pc, #260]	; (80078a8 <_ZN15Screen1ViewBaseC1Ev+0x5b4>)
 80077a2:	4413      	add	r3, r2
 80077a4:	4619      	mov	r1, r3
 80077a6:	f7ff faa7 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 80077b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077b4:	2101      	movs	r1, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff fa10 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 80077bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077c0:	4619      	mov	r1, r3
 80077c2:	4620      	mov	r0, r4
 80077c4:	f00f fc39 	bl	801703a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80077c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe f9b5 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 240, 49);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 80077d8:	2331      	movs	r3, #49	; 0x31
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	23f0      	movs	r3, #240	; 0xf0
 80077de:	2252      	movs	r2, #82	; 0x52
 80077e0:	210e      	movs	r1, #14
 80077e2:	f7ff f86a 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 80077ec:	23ff      	movs	r3, #255	; 0xff
 80077ee:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 80077f2:	23ff      	movs	r3, #255	; 0xff
 80077f4:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 80077f8:	23ff      	movs	r3, #255	; 0xff
 80077fa:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 80077fe:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	461a      	mov	r2, r3
 8007806:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	431a      	orrs	r2, r3
 800780e:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8007812:	4313      	orrs	r3, r2
 8007814:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007818:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800781c:	4611      	mov	r1, r2
 800781e:	4618      	mov	r0, r3
 8007820:	f7fc fc16 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007826:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 800782a:	617b      	str	r3, [r7, #20]
        this->color = color;
 800782c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007834:	bf00      	nop
    battArea.setLinespacing(0);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800783c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007840:	2300      	movs	r3, #0
 8007842:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
        linespace = space;
 8007846:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800784a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800784e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007850:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4c1b      	ldr	r4, [pc, #108]	; (80078c4 <_ZN15Screen1ViewBaseC1Ev+0x5d0>)
 8007856:	441c      	add	r4, r3
 8007858:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800785c:	2108      	movs	r1, #8
 800785e:	4618      	mov	r0, r3
 8007860:	f7ff f9bc 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 8007864:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800786c:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d105      	bne.n	8007880 <_ZN15Screen1ViewBaseC1Ev+0x58c>
 8007874:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 8007876:	4a0f      	ldr	r2, [pc, #60]	; (80078b4 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 8007878:	21ae      	movs	r1, #174	; 0xae
 800787a:	480f      	ldr	r0, [pc, #60]	; (80078b8 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 800787c:	f01e fbb0 	bl	8025fe0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007880:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007884:	889a      	ldrh	r2, [r3, #4]
 8007886:	4b0d      	ldr	r3, [pc, #52]	; (80078bc <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d31c      	bcc.n	80078c8 <_ZN15Screen1ViewBaseC1Ev+0x5d4>
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 8007890:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 8007892:	21af      	movs	r1, #175	; 0xaf
 8007894:	4808      	ldr	r0, [pc, #32]	; (80078b8 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8007896:	f01e fba3 	bl	8025fe0 <__assert_func>
 800789a:	bf00      	nop
 800789c:	20056774 	.word	0x20056774
 80078a0:	0802b0f4 	.word	0x0802b0f4
 80078a4:	0001f704 	.word	0x0001f704
 80078a8:	0001f708 	.word	0x0001f708
 80078ac:	20056768 	.word	0x20056768
 80078b0:	0802afe4 	.word	0x0802afe4
 80078b4:	0802b028 	.word	0x0802b028
 80078b8:	0802b058 	.word	0x0802b058
 80078bc:	2005676c 	.word	0x2005676c
 80078c0:	0802b0a0 	.word	0x0802b0a0
 80078c4:	0001f71c 	.word	0x0001f71c
    }
 80078c8:	bf00      	nop
        return texts->getText(typedTextId);
 80078ca:	4b97      	ldr	r3, [pc, #604]	; (8007b28 <_ZN15Screen1ViewBaseC1Ev+0x834>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80078d2:	4611      	mov	r1, r2
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 f86f 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 80078da:	4603      	mov	r3, r0
 80078dc:	bf00      	nop
 80078de:	4a93      	ldr	r2, [pc, #588]	; (8007b2c <_ZN15Screen1ViewBaseC1Ev+0x838>)
 80078e0:	210a      	movs	r1, #10
 80078e2:	4620      	mov	r0, r4
 80078e4:	f014 fa70 	bl	801bdc8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80078e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe f925 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	4b8d      	ldr	r3, [pc, #564]	; (8007b30 <_ZN15Screen1ViewBaseC1Ev+0x83c>)
 80078fc:	4413      	add	r3, r2
 80078fe:	4619      	mov	r1, r3
 8007900:	f7ff f9fa 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 800790a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800790e:	2102      	movs	r1, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f7ff f963 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 8007916:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800791a:	4619      	mov	r1, r3
 800791c:	4620      	mov	r0, r4
 800791e:	f00f fb8c 	bl	801703a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007922:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe f908 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>

    oilPressArea.setPosition(544, 82, 240, 117);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8007932:	2375      	movs	r3, #117	; 0x75
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	23f0      	movs	r3, #240	; 0xf0
 8007938:	2252      	movs	r2, #82	; 0x52
 800793a:	f44f 7108 	mov.w	r1, #544	; 0x220
 800793e:	f7fe ffbc 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    oilPressArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8007948:	23ff      	movs	r3, #255	; 0xff
 800794a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800794e:	23ff      	movs	r3, #255	; 0xff
 8007950:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8007954:	23ff      	movs	r3, #255	; 0xff
 8007956:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 800795a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800795e:	041b      	lsls	r3, r3, #16
 8007960:	461a      	mov	r2, r3
 8007962:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	431a      	orrs	r2, r3
 800796a:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800796e:	4313      	orrs	r3, r2
 8007970:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007974:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fc fb68 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007982:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8007986:	613b      	str	r3, [r7, #16]
        this->color = color;
 8007988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007990:	bf00      	nop
    oilPressArea.setLinespacing(0);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800799c:	2300      	movs	r3, #0
 800799e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
        linespace = space;
 80079a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a6:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 80079aa:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80079ac:	bf00      	nop
    oilPressAreaBuffer[0] = 0;
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	4b60      	ldr	r3, [pc, #384]	; (8007b34 <_ZN15Screen1ViewBaseC1Ev+0x840>)
 80079b2:	4413      	add	r3, r2
 80079b4:	2200      	movs	r2, #0
 80079b6:	801a      	strh	r2, [r3, #0]
    oilPressArea.setWildcard(oilPressAreaBuffer);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4b5c      	ldr	r3, [pc, #368]	; (8007b34 <_ZN15Screen1ViewBaseC1Ev+0x840>)
 80079c2:	4413      	add	r3, r2
 80079c4:	4619      	mov	r1, r3
 80079c6:	f7ff f997 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilPressArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80079d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079d4:	2103      	movs	r1, #3
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff f900 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 80079dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079e0:	4619      	mov	r1, r3
 80079e2:	4620      	mov	r0, r4
 80079e4:	f00f fb29 	bl	801703a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80079e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe f8a5 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80079f8:	22f8      	movs	r2, #248	; 0xf8
 80079fa:	210b      	movs	r1, #11
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fe ff7d 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007a08:	4413      	add	r3, r2
 8007a0a:	f240 1249 	movw	r2, #329	; 0x149
 8007a0e:	210b      	movs	r1, #11
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe ff73 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007a1c:	4413      	add	r3, r2
 8007a1e:	22f8      	movs	r2, #248	; 0xf8
 8007a20:	f240 213a 	movw	r1, #570	; 0x23a
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe ff69 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	4b42      	ldr	r3, [pc, #264]	; (8007b38 <_ZN15Screen1ViewBaseC1Ev+0x844>)
 8007a2e:	4413      	add	r3, r2
 8007a30:	f240 1249 	movw	r2, #329	; 0x149
 8007a34:	f240 213a 	movw	r1, #570	; 0x23a
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe ff5f 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	4b3e      	ldr	r3, [pc, #248]	; (8007b3c <_ZN15Screen1ViewBaseC1Ev+0x848>)
 8007a42:	4413      	add	r3, r2
 8007a44:	2200      	movs	r2, #0
 8007a46:	2100      	movs	r1, #0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe ff57 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	4b3b      	ldr	r3, [pc, #236]	; (8007b40 <_ZN15Screen1ViewBaseC1Ev+0x84c>)
 8007a52:	4413      	add	r3, r2
 8007a54:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe ff4e 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4838      	ldr	r0, [pc, #224]	; (8007b44 <_ZN15Screen1ViewBaseC1Ev+0x850>)
 8007a64:	4418      	add	r0, r3
 8007a66:	2331      	movs	r3, #49	; 0x31
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	23ee      	movs	r3, #238	; 0xee
 8007a6c:	2296      	movs	r2, #150	; 0x96
 8007a6e:	210e      	movs	r1, #14
 8007a70:	f7fe ff23 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4c33      	ldr	r4, [pc, #204]	; (8007b44 <_ZN15Screen1ViewBaseC1Ev+0x850>)
 8007a78:	441c      	add	r4, r3
 8007a7a:	23ff      	movs	r3, #255	; 0xff
 8007a7c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8007a80:	23ff      	movs	r3, #255	; 0xff
 8007a82:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8007a86:	23ff      	movs	r3, #255	; 0xff
 8007a88:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 8007a8c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	461a      	mov	r2, r3
 8007a94:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007aa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fc facf 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab4:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8007ab8:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8007aba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007ac2:	bf00      	nop
    cltArea.setLinespacing(0);
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	4b1f      	ldr	r3, [pc, #124]	; (8007b44 <_ZN15Screen1ViewBaseC1Ev+0x850>)
 8007ac8:	4413      	add	r3, r2
 8007aca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
        linespace = space;
 8007ad4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ad8:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 8007adc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007ade:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4c19      	ldr	r4, [pc, #100]	; (8007b48 <_ZN15Screen1ViewBaseC1Ev+0x854>)
 8007ae4:	441c      	add	r4, r3
 8007ae6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007aea:	2109      	movs	r1, #9
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff f875 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 8007af2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007af6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007afa:	4b14      	ldr	r3, [pc, #80]	; (8007b4c <_ZN15Screen1ViewBaseC1Ev+0x858>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d105      	bne.n	8007b0e <_ZN15Screen1ViewBaseC1Ev+0x81a>
 8007b02:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <_ZN15Screen1ViewBaseC1Ev+0x85c>)
 8007b04:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <_ZN15Screen1ViewBaseC1Ev+0x860>)
 8007b06:	21ae      	movs	r1, #174	; 0xae
 8007b08:	4813      	ldr	r0, [pc, #76]	; (8007b58 <_ZN15Screen1ViewBaseC1Ev+0x864>)
 8007b0a:	f01e fa69 	bl	8025fe0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b12:	889a      	ldrh	r2, [r3, #4]
 8007b14:	4b11      	ldr	r3, [pc, #68]	; (8007b5c <_ZN15Screen1ViewBaseC1Ev+0x868>)
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d323      	bcc.n	8007b64 <_ZN15Screen1ViewBaseC1Ev+0x870>
 8007b1c:	4b10      	ldr	r3, [pc, #64]	; (8007b60 <_ZN15Screen1ViewBaseC1Ev+0x86c>)
 8007b1e:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <_ZN15Screen1ViewBaseC1Ev+0x860>)
 8007b20:	21af      	movs	r1, #175	; 0xaf
 8007b22:	480d      	ldr	r0, [pc, #52]	; (8007b58 <_ZN15Screen1ViewBaseC1Ev+0x864>)
 8007b24:	f01e fa5c 	bl	8025fe0 <__assert_func>
 8007b28:	20056774 	.word	0x20056774
 8007b2c:	0802b0f4 	.word	0x0802b0f4
 8007b30:	0001f71c 	.word	0x0001f71c
 8007b34:	0001f730 	.word	0x0001f730
 8007b38:	00017858 	.word	0x00017858
 8007b3c:	0001f514 	.word	0x0001f514
 8007b40:	0001f5ec 	.word	0x0001f5ec
 8007b44:	0001f6c4 	.word	0x0001f6c4
 8007b48:	0001f744 	.word	0x0001f744
 8007b4c:	20056768 	.word	0x20056768
 8007b50:	0802afe4 	.word	0x0802afe4
 8007b54:	0802b028 	.word	0x0802b028
 8007b58:	0802b058 	.word	0x0802b058
 8007b5c:	2005676c 	.word	0x2005676c
 8007b60:	0802b0a0 	.word	0x0802b0a0
    }
 8007b64:	bf00      	nop
        return texts->getText(typedTextId);
 8007b66:	4b4f      	ldr	r3, [pc, #316]	; (8007ca4 <_ZN15Screen1ViewBaseC1Ev+0x9b0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 ff21 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 8007b76:	4603      	mov	r3, r0
 8007b78:	bf00      	nop
 8007b7a:	4a4b      	ldr	r2, [pc, #300]	; (8007ca8 <_ZN15Screen1ViewBaseC1Ev+0x9b4>)
 8007b7c:	210a      	movs	r1, #10
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f014 f922 	bl	801bdc8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007b84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fd ffd7 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	4b46      	ldr	r3, [pc, #280]	; (8007cac <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 8007b92:	4413      	add	r3, r2
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4a46      	ldr	r2, [pc, #280]	; (8007cb0 <_ZN15Screen1ViewBaseC1Ev+0x9bc>)
 8007b98:	440a      	add	r2, r1
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff f8ab 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4c41      	ldr	r4, [pc, #260]	; (8007cac <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 8007ba6:	441c      	add	r4, r3
 8007ba8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007bac:	2107      	movs	r1, #7
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff f814 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 8007bb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f00f fa3d 	bl	801703a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007bc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fd ffb9 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3340      	adds	r3, #64	; 0x40
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f7fe ff6a 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	336c      	adds	r3, #108	; 0x6c
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7fe ff63 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3398      	adds	r3, #152	; 0x98
 8007bec:	4619      	mov	r1, r3
 8007bee:	4610      	mov	r0, r2
 8007bf0:	f7fe ff5c 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	33d8      	adds	r3, #216	; 0xd8
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f7fe ff55 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	f7fe ff4d 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f7fe ff45 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilPressArea);
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7fe ff3d 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f7fe ff35 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007c4a:	4413      	add	r3, r2
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	f7fe ff2d 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007c5a:	4413      	add	r3, r2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f7fe ff25 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <_ZN15Screen1ViewBaseC1Ev+0x9c0>)
 8007c68:	4413      	add	r3, r2
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	f7fe ff1e 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <_ZN15Screen1ViewBaseC1Ev+0x9c4>)
 8007c76:	4413      	add	r3, r2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	f7fe ff17 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	4b0e      	ldr	r3, [pc, #56]	; (8007cbc <_ZN15Screen1ViewBaseC1Ev+0x9c8>)
 8007c84:	4413      	add	r3, r2
 8007c86:	4619      	mov	r1, r3
 8007c88:	f7fe ff10 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	4b06      	ldr	r3, [pc, #24]	; (8007cac <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 8007c92:	4413      	add	r3, r2
 8007c94:	4619      	mov	r1, r3
 8007c96:	f7fe ff09 	bl	8006aac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	37fc      	adds	r7, #252	; 0xfc
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd90      	pop	{r4, r7, pc}
 8007ca4:	20056774 	.word	0x20056774
 8007ca8:	0802b0f4 	.word	0x0802b0f4
 8007cac:	0001f6c4 	.word	0x0001f6c4
 8007cb0:	0001f744 	.word	0x0001f744
 8007cb4:	00017858 	.word	0x00017858
 8007cb8:	0001f514 	.word	0x0001f514
 8007cbc:	0001f5ec 	.word	0x0001f5ec

08007cc0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f002 fb06 	bl	800a2e0 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007cda:	4413      	add	r3, r2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f002 faff 	bl	800a2e0 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007ce8:	4413      	add	r3, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f002 faf8 	bl	800a2e0 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <_ZN15Screen1ViewBase11setupScreenEv+0x5c>)
 8007cf4:	4413      	add	r3, r2
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f002 faf2 	bl	800a2e0 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <_ZN15Screen1ViewBase11setupScreenEv+0x60>)
 8007d00:	4413      	add	r3, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f002 f83a 	bl	8009d7c <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <_ZN15Screen1ViewBase11setupScreenEv+0x64>)
 8007d0c:	4413      	add	r3, r2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f002 f834 	bl	8009d7c <_ZN8alertBar10initializeEv>
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	00017858 	.word	0x00017858
 8007d20:	0001f514 	.word	0x0001f514
 8007d24:	0001f5ec 	.word	0x0001f5ec

08007d28 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f012 fbb0 	bl	801a498 <_ZN8touchgfx6ScreenC1Ev>
 8007d38:	4a05      	ldr	r2, [pc, #20]	; (8007d50 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	0802ba5c 	.word	0x0802ba5c

08007d54 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8007d54:	b590      	push	{r4, r7, lr}
 8007d56:	b089      	sub	sp, #36	; 0x24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	f107 0314 	add.w	r3, r7, #20
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff f816 	bl	8006da0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	461c      	mov	r4, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	61fb      	str	r3, [r7, #28]
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	f107 0310 	add.w	r3, r7, #16
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff f80a 	bl	8006da0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007d8c:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4621      	mov	r1, r4
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f00e feb6 	bl	8016b04 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8007d98:	bf00      	nop
 8007d9a:	3724      	adds	r7, #36	; 0x24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd90      	pop	{r4, r7, pc}

08007da0 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8007da0:	b590      	push	{r4, r7, lr}
 8007da2:	b089      	sub	sp, #36	; 0x24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	61bb      	str	r3, [r7, #24]
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	f107 0314 	add.w	r3, r7, #20
 8007db8:	4611      	mov	r1, r2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fff0 	bl	8006da0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	461c      	mov	r4, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	61fb      	str	r3, [r7, #28]
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	f107 0310 	add.w	r3, r7, #16
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe ffe4 	bl	8006da0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007dd8:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4621      	mov	r1, r4
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f00e fe9b 	bl	8016b1a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8007de4:	bf00      	nop
 8007de6:	3724      	adds	r7, #36	; 0x24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd90      	pop	{r4, r7, pc}

08007dec <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	f107 0308 	add.w	r3, r7, #8
 8007e02:	4611      	mov	r1, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe ffcb 	bl	8006da0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe ffe1 	bl	8006dd6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <_Z41__static_initialization_and_destruction_0ii>:
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b092      	sub	sp, #72	; 0x48
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	f040 8114 	bne.w	8008056 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e34:	4293      	cmp	r3, r2
 8007e36:	f040 810e 	bne.w	8008056 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007e40:	2300      	movs	r3, #0
 8007e42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007e50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007e64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e68:	041b      	lsls	r3, r3, #16
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007e70:	021b      	lsls	r3, r3, #8
 8007e72:	431a      	orrs	r2, r3
 8007e74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007e7e:	f107 0320 	add.w	r3, r7, #32
 8007e82:	4611      	mov	r1, r2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fc f8e3 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8007e8c:	bf00      	nop
 8007e8e:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8007e90:	4b73      	ldr	r3, [pc, #460]	; (8008060 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	23ff      	movs	r3, #255	; 0xff
 8007e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8007ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007eaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8007eae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007ebe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ec2:	041b      	lsls	r3, r3, #16
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007ed8:	f107 031c 	add.w	r3, r7, #28
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fc f8b6 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007ee4:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8007ee6:	bf00      	nop
 8007ee8:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8007eea:	4b5e      	ldr	r3, [pc, #376]	; (8008064 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8007ef4:	23ff      	movs	r3, #255	; 0xff
 8007ef6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8007efa:	2300      	movs	r3, #0
 8007efc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f00:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007f04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007f08:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007f0c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8007f10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f14:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007f18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f1c:	041b      	lsls	r3, r3, #16
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	431a      	orrs	r2, r3
 8007f28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007f32:	f107 0318 	add.w	r3, r7, #24
 8007f36:	4611      	mov	r1, r2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fc f889 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007f3e:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8007f40:	bf00      	nop
 8007f42:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8007f44:	4b48      	ldr	r3, [pc, #288]	; (8008068 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8007f54:	23ff      	movs	r3, #255	; 0xff
 8007f56:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8007f5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007f5e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8007f62:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007f66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f6a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007f6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007f72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	461a      	mov	r2, r3
 8007f7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f7e:	021b      	lsls	r3, r3, #8
 8007f80:	431a      	orrs	r2, r3
 8007f82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007f8c:	f107 0314 	add.w	r3, r7, #20
 8007f90:	4611      	mov	r1, r2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fc f85c 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007f98:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8007f9a:	bf00      	nop
 8007f9c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8007f9e:	4b33      	ldr	r3, [pc, #204]	; (800806c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	23f7      	movs	r3, #247	; 0xf7
 8007fa4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8007fa8:	234c      	movs	r3, #76	; 0x4c
 8007faa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8007fae:	2302      	movs	r3, #2
 8007fb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007fb4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8007fb8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007fbc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007fc0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8007fc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fc8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007fcc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007fd0:	041b      	lsls	r3, r3, #16
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007fe6:	f107 0310 	add.w	r3, r7, #16
 8007fea:	4611      	mov	r1, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fc f82f 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8007ff2:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8007ff4:	bf00      	nop
 8007ff6:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	23f7      	movs	r3, #247	; 0xf7
 8007ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008002:	23d2      	movs	r3, #210	; 0xd2
 8008004:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008008:	2302      	movs	r3, #2
 800800a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800800e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008012:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008016:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008022:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008026:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800802a:	041b      	lsls	r3, r3, #16
 800802c:	461a      	mov	r2, r3
 800802e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	431a      	orrs	r2, r3
 8008036:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800803a:	4313      	orrs	r3, r2
 800803c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008040:	f107 030c 	add.w	r3, r7, #12
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f7fc f802 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800804c:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800804e:	bf00      	nop
 8008050:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8008052:	4b08      	ldr	r3, [pc, #32]	; (8008074 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	bf00      	nop
 8008058:	3748      	adds	r7, #72	; 0x48
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	200237c4 	.word	0x200237c4
 8008064:	200237c8 	.word	0x200237c8
 8008068:	200237cc 	.word	0x200237cc
 800806c:	200237d0 	.word	0x200237d0
 8008070:	200237d4 	.word	0x200237d4
 8008074:	200237d8 	.word	0x200237d8

08008078 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	4a05      	ldr	r2, [pc, #20]	; (8008098 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fd53 	bl	8006b34 <_ZN8touchgfx6WidgetD1Ev>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	0802cb30 	.word	0x0802cb30

0800809c <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff ffe7 	bl	8008078 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80080aa:	2130      	movs	r1, #48	; 0x30
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f01d fe62 	bl	8025d76 <_ZdlPvj>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	4a05      	ldr	r2, [pc, #20]	; (80080dc <_ZN8touchgfx4LineD1Ev+0x20>)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff ffd3 	bl	8008078 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	0802cd54 	.word	0x0802cd54

080080e0 <_ZN8touchgfx4LineD0Ev>:
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ffe7 	bl	80080bc <_ZN8touchgfx4LineD1Ev>
 80080ee:	2174      	movs	r1, #116	; 0x74
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f01d fe40 	bl	8025d76 <_ZdlPvj>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	4a05      	ldr	r2, [pc, #20]	; (8008120 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fee7 	bl	8006ee4 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	0802caac 	.word	0x0802caac

08008124 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ffe7 	bl	8008100 <_ZN8touchgfx13PainterRGB888D1Ev>
 8008132:	2118      	movs	r1, #24
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f01d fe1e 	bl	8025d76 <_ZdlPvj>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <_ZN8touchgfx13BoxWithBorderD1Ev>:
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	4a05      	ldr	r2, [pc, #20]	; (8008164 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4618      	mov	r0, r3
 8008156:	f7fe ffb7 	bl	80070c8 <_ZN8touchgfx3BoxD1Ev>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	0802d0ac 	.word	0x0802d0ac

08008168 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ffe7 	bl	8008144 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8008176:	2134      	movs	r1, #52	; 0x34
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f01d fdfc 	bl	8025d76 <_ZdlPvj>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	4a05      	ldr	r2, [pc, #20]	; (80081a8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fd6f 	bl	8006c7c <_ZN8touchgfx8TextAreaD1Ev>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	0802d004 	.word	0x0802d004

080081ac <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff ffe7 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80081ba:	2140      	movs	r1, #64	; 0x40
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f01d fdda 	bl	8025d76 <_ZdlPvj>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <_GLOBAL__sub_I__ZN15Screen1ViewBaseC2Ev>:
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80081d4:	2001      	movs	r0, #1
 80081d6:	f7ff fe21 	bl	8007e1c <_Z41__static_initialization_and_destruction_0ii>
 80081da:	bd80      	pop	{r7, pc}

080081dc <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__tcf_0+0xc>)
 80081e2:	f7fd fc89 	bl	8005af8 <_ZN8touchgfx13GeneratedFontD1Ev>
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	200237dc 	.word	0x200237dc

080081ec <_Z37getFont_JetBrainsMono_Regular_40_4bppv>:
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08c      	sub	sp, #48	; 0x30
 80081f0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 80081f2:	4b1f      	ldr	r3, [pc, #124]	; (8008270 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	f3bf 8f5b 	dmb	ish
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	bf0c      	ite	eq
 8008204:	2301      	moveq	r3, #1
 8008206:	2300      	movne	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d02c      	beq.n	8008268 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800820e:	4818      	ldr	r0, [pc, #96]	; (8008270 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 8008210:	f01d fdb3 	bl	8025d7a <__cxa_guard_acquire>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	bf14      	ite	ne
 800821a:	2301      	movne	r3, #1
 800821c:	2300      	moveq	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d021      	beq.n	8008268 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 8008224:	2300      	movs	r3, #0
 8008226:	930a      	str	r3, [sp, #40]	; 0x28
 8008228:	2300      	movs	r3, #0
 800822a:	9309      	str	r3, [sp, #36]	; 0x24
 800822c:	2300      	movs	r3, #0
 800822e:	9308      	str	r3, [sp, #32]
 8008230:	233f      	movs	r3, #63	; 0x3f
 8008232:	9307      	str	r3, [sp, #28]
 8008234:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x88>)
 8008236:	9306      	str	r3, [sp, #24]
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x8c>)
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	2300      	movs	r3, #0
 800823e:	9304      	str	r3, [sp, #16]
 8008240:	2300      	movs	r3, #0
 8008242:	9303      	str	r3, [sp, #12]
 8008244:	2301      	movs	r3, #1
 8008246:	9302      	str	r3, [sp, #8]
 8008248:	2304      	movs	r3, #4
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	2307      	movs	r3, #7
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	2328      	movs	r3, #40	; 0x28
 8008252:	2242      	movs	r2, #66	; 0x42
 8008254:	4909      	ldr	r1, [pc, #36]	; (800827c <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x90>)
 8008256:	480a      	ldr	r0, [pc, #40]	; (8008280 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
 8008258:	f7fe f962 	bl	8006520 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800825c:	4804      	ldr	r0, [pc, #16]	; (8008270 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800825e:	f01d fd98 	bl	8025d92 <__cxa_guard_release>
 8008262:	4808      	ldr	r0, [pc, #32]	; (8008284 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x98>)
 8008264:	f01d feda 	bl	802601c <atexit>
    return JetBrainsMono_Regular_40_4bpp;
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
}
 800826a:	4618      	mov	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20023804 	.word	0x20023804
 8008274:	080d89dc 	.word	0x080d89dc
 8008278:	0802bb00 	.word	0x0802bb00
 800827c:	080d7834 	.word	0x080d7834
 8008280:	200237dc 	.word	0x200237dc
 8008284:	080081dd 	.word	0x080081dd

08008288 <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__tcf_0+0xc>)
 800828e:	f7fd fc33 	bl	8005af8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20023808 	.word	0x20023808

08008298 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>:
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08c      	sub	sp, #48	; 0x30
 800829c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800829e:	4b1f      	ldr	r3, [pc, #124]	; (800831c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	f3bf 8f5b 	dmb	ish
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bf0c      	ite	eq
 80082b0:	2301      	moveq	r3, #1
 80082b2:	2300      	movne	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d02c      	beq.n	8008314 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 80082ba:	4818      	ldr	r0, [pc, #96]	; (800831c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 80082bc:	f01d fd5d 	bl	8025d7a <__cxa_guard_acquire>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bf14      	ite	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	2300      	moveq	r3, #0
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d021      	beq.n	8008314 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 80082d0:	2300      	movs	r3, #0
 80082d2:	930a      	str	r3, [sp, #40]	; 0x28
 80082d4:	2300      	movs	r3, #0
 80082d6:	9309      	str	r3, [sp, #36]	; 0x24
 80082d8:	2300      	movs	r3, #0
 80082da:	9308      	str	r3, [sp, #32]
 80082dc:	233f      	movs	r3, #63	; 0x3f
 80082de:	9307      	str	r3, [sp, #28]
 80082e0:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x88>)
 80082e2:	9306      	str	r3, [sp, #24]
 80082e4:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x8c>)
 80082e6:	9305      	str	r3, [sp, #20]
 80082e8:	2300      	movs	r3, #0
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	2300      	movs	r3, #0
 80082ee:	9303      	str	r3, [sp, #12]
 80082f0:	2301      	movs	r3, #1
 80082f2:	9302      	str	r3, [sp, #8]
 80082f4:	2304      	movs	r3, #4
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	230b      	movs	r3, #11
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	233c      	movs	r3, #60	; 0x3c
 80082fe:	223f      	movs	r2, #63	; 0x3f
 8008300:	4909      	ldr	r1, [pc, #36]	; (8008328 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x90>)
 8008302:	480a      	ldr	r0, [pc, #40]	; (800832c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
 8008304:	f7fe f90c 	bl	8006520 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008308:	4804      	ldr	r0, [pc, #16]	; (800831c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800830a:	f01d fd42 	bl	8025d92 <__cxa_guard_release>
 800830e:	4808      	ldr	r0, [pc, #32]	; (8008330 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x98>)
 8008310:	f01d fe84 	bl	802601c <atexit>
    return JetBrainsMono_Regular_60_4bpp;
 8008314:	4b05      	ldr	r3, [pc, #20]	; (800832c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
}
 8008316:	4618      	mov	r0, r3
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20023830 	.word	0x20023830
 8008320:	080d89e0 	.word	0x080d89e0
 8008324:	0802bb04 	.word	0x0802bb04
 8008328:	080d7bd0 	.word	0x080d7bd0
 800832c:	20023808 	.word	0x20023808
 8008330:	08008289 	.word	0x08008289

08008334 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__tcf_0+0xc>)
 800833a:	f7fd fbdd 	bl	8005af8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20023834 	.word	0x20023834

08008344 <_Z24getFont_swisop3_300_4bppv>:
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800834a:	4b20      	ldr	r3, [pc, #128]	; (80083cc <_Z24getFont_swisop3_300_4bppv+0x88>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	f3bf 8f5b 	dmb	ish
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	bf0c      	ite	eq
 800835c:	2301      	moveq	r3, #1
 800835e:	2300      	movne	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d02d      	beq.n	80083c2 <_Z24getFont_swisop3_300_4bppv+0x7e>
 8008366:	4819      	ldr	r0, [pc, #100]	; (80083cc <_Z24getFont_swisop3_300_4bppv+0x88>)
 8008368:	f01d fd07 	bl	8025d7a <__cxa_guard_acquire>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	bf14      	ite	ne
 8008372:	2301      	movne	r3, #1
 8008374:	2300      	moveq	r3, #0
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d022      	beq.n	80083c2 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800837c:	2300      	movs	r3, #0
 800837e:	930a      	str	r3, [sp, #40]	; 0x28
 8008380:	2300      	movs	r3, #0
 8008382:	9309      	str	r3, [sp, #36]	; 0x24
 8008384:	2300      	movs	r3, #0
 8008386:	9308      	str	r3, [sp, #32]
 8008388:	233f      	movs	r3, #63	; 0x3f
 800838a:	9307      	str	r3, [sp, #28]
 800838c:	4b10      	ldr	r3, [pc, #64]	; (80083d0 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 800838e:	9306      	str	r3, [sp, #24]
 8008390:	4b10      	ldr	r3, [pc, #64]	; (80083d4 <_Z24getFont_swisop3_300_4bppv+0x90>)
 8008392:	9305      	str	r3, [sp, #20]
 8008394:	2300      	movs	r3, #0
 8008396:	9304      	str	r3, [sp, #16]
 8008398:	2300      	movs	r3, #0
 800839a:	9303      	str	r3, [sp, #12]
 800839c:	2301      	movs	r3, #1
 800839e:	9302      	str	r3, [sp, #8]
 80083a0:	2304      	movs	r3, #4
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	233b      	movs	r3, #59	; 0x3b
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80083ac:	223f      	movs	r2, #63	; 0x3f
 80083ae:	490a      	ldr	r1, [pc, #40]	; (80083d8 <_Z24getFont_swisop3_300_4bppv+0x94>)
 80083b0:	480a      	ldr	r0, [pc, #40]	; (80083dc <_Z24getFont_swisop3_300_4bppv+0x98>)
 80083b2:	f7fe f8b5 	bl	8006520 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80083b6:	4805      	ldr	r0, [pc, #20]	; (80083cc <_Z24getFont_swisop3_300_4bppv+0x88>)
 80083b8:	f01d fceb 	bl	8025d92 <__cxa_guard_release>
 80083bc:	4808      	ldr	r0, [pc, #32]	; (80083e0 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 80083be:	f01d fe2d 	bl	802601c <atexit>
    return swisop3_300_4bpp;
 80083c2:	4b06      	ldr	r3, [pc, #24]	; (80083dc <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	2002385c 	.word	0x2002385c
 80083d0:	080d89e4 	.word	0x080d89e4
 80083d4:	0802bb08 	.word	0x0802bb08
 80083d8:	080d7f44 	.word	0x080d7f44
 80083dc:	20023834 	.word	0x20023834
 80083e0:	08008335 	.word	0x08008335

080083e4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	4801      	ldr	r0, [pc, #4]	; (80083f0 <__tcf_0+0xc>)
 80083ea:	f7fd fb85 	bl	8005af8 <_ZN8touchgfx13GeneratedFontD1Ev>
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20023860 	.word	0x20023860

080083f4 <_Z23getFont_swisop3_50_4bppv>:
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 80083fa:	4b1f      	ldr	r3, [pc, #124]	; (8008478 <_Z23getFont_swisop3_50_4bppv+0x84>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	f3bf 8f5b 	dmb	ish
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	bf0c      	ite	eq
 800840c:	2301      	moveq	r3, #1
 800840e:	2300      	movne	r3, #0
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d02c      	beq.n	8008470 <_Z23getFont_swisop3_50_4bppv+0x7c>
 8008416:	4818      	ldr	r0, [pc, #96]	; (8008478 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8008418:	f01d fcaf 	bl	8025d7a <__cxa_guard_acquire>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	bf14      	ite	ne
 8008422:	2301      	movne	r3, #1
 8008424:	2300      	moveq	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	d021      	beq.n	8008470 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800842c:	2300      	movs	r3, #0
 800842e:	930a      	str	r3, [sp, #40]	; 0x28
 8008430:	2300      	movs	r3, #0
 8008432:	9309      	str	r3, [sp, #36]	; 0x24
 8008434:	2300      	movs	r3, #0
 8008436:	9308      	str	r3, [sp, #32]
 8008438:	233f      	movs	r3, #63	; 0x3f
 800843a:	9307      	str	r3, [sp, #28]
 800843c:	4b0f      	ldr	r3, [pc, #60]	; (800847c <_Z23getFont_swisop3_50_4bppv+0x88>)
 800843e:	9306      	str	r3, [sp, #24]
 8008440:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 8008442:	9305      	str	r3, [sp, #20]
 8008444:	2300      	movs	r3, #0
 8008446:	9304      	str	r3, [sp, #16]
 8008448:	2300      	movs	r3, #0
 800844a:	9303      	str	r3, [sp, #12]
 800844c:	2301      	movs	r3, #1
 800844e:	9302      	str	r3, [sp, #8]
 8008450:	2304      	movs	r3, #4
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	230a      	movs	r3, #10
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	2332      	movs	r3, #50	; 0x32
 800845a:	2241      	movs	r2, #65	; 0x41
 800845c:	4909      	ldr	r1, [pc, #36]	; (8008484 <_Z23getFont_swisop3_50_4bppv+0x90>)
 800845e:	480a      	ldr	r0, [pc, #40]	; (8008488 <_Z23getFont_swisop3_50_4bppv+0x94>)
 8008460:	f7fe f85e 	bl	8006520 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008464:	4804      	ldr	r0, [pc, #16]	; (8008478 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8008466:	f01d fc94 	bl	8025d92 <__cxa_guard_release>
 800846a:	4808      	ldr	r0, [pc, #32]	; (800848c <_Z23getFont_swisop3_50_4bppv+0x98>)
 800846c:	f01d fdd6 	bl	802601c <atexit>
    return swisop3_50_4bpp;
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 8008472:	4618      	mov	r0, r3
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20023888 	.word	0x20023888
 800847c:	080d89e8 	.word	0x080d89e8
 8008480:	0802bb0c 	.word	0x0802bb0c
 8008484:	080d82b8 	.word	0x080d82b8
 8008488:	20023860 	.word	0x20023860
 800848c:	080083e5 	.word	0x080083e5

08008490 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__tcf_0+0xc>)
 8008496:	f7fd fb2f 	bl	8005af8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800849a:	bd80      	pop	{r7, pc}
 800849c:	2002388c 	.word	0x2002388c

080084a0 <_Z23getFont_verdana_10_4bppv>:
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08c      	sub	sp, #48	; 0x30
 80084a4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80084a6:	4b1f      	ldr	r3, [pc, #124]	; (8008524 <_Z23getFont_verdana_10_4bppv+0x84>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	f3bf 8f5b 	dmb	ish
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bf0c      	ite	eq
 80084b8:	2301      	moveq	r3, #1
 80084ba:	2300      	movne	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d02c      	beq.n	800851c <_Z23getFont_verdana_10_4bppv+0x7c>
 80084c2:	4818      	ldr	r0, [pc, #96]	; (8008524 <_Z23getFont_verdana_10_4bppv+0x84>)
 80084c4:	f01d fc59 	bl	8025d7a <__cxa_guard_acquire>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	bf14      	ite	ne
 80084ce:	2301      	movne	r3, #1
 80084d0:	2300      	moveq	r3, #0
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d021      	beq.n	800851c <_Z23getFont_verdana_10_4bppv+0x7c>
 80084d8:	2300      	movs	r3, #0
 80084da:	930a      	str	r3, [sp, #40]	; 0x28
 80084dc:	2300      	movs	r3, #0
 80084de:	9309      	str	r3, [sp, #36]	; 0x24
 80084e0:	2300      	movs	r3, #0
 80084e2:	9308      	str	r3, [sp, #32]
 80084e4:	233f      	movs	r3, #63	; 0x3f
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <_Z23getFont_verdana_10_4bppv+0x88>)
 80084ea:	9306      	str	r3, [sp, #24]
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <_Z23getFont_verdana_10_4bppv+0x8c>)
 80084ee:	9305      	str	r3, [sp, #20]
 80084f0:	2300      	movs	r3, #0
 80084f2:	9304      	str	r3, [sp, #16]
 80084f4:	2300      	movs	r3, #0
 80084f6:	9303      	str	r3, [sp, #12]
 80084f8:	2301      	movs	r3, #1
 80084fa:	9302      	str	r3, [sp, #8]
 80084fc:	2304      	movs	r3, #4
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	2300      	movs	r3, #0
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	230a      	movs	r3, #10
 8008506:	2201      	movs	r2, #1
 8008508:	4909      	ldr	r1, [pc, #36]	; (8008530 <_Z23getFont_verdana_10_4bppv+0x90>)
 800850a:	480a      	ldr	r0, [pc, #40]	; (8008534 <_Z23getFont_verdana_10_4bppv+0x94>)
 800850c:	f7fe f808 	bl	8006520 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008510:	4804      	ldr	r0, [pc, #16]	; (8008524 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008512:	f01d fc3e 	bl	8025d92 <__cxa_guard_release>
 8008516:	4808      	ldr	r0, [pc, #32]	; (8008538 <_Z23getFont_verdana_10_4bppv+0x98>)
 8008518:	f01d fd80 	bl	802601c <atexit>
    return verdana_10_4bpp;
 800851c:	4b05      	ldr	r3, [pc, #20]	; (8008534 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800851e:	4618      	mov	r0, r3
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	200238b4 	.word	0x200238b4
 8008528:	080d89ec 	.word	0x080d89ec
 800852c:	0802bb10 	.word	0x0802bb10
 8008530:	080d8648 	.word	0x080d8648
 8008534:	2002388c 	.word	0x2002388c
 8008538:	08008491 	.word	0x08008491

0800853c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
 8008540:	4801      	ldr	r0, [pc, #4]	; (8008548 <__tcf_0+0xc>)
 8008542:	f7fd fad9 	bl	8005af8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008546:	bd80      	pop	{r7, pc}
 8008548:	200238b8 	.word	0x200238b8

0800854c <_Z23getFont_verdana_20_4bppv>:
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08c      	sub	sp, #48	; 0x30
 8008550:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008552:	4b1f      	ldr	r3, [pc, #124]	; (80085d0 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f3bf 8f5b 	dmb	ish
 800855a:	b2db      	uxtb	r3, r3
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	bf0c      	ite	eq
 8008564:	2301      	moveq	r3, #1
 8008566:	2300      	movne	r3, #0
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d02c      	beq.n	80085c8 <_Z23getFont_verdana_20_4bppv+0x7c>
 800856e:	4818      	ldr	r0, [pc, #96]	; (80085d0 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008570:	f01d fc03 	bl	8025d7a <__cxa_guard_acquire>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	bf14      	ite	ne
 800857a:	2301      	movne	r3, #1
 800857c:	2300      	moveq	r3, #0
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d021      	beq.n	80085c8 <_Z23getFont_verdana_20_4bppv+0x7c>
 8008584:	2300      	movs	r3, #0
 8008586:	930a      	str	r3, [sp, #40]	; 0x28
 8008588:	2300      	movs	r3, #0
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	2300      	movs	r3, #0
 800858e:	9308      	str	r3, [sp, #32]
 8008590:	233f      	movs	r3, #63	; 0x3f
 8008592:	9307      	str	r3, [sp, #28]
 8008594:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <_Z23getFont_verdana_20_4bppv+0x88>)
 8008596:	9306      	str	r3, [sp, #24]
 8008598:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800859a:	9305      	str	r3, [sp, #20]
 800859c:	2301      	movs	r3, #1
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	2301      	movs	r3, #1
 80085a2:	9303      	str	r3, [sp, #12]
 80085a4:	2301      	movs	r3, #1
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	2304      	movs	r3, #4
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	2304      	movs	r3, #4
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	2314      	movs	r3, #20
 80085b2:	223f      	movs	r2, #63	; 0x3f
 80085b4:	4909      	ldr	r1, [pc, #36]	; (80085dc <_Z23getFont_verdana_20_4bppv+0x90>)
 80085b6:	480a      	ldr	r0, [pc, #40]	; (80085e0 <_Z23getFont_verdana_20_4bppv+0x94>)
 80085b8:	f7fd ffb2 	bl	8006520 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80085bc:	4804      	ldr	r0, [pc, #16]	; (80085d0 <_Z23getFont_verdana_20_4bppv+0x84>)
 80085be:	f01d fbe8 	bl	8025d92 <__cxa_guard_release>
 80085c2:	4808      	ldr	r0, [pc, #32]	; (80085e4 <_Z23getFont_verdana_20_4bppv+0x98>)
 80085c4:	f01d fd2a 	bl	802601c <atexit>
    return verdana_20_4bpp;
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	200238e0 	.word	0x200238e0
 80085d4:	080d89f0 	.word	0x080d89f0
 80085d8:	0802bb14 	.word	0x0802bb14
 80085dc:	080d8658 	.word	0x080d8658
 80085e0:	200238b8 	.word	0x200238b8
 80085e4:	0800853d 	.word	0x0800853d

080085e8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	4801      	ldr	r0, [pc, #4]	; (80085f4 <__tcf_0+0xc>)
 80085ee:	f7fd fa83 	bl	8005af8 <_ZN8touchgfx13GeneratedFontD1Ev>
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	200238e4 	.word	0x200238e4

080085f8 <_Z23getFont_verdana_40_4bppv>:
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08c      	sub	sp, #48	; 0x30
 80085fc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80085fe:	4b1f      	ldr	r3, [pc, #124]	; (800867c <_Z23getFont_verdana_40_4bppv+0x84>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	f3bf 8f5b 	dmb	ish
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	bf0c      	ite	eq
 8008610:	2301      	moveq	r3, #1
 8008612:	2300      	movne	r3, #0
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d02c      	beq.n	8008674 <_Z23getFont_verdana_40_4bppv+0x7c>
 800861a:	4818      	ldr	r0, [pc, #96]	; (800867c <_Z23getFont_verdana_40_4bppv+0x84>)
 800861c:	f01d fbad 	bl	8025d7a <__cxa_guard_acquire>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	bf14      	ite	ne
 8008626:	2301      	movne	r3, #1
 8008628:	2300      	moveq	r3, #0
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d021      	beq.n	8008674 <_Z23getFont_verdana_40_4bppv+0x7c>
 8008630:	2300      	movs	r3, #0
 8008632:	930a      	str	r3, [sp, #40]	; 0x28
 8008634:	2300      	movs	r3, #0
 8008636:	9309      	str	r3, [sp, #36]	; 0x24
 8008638:	2300      	movs	r3, #0
 800863a:	9308      	str	r3, [sp, #32]
 800863c:	233f      	movs	r3, #63	; 0x3f
 800863e:	9307      	str	r3, [sp, #28]
 8008640:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <_Z23getFont_verdana_40_4bppv+0x88>)
 8008642:	9306      	str	r3, [sp, #24]
 8008644:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008646:	9305      	str	r3, [sp, #20]
 8008648:	2300      	movs	r3, #0
 800864a:	9304      	str	r3, [sp, #16]
 800864c:	2300      	movs	r3, #0
 800864e:	9303      	str	r3, [sp, #12]
 8008650:	2301      	movs	r3, #1
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	2304      	movs	r3, #4
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	2300      	movs	r3, #0
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	2328      	movs	r3, #40	; 0x28
 800865e:	2201      	movs	r2, #1
 8008660:	4909      	ldr	r1, [pc, #36]	; (8008688 <_Z23getFont_verdana_40_4bppv+0x90>)
 8008662:	480a      	ldr	r0, [pc, #40]	; (800868c <_Z23getFont_verdana_40_4bppv+0x94>)
 8008664:	f7fd ff5c 	bl	8006520 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008668:	4804      	ldr	r0, [pc, #16]	; (800867c <_Z23getFont_verdana_40_4bppv+0x84>)
 800866a:	f01d fb92 	bl	8025d92 <__cxa_guard_release>
 800866e:	4808      	ldr	r0, [pc, #32]	; (8008690 <_Z23getFont_verdana_40_4bppv+0x98>)
 8008670:	f01d fcd4 	bl	802601c <atexit>
    return verdana_40_4bpp;
 8008674:	4b05      	ldr	r3, [pc, #20]	; (800868c <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8008676:	4618      	mov	r0, r3
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	2002390c 	.word	0x2002390c
 8008680:	080d8ad0 	.word	0x080d8ad0
 8008684:	0802bb18 	.word	0x0802bb18
 8008688:	080d89cc 	.word	0x080d89cc
 800868c:	200238e4 	.word	0x200238e4
 8008690:	080085e9 	.word	0x080085e9

08008694 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	460b      	mov	r3, r1
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 80086a2:	2300      	movs	r3, #0
    }
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80086b8:	2300      	movs	r3, #0
    }
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80086ce:	2300      	movs	r3, #0
    }
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80086ea:	4a07      	ldr	r2, [pc, #28]	; (8008708 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6013      	str	r3, [r2, #0]
        fonts = f;
 80086f0:	4a06      	ldr	r2, [pc, #24]	; (800870c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80086f6:	4a06      	ldr	r2, [pc, #24]	; (8008710 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80086f8:	88fb      	ldrh	r3, [r7, #6]
 80086fa:	8013      	strh	r3, [r2, #0]
    }
 80086fc:	bf00      	nop
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	20056768 	.word	0x20056768
 800870c:	20056770 	.word	0x20056770
 8008710:	2005676c 	.word	0x2005676c

08008714 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008714:	b40e      	push	{r1, r2, r3}
 8008716:	b580      	push	{r7, lr}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800871e:	f107 0320 	add.w	r3, r7, #32
 8008722:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	2100      	movs	r1, #0
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f011 f9a8 	bl	8019a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008730:	4603      	mov	r3, r0
 8008732:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008734:	89fb      	ldrh	r3, [r7, #14]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008740:	b003      	add	sp, #12
 8008742:	4770      	bx	lr

08008744 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008744:	b40c      	push	{r2, r3}
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8008752:	f107 031c 	add.w	r3, r7, #28
 8008756:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008758:	78f9      	ldrb	r1, [r7, #3]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f011 f98e 	bl	8019a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008764:	4603      	mov	r3, r0
 8008766:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008768:	89fb      	ldrh	r3, [r7, #14]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008774:	b002      	add	sp, #8
 8008776:	4770      	bx	lr

08008778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	; 0x28
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d016      	beq.n	80087ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	331a      	adds	r3, #26
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	8adb      	ldrh	r3, [r3, #22]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d105      	bne.n	80087a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800879a:	4b43      	ldr	r3, [pc, #268]	; (80088a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800879c:	4a43      	ldr	r2, [pc, #268]	; (80088ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800879e:	21bf      	movs	r1, #191	; 0xbf
 80087a0:	4843      	ldr	r0, [pc, #268]	; (80088b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80087a2:	f01d fc1d 	bl	8025fe0 <__assert_func>
            return buffer[pos];
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	8a9b      	ldrh	r3, [r3, #20]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80087ba:	2300      	movs	r3, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d06a      	beq.n	8008896 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f012 fd49 	bl	801b258 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	331a      	adds	r3, #26
 80087ca:	623b      	str	r3, [r7, #32]
 80087cc:	2301      	movs	r3, #1
 80087ce:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	8adb      	ldrh	r3, [r3, #22]
 80087d4:	8bfa      	ldrh	r2, [r7, #30]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d305      	bcc.n	80087e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80087da:	4b36      	ldr	r3, [pc, #216]	; (80088b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80087dc:	4a36      	ldr	r2, [pc, #216]	; (80088b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80087de:	21c4      	movs	r1, #196	; 0xc4
 80087e0:	4833      	ldr	r0, [pc, #204]	; (80088b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80087e2:	f01d fbfd 	bl	8025fe0 <__assert_func>
            const uint16_t index = pos + offset;
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	8a9a      	ldrh	r2, [r3, #20]
 80087ea:	8bfb      	ldrh	r3, [r7, #30]
 80087ec:	4413      	add	r3, r2
 80087ee:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80087f0:	8bbb      	ldrh	r3, [r7, #28]
 80087f2:	2b09      	cmp	r3, #9
 80087f4:	d801      	bhi.n	80087fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80087f6:	8bbb      	ldrh	r3, [r7, #28]
 80087f8:	e001      	b.n	80087fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80087fa:	8bbb      	ldrh	r3, [r7, #28]
 80087fc:	3b0a      	subs	r3, #10
 80087fe:	6a3a      	ldr	r2, [r7, #32]
 8008800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008804:	f640 123f 	movw	r2, #2367	; 0x93f
 8008808:	4293      	cmp	r3, r2
 800880a:	bf0c      	ite	eq
 800880c:	2301      	moveq	r3, #1
 800880e:	2300      	movne	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d03f      	beq.n	8008896 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	331a      	adds	r3, #26
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	321a      	adds	r2, #26
 800881e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	8ad2      	ldrh	r2, [r2, #22]
 8008824:	2a00      	cmp	r2, #0
 8008826:	d105      	bne.n	8008834 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008828:	4b1f      	ldr	r3, [pc, #124]	; (80088a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800882a:	4a20      	ldr	r2, [pc, #128]	; (80088ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800882c:	21bf      	movs	r1, #191	; 0xbf
 800882e:	4820      	ldr	r0, [pc, #128]	; (80088b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008830:	f01d fbd6 	bl	8025fe0 <__assert_func>
            return buffer[pos];
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	8a92      	ldrh	r2, [r2, #20]
 8008838:	4611      	mov	r1, r2
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	4613      	mov	r3, r2
 8008844:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	8adb      	ldrh	r3, [r3, #22]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d806      	bhi.n	800885c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800884e:	4b1b      	ldr	r3, [pc, #108]	; (80088bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008850:	4a1b      	ldr	r2, [pc, #108]	; (80088c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008852:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8008856:	4816      	ldr	r0, [pc, #88]	; (80088b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008858:	f01d fbc2 	bl	8025fe0 <__assert_func>
            const uint16_t index = pos + 1;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	8a9b      	ldrh	r3, [r3, #20]
 8008860:	3301      	adds	r3, #1
 8008862:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008864:	89bb      	ldrh	r3, [r7, #12]
 8008866:	2b09      	cmp	r3, #9
 8008868:	d801      	bhi.n	800886e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800886a:	89bb      	ldrh	r3, [r7, #12]
 800886c:	e000      	b.n	8008870 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800886e:	2300      	movs	r3, #0
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	89f9      	ldrh	r1, [r7, #14]
 8008874:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008878:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	331a      	adds	r3, #26
 800887e:	61bb      	str	r3, [r7, #24]
 8008880:	f640 133f 	movw	r3, #2367	; 0x93f
 8008884:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	8a9b      	ldrh	r3, [r3, #20]
 800888a:	4619      	mov	r1, r3
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	8afa      	ldrh	r2, [r7, #22]
 8008890:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008894:	bf00      	nop
        }
    }
    return getNextChar();
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f012 fbc2 	bl	801b020 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800889c:	4603      	mov	r3, r0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3728      	adds	r7, #40	; 0x28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	0802b0f8 	.word	0x0802b0f8
 80088ac:	0802b104 	.word	0x0802b104
 80088b0:	0802b1b0 	.word	0x0802b1b0
 80088b4:	0802b1fc 	.word	0x0802b1fc
 80088b8:	0802b20c 	.word	0x0802b20c
 80088bc:	0802b2e0 	.word	0x0802b2e0
 80088c0:	0802b2ec 	.word	0x0802b2ec

080088c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f012 fb61 	bl	801af94 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b088      	sub	sp, #32
 80088de:	af02      	add	r7, sp, #8
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	1d38      	adds	r0, r7, #4
 80088e4:	e880 0006 	stmia.w	r0, {r1, r2}
 80088e8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80088ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088ee:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80088f0:	1d39      	adds	r1, r7, #4
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f00f fe1a 	bl	8018538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8008904:	bf00      	nop
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800890c:	b590      	push	{r4, r7, lr}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800891a:	88fb      	ldrh	r3, [r7, #6]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d127      	bne.n	8008970 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	4a1e      	ldr	r2, [pc, #120]	; (800899c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d016      	beq.n	800895a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	4a1b      	ldr	r2, [pc, #108]	; (800899c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008934:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	4413      	add	r3, r2
 800893e:	4a18      	ldr	r2, [pc, #96]	; (80089a0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008940:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	4413      	add	r3, r2
 800894a:	4a16      	ldr	r2, [pc, #88]	; (80089a4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800894c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	4413      	add	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e00a      	b.n	8008970 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800895a:	4b11      	ldr	r3, [pc, #68]	; (80089a0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800895c:	4a12      	ldr	r2, [pc, #72]	; (80089a8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800895e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008960:	4a12      	ldr	r2, [pc, #72]	; (80089ac <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8008962:	4b10      	ldr	r3, [pc, #64]	; (80089a4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008964:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	4a11      	ldr	r2, [pc, #68]	; (80089b0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800896a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800896e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00d      	beq.n	8008992 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008976:	4a0f      	ldr	r2, [pc, #60]	; (80089b4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008978:	88fb      	ldrh	r3, [r7, #6]
 800897a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800897c:	f000 f83e 	bl	80089fc <_ZN17TypedTextDatabase8getFontsEv>
 8008980:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8008982:	f000 f833 	bl	80089ec <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008986:	4603      	mov	r3, r0
 8008988:	461a      	mov	r2, r3
 800898a:	4621      	mov	r1, r4
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff fea5 	bl	80086dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8008992:	bf00      	nop
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	bd90      	pop	{r4, r7, pc}
 800899a:	bf00      	nop
 800899c:	20023910 	.word	0x20023910
 80089a0:	20023918 	.word	0x20023918
 80089a4:	2002391c 	.word	0x2002391c
 80089a8:	080d8b04 	.word	0x080d8b04
 80089ac:	080d8ad4 	.word	0x080d8ad4
 80089b0:	080d8b94 	.word	0x080d8b94
 80089b4:	20023914 	.word	0x20023914

080089b8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80089c4:	4b07      	ldr	r3, [pc, #28]	; (80089e4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80089ca:	6819      	ldr	r1, [r3, #0]
 80089cc:	887b      	ldrh	r3, [r7, #2]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	4413      	add	r3, r2
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	20023918 	.word	0x20023918
 80089e8:	2002391c 	.word	0x2002391c

080089ec <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80089f0:	230c      	movs	r3, #12
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8008a00:	4b02      	ldr	r3, [pc, #8]	; (8008a0c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	20023920 	.word	0x20023920

08008a10 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_swisop3_50_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d127      	bne.n	8008a70 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d122      	bne.n	8008a70 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_verdana_20_4bpp()),
 8008a2a:	f7ff fd8f 	bl	800854c <_Z23getFont_verdana_20_4bppv>
 8008a2e:	4603      	mov	r3, r0
};
 8008a30:	4a11      	ldr	r2, [pc, #68]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008a32:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8008a34:	f7ff fde0 	bl	80085f8 <_Z23getFont_verdana_40_4bppv>
 8008a38:	4603      	mov	r3, r0
};
 8008a3a:	4a0f      	ldr	r2, [pc, #60]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008a3c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 8008a3e:	f7ff fd2f 	bl	80084a0 <_Z23getFont_verdana_10_4bppv>
 8008a42:	4603      	mov	r3, r0
};
 8008a44:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008a46:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_300_4bpp()),
 8008a48:	f7ff fc7c 	bl	8008344 <_Z24getFont_swisop3_300_4bppv>
 8008a4c:	4603      	mov	r3, r0
};
 8008a4e:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008a50:	60d3      	str	r3, [r2, #12]
    &(getFont_JetBrainsMono_Regular_40_4bpp()),
 8008a52:	f7ff fbcb 	bl	80081ec <_Z37getFont_JetBrainsMono_Regular_40_4bppv>
 8008a56:	4603      	mov	r3, r0
};
 8008a58:	4a07      	ldr	r2, [pc, #28]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008a5a:	6113      	str	r3, [r2, #16]
    &(getFont_JetBrainsMono_Regular_60_4bpp()),
 8008a5c:	f7ff fc1c 	bl	8008298 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>
 8008a60:	4603      	mov	r3, r0
};
 8008a62:	4a05      	ldr	r2, [pc, #20]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008a64:	6153      	str	r3, [r2, #20]
    &(getFont_swisop3_50_4bpp())
 8008a66:	f7ff fcc5 	bl	80083f4 <_Z23getFont_swisop3_50_4bppv>
 8008a6a:	4603      	mov	r3, r0
};
 8008a6c:	4a02      	ldr	r2, [pc, #8]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008a6e:	6193      	str	r3, [r2, #24]
} // namespace TypedTextDatabase
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20023920 	.word	0x20023920

08008a7c <_GLOBAL__sub_I_touchgfx_fonts>:
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008a84:	2001      	movs	r0, #1
 8008a86:	f7ff ffc3 	bl	8008a10 <_Z41__static_initialization_and_destruction_0ii>
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <_ZN8touchgfx13BoxWithBorderC1Ev>:
{
public:
    BoxWithBorder()
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe f86e 	bl	8006b78 <_ZN8touchgfx3BoxC1Ev>
 8008a9c:	4a08      	ldr	r2, [pc, #32]	; (8008ac0 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	332c      	adds	r3, #44	; 0x2c
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fb fad1 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	0802d0ac 	.word	0x0802d0ac

08008ac4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	887a      	ldrh	r2, [r7, #2]
 8008af0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b091      	sub	sp, #68	; 0x44
 8008b04:	af02      	add	r7, sp, #8
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fd fe86 	bl	800681c <_ZN8touchgfx9ContainerC1Ev>
 8008b10:	4a68      	ldr	r2, [pc, #416]	; (8008cb4 <_ZN12alertBarBaseC1Ev+0x1b4>)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	332c      	adds	r3, #44	; 0x2c
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff ffb6 	bl	8008a8c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3360      	adds	r3, #96	; 0x60
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe f8d1 	bl	8006ccc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fd fdfd 	bl	8006730 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	213c      	movs	r1, #60	; 0x3c
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fd fe07 	bl	800674e <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008b46:	233c      	movs	r3, #60	; 0x3c
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2100      	movs	r1, #0
 8008b52:	f7fd feb2 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008b5c:	23ff      	movs	r3, #255	; 0xff
 8008b5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008b62:	2300      	movs	r3, #0
 8008b64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008b6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008b72:	041b      	lsls	r3, r3, #16
 8008b74:	461a      	mov	r2, r3
 8008b76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b88:	f107 031c 	add.w	r3, r7, #28
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fb fa5e 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	4619      	mov	r1, r3
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f7fe f811 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008baa:	2300      	movs	r3, #0
 8008bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bba:	041b      	lsls	r3, r3, #16
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008bd0:	f107 0318 	add.w	r3, r7, #24
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fb fa3a 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	4619      	mov	r1, r3
 8008be0:	4620      	mov	r0, r4
 8008be2:	f7ff ff6f 	bl	8008ac4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	332c      	adds	r3, #44	; 0x2c
 8008bea:	2105      	movs	r1, #5
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff ff77 	bl	8008ae0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(0, 0, 800, 60);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8008bf8:	233c      	movs	r3, #60	; 0x3c
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008c00:	2200      	movs	r2, #0
 8008c02:	2100      	movs	r1, #0
 8008c04:	f7fd fe59 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008c0e:	23ff      	movs	r3, #255	; 0xff
 8008c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c14:	23ff      	movs	r3, #255	; 0xff
 8008c16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c1a:	23ff      	movs	r3, #255	; 0xff
 8008c1c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008c20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c24:	041b      	lsls	r3, r3, #16
 8008c26:	461a      	mov	r2, r3
 8008c28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008c34:	4313      	orrs	r3, r2
 8008c36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008c3a:	f107 0314 	add.w	r3, r7, #20
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fb fa05 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	62fc      	str	r4, [r7, #44]	; 0x2c
 8008c4a:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008c52:	bf00      	nop
    frontText.setLinespacing(0);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3360      	adds	r3, #96	; 0x60
 8008c58:	637b      	str	r3, [r7, #52]	; 0x34
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c60:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008c62:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008c64:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008c6c:	f107 030c 	add.w	r3, r7, #12
 8008c70:	2105      	movs	r1, #5
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fd ffb2 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 8008c78:	f107 030c 	add.w	r3, r7, #12
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f00e f9db 	bl	801703a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008c84:	f107 030c 	add.w	r3, r7, #12
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fc ff57 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	332c      	adds	r3, #44	; 0x2c
 8008c94:	4619      	mov	r1, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	f00c fa10 	bl	80150bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3360      	adds	r3, #96	; 0x60
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f00c fa09 	bl	80150bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4618      	mov	r0, r3
 8008cae:	373c      	adds	r7, #60	; 0x3c
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd90      	pop	{r4, r7, pc}
 8008cb4:	0802bb78 	.word	0x0802bb78

08008cb8 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b091      	sub	sp, #68	; 0x44
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fd fda0 	bl	800681c <_ZN8touchgfx9ContainerC1Ev>
 8008cdc:	4a6a      	ldr	r2, [pc, #424]	; (8008e88 <_ZN11tempBoxBaseC1Ev+0x1bc>)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	332c      	adds	r3, #44	; 0x2c
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f00d fddc 	bl	80168a4 <_ZN8touchgfx4LineC1Ev>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008cf2:	f107 0310 	add.w	r3, r7, #16
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fb f9a9 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8008cfe:	6939      	ldr	r1, [r7, #16]
 8008d00:	4620      	mov	r0, r4
 8008d02:	f7fe f911 	bl	8006f28 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	33b8      	adds	r3, #184	; 0xb8
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fd ff7c 	bl	8006c08 <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	21dc      	movs	r1, #220	; 0xdc
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fd fd0b 	bl	8006730 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	213c      	movs	r1, #60	; 0x3c
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fd fd15 	bl	800674e <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008d2a:	233c      	movs	r3, #60	; 0x3c
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	2364      	movs	r3, #100	; 0x64
 8008d30:	2200      	movs	r2, #0
 8008d32:	2100      	movs	r1, #0
 8008d34:	f7fd fdc1 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008d3e:	23ff      	movs	r3, #255	; 0xff
 8008d40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008d44:	23ff      	movs	r3, #255	; 0xff
 8008d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d4a:	23ff      	movs	r3, #255	; 0xff
 8008d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d54:	041b      	lsls	r3, r3, #16
 8008d56:	461a      	mov	r2, r3
 8008d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d64:	4313      	orrs	r3, r2
 8008d66:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008d6a:	f107 0320 	add.w	r3, r7, #32
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fb f96d 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7fe f8f4 	bl	8006f68 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	33a0      	adds	r3, #160	; 0xa0
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	f00d fbad 	bl	80164ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	332c      	adds	r3, #44	; 0x2c
 8008d96:	2200      	movs	r2, #0
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe ffda 	bl	8007d54 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	332c      	adds	r3, #44	; 0x2c
 8008da4:	22dc      	movs	r2, #220	; 0xdc
 8008da6:	2100      	movs	r1, #0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe fff9 	bl	8007da0 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	332c      	adds	r3, #44	; 0x2c
 8008db2:	2101      	movs	r1, #1
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff f819 	bl	8007dec <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	332c      	adds	r3, #44	; 0x2c
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f00d feb5 	bl	8016b30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8008dcc:	233c      	movs	r3, #60	; 0x3c
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	23dc      	movs	r3, #220	; 0xdc
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	f7fd fd70 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8008de0:	23ff      	movs	r3, #255	; 0xff
 8008de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008de6:	23ff      	movs	r3, #255	; 0xff
 8008de8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008dec:	23ff      	movs	r3, #255	; 0xff
 8008dee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008df2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008df6:	041b      	lsls	r3, r3, #16
 8008df8:	461a      	mov	r2, r3
 8008dfa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	431a      	orrs	r2, r3
 8008e02:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008e0c:	f107 031c 	add.w	r3, r7, #28
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fb f91c 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	62fc      	str	r4, [r7, #44]	; 0x2c
 8008e1c:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008e24:	bf00      	nop
    textArea1.setLinespacing(2);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	33b8      	adds	r3, #184	; 0xb8
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8008e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e32:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008e34:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008e36:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8008e3e:	f107 0314 	add.w	r3, r7, #20
 8008e42:	2104      	movs	r1, #4
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fd fec9 	bl	8006bdc <_ZN8touchgfx9TypedTextC1Et>
 8008e4a:	f107 0314 	add.w	r3, r7, #20
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4620      	mov	r0, r4
 8008e52:	f00e f8f2 	bl	801703a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008e56:	f107 0314 	add.w	r3, r7, #20
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fc fe6e 	bl	8005b3c <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	332c      	adds	r3, #44	; 0x2c
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f00c f927 	bl	80150bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	33b8      	adds	r3, #184	; 0xb8
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f00c f920 	bl	80150bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	373c      	adds	r7, #60	; 0x3c
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd90      	pop	{r4, r7, pc}
 8008e86:	bf00      	nop
 8008e88:	0802bc04 	.word	0x0802bc04

08008e8c <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]

}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	68b9      	ldr	r1, [r7, #8]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fc ff5c 	bl	8005d70 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008eb8:	4a03      	ldr	r2, [pc, #12]	; (8008ec8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	601a      	str	r2, [r3, #0]
{

}
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	0802b73c 	.word	0x0802b73c

08008ecc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	601a      	str	r2, [r3, #0]
{

}
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <_ZN5Model4tickEv>:

void Model::tick()
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]

}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
    {
    }
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
    {
    }
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
    {
 8008f2c:	4a04      	ldr	r2, [pc, #16]	; (8008f40 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	601a      	str	r2, [r3, #0]
    }
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	0802bcc8 	.word	0x0802bcc8

08008f44 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
    }
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff ffe9 	bl	8008f24 <_ZN8touchgfx9PresenterD1Ev>
 8008f52:	2104      	movs	r1, #4
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f01c ff0e 	bl	8025d76 <_ZdlPvj>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
    {
 8008f6c:	4a04      	ldr	r2, [pc, #16]	; (8008f80 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	601a      	str	r2, [r3, #0]
    }
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	0802bcc8 	.word	0x0802bcc8

08008f84 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	4a06      	ldr	r2, [pc, #24]	; (8008fa8 <_ZN13ModelListenerC1Ev+0x24>)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	605a      	str	r2, [r3, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	0802bcb8 	.word	0x0802bcb8

08008fac <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	4a04      	ldr	r2, [pc, #16]	; (8008fc8 <_ZN13ModelListenerD1Ev+0x1c>)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	0802bcb8 	.word	0x0802bcb8

08008fcc <_ZN13ModelListenerD0Ev>:
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ffe9 	bl	8008fac <_ZN13ModelListenerD1Ev>
 8008fda:	2108      	movs	r1, #8
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f01c feca 	bl	8025d76 <_ZdlPvj>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	4a09      	ldr	r2, [pc, #36]	; (800901c <_ZN16Screen1PresenterD1Ev+0x30>)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	4a09      	ldr	r2, [pc, #36]	; (8009020 <_ZN16Screen1PresenterD1Ev+0x34>)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	605a      	str	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3304      	adds	r3, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f7ff ffd1 	bl	8008fac <_ZN13ModelListenerD1Ev>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff ff89 	bl	8008f24 <_ZN8touchgfx9PresenterD1Ev>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	0802bc90 	.word	0x0802bc90
 8009020:	0802bca8 	.word	0x0802bca8

08009024 <_ZThn4_N16Screen1PresenterD1Ev>:
 8009024:	f1a0 0004 	sub.w	r0, r0, #4
 8009028:	e7e0      	b.n	8008fec <_ZN16Screen1PresenterD1Ev>
 800902a:	bf00      	nop

0800902c <_ZN16Screen1PresenterD0Ev>:
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff ffd9 	bl	8008fec <_ZN16Screen1PresenterD1Ev>
 800903a:	2110      	movs	r1, #16
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f01c fe9a 	bl	8025d76 <_ZdlPvj>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <_ZThn4_N16Screen1PresenterD0Ev>:
 800904c:	f1a0 0004 	sub.w	r0, r0, #4
 8009050:	e7ec      	b.n	800902c <_ZN16Screen1PresenterD0Ev>
	...

08009054 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
    : view(v)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff ff7f 	bl	8008f64 <_ZN8touchgfx9PresenterC1Ev>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3304      	adds	r3, #4
 800906a:	4618      	mov	r0, r3
 800906c:	f7ff ff8a 	bl	8008f84 <_ZN13ModelListenerC1Ev>
 8009070:	4a06      	ldr	r2, [pc, #24]	; (800908c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	601a      	str	r2, [r3, #0]
 8009076:	4a06      	ldr	r2, [pc, #24]	; (8009090 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	605a      	str	r2, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	60da      	str	r2, [r3, #12]
{

}
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	0802bc90 	.word	0x0802bc90
 8009090:	0802bca8 	.word	0x0802bca8

08009094 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]

}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]

}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <_Z41__static_initialization_and_destruction_0ii>:
 80090bc:	b580      	push	{r7, lr}
 80090be:	b092      	sub	sp, #72	; 0x48
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	f040 8114 	bne.w	80092f6 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090d4:	4293      	cmp	r3, r2
 80090d6:	f040 810e 	bne.w	80092f6 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80090da:	2300      	movs	r3, #0
 80090dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80090e0:	2300      	movs	r3, #0
 80090e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80090e6:	2300      	movs	r3, #0
 80090e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80090f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80090f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80090fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009100:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8009104:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009108:	041b      	lsls	r3, r3, #16
 800910a:	461a      	mov	r2, r3
 800910c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009110:	021b      	lsls	r3, r3, #8
 8009112:	431a      	orrs	r2, r3
 8009114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009118:	4313      	orrs	r3, r2
 800911a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800911e:	f107 0320 	add.w	r3, r7, #32
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f7fa ff93 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800912a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800912c:	bf00      	nop
 800912e:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009130:	4b73      	ldr	r3, [pc, #460]	; (8009300 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	23ff      	movs	r3, #255	; 0xff
 8009136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800913a:	2300      	movs	r3, #0
 800913c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009140:	2300      	movs	r3, #0
 8009142:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800914a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800914e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009156:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800915a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800915e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	461a      	mov	r2, r3
 8009166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	431a      	orrs	r2, r3
 800916e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009172:	4313      	orrs	r3, r2
 8009174:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009178:	f107 031c 	add.w	r3, r7, #28
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7fa ff66 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009184:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8009186:	bf00      	nop
 8009188:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800918a:	4b5e      	ldr	r3, [pc, #376]	; (8009304 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	2300      	movs	r3, #0
 8009190:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009194:	23ff      	movs	r3, #255	; 0xff
 8009196:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800919a:	2300      	movs	r3, #0
 800919c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80091a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80091a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80091ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80091b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80091b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80091bc:	041b      	lsls	r3, r3, #16
 80091be:	461a      	mov	r2, r3
 80091c0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	431a      	orrs	r2, r3
 80091c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80091cc:	4313      	orrs	r3, r2
 80091ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80091d2:	f107 0318 	add.w	r3, r7, #24
 80091d6:	4611      	mov	r1, r2
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fa ff39 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 80091de:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80091e0:	bf00      	nop
 80091e2:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80091e4:	4b48      	ldr	r3, [pc, #288]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	2300      	movs	r3, #0
 80091ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091ee:	2300      	movs	r3, #0
 80091f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80091f4:	23ff      	movs	r3, #255	; 0xff
 80091f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80091fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80091fe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009202:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009206:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800920a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800920e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009212:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009216:	041b      	lsls	r3, r3, #16
 8009218:	461a      	mov	r2, r3
 800921a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800921e:	021b      	lsls	r3, r3, #8
 8009220:	431a      	orrs	r2, r3
 8009222:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009226:	4313      	orrs	r3, r2
 8009228:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800922c:	f107 0314 	add.w	r3, r7, #20
 8009230:	4611      	mov	r1, r2
 8009232:	4618      	mov	r0, r3
 8009234:	f7fa ff0c 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009238:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800923a:	bf00      	nop
 800923c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800923e:	4b33      	ldr	r3, [pc, #204]	; (800930c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	23f7      	movs	r3, #247	; 0xf7
 8009244:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8009248:	234c      	movs	r3, #76	; 0x4c
 800924a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800924e:	2302      	movs	r3, #2
 8009250:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009254:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009258:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800925c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009260:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009264:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009268:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800926c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009270:	041b      	lsls	r3, r3, #16
 8009272:	461a      	mov	r2, r3
 8009274:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009278:	021b      	lsls	r3, r3, #8
 800927a:	431a      	orrs	r2, r3
 800927c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009280:	4313      	orrs	r3, r2
 8009282:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009286:	f107 0310 	add.w	r3, r7, #16
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f7fa fedf 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009292:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009294:	bf00      	nop
 8009296:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009298:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	23f7      	movs	r3, #247	; 0xf7
 800929e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80092a2:	23d2      	movs	r3, #210	; 0xd2
 80092a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80092a8:	2302      	movs	r3, #2
 80092aa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80092ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80092b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80092c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80092c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80092ca:	041b      	lsls	r3, r3, #16
 80092cc:	461a      	mov	r2, r3
 80092ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092d2:	021b      	lsls	r3, r3, #8
 80092d4:	431a      	orrs	r2, r3
 80092d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80092da:	4313      	orrs	r3, r2
 80092dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80092e0:	f107 030c 	add.w	r3, r7, #12
 80092e4:	4611      	mov	r1, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fa feb2 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 80092ec:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 80092ee:	bf00      	nop
 80092f0:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 80092f2:	4b08      	ldr	r3, [pc, #32]	; (8009314 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	bf00      	nop
 80092f8:	3748      	adds	r7, #72	; 0x48
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	2002393c 	.word	0x2002393c
 8009304:	20023940 	.word	0x20023940
 8009308:	20023944 	.word	0x20023944
 800930c:	20023948 	.word	0x20023948
 8009310:	2002394c 	.word	0x2002394c
 8009314:	20023950 	.word	0x20023950

08009318 <_GLOBAL__sub_I__ZN16Screen1PresenterC2ER11Screen1View>:
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
 800931c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009320:	2001      	movs	r0, #1
 8009322:	f7ff fecb 	bl	80090bc <_Z41__static_initialization_and_destruction_0ii>
 8009326:	bd80      	pop	{r7, pc}

08009328 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	4a05      	ldr	r2, [pc, #20]	; (8009348 <_ZN11Screen1ViewD1Ev+0x20>)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4618      	mov	r0, r3
 800933a:	f7fd ff57 	bl	80071ec <_ZN15Screen1ViewBaseD1Ev>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	0802bce0 	.word	0x0802bce0

0800934c <_ZN11Screen1ViewD0Ev>:
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7ff ffe7 	bl	8009328 <_ZN11Screen1ViewD1Ev>
 800935a:	4904      	ldr	r1, [pc, #16]	; (800936c <_ZN11Screen1ViewD0Ev+0x20>)
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f01c fd0a 	bl	8025d76 <_ZdlPvj>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	0002263c 	.word	0x0002263c

08009370 <_ZN11Screen1ViewC1Ev>:
#include <stdio.h>
#include <cstring>
#include <ecumaster.h>
#include <telemetry_data.h>

Screen1View::Screen1View()
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4618      	mov	r0, r3
 800937c:	f7fd ffba 	bl	80072f4 <_ZN15Screen1ViewBaseC1Ev>
 8009380:	4a35      	ldr	r2, [pc, #212]	; (8009458 <_ZN11Screen1ViewC1Ev+0xe8>)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	4b34      	ldr	r3, [pc, #208]	; (800945c <_ZN11Screen1ViewC1Ev+0xec>)
 800938a:	4413      	add	r3, r2
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
{
	rpmArea.setWildcard(rpmAreaBuffer);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4b31      	ldr	r3, [pc, #196]	; (8009460 <_ZN11Screen1ViewC1Ev+0xf0>)
 800939a:	4413      	add	r3, r2
 800939c:	4619      	mov	r1, r3
 800939e:	f7fd fcab 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	gearArea.setWildcard(gearAreaBuffer);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	4b2e      	ldr	r3, [pc, #184]	; (8009464 <_ZN11Screen1ViewC1Ev+0xf4>)
 80093ac:	4413      	add	r3, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	f7fd fca2 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	cltArea.setWildcard(cltAreaBuffer);
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	4b2c      	ldr	r3, [pc, #176]	; (8009468 <_ZN11Screen1ViewC1Ev+0xf8>)
 80093b8:	4413      	add	r3, r2
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	4a2b      	ldr	r2, [pc, #172]	; (800946c <_ZN11Screen1ViewC1Ev+0xfc>)
 80093be:	440a      	add	r2, r1
 80093c0:	4611      	mov	r1, r2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fd fc98 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	battArea.setWildcard(battAreaBuffer);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	4b27      	ldr	r3, [pc, #156]	; (8009470 <_ZN11Screen1ViewC1Ev+0x100>)
 80093d2:	4413      	add	r3, r2
 80093d4:	4619      	mov	r1, r3
 80093d6:	f7fd fc8f 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	oilPressArea.setWildcard(oilPressAreaBuffer);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	4b24      	ldr	r3, [pc, #144]	; (8009474 <_ZN11Screen1ViewC1Ev+0x104>)
 80093e4:	4413      	add	r3, r2
 80093e6:	4619      	mov	r1, r3
 80093e8:	f7fd fc86 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

	setRPM(EcuData.rpm);
 80093ec:	4b22      	ldr	r3, [pc, #136]	; (8009478 <_ZN11Screen1ViewC1Ev+0x108>)
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fa24 	bl	8009840 <_ZN11Screen1View6setRPMEi>
	setGear(telemetryData.gear);
 80093f8:	4b20      	ldr	r3, [pc, #128]	; (800947c <_ZN11Screen1ViewC1Ev+0x10c>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fb02 	bl	8009a08 <_ZN11Screen1View7setGearEi>
	setClt(EcuData.clt);
 8009404:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <_ZN11Screen1ViewC1Ev+0x108>)
 8009406:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 facb 	bl	80099a8 <_ZN11Screen1View6setCltEs>
	setBatt(EcuData.batt);
 8009412:	4b19      	ldr	r3, [pc, #100]	; (8009478 <_ZN11Screen1ViewC1Ev+0x108>)
 8009414:	edd3 7a07 	vldr	s15, [r3, #28]
 8009418:	eeb0 0a67 	vmov.f32	s0, s15
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fa49 	bl	80098b4 <_ZN11Screen1View7setBattEf>
	setOilPress(EcuData.oilPress);
 8009422:	4b15      	ldr	r3, [pc, #84]	; (8009478 <_ZN11Screen1ViewC1Ev+0x108>)
 8009424:	edd3 7a03 	vldr	s15, [r3, #12]
 8009428:	eeb0 0a67 	vmov.f32	s0, s15
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fa89 	bl	8009944 <_ZN11Screen1View11setOilPressEf>
	alertBar1.setState(EBarState::Blank);
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	4b12      	ldr	r3, [pc, #72]	; (8009480 <_ZN11Screen1ViewC1Ev+0x110>)
 8009436:	4413      	add	r3, r2
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fcb4 	bl	8009da8 <_ZN8alertBar8setStateE9EBarState>
	alertBar2.setState(EBarState::Blank);
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	4b10      	ldr	r3, [pc, #64]	; (8009484 <_ZN11Screen1ViewC1Ev+0x114>)
 8009444:	4413      	add	r3, r2
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fcad 	bl	8009da8 <_ZN8alertBar8setStateE9EBarState>
}
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	0802bce0 	.word	0x0802bce0
 800945c:	00022638 	.word	0x00022638
 8009460:	0001f708 	.word	0x0001f708
 8009464:	0001f704 	.word	0x0001f704
 8009468:	0001f6c4 	.word	0x0001f6c4
 800946c:	0001f744 	.word	0x0001f744
 8009470:	0001f71c 	.word	0x0001f71c
 8009474:	0001f730 	.word	0x0001f730
 8009478:	2002396c 	.word	0x2002396c
 800947c:	20023998 	.word	0x20023998
 8009480:	0001f514 	.word	0x0001f514
 8009484:	0001f5ec 	.word	0x0001f5ec

08009488 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fc14 	bl	8007cc0 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fd fade 	bl	8006a6c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	//// Screen1View::tempBox1_1.redraw();
	//tempBox1_1.invalidate();
	static int a = 0;

	static uint16_t lastRPM = 0;
	if (EcuData.rpm != lastRPM)
 80094c0:	4b6a      	ldr	r3, [pc, #424]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80094c2:	881a      	ldrh	r2, [r3, #0]
 80094c4:	4b6a      	ldr	r3, [pc, #424]	; (8009670 <_ZN11Screen1View15handleTickEventEv+0x1b8>)
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d00e      	beq.n	80094ea <_ZN11Screen1View15handleTickEventEv+0x32>
	{
		setRPM(EcuData.rpm);
 80094cc:	4b67      	ldr	r3, [pc, #412]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f9b4 	bl	8009840 <_ZN11Screen1View6setRPMEi>
		lastRPM = EcuData.rpm;
 80094d8:	4b64      	ldr	r3, [pc, #400]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80094da:	881a      	ldrh	r2, [r3, #0]
 80094dc:	4b64      	ldr	r3, [pc, #400]	; (8009670 <_ZN11Screen1View15handleTickEventEv+0x1b8>)
 80094de:	801a      	strh	r2, [r3, #0]
		// if(EcuData.rpm <12000)
		gearArea.invalidate();
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3398      	adds	r3, #152	; 0x98
 80094e4:	4618      	mov	r0, r3
 80094e6:	f010 fbed 	bl	8019cc4 <_ZNK8touchgfx8Drawable10invalidateEv>
		//setGear(2);
	}
	static uint8_t lastGear = 0;
	if (telemetryData.gear != lastGear)
 80094ea:	4b62      	ldr	r3, [pc, #392]	; (8009674 <_ZN11Screen1View15handleTickEventEv+0x1bc>)
 80094ec:	781a      	ldrb	r2, [r3, #0]
 80094ee:	4b62      	ldr	r3, [pc, #392]	; (8009678 <_ZN11Screen1View15handleTickEventEv+0x1c0>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d009      	beq.n	800950a <_ZN11Screen1View15handleTickEventEv+0x52>
	{
		setGear(telemetryData.gear);
 80094f6:	4b5f      	ldr	r3, [pc, #380]	; (8009674 <_ZN11Screen1View15handleTickEventEv+0x1bc>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fa83 	bl	8009a08 <_ZN11Screen1View7setGearEi>
		lastGear = telemetryData.gear;
 8009502:	4b5c      	ldr	r3, [pc, #368]	; (8009674 <_ZN11Screen1View15handleTickEventEv+0x1bc>)
 8009504:	781a      	ldrb	r2, [r3, #0]
 8009506:	4b5c      	ldr	r3, [pc, #368]	; (8009678 <_ZN11Screen1View15handleTickEventEv+0x1c0>)
 8009508:	701a      	strb	r2, [r3, #0]
	}
	static float lastBatt = 0.0f;
	if (lastBatt != EcuData.batt)
 800950a:	4b58      	ldr	r3, [pc, #352]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 800950c:	ed93 7a07 	vldr	s14, [r3, #28]
 8009510:	4b5a      	ldr	r3, [pc, #360]	; (800967c <_ZN11Screen1View15handleTickEventEv+0x1c4>)
 8009512:	edd3 7a00 	vldr	s15, [r3]
 8009516:	eeb4 7a67 	vcmp.f32	s14, s15
 800951a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951e:	d00b      	beq.n	8009538 <_ZN11Screen1View15handleTickEventEv+0x80>
	{
		setBatt(EcuData.batt);
 8009520:	4b52      	ldr	r3, [pc, #328]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009522:	edd3 7a07 	vldr	s15, [r3, #28]
 8009526:	eeb0 0a67 	vmov.f32	s0, s15
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f9c2 	bl	80098b4 <_ZN11Screen1View7setBattEf>
		lastBatt = EcuData.batt;
 8009530:	4b4e      	ldr	r3, [pc, #312]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	4a51      	ldr	r2, [pc, #324]	; (800967c <_ZN11Screen1View15handleTickEventEv+0x1c4>)
 8009536:	6013      	str	r3, [r2, #0]
	}
	static int16_t lastClt = 0;
	if (lastClt != EcuData.clt)
 8009538:	4b4c      	ldr	r3, [pc, #304]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 800953a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800953e:	4b50      	ldr	r3, [pc, #320]	; (8009680 <_ZN11Screen1View15handleTickEventEv+0x1c8>)
 8009540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009544:	429a      	cmp	r2, r3
 8009546:	d00b      	beq.n	8009560 <_ZN11Screen1View15handleTickEventEv+0xa8>
	{
		setClt(EcuData.clt);
 8009548:	4b48      	ldr	r3, [pc, #288]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 800954a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fa29 	bl	80099a8 <_ZN11Screen1View6setCltEs>
		lastClt = EcuData.clt;
 8009556:	4b45      	ldr	r3, [pc, #276]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009558:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800955c:	4b48      	ldr	r3, [pc, #288]	; (8009680 <_ZN11Screen1View15handleTickEventEv+0x1c8>)
 800955e:	801a      	strh	r2, [r3, #0]
	}
	static float lastOilPressure = 0;
	if (lastOilPressure != EcuData.oilPress)
 8009560:	4b42      	ldr	r3, [pc, #264]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009562:	ed93 7a03 	vldr	s14, [r3, #12]
 8009566:	4b47      	ldr	r3, [pc, #284]	; (8009684 <_ZN11Screen1View15handleTickEventEv+0x1cc>)
 8009568:	edd3 7a00 	vldr	s15, [r3]
 800956c:	eeb4 7a67 	vcmp.f32	s14, s15
 8009570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009574:	d00b      	beq.n	800958e <_ZN11Screen1View15handleTickEventEv+0xd6>
	{
		setOilPress(EcuData.oilPress);
 8009576:	4b3d      	ldr	r3, [pc, #244]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009578:	edd3 7a03 	vldr	s15, [r3, #12]
 800957c:	eeb0 0a67 	vmov.f32	s0, s15
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f9df 	bl	8009944 <_ZN11Screen1View11setOilPressEf>
		lastOilPressure = EcuData.oilPress;
 8009586:	4b39      	ldr	r3, [pc, #228]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	4a3e      	ldr	r2, [pc, #248]	; (8009684 <_ZN11Screen1View15handleTickEventEv+0x1cc>)
 800958c:	6013      	str	r3, [r2, #0]
	}

	if (EcuData.oilPress < 1.5f && EcuData.rpm > 1000)
 800958e:	4b37      	ldr	r3, [pc, #220]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009590:	edd3 7a03 	vldr	s15, [r3, #12]
 8009594:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8009598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800959c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a0:	d53a      	bpl.n	8009618 <_ZN11Screen1View15handleTickEventEv+0x160>
 80095a2:	4b32      	ldr	r3, [pc, #200]	; (800966c <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095aa:	d935      	bls.n	8009618 <_ZN11Screen1View15handleTickEventEv+0x160>
	{
		static int lastChange = 0;
		if (tickCounter - lastChange > 15)
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	4b36      	ldr	r3, [pc, #216]	; (8009688 <_ZN11Screen1View15handleTickEventEv+0x1d0>)
 80095b0:	4413      	add	r3, r2
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	4b35      	ldr	r3, [pc, #212]	; (800968c <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b0f      	cmp	r3, #15
 80095bc:	dd47      	ble.n	800964e <_ZN11Screen1View15handleTickEventEv+0x196>
		{
			alertBar1.setText("LOW OIL PRESS\n");
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	4b33      	ldr	r3, [pc, #204]	; (8009690 <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 80095c2:	4413      	add	r3, r2
 80095c4:	4933      	ldr	r1, [pc, #204]	; (8009694 <_ZN11Screen1View15handleTickEventEv+0x1dc>)
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fc56 	bl	8009e78 <_ZN8alertBar7setTextEPKc>
			if (a == 0)
 80095cc:	4b32      	ldr	r3, [pc, #200]	; (8009698 <_ZN11Screen1View15handleTickEventEv+0x1e0>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d107      	bne.n	80095e4 <_ZN11Screen1View15handleTickEventEv+0x12c>
			{
				alertBar1.setState(EBarState::Critical1);
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	4b2e      	ldr	r3, [pc, #184]	; (8009690 <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 80095d8:	4413      	add	r3, r2
 80095da:	2104      	movs	r1, #4
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fbe3 	bl	8009da8 <_ZN8alertBar8setStateE9EBarState>
 80095e2:	e006      	b.n	80095f2 <_ZN11Screen1View15handleTickEventEv+0x13a>
			}
			else
			{
				alertBar1.setState(EBarState::Critical2);
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	4b2a      	ldr	r3, [pc, #168]	; (8009690 <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 80095e8:	4413      	add	r3, r2
 80095ea:	2105      	movs	r1, #5
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fbdb 	bl	8009da8 <_ZN8alertBar8setStateE9EBarState>
			}
			alertBar1.invalidate();
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	4b26      	ldr	r3, [pc, #152]	; (8009690 <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 80095f6:	4413      	add	r3, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f010 fb63 	bl	8019cc4 <_ZNK8touchgfx8Drawable10invalidateEv>
			a = 1 - a;
 80095fe:	4b26      	ldr	r3, [pc, #152]	; (8009698 <_ZN11Screen1View15handleTickEventEv+0x1e0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f1c3 0301 	rsb	r3, r3, #1
 8009606:	4a24      	ldr	r2, [pc, #144]	; (8009698 <_ZN11Screen1View15handleTickEventEv+0x1e0>)
 8009608:	6013      	str	r3, [r2, #0]
			lastChange = tickCounter;
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	4b1e      	ldr	r3, [pc, #120]	; (8009688 <_ZN11Screen1View15handleTickEventEv+0x1d0>)
 800960e:	4413      	add	r3, r2
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a1e      	ldr	r2, [pc, #120]	; (800968c <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009614:	6013      	str	r3, [r2, #0]
		}
 8009616:	e01a      	b.n	800964e <_ZN11Screen1View15handleTickEventEv+0x196>
	}
	else if (telemetryData.gear == 7)
 8009618:	4b16      	ldr	r3, [pc, #88]	; (8009674 <_ZN11Screen1View15handleTickEventEv+0x1bc>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	2b07      	cmp	r3, #7
 800961e:	d10e      	bne.n	800963e <_ZN11Screen1View15handleTickEventEv+0x186>
	{
		alertBar1.setState(EBarState::Warning);
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	4b1b      	ldr	r3, [pc, #108]	; (8009690 <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 8009624:	4413      	add	r3, r2
 8009626:	2102      	movs	r1, #2
 8009628:	4618      	mov	r0, r3
 800962a:	f000 fbbd 	bl	8009da8 <_ZN8alertBar8setStateE9EBarState>
		alertBar1.setText("GEAR UNKNOWN");
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	4b17      	ldr	r3, [pc, #92]	; (8009690 <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 8009632:	4413      	add	r3, r2
 8009634:	4919      	ldr	r1, [pc, #100]	; (800969c <_ZN11Screen1View15handleTickEventEv+0x1e4>)
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fc1e 	bl	8009e78 <_ZN8alertBar7setTextEPKc>
 800963c:	e008      	b.n	8009650 <_ZN11Screen1View15handleTickEventEv+0x198>
	}
	else
	{
		alertBar1.setState(EBarState::Blank);
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	4b13      	ldr	r3, [pc, #76]	; (8009690 <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 8009642:	4413      	add	r3, r2
 8009644:	2100      	movs	r1, #0
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fbae 	bl	8009da8 <_ZN8alertBar8setStateE9EBarState>
 800964c:	e000      	b.n	8009650 <_ZN11Screen1View15handleTickEventEv+0x198>
		}
 800964e:	bf00      	nop

	//setClt(EcuData.clt);
	//setBatt(EcuData.batt);
	//alertBar1.invalidate();
	//alertBar1.setText("12345678912345\n");
	tickCounter++;
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	4b0d      	ldr	r3, [pc, #52]	; (8009688 <_ZN11Screen1View15handleTickEventEv+0x1d0>)
 8009654:	4413      	add	r3, r2
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	6879      	ldr	r1, [r7, #4]
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <_ZN11Screen1View15handleTickEventEv+0x1d0>)
 800965e:	440b      	add	r3, r1
 8009660:	601a      	str	r2, [r3, #0]
}
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	2002396c 	.word	0x2002396c
 8009670:	200239a0 	.word	0x200239a0
 8009674:	20023998 	.word	0x20023998
 8009678:	200239a2 	.word	0x200239a2
 800967c:	200239a4 	.word	0x200239a4
 8009680:	200239a8 	.word	0x200239a8
 8009684:	200239ac 	.word	0x200239ac
 8009688:	00022638 	.word	0x00022638
 800968c:	200239b0 	.word	0x200239b0
 8009690:	0001f514 	.word	0x0001f514
 8009694:	0802b3a0 	.word	0x0802b3a0
 8009698:	2002399c 	.word	0x2002399c
 800969c:	0802b3b0 	.word	0x0802b3b0

080096a0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>:

void Screen1View::setText(touchgfx::TextAreaWithOneWildcard textArea,
		touchgfx::Unicode::UnicodeChar *buffer, const char inText[])
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	603b      	str	r3, [r7, #0]
	Unicode::snprintf(buffer, strlen(inText) + 1, inText);
 80096ae:	6838      	ldr	r0, [r7, #0]
 80096b0:	f7f6 fdc6 	bl	8000240 <strlen>
 80096b4:	4603      	mov	r3, r0
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	3301      	adds	r3, #1
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f012 fb81 	bl	801bdc8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	//textArea.resizeToCurrentText();
	textArea.invalidate();
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f010 fafb 	bl	8019cc4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <_ZN8touchgfx8DrawableC1ERKS0_>:
class Drawable
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
 80096e2:	4a1e      	ldr	r2, [pc, #120]	; (800975c <_ZN8touchgfx8DrawableC1ERKS0_+0x84>)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	3304      	adds	r3, #4
 80096ee:	3204      	adds	r2, #4
 80096f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	330c      	adds	r3, #12
 80096fe:	320c      	adds	r2, #12
 8009700:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009704:	e883 0003 	stmia.w	r3, {r0, r1}
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	695a      	ldr	r2, [r3, #20]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	615a      	str	r2, [r3, #20]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	699a      	ldr	r2, [r3, #24]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	619a      	str	r2, [r3, #24]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	69da      	ldr	r2, [r3, #28]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	61da      	str	r2, [r3, #28]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	841a      	strh	r2, [r3, #32]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	845a      	strh	r2, [r3, #34]	; 0x22
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	0802d3ec 	.word	0x0802d3ec

08009760 <_ZN8touchgfx6WidgetC1ERKS0_>:
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff ffb1 	bl	80096d8 <_ZN8touchgfx8DrawableC1ERKS0_>
 8009776:	4a04      	ldr	r2, [pc, #16]	; (8009788 <_ZN8touchgfx6WidgetC1ERKS0_+0x28>)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4618      	mov	r0, r3
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	0802baa4 	.word	0x0802baa4

0800978c <_ZN8touchgfx8TextAreaC1ERKS0_>:
class TextArea : public Widget
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff ffdf 	bl	8009760 <_ZN8touchgfx6WidgetC1ERKS0_>
 80097a2:	4a19      	ldr	r2, [pc, #100]	; (8009808 <_ZN8touchgfx8TextAreaC1ERKS0_+0x7c>)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	3328      	adds	r3, #40	; 0x28
 80097b2:	4619      	mov	r1, r3
 80097b4:	4610      	mov	r0, r2
 80097b6:	f7fc f9e1 	bl	8005b7c <_ZN8touchgfx9TypedTextC1ERKS0_>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80097c0:	631a      	str	r2, [r3, #48]	; 0x30
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	869a      	strh	r2, [r3, #52]	; 0x34
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4618      	mov	r0, r3
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	0802cef8 	.word	0x0802cef8

0800980c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>:
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	4611      	mov	r1, r2
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff ffb5 	bl	800978c <_ZN8touchgfx8TextAreaC1ERKS0_>
 8009822:	4a06      	ldr	r2, [pc, #24]	; (800983c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_+0x30>)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	63da      	str	r2, [r3, #60]	; 0x3c
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	0802d004 	.word	0x0802d004

08009840 <_ZN11Screen1View6setRPMEi>:

void Screen1View::setRPM(int inRPM)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b096      	sub	sp, #88	; 0x58
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	sprintf(textBuffer, "%d", (uint16_t)inRPM*1.2f);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	b29b      	uxth	r3, r3
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009856:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80098a8 <_ZN11Screen1View6setRPMEi+0x68>
 800985a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800985e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009862:	f107 000c 	add.w	r0, r7, #12
 8009866:	ec53 2b17 	vmov	r2, r3, d7
 800986a:	4910      	ldr	r1, [pc, #64]	; (80098ac <_ZN11Screen1View6setRPMEi+0x6c>)
 800986c:	f01d fcf0 	bl	8027250 <siprintf>
	setText(rpmArea, rpmAreaBuffer, textBuffer);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8009876:	f107 0318 	add.w	r3, r7, #24
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff ffc5 	bl	800980c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a0a      	ldr	r2, [pc, #40]	; (80098b0 <_ZN11Screen1View6setRPMEi+0x70>)
 8009886:	441a      	add	r2, r3
 8009888:	f107 030c 	add.w	r3, r7, #12
 800988c:	f107 0118 	add.w	r1, r7, #24
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff ff05 	bl	80096a0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009896:	f107 0318 	add.w	r3, r7, #24
 800989a:	4618      	mov	r0, r3
 800989c:	f7fe fc74 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 80098a0:	bf00      	nop
 80098a2:	3758      	adds	r7, #88	; 0x58
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	3f99999a 	.word	0x3f99999a
 80098ac:	0802b3c0 	.word	0x0802b3c0
 80098b0:	0001f708 	.word	0x0001f708

080098b4 <_ZN11Screen1View7setBattEf>:

void Screen1View::setBatt(float inBatt)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b096      	sub	sp, #88	; 0x58
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	if (inBatt < 10.0f)
 80098c0:	edd7 7a00 	vldr	s15, [r7]
 80098c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80098c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d0:	d50b      	bpl.n	80098ea <_ZN11Screen1View7setBattEf+0x36>
	{
		sprintf(textBuffer, " %.1f", inBatt);
 80098d2:	edd7 7a00 	vldr	s15, [r7]
 80098d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80098da:	f107 000c 	add.w	r0, r7, #12
 80098de:	ec53 2b17 	vmov	r2, r3, d7
 80098e2:	4915      	ldr	r1, [pc, #84]	; (8009938 <_ZN11Screen1View7setBattEf+0x84>)
 80098e4:	f01d fcb4 	bl	8027250 <siprintf>
 80098e8:	e00a      	b.n	8009900 <_ZN11Screen1View7setBattEf+0x4c>
	}
	else
	{
		sprintf(textBuffer, "%.1f", inBatt);
 80098ea:	edd7 7a00 	vldr	s15, [r7]
 80098ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80098f2:	f107 000c 	add.w	r0, r7, #12
 80098f6:	ec53 2b17 	vmov	r2, r3, d7
 80098fa:	4910      	ldr	r1, [pc, #64]	; (800993c <_ZN11Screen1View7setBattEf+0x88>)
 80098fc:	f01d fca8 	bl	8027250 <siprintf>
	}

	setText(battArea, battAreaBuffer, textBuffer);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 8009906:	f107 0318 	add.w	r3, r7, #24
 800990a:	4611      	mov	r1, r2
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff ff7d 	bl	800980c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a0a      	ldr	r2, [pc, #40]	; (8009940 <_ZN11Screen1View7setBattEf+0x8c>)
 8009916:	441a      	add	r2, r3
 8009918:	f107 030c 	add.w	r3, r7, #12
 800991c:	f107 0118 	add.w	r1, r7, #24
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff febd 	bl	80096a0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009926:	f107 0318 	add.w	r3, r7, #24
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fc2c 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009930:	bf00      	nop
 8009932:	3758      	adds	r7, #88	; 0x58
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	0802b3c4 	.word	0x0802b3c4
 800993c:	0802b3cc 	.word	0x0802b3cc
 8009940:	0001f71c 	.word	0x0001f71c

08009944 <_ZN11Screen1View11setOilPressEf>:

void Screen1View::setOilPress(float inOilPress)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b096      	sub	sp, #88	; 0x58
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	sprintf(textBuffer, "%.2f", inOilPress);
 8009950:	edd7 7a00 	vldr	s15, [r7]
 8009954:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009958:	f107 000c 	add.w	r0, r7, #12
 800995c:	ec53 2b17 	vmov	r2, r3, d7
 8009960:	490f      	ldr	r1, [pc, #60]	; (80099a0 <_ZN11Screen1View11setOilPressEf+0x5c>)
 8009962:	f01d fc75 	bl	8027250 <siprintf>
	setText(battArea, battAreaBuffer, textBuffer);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 800996c:	f107 0318 	add.w	r3, r7, #24
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff ff4a 	bl	800980c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a0a      	ldr	r2, [pc, #40]	; (80099a4 <_ZN11Screen1View11setOilPressEf+0x60>)
 800997c:	441a      	add	r2, r3
 800997e:	f107 030c 	add.w	r3, r7, #12
 8009982:	f107 0118 	add.w	r1, r7, #24
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff fe8a 	bl	80096a0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800998c:	f107 0318 	add.w	r3, r7, #24
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe fbf9 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009996:	bf00      	nop
 8009998:	3758      	adds	r7, #88	; 0x58
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	0802b3d4 	.word	0x0802b3d4
 80099a4:	0001f71c 	.word	0x0001f71c

080099a8 <_ZN11Screen1View6setCltEs>:

void Screen1View::setClt(int16_t inClt)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b096      	sub	sp, #88	; 0x58
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	807b      	strh	r3, [r7, #2]
	char textBuffer[10];
	sprintf(textBuffer, "%i", inClt);
 80099b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80099b8:	f107 030c 	add.w	r3, r7, #12
 80099bc:	490f      	ldr	r1, [pc, #60]	; (80099fc <_ZN11Screen1View6setCltEs+0x54>)
 80099be:	4618      	mov	r0, r3
 80099c0:	f01d fc46 	bl	8027250 <siprintf>
	setText(cltArea, cltAreaBuffer, textBuffer);
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	4b0e      	ldr	r3, [pc, #56]	; (8009a00 <_ZN11Screen1View6setCltEs+0x58>)
 80099c8:	4413      	add	r3, r2
 80099ca:	f107 0218 	add.w	r2, r7, #24
 80099ce:	4619      	mov	r1, r3
 80099d0:	4610      	mov	r0, r2
 80099d2:	f7ff ff1b 	bl	800980c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a0a      	ldr	r2, [pc, #40]	; (8009a04 <_ZN11Screen1View6setCltEs+0x5c>)
 80099da:	441a      	add	r2, r3
 80099dc:	f107 030c 	add.w	r3, r7, #12
 80099e0:	f107 0118 	add.w	r1, r7, #24
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff fe5b 	bl	80096a0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 80099ea:	f107 0318 	add.w	r3, r7, #24
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fbca 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 80099f4:	bf00      	nop
 80099f6:	3758      	adds	r7, #88	; 0x58
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	0802b3dc 	.word	0x0802b3dc
 8009a00:	0001f6c4 	.word	0x0001f6c4
 8009a04:	0001f744 	.word	0x0001f744

08009a08 <_ZN11Screen1View7setGearEi>:

void Screen1View::setGear(int inGear)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b0a6      	sub	sp, #152	; 0x98
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	if (inGear == 0)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d11f      	bne.n	8009a58 <_ZN11Screen1View7setGearEi+0x50>
	{
		sprintf(textBuffer, "%s", "N");
 8009a18:	f107 030c 	add.w	r3, r7, #12
 8009a1c:	4a21      	ldr	r2, [pc, #132]	; (8009aa4 <_ZN11Screen1View7setGearEi+0x9c>)
 8009a1e:	4922      	ldr	r1, [pc, #136]	; (8009aa8 <_ZN11Screen1View7setGearEi+0xa0>)
 8009a20:	4618      	mov	r0, r3
 8009a22:	f01d fc15 	bl	8027250 <siprintf>
		setText(gearArea, gearAreaBuffer, textBuffer);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8009a2c:	f107 0318 	add.w	r3, r7, #24
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff feea 	bl	800980c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a1c      	ldr	r2, [pc, #112]	; (8009aac <_ZN11Screen1View7setGearEi+0xa4>)
 8009a3c:	441a      	add	r2, r3
 8009a3e:	f107 030c 	add.w	r3, r7, #12
 8009a42:	f107 0118 	add.w	r1, r7, #24
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7ff fe2a 	bl	80096a0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009a4c:	f107 0318 	add.w	r3, r7, #24
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe fb99 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
	{
		sprintf(textBuffer, "%d", inGear);
		setText(gearArea, gearAreaBuffer, textBuffer);
	}

}
 8009a56:	e021      	b.n	8009a9c <_ZN11Screen1View7setGearEi+0x94>
	else if (inGear < 7)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b06      	cmp	r3, #6
 8009a5c:	dc1e      	bgt.n	8009a9c <_ZN11Screen1View7setGearEi+0x94>
		sprintf(textBuffer, "%d", inGear);
 8009a5e:	f107 030c 	add.w	r3, r7, #12
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	4912      	ldr	r1, [pc, #72]	; (8009ab0 <_ZN11Screen1View7setGearEi+0xa8>)
 8009a66:	4618      	mov	r0, r3
 8009a68:	f01d fbf2 	bl	8027250 <siprintf>
		setText(gearArea, gearAreaBuffer, textBuffer);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8009a72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a76:	4611      	mov	r1, r2
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7ff fec7 	bl	800980c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <_ZN11Screen1View7setGearEi+0xa4>)
 8009a82:	441a      	add	r2, r3
 8009a84:	f107 030c 	add.w	r3, r7, #12
 8009a88:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff fe07 	bl	80096a0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009a92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fb76 	bl	8008188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009a9c:	bf00      	nop
 8009a9e:	3798      	adds	r7, #152	; 0x98
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	0802b3e0 	.word	0x0802b3e0
 8009aa8:	0802b3e4 	.word	0x0802b3e4
 8009aac:	0001f704 	.word	0x0001f704
 8009ab0:	0802b3c0 	.word	0x0802b3c0

08009ab4 <_Z41__static_initialization_and_destruction_0ii>:
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b092      	sub	sp, #72	; 0x48
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	f040 8114 	bne.w	8009cee <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009acc:	4293      	cmp	r3, r2
 8009ace:	f040 810e 	bne.w	8009cee <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ae4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009aec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009af0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009afc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	461a      	mov	r2, r3
 8009b04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009b08:	021b      	lsls	r3, r3, #8
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b10:	4313      	orrs	r3, r2
 8009b12:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009b16:	f107 0320 	add.w	r3, r7, #32
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fa fa97 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009b22:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009b24:	bf00      	nop
 8009b26:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009b28:	4b73      	ldr	r3, [pc, #460]	; (8009cf8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	23ff      	movs	r3, #255	; 0xff
 8009b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b32:	2300      	movs	r3, #0
 8009b34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b42:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009b46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009b52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009b56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b5a:	041b      	lsls	r3, r3, #16
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	431a      	orrs	r2, r3
 8009b66:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009b70:	f107 031c 	add.w	r3, r7, #28
 8009b74:	4611      	mov	r1, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fa fa6a 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009b7c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8009b7e:	bf00      	nop
 8009b80:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8009b82:	4b5e      	ldr	r3, [pc, #376]	; (8009cfc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	2300      	movs	r3, #0
 8009b88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009b8c:	23ff      	movs	r3, #255	; 0xff
 8009b8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009b92:	2300      	movs	r3, #0
 8009b94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009b9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ba0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009ba4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009bb0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009bb4:	041b      	lsls	r3, r3, #16
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009bbc:	021b      	lsls	r3, r3, #8
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009bca:	f107 0318 	add.w	r3, r7, #24
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fa fa3d 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009bd6:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009bd8:	bf00      	nop
 8009bda:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009bdc:	4b48      	ldr	r3, [pc, #288]	; (8009d00 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	2300      	movs	r3, #0
 8009be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009be6:	2300      	movs	r3, #0
 8009be8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009bec:	23ff      	movs	r3, #255	; 0xff
 8009bee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009bf2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009bf6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009bfa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009bfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009c02:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009c06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009c0a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009c0e:	041b      	lsls	r3, r3, #16
 8009c10:	461a      	mov	r2, r3
 8009c12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	4611      	mov	r1, r2
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fa fa10 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009c30:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8009c32:	bf00      	nop
 8009c34:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8009c36:	4b33      	ldr	r3, [pc, #204]	; (8009d04 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	23f7      	movs	r3, #247	; 0xf7
 8009c3c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8009c40:	234c      	movs	r3, #76	; 0x4c
 8009c42:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8009c46:	2302      	movs	r3, #2
 8009c48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009c4c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009c50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009c54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009c58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009c5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c60:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009c64:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009c68:	041b      	lsls	r3, r3, #16
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	431a      	orrs	r2, r3
 8009c74:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009c7e:	f107 0310 	add.w	r3, r7, #16
 8009c82:	4611      	mov	r1, r2
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fa f9e3 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009c8a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009c8c:	bf00      	nop
 8009c8e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009c90:	4b1d      	ldr	r3, [pc, #116]	; (8009d08 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	23f7      	movs	r3, #247	; 0xf7
 8009c96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009c9a:	23d2      	movs	r3, #210	; 0xd2
 8009c9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009ca6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009caa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8009cae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009cba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009cbe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009cc2:	041b      	lsls	r3, r3, #16
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cca:	021b      	lsls	r3, r3, #8
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009cd8:	f107 030c 	add.w	r3, r7, #12
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fa f9b6 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009ce6:	bf00      	nop
 8009ce8:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8009cea:	4b08      	ldr	r3, [pc, #32]	; (8009d0c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	bf00      	nop
 8009cf0:	3748      	adds	r7, #72	; 0x48
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20023954 	.word	0x20023954
 8009cfc:	20023958 	.word	0x20023958
 8009d00:	2002395c 	.word	0x2002395c
 8009d04:	20023960 	.word	0x20023960
 8009d08:	20023964 	.word	0x20023964
 8009d0c:	20023968 	.word	0x20023968

08009d10 <_GLOBAL__sub_I_EcuData>:
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009d18:	2001      	movs	r0, #1
 8009d1a:	f7ff fecb 	bl	8009ab4 <_Z41__static_initialization_and_destruction_0ii>
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>
#include <string.h>

alertBar::alertBar()
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fee8 	bl	8008b00 <_ZN12alertBarBaseC1Ev>
 8009d30:	4a0d      	ldr	r2, [pc, #52]	; (8009d68 <_ZN8alertBarC1Ev+0x48>)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a0c      	ldr	r2, [pc, #48]	; (8009d6c <_ZN8alertBarC1Ev+0x4c>)
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a0b      	ldr	r2, [pc, #44]	; (8009d70 <_ZN8alertBarC1Ev+0x50>)
 8009d44:	6812      	ldr	r2, [r2, #0]
 8009d46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a09      	ldr	r2, [pc, #36]	; (8009d74 <_ZN8alertBarC1Ev+0x54>)
 8009d4e:	6812      	ldr	r2, [r2, #0]
 8009d50:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a08      	ldr	r2, [pc, #32]	; (8009d78 <_ZN8alertBarC1Ev+0x58>)
 8009d58:	6812      	ldr	r2, [r2, #0]
 8009d5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
{
}
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4618      	mov	r0, r3
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	0802bd14 	.word	0x0802bd14
 8009d6c:	200239c0 	.word	0x200239c0
 8009d70:	200239c4 	.word	0x200239c4
 8009d74:	200239b8 	.word	0x200239b8
 8009d78:	200239c8 	.word	0x200239c8

08009d7c <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe ff96 	bl	8008cb8 <_ZN12alertBarBase10initializeEv>
    frontText.setWildcard(frontTextBuffer);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	33b0      	adds	r3, #176	; 0xb0
 8009d96:	4619      	mov	r1, r3
 8009d98:	4610      	mov	r0, r2
 8009d9a:	f7fc ffad 	bl	8006cf8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <_ZN8alertBar8setStateE9EBarState>:

void alertBar::setState(EBarState inState)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b06      	cmp	r3, #6
 8009db6:	d84d      	bhi.n	8009e54 <_ZN8alertBar8setStateE9EBarState+0xac>
 8009db8:	a201      	add	r2, pc, #4	; (adr r2, 8009dc0 <_ZN8alertBar8setStateE9EBarState+0x18>)
 8009dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbe:	bf00      	nop
 8009dc0:	08009ddd 	.word	0x08009ddd
 8009dc4:	08009df5 	.word	0x08009df5
 8009dc8:	08009e05 	.word	0x08009e05
 8009dcc:	08009e15 	.word	0x08009e15
 8009dd0:	08009e25 	.word	0x08009e25
 8009dd4:	08009e35 	.word	0x08009e35
 8009dd8:	08009e45 	.word	0x08009e45
    switch (inState)
    {
    case EBarState::Blank:
    	bgBox.setColor(colors::blue);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	332c      	adds	r3, #44	; 0x2c
 8009de0:	4a1f      	ldr	r2, [pc, #124]	; (8009e60 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 8009de2:	6811      	ldr	r1, [r2, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fc feeb 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	setText("");
 8009dea:	491e      	ldr	r1, [pc, #120]	; (8009e64 <_ZN8alertBar8setStateE9EBarState+0xbc>)
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f843 	bl	8009e78 <_ZN8alertBar7setTextEPKc>
    	break;
 8009df2:	e030      	b.n	8009e56 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Info:
        bgBox.setColor(colors::green);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	332c      	adds	r3, #44	; 0x2c
 8009df8:	4a1b      	ldr	r2, [pc, #108]	; (8009e68 <_ZN8alertBar8setStateE9EBarState+0xc0>)
 8009dfa:	6811      	ldr	r1, [r2, #0]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fc fedf 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009e02:	e028      	b.n	8009e56 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Warning:
        bgBox.setColor(colors::orange);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	332c      	adds	r3, #44	; 0x2c
 8009e08:	4a18      	ldr	r2, [pc, #96]	; (8009e6c <_ZN8alertBar8setStateE9EBarState+0xc4>)
 8009e0a:	6811      	ldr	r1, [r2, #0]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fc fed7 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009e12:	e020      	b.n	8009e56 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Fault:
        bgBox.setColor(colors::red);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	332c      	adds	r3, #44	; 0x2c
 8009e18:	4a15      	ldr	r2, [pc, #84]	; (8009e70 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 8009e1a:	6811      	ldr	r1, [r2, #0]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fc fecf 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009e22:	e018      	b.n	8009e56 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical1:
    	bgBox.setColor(colors::red);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	332c      	adds	r3, #44	; 0x2c
 8009e28:	4a11      	ldr	r2, [pc, #68]	; (8009e70 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 8009e2a:	6811      	ldr	r1, [r2, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fc fec7 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 8009e32:	e010      	b.n	8009e56 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical2:
    	bgBox.setColor(colors::yellow);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	332c      	adds	r3, #44	; 0x2c
 8009e38:	4a0e      	ldr	r2, [pc, #56]	; (8009e74 <_ZN8alertBar8setStateE9EBarState+0xcc>)
 8009e3a:	6811      	ldr	r1, [r2, #0]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fc febf 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 8009e42:	e008      	b.n	8009e56 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::News:
        bgBox.setColor(colors::blue);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	332c      	adds	r3, #44	; 0x2c
 8009e48:	4a05      	ldr	r2, [pc, #20]	; (8009e60 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 8009e4a:	6811      	ldr	r1, [r2, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fc feb7 	bl	8006bc0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009e52:	e000      	b.n	8009e56 <_ZN8alertBar8setStateE9EBarState+0xae>

    default:
        break;
 8009e54:	bf00      	nop
    }
}
 8009e56:	bf00      	nop
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	200239c0 	.word	0x200239c0
 8009e64:	0802b3e8 	.word	0x0802b3e8
 8009e68:	200239bc 	.word	0x200239bc
 8009e6c:	200239c4 	.word	0x200239c4
 8009e70:	200239b8 	.word	0x200239b8
 8009e74:	200239c8 	.word	0x200239c8

08009e78 <_ZN8alertBar7setTextEPKc>:

void alertBar::setText(const char inText[])
{
 8009e78:	b590      	push	{r4, r7, lr}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
    Unicode::snprintf(frontTextBuffer, strlen(inText) + 1, inText);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8009e88:	6838      	ldr	r0, [r7, #0]
 8009e8a:	f7f6 f9d9 	bl	8000240 <strlen>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	3301      	adds	r3, #1
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f011 ff94 	bl	801bdc8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    //frontText.resizeToCurrentText();
    frontText.invalidate();
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3360      	adds	r3, #96	; 0x60
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f00f ff0d 	bl	8019cc4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd90      	pop	{r4, r7, pc}
	...

08009eb4 <_Z41__static_initialization_and_destruction_0ii>:
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b092      	sub	sp, #72	; 0x48
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	f040 8114 	bne.w	800a0ee <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	f040 810e 	bne.w	800a0ee <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ee4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009ee8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009eec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ef0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ef8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009efc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f00:	041b      	lsls	r3, r3, #16
 8009f02:	461a      	mov	r2, r3
 8009f04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009f08:	021b      	lsls	r3, r3, #8
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f10:	4313      	orrs	r3, r2
 8009f12:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009f16:	f107 0320 	add.w	r3, r7, #32
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fa f897 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009f22:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009f24:	bf00      	nop
 8009f26:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009f28:	4b73      	ldr	r3, [pc, #460]	; (800a0f8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	23ff      	movs	r3, #255	; 0xff
 8009f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009f32:	2300      	movs	r3, #0
 8009f34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f42:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009f46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009f52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009f56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f5a:	041b      	lsls	r3, r3, #16
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	431a      	orrs	r2, r3
 8009f66:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009f70:	f107 031c 	add.w	r3, r7, #28
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fa f86a 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009f7c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8009f7e:	bf00      	nop
 8009f80:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8009f82:	4b5e      	ldr	r3, [pc, #376]	; (800a0fc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	2300      	movs	r3, #0
 8009f88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009f8c:	23ff      	movs	r3, #255	; 0xff
 8009f8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009f92:	2300      	movs	r3, #0
 8009f94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009f9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fa0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009fa4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009fb0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009fb4:	041b      	lsls	r3, r3, #16
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009fbc:	021b      	lsls	r3, r3, #8
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009fca:	f107 0318 	add.w	r3, r7, #24
 8009fce:	4611      	mov	r1, r2
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fa f83d 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 8009fd6:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009fd8:	bf00      	nop
 8009fda:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009fdc:	4b48      	ldr	r3, [pc, #288]	; (800a100 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009fec:	23ff      	movs	r3, #255	; 0xff
 8009fee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009ff2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009ff6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009ffa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009ffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a002:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a006:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a00a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a00e:	041b      	lsls	r3, r3, #16
 800a010:	461a      	mov	r2, r3
 800a012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a016:	021b      	lsls	r3, r3, #8
 800a018:	431a      	orrs	r2, r3
 800a01a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a01e:	4313      	orrs	r3, r2
 800a020:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a024:	f107 0314 	add.w	r3, r7, #20
 800a028:	4611      	mov	r1, r2
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fa f810 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a030:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800a032:	bf00      	nop
 800a034:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800a036:	4b33      	ldr	r3, [pc, #204]	; (800a104 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a038:	601a      	str	r2, [r3, #0]
 800a03a:	23f7      	movs	r3, #247	; 0xf7
 800a03c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a040:	234c      	movs	r3, #76	; 0x4c
 800a042:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a046:	2302      	movs	r3, #2
 800a048:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a04c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a050:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a054:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a058:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a05c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a060:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a064:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a068:	041b      	lsls	r3, r3, #16
 800a06a:	461a      	mov	r2, r3
 800a06c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a070:	021b      	lsls	r3, r3, #8
 800a072:	431a      	orrs	r2, r3
 800a074:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a078:	4313      	orrs	r3, r2
 800a07a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a07e:	f107 0310 	add.w	r3, r7, #16
 800a082:	4611      	mov	r1, r2
 800a084:	4618      	mov	r0, r3
 800a086:	f7f9 ffe3 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a08a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800a08c:	bf00      	nop
 800a08e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800a090:	4b1d      	ldr	r3, [pc, #116]	; (800a108 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	23f7      	movs	r3, #247	; 0xf7
 800a096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a09a:	23d2      	movs	r3, #210	; 0xd2
 800a09c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a0a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a0aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a0ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a0ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a0be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a0c2:	041b      	lsls	r3, r3, #16
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a0ca:	021b      	lsls	r3, r3, #8
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a0d8:	f107 030c 	add.w	r3, r7, #12
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7f9 ffb6 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a0e6:	bf00      	nop
 800a0e8:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a0ea:	4b08      	ldr	r3, [pc, #32]	; (800a10c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	bf00      	nop
 800a0f0:	3748      	adds	r7, #72	; 0x48
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	200239b4 	.word	0x200239b4
 800a0fc:	200239b8 	.word	0x200239b8
 800a100:	200239bc 	.word	0x200239bc
 800a104:	200239c0 	.word	0x200239c0
 800a108:	200239c4 	.word	0x200239c4
 800a10c:	200239c8 	.word	0x200239c8

0800a110 <_GLOBAL__sub_I__ZN8alertBarC2Ev>:
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
 800a114:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a118:	2001      	movs	r0, #1
 800a11a:	f7ff fecb 	bl	8009eb4 <_Z41__static_initialization_and_destruction_0ii>
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>
#include <cmath>

tempBox::tempBox()
 800a120:	b5b0      	push	{r4, r5, r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af02      	add	r7, sp, #8
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fdce 	bl	8008ccc <_ZN11tempBoxBaseC1Ev>
 800a130:	4a6a      	ldr	r2, [pc, #424]	; (800a2dc <_ZN7tempBoxC1Ev+0x1bc>)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	22dc      	movs	r2, #220	; 0xdc
 800a142:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800a14c:	24db      	movs	r4, #219	; 0xdb
 800a14e:	461d      	mov	r5, r3
 800a150:	2c00      	cmp	r4, #0
 800a152:	db05      	blt.n	800a160 <_ZN7tempBoxC1Ev+0x40>
 800a154:	4628      	mov	r0, r5
 800a156:	f00c fba5 	bl	80168a4 <_ZN8touchgfx4LineC1Ev>
 800a15a:	3574      	adds	r5, #116	; 0x74
 800a15c:	3c01      	subs	r4, #1
 800a15e:	e7f7      	b.n	800a150 <_ZN7tempBoxC1Ev+0x30>
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	f646 031c 	movw	r3, #26652	; 0x681c
 800a166:	4413      	add	r3, r2
 800a168:	24db      	movs	r4, #219	; 0xdb
 800a16a:	461d      	mov	r5, r3
 800a16c:	2c00      	cmp	r4, #0
 800a16e:	db0c      	blt.n	800a18a <_ZN7tempBoxC1Ev+0x6a>
 800a170:	f107 0308 	add.w	r3, r7, #8
 800a174:	2100      	movs	r1, #0
 800a176:	4618      	mov	r0, r3
 800a178:	f7f9 ff6a 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a17c:	68b9      	ldr	r1, [r7, #8]
 800a17e:	4628      	mov	r0, r5
 800a180:	f7fc fed2 	bl	8006f28 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800a184:	3518      	adds	r5, #24
 800a186:	3c01      	subs	r4, #1
 800a188:	e7f0      	b.n	800a16c <_ZN7tempBoxC1Ev+0x4c>
{
    for(int i=0; i < 220; i++)
 800a18a:	2300      	movs	r3, #0
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2bdb      	cmp	r3, #219	; 0xdb
 800a192:	f300 809e 	bgt.w	800a2d2 <_ZN7tempBoxC1Ev+0x1b2>
    {
        lines[i].setPosition(0,0,220,60);
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2274      	movs	r2, #116	; 0x74
 800a19a:	fb02 f303 	mul.w	r3, r2, r3
 800a19e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	1d18      	adds	r0, r3, #4
 800a1a8:	233c      	movs	r3, #60	; 0x3c
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	23dc      	movs	r3, #220	; 0xdc
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	f7fc fb82 	bl	80068ba <_ZN8touchgfx8Drawable11setPositionEssss>
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB(10 ,255, 0));
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	4413      	add	r3, r2
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	f646 0218 	movw	r2, #26648	; 0x6818
 800a1c4:	441a      	add	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	1d1c      	adds	r4, r3, #4
 800a1cc:	230a      	movs	r3, #10
 800a1ce:	74fb      	strb	r3, [r7, #19]
 800a1d0:	23ff      	movs	r3, #255	; 0xff
 800a1d2:	74bb      	strb	r3, [r7, #18]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	747b      	strb	r3, [r7, #17]
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a1d8:	7cfb      	ldrb	r3, [r7, #19]
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	461a      	mov	r2, r3
 800a1de:	7cbb      	ldrb	r3, [r7, #18]
 800a1e0:	021b      	lsls	r3, r3, #8
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	7c7b      	ldrb	r3, [r7, #17]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a1ec:	f107 030c 	add.w	r3, r7, #12
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f9 ff2c 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7fc feb3 	bl	8006f68 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        lines[i].setPainter(linesPainter[i]);
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2274      	movs	r2, #116	; 0x74
 800a206:	fb02 f303 	mul.w	r3, r2, r3
 800a20a:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	4413      	add	r3, r2
 800a212:	1d18      	adds	r0, r3, #4
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2174      	movs	r1, #116	; 0x74
 800a21a:	fb01 f303 	mul.w	r3, r1, r3
 800a21e:	4413      	add	r3, r2
 800a220:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	335c      	adds	r3, #92	; 0x5c
 800a228:	681c      	ldr	r4, [r3, #0]
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	4613      	mov	r3, r2
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	4413      	add	r3, r2
 800a232:	00db      	lsls	r3, r3, #3
 800a234:	f646 0218 	movw	r2, #26648	; 0x6818
 800a238:	441a      	add	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4413      	add	r3, r2
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	47a0      	blx	r4
        lines[i].setStart(i,0);
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2274      	movs	r2, #116	; 0x74
 800a248:	fb02 f303 	mul.w	r3, r2, r3
 800a24c:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	4413      	add	r3, r2
 800a254:	3304      	adds	r3, #4
 800a256:	2200      	movs	r2, #0
 800a258:	6979      	ldr	r1, [r7, #20]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fd fd7a 	bl	8007d54 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
        lines[i].setEnd(i,60);
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2274      	movs	r2, #116	; 0x74
 800a264:	fb02 f303 	mul.w	r3, r2, r3
 800a268:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	4413      	add	r3, r2
 800a270:	3304      	adds	r3, #4
 800a272:	223c      	movs	r2, #60	; 0x3c
 800a274:	6979      	ldr	r1, [r7, #20]
 800a276:	4618      	mov	r0, r3
 800a278:	f7fd fd92 	bl	8007da0 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
        lines[i].setLineWidth(1);
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2274      	movs	r2, #116	; 0x74
 800a280:	fb02 f303 	mul.w	r3, r2, r3
 800a284:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	4413      	add	r3, r2
 800a28c:	3304      	adds	r3, #4
 800a28e:	2101      	movs	r1, #1
 800a290:	4618      	mov	r0, r3
 800a292:	f7fd fdab 	bl	8007dec <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
        lines[i].setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2274      	movs	r2, #116	; 0x74
 800a29a:	fb02 f303 	mul.w	r3, r2, r3
 800a29e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f00c fc40 	bl	8016b30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
        add(lines[i]);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2274      	movs	r2, #116	; 0x74
 800a2b6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ba:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	f00a fef9 	bl	80150bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for(int i=0; i < 220; i++)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	e75d      	b.n	800a18e <_ZN7tempBoxC1Ev+0x6e>
    }

}
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bdb0      	pop	{r4, r5, r7, pc}
 800a2dc:	0802bda0 	.word	0x0802bda0

0800a2e0 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe fdce 	bl	8008e8c <_ZN11tempBoxBase10initializeEv>
    tempValues[0] = 25;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2219      	movs	r2, #25
 800a2f4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    tempValues[1] = 25;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2219      	movs	r2, #25
 800a2fc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tempValues[2] = 25;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2219      	movs	r2, #25
 800a304:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    tempValues[3] = 25;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2219      	movs	r2, #25
 800a30c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    tempValues[4] = 25;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2219      	movs	r2, #25
 800a314:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    tempValues[5]= 25;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2219      	movs	r2, #25
 800a31c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    numberOfValues = 5;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2205      	movs	r2, #5
 800a324:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <_Z41__static_initialization_and_destruction_0ii>:
        float endValue = lerp(tempValues[kFloor], tempValues[kCeil], alpha);
        
        const colortype tempColor = mapTemp(endValue);
        linesPainter[i].setColor(tempColor);
    }
}
 800a330:	b580      	push	{r7, lr}
 800a332:	b092      	sub	sp, #72	; 0x48
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	f040 8114 	bne.w	800a56a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a348:	4293      	cmp	r3, r2
 800a34a:	f040 810e 	bne.w	800a56a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a34e:	2300      	movs	r3, #0
 800a350:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a354:	2300      	movs	r3, #0
 800a356:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a35a:	2300      	movs	r3, #0
 800a35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a360:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a364:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a368:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a36c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a374:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800a378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a37c:	041b      	lsls	r3, r3, #16
 800a37e:	461a      	mov	r2, r3
 800a380:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a384:	021b      	lsls	r3, r3, #8
 800a386:	431a      	orrs	r2, r3
 800a388:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a38c:	4313      	orrs	r3, r2
 800a38e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a392:	f107 0320 	add.w	r3, r7, #32
 800a396:	4611      	mov	r1, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f7f9 fe59 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a39e:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800a3a0:	bf00      	nop
 800a3a2:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800a3a4:	4b73      	ldr	r3, [pc, #460]	; (800a574 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	23ff      	movs	r3, #255	; 0xff
 800a3aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800a3ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a3c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a3ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a3d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a3d6:	041b      	lsls	r3, r3, #16
 800a3d8:	461a      	mov	r2, r3
 800a3da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a3de:	021b      	lsls	r3, r3, #8
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a3ec:	f107 031c 	add.w	r3, r7, #28
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7f9 fe2c 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a3f8:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800a3fa:	bf00      	nop
 800a3fc:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800a3fe:	4b5e      	ldr	r3, [pc, #376]	; (800a578 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	2300      	movs	r3, #0
 800a404:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a408:	23ff      	movs	r3, #255	; 0xff
 800a40a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a40e:	2300      	movs	r3, #0
 800a410:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a414:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a418:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a41c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a420:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800a424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a428:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a42c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a430:	041b      	lsls	r3, r3, #16
 800a432:	461a      	mov	r2, r3
 800a434:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a438:	021b      	lsls	r3, r3, #8
 800a43a:	431a      	orrs	r2, r3
 800a43c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a440:	4313      	orrs	r3, r2
 800a442:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a446:	f107 0318 	add.w	r3, r7, #24
 800a44a:	4611      	mov	r1, r2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7f9 fdff 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a452:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800a454:	bf00      	nop
 800a456:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800a458:	4b48      	ldr	r3, [pc, #288]	; (800a57c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	2300      	movs	r3, #0
 800a45e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a462:	2300      	movs	r3, #0
 800a464:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a468:	23ff      	movs	r3, #255	; 0xff
 800a46a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a46e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a472:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a476:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a47a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a47e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a482:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a486:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a48a:	041b      	lsls	r3, r3, #16
 800a48c:	461a      	mov	r2, r3
 800a48e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a492:	021b      	lsls	r3, r3, #8
 800a494:	431a      	orrs	r2, r3
 800a496:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a49a:	4313      	orrs	r3, r2
 800a49c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a4a0:	f107 0314 	add.w	r3, r7, #20
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7f9 fdd2 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a4ac:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800a4ae:	bf00      	nop
 800a4b0:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800a4b2:	4b33      	ldr	r3, [pc, #204]	; (800a580 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	23f7      	movs	r3, #247	; 0xf7
 800a4b8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a4bc:	234c      	movs	r3, #76	; 0x4c
 800a4be:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a4c8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a4cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a4d0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a4d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a4d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4dc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a4e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a4e4:	041b      	lsls	r3, r3, #16
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a4fa:	f107 0310 	add.w	r3, r7, #16
 800a4fe:	4611      	mov	r1, r2
 800a500:	4618      	mov	r0, r3
 800a502:	f7f9 fda5 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a506:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800a508:	bf00      	nop
 800a50a:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800a50c:	4b1d      	ldr	r3, [pc, #116]	; (800a584 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	23f7      	movs	r3, #247	; 0xf7
 800a512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a516:	23d2      	movs	r3, #210	; 0xd2
 800a518:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a51c:	2302      	movs	r3, #2
 800a51e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a522:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a526:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a52a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a532:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a536:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a53a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a53e:	041b      	lsls	r3, r3, #16
 800a540:	461a      	mov	r2, r3
 800a542:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	431a      	orrs	r2, r3
 800a54a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a54e:	4313      	orrs	r3, r2
 800a550:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a554:	f107 030c 	add.w	r3, r7, #12
 800a558:	4611      	mov	r1, r2
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7f9 fd78 	bl	8004050 <_ZN8touchgfx9colortypeC1Em>
 800a560:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a562:	bf00      	nop
 800a564:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a566:	4b08      	ldr	r3, [pc, #32]	; (800a588 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	bf00      	nop
 800a56c:	3748      	adds	r7, #72	; 0x48
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	200239cc 	.word	0x200239cc
 800a578:	200239d0 	.word	0x200239d0
 800a57c:	200239d4 	.word	0x200239d4
 800a580:	200239d8 	.word	0x200239d8
 800a584:	200239dc 	.word	0x200239dc
 800a588:	200239e0 	.word	0x200239e0

0800a58c <_GLOBAL__sub_I__ZN7tempBoxC2Ev>:
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
 800a590:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a594:	2001      	movs	r0, #1
 800a596:	f7ff fecb 	bl	800a330 <_Z41__static_initialization_and_destruction_0ii>
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a59c:	b480      	push	{r7}
 800a59e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a5a0:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <SystemInit+0x20>)
 800a5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a6:	4a05      	ldr	r2, [pc, #20]	; (800a5bc <SystemInit+0x20>)
 800a5a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a5b0:	bf00      	nop
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	e000ed00 	.word	0xe000ed00

0800a5c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a5c4:	2003      	movs	r0, #3
 800a5c6:	f001 faa0 	bl	800bb0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a5ca:	200f      	movs	r0, #15
 800a5cc:	f7f8 fa52 	bl	8002a74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800a5d0:	f7f8 fa28 	bl	8002a24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a5e0:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <HAL_IncTick+0x20>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	4b06      	ldr	r3, [pc, #24]	; (800a600 <HAL_IncTick+0x24>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	4a04      	ldr	r2, [pc, #16]	; (800a600 <HAL_IncTick+0x24>)
 800a5ee:	6013      	str	r3, [r2, #0]
}
 800a5f0:	bf00      	nop
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	2000001c 	.word	0x2000001c
 800a600:	200570b0 	.word	0x200570b0

0800a604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a604:	b480      	push	{r7}
 800a606:	af00      	add	r7, sp, #0
  return uwTick;
 800a608:	4b03      	ldr	r3, [pc, #12]	; (800a618 <HAL_GetTick+0x14>)
 800a60a:	681b      	ldr	r3, [r3, #0]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	200570b0 	.word	0x200570b0

0800a61c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a624:	f7ff ffee 	bl	800a604 <HAL_GetTick>
 800a628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a634:	d005      	beq.n	800a642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a636:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <HAL_Delay+0x44>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a642:	bf00      	nop
 800a644:	f7ff ffde 	bl	800a604 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	429a      	cmp	r2, r3
 800a652:	d8f7      	bhi.n	800a644 <HAL_Delay+0x28>
  {
  }
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	2000001c 	.word	0x2000001c

0800a664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e031      	b.n	800a6de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d109      	bne.n	800a696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7f6 fd24 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	f003 0310 	and.w	r3, r3, #16
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d116      	bne.n	800a6d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6a6:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <HAL_ADC_Init+0x84>)
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	f043 0202 	orr.w	r2, r3, #2
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 faca 	bl	800ac4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	f023 0303 	bic.w	r3, r3, #3
 800a6c6:	f043 0201 	orr.w	r2, r3, #1
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	641a      	str	r2, [r3, #64]	; 0x40
 800a6ce:	e001      	b.n	800a6d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	ffffeefd 	.word	0xffffeefd

0800a6ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d101      	bne.n	800a706 <HAL_ADC_Start+0x1a>
 800a702:	2302      	movs	r3, #2
 800a704:	e0ad      	b.n	800a862 <HAL_ADC_Start+0x176>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d018      	beq.n	800a74e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f042 0201 	orr.w	r2, r2, #1
 800a72a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800a72c:	4b50      	ldr	r3, [pc, #320]	; (800a870 <HAL_ADC_Start+0x184>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a50      	ldr	r2, [pc, #320]	; (800a874 <HAL_ADC_Start+0x188>)
 800a732:	fba2 2303 	umull	r2, r3, r2, r3
 800a736:	0c9a      	lsrs	r2, r3, #18
 800a738:	4613      	mov	r3, r2
 800a73a:	005b      	lsls	r3, r3, #1
 800a73c:	4413      	add	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a740:	e002      	b.n	800a748 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3b01      	subs	r3, #1
 800a746:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f9      	bne.n	800a742 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d175      	bne.n	800a848 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a760:	4b45      	ldr	r3, [pc, #276]	; (800a878 <HAL_ADC_Start+0x18c>)
 800a762:	4013      	ands	r3, r2
 800a764:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a776:	2b00      	cmp	r3, #0
 800a778:	d007      	beq.n	800a78a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a782:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a796:	d106      	bne.n	800a7a6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a79c:	f023 0206 	bic.w	r2, r3, #6
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	645a      	str	r2, [r3, #68]	; 0x44
 800a7a4:	e002      	b.n	800a7ac <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a7bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800a7be:	4b2f      	ldr	r3, [pc, #188]	; (800a87c <HAL_ADC_Start+0x190>)
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f003 031f 	and.w	r3, r3, #31
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10f      	bne.n	800a7ea <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d143      	bne.n	800a860 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a7e6:	609a      	str	r2, [r3, #8]
 800a7e8:	e03a      	b.n	800a860 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a24      	ldr	r2, [pc, #144]	; (800a880 <HAL_ADC_Start+0x194>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d10e      	bne.n	800a812 <HAL_ADC_Start+0x126>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d107      	bne.n	800a812 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689a      	ldr	r2, [r3, #8]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a810:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800a812:	4b1a      	ldr	r3, [pc, #104]	; (800a87c <HAL_ADC_Start+0x190>)
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f003 0310 	and.w	r3, r3, #16
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d120      	bne.n	800a860 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a18      	ldr	r2, [pc, #96]	; (800a884 <HAL_ADC_Start+0x198>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d11b      	bne.n	800a860 <HAL_ADC_Start+0x174>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d114      	bne.n	800a860 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	689a      	ldr	r2, [r3, #8]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a844:	609a      	str	r2, [r3, #8]
 800a846:	e00b      	b.n	800a860 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84c:	f043 0210 	orr.w	r2, r3, #16
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a858:	f043 0201 	orr.w	r2, r3, #1
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	20000014 	.word	0x20000014
 800a874:	431bde83 	.word	0x431bde83
 800a878:	fffff8fe 	.word	0xfffff8fe
 800a87c:	40012300 	.word	0x40012300
 800a880:	40012000 	.word	0x40012000
 800a884:	40012200 	.word	0x40012200

0800a888 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8a4:	d113      	bne.n	800a8ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a8b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b4:	d10b      	bne.n	800a8ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ba:	f043 0220 	orr.w	r2, r3, #32
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e063      	b.n	800a996 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a8ce:	f7ff fe99 	bl	800a604 <HAL_GetTick>
 800a8d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a8d4:	e021      	b.n	800a91a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8dc:	d01d      	beq.n	800a91a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d007      	beq.n	800a8f4 <HAL_ADC_PollForConversion+0x6c>
 800a8e4:	f7ff fe8e 	bl	800a604 <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d212      	bcs.n	800a91a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0302 	and.w	r3, r3, #2
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d00b      	beq.n	800a91a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a906:	f043 0204 	orr.w	r2, r3, #4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e03d      	b.n	800a996 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0302 	and.w	r3, r3, #2
 800a924:	2b02      	cmp	r3, #2
 800a926:	d1d6      	bne.n	800a8d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f06f 0212 	mvn.w	r2, #18
 800a930:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a936:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d123      	bne.n	800a994 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a950:	2b00      	cmp	r3, #0
 800a952:	d11f      	bne.n	800a994 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d006      	beq.n	800a970 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d111      	bne.n	800a994 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a974:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d105      	bne.n	800a994 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98c:	f043 0201 	orr.w	r2, r3, #1
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d101      	bne.n	800a9d4 <HAL_ADC_ConfigChannel+0x1c>
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	e12a      	b.n	800ac2a <HAL_ADC_ConfigChannel+0x272>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b09      	cmp	r3, #9
 800a9e2:	d93a      	bls.n	800aa5a <HAL_ADC_ConfigChannel+0xa2>
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9ec:	d035      	beq.n	800aa5a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68d9      	ldr	r1, [r3, #12]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	4413      	add	r3, r2
 800aa02:	3b1e      	subs	r3, #30
 800aa04:	2207      	movs	r2, #7
 800aa06:	fa02 f303 	lsl.w	r3, r2, r3
 800aa0a:	43da      	mvns	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	400a      	ands	r2, r1
 800aa12:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a87      	ldr	r2, [pc, #540]	; (800ac38 <HAL_ADC_ConfigChannel+0x280>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d10a      	bne.n	800aa34 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68d9      	ldr	r1, [r3, #12]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	061a      	lsls	r2, r3, #24
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800aa32:	e035      	b.n	800aaa0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68d9      	ldr	r1, [r3, #12]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	689a      	ldr	r2, [r3, #8]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	4618      	mov	r0, r3
 800aa46:	4603      	mov	r3, r0
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	4403      	add	r3, r0
 800aa4c:	3b1e      	subs	r3, #30
 800aa4e:	409a      	lsls	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800aa58:	e022      	b.n	800aaa0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6919      	ldr	r1, [r3, #16]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	461a      	mov	r2, r3
 800aa68:	4613      	mov	r3, r2
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	4413      	add	r3, r2
 800aa6e:	2207      	movs	r2, #7
 800aa70:	fa02 f303 	lsl.w	r3, r2, r3
 800aa74:	43da      	mvns	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	400a      	ands	r2, r1
 800aa7c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	6919      	ldr	r1, [r3, #16]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	689a      	ldr	r2, [r3, #8]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	4618      	mov	r0, r3
 800aa90:	4603      	mov	r3, r0
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	4403      	add	r3, r0
 800aa96:	409a      	lsls	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	2b06      	cmp	r3, #6
 800aaa6:	d824      	bhi.n	800aaf2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	4613      	mov	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	3b05      	subs	r3, #5
 800aaba:	221f      	movs	r2, #31
 800aabc:	fa02 f303 	lsl.w	r3, r2, r3
 800aac0:	43da      	mvns	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	400a      	ands	r2, r1
 800aac8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	4618      	mov	r0, r3
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	4613      	mov	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	3b05      	subs	r3, #5
 800aae4:	fa00 f203 	lsl.w	r2, r0, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	430a      	orrs	r2, r1
 800aaee:	635a      	str	r2, [r3, #52]	; 0x34
 800aaf0:	e04c      	b.n	800ab8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	2b0c      	cmp	r3, #12
 800aaf8:	d824      	bhi.n	800ab44 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	685a      	ldr	r2, [r3, #4]
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	3b23      	subs	r3, #35	; 0x23
 800ab0c:	221f      	movs	r2, #31
 800ab0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab12:	43da      	mvns	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	400a      	ands	r2, r1
 800ab1a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	4618      	mov	r0, r3
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	3b23      	subs	r3, #35	; 0x23
 800ab36:	fa00 f203 	lsl.w	r2, r0, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	430a      	orrs	r2, r1
 800ab40:	631a      	str	r2, [r3, #48]	; 0x30
 800ab42:	e023      	b.n	800ab8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	3b41      	subs	r3, #65	; 0x41
 800ab56:	221f      	movs	r2, #31
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	43da      	mvns	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	400a      	ands	r2, r1
 800ab64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	4618      	mov	r0, r3
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	685a      	ldr	r2, [r3, #4]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	4413      	add	r3, r2
 800ab7e:	3b41      	subs	r3, #65	; 0x41
 800ab80:	fa00 f203 	lsl.w	r2, r0, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a2a      	ldr	r2, [pc, #168]	; (800ac3c <HAL_ADC_ConfigChannel+0x284>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d10a      	bne.n	800abac <HAL_ADC_ConfigChannel+0x1f4>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab9e:	d105      	bne.n	800abac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800aba0:	4b27      	ldr	r3, [pc, #156]	; (800ac40 <HAL_ADC_ConfigChannel+0x288>)
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	4a26      	ldr	r2, [pc, #152]	; (800ac40 <HAL_ADC_ConfigChannel+0x288>)
 800aba6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800abaa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a22      	ldr	r2, [pc, #136]	; (800ac3c <HAL_ADC_ConfigChannel+0x284>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d109      	bne.n	800abca <HAL_ADC_ConfigChannel+0x212>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b12      	cmp	r3, #18
 800abbc:	d105      	bne.n	800abca <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800abbe:	4b20      	ldr	r3, [pc, #128]	; (800ac40 <HAL_ADC_ConfigChannel+0x288>)
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	4a1f      	ldr	r2, [pc, #124]	; (800ac40 <HAL_ADC_ConfigChannel+0x288>)
 800abc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800abc8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a1b      	ldr	r2, [pc, #108]	; (800ac3c <HAL_ADC_ConfigChannel+0x284>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d125      	bne.n	800ac20 <HAL_ADC_ConfigChannel+0x268>
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <HAL_ADC_ConfigChannel+0x280>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d003      	beq.n	800abe6 <HAL_ADC_ConfigChannel+0x22e>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b11      	cmp	r3, #17
 800abe4:	d11c      	bne.n	800ac20 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800abe6:	4b16      	ldr	r3, [pc, #88]	; (800ac40 <HAL_ADC_ConfigChannel+0x288>)
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	4a15      	ldr	r2, [pc, #84]	; (800ac40 <HAL_ADC_ConfigChannel+0x288>)
 800abec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800abf0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a10      	ldr	r2, [pc, #64]	; (800ac38 <HAL_ADC_ConfigChannel+0x280>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d111      	bne.n	800ac20 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800abfc:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <HAL_ADC_ConfigChannel+0x28c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a11      	ldr	r2, [pc, #68]	; (800ac48 <HAL_ADC_ConfigChannel+0x290>)
 800ac02:	fba2 2303 	umull	r2, r3, r2, r3
 800ac06:	0c9a      	lsrs	r2, r3, #18
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ac12:	e002      	b.n	800ac1a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1f9      	bne.n	800ac14 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	10000012 	.word	0x10000012
 800ac3c:	40012000 	.word	0x40012000
 800ac40:	40012300 	.word	0x40012300
 800ac44:	20000014 	.word	0x20000014
 800ac48:	431bde83 	.word	0x431bde83

0800ac4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800ac54:	4b78      	ldr	r3, [pc, #480]	; (800ae38 <ADC_Init+0x1ec>)
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	4a77      	ldr	r2, [pc, #476]	; (800ae38 <ADC_Init+0x1ec>)
 800ac5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ac5e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800ac60:	4b75      	ldr	r3, [pc, #468]	; (800ae38 <ADC_Init+0x1ec>)
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	4973      	ldr	r1, [pc, #460]	; (800ae38 <ADC_Init+0x1ec>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	6859      	ldr	r1, [r3, #4]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	021a      	lsls	r2, r3, #8
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800aca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6859      	ldr	r1, [r3, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689a      	ldr	r2, [r3, #8]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689a      	ldr	r2, [r3, #8]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6899      	ldr	r1, [r3, #8]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68da      	ldr	r2, [r3, #12]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	430a      	orrs	r2, r1
 800acd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acda:	4a58      	ldr	r2, [pc, #352]	; (800ae3c <ADC_Init+0x1f0>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d022      	beq.n	800ad26 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689a      	ldr	r2, [r3, #8]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800acee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6899      	ldr	r1, [r3, #8]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689a      	ldr	r2, [r3, #8]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ad10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6899      	ldr	r1, [r3, #8]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	609a      	str	r2, [r3, #8]
 800ad24:	e00f      	b.n	800ad46 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	689a      	ldr	r2, [r3, #8]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ad34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	689a      	ldr	r2, [r3, #8]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ad44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	689a      	ldr	r2, [r3, #8]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f022 0202 	bic.w	r2, r2, #2
 800ad54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6899      	ldr	r1, [r3, #8]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	005a      	lsls	r2, r3, #1
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d01b      	beq.n	800adac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ad92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6859      	ldr	r1, [r3, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	035a      	lsls	r2, r3, #13
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	605a      	str	r2, [r3, #4]
 800adaa:	e007      	b.n	800adbc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800adba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800adca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	69db      	ldr	r3, [r3, #28]
 800add6:	3b01      	subs	r3, #1
 800add8:	051a      	lsls	r2, r3, #20
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689a      	ldr	r2, [r3, #8]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800adf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6899      	ldr	r1, [r3, #8]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800adfe:	025a      	lsls	r2, r3, #9
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	430a      	orrs	r2, r1
 800ae06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689a      	ldr	r2, [r3, #8]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6899      	ldr	r1, [r3, #8]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	029a      	lsls	r2, r3, #10
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	609a      	str	r2, [r3, #8]
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	40012300 	.word	0x40012300
 800ae3c:	0f000001 	.word	0x0f000001

0800ae40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e0ed      	b.n	800b02e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d102      	bne.n	800ae64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7f6 fbe8 	bl	8001634 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 0202 	bic.w	r2, r2, #2
 800ae72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae74:	f7ff fbc6 	bl	800a604 <HAL_GetTick>
 800ae78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ae7a:	e012      	b.n	800aea2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ae7c:	f7ff fbc2 	bl	800a604 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b0a      	cmp	r3, #10
 800ae88:	d90b      	bls.n	800aea2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2205      	movs	r2, #5
 800ae9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e0c5      	b.n	800b02e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	f003 0302 	and.w	r3, r3, #2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1e5      	bne.n	800ae7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f042 0201 	orr.w	r2, r2, #1
 800aebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aec0:	f7ff fba0 	bl	800a604 <HAL_GetTick>
 800aec4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800aec6:	e012      	b.n	800aeee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800aec8:	f7ff fb9c 	bl	800a604 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	2b0a      	cmp	r3, #10
 800aed4:	d90b      	bls.n	800aeee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2205      	movs	r2, #5
 800aee6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e09f      	b.n	800b02e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d0e5      	beq.n	800aec8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	7e1b      	ldrb	r3, [r3, #24]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d108      	bne.n	800af16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	e007      	b.n	800af26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	7e5b      	ldrb	r3, [r3, #25]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d108      	bne.n	800af40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af3c:	601a      	str	r2, [r3, #0]
 800af3e:	e007      	b.n	800af50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	7e9b      	ldrb	r3, [r3, #26]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d108      	bne.n	800af6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f042 0220 	orr.w	r2, r2, #32
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	e007      	b.n	800af7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f022 0220 	bic.w	r2, r2, #32
 800af78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	7edb      	ldrb	r3, [r3, #27]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d108      	bne.n	800af94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f022 0210 	bic.w	r2, r2, #16
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	e007      	b.n	800afa4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f042 0210 	orr.w	r2, r2, #16
 800afa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	7f1b      	ldrb	r3, [r3, #28]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d108      	bne.n	800afbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f042 0208 	orr.w	r2, r2, #8
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	e007      	b.n	800afce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0208 	bic.w	r2, r2, #8
 800afcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	7f5b      	ldrb	r3, [r3, #29]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d108      	bne.n	800afe8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f042 0204 	orr.w	r2, r2, #4
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	e007      	b.n	800aff8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f022 0204 	bic.w	r2, r2, #4
 800aff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689a      	ldr	r2, [r3, #8]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	431a      	orrs	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	431a      	orrs	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	ea42 0103 	orr.w	r1, r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	1e5a      	subs	r2, r3, #1
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	430a      	orrs	r2, r1
 800b01c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b04e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b050:	7cfb      	ldrb	r3, [r7, #19]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d003      	beq.n	800b05e <HAL_CAN_ConfigFilter+0x26>
 800b056:	7cfb      	ldrb	r3, [r7, #19]
 800b058:	2b02      	cmp	r3, #2
 800b05a:	f040 80c7 	bne.w	800b1ec <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a69      	ldr	r2, [pc, #420]	; (800b208 <HAL_CAN_ConfigFilter+0x1d0>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d001      	beq.n	800b06c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800b068:	4b68      	ldr	r3, [pc, #416]	; (800b20c <HAL_CAN_ConfigFilter+0x1d4>)
 800b06a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b072:	f043 0201 	orr.w	r2, r3, #1
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	4a63      	ldr	r2, [pc, #396]	; (800b20c <HAL_CAN_ConfigFilter+0x1d4>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d111      	bne.n	800b0a8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b08a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09e:	021b      	lsls	r3, r3, #8
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	f003 031f 	and.w	r3, r3, #31
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	43db      	mvns	r3, r3
 800b0c2:	401a      	ands	r2, r3
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	69db      	ldr	r3, [r3, #28]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d123      	bne.n	800b11a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	43db      	mvns	r3, r3
 800b0dc:	401a      	ands	r2, r3
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b0f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	3248      	adds	r2, #72	; 0x48
 800b0fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b10e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b110:	6979      	ldr	r1, [r7, #20]
 800b112:	3348      	adds	r3, #72	; 0x48
 800b114:	00db      	lsls	r3, r3, #3
 800b116:	440b      	add	r3, r1
 800b118:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d122      	bne.n	800b168 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	431a      	orrs	r2, r3
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b142:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	3248      	adds	r2, #72	; 0x48
 800b148:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b15c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b15e:	6979      	ldr	r1, [r7, #20]
 800b160:	3348      	adds	r3, #72	; 0x48
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	440b      	add	r3, r1
 800b166:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d109      	bne.n	800b184 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	43db      	mvns	r3, r3
 800b17a:	401a      	ands	r2, r3
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b182:	e007      	b.n	800b194 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	431a      	orrs	r2, r3
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d109      	bne.n	800b1b0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	43db      	mvns	r3, r3
 800b1a6:	401a      	ands	r2, r3
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b1ae:	e007      	b.n	800b1c0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	6a1b      	ldr	r3, [r3, #32]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d107      	bne.n	800b1d8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b1de:	f023 0201 	bic.w	r2, r3, #1
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	e006      	b.n	800b1fa <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
  }
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	371c      	adds	r7, #28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	40003400 	.word	0x40003400
 800b20c:	40006400 	.word	0x40006400

0800b210 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b01      	cmp	r3, #1
 800b222:	d12e      	bne.n	800b282 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2202      	movs	r2, #2
 800b228:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f022 0201 	bic.w	r2, r2, #1
 800b23a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b23c:	f7ff f9e2 	bl	800a604 <HAL_GetTick>
 800b240:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b242:	e012      	b.n	800b26a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b244:	f7ff f9de 	bl	800a604 <HAL_GetTick>
 800b248:	4602      	mov	r2, r0
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	2b0a      	cmp	r3, #10
 800b250:	d90b      	bls.n	800b26a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2205      	movs	r2, #5
 800b262:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e012      	b.n	800b290 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e5      	bne.n	800b244 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	e006      	b.n	800b290 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
  }
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b298:	b480      	push	{r7}
 800b29a:	b087      	sub	sp, #28
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d003      	beq.n	800b2bc <HAL_CAN_GetRxMessage+0x24>
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	f040 80f3 	bne.w	800b4a2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10e      	bne.n	800b2e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	f003 0303 	and.w	r3, r3, #3
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d116      	bne.n	800b2fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e0e7      	b.n	800b4b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	f003 0303 	and.w	r3, r3, #3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d107      	bne.n	800b2fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e0d8      	b.n	800b4b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	331b      	adds	r3, #27
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	4413      	add	r3, r2
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0204 	and.w	r2, r3, #4
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10c      	bne.n	800b336 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	331b      	adds	r3, #27
 800b324:	011b      	lsls	r3, r3, #4
 800b326:	4413      	add	r3, r2
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	0d5b      	lsrs	r3, r3, #21
 800b32c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	e00b      	b.n	800b34e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	331b      	adds	r3, #27
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	4413      	add	r3, r2
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	08db      	lsrs	r3, r3, #3
 800b346:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	331b      	adds	r3, #27
 800b356:	011b      	lsls	r3, r3, #4
 800b358:	4413      	add	r3, r2
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f003 0202 	and.w	r2, r3, #2
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	331b      	adds	r3, #27
 800b36c:	011b      	lsls	r3, r3, #4
 800b36e:	4413      	add	r3, r2
 800b370:	3304      	adds	r3, #4
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 020f 	and.w	r2, r3, #15
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	331b      	adds	r3, #27
 800b384:	011b      	lsls	r3, r3, #4
 800b386:	4413      	add	r3, r2
 800b388:	3304      	adds	r3, #4
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	0a1b      	lsrs	r3, r3, #8
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	331b      	adds	r3, #27
 800b39c:	011b      	lsls	r3, r3, #4
 800b39e:	4413      	add	r3, r2
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	0c1b      	lsrs	r3, r3, #16
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	011b      	lsls	r3, r3, #4
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	b2da      	uxtb	r2, r3
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	0a1a      	lsrs	r2, r3, #8
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	b2d2      	uxtb	r2, r2
 800b3da:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	011b      	lsls	r3, r3, #4
 800b3e4:	4413      	add	r3, r2
 800b3e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	0c1a      	lsrs	r2, r3, #16
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	3302      	adds	r3, #2
 800b3f2:	b2d2      	uxtb	r2, r2
 800b3f4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	011b      	lsls	r3, r3, #4
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	0e1a      	lsrs	r2, r3, #24
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	3303      	adds	r3, #3
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	011b      	lsls	r3, r3, #4
 800b418:	4413      	add	r3, r2
 800b41a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	3304      	adds	r3, #4
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	011b      	lsls	r3, r3, #4
 800b430:	4413      	add	r3, r2
 800b432:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	0a1a      	lsrs	r2, r3, #8
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	3305      	adds	r3, #5
 800b43e:	b2d2      	uxtb	r2, r2
 800b440:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	4413      	add	r3, r2
 800b44c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	0c1a      	lsrs	r2, r3, #16
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	3306      	adds	r3, #6
 800b458:	b2d2      	uxtb	r2, r2
 800b45a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	011b      	lsls	r3, r3, #4
 800b464:	4413      	add	r3, r2
 800b466:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	0e1a      	lsrs	r2, r3, #24
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	3307      	adds	r3, #7
 800b472:	b2d2      	uxtb	r2, r2
 800b474:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d108      	bne.n	800b48e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68da      	ldr	r2, [r3, #12]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f042 0220 	orr.w	r2, r2, #32
 800b48a:	60da      	str	r2, [r3, #12]
 800b48c:	e007      	b.n	800b49e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	691a      	ldr	r2, [r3, #16]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f042 0220 	orr.w	r2, r2, #32
 800b49c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e006      	b.n	800b4b0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
  }
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b4cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d002      	beq.n	800b4da <HAL_CAN_ActivateNotification+0x1e>
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d109      	bne.n	800b4ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6959      	ldr	r1, [r3, #20]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	430a      	orrs	r2, r1
 800b4e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e006      	b.n	800b4fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
  }
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08a      	sub	sp, #40	; 0x28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800b510:	2300      	movs	r3, #0
 800b512:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d07c      	beq.n	800b648 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	d023      	beq.n	800b5a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2201      	movs	r2, #1
 800b55e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	f003 0302 	and.w	r3, r3, #2
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f983 	bl	800b876 <HAL_CAN_TxMailbox0CompleteCallback>
 800b570:	e016      	b.n	800b5a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d004      	beq.n	800b586 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
 800b584:	e00c      	b.n	800b5a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	f003 0308 	and.w	r3, r3, #8
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d004      	beq.n	800b59a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b596:	627b      	str	r3, [r7, #36]	; 0x24
 800b598:	e002      	b.n	800b5a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f989 	bl	800b8b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d024      	beq.n	800b5f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f963 	bl	800b88a <HAL_CAN_TxMailbox1CompleteCallback>
 800b5c4:	e016      	b.n	800b5f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d004      	beq.n	800b5da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b5d8:	e00c      	b.n	800b5f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d004      	beq.n	800b5ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b5ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b5ec:	e002      	b.n	800b5f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f969 	bl	800b8c6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d024      	beq.n	800b648 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b606:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f943 	bl	800b89e <HAL_CAN_TxMailbox2CompleteCallback>
 800b618:	e016      	b.n	800b648 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d004      	beq.n	800b62e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b62a:	627b      	str	r3, [r7, #36]	; 0x24
 800b62c:	e00c      	b.n	800b648 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d004      	beq.n	800b642 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b63e:	627b      	str	r3, [r7, #36]	; 0x24
 800b640:	e002      	b.n	800b648 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f949 	bl	800b8da <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	f003 0308 	and.w	r3, r3, #8
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00c      	beq.n	800b66c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	f003 0310 	and.w	r3, r3, #16
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d007      	beq.n	800b66c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b662:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2210      	movs	r2, #16
 800b66a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	f003 0304 	and.w	r3, r3, #4
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00b      	beq.n	800b68e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f003 0308 	and.w	r3, r3, #8
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d006      	beq.n	800b68e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2208      	movs	r2, #8
 800b686:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f930 	bl	800b8ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	f003 0302 	and.w	r3, r3, #2
 800b694:	2b00      	cmp	r3, #0
 800b696:	d009      	beq.n	800b6ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	f003 0303 	and.w	r3, r3, #3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7f6 f878 	bl	800179c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00c      	beq.n	800b6d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f003 0310 	and.w	r3, r3, #16
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d007      	beq.n	800b6d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2210      	movs	r2, #16
 800b6ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	f003 0320 	and.w	r3, r3, #32
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00b      	beq.n	800b6f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	f003 0308 	and.w	r3, r3, #8
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d006      	beq.n	800b6f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2208      	movs	r2, #8
 800b6ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f912 	bl	800b916 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	f003 0310 	and.w	r3, r3, #16
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d009      	beq.n	800b710 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	f003 0303 	and.w	r3, r3, #3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f8f9 	bl	800b902 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00b      	beq.n	800b732 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	f003 0310 	and.w	r3, r3, #16
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2210      	movs	r2, #16
 800b72a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f8fc 	bl	800b92a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800b732:	6a3b      	ldr	r3, [r7, #32]
 800b734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00b      	beq.n	800b754 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	f003 0308 	and.w	r3, r3, #8
 800b742:	2b00      	cmp	r3, #0
 800b744:	d006      	beq.n	800b754 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2208      	movs	r2, #8
 800b74c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f8f5 	bl	800b93e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d07b      	beq.n	800b856 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	f003 0304 	and.w	r3, r3, #4
 800b764:	2b00      	cmp	r3, #0
 800b766:	d072      	beq.n	800b84e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d008      	beq.n	800b784 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d003      	beq.n	800b784 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	f043 0301 	orr.w	r3, r3, #1
 800b782:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b784:	6a3b      	ldr	r3, [r7, #32]
 800b786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d008      	beq.n	800b7a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b794:	2b00      	cmp	r3, #0
 800b796:	d003      	beq.n	800b7a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	f043 0302 	orr.w	r3, r3, #2
 800b79e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d008      	beq.n	800b7bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d003      	beq.n	800b7bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	f043 0304 	orr.w	r3, r3, #4
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d043      	beq.n	800b84e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d03e      	beq.n	800b84e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b7d6:	2b60      	cmp	r3, #96	; 0x60
 800b7d8:	d02b      	beq.n	800b832 <HAL_CAN_IRQHandler+0x32a>
 800b7da:	2b60      	cmp	r3, #96	; 0x60
 800b7dc:	d82e      	bhi.n	800b83c <HAL_CAN_IRQHandler+0x334>
 800b7de:	2b50      	cmp	r3, #80	; 0x50
 800b7e0:	d022      	beq.n	800b828 <HAL_CAN_IRQHandler+0x320>
 800b7e2:	2b50      	cmp	r3, #80	; 0x50
 800b7e4:	d82a      	bhi.n	800b83c <HAL_CAN_IRQHandler+0x334>
 800b7e6:	2b40      	cmp	r3, #64	; 0x40
 800b7e8:	d019      	beq.n	800b81e <HAL_CAN_IRQHandler+0x316>
 800b7ea:	2b40      	cmp	r3, #64	; 0x40
 800b7ec:	d826      	bhi.n	800b83c <HAL_CAN_IRQHandler+0x334>
 800b7ee:	2b30      	cmp	r3, #48	; 0x30
 800b7f0:	d010      	beq.n	800b814 <HAL_CAN_IRQHandler+0x30c>
 800b7f2:	2b30      	cmp	r3, #48	; 0x30
 800b7f4:	d822      	bhi.n	800b83c <HAL_CAN_IRQHandler+0x334>
 800b7f6:	2b10      	cmp	r3, #16
 800b7f8:	d002      	beq.n	800b800 <HAL_CAN_IRQHandler+0x2f8>
 800b7fa:	2b20      	cmp	r3, #32
 800b7fc:	d005      	beq.n	800b80a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b7fe:	e01d      	b.n	800b83c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	f043 0308 	orr.w	r3, r3, #8
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b808:	e019      	b.n	800b83e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	f043 0310 	orr.w	r3, r3, #16
 800b810:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b812:	e014      	b.n	800b83e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	f043 0320 	orr.w	r3, r3, #32
 800b81a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b81c:	e00f      	b.n	800b83e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b824:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b826:	e00a      	b.n	800b83e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b82e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b830:	e005      	b.n	800b83e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b83a:	e000      	b.n	800b83e <HAL_CAN_IRQHandler+0x336>
            break;
 800b83c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	699a      	ldr	r2, [r3, #24]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b84c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2204      	movs	r2, #4
 800b854:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d008      	beq.n	800b86e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 f872 	bl	800b952 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800b86e:	bf00      	nop
 800b870:	3728      	adds	r7, #40	; 0x28
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b876:	b480      	push	{r7}
 800b878:	b083      	sub	sp, #12
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800b87e:	bf00      	nop
 800b880:	370c      	adds	r7, #12
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr

0800b88a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b083      	sub	sp, #12
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800b892:	bf00      	nop
 800b894:	370c      	adds	r7, #12
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b083      	sub	sp, #12
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800b8a6:	bf00      	nop
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b083      	sub	sp, #12
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800b8ba:	bf00      	nop
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800b8ce:	bf00      	nop
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b083      	sub	sp, #12
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800b8e2:	bf00      	nop
 800b8e4:	370c      	adds	r7, #12
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b083      	sub	sp, #12
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800b8f6:	bf00      	nop
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800b902:	b480      	push	{r7}
 800b904:	b083      	sub	sp, #12
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800b90a:	bf00      	nop
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800b916:	b480      	push	{r7}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800b91e:	bf00      	nop
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b083      	sub	sp, #12
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800b932:	bf00      	nop
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr

0800b93e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800b93e:	b480      	push	{r7}
 800b940:	b083      	sub	sp, #12
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800b946:	bf00      	nop
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800b95a:	bf00      	nop
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
	...

0800b968 <__NVIC_SetPriorityGrouping>:
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f003 0307 	and.w	r3, r3, #7
 800b976:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b978:	4b0b      	ldr	r3, [pc, #44]	; (800b9a8 <__NVIC_SetPriorityGrouping+0x40>)
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b984:	4013      	ands	r3, r2
 800b986:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b990:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <__NVIC_SetPriorityGrouping+0x44>)
 800b992:	4313      	orrs	r3, r2
 800b994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b996:	4a04      	ldr	r2, [pc, #16]	; (800b9a8 <__NVIC_SetPriorityGrouping+0x40>)
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	60d3      	str	r3, [r2, #12]
}
 800b99c:	bf00      	nop
 800b99e:	3714      	adds	r7, #20
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	e000ed00 	.word	0xe000ed00
 800b9ac:	05fa0000 	.word	0x05fa0000

0800b9b0 <__NVIC_GetPriorityGrouping>:
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b9b4:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <__NVIC_GetPriorityGrouping+0x18>)
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	0a1b      	lsrs	r3, r3, #8
 800b9ba:	f003 0307 	and.w	r3, r3, #7
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	e000ed00 	.word	0xe000ed00

0800b9cc <__NVIC_EnableIRQ>:
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	db0b      	blt.n	800b9f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	f003 021f 	and.w	r2, r3, #31
 800b9e4:	4907      	ldr	r1, [pc, #28]	; (800ba04 <__NVIC_EnableIRQ+0x38>)
 800b9e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ea:	095b      	lsrs	r3, r3, #5
 800b9ec:	2001      	movs	r0, #1
 800b9ee:	fa00 f202 	lsl.w	r2, r0, r2
 800b9f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b9f6:	bf00      	nop
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	e000e100 	.word	0xe000e100

0800ba08 <__NVIC_DisableIRQ>:
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	4603      	mov	r3, r0
 800ba10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	db12      	blt.n	800ba40 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	f003 021f 	and.w	r2, r3, #31
 800ba20:	490a      	ldr	r1, [pc, #40]	; (800ba4c <__NVIC_DisableIRQ+0x44>)
 800ba22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba26:	095b      	lsrs	r3, r3, #5
 800ba28:	2001      	movs	r0, #1
 800ba2a:	fa00 f202 	lsl.w	r2, r0, r2
 800ba2e:	3320      	adds	r3, #32
 800ba30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ba34:	f3bf 8f4f 	dsb	sy
}
 800ba38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ba3a:	f3bf 8f6f 	isb	sy
}
 800ba3e:	bf00      	nop
}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	e000e100 	.word	0xe000e100

0800ba50 <__NVIC_SetPriority>:
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	6039      	str	r1, [r7, #0]
 800ba5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	db0a      	blt.n	800ba7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	490c      	ldr	r1, [pc, #48]	; (800ba9c <__NVIC_SetPriority+0x4c>)
 800ba6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba6e:	0112      	lsls	r2, r2, #4
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	440b      	add	r3, r1
 800ba74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ba78:	e00a      	b.n	800ba90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	b2da      	uxtb	r2, r3
 800ba7e:	4908      	ldr	r1, [pc, #32]	; (800baa0 <__NVIC_SetPriority+0x50>)
 800ba80:	79fb      	ldrb	r3, [r7, #7]
 800ba82:	f003 030f 	and.w	r3, r3, #15
 800ba86:	3b04      	subs	r3, #4
 800ba88:	0112      	lsls	r2, r2, #4
 800ba8a:	b2d2      	uxtb	r2, r2
 800ba8c:	440b      	add	r3, r1
 800ba8e:	761a      	strb	r2, [r3, #24]
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	e000e100 	.word	0xe000e100
 800baa0:	e000ed00 	.word	0xe000ed00

0800baa4 <NVIC_EncodePriority>:
{
 800baa4:	b480      	push	{r7}
 800baa6:	b089      	sub	sp, #36	; 0x24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f003 0307 	and.w	r3, r3, #7
 800bab6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	f1c3 0307 	rsb	r3, r3, #7
 800babe:	2b04      	cmp	r3, #4
 800bac0:	bf28      	it	cs
 800bac2:	2304      	movcs	r3, #4
 800bac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	3304      	adds	r3, #4
 800baca:	2b06      	cmp	r3, #6
 800bacc:	d902      	bls.n	800bad4 <NVIC_EncodePriority+0x30>
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	3b03      	subs	r3, #3
 800bad2:	e000      	b.n	800bad6 <NVIC_EncodePriority+0x32>
 800bad4:	2300      	movs	r3, #0
 800bad6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bad8:	f04f 32ff 	mov.w	r2, #4294967295
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	fa02 f303 	lsl.w	r3, r2, r3
 800bae2:	43da      	mvns	r2, r3
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	401a      	ands	r2, r3
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800baec:	f04f 31ff 	mov.w	r1, #4294967295
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	fa01 f303 	lsl.w	r3, r1, r3
 800baf6:	43d9      	mvns	r1, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bafc:	4313      	orrs	r3, r2
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3724      	adds	r7, #36	; 0x24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff ff28 	bl	800b968 <__NVIC_SetPriorityGrouping>
}
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bb32:	f7ff ff3d 	bl	800b9b0 <__NVIC_GetPriorityGrouping>
 800bb36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	68b9      	ldr	r1, [r7, #8]
 800bb3c:	6978      	ldr	r0, [r7, #20]
 800bb3e:	f7ff ffb1 	bl	800baa4 <NVIC_EncodePriority>
 800bb42:	4602      	mov	r2, r0
 800bb44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb48:	4611      	mov	r1, r2
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff ff80 	bl	800ba50 <__NVIC_SetPriority>
}
 800bb50:	bf00      	nop
 800bb52:	3718      	adds	r7, #24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bb62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7ff ff30 	bl	800b9cc <__NVIC_EnableIRQ>
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800bb7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff ff40 	bl	800ba08 <__NVIC_DisableIRQ>
}
 800bb88:	bf00      	nop
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e054      	b.n	800bc4c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	7f5b      	ldrb	r3, [r3, #29]
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d105      	bne.n	800bbb8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f7f5 ff88 	bl	8001ac8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	791b      	ldrb	r3, [r3, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10c      	bne.n	800bbe0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a22      	ldr	r2, [pc, #136]	; (800bc54 <HAL_CRC_Init+0xc4>)
 800bbcc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	689a      	ldr	r2, [r3, #8]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0218 	bic.w	r2, r2, #24
 800bbdc:	609a      	str	r2, [r3, #8]
 800bbde:	e00c      	b.n	800bbfa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6899      	ldr	r1, [r3, #8]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	461a      	mov	r2, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f834 	bl	800bc58 <HAL_CRCEx_Polynomial_Set>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e028      	b.n	800bc4c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	795b      	ldrb	r3, [r3, #5]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d105      	bne.n	800bc0e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0a:	611a      	str	r2, [r3, #16]
 800bc0c:	e004      	b.n	800bc18 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	6912      	ldr	r2, [r2, #16]
 800bc16:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	695a      	ldr	r2, [r3, #20]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	699a      	ldr	r2, [r3, #24]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	430a      	orrs	r2, r1
 800bc42:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	04c11db7 	.word	0x04c11db7

0800bc58 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800bc68:	231f      	movs	r3, #31
 800bc6a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800bc6c:	bf00      	nop
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	1e5a      	subs	r2, r3, #1
 800bc72:	613a      	str	r2, [r7, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d009      	beq.n	800bc8c <HAL_CRCEx_Polynomial_Set+0x34>
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	f003 031f 	and.w	r3, r3, #31
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	fa22 f303 	lsr.w	r3, r2, r3
 800bc84:	f003 0301 	and.w	r3, r3, #1
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d0f0      	beq.n	800bc6e <HAL_CRCEx_Polynomial_Set+0x16>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b18      	cmp	r3, #24
 800bc90:	d846      	bhi.n	800bd20 <HAL_CRCEx_Polynomial_Set+0xc8>
 800bc92:	a201      	add	r2, pc, #4	; (adr r2, 800bc98 <HAL_CRCEx_Polynomial_Set+0x40>)
 800bc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc98:	0800bd27 	.word	0x0800bd27
 800bc9c:	0800bd21 	.word	0x0800bd21
 800bca0:	0800bd21 	.word	0x0800bd21
 800bca4:	0800bd21 	.word	0x0800bd21
 800bca8:	0800bd21 	.word	0x0800bd21
 800bcac:	0800bd21 	.word	0x0800bd21
 800bcb0:	0800bd21 	.word	0x0800bd21
 800bcb4:	0800bd21 	.word	0x0800bd21
 800bcb8:	0800bd15 	.word	0x0800bd15
 800bcbc:	0800bd21 	.word	0x0800bd21
 800bcc0:	0800bd21 	.word	0x0800bd21
 800bcc4:	0800bd21 	.word	0x0800bd21
 800bcc8:	0800bd21 	.word	0x0800bd21
 800bccc:	0800bd21 	.word	0x0800bd21
 800bcd0:	0800bd21 	.word	0x0800bd21
 800bcd4:	0800bd21 	.word	0x0800bd21
 800bcd8:	0800bd09 	.word	0x0800bd09
 800bcdc:	0800bd21 	.word	0x0800bd21
 800bce0:	0800bd21 	.word	0x0800bd21
 800bce4:	0800bd21 	.word	0x0800bd21
 800bce8:	0800bd21 	.word	0x0800bd21
 800bcec:	0800bd21 	.word	0x0800bd21
 800bcf0:	0800bd21 	.word	0x0800bd21
 800bcf4:	0800bd21 	.word	0x0800bd21
 800bcf8:	0800bcfd 	.word	0x0800bcfd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	2b06      	cmp	r3, #6
 800bd00:	d913      	bls.n	800bd2a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bd06:	e010      	b.n	800bd2a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	2b07      	cmp	r3, #7
 800bd0c:	d90f      	bls.n	800bd2e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bd12:	e00c      	b.n	800bd2e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	2b0f      	cmp	r3, #15
 800bd18:	d90b      	bls.n	800bd32 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bd1e:	e008      	b.n	800bd32 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	75fb      	strb	r3, [r7, #23]
      break;
 800bd24:	e006      	b.n	800bd34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bd26:	bf00      	nop
 800bd28:	e004      	b.n	800bd34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bd2a:	bf00      	nop
 800bd2c:	e002      	b.n	800bd34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bd2e:	bf00      	nop
 800bd30:	e000      	b.n	800bd34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bd32:	bf00      	nop
  }
  if (status == HAL_OK)
 800bd34:	7dfb      	ldrb	r3, [r7, #23]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10d      	bne.n	800bd56 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	f023 0118 	bic.w	r1, r3, #24
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	430a      	orrs	r2, r1
 800bd54:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bd70:	f7fe fc48 	bl	800a604 <HAL_GetTick>
 800bd74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e099      	b.n	800beb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0201 	bic.w	r2, r2, #1
 800bd9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bda0:	e00f      	b.n	800bdc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bda2:	f7fe fc2f 	bl	800a604 <HAL_GetTick>
 800bda6:	4602      	mov	r2, r0
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	2b05      	cmp	r3, #5
 800bdae:	d908      	bls.n	800bdc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2220      	movs	r2, #32
 800bdb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2203      	movs	r2, #3
 800bdba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	e078      	b.n	800beb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1e8      	bne.n	800bda2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	4b38      	ldr	r3, [pc, #224]	; (800bebc <HAL_DMA_Init+0x158>)
 800bddc:	4013      	ands	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bdee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a1b      	ldr	r3, [r3, #32]
 800be0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	4313      	orrs	r3, r2
 800be12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	2b04      	cmp	r3, #4
 800be1a:	d107      	bne.n	800be2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be24:	4313      	orrs	r3, r2
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	4313      	orrs	r3, r2
 800be2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	697a      	ldr	r2, [r7, #20]
 800be32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	f023 0307 	bic.w	r3, r3, #7
 800be42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be48:	697a      	ldr	r2, [r7, #20]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be52:	2b04      	cmp	r3, #4
 800be54:	d117      	bne.n	800be86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00e      	beq.n	800be86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fa99 	bl	800c3a0 <DMA_CheckFifoParam>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d008      	beq.n	800be86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2240      	movs	r2, #64	; 0x40
 800be78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800be82:	2301      	movs	r3, #1
 800be84:	e016      	b.n	800beb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fa50 	bl	800c334 <DMA_CalcBaseAndBitshift>
 800be94:	4603      	mov	r3, r0
 800be96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be9c:	223f      	movs	r2, #63	; 0x3f
 800be9e:	409a      	lsls	r2, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	e010803f 	.word	0xe010803f

0800bec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
 800becc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bed6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d101      	bne.n	800bee6 <HAL_DMA_Start_IT+0x26>
 800bee2:	2302      	movs	r3, #2
 800bee4:	e048      	b.n	800bf78 <HAL_DMA_Start_IT+0xb8>
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2201      	movs	r2, #1
 800beea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d137      	bne.n	800bf6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2202      	movs	r2, #2
 800befe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	68b9      	ldr	r1, [r7, #8]
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 f9e2 	bl	800c2d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf18:	223f      	movs	r2, #63	; 0x3f
 800bf1a:	409a      	lsls	r2, r3
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f042 0216 	orr.w	r2, r2, #22
 800bf2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	695a      	ldr	r2, [r3, #20]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bf3e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d007      	beq.n	800bf58 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f042 0208 	orr.w	r2, r2, #8
 800bf56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f042 0201 	orr.w	r2, r2, #1
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	e005      	b.n	800bf76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bf72:	2302      	movs	r3, #2
 800bf74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d004      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2280      	movs	r2, #128	; 0x80
 800bf98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e00c      	b.n	800bfb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2205      	movs	r2, #5
 800bfa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f022 0201 	bic.w	r2, r2, #1
 800bfb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800bfd0:	4b92      	ldr	r3, [pc, #584]	; (800c21c <HAL_DMA_IRQHandler+0x258>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a92      	ldr	r2, [pc, #584]	; (800c220 <HAL_DMA_IRQHandler+0x25c>)
 800bfd6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfda:	0a9b      	lsrs	r3, r3, #10
 800bfdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfee:	2208      	movs	r2, #8
 800bff0:	409a      	lsls	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4013      	ands	r3, r2
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d01a      	beq.n	800c030 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b00      	cmp	r3, #0
 800c006:	d013      	beq.n	800c030 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f022 0204 	bic.w	r2, r2, #4
 800c016:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c01c:	2208      	movs	r2, #8
 800c01e:	409a      	lsls	r2, r3
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c028:	f043 0201 	orr.w	r2, r3, #1
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c034:	2201      	movs	r2, #1
 800c036:	409a      	lsls	r2, r3
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	4013      	ands	r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d012      	beq.n	800c066 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00b      	beq.n	800c066 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c052:	2201      	movs	r2, #1
 800c054:	409a      	lsls	r2, r3
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c05e:	f043 0202 	orr.w	r2, r3, #2
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c06a:	2204      	movs	r2, #4
 800c06c:	409a      	lsls	r2, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	4013      	ands	r3, r2
 800c072:	2b00      	cmp	r3, #0
 800c074:	d012      	beq.n	800c09c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00b      	beq.n	800c09c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c088:	2204      	movs	r2, #4
 800c08a:	409a      	lsls	r2, r3
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c094:	f043 0204 	orr.w	r2, r3, #4
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0a0:	2210      	movs	r2, #16
 800c0a2:	409a      	lsls	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d043      	beq.n	800c134 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 0308 	and.w	r3, r3, #8
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d03c      	beq.n	800c134 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0be:	2210      	movs	r2, #16
 800c0c0:	409a      	lsls	r2, r3
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d018      	beq.n	800c106 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d108      	bne.n	800c0f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d024      	beq.n	800c134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	4798      	blx	r3
 800c0f2:	e01f      	b.n	800c134 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d01b      	beq.n	800c134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	4798      	blx	r3
 800c104:	e016      	b.n	800c134 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c110:	2b00      	cmp	r3, #0
 800c112:	d107      	bne.n	800c124 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f022 0208 	bic.w	r2, r2, #8
 800c122:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c138:	2220      	movs	r2, #32
 800c13a:	409a      	lsls	r2, r3
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	4013      	ands	r3, r2
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 808e 	beq.w	800c262 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f003 0310 	and.w	r3, r3, #16
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 8086 	beq.w	800c262 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c15a:	2220      	movs	r2, #32
 800c15c:	409a      	lsls	r2, r3
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b05      	cmp	r3, #5
 800c16c:	d136      	bne.n	800c1dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 0216 	bic.w	r2, r2, #22
 800c17c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	695a      	ldr	r2, [r3, #20]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c18c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c192:	2b00      	cmp	r3, #0
 800c194:	d103      	bne.n	800c19e <HAL_DMA_IRQHandler+0x1da>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d007      	beq.n	800c1ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f022 0208 	bic.w	r2, r2, #8
 800c1ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1b2:	223f      	movs	r2, #63	; 0x3f
 800c1b4:	409a      	lsls	r2, r3
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d07d      	beq.n	800c2ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	4798      	blx	r3
        }
        return;
 800c1da:	e078      	b.n	800c2ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d01c      	beq.n	800c224 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d108      	bne.n	800c20a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d030      	beq.n	800c262 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	4798      	blx	r3
 800c208:	e02b      	b.n	800c262 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d027      	beq.n	800c262 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	4798      	blx	r3
 800c21a:	e022      	b.n	800c262 <HAL_DMA_IRQHandler+0x29e>
 800c21c:	20000014 	.word	0x20000014
 800c220:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10f      	bne.n	800c252 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f022 0210 	bic.w	r2, r2, #16
 800c240:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c256:	2b00      	cmp	r3, #0
 800c258:	d003      	beq.n	800c262 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c266:	2b00      	cmp	r3, #0
 800c268:	d032      	beq.n	800c2d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c26e:	f003 0301 	and.w	r3, r3, #1
 800c272:	2b00      	cmp	r3, #0
 800c274:	d022      	beq.n	800c2bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2205      	movs	r2, #5
 800c27a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f022 0201 	bic.w	r2, r2, #1
 800c28c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	3301      	adds	r3, #1
 800c292:	60bb      	str	r3, [r7, #8]
 800c294:	697a      	ldr	r2, [r7, #20]
 800c296:	429a      	cmp	r2, r3
 800c298:	d307      	bcc.n	800c2aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1f2      	bne.n	800c28e <HAL_DMA_IRQHandler+0x2ca>
 800c2a8:	e000      	b.n	800c2ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c2aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d005      	beq.n	800c2d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	4798      	blx	r3
 800c2cc:	e000      	b.n	800c2d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c2ce:	bf00      	nop
    }
  }
}
 800c2d0:	3718      	adds	r7, #24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop

0800c2d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c2f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	2b40      	cmp	r3, #64	; 0x40
 800c304:	d108      	bne.n	800c318 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c316:	e007      	b.n	800c328 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	60da      	str	r2, [r3, #12]
}
 800c328:	bf00      	nop
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	b2db      	uxtb	r3, r3
 800c342:	3b10      	subs	r3, #16
 800c344:	4a13      	ldr	r2, [pc, #76]	; (800c394 <DMA_CalcBaseAndBitshift+0x60>)
 800c346:	fba2 2303 	umull	r2, r3, r2, r3
 800c34a:	091b      	lsrs	r3, r3, #4
 800c34c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c34e:	4a12      	ldr	r2, [pc, #72]	; (800c398 <DMA_CalcBaseAndBitshift+0x64>)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	4413      	add	r3, r2
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	461a      	mov	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d908      	bls.n	800c374 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	4b0c      	ldr	r3, [pc, #48]	; (800c39c <DMA_CalcBaseAndBitshift+0x68>)
 800c36a:	4013      	ands	r3, r2
 800c36c:	1d1a      	adds	r2, r3, #4
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	659a      	str	r2, [r3, #88]	; 0x58
 800c372:	e006      	b.n	800c382 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	461a      	mov	r2, r3
 800c37a:	4b08      	ldr	r3, [pc, #32]	; (800c39c <DMA_CalcBaseAndBitshift+0x68>)
 800c37c:	4013      	ands	r3, r2
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	aaaaaaab 	.word	0xaaaaaaab
 800c398:	0802be3c 	.word	0x0802be3c
 800c39c:	fffffc00 	.word	0xfffffc00

0800c3a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d11f      	bne.n	800c3fa <DMA_CheckFifoParam+0x5a>
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	2b03      	cmp	r3, #3
 800c3be:	d856      	bhi.n	800c46e <DMA_CheckFifoParam+0xce>
 800c3c0:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <DMA_CheckFifoParam+0x28>)
 800c3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c6:	bf00      	nop
 800c3c8:	0800c3d9 	.word	0x0800c3d9
 800c3cc:	0800c3eb 	.word	0x0800c3eb
 800c3d0:	0800c3d9 	.word	0x0800c3d9
 800c3d4:	0800c46f 	.word	0x0800c46f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d046      	beq.n	800c472 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c3e8:	e043      	b.n	800c472 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c3f2:	d140      	bne.n	800c476 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c3f8:	e03d      	b.n	800c476 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c402:	d121      	bne.n	800c448 <DMA_CheckFifoParam+0xa8>
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	2b03      	cmp	r3, #3
 800c408:	d837      	bhi.n	800c47a <DMA_CheckFifoParam+0xda>
 800c40a:	a201      	add	r2, pc, #4	; (adr r2, 800c410 <DMA_CheckFifoParam+0x70>)
 800c40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c410:	0800c421 	.word	0x0800c421
 800c414:	0800c427 	.word	0x0800c427
 800c418:	0800c421 	.word	0x0800c421
 800c41c:	0800c439 	.word	0x0800c439
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	73fb      	strb	r3, [r7, #15]
      break;
 800c424:	e030      	b.n	800c488 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d025      	beq.n	800c47e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c432:	2301      	movs	r3, #1
 800c434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c436:	e022      	b.n	800c47e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c440:	d11f      	bne.n	800c482 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c446:	e01c      	b.n	800c482 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d903      	bls.n	800c456 <DMA_CheckFifoParam+0xb6>
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	2b03      	cmp	r3, #3
 800c452:	d003      	beq.n	800c45c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c454:	e018      	b.n	800c488 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	73fb      	strb	r3, [r7, #15]
      break;
 800c45a:	e015      	b.n	800c488 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00e      	beq.n	800c486 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	73fb      	strb	r3, [r7, #15]
      break;
 800c46c:	e00b      	b.n	800c486 <DMA_CheckFifoParam+0xe6>
      break;
 800c46e:	bf00      	nop
 800c470:	e00a      	b.n	800c488 <DMA_CheckFifoParam+0xe8>
      break;
 800c472:	bf00      	nop
 800c474:	e008      	b.n	800c488 <DMA_CheckFifoParam+0xe8>
      break;
 800c476:	bf00      	nop
 800c478:	e006      	b.n	800c488 <DMA_CheckFifoParam+0xe8>
      break;
 800c47a:	bf00      	nop
 800c47c:	e004      	b.n	800c488 <DMA_CheckFifoParam+0xe8>
      break;
 800c47e:	bf00      	nop
 800c480:	e002      	b.n	800c488 <DMA_CheckFifoParam+0xe8>
      break;   
 800c482:	bf00      	nop
 800c484:	e000      	b.n	800c488 <DMA_CheckFifoParam+0xe8>
      break;
 800c486:	bf00      	nop
    }
  } 
  
  return status; 
 800c488:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop

0800c498 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e049      	b.n	800c53e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d106      	bne.n	800c4c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f7f5 fb80 	bl	8001bc4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	430a      	orrs	r2, r1
 800c4e0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e8:	f023 0107 	bic.w	r1, r3, #7
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	430a      	orrs	r2, r1
 800c4f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4fe:	4b12      	ldr	r3, [pc, #72]	; (800c548 <HAL_DMA2D_Init+0xb0>)
 800c500:	4013      	ands	r3, r2
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	68d1      	ldr	r1, [r2, #12]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	6812      	ldr	r2, [r2, #0]
 800c50a:	430b      	orrs	r3, r1
 800c50c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c514:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	051a      	lsls	r2, r3, #20
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	055b      	lsls	r3, r3, #21
 800c524:	431a      	orrs	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	430a      	orrs	r2, r1
 800c52c:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	ffffc000 	.word	0xffffc000

0800c54c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d026      	beq.n	800c5bc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c574:	2b00      	cmp	r3, #0
 800c576:	d021      	beq.n	800c5bc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c586:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c58c:	f043 0201 	orr.w	r2, r3, #1
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2201      	movs	r2, #1
 800c59a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2204      	movs	r2, #4
 800c5a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	69db      	ldr	r3, [r3, #28]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	69db      	ldr	r3, [r3, #28]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f003 0320 	and.w	r3, r3, #32
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d026      	beq.n	800c614 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d021      	beq.n	800c614 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5de:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ec:	f043 0202 	orr.w	r2, r3, #2
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2204      	movs	r2, #4
 800c5f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	69db      	ldr	r3, [r3, #28]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	69db      	ldr	r3, [r3, #28]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f003 0308 	and.w	r3, r3, #8
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d026      	beq.n	800c66c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c624:	2b00      	cmp	r3, #0
 800c626:	d021      	beq.n	800c66c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c636:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2208      	movs	r2, #8
 800c63e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c644:	f043 0204 	orr.w	r2, r3, #4
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2204      	movs	r2, #4
 800c650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	69db      	ldr	r3, [r3, #28]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d003      	beq.n	800c66c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	69db      	ldr	r3, [r3, #28]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f003 0304 	and.w	r3, r3, #4
 800c672:	2b00      	cmp	r3, #0
 800c674:	d013      	beq.n	800c69e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00e      	beq.n	800c69e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c68e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2204      	movs	r2, #4
 800c696:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 f853 	bl	800c744 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f003 0302 	and.w	r3, r3, #2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d024      	beq.n	800c6f2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d01f      	beq.n	800c6f2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c6c0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	699b      	ldr	r3, [r3, #24]
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f003 0310 	and.w	r3, r3, #16
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d01f      	beq.n	800c73c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c702:	2b00      	cmp	r3, #0
 800c704:	d01a      	beq.n	800c73c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c714:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2210      	movs	r2, #16
 800c71c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f80e 	bl	800c758 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800c73c:	bf00      	nop
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c784:	2b01      	cmp	r3, #1
 800c786:	d101      	bne.n	800c78c <HAL_DMA2D_ConfigLayer+0x20>
 800c788:	2302      	movs	r3, #2
 800c78a:	e084      	b.n	800c896 <HAL_DMA2D_ConfigLayer+0x12a>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2202      	movs	r2, #2
 800c798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	4413      	add	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	3320      	adds	r3, #32
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	041b      	lsls	r3, r3, #16
 800c7b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c7c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	695b      	ldr	r3, [r3, #20]
 800c7c6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800c7cc:	4b35      	ldr	r3, [pc, #212]	; (800c8a4 <HAL_DMA2D_ConfigLayer+0x138>)
 800c7ce:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	2b0a      	cmp	r3, #10
 800c7d6:	d003      	beq.n	800c7e0 <HAL_DMA2D_ConfigLayer+0x74>
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	2b09      	cmp	r3, #9
 800c7de:	d107      	bne.n	800c7f0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c7e8:	697a      	ldr	r2, [r7, #20]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	617b      	str	r3, [r7, #20]
 800c7ee:	e005      	b.n	800c7fc <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	061b      	lsls	r3, r3, #24
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d120      	bne.n	800c844 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	43db      	mvns	r3, r3
 800c80c:	ea02 0103 	and.w	r1, r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	430a      	orrs	r2, r1
 800c818:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	6812      	ldr	r2, [r2, #0]
 800c822:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	2b0a      	cmp	r3, #10
 800c82a:	d003      	beq.n	800c834 <HAL_DMA2D_ConfigLayer+0xc8>
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	2b09      	cmp	r3, #9
 800c832:	d127      	bne.n	800c884 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	68da      	ldr	r2, [r3, #12]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c840:	629a      	str	r2, [r3, #40]	; 0x28
 800c842:	e01f      	b.n	800c884 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	69da      	ldr	r2, [r3, #28]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	43db      	mvns	r3, r3
 800c84e:	ea02 0103 	and.w	r1, r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	430a      	orrs	r2, r1
 800c85a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	6812      	ldr	r2, [r2, #0]
 800c864:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	2b0a      	cmp	r3, #10
 800c86c:	d003      	beq.n	800c876 <HAL_DMA2D_ConfigLayer+0x10a>
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	2b09      	cmp	r3, #9
 800c874:	d106      	bne.n	800c884 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	68da      	ldr	r2, [r3, #12]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c882:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	371c      	adds	r7, #28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	ff33000f 	.word	0xff33000f

0800c8a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b089      	sub	sp, #36	; 0x24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	61fb      	str	r3, [r7, #28]
 800c8c6:	e175      	b.n	800cbb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	4013      	ands	r3, r2
 800c8da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	f040 8164 	bne.w	800cbae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d00b      	beq.n	800c906 <HAL_GPIO_Init+0x5e>
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d007      	beq.n	800c906 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c8fa:	2b11      	cmp	r3, #17
 800c8fc:	d003      	beq.n	800c906 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	2b12      	cmp	r3, #18
 800c904:	d130      	bne.n	800c968 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	2203      	movs	r2, #3
 800c912:	fa02 f303 	lsl.w	r3, r2, r3
 800c916:	43db      	mvns	r3, r3
 800c918:	69ba      	ldr	r2, [r7, #24]
 800c91a:	4013      	ands	r3, r2
 800c91c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	68da      	ldr	r2, [r3, #12]
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	fa02 f303 	lsl.w	r3, r2, r3
 800c92a:	69ba      	ldr	r2, [r7, #24]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	69ba      	ldr	r2, [r7, #24]
 800c934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c93c:	2201      	movs	r2, #1
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	fa02 f303 	lsl.w	r3, r2, r3
 800c944:	43db      	mvns	r3, r3
 800c946:	69ba      	ldr	r2, [r7, #24]
 800c948:	4013      	ands	r3, r2
 800c94a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	091b      	lsrs	r3, r3, #4
 800c952:	f003 0201 	and.w	r2, r3, #1
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	fa02 f303 	lsl.w	r3, r2, r3
 800c95c:	69ba      	ldr	r2, [r7, #24]
 800c95e:	4313      	orrs	r3, r2
 800c960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	69ba      	ldr	r2, [r7, #24]
 800c966:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	005b      	lsls	r3, r3, #1
 800c972:	2203      	movs	r2, #3
 800c974:	fa02 f303 	lsl.w	r3, r2, r3
 800c978:	43db      	mvns	r3, r3
 800c97a:	69ba      	ldr	r2, [r7, #24]
 800c97c:	4013      	ands	r3, r2
 800c97e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	689a      	ldr	r2, [r3, #8]
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	005b      	lsls	r3, r3, #1
 800c988:	fa02 f303 	lsl.w	r3, r2, r3
 800c98c:	69ba      	ldr	r2, [r7, #24]
 800c98e:	4313      	orrs	r3, r2
 800c990:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	69ba      	ldr	r2, [r7, #24]
 800c996:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d003      	beq.n	800c9a8 <HAL_GPIO_Init+0x100>
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	2b12      	cmp	r3, #18
 800c9a6:	d123      	bne.n	800c9f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	08da      	lsrs	r2, r3, #3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3208      	adds	r2, #8
 800c9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	f003 0307 	and.w	r3, r3, #7
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	220f      	movs	r2, #15
 800c9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c4:	43db      	mvns	r3, r3
 800c9c6:	69ba      	ldr	r2, [r7, #24]
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	691a      	ldr	r2, [r3, #16]
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9dc:	69ba      	ldr	r2, [r7, #24]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	08da      	lsrs	r2, r3, #3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	3208      	adds	r2, #8
 800c9ea:	69b9      	ldr	r1, [r7, #24]
 800c9ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	005b      	lsls	r3, r3, #1
 800c9fa:	2203      	movs	r2, #3
 800c9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800ca00:	43db      	mvns	r3, r3
 800ca02:	69ba      	ldr	r2, [r7, #24]
 800ca04:	4013      	ands	r3, r2
 800ca06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f003 0203 	and.w	r2, r3, #3
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	fa02 f303 	lsl.w	r3, r2, r3
 800ca18:	69ba      	ldr	r2, [r7, #24]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 80be 	beq.w	800cbae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca32:	4b66      	ldr	r3, [pc, #408]	; (800cbcc <HAL_GPIO_Init+0x324>)
 800ca34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca36:	4a65      	ldr	r2, [pc, #404]	; (800cbcc <HAL_GPIO_Init+0x324>)
 800ca38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca3c:	6453      	str	r3, [r2, #68]	; 0x44
 800ca3e:	4b63      	ldr	r3, [pc, #396]	; (800cbcc <HAL_GPIO_Init+0x324>)
 800ca40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca46:	60fb      	str	r3, [r7, #12]
 800ca48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800ca4a:	4a61      	ldr	r2, [pc, #388]	; (800cbd0 <HAL_GPIO_Init+0x328>)
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	089b      	lsrs	r3, r3, #2
 800ca50:	3302      	adds	r3, #2
 800ca52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	f003 0303 	and.w	r3, r3, #3
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	220f      	movs	r2, #15
 800ca62:	fa02 f303 	lsl.w	r3, r2, r3
 800ca66:	43db      	mvns	r3, r3
 800ca68:	69ba      	ldr	r2, [r7, #24]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4a58      	ldr	r2, [pc, #352]	; (800cbd4 <HAL_GPIO_Init+0x32c>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d037      	beq.n	800cae6 <HAL_GPIO_Init+0x23e>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4a57      	ldr	r2, [pc, #348]	; (800cbd8 <HAL_GPIO_Init+0x330>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d031      	beq.n	800cae2 <HAL_GPIO_Init+0x23a>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4a56      	ldr	r2, [pc, #344]	; (800cbdc <HAL_GPIO_Init+0x334>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d02b      	beq.n	800cade <HAL_GPIO_Init+0x236>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4a55      	ldr	r2, [pc, #340]	; (800cbe0 <HAL_GPIO_Init+0x338>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d025      	beq.n	800cada <HAL_GPIO_Init+0x232>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a54      	ldr	r2, [pc, #336]	; (800cbe4 <HAL_GPIO_Init+0x33c>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d01f      	beq.n	800cad6 <HAL_GPIO_Init+0x22e>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a53      	ldr	r2, [pc, #332]	; (800cbe8 <HAL_GPIO_Init+0x340>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d019      	beq.n	800cad2 <HAL_GPIO_Init+0x22a>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a52      	ldr	r2, [pc, #328]	; (800cbec <HAL_GPIO_Init+0x344>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d013      	beq.n	800cace <HAL_GPIO_Init+0x226>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a51      	ldr	r2, [pc, #324]	; (800cbf0 <HAL_GPIO_Init+0x348>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d00d      	beq.n	800caca <HAL_GPIO_Init+0x222>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a50      	ldr	r2, [pc, #320]	; (800cbf4 <HAL_GPIO_Init+0x34c>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d007      	beq.n	800cac6 <HAL_GPIO_Init+0x21e>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a4f      	ldr	r2, [pc, #316]	; (800cbf8 <HAL_GPIO_Init+0x350>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d101      	bne.n	800cac2 <HAL_GPIO_Init+0x21a>
 800cabe:	2309      	movs	r3, #9
 800cac0:	e012      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800cac2:	230a      	movs	r3, #10
 800cac4:	e010      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800cac6:	2308      	movs	r3, #8
 800cac8:	e00e      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800caca:	2307      	movs	r3, #7
 800cacc:	e00c      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800cace:	2306      	movs	r3, #6
 800cad0:	e00a      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800cad2:	2305      	movs	r3, #5
 800cad4:	e008      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800cad6:	2304      	movs	r3, #4
 800cad8:	e006      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800cada:	2303      	movs	r3, #3
 800cadc:	e004      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800cade:	2302      	movs	r3, #2
 800cae0:	e002      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800cae2:	2301      	movs	r3, #1
 800cae4:	e000      	b.n	800cae8 <HAL_GPIO_Init+0x240>
 800cae6:	2300      	movs	r3, #0
 800cae8:	69fa      	ldr	r2, [r7, #28]
 800caea:	f002 0203 	and.w	r2, r2, #3
 800caee:	0092      	lsls	r2, r2, #2
 800caf0:	4093      	lsls	r3, r2
 800caf2:	69ba      	ldr	r2, [r7, #24]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800caf8:	4935      	ldr	r1, [pc, #212]	; (800cbd0 <HAL_GPIO_Init+0x328>)
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	089b      	lsrs	r3, r3, #2
 800cafe:	3302      	adds	r3, #2
 800cb00:	69ba      	ldr	r2, [r7, #24]
 800cb02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cb06:	4b3d      	ldr	r3, [pc, #244]	; (800cbfc <HAL_GPIO_Init+0x354>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	43db      	mvns	r3, r3
 800cb10:	69ba      	ldr	r2, [r7, #24]
 800cb12:	4013      	ands	r3, r2
 800cb14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cb2a:	4a34      	ldr	r2, [pc, #208]	; (800cbfc <HAL_GPIO_Init+0x354>)
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800cb30:	4b32      	ldr	r3, [pc, #200]	; (800cbfc <HAL_GPIO_Init+0x354>)
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	43db      	mvns	r3, r3
 800cb3a:	69ba      	ldr	r2, [r7, #24]
 800cb3c:	4013      	ands	r3, r2
 800cb3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d003      	beq.n	800cb54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800cb4c:	69ba      	ldr	r2, [r7, #24]
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cb54:	4a29      	ldr	r2, [pc, #164]	; (800cbfc <HAL_GPIO_Init+0x354>)
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cb5a:	4b28      	ldr	r3, [pc, #160]	; (800cbfc <HAL_GPIO_Init+0x354>)
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	43db      	mvns	r3, r3
 800cb64:	69ba      	ldr	r2, [r7, #24]
 800cb66:	4013      	ands	r3, r2
 800cb68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d003      	beq.n	800cb7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800cb76:	69ba      	ldr	r2, [r7, #24]
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cb7e:	4a1f      	ldr	r2, [pc, #124]	; (800cbfc <HAL_GPIO_Init+0x354>)
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cb84:	4b1d      	ldr	r3, [pc, #116]	; (800cbfc <HAL_GPIO_Init+0x354>)
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	43db      	mvns	r3, r3
 800cb8e:	69ba      	ldr	r2, [r7, #24]
 800cb90:	4013      	ands	r3, r2
 800cb92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d003      	beq.n	800cba8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800cba0:	69ba      	ldr	r2, [r7, #24]
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cba8:	4a14      	ldr	r2, [pc, #80]	; (800cbfc <HAL_GPIO_Init+0x354>)
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	61fb      	str	r3, [r7, #28]
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	2b0f      	cmp	r3, #15
 800cbb8:	f67f ae86 	bls.w	800c8c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800cbbc:	bf00      	nop
 800cbbe:	bf00      	nop
 800cbc0:	3724      	adds	r7, #36	; 0x24
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	40023800 	.word	0x40023800
 800cbd0:	40013800 	.word	0x40013800
 800cbd4:	40020000 	.word	0x40020000
 800cbd8:	40020400 	.word	0x40020400
 800cbdc:	40020800 	.word	0x40020800
 800cbe0:	40020c00 	.word	0x40020c00
 800cbe4:	40021000 	.word	0x40021000
 800cbe8:	40021400 	.word	0x40021400
 800cbec:	40021800 	.word	0x40021800
 800cbf0:	40021c00 	.word	0x40021c00
 800cbf4:	40022000 	.word	0x40022000
 800cbf8:	40022400 	.word	0x40022400
 800cbfc:	40013c00 	.word	0x40013c00

0800cc00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b087      	sub	sp, #28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800cc12:	2300      	movs	r3, #0
 800cc14:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800cc16:	2300      	movs	r3, #0
 800cc18:	617b      	str	r3, [r7, #20]
 800cc1a:	e0d9      	b.n	800cdd0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	fa02 f303 	lsl.w	r3, r2, r3
 800cc24:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	f040 80c9 	bne.w	800cdca <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800cc38:	4a6b      	ldr	r2, [pc, #428]	; (800cde8 <HAL_GPIO_DeInit+0x1e8>)
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	089b      	lsrs	r3, r3, #2
 800cc3e:	3302      	adds	r3, #2
 800cc40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc44:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f003 0303 	and.w	r3, r3, #3
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	220f      	movs	r2, #15
 800cc50:	fa02 f303 	lsl.w	r3, r2, r3
 800cc54:	68ba      	ldr	r2, [r7, #8]
 800cc56:	4013      	ands	r3, r2
 800cc58:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a63      	ldr	r2, [pc, #396]	; (800cdec <HAL_GPIO_DeInit+0x1ec>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d037      	beq.n	800ccd2 <HAL_GPIO_DeInit+0xd2>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a62      	ldr	r2, [pc, #392]	; (800cdf0 <HAL_GPIO_DeInit+0x1f0>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d031      	beq.n	800ccce <HAL_GPIO_DeInit+0xce>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4a61      	ldr	r2, [pc, #388]	; (800cdf4 <HAL_GPIO_DeInit+0x1f4>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d02b      	beq.n	800ccca <HAL_GPIO_DeInit+0xca>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4a60      	ldr	r2, [pc, #384]	; (800cdf8 <HAL_GPIO_DeInit+0x1f8>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d025      	beq.n	800ccc6 <HAL_GPIO_DeInit+0xc6>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a5f      	ldr	r2, [pc, #380]	; (800cdfc <HAL_GPIO_DeInit+0x1fc>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d01f      	beq.n	800ccc2 <HAL_GPIO_DeInit+0xc2>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4a5e      	ldr	r2, [pc, #376]	; (800ce00 <HAL_GPIO_DeInit+0x200>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d019      	beq.n	800ccbe <HAL_GPIO_DeInit+0xbe>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4a5d      	ldr	r2, [pc, #372]	; (800ce04 <HAL_GPIO_DeInit+0x204>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d013      	beq.n	800ccba <HAL_GPIO_DeInit+0xba>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a5c      	ldr	r2, [pc, #368]	; (800ce08 <HAL_GPIO_DeInit+0x208>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d00d      	beq.n	800ccb6 <HAL_GPIO_DeInit+0xb6>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a5b      	ldr	r2, [pc, #364]	; (800ce0c <HAL_GPIO_DeInit+0x20c>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d007      	beq.n	800ccb2 <HAL_GPIO_DeInit+0xb2>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a5a      	ldr	r2, [pc, #360]	; (800ce10 <HAL_GPIO_DeInit+0x210>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d101      	bne.n	800ccae <HAL_GPIO_DeInit+0xae>
 800ccaa:	2309      	movs	r3, #9
 800ccac:	e012      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccae:	230a      	movs	r3, #10
 800ccb0:	e010      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccb2:	2308      	movs	r3, #8
 800ccb4:	e00e      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccb6:	2307      	movs	r3, #7
 800ccb8:	e00c      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccba:	2306      	movs	r3, #6
 800ccbc:	e00a      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccbe:	2305      	movs	r3, #5
 800ccc0:	e008      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccc2:	2304      	movs	r3, #4
 800ccc4:	e006      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	e004      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccca:	2302      	movs	r3, #2
 800cccc:	e002      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e000      	b.n	800ccd4 <HAL_GPIO_DeInit+0xd4>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	f002 0203 	and.w	r2, r2, #3
 800ccda:	0092      	lsls	r2, r2, #2
 800ccdc:	4093      	lsls	r3, r2
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d132      	bne.n	800cd4a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cce4:	4b4b      	ldr	r3, [pc, #300]	; (800ce14 <HAL_GPIO_DeInit+0x214>)
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	43db      	mvns	r3, r3
 800ccec:	4949      	ldr	r1, [pc, #292]	; (800ce14 <HAL_GPIO_DeInit+0x214>)
 800ccee:	4013      	ands	r3, r2
 800ccf0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ccf2:	4b48      	ldr	r3, [pc, #288]	; (800ce14 <HAL_GPIO_DeInit+0x214>)
 800ccf4:	685a      	ldr	r2, [r3, #4]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	43db      	mvns	r3, r3
 800ccfa:	4946      	ldr	r1, [pc, #280]	; (800ce14 <HAL_GPIO_DeInit+0x214>)
 800ccfc:	4013      	ands	r3, r2
 800ccfe:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cd00:	4b44      	ldr	r3, [pc, #272]	; (800ce14 <HAL_GPIO_DeInit+0x214>)
 800cd02:	689a      	ldr	r2, [r3, #8]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	43db      	mvns	r3, r3
 800cd08:	4942      	ldr	r1, [pc, #264]	; (800ce14 <HAL_GPIO_DeInit+0x214>)
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cd0e:	4b41      	ldr	r3, [pc, #260]	; (800ce14 <HAL_GPIO_DeInit+0x214>)
 800cd10:	68da      	ldr	r2, [r3, #12]
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	43db      	mvns	r3, r3
 800cd16:	493f      	ldr	r1, [pc, #252]	; (800ce14 <HAL_GPIO_DeInit+0x214>)
 800cd18:	4013      	ands	r3, r2
 800cd1a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f003 0303 	and.w	r3, r3, #3
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	220f      	movs	r2, #15
 800cd26:	fa02 f303 	lsl.w	r3, r2, r3
 800cd2a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800cd2c:	4a2e      	ldr	r2, [pc, #184]	; (800cde8 <HAL_GPIO_DeInit+0x1e8>)
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	089b      	lsrs	r3, r3, #2
 800cd32:	3302      	adds	r3, #2
 800cd34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	43da      	mvns	r2, r3
 800cd3c:	482a      	ldr	r0, [pc, #168]	; (800cde8 <HAL_GPIO_DeInit+0x1e8>)
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	089b      	lsrs	r3, r3, #2
 800cd42:	400a      	ands	r2, r1
 800cd44:	3302      	adds	r3, #2
 800cd46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	2103      	movs	r1, #3
 800cd54:	fa01 f303 	lsl.w	r3, r1, r3
 800cd58:	43db      	mvns	r3, r3
 800cd5a:	401a      	ands	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	08da      	lsrs	r2, r3, #3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3208      	adds	r2, #8
 800cd68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	f003 0307 	and.w	r3, r3, #7
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	220f      	movs	r2, #15
 800cd76:	fa02 f303 	lsl.w	r3, r2, r3
 800cd7a:	43db      	mvns	r3, r3
 800cd7c:	697a      	ldr	r2, [r7, #20]
 800cd7e:	08d2      	lsrs	r2, r2, #3
 800cd80:	4019      	ands	r1, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	3208      	adds	r2, #8
 800cd86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	68da      	ldr	r2, [r3, #12]
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	2103      	movs	r1, #3
 800cd94:	fa01 f303 	lsl.w	r3, r1, r3
 800cd98:	43db      	mvns	r3, r3
 800cd9a:	401a      	ands	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	685a      	ldr	r2, [r3, #4]
 800cda4:	2101      	movs	r1, #1
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	fa01 f303 	lsl.w	r3, r1, r3
 800cdac:	43db      	mvns	r3, r3
 800cdae:	401a      	ands	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	689a      	ldr	r2, [r3, #8]
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	005b      	lsls	r3, r3, #1
 800cdbc:	2103      	movs	r1, #3
 800cdbe:	fa01 f303 	lsl.w	r3, r1, r3
 800cdc2:	43db      	mvns	r3, r3
 800cdc4:	401a      	ands	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	617b      	str	r3, [r7, #20]
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	2b0f      	cmp	r3, #15
 800cdd4:	f67f af22 	bls.w	800cc1c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cdd8:	bf00      	nop
 800cdda:	bf00      	nop
 800cddc:	371c      	adds	r7, #28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	40013800 	.word	0x40013800
 800cdec:	40020000 	.word	0x40020000
 800cdf0:	40020400 	.word	0x40020400
 800cdf4:	40020800 	.word	0x40020800
 800cdf8:	40020c00 	.word	0x40020c00
 800cdfc:	40021000 	.word	0x40021000
 800ce00:	40021400 	.word	0x40021400
 800ce04:	40021800 	.word	0x40021800
 800ce08:	40021c00 	.word	0x40021c00
 800ce0c:	40022000 	.word	0x40022000
 800ce10:	40022400 	.word	0x40022400
 800ce14:	40013c00 	.word	0x40013c00

0800ce18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	807b      	strh	r3, [r7, #2]
 800ce24:	4613      	mov	r3, r2
 800ce26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ce28:	787b      	ldrb	r3, [r7, #1]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d003      	beq.n	800ce36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ce2e:	887a      	ldrh	r2, [r7, #2]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800ce34:	e003      	b.n	800ce3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ce36:	887b      	ldrh	r3, [r7, #2]
 800ce38:	041a      	lsls	r2, r3, #16
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	619a      	str	r2, [r3, #24]
}
 800ce3e:	bf00      	nop
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	460b      	mov	r3, r1
 800ce54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	695b      	ldr	r3, [r3, #20]
 800ce5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ce5c:	887a      	ldrh	r2, [r7, #2]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4013      	ands	r3, r2
 800ce62:	041a      	lsls	r2, r3, #16
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	43d9      	mvns	r1, r3
 800ce68:	887b      	ldrh	r3, [r7, #2]
 800ce6a:	400b      	ands	r3, r1
 800ce6c:	431a      	orrs	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	619a      	str	r2, [r3, #24]
}
 800ce72:	bf00      	nop
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
	...

0800ce80 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d101      	bne.n	800ce92 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e0bf      	b.n	800d012 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d106      	bne.n	800ceac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7f5 fa90 	bl	80023cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2202      	movs	r2, #2
 800ceb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800cec2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	6999      	ldr	r1, [r3, #24]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ced8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	430a      	orrs	r2, r1
 800cee6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6899      	ldr	r1, [r3, #8]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	4b4a      	ldr	r3, [pc, #296]	; (800d01c <HAL_LTDC_Init+0x19c>)
 800cef4:	400b      	ands	r3, r1
 800cef6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	695b      	ldr	r3, [r3, #20]
 800cefc:	041b      	lsls	r3, r3, #16
 800cefe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6899      	ldr	r1, [r3, #8]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	699a      	ldr	r2, [r3, #24]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	431a      	orrs	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	430a      	orrs	r2, r1
 800cf14:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68d9      	ldr	r1, [r3, #12]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	4b3e      	ldr	r3, [pc, #248]	; (800d01c <HAL_LTDC_Init+0x19c>)
 800cf22:	400b      	ands	r3, r1
 800cf24:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	69db      	ldr	r3, [r3, #28]
 800cf2a:	041b      	lsls	r3, r3, #16
 800cf2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68d9      	ldr	r1, [r3, #12]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6a1a      	ldr	r2, [r3, #32]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	431a      	orrs	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	430a      	orrs	r2, r1
 800cf42:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6919      	ldr	r1, [r3, #16]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	4b33      	ldr	r3, [pc, #204]	; (800d01c <HAL_LTDC_Init+0x19c>)
 800cf50:	400b      	ands	r3, r1
 800cf52:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf58:	041b      	lsls	r3, r3, #16
 800cf5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6919      	ldr	r1, [r3, #16]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	431a      	orrs	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	430a      	orrs	r2, r1
 800cf70:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6959      	ldr	r1, [r3, #20]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	4b27      	ldr	r3, [pc, #156]	; (800d01c <HAL_LTDC_Init+0x19c>)
 800cf7e:	400b      	ands	r3, r1
 800cf80:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf86:	041b      	lsls	r3, r3, #16
 800cf88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6959      	ldr	r1, [r3, #20]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	431a      	orrs	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	430a      	orrs	r2, r1
 800cf9e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cfa6:	021b      	lsls	r3, r3, #8
 800cfa8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cfb0:	041b      	lsls	r3, r3, #16
 800cfb2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800cfc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800cfd6:	431a      	orrs	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	430a      	orrs	r2, r1
 800cfde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f042 0206 	orr.w	r2, r2, #6
 800cfee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	699a      	ldr	r2, [r3, #24]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f042 0201 	orr.w	r2, r2, #1
 800cffe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	f000f800 	.word	0xf000f800

0800d020 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d036:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f003 0304 	and.w	r3, r3, #4
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d023      	beq.n	800d08a <HAL_LTDC_IRQHandler+0x6a>
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	f003 0304 	and.w	r3, r3, #4
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d01e      	beq.n	800d08a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f022 0204 	bic.w	r2, r2, #4
 800d05a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2204      	movs	r2, #4
 800d062:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d06a:	f043 0201 	orr.w	r2, r3, #1
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2204      	movs	r2, #4
 800d078:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 f86f 	bl	800d168 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f003 0302 	and.w	r3, r3, #2
 800d090:	2b00      	cmp	r3, #0
 800d092:	d023      	beq.n	800d0dc <HAL_LTDC_IRQHandler+0xbc>
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f003 0302 	and.w	r3, r3, #2
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d01e      	beq.n	800d0dc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f022 0202 	bic.w	r2, r2, #2
 800d0ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d0bc:	f043 0202 	orr.w	r2, r3, #2
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2204      	movs	r2, #4
 800d0ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f846 	bl	800d168 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f003 0301 	and.w	r3, r3, #1
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d01b      	beq.n	800d11e <HAL_LTDC_IRQHandler+0xfe>
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d016      	beq.n	800d11e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f022 0201 	bic.w	r2, r2, #1
 800d0fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2201      	movs	r2, #1
 800d106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f7f8 fa57 	bl	80055cc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f003 0308 	and.w	r3, r3, #8
 800d124:	2b00      	cmp	r3, #0
 800d126:	d01b      	beq.n	800d160 <HAL_LTDC_IRQHandler+0x140>
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	f003 0308 	and.w	r3, r3, #8
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d016      	beq.n	800d160 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f022 0208 	bic.w	r2, r2, #8
 800d140:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2208      	movs	r2, #8
 800d148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f80e 	bl	800d17c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800d160:	bf00      	nop
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800d170:	bf00      	nop
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800d184:	bf00      	nop
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d190:	b5b0      	push	{r4, r5, r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d101      	bne.n	800d1aa <HAL_LTDC_ConfigLayer+0x1a>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e02c      	b.n	800d204 <HAL_LTDC_ConfigLayer+0x74>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2202      	movs	r2, #2
 800d1b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2134      	movs	r1, #52	; 0x34
 800d1c0:	fb01 f303 	mul.w	r3, r1, r3
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	4614      	mov	r4, r2
 800d1ce:	461d      	mov	r5, r3
 800d1d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	68b9      	ldr	r1, [r7, #8]
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f000 f849 	bl	800d27c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3710      	adds	r7, #16
 800d208:	46bd      	mov	sp, r7
 800d20a:	bdb0      	pop	{r4, r5, r7, pc}

0800d20c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d101      	bne.n	800d224 <HAL_LTDC_ProgramLineEvent+0x18>
 800d220:	2302      	movs	r3, #2
 800d222:	e023      	b.n	800d26c <HAL_LTDC_ProgramLineEvent+0x60>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2202      	movs	r2, #2
 800d230:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f022 0201 	bic.w	r2, r2, #1
 800d242:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800d244:	4a0c      	ldr	r2, [pc, #48]	; (800d278 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f042 0201 	orr.w	r2, r2, #1
 800d258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr
 800d278:	40016800 	.word	0x40016800

0800d27c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b089      	sub	sp, #36	; 0x24
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	0c1b      	lsrs	r3, r3, #16
 800d294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d298:	4413      	add	r3, r2
 800d29a:	041b      	lsls	r3, r3, #16
 800d29c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	01db      	lsls	r3, r3, #7
 800d2a8:	4413      	add	r3, r2
 800d2aa:	3384      	adds	r3, #132	; 0x84
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	6812      	ldr	r2, [r2, #0]
 800d2b2:	4611      	mov	r1, r2
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	01d2      	lsls	r2, r2, #7
 800d2b8:	440a      	add	r2, r1
 800d2ba:	3284      	adds	r2, #132	; 0x84
 800d2bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d2c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	0c1b      	lsrs	r3, r3, #16
 800d2ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2d2:	4413      	add	r3, r2
 800d2d4:	1c5a      	adds	r2, r3, #1
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	01db      	lsls	r3, r3, #7
 800d2e0:	440b      	add	r3, r1
 800d2e2:	3384      	adds	r3, #132	; 0x84
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	69fb      	ldr	r3, [r7, #28]
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	68da      	ldr	r2, [r3, #12]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d2fa:	4413      	add	r3, r2
 800d2fc:	041b      	lsls	r3, r3, #16
 800d2fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	461a      	mov	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	01db      	lsls	r3, r3, #7
 800d30a:	4413      	add	r3, r2
 800d30c:	3384      	adds	r3, #132	; 0x84
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	6812      	ldr	r2, [r2, #0]
 800d314:	4611      	mov	r1, r2
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	01d2      	lsls	r2, r2, #7
 800d31a:	440a      	add	r2, r1
 800d31c:	3284      	adds	r2, #132	; 0x84
 800d31e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d322:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	689a      	ldr	r2, [r3, #8]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d332:	4413      	add	r3, r2
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4619      	mov	r1, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	01db      	lsls	r3, r3, #7
 800d340:	440b      	add	r3, r1
 800d342:	3384      	adds	r3, #132	; 0x84
 800d344:	4619      	mov	r1, r3
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	4313      	orrs	r3, r2
 800d34a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	461a      	mov	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	01db      	lsls	r3, r3, #7
 800d356:	4413      	add	r3, r2
 800d358:	3384      	adds	r3, #132	; 0x84
 800d35a:	691b      	ldr	r3, [r3, #16]
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	6812      	ldr	r2, [r2, #0]
 800d360:	4611      	mov	r1, r2
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	01d2      	lsls	r2, r2, #7
 800d366:	440a      	add	r2, r1
 800d368:	3284      	adds	r2, #132	; 0x84
 800d36a:	f023 0307 	bic.w	r3, r3, #7
 800d36e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	461a      	mov	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	01db      	lsls	r3, r3, #7
 800d37a:	4413      	add	r3, r2
 800d37c:	3384      	adds	r3, #132	; 0x84
 800d37e:	461a      	mov	r2, r3
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d38c:	021b      	lsls	r3, r3, #8
 800d38e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d396:	041b      	lsls	r3, r3, #16
 800d398:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	061b      	lsls	r3, r3, #24
 800d3a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	01db      	lsls	r3, r3, #7
 800d3ac:	4413      	add	r3, r2
 800d3ae:	3384      	adds	r3, #132	; 0x84
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	01db      	lsls	r3, r3, #7
 800d3bc:	4413      	add	r3, r2
 800d3be:	3384      	adds	r3, #132	; 0x84
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	431a      	orrs	r2, r3
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	431a      	orrs	r2, r3
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	01db      	lsls	r3, r3, #7
 800d3e0:	440b      	add	r3, r1
 800d3e2:	3384      	adds	r3, #132	; 0x84
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	01db      	lsls	r3, r3, #7
 800d3f6:	4413      	add	r3, r2
 800d3f8:	3384      	adds	r3, #132	; 0x84
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	6812      	ldr	r2, [r2, #0]
 800d400:	4611      	mov	r1, r2
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	01d2      	lsls	r2, r2, #7
 800d406:	440a      	add	r2, r1
 800d408:	3284      	adds	r2, #132	; 0x84
 800d40a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d40e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	461a      	mov	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	01db      	lsls	r3, r3, #7
 800d41a:	4413      	add	r3, r2
 800d41c:	3384      	adds	r3, #132	; 0x84
 800d41e:	461a      	mov	r2, r3
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	695b      	ldr	r3, [r3, #20]
 800d424:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	461a      	mov	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	01db      	lsls	r3, r3, #7
 800d430:	4413      	add	r3, r2
 800d432:	3384      	adds	r3, #132	; 0x84
 800d434:	69da      	ldr	r2, [r3, #28]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4619      	mov	r1, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	01db      	lsls	r3, r3, #7
 800d440:	440b      	add	r3, r1
 800d442:	3384      	adds	r3, #132	; 0x84
 800d444:	4619      	mov	r1, r3
 800d446:	4b58      	ldr	r3, [pc, #352]	; (800d5a8 <LTDC_SetConfig+0x32c>)
 800d448:	4013      	ands	r3, r2
 800d44a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	69da      	ldr	r2, [r3, #28]
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	6a1b      	ldr	r3, [r3, #32]
 800d454:	68f9      	ldr	r1, [r7, #12]
 800d456:	6809      	ldr	r1, [r1, #0]
 800d458:	4608      	mov	r0, r1
 800d45a:	6879      	ldr	r1, [r7, #4]
 800d45c:	01c9      	lsls	r1, r1, #7
 800d45e:	4401      	add	r1, r0
 800d460:	3184      	adds	r1, #132	; 0x84
 800d462:	4313      	orrs	r3, r2
 800d464:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	461a      	mov	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	01db      	lsls	r3, r3, #7
 800d470:	4413      	add	r3, r2
 800d472:	3384      	adds	r3, #132	; 0x84
 800d474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	461a      	mov	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	01db      	lsls	r3, r3, #7
 800d480:	4413      	add	r3, r2
 800d482:	3384      	adds	r3, #132	; 0x84
 800d484:	461a      	mov	r2, r3
 800d486:	2300      	movs	r3, #0
 800d488:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	461a      	mov	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	01db      	lsls	r3, r3, #7
 800d494:	4413      	add	r3, r2
 800d496:	3384      	adds	r3, #132	; 0x84
 800d498:	461a      	mov	r2, r3
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d102      	bne.n	800d4ae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800d4a8:	2304      	movs	r3, #4
 800d4aa:	61fb      	str	r3, [r7, #28]
 800d4ac:	e01b      	b.n	800d4e6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d102      	bne.n	800d4bc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800d4b6:	2303      	movs	r3, #3
 800d4b8:	61fb      	str	r3, [r7, #28]
 800d4ba:	e014      	b.n	800d4e6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	2b04      	cmp	r3, #4
 800d4c2:	d00b      	beq.n	800d4dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d4c8:	2b02      	cmp	r3, #2
 800d4ca:	d007      	beq.n	800d4dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d003      	beq.n	800d4dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d4d8:	2b07      	cmp	r3, #7
 800d4da:	d102      	bne.n	800d4e2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800d4dc:	2302      	movs	r3, #2
 800d4de:	61fb      	str	r3, [r7, #28]
 800d4e0:	e001      	b.n	800d4e6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	01db      	lsls	r3, r3, #7
 800d4f0:	4413      	add	r3, r2
 800d4f2:	3384      	adds	r3, #132	; 0x84
 800d4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	6812      	ldr	r2, [r2, #0]
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	01d2      	lsls	r2, r2, #7
 800d500:	440a      	add	r2, r1
 800d502:	3284      	adds	r2, #132	; 0x84
 800d504:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800d508:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d50e:	69fa      	ldr	r2, [r7, #28]
 800d510:	fb02 f303 	mul.w	r3, r2, r3
 800d514:	041a      	lsls	r2, r3, #16
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	6859      	ldr	r1, [r3, #4]
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	1acb      	subs	r3, r1, r3
 800d520:	69f9      	ldr	r1, [r7, #28]
 800d522:	fb01 f303 	mul.w	r3, r1, r3
 800d526:	3303      	adds	r3, #3
 800d528:	68f9      	ldr	r1, [r7, #12]
 800d52a:	6809      	ldr	r1, [r1, #0]
 800d52c:	4608      	mov	r0, r1
 800d52e:	6879      	ldr	r1, [r7, #4]
 800d530:	01c9      	lsls	r1, r1, #7
 800d532:	4401      	add	r1, r0
 800d534:	3184      	adds	r1, #132	; 0x84
 800d536:	4313      	orrs	r3, r2
 800d538:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	461a      	mov	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	01db      	lsls	r3, r3, #7
 800d544:	4413      	add	r3, r2
 800d546:	3384      	adds	r3, #132	; 0x84
 800d548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4619      	mov	r1, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	01db      	lsls	r3, r3, #7
 800d554:	440b      	add	r3, r1
 800d556:	3384      	adds	r3, #132	; 0x84
 800d558:	4619      	mov	r1, r3
 800d55a:	4b14      	ldr	r3, [pc, #80]	; (800d5ac <LTDC_SetConfig+0x330>)
 800d55c:	4013      	ands	r3, r2
 800d55e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	461a      	mov	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	01db      	lsls	r3, r3, #7
 800d56a:	4413      	add	r3, r2
 800d56c:	3384      	adds	r3, #132	; 0x84
 800d56e:	461a      	mov	r2, r3
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d574:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	01db      	lsls	r3, r3, #7
 800d580:	4413      	add	r3, r2
 800d582:	3384      	adds	r3, #132	; 0x84
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	4611      	mov	r1, r2
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	01d2      	lsls	r2, r2, #7
 800d590:	440a      	add	r2, r1
 800d592:	3284      	adds	r2, #132	; 0x84
 800d594:	f043 0301 	orr.w	r3, r3, #1
 800d598:	6013      	str	r3, [r2, #0]
}
 800d59a:	bf00      	nop
 800d59c:	3724      	adds	r7, #36	; 0x24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	fffff8f8 	.word	0xfffff8f8
 800d5ac:	fffff800 	.word	0xfffff800

0800d5b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d5ba:	4b23      	ldr	r3, [pc, #140]	; (800d648 <HAL_PWREx_EnableOverDrive+0x98>)
 800d5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5be:	4a22      	ldr	r2, [pc, #136]	; (800d648 <HAL_PWREx_EnableOverDrive+0x98>)
 800d5c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5c4:	6413      	str	r3, [r2, #64]	; 0x40
 800d5c6:	4b20      	ldr	r3, [pc, #128]	; (800d648 <HAL_PWREx_EnableOverDrive+0x98>)
 800d5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5ce:	603b      	str	r3, [r7, #0]
 800d5d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d5d2:	4b1e      	ldr	r3, [pc, #120]	; (800d64c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a1d      	ldr	r2, [pc, #116]	; (800d64c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d5d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d5de:	f7fd f811 	bl	800a604 <HAL_GetTick>
 800d5e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d5e4:	e009      	b.n	800d5fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d5e6:	f7fd f80d 	bl	800a604 <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5f4:	d901      	bls.n	800d5fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	e022      	b.n	800d640 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d5fa:	4b14      	ldr	r3, [pc, #80]	; (800d64c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d606:	d1ee      	bne.n	800d5e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d608:	4b10      	ldr	r3, [pc, #64]	; (800d64c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a0f      	ldr	r2, [pc, #60]	; (800d64c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d60e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d612:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d614:	f7fc fff6 	bl	800a604 <HAL_GetTick>
 800d618:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d61a:	e009      	b.n	800d630 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d61c:	f7fc fff2 	bl	800a604 <HAL_GetTick>
 800d620:	4602      	mov	r2, r0
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	1ad3      	subs	r3, r2, r3
 800d626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d62a:	d901      	bls.n	800d630 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d62c:	2303      	movs	r3, #3
 800d62e:	e007      	b.n	800d640 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d630:	4b06      	ldr	r3, [pc, #24]	; (800d64c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d63c:	d1ee      	bne.n	800d61c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	40023800 	.word	0x40023800
 800d64c:	40007000 	.word	0x40007000

0800d650 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af02      	add	r7, sp, #8
 800d656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d658:	f7fc ffd4 	bl	800a604 <HAL_GetTick>
 800d65c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	e067      	b.n	800d738 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10b      	bne.n	800d68c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7f5 f91f 	bl	80028c0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800d682:	f241 3188 	movw	r1, #5000	; 0x1388
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fcf2 	bl	800e070 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	021a      	lsls	r2, r3, #8
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	430a      	orrs	r2, r1
 800d6a4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	2120      	movs	r1, #32
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fd1d 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800d6bc:	7afb      	ldrb	r3, [r7, #11]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d135      	bne.n	800d72e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	4b1d      	ldr	r3, [pc, #116]	; (800d740 <HAL_QSPI_Init+0xf0>)
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	6852      	ldr	r2, [r2, #4]
 800d6d0:	0611      	lsls	r1, r2, #24
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	68d2      	ldr	r2, [r2, #12]
 800d6d6:	4311      	orrs	r1, r2
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	69d2      	ldr	r2, [r2, #28]
 800d6dc:	4311      	orrs	r1, r2
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	6a12      	ldr	r2, [r2, #32]
 800d6e2:	4311      	orrs	r1, r2
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	6812      	ldr	r2, [r2, #0]
 800d6e8:	430b      	orrs	r3, r1
 800d6ea:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	4b14      	ldr	r3, [pc, #80]	; (800d744 <HAL_QSPI_Init+0xf4>)
 800d6f4:	4013      	ands	r3, r2
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	6912      	ldr	r2, [r2, #16]
 800d6fa:	0411      	lsls	r1, r2, #16
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	6952      	ldr	r2, [r2, #20]
 800d700:	4311      	orrs	r1, r2
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	6992      	ldr	r2, [r2, #24]
 800d706:	4311      	orrs	r1, r2
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	6812      	ldr	r2, [r2, #0]
 800d70c:	430b      	orrs	r3, r1
 800d70e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f042 0201 	orr.w	r2, r2, #1
 800d71e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d736:	7afb      	ldrb	r3, [r7, #11]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	00ffff2f 	.word	0x00ffff2f
 800d744:	ffe0f8fe 	.word	0xffe0f8fe

0800d748 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	e016      	b.n	800d788 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f022 0201 	bic.w	r2, r2, #1
 800d768:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7f5 f932 	bl	80029d4 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	f003 0304 	and.w	r3, r3, #4
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d064      	beq.n	800d87c <HAL_QSPI_IRQHandler+0xec>
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d05f      	beq.n	800d87c <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	3320      	adds	r3, #32
 800d7c2:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	2b12      	cmp	r3, #18
 800d7ce:	d125      	bne.n	800d81c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800d7d0:	e01c      	b.n	800d80c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00f      	beq.n	800d7fa <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7de:	781a      	ldrb	r2, [r3, #0]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e8:	1c5a      	adds	r2, r3, #1
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f2:	1e5a      	subs	r2, r3, #1
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	62da      	str	r2, [r3, #44]	; 0x2c
 800d7f8:	e008      	b.n	800d80c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d808:	601a      	str	r2, [r3, #0]
          break;
 800d80a:	e033      	b.n	800d874 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f003 0304 	and.w	r3, r3, #4
 800d816:	2b00      	cmp	r3, #0
 800d818:	d1db      	bne.n	800d7d2 <HAL_QSPI_IRQHandler+0x42>
 800d81a:	e02b      	b.n	800d874 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d822:	b2db      	uxtb	r3, r3
 800d824:	2b22      	cmp	r3, #34	; 0x22
 800d826:	d125      	bne.n	800d874 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800d828:	e01d      	b.n	800d866 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d010      	beq.n	800d854 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	7812      	ldrb	r2, [r2, #0]
 800d83a:	b2d2      	uxtb	r2, r2
 800d83c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d842:	1c5a      	adds	r2, r3, #1
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84c:	1e5a      	subs	r2, r3, #1
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	639a      	str	r2, [r3, #56]	; 0x38
 800d852:	e008      	b.n	800d866 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d862:	601a      	str	r2, [r3, #0]
          break;
 800d864:	e006      	b.n	800d874 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	f003 0304 	and.w	r3, r3, #4
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1da      	bne.n	800d82a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fbdd 	bl	800e034 <HAL_QSPI_FifoThresholdCallback>
 800d87a:	e13c      	b.n	800daf6 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	f003 0302 	and.w	r3, r3, #2
 800d882:	2b00      	cmp	r3, #0
 800d884:	f000 80b0 	beq.w	800d9e8 <HAL_QSPI_IRQHandler+0x258>
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f000 80aa 	beq.w	800d9e8 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2202      	movs	r2, #2
 800d89a:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800d8aa:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	2b12      	cmp	r3, #18
 800d8b6:	d120      	bne.n	800d8fa <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f003 0304 	and.w	r3, r3, #4
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d011      	beq.n	800d8ea <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f022 0204 	bic.w	r2, r2, #4
 800d8d4:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f022 0201 	bic.w	r2, r2, #1
 800d8e8:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fb94 	bl	800e020 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d8f8:	e0fa      	b.n	800daf0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d900:	b2db      	uxtb	r3, r3
 800d902:	2b22      	cmp	r3, #34	; 0x22
 800d904:	d143      	bne.n	800d98e <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	2b00      	cmp	r3, #0
 800d912:	d012      	beq.n	800d93a <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f022 0204 	bic.w	r2, r2, #4
 800d922:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f022 0201 	bic.w	r2, r2, #1
 800d936:	601a      	str	r2, [r3, #0]
 800d938:	e021      	b.n	800d97e <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3320      	adds	r3, #32
 800d940:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800d942:	e013      	b.n	800d96c <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d017      	beq.n	800d97c <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	7812      	ldrb	r2, [r2, #0]
 800d954:	b2d2      	uxtb	r2, r2
 800d956:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95c:	1c5a      	adds	r2, r3, #1
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d966:	1e5a      	subs	r2, r3, #1
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1e4      	bne.n	800d944 <HAL_QSPI_IRQHandler+0x1b4>
 800d97a:	e000      	b.n	800d97e <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800d97c:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2201      	movs	r2, #1
 800d982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 fb40 	bl	800e00c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d98c:	e0b0      	b.n	800daf0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b02      	cmp	r3, #2
 800d998:	d107      	bne.n	800d9aa <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fb28 	bl	800dff8 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d9a8:	e0a2      	b.n	800daf0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	2b08      	cmp	r3, #8
 800d9b4:	f040 809c 	bne.w	800daf0 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	695a      	ldr	r2, [r3, #20]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800d9c6:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d103      	bne.n	800d9e0 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fb03 	bl	800dfe4 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d9de:	e087      	b.n	800daf0 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 faf5 	bl	800dfd0 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d9e6:	e083      	b.n	800daf0 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f003 0308 	and.w	r3, r3, #8
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d01f      	beq.n	800da32 <HAL_QSPI_IRQHandler+0x2a2>
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d01a      	beq.n	800da32 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2208      	movs	r2, #8
 800da02:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00b      	beq.n	800da2a <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800da20:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 fb0c 	bl	800e048 <HAL_QSPI_StatusMatchCallback>
 800da30:	e061      	b.n	800daf6 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f003 0301 	and.w	r3, r3, #1
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d047      	beq.n	800dacc <HAL_QSPI_IRQHandler+0x33c>
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da42:	2b00      	cmp	r3, #0
 800da44:	d042      	beq.n	800dacc <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2201      	movs	r2, #1
 800da4c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800da5c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da62:	f043 0202 	orr.w	r2, r3, #2
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 0304 	and.w	r3, r3, #4
 800da74:	2b00      	cmp	r3, #0
 800da76:	d021      	beq.n	800dabc <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f022 0204 	bic.w	r2, r2, #4
 800da86:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8c:	4a1c      	ldr	r2, [pc, #112]	; (800db00 <HAL_QSPI_IRQHandler+0x370>)
 800da8e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da94:	4618      	mov	r0, r3
 800da96:	f7fe fa73 	bl	800bf80 <HAL_DMA_Abort_IT>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d029      	beq.n	800daf4 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daa4:	f043 0204 	orr.w	r2, r3, #4
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fa8b 	bl	800dfd0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800daba:	e01b      	b.n	800daf4 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 fa83 	bl	800dfd0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800daca:	e013      	b.n	800daf4 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	f003 0310 	and.w	r3, r3, #16
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00f      	beq.n	800daf6 <HAL_QSPI_IRQHandler+0x366>
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00a      	beq.n	800daf6 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2210      	movs	r2, #16
 800dae6:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fab7 	bl	800e05c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800daee:	e002      	b.n	800daf6 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800daf0:	bf00      	nop
 800daf2:	e000      	b.n	800daf6 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800daf4:	bf00      	nop
}
 800daf6:	bf00      	nop
 800daf8:	3718      	adds	r7, #24
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	0800e08d 	.word	0x0800e08d

0800db04 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b088      	sub	sp, #32
 800db08:	af02      	add	r7, sp, #8
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800db10:	f7fc fd78 	bl	800a604 <HAL_GetTick>
 800db14:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d101      	bne.n	800db26 <HAL_QSPI_Command+0x22>
 800db22:	2302      	movs	r3, #2
 800db24:	e048      	b.n	800dbb8 <HAL_QSPI_Command+0xb4>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2201      	movs	r2, #1
 800db2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db34:	b2db      	uxtb	r3, r3
 800db36:	2b01      	cmp	r3, #1
 800db38:	d137      	bne.n	800dbaa <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2202      	movs	r2, #2
 800db44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	2200      	movs	r2, #0
 800db50:	2120      	movs	r1, #32
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f000 facd 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800db58:	4603      	mov	r3, r0
 800db5a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800db5c:	7dfb      	ldrb	r3, [r7, #23]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d125      	bne.n	800dbae <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800db62:	2200      	movs	r2, #0
 800db64:	68b9      	ldr	r1, [r7, #8]
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f000 fafa 	bl	800e160 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db70:	2b00      	cmp	r3, #0
 800db72:	d115      	bne.n	800dba0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	2201      	movs	r2, #1
 800db7c:	2102      	movs	r1, #2
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f000 fab7 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800db84:	4603      	mov	r3, r0
 800db86:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800db88:	7dfb      	ldrb	r3, [r7, #23]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10f      	bne.n	800dbae <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2202      	movs	r2, #2
 800db94:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db9e:	e006      	b.n	800dbae <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dba8:	e001      	b.n	800dbae <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800dbaa:	2302      	movs	r3, #2
 800dbac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3718      	adds	r7, #24
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b08a      	sub	sp, #40	; 0x28
 800dbc4:	af02      	add	r7, sp, #8
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800dbd0:	f7fc fd18 	bl	800a604 <HAL_GetTick>
 800dbd4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3320      	adds	r3, #32
 800dbdc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d101      	bne.n	800dbee <HAL_QSPI_Transmit+0x2e>
 800dbea:	2302      	movs	r3, #2
 800dbec:	e076      	b.n	800dcdc <HAL_QSPI_Transmit+0x11c>
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d165      	bne.n	800dcce <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2200      	movs	r2, #0
 800dc06:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d056      	beq.n	800dcbc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2212      	movs	r2, #18
 800dc12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	691b      	ldr	r3, [r3, #16]
 800dc1c:	1c5a      	adds	r2, r3, #1
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	1c5a      	adds	r2, r3, #1
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	695a      	ldr	r2, [r3, #20]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800dc42:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800dc44:	e01b      	b.n	800dc7e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	2104      	movs	r1, #4
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f000 fa4e 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800dc56:	4603      	mov	r3, r0
 800dc58:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800dc5a:	7ffb      	ldrb	r3, [r7, #31]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d113      	bne.n	800dc88 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc64:	781a      	ldrb	r2, [r3, #0]
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc78:	1e5a      	subs	r2, r3, #1
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1df      	bne.n	800dc46 <HAL_QSPI_Transmit+0x86>
 800dc86:	e000      	b.n	800dc8a <HAL_QSPI_Transmit+0xca>
          break;
 800dc88:	bf00      	nop
      }

      if (status == HAL_OK)
 800dc8a:	7ffb      	ldrb	r3, [r7, #31]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d110      	bne.n	800dcb2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	2201      	movs	r2, #1
 800dc98:	2102      	movs	r1, #2
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f000 fa29 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800dca0:	4603      	mov	r3, r0
 800dca2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800dca4:	7ffb      	ldrb	r3, [r7, #31]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d103      	bne.n	800dcb2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2202      	movs	r2, #2
 800dcb0:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dcba:	e00a      	b.n	800dcd2 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcc0:	f043 0208 	orr.w	r2, r3, #8
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	77fb      	strb	r3, [r7, #31]
 800dccc:	e001      	b.n	800dcd2 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800dcce:	2302      	movs	r3, #2
 800dcd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800dcda:	7ffb      	ldrb	r3, [r7, #31]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3720      	adds	r7, #32
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b08a      	sub	sp, #40	; 0x28
 800dce8:	af02      	add	r7, sp, #8
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800dcf4:	f7fc fc86 	bl	800a604 <HAL_GetTick>
 800dcf8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	699b      	ldr	r3, [r3, #24]
 800dd00:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	3320      	adds	r3, #32
 800dd08:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d101      	bne.n	800dd1a <HAL_QSPI_Receive+0x36>
 800dd16:	2302      	movs	r3, #2
 800dd18:	e07d      	b.n	800de16 <HAL_QSPI_Receive+0x132>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d16c      	bne.n	800de08 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d05d      	beq.n	800ddf6 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2222      	movs	r2, #34	; 0x22
 800dd3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	1c5a      	adds	r2, r3, #1
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	695b      	ldr	r3, [r3, #20]
 800dd66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800dd72:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	697a      	ldr	r2, [r7, #20]
 800dd7a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800dd7c:	e01c      	b.n	800ddb8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	2201      	movs	r2, #1
 800dd86:	2106      	movs	r1, #6
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f000 f9b2 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800dd92:	7ffb      	ldrb	r3, [r7, #31]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d114      	bne.n	800ddc2 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	7812      	ldrb	r2, [r2, #0]
 800dda0:	b2d2      	uxtb	r2, r2
 800dda2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda8:	1c5a      	adds	r2, r3, #1
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb2:	1e5a      	subs	r2, r3, #1
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1de      	bne.n	800dd7e <HAL_QSPI_Receive+0x9a>
 800ddc0:	e000      	b.n	800ddc4 <HAL_QSPI_Receive+0xe0>
          break;
 800ddc2:	bf00      	nop
      }

      if (status == HAL_OK)
 800ddc4:	7ffb      	ldrb	r3, [r7, #31]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d110      	bne.n	800ddec <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	9300      	str	r3, [sp, #0]
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	2102      	movs	r1, #2
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f000 f98c 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800ddda:	4603      	mov	r3, r0
 800dddc:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800ddde:	7ffb      	ldrb	r3, [r7, #31]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d103      	bne.n	800ddec <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2202      	movs	r2, #2
 800ddea:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ddf4:	e00a      	b.n	800de0c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddfa:	f043 0208 	orr.w	r2, r3, #8
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800de02:	2301      	movs	r3, #1
 800de04:	77fb      	strb	r3, [r7, #31]
 800de06:	e001      	b.n	800de0c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800de08:	2302      	movs	r3, #2
 800de0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800de14:	7ffb      	ldrb	r3, [r7, #31]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3720      	adds	r7, #32
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b088      	sub	sp, #32
 800de22:	af02      	add	r7, sp, #8
 800de24:	60f8      	str	r0, [r7, #12]
 800de26:	60b9      	str	r1, [r7, #8]
 800de28:	607a      	str	r2, [r7, #4]
 800de2a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800de2c:	f7fc fbea 	bl	800a604 <HAL_GetTick>
 800de30:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d101      	bne.n	800de42 <HAL_QSPI_AutoPolling+0x24>
 800de3e:	2302      	movs	r3, #2
 800de40:	e060      	b.n	800df04 <HAL_QSPI_AutoPolling+0xe6>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2201      	movs	r2, #1
 800de46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b01      	cmp	r3, #1
 800de54:	d14f      	bne.n	800def6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2200      	movs	r2, #0
 800de5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2242      	movs	r2, #66	; 0x42
 800de60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	2200      	movs	r2, #0
 800de6c:	2120      	movs	r1, #32
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	f000 f93f 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800de74:	4603      	mov	r3, r0
 800de76:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800de78:	7dfb      	ldrb	r3, [r7, #23]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d13d      	bne.n	800defa <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	6812      	ldr	r2, [r2, #0]
 800de86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	6852      	ldr	r2, [r2, #4]
 800de90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	6892      	ldr	r2, [r2, #8]
 800de9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	691b      	ldr	r3, [r3, #16]
 800deaa:	431a      	orrs	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800deb4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68da      	ldr	r2, [r3, #12]
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800debe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dec2:	68b9      	ldr	r1, [r7, #8]
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f000 f94b 	bl	800e160 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	2201      	movs	r2, #1
 800ded2:	2108      	movs	r1, #8
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f000 f90c 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800deda:	4603      	mov	r3, r0
 800dedc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800dede:	7dfb      	ldrb	r3, [r7, #23]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d10a      	bne.n	800defa <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2208      	movs	r2, #8
 800deea:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2201      	movs	r2, #1
 800def0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800def4:	e001      	b.n	800defa <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800def6:	2302      	movs	r3, #2
 800def8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800df02:	7dfb      	ldrb	r3, [r7, #23]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3718      	adds	r7, #24
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b088      	sub	sp, #32
 800df10:	af02      	add	r7, sp, #8
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800df18:	f7fc fb74 	bl	800a604 <HAL_GetTick>
 800df1c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df24:	b2db      	uxtb	r3, r3
 800df26:	2b01      	cmp	r3, #1
 800df28:	d101      	bne.n	800df2e <HAL_QSPI_MemoryMapped+0x22>
 800df2a:	2302      	movs	r3, #2
 800df2c:	e04c      	b.n	800dfc8 <HAL_QSPI_MemoryMapped+0xbc>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2201      	movs	r2, #1
 800df32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d13b      	bne.n	800dfba <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2200      	movs	r2, #0
 800df46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2282      	movs	r2, #130	; 0x82
 800df4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	2200      	movs	r2, #0
 800df5a:	2120      	movs	r1, #32
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f000 f8c8 	bl	800e0f2 <QSPI_WaitFlagStateUntilTimeout>
 800df62:	4603      	mov	r3, r0
 800df64:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800df66:	7dfb      	ldrb	r3, [r7, #23]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d128      	bne.n	800dfbe <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f023 0108 	bic.w	r1, r3, #8
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	430a      	orrs	r2, r1
 800df80:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	2b08      	cmp	r3, #8
 800df88:	d110      	bne.n	800dfac <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	6812      	ldr	r2, [r2, #0]
 800df92:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2210      	movs	r2, #16
 800df9a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dfaa:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800dfac:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800dfb0:	68b9      	ldr	r1, [r7, #8]
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f000 f8d4 	bl	800e160 <QSPI_Config>
 800dfb8:	e001      	b.n	800dfbe <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800dfba:	2302      	movs	r3, #2
 800dfbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800dfc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800dfd8:	bf00      	nop
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800e014:	bf00      	nop
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800e028:	bf00      	nop
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800e03c:	bf00      	nop
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800e050:	bf00      	nop
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800e064:	bf00      	nop
 800e066:	370c      	adds	r7, #12
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800e080:	bf00      	nop
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e098:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	2b08      	cmp	r3, #8
 800e0b0:	d114      	bne.n	800e0dc <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2202      	movs	r2, #2
 800e0b8:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e0c8:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f042 0202 	orr.w	r2, r2, #2
 800e0d8:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800e0da:	e006      	b.n	800e0ea <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f7ff ff73 	bl	800dfd0 <HAL_QSPI_ErrorCallback>
}
 800e0ea:	bf00      	nop
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	60f8      	str	r0, [r7, #12]
 800e0fa:	60b9      	str	r1, [r7, #8]
 800e0fc:	603b      	str	r3, [r7, #0]
 800e0fe:	4613      	mov	r3, r2
 800e100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e102:	e01a      	b.n	800e13a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10a:	d016      	beq.n	800e13a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e10c:	f7fc fa7a 	bl	800a604 <HAL_GetTick>
 800e110:	4602      	mov	r2, r0
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	1ad3      	subs	r3, r2, r3
 800e116:	69ba      	ldr	r2, [r7, #24]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d302      	bcc.n	800e122 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10b      	bne.n	800e13a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2204      	movs	r2, #4
 800e126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e12e:	f043 0201 	orr.w	r2, r3, #1
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	e00e      	b.n	800e158 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	689a      	ldr	r2, [r3, #8]
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	4013      	ands	r3, r2
 800e144:	2b00      	cmp	r3, #0
 800e146:	bf14      	ite	ne
 800e148:	2301      	movne	r3, #1
 800e14a:	2300      	moveq	r3, #0
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	461a      	mov	r2, r3
 800e150:	79fb      	ldrb	r3, [r7, #7]
 800e152:	429a      	cmp	r2, r3
 800e154:	d1d6      	bne.n	800e104 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e170:	2b00      	cmp	r3, #0
 800e172:	d009      	beq.n	800e188 <QSPI_Config+0x28>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e17a:	d005      	beq.n	800e188 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	3a01      	subs	r2, #1
 800e186:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	699b      	ldr	r3, [r3, #24]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f000 80b9 	beq.w	800e304 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	6a1b      	ldr	r3, [r3, #32]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d05f      	beq.n	800e25a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	6892      	ldr	r2, [r2, #8]
 800e1a2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	69db      	ldr	r3, [r3, #28]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d031      	beq.n	800e210 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b4:	431a      	orrs	r2, r3
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ba:	431a      	orrs	r2, r3
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c0:	431a      	orrs	r2, r3
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	695b      	ldr	r3, [r3, #20]
 800e1c6:	049b      	lsls	r3, r3, #18
 800e1c8:	431a      	orrs	r2, r3
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	431a      	orrs	r2, r3
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	6a1b      	ldr	r3, [r3, #32]
 800e1d4:	431a      	orrs	r2, r3
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	431a      	orrs	r2, r3
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	69db      	ldr	r3, [r3, #28]
 800e1e0:	431a      	orrs	r2, r3
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	699b      	ldr	r3, [r3, #24]
 800e1e6:	431a      	orrs	r2, r3
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	ea42 0103 	orr.w	r1, r2, r3
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	430a      	orrs	r2, r1
 800e1f8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e200:	f000 812e 	beq.w	800e460 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	6852      	ldr	r2, [r2, #4]
 800e20c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800e20e:	e127      	b.n	800e460 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e218:	431a      	orrs	r2, r3
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21e:	431a      	orrs	r2, r3
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e224:	431a      	orrs	r2, r3
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	049b      	lsls	r3, r3, #18
 800e22c:	431a      	orrs	r2, r3
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	431a      	orrs	r2, r3
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	431a      	orrs	r2, r3
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	69db      	ldr	r3, [r3, #28]
 800e23e:	431a      	orrs	r2, r3
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	431a      	orrs	r2, r3
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	ea42 0103 	orr.w	r1, r2, r3
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	430a      	orrs	r2, r1
 800e256:	615a      	str	r2, [r3, #20]
}
 800e258:	e102      	b.n	800e460 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d02e      	beq.n	800e2c0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26a:	431a      	orrs	r2, r3
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e270:	431a      	orrs	r2, r3
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e276:	431a      	orrs	r2, r3
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	695b      	ldr	r3, [r3, #20]
 800e27c:	049b      	lsls	r3, r3, #18
 800e27e:	431a      	orrs	r2, r3
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	6a1b      	ldr	r3, [r3, #32]
 800e284:	431a      	orrs	r2, r3
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	431a      	orrs	r2, r3
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	69db      	ldr	r3, [r3, #28]
 800e290:	431a      	orrs	r2, r3
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	431a      	orrs	r2, r3
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	ea42 0103 	orr.w	r1, r2, r3
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	430a      	orrs	r2, r1
 800e2a8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e2b0:	f000 80d6 	beq.w	800e460 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	6852      	ldr	r2, [r2, #4]
 800e2bc:	619a      	str	r2, [r3, #24]
}
 800e2be:	e0cf      	b.n	800e460 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c8:	431a      	orrs	r2, r3
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ce:	431a      	orrs	r2, r3
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d4:	431a      	orrs	r2, r3
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	695b      	ldr	r3, [r3, #20]
 800e2da:	049b      	lsls	r3, r3, #18
 800e2dc:	431a      	orrs	r2, r3
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	431a      	orrs	r2, r3
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	69db      	ldr	r3, [r3, #28]
 800e2e8:	431a      	orrs	r2, r3
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	699b      	ldr	r3, [r3, #24]
 800e2ee:	431a      	orrs	r2, r3
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	ea42 0103 	orr.w	r1, r2, r3
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	430a      	orrs	r2, r1
 800e300:	615a      	str	r2, [r3, #20]
}
 800e302:	e0ad      	b.n	800e460 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	6a1b      	ldr	r3, [r3, #32]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d058      	beq.n	800e3be <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68ba      	ldr	r2, [r7, #8]
 800e312:	6892      	ldr	r2, [r2, #8]
 800e314:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	69db      	ldr	r3, [r3, #28]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d02d      	beq.n	800e37a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e326:	431a      	orrs	r2, r3
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32c:	431a      	orrs	r2, r3
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e332:	431a      	orrs	r2, r3
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	695b      	ldr	r3, [r3, #20]
 800e338:	049b      	lsls	r3, r3, #18
 800e33a:	431a      	orrs	r2, r3
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	691b      	ldr	r3, [r3, #16]
 800e340:	431a      	orrs	r2, r3
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	431a      	orrs	r2, r3
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	431a      	orrs	r2, r3
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	69db      	ldr	r3, [r3, #28]
 800e352:	431a      	orrs	r2, r3
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	699b      	ldr	r3, [r3, #24]
 800e358:	ea42 0103 	orr.w	r1, r2, r3
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	430a      	orrs	r2, r1
 800e364:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e36c:	d078      	beq.n	800e460 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	6852      	ldr	r2, [r2, #4]
 800e376:	619a      	str	r2, [r3, #24]
}
 800e378:	e072      	b.n	800e460 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e382:	431a      	orrs	r2, r3
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e388:	431a      	orrs	r2, r3
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38e:	431a      	orrs	r2, r3
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	695b      	ldr	r3, [r3, #20]
 800e394:	049b      	lsls	r3, r3, #18
 800e396:	431a      	orrs	r2, r3
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	431a      	orrs	r2, r3
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	431a      	orrs	r2, r3
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	69db      	ldr	r3, [r3, #28]
 800e3a8:	431a      	orrs	r2, r3
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	699b      	ldr	r3, [r3, #24]
 800e3ae:	ea42 0103 	orr.w	r1, r2, r3
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	615a      	str	r2, [r3, #20]
}
 800e3bc:	e050      	b.n	800e460 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	69db      	ldr	r3, [r3, #28]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d02a      	beq.n	800e41c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ce:	431a      	orrs	r2, r3
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d4:	431a      	orrs	r2, r3
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	695b      	ldr	r3, [r3, #20]
 800e3e0:	049b      	lsls	r3, r3, #18
 800e3e2:	431a      	orrs	r2, r3
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	6a1b      	ldr	r3, [r3, #32]
 800e3e8:	431a      	orrs	r2, r3
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	431a      	orrs	r2, r3
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	69db      	ldr	r3, [r3, #28]
 800e3f4:	431a      	orrs	r2, r3
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	699b      	ldr	r3, [r3, #24]
 800e3fa:	ea42 0103 	orr.w	r1, r2, r3
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	430a      	orrs	r2, r1
 800e406:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e40e:	d027      	beq.n	800e460 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	6852      	ldr	r2, [r2, #4]
 800e418:	619a      	str	r2, [r3, #24]
}
 800e41a:	e021      	b.n	800e460 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e420:	2b00      	cmp	r3, #0
 800e422:	d01d      	beq.n	800e460 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e42c:	431a      	orrs	r2, r3
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e432:	431a      	orrs	r2, r3
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e438:	431a      	orrs	r2, r3
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	049b      	lsls	r3, r3, #18
 800e440:	431a      	orrs	r2, r3
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	6a1b      	ldr	r3, [r3, #32]
 800e446:	431a      	orrs	r2, r3
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	69db      	ldr	r3, [r3, #28]
 800e44c:	431a      	orrs	r2, r3
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	ea42 0103 	orr.w	r1, r2, r3
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	430a      	orrs	r2, r1
 800e45e:	615a      	str	r2, [r3, #20]
}
 800e460:	bf00      	nop
 800e462:	3714      	adds	r7, #20
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800e474:	2300      	movs	r3, #0
 800e476:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d101      	bne.n	800e482 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800e47e:	2301      	movs	r3, #1
 800e480:	e29b      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f003 0301 	and.w	r3, r3, #1
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f000 8087 	beq.w	800e59e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e490:	4b96      	ldr	r3, [pc, #600]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	f003 030c 	and.w	r3, r3, #12
 800e498:	2b04      	cmp	r3, #4
 800e49a:	d00c      	beq.n	800e4b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e49c:	4b93      	ldr	r3, [pc, #588]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	f003 030c 	and.w	r3, r3, #12
 800e4a4:	2b08      	cmp	r3, #8
 800e4a6:	d112      	bne.n	800e4ce <HAL_RCC_OscConfig+0x62>
 800e4a8:	4b90      	ldr	r3, [pc, #576]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4b4:	d10b      	bne.n	800e4ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e4b6:	4b8d      	ldr	r3, [pc, #564]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d06c      	beq.n	800e59c <HAL_RCC_OscConfig+0x130>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d168      	bne.n	800e59c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e275      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4d6:	d106      	bne.n	800e4e6 <HAL_RCC_OscConfig+0x7a>
 800e4d8:	4b84      	ldr	r3, [pc, #528]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a83      	ldr	r2, [pc, #524]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e4de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4e2:	6013      	str	r3, [r2, #0]
 800e4e4:	e02e      	b.n	800e544 <HAL_RCC_OscConfig+0xd8>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10c      	bne.n	800e508 <HAL_RCC_OscConfig+0x9c>
 800e4ee:	4b7f      	ldr	r3, [pc, #508]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a7e      	ldr	r2, [pc, #504]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e4f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	4b7c      	ldr	r3, [pc, #496]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	4a7b      	ldr	r2, [pc, #492]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e504:	6013      	str	r3, [r2, #0]
 800e506:	e01d      	b.n	800e544 <HAL_RCC_OscConfig+0xd8>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e510:	d10c      	bne.n	800e52c <HAL_RCC_OscConfig+0xc0>
 800e512:	4b76      	ldr	r3, [pc, #472]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a75      	ldr	r2, [pc, #468]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e51c:	6013      	str	r3, [r2, #0]
 800e51e:	4b73      	ldr	r3, [pc, #460]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4a72      	ldr	r2, [pc, #456]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e528:	6013      	str	r3, [r2, #0]
 800e52a:	e00b      	b.n	800e544 <HAL_RCC_OscConfig+0xd8>
 800e52c:	4b6f      	ldr	r3, [pc, #444]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a6e      	ldr	r2, [pc, #440]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e536:	6013      	str	r3, [r2, #0]
 800e538:	4b6c      	ldr	r3, [pc, #432]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a6b      	ldr	r2, [pc, #428]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e53e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d013      	beq.n	800e574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e54c:	f7fc f85a 	bl	800a604 <HAL_GetTick>
 800e550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e552:	e008      	b.n	800e566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e554:	f7fc f856 	bl	800a604 <HAL_GetTick>
 800e558:	4602      	mov	r2, r0
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	1ad3      	subs	r3, r2, r3
 800e55e:	2b64      	cmp	r3, #100	; 0x64
 800e560:	d901      	bls.n	800e566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e562:	2303      	movs	r3, #3
 800e564:	e229      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e566:	4b61      	ldr	r3, [pc, #388]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d0f0      	beq.n	800e554 <HAL_RCC_OscConfig+0xe8>
 800e572:	e014      	b.n	800e59e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e574:	f7fc f846 	bl	800a604 <HAL_GetTick>
 800e578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e57a:	e008      	b.n	800e58e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e57c:	f7fc f842 	bl	800a604 <HAL_GetTick>
 800e580:	4602      	mov	r2, r0
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	1ad3      	subs	r3, r2, r3
 800e586:	2b64      	cmp	r3, #100	; 0x64
 800e588:	d901      	bls.n	800e58e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e58a:	2303      	movs	r3, #3
 800e58c:	e215      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e58e:	4b57      	ldr	r3, [pc, #348]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e596:	2b00      	cmp	r3, #0
 800e598:	d1f0      	bne.n	800e57c <HAL_RCC_OscConfig+0x110>
 800e59a:	e000      	b.n	800e59e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e59c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f003 0302 	and.w	r3, r3, #2
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d069      	beq.n	800e67e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e5aa:	4b50      	ldr	r3, [pc, #320]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	f003 030c 	and.w	r3, r3, #12
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00b      	beq.n	800e5ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e5b6:	4b4d      	ldr	r3, [pc, #308]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	f003 030c 	and.w	r3, r3, #12
 800e5be:	2b08      	cmp	r3, #8
 800e5c0:	d11c      	bne.n	800e5fc <HAL_RCC_OscConfig+0x190>
 800e5c2:	4b4a      	ldr	r3, [pc, #296]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d116      	bne.n	800e5fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e5ce:	4b47      	ldr	r3, [pc, #284]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f003 0302 	and.w	r3, r3, #2
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d005      	beq.n	800e5e6 <HAL_RCC_OscConfig+0x17a>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d001      	beq.n	800e5e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e1e9      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5e6:	4b41      	ldr	r3, [pc, #260]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	00db      	lsls	r3, r3, #3
 800e5f4:	493d      	ldr	r1, [pc, #244]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e5fa:	e040      	b.n	800e67e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d023      	beq.n	800e64c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e604:	4b39      	ldr	r3, [pc, #228]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a38      	ldr	r2, [pc, #224]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e60a:	f043 0301 	orr.w	r3, r3, #1
 800e60e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e610:	f7fb fff8 	bl	800a604 <HAL_GetTick>
 800e614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e616:	e008      	b.n	800e62a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e618:	f7fb fff4 	bl	800a604 <HAL_GetTick>
 800e61c:	4602      	mov	r2, r0
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	2b02      	cmp	r3, #2
 800e624:	d901      	bls.n	800e62a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800e626:	2303      	movs	r3, #3
 800e628:	e1c7      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e62a:	4b30      	ldr	r3, [pc, #192]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f003 0302 	and.w	r3, r3, #2
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0f0      	beq.n	800e618 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e636:	4b2d      	ldr	r3, [pc, #180]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	00db      	lsls	r3, r3, #3
 800e644:	4929      	ldr	r1, [pc, #164]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e646:	4313      	orrs	r3, r2
 800e648:	600b      	str	r3, [r1, #0]
 800e64a:	e018      	b.n	800e67e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e64c:	4b27      	ldr	r3, [pc, #156]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a26      	ldr	r2, [pc, #152]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e652:	f023 0301 	bic.w	r3, r3, #1
 800e656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e658:	f7fb ffd4 	bl	800a604 <HAL_GetTick>
 800e65c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e65e:	e008      	b.n	800e672 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e660:	f7fb ffd0 	bl	800a604 <HAL_GetTick>
 800e664:	4602      	mov	r2, r0
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	1ad3      	subs	r3, r2, r3
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d901      	bls.n	800e672 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e66e:	2303      	movs	r3, #3
 800e670:	e1a3      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e672:	4b1e      	ldr	r3, [pc, #120]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f003 0302 	and.w	r3, r3, #2
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1f0      	bne.n	800e660 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f003 0308 	and.w	r3, r3, #8
 800e686:	2b00      	cmp	r3, #0
 800e688:	d038      	beq.n	800e6fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	695b      	ldr	r3, [r3, #20]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d019      	beq.n	800e6c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e692:	4b16      	ldr	r3, [pc, #88]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e696:	4a15      	ldr	r2, [pc, #84]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e698:	f043 0301 	orr.w	r3, r3, #1
 800e69c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e69e:	f7fb ffb1 	bl	800a604 <HAL_GetTick>
 800e6a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e6a4:	e008      	b.n	800e6b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e6a6:	f7fb ffad 	bl	800a604 <HAL_GetTick>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	1ad3      	subs	r3, r2, r3
 800e6b0:	2b02      	cmp	r3, #2
 800e6b2:	d901      	bls.n	800e6b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e6b4:	2303      	movs	r3, #3
 800e6b6:	e180      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e6b8:	4b0c      	ldr	r3, [pc, #48]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e6ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6bc:	f003 0302 	and.w	r3, r3, #2
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d0f0      	beq.n	800e6a6 <HAL_RCC_OscConfig+0x23a>
 800e6c4:	e01a      	b.n	800e6fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e6c6:	4b09      	ldr	r3, [pc, #36]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e6c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6ca:	4a08      	ldr	r2, [pc, #32]	; (800e6ec <HAL_RCC_OscConfig+0x280>)
 800e6cc:	f023 0301 	bic.w	r3, r3, #1
 800e6d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e6d2:	f7fb ff97 	bl	800a604 <HAL_GetTick>
 800e6d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e6d8:	e00a      	b.n	800e6f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e6da:	f7fb ff93 	bl	800a604 <HAL_GetTick>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d903      	bls.n	800e6f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800e6e8:	2303      	movs	r3, #3
 800e6ea:	e166      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
 800e6ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e6f0:	4b92      	ldr	r3, [pc, #584]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e6f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6f4:	f003 0302 	and.w	r3, r3, #2
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d1ee      	bne.n	800e6da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f003 0304 	and.w	r3, r3, #4
 800e704:	2b00      	cmp	r3, #0
 800e706:	f000 80a4 	beq.w	800e852 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e70a:	4b8c      	ldr	r3, [pc, #560]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e70e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e712:	2b00      	cmp	r3, #0
 800e714:	d10d      	bne.n	800e732 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800e716:	4b89      	ldr	r3, [pc, #548]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e71a:	4a88      	ldr	r2, [pc, #544]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e71c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e720:	6413      	str	r3, [r2, #64]	; 0x40
 800e722:	4b86      	ldr	r3, [pc, #536]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e72a:	60bb      	str	r3, [r7, #8]
 800e72c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e72e:	2301      	movs	r3, #1
 800e730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e732:	4b83      	ldr	r3, [pc, #524]	; (800e940 <HAL_RCC_OscConfig+0x4d4>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d118      	bne.n	800e770 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800e73e:	4b80      	ldr	r3, [pc, #512]	; (800e940 <HAL_RCC_OscConfig+0x4d4>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a7f      	ldr	r2, [pc, #508]	; (800e940 <HAL_RCC_OscConfig+0x4d4>)
 800e744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e74a:	f7fb ff5b 	bl	800a604 <HAL_GetTick>
 800e74e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e750:	e008      	b.n	800e764 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e752:	f7fb ff57 	bl	800a604 <HAL_GetTick>
 800e756:	4602      	mov	r2, r0
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	1ad3      	subs	r3, r2, r3
 800e75c:	2b64      	cmp	r3, #100	; 0x64
 800e75e:	d901      	bls.n	800e764 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800e760:	2303      	movs	r3, #3
 800e762:	e12a      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e764:	4b76      	ldr	r3, [pc, #472]	; (800e940 <HAL_RCC_OscConfig+0x4d4>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d0f0      	beq.n	800e752 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	2b01      	cmp	r3, #1
 800e776:	d106      	bne.n	800e786 <HAL_RCC_OscConfig+0x31a>
 800e778:	4b70      	ldr	r3, [pc, #448]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e77a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e77c:	4a6f      	ldr	r2, [pc, #444]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e77e:	f043 0301 	orr.w	r3, r3, #1
 800e782:	6713      	str	r3, [r2, #112]	; 0x70
 800e784:	e02d      	b.n	800e7e2 <HAL_RCC_OscConfig+0x376>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d10c      	bne.n	800e7a8 <HAL_RCC_OscConfig+0x33c>
 800e78e:	4b6b      	ldr	r3, [pc, #428]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e792:	4a6a      	ldr	r2, [pc, #424]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e794:	f023 0301 	bic.w	r3, r3, #1
 800e798:	6713      	str	r3, [r2, #112]	; 0x70
 800e79a:	4b68      	ldr	r3, [pc, #416]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e79e:	4a67      	ldr	r2, [pc, #412]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e7a0:	f023 0304 	bic.w	r3, r3, #4
 800e7a4:	6713      	str	r3, [r2, #112]	; 0x70
 800e7a6:	e01c      	b.n	800e7e2 <HAL_RCC_OscConfig+0x376>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	2b05      	cmp	r3, #5
 800e7ae:	d10c      	bne.n	800e7ca <HAL_RCC_OscConfig+0x35e>
 800e7b0:	4b62      	ldr	r3, [pc, #392]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e7b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7b4:	4a61      	ldr	r2, [pc, #388]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e7b6:	f043 0304 	orr.w	r3, r3, #4
 800e7ba:	6713      	str	r3, [r2, #112]	; 0x70
 800e7bc:	4b5f      	ldr	r3, [pc, #380]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e7be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7c0:	4a5e      	ldr	r2, [pc, #376]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e7c2:	f043 0301 	orr.w	r3, r3, #1
 800e7c6:	6713      	str	r3, [r2, #112]	; 0x70
 800e7c8:	e00b      	b.n	800e7e2 <HAL_RCC_OscConfig+0x376>
 800e7ca:	4b5c      	ldr	r3, [pc, #368]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7ce:	4a5b      	ldr	r2, [pc, #364]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e7d0:	f023 0301 	bic.w	r3, r3, #1
 800e7d4:	6713      	str	r3, [r2, #112]	; 0x70
 800e7d6:	4b59      	ldr	r3, [pc, #356]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7da:	4a58      	ldr	r2, [pc, #352]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e7dc:	f023 0304 	bic.w	r3, r3, #4
 800e7e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d015      	beq.n	800e816 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7ea:	f7fb ff0b 	bl	800a604 <HAL_GetTick>
 800e7ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e7f0:	e00a      	b.n	800e808 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e7f2:	f7fb ff07 	bl	800a604 <HAL_GetTick>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	1ad3      	subs	r3, r2, r3
 800e7fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e800:	4293      	cmp	r3, r2
 800e802:	d901      	bls.n	800e808 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800e804:	2303      	movs	r3, #3
 800e806:	e0d8      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e808:	4b4c      	ldr	r3, [pc, #304]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e80c:	f003 0302 	and.w	r3, r3, #2
 800e810:	2b00      	cmp	r3, #0
 800e812:	d0ee      	beq.n	800e7f2 <HAL_RCC_OscConfig+0x386>
 800e814:	e014      	b.n	800e840 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e816:	f7fb fef5 	bl	800a604 <HAL_GetTick>
 800e81a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e81c:	e00a      	b.n	800e834 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e81e:	f7fb fef1 	bl	800a604 <HAL_GetTick>
 800e822:	4602      	mov	r2, r0
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	f241 3288 	movw	r2, #5000	; 0x1388
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d901      	bls.n	800e834 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800e830:	2303      	movs	r3, #3
 800e832:	e0c2      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e834:	4b41      	ldr	r3, [pc, #260]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e838:	f003 0302 	and.w	r3, r3, #2
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d1ee      	bne.n	800e81e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e840:	7dfb      	ldrb	r3, [r7, #23]
 800e842:	2b01      	cmp	r3, #1
 800e844:	d105      	bne.n	800e852 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e846:	4b3d      	ldr	r3, [pc, #244]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e84a:	4a3c      	ldr	r2, [pc, #240]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e84c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e850:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 80ae 	beq.w	800e9b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e85c:	4b37      	ldr	r3, [pc, #220]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	f003 030c 	and.w	r3, r3, #12
 800e864:	2b08      	cmp	r3, #8
 800e866:	d06d      	beq.n	800e944 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	699b      	ldr	r3, [r3, #24]
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	d14b      	bne.n	800e908 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e870:	4b32      	ldr	r3, [pc, #200]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4a31      	ldr	r2, [pc, #196]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e87a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e87c:	f7fb fec2 	bl	800a604 <HAL_GetTick>
 800e880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e882:	e008      	b.n	800e896 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e884:	f7fb febe 	bl	800a604 <HAL_GetTick>
 800e888:	4602      	mov	r2, r0
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	1ad3      	subs	r3, r2, r3
 800e88e:	2b02      	cmp	r3, #2
 800e890:	d901      	bls.n	800e896 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800e892:	2303      	movs	r3, #3
 800e894:	e091      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e896:	4b29      	ldr	r3, [pc, #164]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d1f0      	bne.n	800e884 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	69da      	ldr	r2, [r3, #28]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a1b      	ldr	r3, [r3, #32]
 800e8aa:	431a      	orrs	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	019b      	lsls	r3, r3, #6
 800e8b2:	431a      	orrs	r2, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8b8:	085b      	lsrs	r3, r3, #1
 800e8ba:	3b01      	subs	r3, #1
 800e8bc:	041b      	lsls	r3, r3, #16
 800e8be:	431a      	orrs	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c4:	061b      	lsls	r3, r3, #24
 800e8c6:	431a      	orrs	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8cc:	071b      	lsls	r3, r3, #28
 800e8ce:	491b      	ldr	r1, [pc, #108]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e8d4:	4b19      	ldr	r3, [pc, #100]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a18      	ldr	r2, [pc, #96]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e8da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e8de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8e0:	f7fb fe90 	bl	800a604 <HAL_GetTick>
 800e8e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e8e6:	e008      	b.n	800e8fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e8e8:	f7fb fe8c 	bl	800a604 <HAL_GetTick>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	2b02      	cmp	r3, #2
 800e8f4:	d901      	bls.n	800e8fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	e05f      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e8fa:	4b10      	ldr	r3, [pc, #64]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e902:	2b00      	cmp	r3, #0
 800e904:	d0f0      	beq.n	800e8e8 <HAL_RCC_OscConfig+0x47c>
 800e906:	e057      	b.n	800e9b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e908:	4b0c      	ldr	r3, [pc, #48]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a0b      	ldr	r2, [pc, #44]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e90e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e914:	f7fb fe76 	bl	800a604 <HAL_GetTick>
 800e918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e91a:	e008      	b.n	800e92e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e91c:	f7fb fe72 	bl	800a604 <HAL_GetTick>
 800e920:	4602      	mov	r2, r0
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	2b02      	cmp	r3, #2
 800e928:	d901      	bls.n	800e92e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800e92a:	2303      	movs	r3, #3
 800e92c:	e045      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e92e:	4b03      	ldr	r3, [pc, #12]	; (800e93c <HAL_RCC_OscConfig+0x4d0>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1f0      	bne.n	800e91c <HAL_RCC_OscConfig+0x4b0>
 800e93a:	e03d      	b.n	800e9b8 <HAL_RCC_OscConfig+0x54c>
 800e93c:	40023800 	.word	0x40023800
 800e940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800e944:	4b1f      	ldr	r3, [pc, #124]	; (800e9c4 <HAL_RCC_OscConfig+0x558>)
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d030      	beq.n	800e9b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d129      	bne.n	800e9b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d122      	bne.n	800e9b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e974:	4013      	ands	r3, r2
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e97a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d119      	bne.n	800e9b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e98a:	085b      	lsrs	r3, r3, #1
 800e98c:	3b01      	subs	r3, #1
 800e98e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e990:	429a      	cmp	r2, r3
 800e992:	d10f      	bne.n	800e9b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d107      	bne.n	800e9b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d001      	beq.n	800e9b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e000      	b.n	800e9ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3718      	adds	r7, #24
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	40023800 	.word	0x40023800

0800e9c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d101      	bne.n	800e9e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	e0d0      	b.n	800eb82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e9e0:	4b6a      	ldr	r3, [pc, #424]	; (800eb8c <HAL_RCC_ClockConfig+0x1c4>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f003 030f 	and.w	r3, r3, #15
 800e9e8:	683a      	ldr	r2, [r7, #0]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d910      	bls.n	800ea10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e9ee:	4b67      	ldr	r3, [pc, #412]	; (800eb8c <HAL_RCC_ClockConfig+0x1c4>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f023 020f 	bic.w	r2, r3, #15
 800e9f6:	4965      	ldr	r1, [pc, #404]	; (800eb8c <HAL_RCC_ClockConfig+0x1c4>)
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	4313      	orrs	r3, r2
 800e9fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e9fe:	4b63      	ldr	r3, [pc, #396]	; (800eb8c <HAL_RCC_ClockConfig+0x1c4>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f003 030f 	and.w	r3, r3, #15
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d001      	beq.n	800ea10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	e0b8      	b.n	800eb82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f003 0302 	and.w	r3, r3, #2
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d020      	beq.n	800ea5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f003 0304 	and.w	r3, r3, #4
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d005      	beq.n	800ea34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ea28:	4b59      	ldr	r3, [pc, #356]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ea2a:	689b      	ldr	r3, [r3, #8]
 800ea2c:	4a58      	ldr	r2, [pc, #352]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ea2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ea32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f003 0308 	and.w	r3, r3, #8
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d005      	beq.n	800ea4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ea40:	4b53      	ldr	r3, [pc, #332]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	4a52      	ldr	r2, [pc, #328]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ea46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ea4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ea4c:	4b50      	ldr	r3, [pc, #320]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	494d      	ldr	r1, [pc, #308]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d040      	beq.n	800eaec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d107      	bne.n	800ea82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea72:	4b47      	ldr	r3, [pc, #284]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d115      	bne.n	800eaaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e07f      	b.n	800eb82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d107      	bne.n	800ea9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea8a:	4b41      	ldr	r3, [pc, #260]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d109      	bne.n	800eaaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ea96:	2301      	movs	r3, #1
 800ea98:	e073      	b.n	800eb82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea9a:	4b3d      	ldr	r3, [pc, #244]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f003 0302 	and.w	r3, r3, #2
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d101      	bne.n	800eaaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e06b      	b.n	800eb82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eaaa:	4b39      	ldr	r3, [pc, #228]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	f023 0203 	bic.w	r2, r3, #3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	4936      	ldr	r1, [pc, #216]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800eab8:	4313      	orrs	r3, r2
 800eaba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eabc:	f7fb fda2 	bl	800a604 <HAL_GetTick>
 800eac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eac2:	e00a      	b.n	800eada <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eac4:	f7fb fd9e 	bl	800a604 <HAL_GetTick>
 800eac8:	4602      	mov	r2, r0
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	1ad3      	subs	r3, r2, r3
 800eace:	f241 3288 	movw	r2, #5000	; 0x1388
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d901      	bls.n	800eada <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ead6:	2303      	movs	r3, #3
 800ead8:	e053      	b.n	800eb82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eada:	4b2d      	ldr	r3, [pc, #180]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	f003 020c 	and.w	r2, r3, #12
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d1eb      	bne.n	800eac4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eaec:	4b27      	ldr	r3, [pc, #156]	; (800eb8c <HAL_RCC_ClockConfig+0x1c4>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f003 030f 	and.w	r3, r3, #15
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d210      	bcs.n	800eb1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eafa:	4b24      	ldr	r3, [pc, #144]	; (800eb8c <HAL_RCC_ClockConfig+0x1c4>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f023 020f 	bic.w	r2, r3, #15
 800eb02:	4922      	ldr	r1, [pc, #136]	; (800eb8c <HAL_RCC_ClockConfig+0x1c4>)
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb0a:	4b20      	ldr	r3, [pc, #128]	; (800eb8c <HAL_RCC_ClockConfig+0x1c4>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f003 030f 	and.w	r3, r3, #15
 800eb12:	683a      	ldr	r2, [r7, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d001      	beq.n	800eb1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e032      	b.n	800eb82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f003 0304 	and.w	r3, r3, #4
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d008      	beq.n	800eb3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eb28:	4b19      	ldr	r3, [pc, #100]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	4916      	ldr	r1, [pc, #88]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800eb36:	4313      	orrs	r3, r2
 800eb38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f003 0308 	and.w	r3, r3, #8
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d009      	beq.n	800eb5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800eb46:	4b12      	ldr	r3, [pc, #72]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800eb48:	689b      	ldr	r3, [r3, #8]
 800eb4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	490e      	ldr	r1, [pc, #56]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800eb56:	4313      	orrs	r3, r2
 800eb58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800eb5a:	f000 f821 	bl	800eba0 <HAL_RCC_GetSysClockFreq>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	4b0b      	ldr	r3, [pc, #44]	; (800eb90 <HAL_RCC_ClockConfig+0x1c8>)
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	091b      	lsrs	r3, r3, #4
 800eb66:	f003 030f 	and.w	r3, r3, #15
 800eb6a:	490a      	ldr	r1, [pc, #40]	; (800eb94 <HAL_RCC_ClockConfig+0x1cc>)
 800eb6c:	5ccb      	ldrb	r3, [r1, r3]
 800eb6e:	fa22 f303 	lsr.w	r3, r2, r3
 800eb72:	4a09      	ldr	r2, [pc, #36]	; (800eb98 <HAL_RCC_ClockConfig+0x1d0>)
 800eb74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800eb76:	4b09      	ldr	r3, [pc, #36]	; (800eb9c <HAL_RCC_ClockConfig+0x1d4>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7f3 ff7a 	bl	8002a74 <HAL_InitTick>

  return HAL_OK;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	40023c00 	.word	0x40023c00
 800eb90:	40023800 	.word	0x40023800
 800eb94:	0802be24 	.word	0x0802be24
 800eb98:	20000014 	.word	0x20000014
 800eb9c:	20000018 	.word	0x20000018

0800eba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eba0:	b5b0      	push	{r4, r5, r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800eba6:	2100      	movs	r1, #0
 800eba8:	6079      	str	r1, [r7, #4]
 800ebaa:	2100      	movs	r1, #0
 800ebac:	60f9      	str	r1, [r7, #12]
 800ebae:	2100      	movs	r1, #0
 800ebb0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ebb6:	4952      	ldr	r1, [pc, #328]	; (800ed00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ebb8:	6889      	ldr	r1, [r1, #8]
 800ebba:	f001 010c 	and.w	r1, r1, #12
 800ebbe:	2908      	cmp	r1, #8
 800ebc0:	d00d      	beq.n	800ebde <HAL_RCC_GetSysClockFreq+0x3e>
 800ebc2:	2908      	cmp	r1, #8
 800ebc4:	f200 8094 	bhi.w	800ecf0 <HAL_RCC_GetSysClockFreq+0x150>
 800ebc8:	2900      	cmp	r1, #0
 800ebca:	d002      	beq.n	800ebd2 <HAL_RCC_GetSysClockFreq+0x32>
 800ebcc:	2904      	cmp	r1, #4
 800ebce:	d003      	beq.n	800ebd8 <HAL_RCC_GetSysClockFreq+0x38>
 800ebd0:	e08e      	b.n	800ecf0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ebd2:	4b4c      	ldr	r3, [pc, #304]	; (800ed04 <HAL_RCC_GetSysClockFreq+0x164>)
 800ebd4:	60bb      	str	r3, [r7, #8]
      break;
 800ebd6:	e08e      	b.n	800ecf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ebd8:	4b4b      	ldr	r3, [pc, #300]	; (800ed08 <HAL_RCC_GetSysClockFreq+0x168>)
 800ebda:	60bb      	str	r3, [r7, #8]
      break;
 800ebdc:	e08b      	b.n	800ecf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ebde:	4948      	ldr	r1, [pc, #288]	; (800ed00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ebe0:	6849      	ldr	r1, [r1, #4]
 800ebe2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800ebe6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ebe8:	4945      	ldr	r1, [pc, #276]	; (800ed00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ebea:	6849      	ldr	r1, [r1, #4]
 800ebec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800ebf0:	2900      	cmp	r1, #0
 800ebf2:	d024      	beq.n	800ec3e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ebf4:	4942      	ldr	r1, [pc, #264]	; (800ed00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ebf6:	6849      	ldr	r1, [r1, #4]
 800ebf8:	0989      	lsrs	r1, r1, #6
 800ebfa:	4608      	mov	r0, r1
 800ebfc:	f04f 0100 	mov.w	r1, #0
 800ec00:	f240 14ff 	movw	r4, #511	; 0x1ff
 800ec04:	f04f 0500 	mov.w	r5, #0
 800ec08:	ea00 0204 	and.w	r2, r0, r4
 800ec0c:	ea01 0305 	and.w	r3, r1, r5
 800ec10:	493d      	ldr	r1, [pc, #244]	; (800ed08 <HAL_RCC_GetSysClockFreq+0x168>)
 800ec12:	fb01 f003 	mul.w	r0, r1, r3
 800ec16:	2100      	movs	r1, #0
 800ec18:	fb01 f102 	mul.w	r1, r1, r2
 800ec1c:	1844      	adds	r4, r0, r1
 800ec1e:	493a      	ldr	r1, [pc, #232]	; (800ed08 <HAL_RCC_GetSysClockFreq+0x168>)
 800ec20:	fba2 0101 	umull	r0, r1, r2, r1
 800ec24:	1863      	adds	r3, r4, r1
 800ec26:	4619      	mov	r1, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	f04f 0300 	mov.w	r3, #0
 800ec30:	f7f1 fd1a 	bl	8000668 <__aeabi_uldivmod>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4613      	mov	r3, r2
 800ec3a:	60fb      	str	r3, [r7, #12]
 800ec3c:	e04a      	b.n	800ecd4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec3e:	4b30      	ldr	r3, [pc, #192]	; (800ed00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	099b      	lsrs	r3, r3, #6
 800ec44:	461a      	mov	r2, r3
 800ec46:	f04f 0300 	mov.w	r3, #0
 800ec4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ec4e:	f04f 0100 	mov.w	r1, #0
 800ec52:	ea02 0400 	and.w	r4, r2, r0
 800ec56:	ea03 0501 	and.w	r5, r3, r1
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	4629      	mov	r1, r5
 800ec5e:	f04f 0200 	mov.w	r2, #0
 800ec62:	f04f 0300 	mov.w	r3, #0
 800ec66:	014b      	lsls	r3, r1, #5
 800ec68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ec6c:	0142      	lsls	r2, r0, #5
 800ec6e:	4610      	mov	r0, r2
 800ec70:	4619      	mov	r1, r3
 800ec72:	1b00      	subs	r0, r0, r4
 800ec74:	eb61 0105 	sbc.w	r1, r1, r5
 800ec78:	f04f 0200 	mov.w	r2, #0
 800ec7c:	f04f 0300 	mov.w	r3, #0
 800ec80:	018b      	lsls	r3, r1, #6
 800ec82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ec86:	0182      	lsls	r2, r0, #6
 800ec88:	1a12      	subs	r2, r2, r0
 800ec8a:	eb63 0301 	sbc.w	r3, r3, r1
 800ec8e:	f04f 0000 	mov.w	r0, #0
 800ec92:	f04f 0100 	mov.w	r1, #0
 800ec96:	00d9      	lsls	r1, r3, #3
 800ec98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ec9c:	00d0      	lsls	r0, r2, #3
 800ec9e:	4602      	mov	r2, r0
 800eca0:	460b      	mov	r3, r1
 800eca2:	1912      	adds	r2, r2, r4
 800eca4:	eb45 0303 	adc.w	r3, r5, r3
 800eca8:	f04f 0000 	mov.w	r0, #0
 800ecac:	f04f 0100 	mov.w	r1, #0
 800ecb0:	0299      	lsls	r1, r3, #10
 800ecb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ecb6:	0290      	lsls	r0, r2, #10
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	4610      	mov	r0, r2
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	f04f 0300 	mov.w	r3, #0
 800ecc8:	f7f1 fcce 	bl	8000668 <__aeabi_uldivmod>
 800eccc:	4602      	mov	r2, r0
 800ecce:	460b      	mov	r3, r1
 800ecd0:	4613      	mov	r3, r2
 800ecd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ecd4:	4b0a      	ldr	r3, [pc, #40]	; (800ed00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	0c1b      	lsrs	r3, r3, #16
 800ecda:	f003 0303 	and.w	r3, r3, #3
 800ecde:	3301      	adds	r3, #1
 800ece0:	005b      	lsls	r3, r3, #1
 800ece2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800ece4:	68fa      	ldr	r2, [r7, #12]
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecec:	60bb      	str	r3, [r7, #8]
      break;
 800ecee:	e002      	b.n	800ecf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ecf0:	4b04      	ldr	r3, [pc, #16]	; (800ed04 <HAL_RCC_GetSysClockFreq+0x164>)
 800ecf2:	60bb      	str	r3, [r7, #8]
      break;
 800ecf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ecf6:	68bb      	ldr	r3, [r7, #8]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bdb0      	pop	{r4, r5, r7, pc}
 800ed00:	40023800 	.word	0x40023800
 800ed04:	00f42400 	.word	0x00f42400
 800ed08:	017d7840 	.word	0x017d7840

0800ed0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ed10:	4b03      	ldr	r3, [pc, #12]	; (800ed20 <HAL_RCC_GetHCLKFreq+0x14>)
 800ed12:	681b      	ldr	r3, [r3, #0]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr
 800ed1e:	bf00      	nop
 800ed20:	20000014 	.word	0x20000014

0800ed24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ed28:	f7ff fff0 	bl	800ed0c <HAL_RCC_GetHCLKFreq>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	0a9b      	lsrs	r3, r3, #10
 800ed34:	f003 0307 	and.w	r3, r3, #7
 800ed38:	4903      	ldr	r1, [pc, #12]	; (800ed48 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ed3a:	5ccb      	ldrb	r3, [r1, r3]
 800ed3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	40023800 	.word	0x40023800
 800ed48:	0802be34 	.word	0x0802be34

0800ed4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	220f      	movs	r2, #15
 800ed5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ed5c:	4b12      	ldr	r3, [pc, #72]	; (800eda8 <HAL_RCC_GetClockConfig+0x5c>)
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	f003 0203 	and.w	r2, r3, #3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ed68:	4b0f      	ldr	r3, [pc, #60]	; (800eda8 <HAL_RCC_GetClockConfig+0x5c>)
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ed74:	4b0c      	ldr	r3, [pc, #48]	; (800eda8 <HAL_RCC_GetClockConfig+0x5c>)
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ed80:	4b09      	ldr	r3, [pc, #36]	; (800eda8 <HAL_RCC_GetClockConfig+0x5c>)
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	08db      	lsrs	r3, r3, #3
 800ed86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ed8e:	4b07      	ldr	r3, [pc, #28]	; (800edac <HAL_RCC_GetClockConfig+0x60>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f003 020f 	and.w	r2, r3, #15
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	601a      	str	r2, [r3, #0]
}
 800ed9a:	bf00      	nop
 800ed9c:	370c      	adds	r7, #12
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	40023800 	.word	0x40023800
 800edac:	40023c00 	.word	0x40023c00

0800edb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b088      	sub	sp, #32
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800edb8:	2300      	movs	r3, #0
 800edba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f003 0301 	and.w	r3, r3, #1
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d012      	beq.n	800edfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800edd8:	4b69      	ldr	r3, [pc, #420]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	4a68      	ldr	r2, [pc, #416]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800edde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ede2:	6093      	str	r3, [r2, #8]
 800ede4:	4b66      	ldr	r3, [pc, #408]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ede6:	689a      	ldr	r2, [r3, #8]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edec:	4964      	ldr	r1, [pc, #400]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800edee:	4313      	orrs	r3, r2
 800edf0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d101      	bne.n	800edfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800edfa:	2301      	movs	r3, #1
 800edfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d017      	beq.n	800ee3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ee0a:	4b5d      	ldr	r3, [pc, #372]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee18:	4959      	ldr	r1, [pc, #356]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee28:	d101      	bne.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d101      	bne.n	800ee3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ee36:	2301      	movs	r3, #1
 800ee38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d017      	beq.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ee46:	4b4e      	ldr	r3, [pc, #312]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee54:	494a      	ldr	r1, [pc, #296]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee56:	4313      	orrs	r3, r2
 800ee58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee64:	d101      	bne.n	800ee6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ee66:	2301      	movs	r3, #1
 800ee68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d101      	bne.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ee72:	2301      	movs	r3, #1
 800ee74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ee82:	2301      	movs	r3, #1
 800ee84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f003 0320 	and.w	r3, r3, #32
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	f000 808b 	beq.w	800efaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ee94:	4b3a      	ldr	r3, [pc, #232]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee98:	4a39      	ldr	r2, [pc, #228]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee9e:	6413      	str	r3, [r2, #64]	; 0x40
 800eea0:	4b37      	ldr	r3, [pc, #220]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800eea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eea8:	60bb      	str	r3, [r7, #8]
 800eeaa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800eeac:	4b35      	ldr	r3, [pc, #212]	; (800ef84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a34      	ldr	r2, [pc, #208]	; (800ef84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800eeb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eeb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eeb8:	f7fb fba4 	bl	800a604 <HAL_GetTick>
 800eebc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800eebe:	e008      	b.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eec0:	f7fb fba0 	bl	800a604 <HAL_GetTick>
 800eec4:	4602      	mov	r2, r0
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	2b64      	cmp	r3, #100	; 0x64
 800eecc:	d901      	bls.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800eece:	2303      	movs	r3, #3
 800eed0:	e38f      	b.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800eed2:	4b2c      	ldr	r3, [pc, #176]	; (800ef84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d0f0      	beq.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800eede:	4b28      	ldr	r3, [pc, #160]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800eee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eee6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d035      	beq.n	800ef5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eef6:	693a      	ldr	r2, [r7, #16]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d02e      	beq.n	800ef5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800eefc:	4b20      	ldr	r3, [pc, #128]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800eefe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ef06:	4b1e      	ldr	r3, [pc, #120]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ef08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef0a:	4a1d      	ldr	r2, [pc, #116]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ef0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ef10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ef12:	4b1b      	ldr	r3, [pc, #108]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ef14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef16:	4a1a      	ldr	r2, [pc, #104]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ef18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ef1e:	4a18      	ldr	r2, [pc, #96]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ef24:	4b16      	ldr	r3, [pc, #88]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ef26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef28:	f003 0301 	and.w	r3, r3, #1
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d114      	bne.n	800ef5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef30:	f7fb fb68 	bl	800a604 <HAL_GetTick>
 800ef34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef36:	e00a      	b.n	800ef4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef38:	f7fb fb64 	bl	800a604 <HAL_GetTick>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d901      	bls.n	800ef4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ef4a:	2303      	movs	r3, #3
 800ef4c:	e351      	b.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef4e:	4b0c      	ldr	r3, [pc, #48]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ef50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef52:	f003 0302 	and.w	r3, r3, #2
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d0ee      	beq.n	800ef38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef66:	d111      	bne.n	800ef8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ef68:	4b05      	ldr	r3, [pc, #20]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ef6a:	689b      	ldr	r3, [r3, #8]
 800ef6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ef74:	4b04      	ldr	r3, [pc, #16]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ef76:	400b      	ands	r3, r1
 800ef78:	4901      	ldr	r1, [pc, #4]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	608b      	str	r3, [r1, #8]
 800ef7e:	e00b      	b.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ef80:	40023800 	.word	0x40023800
 800ef84:	40007000 	.word	0x40007000
 800ef88:	0ffffcff 	.word	0x0ffffcff
 800ef8c:	4bb3      	ldr	r3, [pc, #716]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef8e:	689b      	ldr	r3, [r3, #8]
 800ef90:	4ab2      	ldr	r2, [pc, #712]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ef96:	6093      	str	r3, [r2, #8]
 800ef98:	4bb0      	ldr	r3, [pc, #704]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800efa4:	49ad      	ldr	r1, [pc, #692]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efa6:	4313      	orrs	r3, r2
 800efa8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f003 0310 	and.w	r3, r3, #16
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d010      	beq.n	800efd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800efb6:	4ba9      	ldr	r3, [pc, #676]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efbc:	4aa7      	ldr	r2, [pc, #668]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800efc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800efc6:	4ba5      	ldr	r3, [pc, #660]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd0:	49a2      	ldr	r1, [pc, #648]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efd2:	4313      	orrs	r3, r2
 800efd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00a      	beq.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800efe4:	4b9d      	ldr	r3, [pc, #628]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eff2:	499a      	ldr	r1, [pc, #616]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800eff4:	4313      	orrs	r3, r2
 800eff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00a      	beq.n	800f01c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f006:	4b95      	ldr	r3, [pc, #596]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f00c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f014:	4991      	ldr	r1, [pc, #580]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f016:	4313      	orrs	r3, r2
 800f018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f024:	2b00      	cmp	r3, #0
 800f026:	d00a      	beq.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f028:	4b8c      	ldr	r3, [pc, #560]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f02e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f036:	4989      	ldr	r1, [pc, #548]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f038:	4313      	orrs	r3, r2
 800f03a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00a      	beq.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f04a:	4b84      	ldr	r3, [pc, #528]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f050:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f058:	4980      	ldr	r1, [pc, #512]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f05a:	4313      	orrs	r3, r2
 800f05c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00a      	beq.n	800f082 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f06c:	4b7b      	ldr	r3, [pc, #492]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f072:	f023 0203 	bic.w	r2, r3, #3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f07a:	4978      	ldr	r1, [pc, #480]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f07c:	4313      	orrs	r3, r2
 800f07e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00a      	beq.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f08e:	4b73      	ldr	r3, [pc, #460]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f094:	f023 020c 	bic.w	r2, r3, #12
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f09c:	496f      	ldr	r1, [pc, #444]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00a      	beq.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f0b0:	4b6a      	ldr	r3, [pc, #424]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0be:	4967      	ldr	r1, [pc, #412]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d00a      	beq.n	800f0e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f0d2:	4b62      	ldr	r3, [pc, #392]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f0d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0e0:	495e      	ldr	r1, [pc, #376]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00a      	beq.n	800f10a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f0f4:	4b59      	ldr	r3, [pc, #356]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f102:	4956      	ldr	r1, [pc, #344]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f104:	4313      	orrs	r3, r2
 800f106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f112:	2b00      	cmp	r3, #0
 800f114:	d00a      	beq.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f116:	4b51      	ldr	r3, [pc, #324]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f11c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f124:	494d      	ldr	r1, [pc, #308]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f126:	4313      	orrs	r3, r2
 800f128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00a      	beq.n	800f14e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f138:	4b48      	ldr	r3, [pc, #288]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f13e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f146:	4945      	ldr	r1, [pc, #276]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f148:	4313      	orrs	r3, r2
 800f14a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f156:	2b00      	cmp	r3, #0
 800f158:	d00a      	beq.n	800f170 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f15a:	4b40      	ldr	r3, [pc, #256]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f168:	493c      	ldr	r1, [pc, #240]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f16a:	4313      	orrs	r3, r2
 800f16c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d00a      	beq.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f17c:	4b37      	ldr	r3, [pc, #220]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f182:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f18a:	4934      	ldr	r1, [pc, #208]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f18c:	4313      	orrs	r3, r2
 800f18e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d011      	beq.n	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f19e:	4b2f      	ldr	r3, [pc, #188]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ac:	492b      	ldr	r1, [pc, #172]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f1bc:	d101      	bne.n	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f003 0308 	and.w	r3, r3, #8
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00a      	beq.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f1de:	4b1f      	ldr	r3, [pc, #124]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1ec:	491b      	ldr	r1, [pc, #108]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00b      	beq.n	800f218 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f200:	4b16      	ldr	r3, [pc, #88]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f206:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f210:	4912      	ldr	r1, [pc, #72]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f212:	4313      	orrs	r3, r2
 800f214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00b      	beq.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f224:	4b0d      	ldr	r3, [pc, #52]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f22a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f234:	4909      	ldr	r1, [pc, #36]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f236:	4313      	orrs	r3, r2
 800f238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00f      	beq.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f248:	4b04      	ldr	r3, [pc, #16]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f24a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f24e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f258:	e002      	b.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800f25a:	bf00      	nop
 800f25c:	40023800 	.word	0x40023800
 800f260:	4986      	ldr	r1, [pc, #536]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f262:	4313      	orrs	r3, r2
 800f264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00b      	beq.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f274:	4b81      	ldr	r3, [pc, #516]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f27a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f284:	497d      	ldr	r1, [pc, #500]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f286:	4313      	orrs	r3, r2
 800f288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d006      	beq.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f000 80d6 	beq.w	800f44c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f2a0:	4b76      	ldr	r3, [pc, #472]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a75      	ldr	r2, [pc, #468]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f2a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f2aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2ac:	f7fb f9aa 	bl	800a604 <HAL_GetTick>
 800f2b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f2b2:	e008      	b.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f2b4:	f7fb f9a6 	bl	800a604 <HAL_GetTick>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	1ad3      	subs	r3, r2, r3
 800f2be:	2b64      	cmp	r3, #100	; 0x64
 800f2c0:	d901      	bls.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f2c2:	2303      	movs	r3, #3
 800f2c4:	e195      	b.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f2c6:	4b6d      	ldr	r3, [pc, #436]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d1f0      	bne.n	800f2b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f003 0301 	and.w	r3, r3, #1
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d021      	beq.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d11d      	bne.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f2e6:	4b65      	ldr	r3, [pc, #404]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f2e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ec:	0c1b      	lsrs	r3, r3, #16
 800f2ee:	f003 0303 	and.w	r3, r3, #3
 800f2f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f2f4:	4b61      	ldr	r3, [pc, #388]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f2f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2fa:	0e1b      	lsrs	r3, r3, #24
 800f2fc:	f003 030f 	and.w	r3, r3, #15
 800f300:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	019a      	lsls	r2, r3, #6
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	041b      	lsls	r3, r3, #16
 800f30c:	431a      	orrs	r2, r3
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	061b      	lsls	r3, r3, #24
 800f312:	431a      	orrs	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	071b      	lsls	r3, r3, #28
 800f31a:	4958      	ldr	r1, [pc, #352]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f31c:	4313      	orrs	r3, r2
 800f31e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d004      	beq.n	800f338 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f336:	d00a      	beq.n	800f34e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f340:	2b00      	cmp	r3, #0
 800f342:	d02e      	beq.n	800f3a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f34c:	d129      	bne.n	800f3a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f34e:	4b4b      	ldr	r3, [pc, #300]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f354:	0c1b      	lsrs	r3, r3, #16
 800f356:	f003 0303 	and.w	r3, r3, #3
 800f35a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f35c:	4b47      	ldr	r3, [pc, #284]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f35e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f362:	0f1b      	lsrs	r3, r3, #28
 800f364:	f003 0307 	and.w	r3, r3, #7
 800f368:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	019a      	lsls	r2, r3, #6
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	041b      	lsls	r3, r3, #16
 800f374:	431a      	orrs	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	061b      	lsls	r3, r3, #24
 800f37c:	431a      	orrs	r2, r3
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	071b      	lsls	r3, r3, #28
 800f382:	493e      	ldr	r1, [pc, #248]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f384:	4313      	orrs	r3, r2
 800f386:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f38a:	4b3c      	ldr	r3, [pc, #240]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f38c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f390:	f023 021f 	bic.w	r2, r3, #31
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f398:	3b01      	subs	r3, #1
 800f39a:	4938      	ldr	r1, [pc, #224]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f39c:	4313      	orrs	r3, r2
 800f39e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d01d      	beq.n	800f3ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f3ae:	4b33      	ldr	r3, [pc, #204]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f3b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3b4:	0e1b      	lsrs	r3, r3, #24
 800f3b6:	f003 030f 	and.w	r3, r3, #15
 800f3ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f3bc:	4b2f      	ldr	r3, [pc, #188]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3c2:	0f1b      	lsrs	r3, r3, #28
 800f3c4:	f003 0307 	and.w	r3, r3, #7
 800f3c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	019a      	lsls	r2, r3, #6
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	691b      	ldr	r3, [r3, #16]
 800f3d4:	041b      	lsls	r3, r3, #16
 800f3d6:	431a      	orrs	r2, r3
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	061b      	lsls	r3, r3, #24
 800f3dc:	431a      	orrs	r2, r3
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	071b      	lsls	r3, r3, #28
 800f3e2:	4926      	ldr	r1, [pc, #152]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d011      	beq.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	019a      	lsls	r2, r3, #6
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	041b      	lsls	r3, r3, #16
 800f402:	431a      	orrs	r2, r3
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	061b      	lsls	r3, r3, #24
 800f40a:	431a      	orrs	r2, r3
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	071b      	lsls	r3, r3, #28
 800f412:	491a      	ldr	r1, [pc, #104]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f414:	4313      	orrs	r3, r2
 800f416:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f41a:	4b18      	ldr	r3, [pc, #96]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4a17      	ldr	r2, [pc, #92]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f420:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f426:	f7fb f8ed 	bl	800a604 <HAL_GetTick>
 800f42a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f42c:	e008      	b.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f42e:	f7fb f8e9 	bl	800a604 <HAL_GetTick>
 800f432:	4602      	mov	r2, r0
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	1ad3      	subs	r3, r2, r3
 800f438:	2b64      	cmp	r3, #100	; 0x64
 800f43a:	d901      	bls.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f43c:	2303      	movs	r3, #3
 800f43e:	e0d8      	b.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f440:	4b0e      	ldr	r3, [pc, #56]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d0f0      	beq.n	800f42e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	2b01      	cmp	r3, #1
 800f450:	f040 80ce 	bne.w	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800f454:	4b09      	ldr	r3, [pc, #36]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4a08      	ldr	r2, [pc, #32]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f45a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f45e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f460:	f7fb f8d0 	bl	800a604 <HAL_GetTick>
 800f464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f466:	e00b      	b.n	800f480 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f468:	f7fb f8cc 	bl	800a604 <HAL_GetTick>
 800f46c:	4602      	mov	r2, r0
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	2b64      	cmp	r3, #100	; 0x64
 800f474:	d904      	bls.n	800f480 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f476:	2303      	movs	r3, #3
 800f478:	e0bb      	b.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800f47a:	bf00      	nop
 800f47c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f480:	4b5e      	ldr	r3, [pc, #376]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f48c:	d0ec      	beq.n	800f468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f496:	2b00      	cmp	r3, #0
 800f498:	d003      	beq.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d009      	beq.n	800f4b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d02e      	beq.n	800f50c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d12a      	bne.n	800f50c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f4b6:	4b51      	ldr	r3, [pc, #324]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4bc:	0c1b      	lsrs	r3, r3, #16
 800f4be:	f003 0303 	and.w	r3, r3, #3
 800f4c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f4c4:	4b4d      	ldr	r3, [pc, #308]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4ca:	0f1b      	lsrs	r3, r3, #28
 800f4cc:	f003 0307 	and.w	r3, r3, #7
 800f4d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	695b      	ldr	r3, [r3, #20]
 800f4d6:	019a      	lsls	r2, r3, #6
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	041b      	lsls	r3, r3, #16
 800f4dc:	431a      	orrs	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	699b      	ldr	r3, [r3, #24]
 800f4e2:	061b      	lsls	r3, r3, #24
 800f4e4:	431a      	orrs	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	071b      	lsls	r3, r3, #28
 800f4ea:	4944      	ldr	r1, [pc, #272]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f4f2:	4b42      	ldr	r3, [pc, #264]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f4f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f500:	3b01      	subs	r3, #1
 800f502:	021b      	lsls	r3, r3, #8
 800f504:	493d      	ldr	r1, [pc, #244]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f506:	4313      	orrs	r3, r2
 800f508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f514:	2b00      	cmp	r3, #0
 800f516:	d022      	beq.n	800f55e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f51c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f520:	d11d      	bne.n	800f55e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f522:	4b36      	ldr	r3, [pc, #216]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f528:	0e1b      	lsrs	r3, r3, #24
 800f52a:	f003 030f 	and.w	r3, r3, #15
 800f52e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f530:	4b32      	ldr	r3, [pc, #200]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f536:	0f1b      	lsrs	r3, r3, #28
 800f538:	f003 0307 	and.w	r3, r3, #7
 800f53c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	695b      	ldr	r3, [r3, #20]
 800f542:	019a      	lsls	r2, r3, #6
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6a1b      	ldr	r3, [r3, #32]
 800f548:	041b      	lsls	r3, r3, #16
 800f54a:	431a      	orrs	r2, r3
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	061b      	lsls	r3, r3, #24
 800f550:	431a      	orrs	r2, r3
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	071b      	lsls	r3, r3, #28
 800f556:	4929      	ldr	r1, [pc, #164]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f558:	4313      	orrs	r3, r2
 800f55a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f003 0308 	and.w	r3, r3, #8
 800f566:	2b00      	cmp	r3, #0
 800f568:	d028      	beq.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f56a:	4b24      	ldr	r3, [pc, #144]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f570:	0e1b      	lsrs	r3, r3, #24
 800f572:	f003 030f 	and.w	r3, r3, #15
 800f576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f578:	4b20      	ldr	r3, [pc, #128]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f57e:	0c1b      	lsrs	r3, r3, #16
 800f580:	f003 0303 	and.w	r3, r3, #3
 800f584:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	695b      	ldr	r3, [r3, #20]
 800f58a:	019a      	lsls	r2, r3, #6
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	041b      	lsls	r3, r3, #16
 800f590:	431a      	orrs	r2, r3
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	061b      	lsls	r3, r3, #24
 800f596:	431a      	orrs	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	69db      	ldr	r3, [r3, #28]
 800f59c:	071b      	lsls	r3, r3, #28
 800f59e:	4917      	ldr	r1, [pc, #92]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f5a6:	4b15      	ldr	r3, [pc, #84]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b4:	4911      	ldr	r1, [pc, #68]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800f5bc:	4b0f      	ldr	r3, [pc, #60]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a0e      	ldr	r2, [pc, #56]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f5c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f5c8:	f7fb f81c 	bl	800a604 <HAL_GetTick>
 800f5cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f5ce:	e008      	b.n	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f5d0:	f7fb f818 	bl	800a604 <HAL_GetTick>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	1ad3      	subs	r3, r2, r3
 800f5da:	2b64      	cmp	r3, #100	; 0x64
 800f5dc:	d901      	bls.n	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f5de:	2303      	movs	r3, #3
 800f5e0:	e007      	b.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f5e2:	4b06      	ldr	r3, [pc, #24]	; (800f5fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f5ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5ee:	d1ef      	bne.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3720      	adds	r7, #32
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	40023800 	.word	0x40023800

0800f600 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d101      	bne.n	800f614 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800f610:	2301      	movs	r3, #1
 800f612:	e025      	b.n	800f660 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d106      	bne.n	800f62e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f7f2 fc29 	bl	8001e80 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2202      	movs	r2, #2
 800f632:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	3304      	adds	r3, #4
 800f63e:	4619      	mov	r1, r3
 800f640:	4610      	mov	r0, r2
 800f642:	f001 fdd1 	bl	80111e8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6818      	ldr	r0, [r3, #0]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	461a      	mov	r2, r3
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	f001 fe3b 	bl	80112cc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2201      	movs	r2, #1
 800f65a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800f65e:	2300      	movs	r3, #0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	2b02      	cmp	r3, #2
 800f67e:	d101      	bne.n	800f684 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800f680:	2302      	movs	r3, #2
 800f682:	e018      	b.n	800f6b6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2202      	movs	r2, #2
 800f688:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	68b9      	ldr	r1, [r7, #8]
 800f694:	4618      	mov	r0, r3
 800f696:	f001 fe99 	bl	80113cc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2b02      	cmp	r3, #2
 800f6a0:	d104      	bne.n	800f6ac <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2205      	movs	r2, #5
 800f6a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800f6aa:	e003      	b.n	800f6b4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b082      	sub	sp, #8
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
 800f6c6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	2b02      	cmp	r3, #2
 800f6d2:	d101      	bne.n	800f6d8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800f6d4:	2302      	movs	r3, #2
 800f6d6:	e00e      	b.n	800f6f6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2202      	movs	r2, #2
 800f6dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	6839      	ldr	r1, [r7, #0]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f001 fe94 	bl	8011414 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800f6f4:	2300      	movs	r3, #0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b082      	sub	sp, #8
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d101      	bne.n	800f710 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f70c:	2301      	movs	r3, #1
 800f70e:	e049      	b.n	800f7a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f716:	b2db      	uxtb	r3, r3
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d106      	bne.n	800f72a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f7f3 fc15 	bl	8002f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2202      	movs	r2, #2
 800f72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	3304      	adds	r3, #4
 800f73a:	4619      	mov	r1, r3
 800f73c:	4610      	mov	r0, r2
 800f73e:	f001 f8e9 	bl	8010914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2201      	movs	r2, #1
 800f746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2201      	movs	r2, #1
 800f756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2201      	movs	r2, #1
 800f75e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2201      	movs	r2, #1
 800f766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2201      	movs	r2, #1
 800f76e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2201      	movs	r2, #1
 800f776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2201      	movs	r2, #1
 800f77e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2201      	movs	r2, #1
 800f786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2201      	movs	r2, #1
 800f78e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2201      	movs	r2, #1
 800f796:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2201      	movs	r2, #1
 800f79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f7a2:	2300      	movs	r3, #0
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b085      	sub	sp, #20
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d001      	beq.n	800f7c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	e054      	b.n	800f86e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2202      	movs	r2, #2
 800f7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68da      	ldr	r2, [r3, #12]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f042 0201 	orr.w	r2, r2, #1
 800f7da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a26      	ldr	r2, [pc, #152]	; (800f87c <HAL_TIM_Base_Start_IT+0xd0>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d022      	beq.n	800f82c <HAL_TIM_Base_Start_IT+0x80>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7ee:	d01d      	beq.n	800f82c <HAL_TIM_Base_Start_IT+0x80>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4a22      	ldr	r2, [pc, #136]	; (800f880 <HAL_TIM_Base_Start_IT+0xd4>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d018      	beq.n	800f82c <HAL_TIM_Base_Start_IT+0x80>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4a21      	ldr	r2, [pc, #132]	; (800f884 <HAL_TIM_Base_Start_IT+0xd8>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d013      	beq.n	800f82c <HAL_TIM_Base_Start_IT+0x80>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a1f      	ldr	r2, [pc, #124]	; (800f888 <HAL_TIM_Base_Start_IT+0xdc>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d00e      	beq.n	800f82c <HAL_TIM_Base_Start_IT+0x80>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4a1e      	ldr	r2, [pc, #120]	; (800f88c <HAL_TIM_Base_Start_IT+0xe0>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d009      	beq.n	800f82c <HAL_TIM_Base_Start_IT+0x80>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4a1c      	ldr	r2, [pc, #112]	; (800f890 <HAL_TIM_Base_Start_IT+0xe4>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d004      	beq.n	800f82c <HAL_TIM_Base_Start_IT+0x80>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4a1b      	ldr	r2, [pc, #108]	; (800f894 <HAL_TIM_Base_Start_IT+0xe8>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d115      	bne.n	800f858 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	689a      	ldr	r2, [r3, #8]
 800f832:	4b19      	ldr	r3, [pc, #100]	; (800f898 <HAL_TIM_Base_Start_IT+0xec>)
 800f834:	4013      	ands	r3, r2
 800f836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2b06      	cmp	r3, #6
 800f83c:	d015      	beq.n	800f86a <HAL_TIM_Base_Start_IT+0xbe>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f844:	d011      	beq.n	800f86a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f042 0201 	orr.w	r2, r2, #1
 800f854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f856:	e008      	b.n	800f86a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f042 0201 	orr.w	r2, r2, #1
 800f866:	601a      	str	r2, [r3, #0]
 800f868:	e000      	b.n	800f86c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f86a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3714      	adds	r7, #20
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	40010000 	.word	0x40010000
 800f880:	40000400 	.word	0x40000400
 800f884:	40000800 	.word	0x40000800
 800f888:	40000c00 	.word	0x40000c00
 800f88c:	40010400 	.word	0x40010400
 800f890:	40014000 	.word	0x40014000
 800f894:	40001800 	.word	0x40001800
 800f898:	00010007 	.word	0x00010007

0800f89c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d101      	bne.n	800f8ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e049      	b.n	800f942 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d106      	bne.n	800f8c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f841 	bl	800f94a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4610      	mov	r0, r2
 800f8dc:	f001 f81a 	bl	8010914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2201      	movs	r2, #1
 800f904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2201      	movs	r2, #1
 800f90c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2201      	movs	r2, #1
 800f914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2201      	movs	r2, #1
 800f91c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2201      	movs	r2, #1
 800f924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2201      	movs	r2, #1
 800f92c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2201      	movs	r2, #1
 800f934:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2201      	movs	r2, #1
 800f93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f94a:	b480      	push	{r7}
 800f94c:	b083      	sub	sp, #12
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f952:	bf00      	nop
 800f954:	370c      	adds	r7, #12
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
	...

0800f960 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d109      	bne.n	800f984 <HAL_TIM_PWM_Start+0x24>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b01      	cmp	r3, #1
 800f97a:	bf14      	ite	ne
 800f97c:	2301      	movne	r3, #1
 800f97e:	2300      	moveq	r3, #0
 800f980:	b2db      	uxtb	r3, r3
 800f982:	e03c      	b.n	800f9fe <HAL_TIM_PWM_Start+0x9e>
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	2b04      	cmp	r3, #4
 800f988:	d109      	bne.n	800f99e <HAL_TIM_PWM_Start+0x3e>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f990:	b2db      	uxtb	r3, r3
 800f992:	2b01      	cmp	r3, #1
 800f994:	bf14      	ite	ne
 800f996:	2301      	movne	r3, #1
 800f998:	2300      	moveq	r3, #0
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	e02f      	b.n	800f9fe <HAL_TIM_PWM_Start+0x9e>
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	2b08      	cmp	r3, #8
 800f9a2:	d109      	bne.n	800f9b8 <HAL_TIM_PWM_Start+0x58>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9aa:	b2db      	uxtb	r3, r3
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	bf14      	ite	ne
 800f9b0:	2301      	movne	r3, #1
 800f9b2:	2300      	moveq	r3, #0
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	e022      	b.n	800f9fe <HAL_TIM_PWM_Start+0x9e>
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	2b0c      	cmp	r3, #12
 800f9bc:	d109      	bne.n	800f9d2 <HAL_TIM_PWM_Start+0x72>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	bf14      	ite	ne
 800f9ca:	2301      	movne	r3, #1
 800f9cc:	2300      	moveq	r3, #0
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	e015      	b.n	800f9fe <HAL_TIM_PWM_Start+0x9e>
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	2b10      	cmp	r3, #16
 800f9d6:	d109      	bne.n	800f9ec <HAL_TIM_PWM_Start+0x8c>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	bf14      	ite	ne
 800f9e4:	2301      	movne	r3, #1
 800f9e6:	2300      	moveq	r3, #0
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	e008      	b.n	800f9fe <HAL_TIM_PWM_Start+0x9e>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	bf14      	ite	ne
 800f9f8:	2301      	movne	r3, #1
 800f9fa:	2300      	moveq	r3, #0
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d001      	beq.n	800fa06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fa02:	2301      	movs	r3, #1
 800fa04:	e092      	b.n	800fb2c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d104      	bne.n	800fa16 <HAL_TIM_PWM_Start+0xb6>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2202      	movs	r2, #2
 800fa10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa14:	e023      	b.n	800fa5e <HAL_TIM_PWM_Start+0xfe>
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	2b04      	cmp	r3, #4
 800fa1a:	d104      	bne.n	800fa26 <HAL_TIM_PWM_Start+0xc6>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2202      	movs	r2, #2
 800fa20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa24:	e01b      	b.n	800fa5e <HAL_TIM_PWM_Start+0xfe>
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	2b08      	cmp	r3, #8
 800fa2a:	d104      	bne.n	800fa36 <HAL_TIM_PWM_Start+0xd6>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2202      	movs	r2, #2
 800fa30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa34:	e013      	b.n	800fa5e <HAL_TIM_PWM_Start+0xfe>
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	2b0c      	cmp	r3, #12
 800fa3a:	d104      	bne.n	800fa46 <HAL_TIM_PWM_Start+0xe6>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2202      	movs	r2, #2
 800fa40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa44:	e00b      	b.n	800fa5e <HAL_TIM_PWM_Start+0xfe>
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	2b10      	cmp	r3, #16
 800fa4a:	d104      	bne.n	800fa56 <HAL_TIM_PWM_Start+0xf6>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2202      	movs	r2, #2
 800fa50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa54:	e003      	b.n	800fa5e <HAL_TIM_PWM_Start+0xfe>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2202      	movs	r2, #2
 800fa5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2201      	movs	r2, #1
 800fa64:	6839      	ldr	r1, [r7, #0]
 800fa66:	4618      	mov	r0, r3
 800fa68:	f001 faec 	bl	8011044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a30      	ldr	r2, [pc, #192]	; (800fb34 <HAL_TIM_PWM_Start+0x1d4>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d004      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x120>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4a2f      	ldr	r2, [pc, #188]	; (800fb38 <HAL_TIM_PWM_Start+0x1d8>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d101      	bne.n	800fa84 <HAL_TIM_PWM_Start+0x124>
 800fa80:	2301      	movs	r3, #1
 800fa82:	e000      	b.n	800fa86 <HAL_TIM_PWM_Start+0x126>
 800fa84:	2300      	movs	r3, #0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d007      	beq.n	800fa9a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4a25      	ldr	r2, [pc, #148]	; (800fb34 <HAL_TIM_PWM_Start+0x1d4>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d022      	beq.n	800faea <HAL_TIM_PWM_Start+0x18a>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faac:	d01d      	beq.n	800faea <HAL_TIM_PWM_Start+0x18a>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4a22      	ldr	r2, [pc, #136]	; (800fb3c <HAL_TIM_PWM_Start+0x1dc>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d018      	beq.n	800faea <HAL_TIM_PWM_Start+0x18a>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a20      	ldr	r2, [pc, #128]	; (800fb40 <HAL_TIM_PWM_Start+0x1e0>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d013      	beq.n	800faea <HAL_TIM_PWM_Start+0x18a>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4a1f      	ldr	r2, [pc, #124]	; (800fb44 <HAL_TIM_PWM_Start+0x1e4>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d00e      	beq.n	800faea <HAL_TIM_PWM_Start+0x18a>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4a19      	ldr	r2, [pc, #100]	; (800fb38 <HAL_TIM_PWM_Start+0x1d8>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d009      	beq.n	800faea <HAL_TIM_PWM_Start+0x18a>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4a1b      	ldr	r2, [pc, #108]	; (800fb48 <HAL_TIM_PWM_Start+0x1e8>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d004      	beq.n	800faea <HAL_TIM_PWM_Start+0x18a>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4a19      	ldr	r2, [pc, #100]	; (800fb4c <HAL_TIM_PWM_Start+0x1ec>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d115      	bne.n	800fb16 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	689a      	ldr	r2, [r3, #8]
 800faf0:	4b17      	ldr	r3, [pc, #92]	; (800fb50 <HAL_TIM_PWM_Start+0x1f0>)
 800faf2:	4013      	ands	r3, r2
 800faf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2b06      	cmp	r3, #6
 800fafa:	d015      	beq.n	800fb28 <HAL_TIM_PWM_Start+0x1c8>
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb02:	d011      	beq.n	800fb28 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f042 0201 	orr.w	r2, r2, #1
 800fb12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb14:	e008      	b.n	800fb28 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f042 0201 	orr.w	r2, r2, #1
 800fb24:	601a      	str	r2, [r3, #0]
 800fb26:	e000      	b.n	800fb2a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3710      	adds	r7, #16
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	40010000 	.word	0x40010000
 800fb38:	40010400 	.word	0x40010400
 800fb3c:	40000400 	.word	0x40000400
 800fb40:	40000800 	.word	0x40000800
 800fb44:	40000c00 	.word	0x40000c00
 800fb48:	40014000 	.word	0x40014000
 800fb4c:	40001800 	.word	0x40001800
 800fb50:	00010007 	.word	0x00010007

0800fb54 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b086      	sub	sp, #24
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
 800fb60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d109      	bne.n	800fb7c <HAL_TIM_PWM_Start_DMA+0x28>
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	2b02      	cmp	r3, #2
 800fb72:	bf0c      	ite	eq
 800fb74:	2301      	moveq	r3, #1
 800fb76:	2300      	movne	r3, #0
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	e03c      	b.n	800fbf6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	2b04      	cmp	r3, #4
 800fb80:	d109      	bne.n	800fb96 <HAL_TIM_PWM_Start_DMA+0x42>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	2b02      	cmp	r3, #2
 800fb8c:	bf0c      	ite	eq
 800fb8e:	2301      	moveq	r3, #1
 800fb90:	2300      	movne	r3, #0
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	e02f      	b.n	800fbf6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	2b08      	cmp	r3, #8
 800fb9a:	d109      	bne.n	800fbb0 <HAL_TIM_PWM_Start_DMA+0x5c>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	bf0c      	ite	eq
 800fba8:	2301      	moveq	r3, #1
 800fbaa:	2300      	movne	r3, #0
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	e022      	b.n	800fbf6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	2b0c      	cmp	r3, #12
 800fbb4:	d109      	bne.n	800fbca <HAL_TIM_PWM_Start_DMA+0x76>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	2b02      	cmp	r3, #2
 800fbc0:	bf0c      	ite	eq
 800fbc2:	2301      	moveq	r3, #1
 800fbc4:	2300      	movne	r3, #0
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	e015      	b.n	800fbf6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2b10      	cmp	r3, #16
 800fbce:	d109      	bne.n	800fbe4 <HAL_TIM_PWM_Start_DMA+0x90>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	2b02      	cmp	r3, #2
 800fbda:	bf0c      	ite	eq
 800fbdc:	2301      	moveq	r3, #1
 800fbde:	2300      	movne	r3, #0
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	e008      	b.n	800fbf6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b02      	cmp	r3, #2
 800fbee:	bf0c      	ite	eq
 800fbf0:	2301      	moveq	r3, #1
 800fbf2:	2300      	movne	r3, #0
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d001      	beq.n	800fbfe <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800fbfa:	2302      	movs	r3, #2
 800fbfc:	e19c      	b.n	800ff38 <HAL_TIM_PWM_Start_DMA+0x3e4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d109      	bne.n	800fc18 <HAL_TIM_PWM_Start_DMA+0xc4>
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc0a:	b2db      	uxtb	r3, r3
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	bf0c      	ite	eq
 800fc10:	2301      	moveq	r3, #1
 800fc12:	2300      	movne	r3, #0
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	e03c      	b.n	800fc92 <HAL_TIM_PWM_Start_DMA+0x13e>
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	2b04      	cmp	r3, #4
 800fc1c:	d109      	bne.n	800fc32 <HAL_TIM_PWM_Start_DMA+0xde>
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	bf0c      	ite	eq
 800fc2a:	2301      	moveq	r3, #1
 800fc2c:	2300      	movne	r3, #0
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	e02f      	b.n	800fc92 <HAL_TIM_PWM_Start_DMA+0x13e>
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	2b08      	cmp	r3, #8
 800fc36:	d109      	bne.n	800fc4c <HAL_TIM_PWM_Start_DMA+0xf8>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	bf0c      	ite	eq
 800fc44:	2301      	moveq	r3, #1
 800fc46:	2300      	movne	r3, #0
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	e022      	b.n	800fc92 <HAL_TIM_PWM_Start_DMA+0x13e>
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	2b0c      	cmp	r3, #12
 800fc50:	d109      	bne.n	800fc66 <HAL_TIM_PWM_Start_DMA+0x112>
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	bf0c      	ite	eq
 800fc5e:	2301      	moveq	r3, #1
 800fc60:	2300      	movne	r3, #0
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	e015      	b.n	800fc92 <HAL_TIM_PWM_Start_DMA+0x13e>
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	2b10      	cmp	r3, #16
 800fc6a:	d109      	bne.n	800fc80 <HAL_TIM_PWM_Start_DMA+0x12c>
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	bf0c      	ite	eq
 800fc78:	2301      	moveq	r3, #1
 800fc7a:	2300      	movne	r3, #0
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	e008      	b.n	800fc92 <HAL_TIM_PWM_Start_DMA+0x13e>
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	bf0c      	ite	eq
 800fc8c:	2301      	moveq	r3, #1
 800fc8e:	2300      	movne	r3, #0
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d034      	beq.n	800fd00 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d104      	bne.n	800fca6 <HAL_TIM_PWM_Start_DMA+0x152>
 800fc9c:	887b      	ldrh	r3, [r7, #2]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 800fca2:	2301      	movs	r3, #1
 800fca4:	e148      	b.n	800ff38 <HAL_TIM_PWM_Start_DMA+0x3e4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d104      	bne.n	800fcb6 <HAL_TIM_PWM_Start_DMA+0x162>
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2202      	movs	r2, #2
 800fcb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fcb4:	e026      	b.n	800fd04 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	2b04      	cmp	r3, #4
 800fcba:	d104      	bne.n	800fcc6 <HAL_TIM_PWM_Start_DMA+0x172>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2202      	movs	r2, #2
 800fcc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fcc4:	e01e      	b.n	800fd04 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	2b08      	cmp	r3, #8
 800fcca:	d104      	bne.n	800fcd6 <HAL_TIM_PWM_Start_DMA+0x182>
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2202      	movs	r2, #2
 800fcd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fcd4:	e016      	b.n	800fd04 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	2b0c      	cmp	r3, #12
 800fcda:	d104      	bne.n	800fce6 <HAL_TIM_PWM_Start_DMA+0x192>
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2202      	movs	r2, #2
 800fce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fce4:	e00e      	b.n	800fd04 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	2b10      	cmp	r3, #16
 800fcea:	d104      	bne.n	800fcf6 <HAL_TIM_PWM_Start_DMA+0x1a2>
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2202      	movs	r2, #2
 800fcf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fcf4:	e006      	b.n	800fd04 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	2202      	movs	r2, #2
 800fcfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fcfe:	e001      	b.n	800fd04 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 800fd00:	2301      	movs	r3, #1
 800fd02:	e119      	b.n	800ff38 <HAL_TIM_PWM_Start_DMA+0x3e4>
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	2b0c      	cmp	r3, #12
 800fd08:	f200 80ae 	bhi.w	800fe68 <HAL_TIM_PWM_Start_DMA+0x314>
 800fd0c:	a201      	add	r2, pc, #4	; (adr r2, 800fd14 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800fd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd12:	bf00      	nop
 800fd14:	0800fd49 	.word	0x0800fd49
 800fd18:	0800fe69 	.word	0x0800fe69
 800fd1c:	0800fe69 	.word	0x0800fe69
 800fd20:	0800fe69 	.word	0x0800fe69
 800fd24:	0800fd91 	.word	0x0800fd91
 800fd28:	0800fe69 	.word	0x0800fe69
 800fd2c:	0800fe69 	.word	0x0800fe69
 800fd30:	0800fe69 	.word	0x0800fe69
 800fd34:	0800fdd9 	.word	0x0800fdd9
 800fd38:	0800fe69 	.word	0x0800fe69
 800fd3c:	0800fe69 	.word	0x0800fe69
 800fd40:	0800fe69 	.word	0x0800fe69
 800fd44:	0800fe21 	.word	0x0800fe21
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4c:	4a7c      	ldr	r2, [pc, #496]	; (800ff40 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800fd4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd54:	4a7b      	ldr	r2, [pc, #492]	; (800ff44 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800fd56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd5c:	4a7a      	ldr	r2, [pc, #488]	; (800ff48 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800fd5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3334      	adds	r3, #52	; 0x34
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	887b      	ldrh	r3, [r7, #2]
 800fd70:	f7fc f8a6 	bl	800bec0 <HAL_DMA_Start_IT>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d001      	beq.n	800fd7e <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e0dc      	b.n	800ff38 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	68da      	ldr	r2, [r3, #12]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd8c:	60da      	str	r2, [r3, #12]
      break;
 800fd8e:	e06c      	b.n	800fe6a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd94:	4a6a      	ldr	r2, [pc, #424]	; (800ff40 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800fd96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd9c:	4a69      	ldr	r2, [pc, #420]	; (800ff44 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800fd9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fda4:	4a68      	ldr	r2, [pc, #416]	; (800ff48 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800fda6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fdac:	6879      	ldr	r1, [r7, #4]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	3338      	adds	r3, #56	; 0x38
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	887b      	ldrh	r3, [r7, #2]
 800fdb8:	f7fc f882 	bl	800bec0 <HAL_DMA_Start_IT>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d001      	beq.n	800fdc6 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e0b8      	b.n	800ff38 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68da      	ldr	r2, [r3, #12]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fdd4:	60da      	str	r2, [r3, #12]
      break;
 800fdd6:	e048      	b.n	800fe6a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fddc:	4a58      	ldr	r2, [pc, #352]	; (800ff40 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800fdde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde4:	4a57      	ldr	r2, [pc, #348]	; (800ff44 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800fde6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdec:	4a56      	ldr	r2, [pc, #344]	; (800ff48 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800fdee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fdf4:	6879      	ldr	r1, [r7, #4]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	333c      	adds	r3, #60	; 0x3c
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	887b      	ldrh	r3, [r7, #2]
 800fe00:	f7fc f85e 	bl	800bec0 <HAL_DMA_Start_IT>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d001      	beq.n	800fe0e <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e094      	b.n	800ff38 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	68da      	ldr	r2, [r3, #12]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe1c:	60da      	str	r2, [r3, #12]
      break;
 800fe1e:	e024      	b.n	800fe6a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe24:	4a46      	ldr	r2, [pc, #280]	; (800ff40 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800fe26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe2c:	4a45      	ldr	r2, [pc, #276]	; (800ff44 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800fe2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe34:	4a44      	ldr	r2, [pc, #272]	; (800ff48 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800fe36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fe3c:	6879      	ldr	r1, [r7, #4]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	3340      	adds	r3, #64	; 0x40
 800fe44:	461a      	mov	r2, r3
 800fe46:	887b      	ldrh	r3, [r7, #2]
 800fe48:	f7fc f83a 	bl	800bec0 <HAL_DMA_Start_IT>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 800fe52:	2301      	movs	r3, #1
 800fe54:	e070      	b.n	800ff38 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	68da      	ldr	r2, [r3, #12]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe64:	60da      	str	r2, [r3, #12]
      break;
 800fe66:	e000      	b.n	800fe6a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 800fe68:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2201      	movs	r2, #1
 800fe70:	68b9      	ldr	r1, [r7, #8]
 800fe72:	4618      	mov	r0, r3
 800fe74:	f001 f8e6 	bl	8011044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a33      	ldr	r2, [pc, #204]	; (800ff4c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d004      	beq.n	800fe8c <HAL_TIM_PWM_Start_DMA+0x338>
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	4a32      	ldr	r2, [pc, #200]	; (800ff50 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d101      	bne.n	800fe90 <HAL_TIM_PWM_Start_DMA+0x33c>
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e000      	b.n	800fe92 <HAL_TIM_PWM_Start_DMA+0x33e>
 800fe90:	2300      	movs	r3, #0
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d007      	beq.n	800fea6 <HAL_TIM_PWM_Start_DMA+0x352>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a28      	ldr	r2, [pc, #160]	; (800ff4c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d022      	beq.n	800fef6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800feb8:	d01d      	beq.n	800fef6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	4a25      	ldr	r2, [pc, #148]	; (800ff54 <HAL_TIM_PWM_Start_DMA+0x400>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d018      	beq.n	800fef6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4a23      	ldr	r2, [pc, #140]	; (800ff58 <HAL_TIM_PWM_Start_DMA+0x404>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d013      	beq.n	800fef6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	4a22      	ldr	r2, [pc, #136]	; (800ff5c <HAL_TIM_PWM_Start_DMA+0x408>)
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d00e      	beq.n	800fef6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4a1c      	ldr	r2, [pc, #112]	; (800ff50 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d009      	beq.n	800fef6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a1e      	ldr	r2, [pc, #120]	; (800ff60 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d004      	beq.n	800fef6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4a1c      	ldr	r2, [pc, #112]	; (800ff64 <HAL_TIM_PWM_Start_DMA+0x410>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d115      	bne.n	800ff22 <HAL_TIM_PWM_Start_DMA+0x3ce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	689a      	ldr	r2, [r3, #8]
 800fefc:	4b1a      	ldr	r3, [pc, #104]	; (800ff68 <HAL_TIM_PWM_Start_DMA+0x414>)
 800fefe:	4013      	ands	r3, r2
 800ff00:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	2b06      	cmp	r3, #6
 800ff06:	d015      	beq.n	800ff34 <HAL_TIM_PWM_Start_DMA+0x3e0>
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff0e:	d011      	beq.n	800ff34 <HAL_TIM_PWM_Start_DMA+0x3e0>
    {
      __HAL_TIM_ENABLE(htim);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f042 0201 	orr.w	r2, r2, #1
 800ff1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff20:	e008      	b.n	800ff34 <HAL_TIM_PWM_Start_DMA+0x3e0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f042 0201 	orr.w	r2, r2, #1
 800ff30:	601a      	str	r2, [r3, #0]
 800ff32:	e000      	b.n	800ff36 <HAL_TIM_PWM_Start_DMA+0x3e2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3718      	adds	r7, #24
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	08010803 	.word	0x08010803
 800ff44:	080108ab 	.word	0x080108ab
 800ff48:	08010771 	.word	0x08010771
 800ff4c:	40010000 	.word	0x40010000
 800ff50:	40010400 	.word	0x40010400
 800ff54:	40000400 	.word	0x40000400
 800ff58:	40000800 	.word	0x40000800
 800ff5c:	40000c00 	.word	0x40000c00
 800ff60:	40014000 	.word	0x40014000
 800ff64:	40001800 	.word	0x40001800
 800ff68:	00010007 	.word	0x00010007

0800ff6c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	2b0c      	cmp	r3, #12
 800ff7a:	d855      	bhi.n	8010028 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800ff7c:	a201      	add	r2, pc, #4	; (adr r2, 800ff84 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800ff7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff82:	bf00      	nop
 800ff84:	0800ffb9 	.word	0x0800ffb9
 800ff88:	08010029 	.word	0x08010029
 800ff8c:	08010029 	.word	0x08010029
 800ff90:	08010029 	.word	0x08010029
 800ff94:	0800ffd5 	.word	0x0800ffd5
 800ff98:	08010029 	.word	0x08010029
 800ff9c:	08010029 	.word	0x08010029
 800ffa0:	08010029 	.word	0x08010029
 800ffa4:	0800fff1 	.word	0x0800fff1
 800ffa8:	08010029 	.word	0x08010029
 800ffac:	08010029 	.word	0x08010029
 800ffb0:	08010029 	.word	0x08010029
 800ffb4:	0801000d 	.word	0x0801000d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	68da      	ldr	r2, [r3, #12]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ffc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7fb ffd7 	bl	800bf80 <HAL_DMA_Abort_IT>
      break;
 800ffd2:	e02a      	b.n	801002a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	68da      	ldr	r2, [r3, #12]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffe2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7fb ffc9 	bl	800bf80 <HAL_DMA_Abort_IT>
      break;
 800ffee:	e01c      	b.n	801002a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	68da      	ldr	r2, [r3, #12]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fffe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010004:	4618      	mov	r0, r3
 8010006:	f7fb ffbb 	bl	800bf80 <HAL_DMA_Abort_IT>
      break;
 801000a:	e00e      	b.n	801002a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	68da      	ldr	r2, [r3, #12]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801001a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010020:	4618      	mov	r0, r3
 8010022:	f7fb ffad 	bl	800bf80 <HAL_DMA_Abort_IT>
      break;
 8010026:	e000      	b.n	801002a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8010028:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2200      	movs	r2, #0
 8010030:	6839      	ldr	r1, [r7, #0]
 8010032:	4618      	mov	r0, r3
 8010034:	f001 f806 	bl	8011044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4a36      	ldr	r2, [pc, #216]	; (8010118 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d004      	beq.n	801004c <HAL_TIM_PWM_Stop_DMA+0xe0>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a35      	ldr	r2, [pc, #212]	; (801011c <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d101      	bne.n	8010050 <HAL_TIM_PWM_Stop_DMA+0xe4>
 801004c:	2301      	movs	r3, #1
 801004e:	e000      	b.n	8010052 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8010050:	2300      	movs	r3, #0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d017      	beq.n	8010086 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	6a1a      	ldr	r2, [r3, #32]
 801005c:	f241 1311 	movw	r3, #4369	; 0x1111
 8010060:	4013      	ands	r3, r2
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10f      	bne.n	8010086 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6a1a      	ldr	r2, [r3, #32]
 801006c:	f240 4344 	movw	r3, #1092	; 0x444
 8010070:	4013      	ands	r3, r2
 8010072:	2b00      	cmp	r3, #0
 8010074:	d107      	bne.n	8010086 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010084:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	6a1a      	ldr	r2, [r3, #32]
 801008c:	f241 1311 	movw	r3, #4369	; 0x1111
 8010090:	4013      	ands	r3, r2
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10f      	bne.n	80100b6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	6a1a      	ldr	r2, [r3, #32]
 801009c:	f240 4344 	movw	r3, #1092	; 0x444
 80100a0:	4013      	ands	r3, r2
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d107      	bne.n	80100b6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f022 0201 	bic.w	r2, r2, #1
 80100b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d104      	bne.n	80100c6 <HAL_TIM_PWM_Stop_DMA+0x15a>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2201      	movs	r2, #1
 80100c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80100c4:	e023      	b.n	801010e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	2b04      	cmp	r3, #4
 80100ca:	d104      	bne.n	80100d6 <HAL_TIM_PWM_Stop_DMA+0x16a>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2201      	movs	r2, #1
 80100d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80100d4:	e01b      	b.n	801010e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	2b08      	cmp	r3, #8
 80100da:	d104      	bne.n	80100e6 <HAL_TIM_PWM_Stop_DMA+0x17a>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2201      	movs	r2, #1
 80100e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80100e4:	e013      	b.n	801010e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	2b0c      	cmp	r3, #12
 80100ea:	d104      	bne.n	80100f6 <HAL_TIM_PWM_Stop_DMA+0x18a>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80100f4:	e00b      	b.n	801010e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	2b10      	cmp	r3, #16
 80100fa:	d104      	bne.n	8010106 <HAL_TIM_PWM_Stop_DMA+0x19a>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2201      	movs	r2, #1
 8010100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010104:	e003      	b.n	801010e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2201      	movs	r2, #1
 801010a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801010e:	2300      	movs	r3, #0
}
 8010110:	4618      	mov	r0, r3
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	40010000 	.word	0x40010000
 801011c:	40010400 	.word	0x40010400

08010120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	f003 0302 	and.w	r3, r3, #2
 8010132:	2b02      	cmp	r3, #2
 8010134:	d122      	bne.n	801017c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	f003 0302 	and.w	r3, r3, #2
 8010140:	2b02      	cmp	r3, #2
 8010142:	d11b      	bne.n	801017c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f06f 0202 	mvn.w	r2, #2
 801014c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2201      	movs	r2, #1
 8010152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	699b      	ldr	r3, [r3, #24]
 801015a:	f003 0303 	and.w	r3, r3, #3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d003      	beq.n	801016a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 fadc 	bl	8010720 <HAL_TIM_IC_CaptureCallback>
 8010168:	e005      	b.n	8010176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 face 	bl	801070c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f7f0 fc2d 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	691b      	ldr	r3, [r3, #16]
 8010182:	f003 0304 	and.w	r3, r3, #4
 8010186:	2b04      	cmp	r3, #4
 8010188:	d122      	bne.n	80101d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	f003 0304 	and.w	r3, r3, #4
 8010194:	2b04      	cmp	r3, #4
 8010196:	d11b      	bne.n	80101d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f06f 0204 	mvn.w	r2, #4
 80101a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2202      	movs	r2, #2
 80101a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	699b      	ldr	r3, [r3, #24]
 80101ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d003      	beq.n	80101be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 fab2 	bl	8010720 <HAL_TIM_IC_CaptureCallback>
 80101bc:	e005      	b.n	80101ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f000 faa4 	bl	801070c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7f0 fc03 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	691b      	ldr	r3, [r3, #16]
 80101d6:	f003 0308 	and.w	r3, r3, #8
 80101da:	2b08      	cmp	r3, #8
 80101dc:	d122      	bne.n	8010224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	f003 0308 	and.w	r3, r3, #8
 80101e8:	2b08      	cmp	r3, #8
 80101ea:	d11b      	bne.n	8010224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f06f 0208 	mvn.w	r2, #8
 80101f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2204      	movs	r2, #4
 80101fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	69db      	ldr	r3, [r3, #28]
 8010202:	f003 0303 	and.w	r3, r3, #3
 8010206:	2b00      	cmp	r3, #0
 8010208:	d003      	beq.n	8010212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 fa88 	bl	8010720 <HAL_TIM_IC_CaptureCallback>
 8010210:	e005      	b.n	801021e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f000 fa7a 	bl	801070c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7f0 fbd9 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	691b      	ldr	r3, [r3, #16]
 801022a:	f003 0310 	and.w	r3, r3, #16
 801022e:	2b10      	cmp	r3, #16
 8010230:	d122      	bne.n	8010278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	f003 0310 	and.w	r3, r3, #16
 801023c:	2b10      	cmp	r3, #16
 801023e:	d11b      	bne.n	8010278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f06f 0210 	mvn.w	r2, #16
 8010248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2208      	movs	r2, #8
 801024e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	69db      	ldr	r3, [r3, #28]
 8010256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801025a:	2b00      	cmp	r3, #0
 801025c:	d003      	beq.n	8010266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fa5e 	bl	8010720 <HAL_TIM_IC_CaptureCallback>
 8010264:	e005      	b.n	8010272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 fa50 	bl	801070c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7f0 fbaf 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	691b      	ldr	r3, [r3, #16]
 801027e:	f003 0301 	and.w	r3, r3, #1
 8010282:	2b01      	cmp	r3, #1
 8010284:	d10e      	bne.n	80102a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	f003 0301 	and.w	r3, r3, #1
 8010290:	2b01      	cmp	r3, #1
 8010292:	d107      	bne.n	80102a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f06f 0201 	mvn.w	r2, #1
 801029c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f7f2 faca 	bl	8002838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102ae:	2b80      	cmp	r3, #128	; 0x80
 80102b0:	d10e      	bne.n	80102d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102bc:	2b80      	cmp	r3, #128	; 0x80
 80102be:	d107      	bne.n	80102d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80102c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 ff78 	bl	80111c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102de:	d10e      	bne.n	80102fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102ea:	2b80      	cmp	r3, #128	; 0x80
 80102ec:	d107      	bne.n	80102fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80102f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 ff6b 	bl	80111d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010308:	2b40      	cmp	r3, #64	; 0x40
 801030a:	d10e      	bne.n	801032a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010316:	2b40      	cmp	r3, #64	; 0x40
 8010318:	d107      	bne.n	801032a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 fa0f 	bl	8010748 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	691b      	ldr	r3, [r3, #16]
 8010330:	f003 0320 	and.w	r3, r3, #32
 8010334:	2b20      	cmp	r3, #32
 8010336:	d10e      	bne.n	8010356 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	68db      	ldr	r3, [r3, #12]
 801033e:	f003 0320 	and.w	r3, r3, #32
 8010342:	2b20      	cmp	r3, #32
 8010344:	d107      	bne.n	8010356 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f06f 0220 	mvn.w	r2, #32
 801034e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f000 ff2b 	bl	80111ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010356:	bf00      	nop
 8010358:	3708      	adds	r7, #8
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
	...

08010360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010372:	2b01      	cmp	r3, #1
 8010374:	d101      	bne.n	801037a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010376:	2302      	movs	r3, #2
 8010378:	e0fd      	b.n	8010576 <HAL_TIM_PWM_ConfigChannel+0x216>
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2201      	movs	r2, #1
 801037e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2b14      	cmp	r3, #20
 8010386:	f200 80f0 	bhi.w	801056a <HAL_TIM_PWM_ConfigChannel+0x20a>
 801038a:	a201      	add	r2, pc, #4	; (adr r2, 8010390 <HAL_TIM_PWM_ConfigChannel+0x30>)
 801038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010390:	080103e5 	.word	0x080103e5
 8010394:	0801056b 	.word	0x0801056b
 8010398:	0801056b 	.word	0x0801056b
 801039c:	0801056b 	.word	0x0801056b
 80103a0:	08010425 	.word	0x08010425
 80103a4:	0801056b 	.word	0x0801056b
 80103a8:	0801056b 	.word	0x0801056b
 80103ac:	0801056b 	.word	0x0801056b
 80103b0:	08010467 	.word	0x08010467
 80103b4:	0801056b 	.word	0x0801056b
 80103b8:	0801056b 	.word	0x0801056b
 80103bc:	0801056b 	.word	0x0801056b
 80103c0:	080104a7 	.word	0x080104a7
 80103c4:	0801056b 	.word	0x0801056b
 80103c8:	0801056b 	.word	0x0801056b
 80103cc:	0801056b 	.word	0x0801056b
 80103d0:	080104e9 	.word	0x080104e9
 80103d4:	0801056b 	.word	0x0801056b
 80103d8:	0801056b 	.word	0x0801056b
 80103dc:	0801056b 	.word	0x0801056b
 80103e0:	08010529 	.word	0x08010529
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	68b9      	ldr	r1, [r7, #8]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f000 fb32 	bl	8010a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	699a      	ldr	r2, [r3, #24]
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f042 0208 	orr.w	r2, r2, #8
 80103fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	699a      	ldr	r2, [r3, #24]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f022 0204 	bic.w	r2, r2, #4
 801040e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	6999      	ldr	r1, [r3, #24]
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	691a      	ldr	r2, [r3, #16]
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	430a      	orrs	r2, r1
 8010420:	619a      	str	r2, [r3, #24]
      break;
 8010422:	e0a3      	b.n	801056c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68b9      	ldr	r1, [r7, #8]
 801042a:	4618      	mov	r0, r3
 801042c:	f000 fb84 	bl	8010b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	699a      	ldr	r2, [r3, #24]
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801043e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	699a      	ldr	r2, [r3, #24]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801044e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	6999      	ldr	r1, [r3, #24]
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	021a      	lsls	r2, r3, #8
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	430a      	orrs	r2, r1
 8010462:	619a      	str	r2, [r3, #24]
      break;
 8010464:	e082      	b.n	801056c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68b9      	ldr	r1, [r7, #8]
 801046c:	4618      	mov	r0, r3
 801046e:	f000 fbdb 	bl	8010c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	69da      	ldr	r2, [r3, #28]
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f042 0208 	orr.w	r2, r2, #8
 8010480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	69da      	ldr	r2, [r3, #28]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f022 0204 	bic.w	r2, r2, #4
 8010490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	69d9      	ldr	r1, [r3, #28]
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	691a      	ldr	r2, [r3, #16]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	430a      	orrs	r2, r1
 80104a2:	61da      	str	r2, [r3, #28]
      break;
 80104a4:	e062      	b.n	801056c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	68b9      	ldr	r1, [r7, #8]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f000 fc31 	bl	8010d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	69da      	ldr	r2, [r3, #28]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80104c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	69da      	ldr	r2, [r3, #28]
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80104d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	69d9      	ldr	r1, [r3, #28]
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	691b      	ldr	r3, [r3, #16]
 80104dc:	021a      	lsls	r2, r3, #8
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	430a      	orrs	r2, r1
 80104e4:	61da      	str	r2, [r3, #28]
      break;
 80104e6:	e041      	b.n	801056c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	68b9      	ldr	r1, [r7, #8]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f000 fc68 	bl	8010dc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f042 0208 	orr.w	r2, r2, #8
 8010502:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f022 0204 	bic.w	r2, r2, #4
 8010512:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	691a      	ldr	r2, [r3, #16]
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	430a      	orrs	r2, r1
 8010524:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010526:	e021      	b.n	801056c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	68b9      	ldr	r1, [r7, #8]
 801052e:	4618      	mov	r0, r3
 8010530:	f000 fc9a 	bl	8010e68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010542:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010552:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	691b      	ldr	r3, [r3, #16]
 801055e:	021a      	lsls	r2, r3, #8
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	430a      	orrs	r2, r1
 8010566:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010568:	e000      	b.n	801056c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 801056a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3710      	adds	r7, #16
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
 801057e:	bf00      	nop

08010580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010590:	2b01      	cmp	r3, #1
 8010592:	d101      	bne.n	8010598 <HAL_TIM_ConfigClockSource+0x18>
 8010594:	2302      	movs	r3, #2
 8010596:	e0b3      	b.n	8010700 <HAL_TIM_ConfigClockSource+0x180>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2201      	movs	r2, #1
 801059c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2202      	movs	r2, #2
 80105a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80105b0:	68fa      	ldr	r2, [r7, #12]
 80105b2:	4b55      	ldr	r3, [pc, #340]	; (8010708 <HAL_TIM_ConfigClockSource+0x188>)
 80105b4:	4013      	ands	r3, r2
 80105b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80105be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105d0:	d03e      	beq.n	8010650 <HAL_TIM_ConfigClockSource+0xd0>
 80105d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105d6:	f200 8087 	bhi.w	80106e8 <HAL_TIM_ConfigClockSource+0x168>
 80105da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105de:	f000 8085 	beq.w	80106ec <HAL_TIM_ConfigClockSource+0x16c>
 80105e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105e6:	d87f      	bhi.n	80106e8 <HAL_TIM_ConfigClockSource+0x168>
 80105e8:	2b70      	cmp	r3, #112	; 0x70
 80105ea:	d01a      	beq.n	8010622 <HAL_TIM_ConfigClockSource+0xa2>
 80105ec:	2b70      	cmp	r3, #112	; 0x70
 80105ee:	d87b      	bhi.n	80106e8 <HAL_TIM_ConfigClockSource+0x168>
 80105f0:	2b60      	cmp	r3, #96	; 0x60
 80105f2:	d050      	beq.n	8010696 <HAL_TIM_ConfigClockSource+0x116>
 80105f4:	2b60      	cmp	r3, #96	; 0x60
 80105f6:	d877      	bhi.n	80106e8 <HAL_TIM_ConfigClockSource+0x168>
 80105f8:	2b50      	cmp	r3, #80	; 0x50
 80105fa:	d03c      	beq.n	8010676 <HAL_TIM_ConfigClockSource+0xf6>
 80105fc:	2b50      	cmp	r3, #80	; 0x50
 80105fe:	d873      	bhi.n	80106e8 <HAL_TIM_ConfigClockSource+0x168>
 8010600:	2b40      	cmp	r3, #64	; 0x40
 8010602:	d058      	beq.n	80106b6 <HAL_TIM_ConfigClockSource+0x136>
 8010604:	2b40      	cmp	r3, #64	; 0x40
 8010606:	d86f      	bhi.n	80106e8 <HAL_TIM_ConfigClockSource+0x168>
 8010608:	2b30      	cmp	r3, #48	; 0x30
 801060a:	d064      	beq.n	80106d6 <HAL_TIM_ConfigClockSource+0x156>
 801060c:	2b30      	cmp	r3, #48	; 0x30
 801060e:	d86b      	bhi.n	80106e8 <HAL_TIM_ConfigClockSource+0x168>
 8010610:	2b20      	cmp	r3, #32
 8010612:	d060      	beq.n	80106d6 <HAL_TIM_ConfigClockSource+0x156>
 8010614:	2b20      	cmp	r3, #32
 8010616:	d867      	bhi.n	80106e8 <HAL_TIM_ConfigClockSource+0x168>
 8010618:	2b00      	cmp	r3, #0
 801061a:	d05c      	beq.n	80106d6 <HAL_TIM_ConfigClockSource+0x156>
 801061c:	2b10      	cmp	r3, #16
 801061e:	d05a      	beq.n	80106d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8010620:	e062      	b.n	80106e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6818      	ldr	r0, [r3, #0]
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	6899      	ldr	r1, [r3, #8]
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	685a      	ldr	r2, [r3, #4]
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	68db      	ldr	r3, [r3, #12]
 8010632:	f000 fce7 	bl	8011004 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	689b      	ldr	r3, [r3, #8]
 801063c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010644:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	609a      	str	r2, [r3, #8]
      break;
 801064e:	e04e      	b.n	80106ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6818      	ldr	r0, [r3, #0]
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	6899      	ldr	r1, [r3, #8]
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	685a      	ldr	r2, [r3, #4]
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	f000 fcd0 	bl	8011004 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	689a      	ldr	r2, [r3, #8]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010672:	609a      	str	r2, [r3, #8]
      break;
 8010674:	e03b      	b.n	80106ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6818      	ldr	r0, [r3, #0]
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	6859      	ldr	r1, [r3, #4]
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	461a      	mov	r2, r3
 8010684:	f000 fc44 	bl	8010f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2150      	movs	r1, #80	; 0x50
 801068e:	4618      	mov	r0, r3
 8010690:	f000 fc9d 	bl	8010fce <TIM_ITRx_SetConfig>
      break;
 8010694:	e02b      	b.n	80106ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6818      	ldr	r0, [r3, #0]
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	6859      	ldr	r1, [r3, #4]
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	68db      	ldr	r3, [r3, #12]
 80106a2:	461a      	mov	r2, r3
 80106a4:	f000 fc63 	bl	8010f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2160      	movs	r1, #96	; 0x60
 80106ae:	4618      	mov	r0, r3
 80106b0:	f000 fc8d 	bl	8010fce <TIM_ITRx_SetConfig>
      break;
 80106b4:	e01b      	b.n	80106ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6818      	ldr	r0, [r3, #0]
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	6859      	ldr	r1, [r3, #4]
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	461a      	mov	r2, r3
 80106c4:	f000 fc24 	bl	8010f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2140      	movs	r1, #64	; 0x40
 80106ce:	4618      	mov	r0, r3
 80106d0:	f000 fc7d 	bl	8010fce <TIM_ITRx_SetConfig>
      break;
 80106d4:	e00b      	b.n	80106ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	4619      	mov	r1, r3
 80106e0:	4610      	mov	r0, r2
 80106e2:	f000 fc74 	bl	8010fce <TIM_ITRx_SetConfig>
        break;
 80106e6:	e002      	b.n	80106ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80106e8:	bf00      	nop
 80106ea:	e000      	b.n	80106ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80106ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2201      	movs	r2, #1
 80106f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	fffeff88 	.word	0xfffeff88

0801070c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010714:	bf00      	nop
 8010716:	370c      	adds	r7, #12
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010728:	bf00      	nop
 801072a:	370c      	adds	r7, #12
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801073c:	bf00      	nop
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr

08010748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010750:	bf00      	nop
 8010752:	370c      	adds	r7, #12
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010764:	bf00      	nop
 8010766:	370c      	adds	r7, #12
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr

08010770 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801077c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	429a      	cmp	r2, r3
 8010786:	d107      	bne.n	8010798 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2201      	movs	r2, #1
 801078c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2201      	movs	r2, #1
 8010792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010796:	e02a      	b.n	80107ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d107      	bne.n	80107b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2202      	movs	r2, #2
 80107a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2201      	movs	r2, #1
 80107ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107b0:	e01d      	b.n	80107ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d107      	bne.n	80107cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2204      	movs	r2, #4
 80107c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	2201      	movs	r2, #1
 80107c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107ca:	e010      	b.n	80107ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d107      	bne.n	80107e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2208      	movs	r2, #8
 80107da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2201      	movs	r2, #1
 80107e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107e4:	e003      	b.n	80107ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2201      	movs	r2, #1
 80107ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f7ff ffb4 	bl	801075c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2200      	movs	r2, #0
 80107f8:	771a      	strb	r2, [r3, #28]
}
 80107fa:	bf00      	nop
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b084      	sub	sp, #16
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801080e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	429a      	cmp	r2, r3
 8010818:	d10b      	bne.n	8010832 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2201      	movs	r2, #1
 801081e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	69db      	ldr	r3, [r3, #28]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d136      	bne.n	8010896 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2201      	movs	r2, #1
 801082c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010830:	e031      	b.n	8010896 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	429a      	cmp	r2, r3
 801083a:	d10b      	bne.n	8010854 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2202      	movs	r2, #2
 8010840:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	69db      	ldr	r3, [r3, #28]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d125      	bne.n	8010896 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	2201      	movs	r2, #1
 801084e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010852:	e020      	b.n	8010896 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	429a      	cmp	r2, r3
 801085c:	d10b      	bne.n	8010876 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2204      	movs	r2, #4
 8010862:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	69db      	ldr	r3, [r3, #28]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d114      	bne.n	8010896 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2201      	movs	r2, #1
 8010870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010874:	e00f      	b.n	8010896 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	429a      	cmp	r2, r3
 801087e:	d10a      	bne.n	8010896 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2208      	movs	r2, #8
 8010884:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	69db      	ldr	r3, [r3, #28]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d103      	bne.n	8010896 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2201      	movs	r2, #1
 8010892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f7f0 f89a 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2200      	movs	r2, #0
 80108a0:	771a      	strb	r2, [r3, #28]
}
 80108a2:	bf00      	nop
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b084      	sub	sp, #16
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d103      	bne.n	80108ca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2201      	movs	r2, #1
 80108c6:	771a      	strb	r2, [r3, #28]
 80108c8:	e019      	b.n	80108fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ce:	687a      	ldr	r2, [r7, #4]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d103      	bne.n	80108dc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2202      	movs	r2, #2
 80108d8:	771a      	strb	r2, [r3, #28]
 80108da:	e010      	b.n	80108fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d103      	bne.n	80108ee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2204      	movs	r2, #4
 80108ea:	771a      	strb	r2, [r3, #28]
 80108ec:	e007      	b.n	80108fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d102      	bne.n	80108fe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2208      	movs	r2, #8
 80108fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	f7ff ff18 	bl	8010734 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2200      	movs	r2, #0
 8010908:	771a      	strb	r2, [r3, #28]
}
 801090a:	bf00      	nop
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
	...

08010914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010914:	b480      	push	{r7}
 8010916:	b085      	sub	sp, #20
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	4a40      	ldr	r2, [pc, #256]	; (8010a28 <TIM_Base_SetConfig+0x114>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d013      	beq.n	8010954 <TIM_Base_SetConfig+0x40>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010932:	d00f      	beq.n	8010954 <TIM_Base_SetConfig+0x40>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	4a3d      	ldr	r2, [pc, #244]	; (8010a2c <TIM_Base_SetConfig+0x118>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d00b      	beq.n	8010954 <TIM_Base_SetConfig+0x40>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	4a3c      	ldr	r2, [pc, #240]	; (8010a30 <TIM_Base_SetConfig+0x11c>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d007      	beq.n	8010954 <TIM_Base_SetConfig+0x40>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4a3b      	ldr	r2, [pc, #236]	; (8010a34 <TIM_Base_SetConfig+0x120>)
 8010948:	4293      	cmp	r3, r2
 801094a:	d003      	beq.n	8010954 <TIM_Base_SetConfig+0x40>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	4a3a      	ldr	r2, [pc, #232]	; (8010a38 <TIM_Base_SetConfig+0x124>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d108      	bne.n	8010966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801095a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	68fa      	ldr	r2, [r7, #12]
 8010962:	4313      	orrs	r3, r2
 8010964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	4a2f      	ldr	r2, [pc, #188]	; (8010a28 <TIM_Base_SetConfig+0x114>)
 801096a:	4293      	cmp	r3, r2
 801096c:	d02b      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010974:	d027      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	4a2c      	ldr	r2, [pc, #176]	; (8010a2c <TIM_Base_SetConfig+0x118>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d023      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	4a2b      	ldr	r2, [pc, #172]	; (8010a30 <TIM_Base_SetConfig+0x11c>)
 8010982:	4293      	cmp	r3, r2
 8010984:	d01f      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4a2a      	ldr	r2, [pc, #168]	; (8010a34 <TIM_Base_SetConfig+0x120>)
 801098a:	4293      	cmp	r3, r2
 801098c:	d01b      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4a29      	ldr	r2, [pc, #164]	; (8010a38 <TIM_Base_SetConfig+0x124>)
 8010992:	4293      	cmp	r3, r2
 8010994:	d017      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4a28      	ldr	r2, [pc, #160]	; (8010a3c <TIM_Base_SetConfig+0x128>)
 801099a:	4293      	cmp	r3, r2
 801099c:	d013      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4a27      	ldr	r2, [pc, #156]	; (8010a40 <TIM_Base_SetConfig+0x12c>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d00f      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4a26      	ldr	r2, [pc, #152]	; (8010a44 <TIM_Base_SetConfig+0x130>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d00b      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4a25      	ldr	r2, [pc, #148]	; (8010a48 <TIM_Base_SetConfig+0x134>)
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d007      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4a24      	ldr	r2, [pc, #144]	; (8010a4c <TIM_Base_SetConfig+0x138>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d003      	beq.n	80109c6 <TIM_Base_SetConfig+0xb2>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4a23      	ldr	r2, [pc, #140]	; (8010a50 <TIM_Base_SetConfig+0x13c>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d108      	bne.n	80109d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	68db      	ldr	r3, [r3, #12]
 80109d2:	68fa      	ldr	r2, [r7, #12]
 80109d4:	4313      	orrs	r3, r2
 80109d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	695b      	ldr	r3, [r3, #20]
 80109e2:	4313      	orrs	r3, r2
 80109e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	689a      	ldr	r2, [r3, #8]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	681a      	ldr	r2, [r3, #0]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	4a0a      	ldr	r2, [pc, #40]	; (8010a28 <TIM_Base_SetConfig+0x114>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d003      	beq.n	8010a0c <TIM_Base_SetConfig+0xf8>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	4a0c      	ldr	r2, [pc, #48]	; (8010a38 <TIM_Base_SetConfig+0x124>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d103      	bne.n	8010a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	691a      	ldr	r2, [r3, #16]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2201      	movs	r2, #1
 8010a18:	615a      	str	r2, [r3, #20]
}
 8010a1a:	bf00      	nop
 8010a1c:	3714      	adds	r7, #20
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	40010000 	.word	0x40010000
 8010a2c:	40000400 	.word	0x40000400
 8010a30:	40000800 	.word	0x40000800
 8010a34:	40000c00 	.word	0x40000c00
 8010a38:	40010400 	.word	0x40010400
 8010a3c:	40014000 	.word	0x40014000
 8010a40:	40014400 	.word	0x40014400
 8010a44:	40014800 	.word	0x40014800
 8010a48:	40001800 	.word	0x40001800
 8010a4c:	40001c00 	.word	0x40001c00
 8010a50:	40002000 	.word	0x40002000

08010a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b087      	sub	sp, #28
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6a1b      	ldr	r3, [r3, #32]
 8010a62:	f023 0201 	bic.w	r2, r3, #1
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a1b      	ldr	r3, [r3, #32]
 8010a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	699b      	ldr	r3, [r3, #24]
 8010a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	4b2b      	ldr	r3, [pc, #172]	; (8010b2c <TIM_OC1_SetConfig+0xd8>)
 8010a80:	4013      	ands	r3, r2
 8010a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f023 0303 	bic.w	r3, r3, #3
 8010a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	68fa      	ldr	r2, [r7, #12]
 8010a92:	4313      	orrs	r3, r2
 8010a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	f023 0302 	bic.w	r3, r3, #2
 8010a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	689b      	ldr	r3, [r3, #8]
 8010aa2:	697a      	ldr	r2, [r7, #20]
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4a21      	ldr	r2, [pc, #132]	; (8010b30 <TIM_OC1_SetConfig+0xdc>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d003      	beq.n	8010ab8 <TIM_OC1_SetConfig+0x64>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4a20      	ldr	r2, [pc, #128]	; (8010b34 <TIM_OC1_SetConfig+0xe0>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d10c      	bne.n	8010ad2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	f023 0308 	bic.w	r3, r3, #8
 8010abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	697a      	ldr	r2, [r7, #20]
 8010ac6:	4313      	orrs	r3, r2
 8010ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	f023 0304 	bic.w	r3, r3, #4
 8010ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	4a16      	ldr	r2, [pc, #88]	; (8010b30 <TIM_OC1_SetConfig+0xdc>)
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d003      	beq.n	8010ae2 <TIM_OC1_SetConfig+0x8e>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	4a15      	ldr	r2, [pc, #84]	; (8010b34 <TIM_OC1_SetConfig+0xe0>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d111      	bne.n	8010b06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	695b      	ldr	r3, [r3, #20]
 8010af6:	693a      	ldr	r2, [r7, #16]
 8010af8:	4313      	orrs	r3, r2
 8010afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	699b      	ldr	r3, [r3, #24]
 8010b00:	693a      	ldr	r2, [r7, #16]
 8010b02:	4313      	orrs	r3, r2
 8010b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	693a      	ldr	r2, [r7, #16]
 8010b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	685a      	ldr	r2, [r3, #4]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	697a      	ldr	r2, [r7, #20]
 8010b1e:	621a      	str	r2, [r3, #32]
}
 8010b20:	bf00      	nop
 8010b22:	371c      	adds	r7, #28
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr
 8010b2c:	fffeff8f 	.word	0xfffeff8f
 8010b30:	40010000 	.word	0x40010000
 8010b34:	40010400 	.word	0x40010400

08010b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b087      	sub	sp, #28
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6a1b      	ldr	r3, [r3, #32]
 8010b46:	f023 0210 	bic.w	r2, r3, #16
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6a1b      	ldr	r3, [r3, #32]
 8010b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	699b      	ldr	r3, [r3, #24]
 8010b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	4b2e      	ldr	r3, [pc, #184]	; (8010c1c <TIM_OC2_SetConfig+0xe4>)
 8010b64:	4013      	ands	r3, r2
 8010b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	021b      	lsls	r3, r3, #8
 8010b76:	68fa      	ldr	r2, [r7, #12]
 8010b78:	4313      	orrs	r3, r2
 8010b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	f023 0320 	bic.w	r3, r3, #32
 8010b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	011b      	lsls	r3, r3, #4
 8010b8a:	697a      	ldr	r2, [r7, #20]
 8010b8c:	4313      	orrs	r3, r2
 8010b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	4a23      	ldr	r2, [pc, #140]	; (8010c20 <TIM_OC2_SetConfig+0xe8>)
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d003      	beq.n	8010ba0 <TIM_OC2_SetConfig+0x68>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4a22      	ldr	r2, [pc, #136]	; (8010c24 <TIM_OC2_SetConfig+0xec>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d10d      	bne.n	8010bbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	011b      	lsls	r3, r3, #4
 8010bae:	697a      	ldr	r2, [r7, #20]
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	4a18      	ldr	r2, [pc, #96]	; (8010c20 <TIM_OC2_SetConfig+0xe8>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d003      	beq.n	8010bcc <TIM_OC2_SetConfig+0x94>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	4a17      	ldr	r2, [pc, #92]	; (8010c24 <TIM_OC2_SetConfig+0xec>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d113      	bne.n	8010bf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	695b      	ldr	r3, [r3, #20]
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	693a      	ldr	r2, [r7, #16]
 8010be4:	4313      	orrs	r3, r2
 8010be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	699b      	ldr	r3, [r3, #24]
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	693a      	ldr	r2, [r7, #16]
 8010bf0:	4313      	orrs	r3, r2
 8010bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	693a      	ldr	r2, [r7, #16]
 8010bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	68fa      	ldr	r2, [r7, #12]
 8010bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	685a      	ldr	r2, [r3, #4]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	621a      	str	r2, [r3, #32]
}
 8010c0e:	bf00      	nop
 8010c10:	371c      	adds	r7, #28
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	feff8fff 	.word	0xfeff8fff
 8010c20:	40010000 	.word	0x40010000
 8010c24:	40010400 	.word	0x40010400

08010c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b087      	sub	sp, #28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6a1b      	ldr	r3, [r3, #32]
 8010c36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6a1b      	ldr	r3, [r3, #32]
 8010c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	69db      	ldr	r3, [r3, #28]
 8010c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	4b2d      	ldr	r3, [pc, #180]	; (8010d08 <TIM_OC3_SetConfig+0xe0>)
 8010c54:	4013      	ands	r3, r2
 8010c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f023 0303 	bic.w	r3, r3, #3
 8010c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	68fa      	ldr	r2, [r7, #12]
 8010c66:	4313      	orrs	r3, r2
 8010c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	689b      	ldr	r3, [r3, #8]
 8010c76:	021b      	lsls	r3, r3, #8
 8010c78:	697a      	ldr	r2, [r7, #20]
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	4a22      	ldr	r2, [pc, #136]	; (8010d0c <TIM_OC3_SetConfig+0xe4>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d003      	beq.n	8010c8e <TIM_OC3_SetConfig+0x66>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4a21      	ldr	r2, [pc, #132]	; (8010d10 <TIM_OC3_SetConfig+0xe8>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d10d      	bne.n	8010caa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	021b      	lsls	r3, r3, #8
 8010c9c:	697a      	ldr	r2, [r7, #20]
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a17      	ldr	r2, [pc, #92]	; (8010d0c <TIM_OC3_SetConfig+0xe4>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d003      	beq.n	8010cba <TIM_OC3_SetConfig+0x92>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4a16      	ldr	r2, [pc, #88]	; (8010d10 <TIM_OC3_SetConfig+0xe8>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d113      	bne.n	8010ce2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	695b      	ldr	r3, [r3, #20]
 8010cce:	011b      	lsls	r3, r3, #4
 8010cd0:	693a      	ldr	r2, [r7, #16]
 8010cd2:	4313      	orrs	r3, r2
 8010cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	699b      	ldr	r3, [r3, #24]
 8010cda:	011b      	lsls	r3, r3, #4
 8010cdc:	693a      	ldr	r2, [r7, #16]
 8010cde:	4313      	orrs	r3, r2
 8010ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	693a      	ldr	r2, [r7, #16]
 8010ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	68fa      	ldr	r2, [r7, #12]
 8010cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	685a      	ldr	r2, [r3, #4]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	697a      	ldr	r2, [r7, #20]
 8010cfa:	621a      	str	r2, [r3, #32]
}
 8010cfc:	bf00      	nop
 8010cfe:	371c      	adds	r7, #28
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr
 8010d08:	fffeff8f 	.word	0xfffeff8f
 8010d0c:	40010000 	.word	0x40010000
 8010d10:	40010400 	.word	0x40010400

08010d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b087      	sub	sp, #28
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a1b      	ldr	r3, [r3, #32]
 8010d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6a1b      	ldr	r3, [r3, #32]
 8010d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	69db      	ldr	r3, [r3, #28]
 8010d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010d3c:	68fa      	ldr	r2, [r7, #12]
 8010d3e:	4b1e      	ldr	r3, [pc, #120]	; (8010db8 <TIM_OC4_SetConfig+0xa4>)
 8010d40:	4013      	ands	r3, r2
 8010d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	021b      	lsls	r3, r3, #8
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	4313      	orrs	r3, r2
 8010d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	031b      	lsls	r3, r3, #12
 8010d66:	693a      	ldr	r2, [r7, #16]
 8010d68:	4313      	orrs	r3, r2
 8010d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4a13      	ldr	r2, [pc, #76]	; (8010dbc <TIM_OC4_SetConfig+0xa8>)
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d003      	beq.n	8010d7c <TIM_OC4_SetConfig+0x68>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	4a12      	ldr	r2, [pc, #72]	; (8010dc0 <TIM_OC4_SetConfig+0xac>)
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	d109      	bne.n	8010d90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	695b      	ldr	r3, [r3, #20]
 8010d88:	019b      	lsls	r3, r3, #6
 8010d8a:	697a      	ldr	r2, [r7, #20]
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	697a      	ldr	r2, [r7, #20]
 8010d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	685a      	ldr	r2, [r3, #4]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	693a      	ldr	r2, [r7, #16]
 8010da8:	621a      	str	r2, [r3, #32]
}
 8010daa:	bf00      	nop
 8010dac:	371c      	adds	r7, #28
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	feff8fff 	.word	0xfeff8fff
 8010dbc:	40010000 	.word	0x40010000
 8010dc0:	40010400 	.word	0x40010400

08010dc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b087      	sub	sp, #28
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6a1b      	ldr	r3, [r3, #32]
 8010dd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6a1b      	ldr	r3, [r3, #32]
 8010dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010dec:	68fa      	ldr	r2, [r7, #12]
 8010dee:	4b1b      	ldr	r3, [pc, #108]	; (8010e5c <TIM_OC5_SetConfig+0x98>)
 8010df0:	4013      	ands	r3, r2
 8010df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	68fa      	ldr	r2, [r7, #12]
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010e04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	689b      	ldr	r3, [r3, #8]
 8010e0a:	041b      	lsls	r3, r3, #16
 8010e0c:	693a      	ldr	r2, [r7, #16]
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	4a12      	ldr	r2, [pc, #72]	; (8010e60 <TIM_OC5_SetConfig+0x9c>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d003      	beq.n	8010e22 <TIM_OC5_SetConfig+0x5e>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4a11      	ldr	r2, [pc, #68]	; (8010e64 <TIM_OC5_SetConfig+0xa0>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d109      	bne.n	8010e36 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	695b      	ldr	r3, [r3, #20]
 8010e2e:	021b      	lsls	r3, r3, #8
 8010e30:	697a      	ldr	r2, [r7, #20]
 8010e32:	4313      	orrs	r3, r2
 8010e34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	697a      	ldr	r2, [r7, #20]
 8010e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	68fa      	ldr	r2, [r7, #12]
 8010e40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	685a      	ldr	r2, [r3, #4]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	693a      	ldr	r2, [r7, #16]
 8010e4e:	621a      	str	r2, [r3, #32]
}
 8010e50:	bf00      	nop
 8010e52:	371c      	adds	r7, #28
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr
 8010e5c:	fffeff8f 	.word	0xfffeff8f
 8010e60:	40010000 	.word	0x40010000
 8010e64:	40010400 	.word	0x40010400

08010e68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b087      	sub	sp, #28
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6a1b      	ldr	r3, [r3, #32]
 8010e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6a1b      	ldr	r3, [r3, #32]
 8010e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	4b1c      	ldr	r3, [pc, #112]	; (8010f04 <TIM_OC6_SetConfig+0x9c>)
 8010e94:	4013      	ands	r3, r2
 8010e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	021b      	lsls	r3, r3, #8
 8010e9e:	68fa      	ldr	r2, [r7, #12]
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	689b      	ldr	r3, [r3, #8]
 8010eb0:	051b      	lsls	r3, r3, #20
 8010eb2:	693a      	ldr	r2, [r7, #16]
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	4a13      	ldr	r2, [pc, #76]	; (8010f08 <TIM_OC6_SetConfig+0xa0>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d003      	beq.n	8010ec8 <TIM_OC6_SetConfig+0x60>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	4a12      	ldr	r2, [pc, #72]	; (8010f0c <TIM_OC6_SetConfig+0xa4>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d109      	bne.n	8010edc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010ece:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	695b      	ldr	r3, [r3, #20]
 8010ed4:	029b      	lsls	r3, r3, #10
 8010ed6:	697a      	ldr	r2, [r7, #20]
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	697a      	ldr	r2, [r7, #20]
 8010ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	68fa      	ldr	r2, [r7, #12]
 8010ee6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	685a      	ldr	r2, [r3, #4]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	693a      	ldr	r2, [r7, #16]
 8010ef4:	621a      	str	r2, [r3, #32]
}
 8010ef6:	bf00      	nop
 8010ef8:	371c      	adds	r7, #28
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr
 8010f02:	bf00      	nop
 8010f04:	feff8fff 	.word	0xfeff8fff
 8010f08:	40010000 	.word	0x40010000
 8010f0c:	40010400 	.word	0x40010400

08010f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b087      	sub	sp, #28
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	6a1b      	ldr	r3, [r3, #32]
 8010f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6a1b      	ldr	r3, [r3, #32]
 8010f26:	f023 0201 	bic.w	r2, r3, #1
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	699b      	ldr	r3, [r3, #24]
 8010f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	011b      	lsls	r3, r3, #4
 8010f40:	693a      	ldr	r2, [r7, #16]
 8010f42:	4313      	orrs	r3, r2
 8010f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	f023 030a 	bic.w	r3, r3, #10
 8010f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010f4e:	697a      	ldr	r2, [r7, #20]
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	4313      	orrs	r3, r2
 8010f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	693a      	ldr	r2, [r7, #16]
 8010f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	697a      	ldr	r2, [r7, #20]
 8010f60:	621a      	str	r2, [r3, #32]
}
 8010f62:	bf00      	nop
 8010f64:	371c      	adds	r7, #28
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr

08010f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010f6e:	b480      	push	{r7}
 8010f70:	b087      	sub	sp, #28
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	60f8      	str	r0, [r7, #12]
 8010f76:	60b9      	str	r1, [r7, #8]
 8010f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	6a1b      	ldr	r3, [r3, #32]
 8010f7e:	f023 0210 	bic.w	r2, r3, #16
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	699b      	ldr	r3, [r3, #24]
 8010f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	6a1b      	ldr	r3, [r3, #32]
 8010f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	031b      	lsls	r3, r3, #12
 8010f9e:	697a      	ldr	r2, [r7, #20]
 8010fa0:	4313      	orrs	r3, r2
 8010fa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010faa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	011b      	lsls	r3, r3, #4
 8010fb0:	693a      	ldr	r2, [r7, #16]
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	697a      	ldr	r2, [r7, #20]
 8010fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	693a      	ldr	r2, [r7, #16]
 8010fc0:	621a      	str	r2, [r3, #32]
}
 8010fc2:	bf00      	nop
 8010fc4:	371c      	adds	r7, #28
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr

08010fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010fce:	b480      	push	{r7}
 8010fd0:	b085      	sub	sp, #20
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
 8010fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	689b      	ldr	r3, [r3, #8]
 8010fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	4313      	orrs	r3, r2
 8010fec:	f043 0307 	orr.w	r3, r3, #7
 8010ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	68fa      	ldr	r2, [r7, #12]
 8010ff6:	609a      	str	r2, [r3, #8]
}
 8010ff8:	bf00      	nop
 8010ffa:	3714      	adds	r7, #20
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr

08011004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011004:	b480      	push	{r7}
 8011006:	b087      	sub	sp, #28
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	607a      	str	r2, [r7, #4]
 8011010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	689b      	ldr	r3, [r3, #8]
 8011016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801101e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	021a      	lsls	r2, r3, #8
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	431a      	orrs	r2, r3
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	4313      	orrs	r3, r2
 801102c:	697a      	ldr	r2, [r7, #20]
 801102e:	4313      	orrs	r3, r2
 8011030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	697a      	ldr	r2, [r7, #20]
 8011036:	609a      	str	r2, [r3, #8]
}
 8011038:	bf00      	nop
 801103a:	371c      	adds	r7, #28
 801103c:	46bd      	mov	sp, r7
 801103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011042:	4770      	bx	lr

08011044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011044:	b480      	push	{r7}
 8011046:	b087      	sub	sp, #28
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	f003 031f 	and.w	r3, r3, #31
 8011056:	2201      	movs	r2, #1
 8011058:	fa02 f303 	lsl.w	r3, r2, r3
 801105c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6a1a      	ldr	r2, [r3, #32]
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	43db      	mvns	r3, r3
 8011066:	401a      	ands	r2, r3
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	6a1a      	ldr	r2, [r3, #32]
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	f003 031f 	and.w	r3, r3, #31
 8011076:	6879      	ldr	r1, [r7, #4]
 8011078:	fa01 f303 	lsl.w	r3, r1, r3
 801107c:	431a      	orrs	r2, r3
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	621a      	str	r2, [r3, #32]
}
 8011082:	bf00      	nop
 8011084:	371c      	adds	r7, #28
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr
	...

08011090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011090:	b480      	push	{r7}
 8011092:	b085      	sub	sp, #20
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	d101      	bne.n	80110a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80110a4:	2302      	movs	r3, #2
 80110a6:	e06d      	b.n	8011184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2201      	movs	r2, #1
 80110ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2202      	movs	r2, #2
 80110b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	685b      	ldr	r3, [r3, #4]
 80110be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	689b      	ldr	r3, [r3, #8]
 80110c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a30      	ldr	r2, [pc, #192]	; (8011190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d004      	beq.n	80110dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	4a2f      	ldr	r2, [pc, #188]	; (8011194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d108      	bne.n	80110ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80110e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	4313      	orrs	r3, r2
 80110ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	68fa      	ldr	r2, [r7, #12]
 80110fc:	4313      	orrs	r3, r2
 80110fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	68fa      	ldr	r2, [r7, #12]
 8011106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4a20      	ldr	r2, [pc, #128]	; (8011190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d022      	beq.n	8011158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801111a:	d01d      	beq.n	8011158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a1d      	ldr	r2, [pc, #116]	; (8011198 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d018      	beq.n	8011158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a1c      	ldr	r2, [pc, #112]	; (801119c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d013      	beq.n	8011158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a1a      	ldr	r2, [pc, #104]	; (80111a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011136:	4293      	cmp	r3, r2
 8011138:	d00e      	beq.n	8011158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a15      	ldr	r2, [pc, #84]	; (8011194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d009      	beq.n	8011158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a16      	ldr	r2, [pc, #88]	; (80111a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d004      	beq.n	8011158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a15      	ldr	r2, [pc, #84]	; (80111a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d10c      	bne.n	8011172 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801115e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	689b      	ldr	r3, [r3, #8]
 8011164:	68ba      	ldr	r2, [r7, #8]
 8011166:	4313      	orrs	r3, r2
 8011168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	68ba      	ldr	r2, [r7, #8]
 8011170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2201      	movs	r2, #1
 8011176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011182:	2300      	movs	r3, #0
}
 8011184:	4618      	mov	r0, r3
 8011186:	3714      	adds	r7, #20
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr
 8011190:	40010000 	.word	0x40010000
 8011194:	40010400 	.word	0x40010400
 8011198:	40000400 	.word	0x40000400
 801119c:	40000800 	.word	0x40000800
 80111a0:	40000c00 	.word	0x40000c00
 80111a4:	40014000 	.word	0x40014000
 80111a8:	40001800 	.word	0x40001800

080111ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80111b4:	bf00      	nop
 80111b6:	370c      	adds	r7, #12
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80111c8:	bf00      	nop
 80111ca:	370c      	adds	r7, #12
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b083      	sub	sp, #12
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80111dc:	bf00      	nop
 80111de:	370c      	adds	r7, #12
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b085      	sub	sp, #20
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80111f2:	2300      	movs	r3, #0
 80111f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80111f6:	2300      	movs	r3, #0
 80111f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b01      	cmp	r3, #1
 8011200:	d027      	beq.n	8011252 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	4b2f      	ldr	r3, [pc, #188]	; (80112c8 <FMC_SDRAM_Init+0xe0>)
 801120c:	4013      	ands	r3, r2
 801120e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011218:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 801121e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8011224:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 801122a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8011230:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8011236:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 801123c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011242:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011244:	68fa      	ldr	r2, [r7, #12]
 8011246:	4313      	orrs	r3, r2
 8011248:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	68fa      	ldr	r2, [r7, #12]
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	e032      	b.n	80112b8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801125e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011268:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801126e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011270:	68fa      	ldr	r2, [r7, #12]
 8011272:	4313      	orrs	r3, r2
 8011274:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801127c:	68ba      	ldr	r2, [r7, #8]
 801127e:	4b12      	ldr	r3, [pc, #72]	; (80112c8 <FMC_SDRAM_Init+0xe0>)
 8011280:	4013      	ands	r3, r2
 8011282:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801128c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8011292:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8011298:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 801129e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80112a4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80112a6:	68ba      	ldr	r2, [r7, #8]
 80112a8:	4313      	orrs	r3, r2
 80112aa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	68fa      	ldr	r2, [r7, #12]
 80112b0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	68ba      	ldr	r2, [r7, #8]
 80112b6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80112b8:	2300      	movs	r3, #0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3714      	adds	r7, #20
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop
 80112c8:	ffff8000 	.word	0xffff8000

080112cc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b087      	sub	sp, #28
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	60b9      	str	r1, [r7, #8]
 80112d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80112d8:	2300      	movs	r3, #0
 80112da:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80112dc:	2300      	movs	r3, #0
 80112de:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2b01      	cmp	r3, #1
 80112e4:	d02e      	beq.n	8011344 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	689b      	ldr	r3, [r3, #8]
 80112ea:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80112f2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	3b01      	subs	r3, #1
 8011300:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011302:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	689b      	ldr	r3, [r3, #8]
 8011308:	3b01      	subs	r3, #1
 801130a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 801130c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	68db      	ldr	r3, [r3, #12]
 8011312:	3b01      	subs	r3, #1
 8011314:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011316:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	691b      	ldr	r3, [r3, #16]
 801131c:	3b01      	subs	r3, #1
 801131e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011320:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	695b      	ldr	r3, [r3, #20]
 8011326:	3b01      	subs	r3, #1
 8011328:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 801132a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	699b      	ldr	r3, [r3, #24]
 8011330:	3b01      	subs	r3, #1
 8011332:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011334:	4313      	orrs	r3, r2
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	4313      	orrs	r3, r2
 801133a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	697a      	ldr	r2, [r7, #20]
 8011340:	609a      	str	r2, [r3, #8]
 8011342:	e039      	b.n	80113b8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 801134a:	697a      	ldr	r2, [r7, #20]
 801134c:	4b1e      	ldr	r3, [pc, #120]	; (80113c8 <FMC_SDRAM_Timing_Init+0xfc>)
 801134e:	4013      	ands	r3, r2
 8011350:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	3b01      	subs	r3, #1
 8011358:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	695b      	ldr	r3, [r3, #20]
 801135e:	3b01      	subs	r3, #1
 8011360:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8011362:	4313      	orrs	r3, r2
 8011364:	697a      	ldr	r2, [r7, #20]
 8011366:	4313      	orrs	r3, r2
 8011368:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011376:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	3b01      	subs	r3, #1
 8011384:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011386:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	689b      	ldr	r3, [r3, #8]
 801138c:	3b01      	subs	r3, #1
 801138e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8011390:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	691b      	ldr	r3, [r3, #16]
 8011396:	3b01      	subs	r3, #1
 8011398:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 801139a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	699b      	ldr	r3, [r3, #24]
 80113a0:	3b01      	subs	r3, #1
 80113a2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80113a4:	4313      	orrs	r3, r2
 80113a6:	693a      	ldr	r2, [r7, #16]
 80113a8:	4313      	orrs	r3, r2
 80113aa:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	697a      	ldr	r2, [r7, #20]
 80113b0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	693a      	ldr	r2, [r7, #16]
 80113b6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80113b8:	2300      	movs	r3, #0
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	371c      	adds	r7, #28
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr
 80113c6:	bf00      	nop
 80113c8:	ff0f0fff 	.word	0xff0f0fff

080113cc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80113cc:	b480      	push	{r7}
 80113ce:	b085      	sub	sp, #20
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	691a      	ldr	r2, [r3, #16]
 80113dc:	4b0c      	ldr	r3, [pc, #48]	; (8011410 <FMC_SDRAM_SendCommand+0x44>)
 80113de:	4013      	ands	r3, r2
 80113e0:	68ba      	ldr	r2, [r7, #8]
 80113e2:	6811      	ldr	r1, [r2, #0]
 80113e4:	68ba      	ldr	r2, [r7, #8]
 80113e6:	6852      	ldr	r2, [r2, #4]
 80113e8:	4311      	orrs	r1, r2
 80113ea:	68ba      	ldr	r2, [r7, #8]
 80113ec:	6892      	ldr	r2, [r2, #8]
 80113ee:	3a01      	subs	r2, #1
 80113f0:	0152      	lsls	r2, r2, #5
 80113f2:	4311      	orrs	r1, r2
 80113f4:	68ba      	ldr	r2, [r7, #8]
 80113f6:	68d2      	ldr	r2, [r2, #12]
 80113f8:	0252      	lsls	r2, r2, #9
 80113fa:	430a      	orrs	r2, r1
 80113fc:	431a      	orrs	r2, r3
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	3714      	adds	r7, #20
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr
 8011410:	ffc00000 	.word	0xffc00000

08011414 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011414:	b480      	push	{r7}
 8011416:	b083      	sub	sp, #12
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	695a      	ldr	r2, [r3, #20]
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	005b      	lsls	r3, r3, #1
 8011426:	431a      	orrs	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 801142c:	2300      	movs	r3, #0
}
 801142e:	4618      	mov	r0, r3
 8011430:	370c      	adds	r7, #12
 8011432:	46bd      	mov	sp, r7
 8011434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011438:	4770      	bx	lr

0801143a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801143a:	b480      	push	{r7}
 801143c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801143e:	bf00      	nop
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011448:	b480      	push	{r7}
 801144a:	b085      	sub	sp, #20
 801144c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801144e:	f3ef 8305 	mrs	r3, IPSR
 8011452:	60bb      	str	r3, [r7, #8]
  return(result);
 8011454:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011456:	2b00      	cmp	r3, #0
 8011458:	d10f      	bne.n	801147a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801145a:	f3ef 8310 	mrs	r3, PRIMASK
 801145e:	607b      	str	r3, [r7, #4]
  return(result);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d105      	bne.n	8011472 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011466:	f3ef 8311 	mrs	r3, BASEPRI
 801146a:	603b      	str	r3, [r7, #0]
  return(result);
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d007      	beq.n	8011482 <osKernelInitialize+0x3a>
 8011472:	4b0e      	ldr	r3, [pc, #56]	; (80114ac <osKernelInitialize+0x64>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b02      	cmp	r3, #2
 8011478:	d103      	bne.n	8011482 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801147a:	f06f 0305 	mvn.w	r3, #5
 801147e:	60fb      	str	r3, [r7, #12]
 8011480:	e00c      	b.n	801149c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011482:	4b0a      	ldr	r3, [pc, #40]	; (80114ac <osKernelInitialize+0x64>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d105      	bne.n	8011496 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801148a:	4b08      	ldr	r3, [pc, #32]	; (80114ac <osKernelInitialize+0x64>)
 801148c:	2201      	movs	r2, #1
 801148e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011490:	2300      	movs	r3, #0
 8011492:	60fb      	str	r3, [r7, #12]
 8011494:	e002      	b.n	801149c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011496:	f04f 33ff 	mov.w	r3, #4294967295
 801149a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801149c:	68fb      	ldr	r3, [r7, #12]
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3714      	adds	r7, #20
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	200239e4 	.word	0x200239e4

080114b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b084      	sub	sp, #16
 80114b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114b6:	f3ef 8305 	mrs	r3, IPSR
 80114ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80114bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d10f      	bne.n	80114e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114c2:	f3ef 8310 	mrs	r3, PRIMASK
 80114c6:	607b      	str	r3, [r7, #4]
  return(result);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d105      	bne.n	80114da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80114ce:	f3ef 8311 	mrs	r3, BASEPRI
 80114d2:	603b      	str	r3, [r7, #0]
  return(result);
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d007      	beq.n	80114ea <osKernelStart+0x3a>
 80114da:	4b0f      	ldr	r3, [pc, #60]	; (8011518 <osKernelStart+0x68>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	2b02      	cmp	r3, #2
 80114e0:	d103      	bne.n	80114ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80114e2:	f06f 0305 	mvn.w	r3, #5
 80114e6:	60fb      	str	r3, [r7, #12]
 80114e8:	e010      	b.n	801150c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80114ea:	4b0b      	ldr	r3, [pc, #44]	; (8011518 <osKernelStart+0x68>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d109      	bne.n	8011506 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80114f2:	f7ff ffa2 	bl	801143a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80114f6:	4b08      	ldr	r3, [pc, #32]	; (8011518 <osKernelStart+0x68>)
 80114f8:	2202      	movs	r2, #2
 80114fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80114fc:	f002 fb18 	bl	8013b30 <vTaskStartScheduler>
      stat = osOK;
 8011500:	2300      	movs	r3, #0
 8011502:	60fb      	str	r3, [r7, #12]
 8011504:	e002      	b.n	801150c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011506:	f04f 33ff 	mov.w	r3, #4294967295
 801150a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801150c:	68fb      	ldr	r3, [r7, #12]
}
 801150e:	4618      	mov	r0, r3
 8011510:	3710      	adds	r7, #16
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	200239e4 	.word	0x200239e4

0801151c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801151c:	b580      	push	{r7, lr}
 801151e:	b090      	sub	sp, #64	; 0x40
 8011520:	af04      	add	r7, sp, #16
 8011522:	60f8      	str	r0, [r7, #12]
 8011524:	60b9      	str	r1, [r7, #8]
 8011526:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011528:	2300      	movs	r3, #0
 801152a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801152c:	f3ef 8305 	mrs	r3, IPSR
 8011530:	61fb      	str	r3, [r7, #28]
  return(result);
 8011532:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011534:	2b00      	cmp	r3, #0
 8011536:	f040 808f 	bne.w	8011658 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801153a:	f3ef 8310 	mrs	r3, PRIMASK
 801153e:	61bb      	str	r3, [r7, #24]
  return(result);
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d105      	bne.n	8011552 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011546:	f3ef 8311 	mrs	r3, BASEPRI
 801154a:	617b      	str	r3, [r7, #20]
  return(result);
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d003      	beq.n	801155a <osThreadNew+0x3e>
 8011552:	4b44      	ldr	r3, [pc, #272]	; (8011664 <osThreadNew+0x148>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	2b02      	cmp	r3, #2
 8011558:	d07e      	beq.n	8011658 <osThreadNew+0x13c>
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d07b      	beq.n	8011658 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011560:	2380      	movs	r3, #128	; 0x80
 8011562:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011564:	2318      	movs	r3, #24
 8011566:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011568:	2300      	movs	r3, #0
 801156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801156c:	f04f 33ff 	mov.w	r3, #4294967295
 8011570:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d045      	beq.n	8011604 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d002      	beq.n	8011586 <osThreadNew+0x6a>
        name = attr->name;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	699b      	ldr	r3, [r3, #24]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d002      	beq.n	8011594 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	699b      	ldr	r3, [r3, #24]
 8011592:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011596:	2b00      	cmp	r3, #0
 8011598:	d008      	beq.n	80115ac <osThreadNew+0x90>
 801159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159c:	2b38      	cmp	r3, #56	; 0x38
 801159e:	d805      	bhi.n	80115ac <osThreadNew+0x90>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	f003 0301 	and.w	r3, r3, #1
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d001      	beq.n	80115b0 <osThreadNew+0x94>
        return (NULL);
 80115ac:	2300      	movs	r3, #0
 80115ae:	e054      	b.n	801165a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	695b      	ldr	r3, [r3, #20]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d003      	beq.n	80115c0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	695b      	ldr	r3, [r3, #20]
 80115bc:	089b      	lsrs	r3, r3, #2
 80115be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	689b      	ldr	r3, [r3, #8]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d00e      	beq.n	80115e6 <osThreadNew+0xca>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	2b5b      	cmp	r3, #91	; 0x5b
 80115ce:	d90a      	bls.n	80115e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d006      	beq.n	80115e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	695b      	ldr	r3, [r3, #20]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d002      	beq.n	80115e6 <osThreadNew+0xca>
        mem = 1;
 80115e0:	2301      	movs	r3, #1
 80115e2:	623b      	str	r3, [r7, #32]
 80115e4:	e010      	b.n	8011608 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	689b      	ldr	r3, [r3, #8]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d10c      	bne.n	8011608 <osThreadNew+0xec>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d108      	bne.n	8011608 <osThreadNew+0xec>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	691b      	ldr	r3, [r3, #16]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d104      	bne.n	8011608 <osThreadNew+0xec>
          mem = 0;
 80115fe:	2300      	movs	r3, #0
 8011600:	623b      	str	r3, [r7, #32]
 8011602:	e001      	b.n	8011608 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011604:	2300      	movs	r3, #0
 8011606:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011608:	6a3b      	ldr	r3, [r7, #32]
 801160a:	2b01      	cmp	r3, #1
 801160c:	d110      	bne.n	8011630 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011612:	687a      	ldr	r2, [r7, #4]
 8011614:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011616:	9202      	str	r2, [sp, #8]
 8011618:	9301      	str	r3, [sp, #4]
 801161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161c:	9300      	str	r3, [sp, #0]
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f002 f8a3 	bl	8013770 <xTaskCreateStatic>
 801162a:	4603      	mov	r3, r0
 801162c:	613b      	str	r3, [r7, #16]
 801162e:	e013      	b.n	8011658 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011630:	6a3b      	ldr	r3, [r7, #32]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d110      	bne.n	8011658 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011638:	b29a      	uxth	r2, r3
 801163a:	f107 0310 	add.w	r3, r7, #16
 801163e:	9301      	str	r3, [sp, #4]
 8011640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011642:	9300      	str	r3, [sp, #0]
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011648:	68f8      	ldr	r0, [r7, #12]
 801164a:	f002 f8f4 	bl	8013836 <xTaskCreate>
 801164e:	4603      	mov	r3, r0
 8011650:	2b01      	cmp	r3, #1
 8011652:	d001      	beq.n	8011658 <osThreadNew+0x13c>
          hTask = NULL;
 8011654:	2300      	movs	r3, #0
 8011656:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011658:	693b      	ldr	r3, [r7, #16]
}
 801165a:	4618      	mov	r0, r3
 801165c:	3730      	adds	r7, #48	; 0x30
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	200239e4 	.word	0x200239e4

08011668 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011668:	b480      	push	{r7}
 801166a:	b085      	sub	sp, #20
 801166c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801166e:	f3ef 8305 	mrs	r3, IPSR
 8011672:	60bb      	str	r3, [r7, #8]
  return(result);
 8011674:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011676:	2b00      	cmp	r3, #0
 8011678:	d10f      	bne.n	801169a <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801167a:	f3ef 8310 	mrs	r3, PRIMASK
 801167e:	607b      	str	r3, [r7, #4]
  return(result);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d105      	bne.n	8011692 <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011686:	f3ef 8311 	mrs	r3, BASEPRI
 801168a:	603b      	str	r3, [r7, #0]
  return(result);
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d007      	beq.n	80116a2 <osThreadYield+0x3a>
 8011692:	4b0c      	ldr	r3, [pc, #48]	; (80116c4 <osThreadYield+0x5c>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2b02      	cmp	r3, #2
 8011698:	d103      	bne.n	80116a2 <osThreadYield+0x3a>
    stat = osErrorISR;
 801169a:	f06f 0305 	mvn.w	r3, #5
 801169e:	60fb      	str	r3, [r7, #12]
 80116a0:	e009      	b.n	80116b6 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 80116a2:	2300      	movs	r3, #0
 80116a4:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 80116a6:	4b08      	ldr	r3, [pc, #32]	; (80116c8 <osThreadYield+0x60>)
 80116a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ac:	601a      	str	r2, [r3, #0]
 80116ae:	f3bf 8f4f 	dsb	sy
 80116b2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80116b6:	68fb      	ldr	r3, [r7, #12]
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3714      	adds	r7, #20
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr
 80116c4:	200239e4 	.word	0x200239e4
 80116c8:	e000ed04 	.word	0xe000ed04

080116cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b086      	sub	sp, #24
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80116d4:	f3ef 8305 	mrs	r3, IPSR
 80116d8:	613b      	str	r3, [r7, #16]
  return(result);
 80116da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d10f      	bne.n	8011700 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116e0:	f3ef 8310 	mrs	r3, PRIMASK
 80116e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d105      	bne.n	80116f8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80116ec:	f3ef 8311 	mrs	r3, BASEPRI
 80116f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d007      	beq.n	8011708 <osDelay+0x3c>
 80116f8:	4b0a      	ldr	r3, [pc, #40]	; (8011724 <osDelay+0x58>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	d103      	bne.n	8011708 <osDelay+0x3c>
    stat = osErrorISR;
 8011700:	f06f 0305 	mvn.w	r3, #5
 8011704:	617b      	str	r3, [r7, #20]
 8011706:	e007      	b.n	8011718 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011708:	2300      	movs	r3, #0
 801170a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d002      	beq.n	8011718 <osDelay+0x4c>
      vTaskDelay(ticks);
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f002 f9d6 	bl	8013ac4 <vTaskDelay>
    }
  }

  return (stat);
 8011718:	697b      	ldr	r3, [r7, #20]
}
 801171a:	4618      	mov	r0, r3
 801171c:	3718      	adds	r7, #24
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
 8011722:	bf00      	nop
 8011724:	200239e4 	.word	0x200239e4

08011728 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011728:	b580      	push	{r7, lr}
 801172a:	b08c      	sub	sp, #48	; 0x30
 801172c:	af02      	add	r7, sp, #8
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011734:	2300      	movs	r3, #0
 8011736:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011738:	f3ef 8305 	mrs	r3, IPSR
 801173c:	61bb      	str	r3, [r7, #24]
  return(result);
 801173e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011740:	2b00      	cmp	r3, #0
 8011742:	f040 8086 	bne.w	8011852 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011746:	f3ef 8310 	mrs	r3, PRIMASK
 801174a:	617b      	str	r3, [r7, #20]
  return(result);
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d105      	bne.n	801175e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011752:	f3ef 8311 	mrs	r3, BASEPRI
 8011756:	613b      	str	r3, [r7, #16]
  return(result);
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d003      	beq.n	8011766 <osSemaphoreNew+0x3e>
 801175e:	4b3f      	ldr	r3, [pc, #252]	; (801185c <osSemaphoreNew+0x134>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b02      	cmp	r3, #2
 8011764:	d075      	beq.n	8011852 <osSemaphoreNew+0x12a>
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d072      	beq.n	8011852 <osSemaphoreNew+0x12a>
 801176c:	68ba      	ldr	r2, [r7, #8]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	429a      	cmp	r2, r3
 8011772:	d86e      	bhi.n	8011852 <osSemaphoreNew+0x12a>
    mem = -1;
 8011774:	f04f 33ff 	mov.w	r3, #4294967295
 8011778:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d015      	beq.n	80117ac <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d006      	beq.n	8011796 <osSemaphoreNew+0x6e>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	2b4f      	cmp	r3, #79	; 0x4f
 801178e:	d902      	bls.n	8011796 <osSemaphoreNew+0x6e>
        mem = 1;
 8011790:	2301      	movs	r3, #1
 8011792:	623b      	str	r3, [r7, #32]
 8011794:	e00c      	b.n	80117b0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	689b      	ldr	r3, [r3, #8]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d108      	bne.n	80117b0 <osSemaphoreNew+0x88>
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	68db      	ldr	r3, [r3, #12]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d104      	bne.n	80117b0 <osSemaphoreNew+0x88>
          mem = 0;
 80117a6:	2300      	movs	r3, #0
 80117a8:	623b      	str	r3, [r7, #32]
 80117aa:	e001      	b.n	80117b0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80117ac:	2300      	movs	r3, #0
 80117ae:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80117b0:	6a3b      	ldr	r3, [r7, #32]
 80117b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b6:	d04c      	beq.n	8011852 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	d128      	bne.n	8011810 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80117be:	6a3b      	ldr	r3, [r7, #32]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d10a      	bne.n	80117da <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	2203      	movs	r2, #3
 80117ca:	9200      	str	r2, [sp, #0]
 80117cc:	2200      	movs	r2, #0
 80117ce:	2100      	movs	r1, #0
 80117d0:	2001      	movs	r0, #1
 80117d2:	f000 ffe1 	bl	8012798 <xQueueGenericCreateStatic>
 80117d6:	6278      	str	r0, [r7, #36]	; 0x24
 80117d8:	e005      	b.n	80117e6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80117da:	2203      	movs	r2, #3
 80117dc:	2100      	movs	r1, #0
 80117de:	2001      	movs	r0, #1
 80117e0:	f001 f85c 	bl	801289c <xQueueGenericCreate>
 80117e4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80117e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d022      	beq.n	8011832 <osSemaphoreNew+0x10a>
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d01f      	beq.n	8011832 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80117f2:	2300      	movs	r3, #0
 80117f4:	2200      	movs	r2, #0
 80117f6:	2100      	movs	r1, #0
 80117f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117fa:	f001 f927 	bl	8012a4c <xQueueGenericSend>
 80117fe:	4603      	mov	r3, r0
 8011800:	2b01      	cmp	r3, #1
 8011802:	d016      	beq.n	8011832 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8011804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011806:	f001 fddd 	bl	80133c4 <vQueueDelete>
            hSemaphore = NULL;
 801180a:	2300      	movs	r3, #0
 801180c:	627b      	str	r3, [r7, #36]	; 0x24
 801180e:	e010      	b.n	8011832 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	2b01      	cmp	r3, #1
 8011814:	d108      	bne.n	8011828 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	689b      	ldr	r3, [r3, #8]
 801181a:	461a      	mov	r2, r3
 801181c:	68b9      	ldr	r1, [r7, #8]
 801181e:	68f8      	ldr	r0, [r7, #12]
 8011820:	f001 f8a1 	bl	8012966 <xQueueCreateCountingSemaphoreStatic>
 8011824:	6278      	str	r0, [r7, #36]	; 0x24
 8011826:	e004      	b.n	8011832 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011828:	68b9      	ldr	r1, [r7, #8]
 801182a:	68f8      	ldr	r0, [r7, #12]
 801182c:	f001 f8d6 	bl	80129dc <xQueueCreateCountingSemaphore>
 8011830:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011834:	2b00      	cmp	r3, #0
 8011836:	d00c      	beq.n	8011852 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d003      	beq.n	8011846 <osSemaphoreNew+0x11e>
          name = attr->name;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	61fb      	str	r3, [r7, #28]
 8011844:	e001      	b.n	801184a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8011846:	2300      	movs	r3, #0
 8011848:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801184a:	69f9      	ldr	r1, [r7, #28]
 801184c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801184e:	f001 ff07 	bl	8013660 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011854:	4618      	mov	r0, r3
 8011856:	3728      	adds	r7, #40	; 0x28
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}
 801185c:	200239e4 	.word	0x200239e4

08011860 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011860:	b580      	push	{r7, lr}
 8011862:	b088      	sub	sp, #32
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801186e:	2300      	movs	r3, #0
 8011870:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011872:	69bb      	ldr	r3, [r7, #24]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d103      	bne.n	8011880 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011878:	f06f 0303 	mvn.w	r3, #3
 801187c:	61fb      	str	r3, [r7, #28]
 801187e:	e04b      	b.n	8011918 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011880:	f3ef 8305 	mrs	r3, IPSR
 8011884:	617b      	str	r3, [r7, #20]
  return(result);
 8011886:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011888:	2b00      	cmp	r3, #0
 801188a:	d10f      	bne.n	80118ac <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801188c:	f3ef 8310 	mrs	r3, PRIMASK
 8011890:	613b      	str	r3, [r7, #16]
  return(result);
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d105      	bne.n	80118a4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011898:	f3ef 8311 	mrs	r3, BASEPRI
 801189c:	60fb      	str	r3, [r7, #12]
  return(result);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d026      	beq.n	80118f2 <osSemaphoreAcquire+0x92>
 80118a4:	4b1f      	ldr	r3, [pc, #124]	; (8011924 <osSemaphoreAcquire+0xc4>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2b02      	cmp	r3, #2
 80118aa:	d122      	bne.n	80118f2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d003      	beq.n	80118ba <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80118b2:	f06f 0303 	mvn.w	r3, #3
 80118b6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80118b8:	e02d      	b.n	8011916 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80118ba:	2300      	movs	r3, #0
 80118bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80118be:	f107 0308 	add.w	r3, r7, #8
 80118c2:	461a      	mov	r2, r3
 80118c4:	2100      	movs	r1, #0
 80118c6:	69b8      	ldr	r0, [r7, #24]
 80118c8:	f001 fcf6 	bl	80132b8 <xQueueReceiveFromISR>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d003      	beq.n	80118da <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80118d2:	f06f 0302 	mvn.w	r3, #2
 80118d6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80118d8:	e01d      	b.n	8011916 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d01a      	beq.n	8011916 <osSemaphoreAcquire+0xb6>
 80118e0:	4b11      	ldr	r3, [pc, #68]	; (8011928 <osSemaphoreAcquire+0xc8>)
 80118e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118e6:	601a      	str	r2, [r3, #0]
 80118e8:	f3bf 8f4f 	dsb	sy
 80118ec:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80118f0:	e011      	b.n	8011916 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80118f2:	6839      	ldr	r1, [r7, #0]
 80118f4:	69b8      	ldr	r0, [r7, #24]
 80118f6:	f001 fbcb 	bl	8013090 <xQueueSemaphoreTake>
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	d00b      	beq.n	8011918 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d003      	beq.n	801190e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011906:	f06f 0301 	mvn.w	r3, #1
 801190a:	61fb      	str	r3, [r7, #28]
 801190c:	e004      	b.n	8011918 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801190e:	f06f 0302 	mvn.w	r3, #2
 8011912:	61fb      	str	r3, [r7, #28]
 8011914:	e000      	b.n	8011918 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011916:	bf00      	nop
      }
    }
  }

  return (stat);
 8011918:	69fb      	ldr	r3, [r7, #28]
}
 801191a:	4618      	mov	r0, r3
 801191c:	3720      	adds	r7, #32
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	200239e4 	.word	0x200239e4
 8011928:	e000ed04 	.word	0xe000ed04

0801192c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801192c:	b580      	push	{r7, lr}
 801192e:	b088      	sub	sp, #32
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011938:	2300      	movs	r3, #0
 801193a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d103      	bne.n	801194a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011942:	f06f 0303 	mvn.w	r3, #3
 8011946:	61fb      	str	r3, [r7, #28]
 8011948:	e03e      	b.n	80119c8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801194a:	f3ef 8305 	mrs	r3, IPSR
 801194e:	617b      	str	r3, [r7, #20]
  return(result);
 8011950:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011952:	2b00      	cmp	r3, #0
 8011954:	d10f      	bne.n	8011976 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011956:	f3ef 8310 	mrs	r3, PRIMASK
 801195a:	613b      	str	r3, [r7, #16]
  return(result);
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d105      	bne.n	801196e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011962:	f3ef 8311 	mrs	r3, BASEPRI
 8011966:	60fb      	str	r3, [r7, #12]
  return(result);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d01e      	beq.n	80119ac <osSemaphoreRelease+0x80>
 801196e:	4b19      	ldr	r3, [pc, #100]	; (80119d4 <osSemaphoreRelease+0xa8>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	2b02      	cmp	r3, #2
 8011974:	d11a      	bne.n	80119ac <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011976:	2300      	movs	r3, #0
 8011978:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801197a:	f107 0308 	add.w	r3, r7, #8
 801197e:	4619      	mov	r1, r3
 8011980:	69b8      	ldr	r0, [r7, #24]
 8011982:	f001 fa09 	bl	8012d98 <xQueueGiveFromISR>
 8011986:	4603      	mov	r3, r0
 8011988:	2b01      	cmp	r3, #1
 801198a:	d003      	beq.n	8011994 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801198c:	f06f 0302 	mvn.w	r3, #2
 8011990:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011992:	e018      	b.n	80119c6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d015      	beq.n	80119c6 <osSemaphoreRelease+0x9a>
 801199a:	4b0f      	ldr	r3, [pc, #60]	; (80119d8 <osSemaphoreRelease+0xac>)
 801199c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119a0:	601a      	str	r2, [r3, #0]
 80119a2:	f3bf 8f4f 	dsb	sy
 80119a6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80119aa:	e00c      	b.n	80119c6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80119ac:	2300      	movs	r3, #0
 80119ae:	2200      	movs	r2, #0
 80119b0:	2100      	movs	r1, #0
 80119b2:	69b8      	ldr	r0, [r7, #24]
 80119b4:	f001 f84a 	bl	8012a4c <xQueueGenericSend>
 80119b8:	4603      	mov	r3, r0
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	d004      	beq.n	80119c8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80119be:	f06f 0302 	mvn.w	r3, #2
 80119c2:	61fb      	str	r3, [r7, #28]
 80119c4:	e000      	b.n	80119c8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80119c6:	bf00      	nop
    }
  }

  return (stat);
 80119c8:	69fb      	ldr	r3, [r7, #28]
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3720      	adds	r7, #32
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	200239e4 	.word	0x200239e4
 80119d8:	e000ed04 	.word	0xe000ed04

080119dc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80119dc:	b580      	push	{r7, lr}
 80119de:	b08c      	sub	sp, #48	; 0x30
 80119e0:	af02      	add	r7, sp, #8
 80119e2:	60f8      	str	r0, [r7, #12]
 80119e4:	60b9      	str	r1, [r7, #8]
 80119e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80119e8:	2300      	movs	r3, #0
 80119ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119ec:	f3ef 8305 	mrs	r3, IPSR
 80119f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80119f2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d16f      	bne.n	8011ad8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80119f8:	f3ef 8310 	mrs	r3, PRIMASK
 80119fc:	617b      	str	r3, [r7, #20]
  return(result);
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d105      	bne.n	8011a10 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a04:	f3ef 8311 	mrs	r3, BASEPRI
 8011a08:	613b      	str	r3, [r7, #16]
  return(result);
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d003      	beq.n	8011a18 <osMessageQueueNew+0x3c>
 8011a10:	4b34      	ldr	r3, [pc, #208]	; (8011ae4 <osMessageQueueNew+0x108>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d05f      	beq.n	8011ad8 <osMessageQueueNew+0xfc>
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d05c      	beq.n	8011ad8 <osMessageQueueNew+0xfc>
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d059      	beq.n	8011ad8 <osMessageQueueNew+0xfc>
    mem = -1;
 8011a24:	f04f 33ff 	mov.w	r3, #4294967295
 8011a28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d029      	beq.n	8011a84 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d012      	beq.n	8011a5e <osMessageQueueNew+0x82>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	68db      	ldr	r3, [r3, #12]
 8011a3c:	2b4f      	cmp	r3, #79	; 0x4f
 8011a3e:	d90e      	bls.n	8011a5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00a      	beq.n	8011a5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	695a      	ldr	r2, [r3, #20]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	68b9      	ldr	r1, [r7, #8]
 8011a50:	fb01 f303 	mul.w	r3, r1, r3
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d302      	bcc.n	8011a5e <osMessageQueueNew+0x82>
        mem = 1;
 8011a58:	2301      	movs	r3, #1
 8011a5a:	623b      	str	r3, [r7, #32]
 8011a5c:	e014      	b.n	8011a88 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	689b      	ldr	r3, [r3, #8]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d110      	bne.n	8011a88 <osMessageQueueNew+0xac>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	68db      	ldr	r3, [r3, #12]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d10c      	bne.n	8011a88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d108      	bne.n	8011a88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	695b      	ldr	r3, [r3, #20]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d104      	bne.n	8011a88 <osMessageQueueNew+0xac>
          mem = 0;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	623b      	str	r3, [r7, #32]
 8011a82:	e001      	b.n	8011a88 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8011a84:	2300      	movs	r3, #0
 8011a86:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011a88:	6a3b      	ldr	r3, [r7, #32]
 8011a8a:	2b01      	cmp	r3, #1
 8011a8c:	d10b      	bne.n	8011aa6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	691a      	ldr	r2, [r3, #16]
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	689b      	ldr	r3, [r3, #8]
 8011a96:	2100      	movs	r1, #0
 8011a98:	9100      	str	r1, [sp, #0]
 8011a9a:	68b9      	ldr	r1, [r7, #8]
 8011a9c:	68f8      	ldr	r0, [r7, #12]
 8011a9e:	f000 fe7b 	bl	8012798 <xQueueGenericCreateStatic>
 8011aa2:	6278      	str	r0, [r7, #36]	; 0x24
 8011aa4:	e008      	b.n	8011ab8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8011aa6:	6a3b      	ldr	r3, [r7, #32]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d105      	bne.n	8011ab8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8011aac:	2200      	movs	r2, #0
 8011aae:	68b9      	ldr	r1, [r7, #8]
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f000 fef3 	bl	801289c <xQueueGenericCreate>
 8011ab6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d00c      	beq.n	8011ad8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d003      	beq.n	8011acc <osMessageQueueNew+0xf0>
        name = attr->name;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	61fb      	str	r3, [r7, #28]
 8011aca:	e001      	b.n	8011ad0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8011acc:	2300      	movs	r3, #0
 8011ace:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8011ad0:	69f9      	ldr	r1, [r7, #28]
 8011ad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ad4:	f001 fdc4 	bl	8013660 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3728      	adds	r7, #40	; 0x28
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	200239e4 	.word	0x200239e4

08011ae8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b08a      	sub	sp, #40	; 0x28
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	603b      	str	r3, [r7, #0]
 8011af4:	4613      	mov	r3, r2
 8011af6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b00:	f3ef 8305 	mrs	r3, IPSR
 8011b04:	61fb      	str	r3, [r7, #28]
  return(result);
 8011b06:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10f      	bne.n	8011b2c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8011b10:	61bb      	str	r3, [r7, #24]
  return(result);
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d105      	bne.n	8011b24 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011b18:	f3ef 8311 	mrs	r3, BASEPRI
 8011b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d02c      	beq.n	8011b7e <osMessageQueuePut+0x96>
 8011b24:	4b28      	ldr	r3, [pc, #160]	; (8011bc8 <osMessageQueuePut+0xe0>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2b02      	cmp	r3, #2
 8011b2a:	d128      	bne.n	8011b7e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011b2c:	6a3b      	ldr	r3, [r7, #32]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d005      	beq.n	8011b3e <osMessageQueuePut+0x56>
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d002      	beq.n	8011b3e <osMessageQueuePut+0x56>
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d003      	beq.n	8011b46 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8011b3e:	f06f 0303 	mvn.w	r3, #3
 8011b42:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011b44:	e039      	b.n	8011bba <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8011b46:	2300      	movs	r3, #0
 8011b48:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011b4a:	f107 0210 	add.w	r2, r7, #16
 8011b4e:	2300      	movs	r3, #0
 8011b50:	68b9      	ldr	r1, [r7, #8]
 8011b52:	6a38      	ldr	r0, [r7, #32]
 8011b54:	f001 f880 	bl	8012c58 <xQueueGenericSendFromISR>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	d003      	beq.n	8011b66 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8011b5e:	f06f 0302 	mvn.w	r3, #2
 8011b62:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011b64:	e029      	b.n	8011bba <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d026      	beq.n	8011bba <osMessageQueuePut+0xd2>
 8011b6c:	4b17      	ldr	r3, [pc, #92]	; (8011bcc <osMessageQueuePut+0xe4>)
 8011b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b72:	601a      	str	r2, [r3, #0]
 8011b74:	f3bf 8f4f 	dsb	sy
 8011b78:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011b7c:	e01d      	b.n	8011bba <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011b7e:	6a3b      	ldr	r3, [r7, #32]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d002      	beq.n	8011b8a <osMessageQueuePut+0xa2>
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d103      	bne.n	8011b92 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8011b8a:	f06f 0303 	mvn.w	r3, #3
 8011b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8011b90:	e014      	b.n	8011bbc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011b92:	2300      	movs	r3, #0
 8011b94:	683a      	ldr	r2, [r7, #0]
 8011b96:	68b9      	ldr	r1, [r7, #8]
 8011b98:	6a38      	ldr	r0, [r7, #32]
 8011b9a:	f000 ff57 	bl	8012a4c <xQueueGenericSend>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d00b      	beq.n	8011bbc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d003      	beq.n	8011bb2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8011baa:	f06f 0301 	mvn.w	r3, #1
 8011bae:	627b      	str	r3, [r7, #36]	; 0x24
 8011bb0:	e004      	b.n	8011bbc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8011bb2:	f06f 0302 	mvn.w	r3, #2
 8011bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8011bb8:	e000      	b.n	8011bbc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011bba:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3728      	adds	r7, #40	; 0x28
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	200239e4 	.word	0x200239e4
 8011bcc:	e000ed04 	.word	0xe000ed04

08011bd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b08a      	sub	sp, #40	; 0x28
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	607a      	str	r2, [r7, #4]
 8011bdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011be2:	2300      	movs	r3, #0
 8011be4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011be6:	f3ef 8305 	mrs	r3, IPSR
 8011bea:	61fb      	str	r3, [r7, #28]
  return(result);
 8011bec:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d10f      	bne.n	8011c12 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8011bf6:	61bb      	str	r3, [r7, #24]
  return(result);
 8011bf8:	69bb      	ldr	r3, [r7, #24]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d105      	bne.n	8011c0a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011bfe:	f3ef 8311 	mrs	r3, BASEPRI
 8011c02:	617b      	str	r3, [r7, #20]
  return(result);
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d02c      	beq.n	8011c64 <osMessageQueueGet+0x94>
 8011c0a:	4b28      	ldr	r3, [pc, #160]	; (8011cac <osMessageQueueGet+0xdc>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	2b02      	cmp	r3, #2
 8011c10:	d128      	bne.n	8011c64 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011c12:	6a3b      	ldr	r3, [r7, #32]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d005      	beq.n	8011c24 <osMessageQueueGet+0x54>
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d002      	beq.n	8011c24 <osMessageQueueGet+0x54>
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d003      	beq.n	8011c2c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8011c24:	f06f 0303 	mvn.w	r3, #3
 8011c28:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011c2a:	e038      	b.n	8011c9e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011c30:	f107 0310 	add.w	r3, r7, #16
 8011c34:	461a      	mov	r2, r3
 8011c36:	68b9      	ldr	r1, [r7, #8]
 8011c38:	6a38      	ldr	r0, [r7, #32]
 8011c3a:	f001 fb3d 	bl	80132b8 <xQueueReceiveFromISR>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b01      	cmp	r3, #1
 8011c42:	d003      	beq.n	8011c4c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8011c44:	f06f 0302 	mvn.w	r3, #2
 8011c48:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011c4a:	e028      	b.n	8011c9e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d025      	beq.n	8011c9e <osMessageQueueGet+0xce>
 8011c52:	4b17      	ldr	r3, [pc, #92]	; (8011cb0 <osMessageQueueGet+0xe0>)
 8011c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c58:	601a      	str	r2, [r3, #0]
 8011c5a:	f3bf 8f4f 	dsb	sy
 8011c5e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011c62:	e01c      	b.n	8011c9e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d002      	beq.n	8011c70 <osMessageQueueGet+0xa0>
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d103      	bne.n	8011c78 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8011c70:	f06f 0303 	mvn.w	r3, #3
 8011c74:	627b      	str	r3, [r7, #36]	; 0x24
 8011c76:	e013      	b.n	8011ca0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011c78:	683a      	ldr	r2, [r7, #0]
 8011c7a:	68b9      	ldr	r1, [r7, #8]
 8011c7c:	6a38      	ldr	r0, [r7, #32]
 8011c7e:	f001 f921 	bl	8012ec4 <xQueueReceive>
 8011c82:	4603      	mov	r3, r0
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d00b      	beq.n	8011ca0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d003      	beq.n	8011c96 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8011c8e:	f06f 0301 	mvn.w	r3, #1
 8011c92:	627b      	str	r3, [r7, #36]	; 0x24
 8011c94:	e004      	b.n	8011ca0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8011c96:	f06f 0302 	mvn.w	r3, #2
 8011c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8011c9c:	e000      	b.n	8011ca0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011c9e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3728      	adds	r7, #40	; 0x28
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	200239e4 	.word	0x200239e4
 8011cb0:	e000ed04 	.word	0xe000ed04

08011cb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011cb4:	b480      	push	{r7}
 8011cb6:	b085      	sub	sp, #20
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	4a07      	ldr	r2, [pc, #28]	; (8011ce0 <vApplicationGetIdleTaskMemory+0x2c>)
 8011cc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	4a06      	ldr	r2, [pc, #24]	; (8011ce4 <vApplicationGetIdleTaskMemory+0x30>)
 8011cca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2280      	movs	r2, #128	; 0x80
 8011cd0:	601a      	str	r2, [r3, #0]
}
 8011cd2:	bf00      	nop
 8011cd4:	3714      	adds	r7, #20
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop
 8011ce0:	200239e8 	.word	0x200239e8
 8011ce4:	20023a44 	.word	0x20023a44

08011ce8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011ce8:	b480      	push	{r7}
 8011cea:	b085      	sub	sp, #20
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	60b9      	str	r1, [r7, #8]
 8011cf2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	4a07      	ldr	r2, [pc, #28]	; (8011d14 <vApplicationGetTimerTaskMemory+0x2c>)
 8011cf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	4a06      	ldr	r2, [pc, #24]	; (8011d18 <vApplicationGetTimerTaskMemory+0x30>)
 8011cfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d06:	601a      	str	r2, [r3, #0]
}
 8011d08:	bf00      	nop
 8011d0a:	3714      	adds	r7, #20
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr
 8011d14:	20023c44 	.word	0x20023c44
 8011d18:	20023ca0 	.word	0x20023ca0

08011d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b08a      	sub	sp, #40	; 0x28
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011d24:	2300      	movs	r3, #0
 8011d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011d28:	f001 ff6c 	bl	8013c04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011d2c:	4b5b      	ldr	r3, [pc, #364]	; (8011e9c <pvPortMalloc+0x180>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d101      	bne.n	8011d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011d34:	f000 f91a 	bl	8011f6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011d38:	4b59      	ldr	r3, [pc, #356]	; (8011ea0 <pvPortMalloc+0x184>)
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	4013      	ands	r3, r2
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f040 8092 	bne.w	8011e6a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d01f      	beq.n	8011d8c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8011d4c:	2208      	movs	r2, #8
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4413      	add	r3, r2
 8011d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f003 0307 	and.w	r3, r3, #7
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d016      	beq.n	8011d8c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f023 0307 	bic.w	r3, r3, #7
 8011d64:	3308      	adds	r3, #8
 8011d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f003 0307 	and.w	r3, r3, #7
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00c      	beq.n	8011d8c <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011d72:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011d76:	b672      	cpsid	i
 8011d78:	f383 8811 	msr	BASEPRI, r3
 8011d7c:	f3bf 8f6f 	isb	sy
 8011d80:	f3bf 8f4f 	dsb	sy
 8011d84:	b662      	cpsie	i
 8011d86:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011d88:	bf00      	nop
 8011d8a:	e7fe      	b.n	8011d8a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d06b      	beq.n	8011e6a <pvPortMalloc+0x14e>
 8011d92:	4b44      	ldr	r3, [pc, #272]	; (8011ea4 <pvPortMalloc+0x188>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	687a      	ldr	r2, [r7, #4]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d866      	bhi.n	8011e6a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011d9c:	4b42      	ldr	r3, [pc, #264]	; (8011ea8 <pvPortMalloc+0x18c>)
 8011d9e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011da0:	4b41      	ldr	r3, [pc, #260]	; (8011ea8 <pvPortMalloc+0x18c>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011da6:	e004      	b.n	8011db2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011daa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d903      	bls.n	8011dc4 <pvPortMalloc+0xa8>
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d1f1      	bne.n	8011da8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011dc4:	4b35      	ldr	r3, [pc, #212]	; (8011e9c <pvPortMalloc+0x180>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d04d      	beq.n	8011e6a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011dce:	6a3b      	ldr	r3, [r7, #32]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2208      	movs	r2, #8
 8011dd4:	4413      	add	r3, r2
 8011dd6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dda:	681a      	ldr	r2, [r3, #0]
 8011ddc:	6a3b      	ldr	r3, [r7, #32]
 8011dde:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de2:	685a      	ldr	r2, [r3, #4]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	1ad2      	subs	r2, r2, r3
 8011de8:	2308      	movs	r3, #8
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d921      	bls.n	8011e34 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	4413      	add	r3, r2
 8011df6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	f003 0307 	and.w	r3, r3, #7
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d00c      	beq.n	8011e1c <pvPortMalloc+0x100>
	__asm volatile
 8011e02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011e06:	b672      	cpsid	i
 8011e08:	f383 8811 	msr	BASEPRI, r3
 8011e0c:	f3bf 8f6f 	isb	sy
 8011e10:	f3bf 8f4f 	dsb	sy
 8011e14:	b662      	cpsie	i
 8011e16:	613b      	str	r3, [r7, #16]
}
 8011e18:	bf00      	nop
 8011e1a:	e7fe      	b.n	8011e1a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1e:	685a      	ldr	r2, [r3, #4]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	1ad2      	subs	r2, r2, r3
 8011e24:	69bb      	ldr	r3, [r7, #24]
 8011e26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011e2e:	69b8      	ldr	r0, [r7, #24]
 8011e30:	f000 f8fe 	bl	8012030 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011e34:	4b1b      	ldr	r3, [pc, #108]	; (8011ea4 <pvPortMalloc+0x188>)
 8011e36:	681a      	ldr	r2, [r3, #0]
 8011e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	1ad3      	subs	r3, r2, r3
 8011e3e:	4a19      	ldr	r2, [pc, #100]	; (8011ea4 <pvPortMalloc+0x188>)
 8011e40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011e42:	4b18      	ldr	r3, [pc, #96]	; (8011ea4 <pvPortMalloc+0x188>)
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	4b19      	ldr	r3, [pc, #100]	; (8011eac <pvPortMalloc+0x190>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d203      	bcs.n	8011e56 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011e4e:	4b15      	ldr	r3, [pc, #84]	; (8011ea4 <pvPortMalloc+0x188>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4a16      	ldr	r2, [pc, #88]	; (8011eac <pvPortMalloc+0x190>)
 8011e54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e58:	685a      	ldr	r2, [r3, #4]
 8011e5a:	4b11      	ldr	r3, [pc, #68]	; (8011ea0 <pvPortMalloc+0x184>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	431a      	orrs	r2, r3
 8011e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e66:	2200      	movs	r2, #0
 8011e68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011e6a:	f001 fed9 	bl	8013c20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	f003 0307 	and.w	r3, r3, #7
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d00c      	beq.n	8011e92 <pvPortMalloc+0x176>
	__asm volatile
 8011e78:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011e7c:	b672      	cpsid	i
 8011e7e:	f383 8811 	msr	BASEPRI, r3
 8011e82:	f3bf 8f6f 	isb	sy
 8011e86:	f3bf 8f4f 	dsb	sy
 8011e8a:	b662      	cpsie	i
 8011e8c:	60fb      	str	r3, [r7, #12]
}
 8011e8e:	bf00      	nop
 8011e90:	e7fe      	b.n	8011e90 <pvPortMalloc+0x174>
	return pvReturn;
 8011e92:	69fb      	ldr	r3, [r7, #28]
}
 8011e94:	4618      	mov	r0, r3
 8011e96:	3728      	adds	r7, #40	; 0x28
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	200560a8 	.word	0x200560a8
 8011ea0:	200560b4 	.word	0x200560b4
 8011ea4:	200560ac 	.word	0x200560ac
 8011ea8:	200560a0 	.word	0x200560a0
 8011eac:	200560b0 	.word	0x200560b0

08011eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b086      	sub	sp, #24
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d04c      	beq.n	8011f5c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011ec2:	2308      	movs	r3, #8
 8011ec4:	425b      	negs	r3, r3
 8011ec6:	697a      	ldr	r2, [r7, #20]
 8011ec8:	4413      	add	r3, r2
 8011eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	685a      	ldr	r2, [r3, #4]
 8011ed4:	4b23      	ldr	r3, [pc, #140]	; (8011f64 <vPortFree+0xb4>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	4013      	ands	r3, r2
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d10c      	bne.n	8011ef8 <vPortFree+0x48>
	__asm volatile
 8011ede:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011ee2:	b672      	cpsid	i
 8011ee4:	f383 8811 	msr	BASEPRI, r3
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	b662      	cpsie	i
 8011ef2:	60fb      	str	r3, [r7, #12]
}
 8011ef4:	bf00      	nop
 8011ef6:	e7fe      	b.n	8011ef6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d00c      	beq.n	8011f1a <vPortFree+0x6a>
	__asm volatile
 8011f00:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011f04:	b672      	cpsid	i
 8011f06:	f383 8811 	msr	BASEPRI, r3
 8011f0a:	f3bf 8f6f 	isb	sy
 8011f0e:	f3bf 8f4f 	dsb	sy
 8011f12:	b662      	cpsie	i
 8011f14:	60bb      	str	r3, [r7, #8]
}
 8011f16:	bf00      	nop
 8011f18:	e7fe      	b.n	8011f18 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	685a      	ldr	r2, [r3, #4]
 8011f1e:	4b11      	ldr	r3, [pc, #68]	; (8011f64 <vPortFree+0xb4>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	4013      	ands	r3, r2
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d019      	beq.n	8011f5c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d115      	bne.n	8011f5c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	685a      	ldr	r2, [r3, #4]
 8011f34:	4b0b      	ldr	r3, [pc, #44]	; (8011f64 <vPortFree+0xb4>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	43db      	mvns	r3, r3
 8011f3a:	401a      	ands	r2, r3
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011f40:	f001 fe60 	bl	8013c04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	685a      	ldr	r2, [r3, #4]
 8011f48:	4b07      	ldr	r3, [pc, #28]	; (8011f68 <vPortFree+0xb8>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	4a06      	ldr	r2, [pc, #24]	; (8011f68 <vPortFree+0xb8>)
 8011f50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011f52:	6938      	ldr	r0, [r7, #16]
 8011f54:	f000 f86c 	bl	8012030 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011f58:	f001 fe62 	bl	8013c20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011f5c:	bf00      	nop
 8011f5e:	3718      	adds	r7, #24
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	200560b4 	.word	0x200560b4
 8011f68:	200560ac 	.word	0x200560ac

08011f6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b085      	sub	sp, #20
 8011f70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011f72:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 8011f76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011f78:	4b27      	ldr	r3, [pc, #156]	; (8012018 <prvHeapInit+0xac>)
 8011f7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	f003 0307 	and.w	r3, r3, #7
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d00c      	beq.n	8011fa0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	3307      	adds	r3, #7
 8011f8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f023 0307 	bic.w	r3, r3, #7
 8011f92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011f94:	68ba      	ldr	r2, [r7, #8]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	1ad3      	subs	r3, r2, r3
 8011f9a:	4a1f      	ldr	r2, [pc, #124]	; (8012018 <prvHeapInit+0xac>)
 8011f9c:	4413      	add	r3, r2
 8011f9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011fa4:	4a1d      	ldr	r2, [pc, #116]	; (801201c <prvHeapInit+0xb0>)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011faa:	4b1c      	ldr	r3, [pc, #112]	; (801201c <prvHeapInit+0xb0>)
 8011fac:	2200      	movs	r2, #0
 8011fae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	68ba      	ldr	r2, [r7, #8]
 8011fb4:	4413      	add	r3, r2
 8011fb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011fb8:	2208      	movs	r2, #8
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	1a9b      	subs	r3, r3, r2
 8011fbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	f023 0307 	bic.w	r3, r3, #7
 8011fc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	4a15      	ldr	r2, [pc, #84]	; (8012020 <prvHeapInit+0xb4>)
 8011fcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011fce:	4b14      	ldr	r3, [pc, #80]	; (8012020 <prvHeapInit+0xb4>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011fd6:	4b12      	ldr	r3, [pc, #72]	; (8012020 <prvHeapInit+0xb4>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	1ad2      	subs	r2, r2, r3
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011fec:	4b0c      	ldr	r3, [pc, #48]	; (8012020 <prvHeapInit+0xb4>)
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	4a0a      	ldr	r2, [pc, #40]	; (8012024 <prvHeapInit+0xb8>)
 8011ffa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	4a09      	ldr	r2, [pc, #36]	; (8012028 <prvHeapInit+0xbc>)
 8012002:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012004:	4b09      	ldr	r3, [pc, #36]	; (801202c <prvHeapInit+0xc0>)
 8012006:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801200a:	601a      	str	r2, [r3, #0]
}
 801200c:	bf00      	nop
 801200e:	3714      	adds	r7, #20
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr
 8012018:	200240a0 	.word	0x200240a0
 801201c:	200560a0 	.word	0x200560a0
 8012020:	200560a8 	.word	0x200560a8
 8012024:	200560b0 	.word	0x200560b0
 8012028:	200560ac 	.word	0x200560ac
 801202c:	200560b4 	.word	0x200560b4

08012030 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012030:	b480      	push	{r7}
 8012032:	b085      	sub	sp, #20
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012038:	4b28      	ldr	r3, [pc, #160]	; (80120dc <prvInsertBlockIntoFreeList+0xac>)
 801203a:	60fb      	str	r3, [r7, #12]
 801203c:	e002      	b.n	8012044 <prvInsertBlockIntoFreeList+0x14>
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	60fb      	str	r3, [r7, #12]
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	687a      	ldr	r2, [r7, #4]
 801204a:	429a      	cmp	r2, r3
 801204c:	d8f7      	bhi.n	801203e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	68ba      	ldr	r2, [r7, #8]
 8012058:	4413      	add	r3, r2
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	429a      	cmp	r2, r3
 801205e:	d108      	bne.n	8012072 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	685a      	ldr	r2, [r3, #4]
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	685b      	ldr	r3, [r3, #4]
 8012068:	441a      	add	r2, r3
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	68ba      	ldr	r2, [r7, #8]
 801207c:	441a      	add	r2, r3
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	429a      	cmp	r2, r3
 8012084:	d118      	bne.n	80120b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	4b15      	ldr	r3, [pc, #84]	; (80120e0 <prvInsertBlockIntoFreeList+0xb0>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	429a      	cmp	r2, r3
 8012090:	d00d      	beq.n	80120ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	685a      	ldr	r2, [r3, #4]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	441a      	add	r2, r3
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	681a      	ldr	r2, [r3, #0]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	601a      	str	r2, [r3, #0]
 80120ac:	e008      	b.n	80120c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80120ae:	4b0c      	ldr	r3, [pc, #48]	; (80120e0 <prvInsertBlockIntoFreeList+0xb0>)
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	601a      	str	r2, [r3, #0]
 80120b6:	e003      	b.n	80120c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80120c0:	68fa      	ldr	r2, [r7, #12]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d002      	beq.n	80120ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120ce:	bf00      	nop
 80120d0:	3714      	adds	r7, #20
 80120d2:	46bd      	mov	sp, r7
 80120d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop
 80120dc:	200560a0 	.word	0x200560a0
 80120e0:	200560a8 	.word	0x200560a8

080120e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f103 0208 	add.w	r2, r3, #8
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f04f 32ff 	mov.w	r2, #4294967295
 80120fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f103 0208 	add.w	r2, r3, #8
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f103 0208 	add.w	r2, r3, #8
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2200      	movs	r2, #0
 8012116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012118:	bf00      	nop
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2200      	movs	r2, #0
 8012130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012132:	bf00      	nop
 8012134:	370c      	adds	r7, #12
 8012136:	46bd      	mov	sp, r7
 8012138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213c:	4770      	bx	lr

0801213e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801213e:	b480      	push	{r7}
 8012140:	b085      	sub	sp, #20
 8012142:	af00      	add	r7, sp, #0
 8012144:	6078      	str	r0, [r7, #4]
 8012146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	68fa      	ldr	r2, [r7, #12]
 8012152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	689a      	ldr	r2, [r3, #8]
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	689b      	ldr	r3, [r3, #8]
 8012160:	683a      	ldr	r2, [r7, #0]
 8012162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	683a      	ldr	r2, [r7, #0]
 8012168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	1c5a      	adds	r2, r3, #1
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	601a      	str	r2, [r3, #0]
}
 801217a:	bf00      	nop
 801217c:	3714      	adds	r7, #20
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr

08012186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012186:	b480      	push	{r7}
 8012188:	b085      	sub	sp, #20
 801218a:	af00      	add	r7, sp, #0
 801218c:	6078      	str	r0, [r7, #4]
 801218e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	f1b3 3fff 	cmp.w	r3, #4294967295
 801219c:	d103      	bne.n	80121a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	691b      	ldr	r3, [r3, #16]
 80121a2:	60fb      	str	r3, [r7, #12]
 80121a4:	e00c      	b.n	80121c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	3308      	adds	r3, #8
 80121aa:	60fb      	str	r3, [r7, #12]
 80121ac:	e002      	b.n	80121b4 <vListInsert+0x2e>
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	60fb      	str	r3, [r7, #12]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	68ba      	ldr	r2, [r7, #8]
 80121bc:	429a      	cmp	r2, r3
 80121be:	d2f6      	bcs.n	80121ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	685a      	ldr	r2, [r3, #4]
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	683a      	ldr	r2, [r7, #0]
 80121ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	68fa      	ldr	r2, [r7, #12]
 80121d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	683a      	ldr	r2, [r7, #0]
 80121da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	1c5a      	adds	r2, r3, #1
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	601a      	str	r2, [r3, #0]
}
 80121ec:	bf00      	nop
 80121ee:	3714      	adds	r7, #20
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr

080121f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80121f8:	b480      	push	{r7}
 80121fa:	b085      	sub	sp, #20
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	691b      	ldr	r3, [r3, #16]
 8012204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	687a      	ldr	r2, [r7, #4]
 801220c:	6892      	ldr	r2, [r2, #8]
 801220e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	689b      	ldr	r3, [r3, #8]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	6852      	ldr	r2, [r2, #4]
 8012218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	687a      	ldr	r2, [r7, #4]
 8012220:	429a      	cmp	r2, r3
 8012222:	d103      	bne.n	801222c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	689a      	ldr	r2, [r3, #8]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2200      	movs	r2, #0
 8012230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	1e5a      	subs	r2, r3, #1
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
}
 8012240:	4618      	mov	r0, r3
 8012242:	3714      	adds	r7, #20
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801224c:	b480      	push	{r7}
 801224e:	b085      	sub	sp, #20
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	3b04      	subs	r3, #4
 801225c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	3b04      	subs	r3, #4
 801226a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	f023 0201 	bic.w	r2, r3, #1
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	3b04      	subs	r3, #4
 801227a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801227c:	4a0c      	ldr	r2, [pc, #48]	; (80122b0 <pxPortInitialiseStack+0x64>)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	3b14      	subs	r3, #20
 8012286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	3b04      	subs	r3, #4
 8012292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f06f 0202 	mvn.w	r2, #2
 801229a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	3b20      	subs	r3, #32
 80122a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80122a2:	68fb      	ldr	r3, [r7, #12]
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3714      	adds	r7, #20
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr
 80122b0:	080122b5 	.word	0x080122b5

080122b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80122b4:	b480      	push	{r7}
 80122b6:	b085      	sub	sp, #20
 80122b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80122ba:	2300      	movs	r3, #0
 80122bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80122be:	4b14      	ldr	r3, [pc, #80]	; (8012310 <prvTaskExitError+0x5c>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122c6:	d00c      	beq.n	80122e2 <prvTaskExitError+0x2e>
	__asm volatile
 80122c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122cc:	b672      	cpsid	i
 80122ce:	f383 8811 	msr	BASEPRI, r3
 80122d2:	f3bf 8f6f 	isb	sy
 80122d6:	f3bf 8f4f 	dsb	sy
 80122da:	b662      	cpsie	i
 80122dc:	60fb      	str	r3, [r7, #12]
}
 80122de:	bf00      	nop
 80122e0:	e7fe      	b.n	80122e0 <prvTaskExitError+0x2c>
	__asm volatile
 80122e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122e6:	b672      	cpsid	i
 80122e8:	f383 8811 	msr	BASEPRI, r3
 80122ec:	f3bf 8f6f 	isb	sy
 80122f0:	f3bf 8f4f 	dsb	sy
 80122f4:	b662      	cpsie	i
 80122f6:	60bb      	str	r3, [r7, #8]
}
 80122f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80122fa:	bf00      	nop
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d0fc      	beq.n	80122fc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012302:	bf00      	nop
 8012304:	bf00      	nop
 8012306:	3714      	adds	r7, #20
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr
 8012310:	20000020 	.word	0x20000020
	...

08012320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012320:	4b07      	ldr	r3, [pc, #28]	; (8012340 <pxCurrentTCBConst2>)
 8012322:	6819      	ldr	r1, [r3, #0]
 8012324:	6808      	ldr	r0, [r1, #0]
 8012326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232a:	f380 8809 	msr	PSP, r0
 801232e:	f3bf 8f6f 	isb	sy
 8012332:	f04f 0000 	mov.w	r0, #0
 8012336:	f380 8811 	msr	BASEPRI, r0
 801233a:	4770      	bx	lr
 801233c:	f3af 8000 	nop.w

08012340 <pxCurrentTCBConst2>:
 8012340:	200560c0 	.word	0x200560c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012344:	bf00      	nop
 8012346:	bf00      	nop

08012348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012348:	4808      	ldr	r0, [pc, #32]	; (801236c <prvPortStartFirstTask+0x24>)
 801234a:	6800      	ldr	r0, [r0, #0]
 801234c:	6800      	ldr	r0, [r0, #0]
 801234e:	f380 8808 	msr	MSP, r0
 8012352:	f04f 0000 	mov.w	r0, #0
 8012356:	f380 8814 	msr	CONTROL, r0
 801235a:	b662      	cpsie	i
 801235c:	b661      	cpsie	f
 801235e:	f3bf 8f4f 	dsb	sy
 8012362:	f3bf 8f6f 	isb	sy
 8012366:	df00      	svc	0
 8012368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801236a:	bf00      	nop
 801236c:	e000ed08 	.word	0xe000ed08

08012370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b084      	sub	sp, #16
 8012374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012376:	4b37      	ldr	r3, [pc, #220]	; (8012454 <xPortStartScheduler+0xe4>)
 8012378:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	b2db      	uxtb	r3, r3
 8012380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	22ff      	movs	r2, #255	; 0xff
 8012386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	b2db      	uxtb	r3, r3
 801238e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012390:	78fb      	ldrb	r3, [r7, #3]
 8012392:	b2db      	uxtb	r3, r3
 8012394:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012398:	b2da      	uxtb	r2, r3
 801239a:	4b2f      	ldr	r3, [pc, #188]	; (8012458 <xPortStartScheduler+0xe8>)
 801239c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801239e:	4b2f      	ldr	r3, [pc, #188]	; (801245c <xPortStartScheduler+0xec>)
 80123a0:	2207      	movs	r2, #7
 80123a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80123a4:	e009      	b.n	80123ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80123a6:	4b2d      	ldr	r3, [pc, #180]	; (801245c <xPortStartScheduler+0xec>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	3b01      	subs	r3, #1
 80123ac:	4a2b      	ldr	r2, [pc, #172]	; (801245c <xPortStartScheduler+0xec>)
 80123ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80123b0:	78fb      	ldrb	r3, [r7, #3]
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80123ba:	78fb      	ldrb	r3, [r7, #3]
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123c2:	2b80      	cmp	r3, #128	; 0x80
 80123c4:	d0ef      	beq.n	80123a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80123c6:	4b25      	ldr	r3, [pc, #148]	; (801245c <xPortStartScheduler+0xec>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f1c3 0307 	rsb	r3, r3, #7
 80123ce:	2b04      	cmp	r3, #4
 80123d0:	d00c      	beq.n	80123ec <xPortStartScheduler+0x7c>
	__asm volatile
 80123d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80123d6:	b672      	cpsid	i
 80123d8:	f383 8811 	msr	BASEPRI, r3
 80123dc:	f3bf 8f6f 	isb	sy
 80123e0:	f3bf 8f4f 	dsb	sy
 80123e4:	b662      	cpsie	i
 80123e6:	60bb      	str	r3, [r7, #8]
}
 80123e8:	bf00      	nop
 80123ea:	e7fe      	b.n	80123ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80123ec:	4b1b      	ldr	r3, [pc, #108]	; (801245c <xPortStartScheduler+0xec>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	021b      	lsls	r3, r3, #8
 80123f2:	4a1a      	ldr	r2, [pc, #104]	; (801245c <xPortStartScheduler+0xec>)
 80123f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80123f6:	4b19      	ldr	r3, [pc, #100]	; (801245c <xPortStartScheduler+0xec>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80123fe:	4a17      	ldr	r2, [pc, #92]	; (801245c <xPortStartScheduler+0xec>)
 8012400:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	b2da      	uxtb	r2, r3
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801240a:	4b15      	ldr	r3, [pc, #84]	; (8012460 <xPortStartScheduler+0xf0>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	4a14      	ldr	r2, [pc, #80]	; (8012460 <xPortStartScheduler+0xf0>)
 8012410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012414:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012416:	4b12      	ldr	r3, [pc, #72]	; (8012460 <xPortStartScheduler+0xf0>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	4a11      	ldr	r2, [pc, #68]	; (8012460 <xPortStartScheduler+0xf0>)
 801241c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012420:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012422:	f000 f8dd 	bl	80125e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012426:	4b0f      	ldr	r3, [pc, #60]	; (8012464 <xPortStartScheduler+0xf4>)
 8012428:	2200      	movs	r2, #0
 801242a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801242c:	f000 f8fc 	bl	8012628 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012430:	4b0d      	ldr	r3, [pc, #52]	; (8012468 <xPortStartScheduler+0xf8>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	4a0c      	ldr	r2, [pc, #48]	; (8012468 <xPortStartScheduler+0xf8>)
 8012436:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801243a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801243c:	f7ff ff84 	bl	8012348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012440:	f001 fd5a 	bl	8013ef8 <vTaskSwitchContext>
	prvTaskExitError();
 8012444:	f7ff ff36 	bl	80122b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012448:	2300      	movs	r3, #0
}
 801244a:	4618      	mov	r0, r3
 801244c:	3710      	adds	r7, #16
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	e000e400 	.word	0xe000e400
 8012458:	200560b8 	.word	0x200560b8
 801245c:	200560bc 	.word	0x200560bc
 8012460:	e000ed20 	.word	0xe000ed20
 8012464:	20000020 	.word	0x20000020
 8012468:	e000ef34 	.word	0xe000ef34

0801246c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
	__asm volatile
 8012472:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012476:	b672      	cpsid	i
 8012478:	f383 8811 	msr	BASEPRI, r3
 801247c:	f3bf 8f6f 	isb	sy
 8012480:	f3bf 8f4f 	dsb	sy
 8012484:	b662      	cpsie	i
 8012486:	607b      	str	r3, [r7, #4]
}
 8012488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801248a:	4b10      	ldr	r3, [pc, #64]	; (80124cc <vPortEnterCritical+0x60>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	3301      	adds	r3, #1
 8012490:	4a0e      	ldr	r2, [pc, #56]	; (80124cc <vPortEnterCritical+0x60>)
 8012492:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012494:	4b0d      	ldr	r3, [pc, #52]	; (80124cc <vPortEnterCritical+0x60>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b01      	cmp	r3, #1
 801249a:	d111      	bne.n	80124c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801249c:	4b0c      	ldr	r3, [pc, #48]	; (80124d0 <vPortEnterCritical+0x64>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	b2db      	uxtb	r3, r3
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d00c      	beq.n	80124c0 <vPortEnterCritical+0x54>
	__asm volatile
 80124a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80124aa:	b672      	cpsid	i
 80124ac:	f383 8811 	msr	BASEPRI, r3
 80124b0:	f3bf 8f6f 	isb	sy
 80124b4:	f3bf 8f4f 	dsb	sy
 80124b8:	b662      	cpsie	i
 80124ba:	603b      	str	r3, [r7, #0]
}
 80124bc:	bf00      	nop
 80124be:	e7fe      	b.n	80124be <vPortEnterCritical+0x52>
	}
}
 80124c0:	bf00      	nop
 80124c2:	370c      	adds	r7, #12
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr
 80124cc:	20000020 	.word	0x20000020
 80124d0:	e000ed04 	.word	0xe000ed04

080124d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80124d4:	b480      	push	{r7}
 80124d6:	b083      	sub	sp, #12
 80124d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80124da:	4b13      	ldr	r3, [pc, #76]	; (8012528 <vPortExitCritical+0x54>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d10c      	bne.n	80124fc <vPortExitCritical+0x28>
	__asm volatile
 80124e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80124e6:	b672      	cpsid	i
 80124e8:	f383 8811 	msr	BASEPRI, r3
 80124ec:	f3bf 8f6f 	isb	sy
 80124f0:	f3bf 8f4f 	dsb	sy
 80124f4:	b662      	cpsie	i
 80124f6:	607b      	str	r3, [r7, #4]
}
 80124f8:	bf00      	nop
 80124fa:	e7fe      	b.n	80124fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80124fc:	4b0a      	ldr	r3, [pc, #40]	; (8012528 <vPortExitCritical+0x54>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	3b01      	subs	r3, #1
 8012502:	4a09      	ldr	r2, [pc, #36]	; (8012528 <vPortExitCritical+0x54>)
 8012504:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012506:	4b08      	ldr	r3, [pc, #32]	; (8012528 <vPortExitCritical+0x54>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d105      	bne.n	801251a <vPortExitCritical+0x46>
 801250e:	2300      	movs	r3, #0
 8012510:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012518:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801251a:	bf00      	nop
 801251c:	370c      	adds	r7, #12
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop
 8012528:	20000020 	.word	0x20000020
 801252c:	00000000 	.word	0x00000000

08012530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012530:	f3ef 8009 	mrs	r0, PSP
 8012534:	f3bf 8f6f 	isb	sy
 8012538:	4b15      	ldr	r3, [pc, #84]	; (8012590 <pxCurrentTCBConst>)
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	f01e 0f10 	tst.w	lr, #16
 8012540:	bf08      	it	eq
 8012542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254a:	6010      	str	r0, [r2, #0]
 801254c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012550:	f04f 0030 	mov.w	r0, #48	; 0x30
 8012554:	b672      	cpsid	i
 8012556:	f380 8811 	msr	BASEPRI, r0
 801255a:	f3bf 8f4f 	dsb	sy
 801255e:	f3bf 8f6f 	isb	sy
 8012562:	b662      	cpsie	i
 8012564:	f001 fcc8 	bl	8013ef8 <vTaskSwitchContext>
 8012568:	f04f 0000 	mov.w	r0, #0
 801256c:	f380 8811 	msr	BASEPRI, r0
 8012570:	bc09      	pop	{r0, r3}
 8012572:	6819      	ldr	r1, [r3, #0]
 8012574:	6808      	ldr	r0, [r1, #0]
 8012576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801257a:	f01e 0f10 	tst.w	lr, #16
 801257e:	bf08      	it	eq
 8012580:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012584:	f380 8809 	msr	PSP, r0
 8012588:	f3bf 8f6f 	isb	sy
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop

08012590 <pxCurrentTCBConst>:
 8012590:	200560c0 	.word	0x200560c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012594:	bf00      	nop
 8012596:	bf00      	nop

08012598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
	__asm volatile
 801259e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80125a2:	b672      	cpsid	i
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	b662      	cpsie	i
 80125b2:	607b      	str	r3, [r7, #4]
}
 80125b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80125b6:	f001 fbe3 	bl	8013d80 <xTaskIncrementTick>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d003      	beq.n	80125c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80125c0:	4b06      	ldr	r3, [pc, #24]	; (80125dc <SysTick_Handler+0x44>)
 80125c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125c6:	601a      	str	r2, [r3, #0]
 80125c8:	2300      	movs	r3, #0
 80125ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	f383 8811 	msr	BASEPRI, r3
}
 80125d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80125d4:	bf00      	nop
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	e000ed04 	.word	0xe000ed04

080125e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80125e0:	b480      	push	{r7}
 80125e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80125e4:	4b0b      	ldr	r3, [pc, #44]	; (8012614 <vPortSetupTimerInterrupt+0x34>)
 80125e6:	2200      	movs	r2, #0
 80125e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80125ea:	4b0b      	ldr	r3, [pc, #44]	; (8012618 <vPortSetupTimerInterrupt+0x38>)
 80125ec:	2200      	movs	r2, #0
 80125ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80125f0:	4b0a      	ldr	r3, [pc, #40]	; (801261c <vPortSetupTimerInterrupt+0x3c>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	4a0a      	ldr	r2, [pc, #40]	; (8012620 <vPortSetupTimerInterrupt+0x40>)
 80125f6:	fba2 2303 	umull	r2, r3, r2, r3
 80125fa:	099b      	lsrs	r3, r3, #6
 80125fc:	4a09      	ldr	r2, [pc, #36]	; (8012624 <vPortSetupTimerInterrupt+0x44>)
 80125fe:	3b01      	subs	r3, #1
 8012600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012602:	4b04      	ldr	r3, [pc, #16]	; (8012614 <vPortSetupTimerInterrupt+0x34>)
 8012604:	2207      	movs	r2, #7
 8012606:	601a      	str	r2, [r3, #0]
}
 8012608:	bf00      	nop
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	e000e010 	.word	0xe000e010
 8012618:	e000e018 	.word	0xe000e018
 801261c:	20000014 	.word	0x20000014
 8012620:	10624dd3 	.word	0x10624dd3
 8012624:	e000e014 	.word	0xe000e014

08012628 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012628:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012638 <vPortEnableVFP+0x10>
 801262c:	6801      	ldr	r1, [r0, #0]
 801262e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012632:	6001      	str	r1, [r0, #0]
 8012634:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012636:	bf00      	nop
 8012638:	e000ed88 	.word	0xe000ed88

0801263c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801263c:	b480      	push	{r7}
 801263e:	b085      	sub	sp, #20
 8012640:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012642:	f3ef 8305 	mrs	r3, IPSR
 8012646:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2b0f      	cmp	r3, #15
 801264c:	d916      	bls.n	801267c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801264e:	4a19      	ldr	r2, [pc, #100]	; (80126b4 <vPortValidateInterruptPriority+0x78>)
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	4413      	add	r3, r2
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012658:	4b17      	ldr	r3, [pc, #92]	; (80126b8 <vPortValidateInterruptPriority+0x7c>)
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	7afa      	ldrb	r2, [r7, #11]
 801265e:	429a      	cmp	r2, r3
 8012660:	d20c      	bcs.n	801267c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012662:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012666:	b672      	cpsid	i
 8012668:	f383 8811 	msr	BASEPRI, r3
 801266c:	f3bf 8f6f 	isb	sy
 8012670:	f3bf 8f4f 	dsb	sy
 8012674:	b662      	cpsie	i
 8012676:	607b      	str	r3, [r7, #4]
}
 8012678:	bf00      	nop
 801267a:	e7fe      	b.n	801267a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801267c:	4b0f      	ldr	r3, [pc, #60]	; (80126bc <vPortValidateInterruptPriority+0x80>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012684:	4b0e      	ldr	r3, [pc, #56]	; (80126c0 <vPortValidateInterruptPriority+0x84>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	429a      	cmp	r2, r3
 801268a:	d90c      	bls.n	80126a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801268c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012690:	b672      	cpsid	i
 8012692:	f383 8811 	msr	BASEPRI, r3
 8012696:	f3bf 8f6f 	isb	sy
 801269a:	f3bf 8f4f 	dsb	sy
 801269e:	b662      	cpsie	i
 80126a0:	603b      	str	r3, [r7, #0]
}
 80126a2:	bf00      	nop
 80126a4:	e7fe      	b.n	80126a4 <vPortValidateInterruptPriority+0x68>
	}
 80126a6:	bf00      	nop
 80126a8:	3714      	adds	r7, #20
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop
 80126b4:	e000e3f0 	.word	0xe000e3f0
 80126b8:	200560b8 	.word	0x200560b8
 80126bc:	e000ed0c 	.word	0xe000ed0c
 80126c0:	200560bc 	.word	0x200560bc

080126c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d10c      	bne.n	80126f2 <xQueueGenericReset+0x2e>
	__asm volatile
 80126d8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80126dc:	b672      	cpsid	i
 80126de:	f383 8811 	msr	BASEPRI, r3
 80126e2:	f3bf 8f6f 	isb	sy
 80126e6:	f3bf 8f4f 	dsb	sy
 80126ea:	b662      	cpsie	i
 80126ec:	60bb      	str	r3, [r7, #8]
}
 80126ee:	bf00      	nop
 80126f0:	e7fe      	b.n	80126f0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80126f2:	f7ff febb 	bl	801246c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126fe:	68f9      	ldr	r1, [r7, #12]
 8012700:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012702:	fb01 f303 	mul.w	r3, r1, r3
 8012706:	441a      	add	r2, r3
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	2200      	movs	r2, #0
 8012710:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681a      	ldr	r2, [r3, #0]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012722:	3b01      	subs	r3, #1
 8012724:	68f9      	ldr	r1, [r7, #12]
 8012726:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012728:	fb01 f303 	mul.w	r3, r1, r3
 801272c:	441a      	add	r2, r3
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	22ff      	movs	r2, #255	; 0xff
 8012736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	22ff      	movs	r2, #255	; 0xff
 801273e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d114      	bne.n	8012772 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	691b      	ldr	r3, [r3, #16]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d01a      	beq.n	8012786 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	3310      	adds	r3, #16
 8012754:	4618      	mov	r0, r3
 8012756:	f001 fc83 	bl	8014060 <xTaskRemoveFromEventList>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d012      	beq.n	8012786 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012760:	4b0c      	ldr	r3, [pc, #48]	; (8012794 <xQueueGenericReset+0xd0>)
 8012762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012766:	601a      	str	r2, [r3, #0]
 8012768:	f3bf 8f4f 	dsb	sy
 801276c:	f3bf 8f6f 	isb	sy
 8012770:	e009      	b.n	8012786 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	3310      	adds	r3, #16
 8012776:	4618      	mov	r0, r3
 8012778:	f7ff fcb4 	bl	80120e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	3324      	adds	r3, #36	; 0x24
 8012780:	4618      	mov	r0, r3
 8012782:	f7ff fcaf 	bl	80120e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012786:	f7ff fea5 	bl	80124d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801278a:	2301      	movs	r3, #1
}
 801278c:	4618      	mov	r0, r3
 801278e:	3710      	adds	r7, #16
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}
 8012794:	e000ed04 	.word	0xe000ed04

08012798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012798:	b580      	push	{r7, lr}
 801279a:	b08e      	sub	sp, #56	; 0x38
 801279c:	af02      	add	r7, sp, #8
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
 80127a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d10c      	bne.n	80127c6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80127ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127b0:	b672      	cpsid	i
 80127b2:	f383 8811 	msr	BASEPRI, r3
 80127b6:	f3bf 8f6f 	isb	sy
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	b662      	cpsie	i
 80127c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80127c2:	bf00      	nop
 80127c4:	e7fe      	b.n	80127c4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d10c      	bne.n	80127e6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80127cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127d0:	b672      	cpsid	i
 80127d2:	f383 8811 	msr	BASEPRI, r3
 80127d6:	f3bf 8f6f 	isb	sy
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	b662      	cpsie	i
 80127e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80127e2:	bf00      	nop
 80127e4:	e7fe      	b.n	80127e4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d002      	beq.n	80127f2 <xQueueGenericCreateStatic+0x5a>
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d001      	beq.n	80127f6 <xQueueGenericCreateStatic+0x5e>
 80127f2:	2301      	movs	r3, #1
 80127f4:	e000      	b.n	80127f8 <xQueueGenericCreateStatic+0x60>
 80127f6:	2300      	movs	r3, #0
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d10c      	bne.n	8012816 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80127fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012800:	b672      	cpsid	i
 8012802:	f383 8811 	msr	BASEPRI, r3
 8012806:	f3bf 8f6f 	isb	sy
 801280a:	f3bf 8f4f 	dsb	sy
 801280e:	b662      	cpsie	i
 8012810:	623b      	str	r3, [r7, #32]
}
 8012812:	bf00      	nop
 8012814:	e7fe      	b.n	8012814 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d102      	bne.n	8012822 <xQueueGenericCreateStatic+0x8a>
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d101      	bne.n	8012826 <xQueueGenericCreateStatic+0x8e>
 8012822:	2301      	movs	r3, #1
 8012824:	e000      	b.n	8012828 <xQueueGenericCreateStatic+0x90>
 8012826:	2300      	movs	r3, #0
 8012828:	2b00      	cmp	r3, #0
 801282a:	d10c      	bne.n	8012846 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801282c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012830:	b672      	cpsid	i
 8012832:	f383 8811 	msr	BASEPRI, r3
 8012836:	f3bf 8f6f 	isb	sy
 801283a:	f3bf 8f4f 	dsb	sy
 801283e:	b662      	cpsie	i
 8012840:	61fb      	str	r3, [r7, #28]
}
 8012842:	bf00      	nop
 8012844:	e7fe      	b.n	8012844 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012846:	2350      	movs	r3, #80	; 0x50
 8012848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	2b50      	cmp	r3, #80	; 0x50
 801284e:	d00c      	beq.n	801286a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8012850:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012854:	b672      	cpsid	i
 8012856:	f383 8811 	msr	BASEPRI, r3
 801285a:	f3bf 8f6f 	isb	sy
 801285e:	f3bf 8f4f 	dsb	sy
 8012862:	b662      	cpsie	i
 8012864:	61bb      	str	r3, [r7, #24]
}
 8012866:	bf00      	nop
 8012868:	e7fe      	b.n	8012868 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801286a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012872:	2b00      	cmp	r3, #0
 8012874:	d00d      	beq.n	8012892 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012878:	2201      	movs	r2, #1
 801287a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801287e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012884:	9300      	str	r3, [sp, #0]
 8012886:	4613      	mov	r3, r2
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	68b9      	ldr	r1, [r7, #8]
 801288c:	68f8      	ldr	r0, [r7, #12]
 801288e:	f000 f847 	bl	8012920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012894:	4618      	mov	r0, r3
 8012896:	3730      	adds	r7, #48	; 0x30
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801289c:	b580      	push	{r7, lr}
 801289e:	b08a      	sub	sp, #40	; 0x28
 80128a0:	af02      	add	r7, sp, #8
 80128a2:	60f8      	str	r0, [r7, #12]
 80128a4:	60b9      	str	r1, [r7, #8]
 80128a6:	4613      	mov	r3, r2
 80128a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d10c      	bne.n	80128ca <xQueueGenericCreate+0x2e>
	__asm volatile
 80128b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128b4:	b672      	cpsid	i
 80128b6:	f383 8811 	msr	BASEPRI, r3
 80128ba:	f3bf 8f6f 	isb	sy
 80128be:	f3bf 8f4f 	dsb	sy
 80128c2:	b662      	cpsie	i
 80128c4:	613b      	str	r3, [r7, #16]
}
 80128c6:	bf00      	nop
 80128c8:	e7fe      	b.n	80128c8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d102      	bne.n	80128d6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80128d0:	2300      	movs	r3, #0
 80128d2:	61fb      	str	r3, [r7, #28]
 80128d4:	e004      	b.n	80128e0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	68ba      	ldr	r2, [r7, #8]
 80128da:	fb02 f303 	mul.w	r3, r2, r3
 80128de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80128e0:	69fb      	ldr	r3, [r7, #28]
 80128e2:	3350      	adds	r3, #80	; 0x50
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7ff fa19 	bl	8011d1c <pvPortMalloc>
 80128ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d011      	beq.n	8012916 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80128f2:	69bb      	ldr	r3, [r7, #24]
 80128f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	3350      	adds	r3, #80	; 0x50
 80128fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80128fc:	69bb      	ldr	r3, [r7, #24]
 80128fe:	2200      	movs	r2, #0
 8012900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012904:	79fa      	ldrb	r2, [r7, #7]
 8012906:	69bb      	ldr	r3, [r7, #24]
 8012908:	9300      	str	r3, [sp, #0]
 801290a:	4613      	mov	r3, r2
 801290c:	697a      	ldr	r2, [r7, #20]
 801290e:	68b9      	ldr	r1, [r7, #8]
 8012910:	68f8      	ldr	r0, [r7, #12]
 8012912:	f000 f805 	bl	8012920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012916:	69bb      	ldr	r3, [r7, #24]
	}
 8012918:	4618      	mov	r0, r3
 801291a:	3720      	adds	r7, #32
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	60f8      	str	r0, [r7, #12]
 8012928:	60b9      	str	r1, [r7, #8]
 801292a:	607a      	str	r2, [r7, #4]
 801292c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d103      	bne.n	801293c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012934:	69bb      	ldr	r3, [r7, #24]
 8012936:	69ba      	ldr	r2, [r7, #24]
 8012938:	601a      	str	r2, [r3, #0]
 801293a:	e002      	b.n	8012942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	687a      	ldr	r2, [r7, #4]
 8012940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012942:	69bb      	ldr	r3, [r7, #24]
 8012944:	68fa      	ldr	r2, [r7, #12]
 8012946:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012948:	69bb      	ldr	r3, [r7, #24]
 801294a:	68ba      	ldr	r2, [r7, #8]
 801294c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801294e:	2101      	movs	r1, #1
 8012950:	69b8      	ldr	r0, [r7, #24]
 8012952:	f7ff feb7 	bl	80126c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012956:	69bb      	ldr	r3, [r7, #24]
 8012958:	78fa      	ldrb	r2, [r7, #3]
 801295a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801295e:	bf00      	nop
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}

08012966 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012966:	b580      	push	{r7, lr}
 8012968:	b08a      	sub	sp, #40	; 0x28
 801296a:	af02      	add	r7, sp, #8
 801296c:	60f8      	str	r0, [r7, #12]
 801296e:	60b9      	str	r1, [r7, #8]
 8012970:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d10c      	bne.n	8012992 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8012978:	f04f 0330 	mov.w	r3, #48	; 0x30
 801297c:	b672      	cpsid	i
 801297e:	f383 8811 	msr	BASEPRI, r3
 8012982:	f3bf 8f6f 	isb	sy
 8012986:	f3bf 8f4f 	dsb	sy
 801298a:	b662      	cpsie	i
 801298c:	61bb      	str	r3, [r7, #24]
}
 801298e:	bf00      	nop
 8012990:	e7fe      	b.n	8012990 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012992:	68ba      	ldr	r2, [r7, #8]
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	429a      	cmp	r2, r3
 8012998:	d90c      	bls.n	80129b4 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 801299a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801299e:	b672      	cpsid	i
 80129a0:	f383 8811 	msr	BASEPRI, r3
 80129a4:	f3bf 8f6f 	isb	sy
 80129a8:	f3bf 8f4f 	dsb	sy
 80129ac:	b662      	cpsie	i
 80129ae:	617b      	str	r3, [r7, #20]
}
 80129b0:	bf00      	nop
 80129b2:	e7fe      	b.n	80129b2 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80129b4:	2302      	movs	r3, #2
 80129b6:	9300      	str	r3, [sp, #0]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2200      	movs	r2, #0
 80129bc:	2100      	movs	r1, #0
 80129be:	68f8      	ldr	r0, [r7, #12]
 80129c0:	f7ff feea 	bl	8012798 <xQueueGenericCreateStatic>
 80129c4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80129c6:	69fb      	ldr	r3, [r7, #28]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d002      	beq.n	80129d2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80129cc:	69fb      	ldr	r3, [r7, #28]
 80129ce:	68ba      	ldr	r2, [r7, #8]
 80129d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80129d2:	69fb      	ldr	r3, [r7, #28]
	}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3720      	adds	r7, #32
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b086      	sub	sp, #24
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d10c      	bne.n	8012a06 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80129ec:	f04f 0330 	mov.w	r3, #48	; 0x30
 80129f0:	b672      	cpsid	i
 80129f2:	f383 8811 	msr	BASEPRI, r3
 80129f6:	f3bf 8f6f 	isb	sy
 80129fa:	f3bf 8f4f 	dsb	sy
 80129fe:	b662      	cpsie	i
 8012a00:	613b      	str	r3, [r7, #16]
}
 8012a02:	bf00      	nop
 8012a04:	e7fe      	b.n	8012a04 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012a06:	683a      	ldr	r2, [r7, #0]
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d90c      	bls.n	8012a28 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8012a0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a12:	b672      	cpsid	i
 8012a14:	f383 8811 	msr	BASEPRI, r3
 8012a18:	f3bf 8f6f 	isb	sy
 8012a1c:	f3bf 8f4f 	dsb	sy
 8012a20:	b662      	cpsie	i
 8012a22:	60fb      	str	r3, [r7, #12]
}
 8012a24:	bf00      	nop
 8012a26:	e7fe      	b.n	8012a26 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012a28:	2202      	movs	r2, #2
 8012a2a:	2100      	movs	r1, #0
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f7ff ff35 	bl	801289c <xQueueGenericCreate>
 8012a32:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d002      	beq.n	8012a40 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	683a      	ldr	r2, [r7, #0]
 8012a3e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012a40:	697b      	ldr	r3, [r7, #20]
	}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3718      	adds	r7, #24
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
	...

08012a4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b08e      	sub	sp, #56	; 0x38
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	607a      	str	r2, [r7, #4]
 8012a58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d10c      	bne.n	8012a82 <xQueueGenericSend+0x36>
	__asm volatile
 8012a68:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a6c:	b672      	cpsid	i
 8012a6e:	f383 8811 	msr	BASEPRI, r3
 8012a72:	f3bf 8f6f 	isb	sy
 8012a76:	f3bf 8f4f 	dsb	sy
 8012a7a:	b662      	cpsie	i
 8012a7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012a7e:	bf00      	nop
 8012a80:	e7fe      	b.n	8012a80 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d103      	bne.n	8012a90 <xQueueGenericSend+0x44>
 8012a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d101      	bne.n	8012a94 <xQueueGenericSend+0x48>
 8012a90:	2301      	movs	r3, #1
 8012a92:	e000      	b.n	8012a96 <xQueueGenericSend+0x4a>
 8012a94:	2300      	movs	r3, #0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d10c      	bne.n	8012ab4 <xQueueGenericSend+0x68>
	__asm volatile
 8012a9a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a9e:	b672      	cpsid	i
 8012aa0:	f383 8811 	msr	BASEPRI, r3
 8012aa4:	f3bf 8f6f 	isb	sy
 8012aa8:	f3bf 8f4f 	dsb	sy
 8012aac:	b662      	cpsie	i
 8012aae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012ab0:	bf00      	nop
 8012ab2:	e7fe      	b.n	8012ab2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	2b02      	cmp	r3, #2
 8012ab8:	d103      	bne.n	8012ac2 <xQueueGenericSend+0x76>
 8012aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012abe:	2b01      	cmp	r3, #1
 8012ac0:	d101      	bne.n	8012ac6 <xQueueGenericSend+0x7a>
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	e000      	b.n	8012ac8 <xQueueGenericSend+0x7c>
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d10c      	bne.n	8012ae6 <xQueueGenericSend+0x9a>
	__asm volatile
 8012acc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ad0:	b672      	cpsid	i
 8012ad2:	f383 8811 	msr	BASEPRI, r3
 8012ad6:	f3bf 8f6f 	isb	sy
 8012ada:	f3bf 8f4f 	dsb	sy
 8012ade:	b662      	cpsie	i
 8012ae0:	623b      	str	r3, [r7, #32]
}
 8012ae2:	bf00      	nop
 8012ae4:	e7fe      	b.n	8012ae4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ae6:	f001 fc81 	bl	80143ec <xTaskGetSchedulerState>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d102      	bne.n	8012af6 <xQueueGenericSend+0xaa>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d101      	bne.n	8012afa <xQueueGenericSend+0xae>
 8012af6:	2301      	movs	r3, #1
 8012af8:	e000      	b.n	8012afc <xQueueGenericSend+0xb0>
 8012afa:	2300      	movs	r3, #0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d10c      	bne.n	8012b1a <xQueueGenericSend+0xce>
	__asm volatile
 8012b00:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b04:	b672      	cpsid	i
 8012b06:	f383 8811 	msr	BASEPRI, r3
 8012b0a:	f3bf 8f6f 	isb	sy
 8012b0e:	f3bf 8f4f 	dsb	sy
 8012b12:	b662      	cpsie	i
 8012b14:	61fb      	str	r3, [r7, #28]
}
 8012b16:	bf00      	nop
 8012b18:	e7fe      	b.n	8012b18 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b1a:	f7ff fca7 	bl	801246c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d302      	bcc.n	8012b30 <xQueueGenericSend+0xe4>
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	d129      	bne.n	8012b84 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b30:	683a      	ldr	r2, [r7, #0]
 8012b32:	68b9      	ldr	r1, [r7, #8]
 8012b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b36:	f000 fc82 	bl	801343e <prvCopyDataToQueue>
 8012b3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d010      	beq.n	8012b66 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b46:	3324      	adds	r3, #36	; 0x24
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f001 fa89 	bl	8014060 <xTaskRemoveFromEventList>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d013      	beq.n	8012b7c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012b54:	4b3f      	ldr	r3, [pc, #252]	; (8012c54 <xQueueGenericSend+0x208>)
 8012b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b5a:	601a      	str	r2, [r3, #0]
 8012b5c:	f3bf 8f4f 	dsb	sy
 8012b60:	f3bf 8f6f 	isb	sy
 8012b64:	e00a      	b.n	8012b7c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d007      	beq.n	8012b7c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012b6c:	4b39      	ldr	r3, [pc, #228]	; (8012c54 <xQueueGenericSend+0x208>)
 8012b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b72:	601a      	str	r2, [r3, #0]
 8012b74:	f3bf 8f4f 	dsb	sy
 8012b78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012b7c:	f7ff fcaa 	bl	80124d4 <vPortExitCritical>
				return pdPASS;
 8012b80:	2301      	movs	r3, #1
 8012b82:	e063      	b.n	8012c4c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d103      	bne.n	8012b92 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012b8a:	f7ff fca3 	bl	80124d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	e05c      	b.n	8012c4c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d106      	bne.n	8012ba6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012b98:	f107 0314 	add.w	r3, r7, #20
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f001 fac5 	bl	801412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012ba2:	2301      	movs	r3, #1
 8012ba4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012ba6:	f7ff fc95 	bl	80124d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012baa:	f001 f82b 	bl	8013c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012bae:	f7ff fc5d 	bl	801246c <vPortEnterCritical>
 8012bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bb8:	b25b      	sxtb	r3, r3
 8012bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bbe:	d103      	bne.n	8012bc8 <xQueueGenericSend+0x17c>
 8012bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012bce:	b25b      	sxtb	r3, r3
 8012bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bd4:	d103      	bne.n	8012bde <xQueueGenericSend+0x192>
 8012bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd8:	2200      	movs	r2, #0
 8012bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012bde:	f7ff fc79 	bl	80124d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012be2:	1d3a      	adds	r2, r7, #4
 8012be4:	f107 0314 	add.w	r3, r7, #20
 8012be8:	4611      	mov	r1, r2
 8012bea:	4618      	mov	r0, r3
 8012bec:	f001 fab4 	bl	8014158 <xTaskCheckForTimeOut>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d124      	bne.n	8012c40 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bf8:	f000 fd19 	bl	801362e <prvIsQueueFull>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d018      	beq.n	8012c34 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c04:	3310      	adds	r3, #16
 8012c06:	687a      	ldr	r2, [r7, #4]
 8012c08:	4611      	mov	r1, r2
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f001 f9d4 	bl	8013fb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c12:	f000 fca4 	bl	801355e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012c16:	f001 f803 	bl	8013c20 <xTaskResumeAll>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	f47f af7c 	bne.w	8012b1a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8012c22:	4b0c      	ldr	r3, [pc, #48]	; (8012c54 <xQueueGenericSend+0x208>)
 8012c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c28:	601a      	str	r2, [r3, #0]
 8012c2a:	f3bf 8f4f 	dsb	sy
 8012c2e:	f3bf 8f6f 	isb	sy
 8012c32:	e772      	b.n	8012b1a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c36:	f000 fc92 	bl	801355e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c3a:	f000 fff1 	bl	8013c20 <xTaskResumeAll>
 8012c3e:	e76c      	b.n	8012b1a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c42:	f000 fc8c 	bl	801355e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c46:	f000 ffeb 	bl	8013c20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012c4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3738      	adds	r7, #56	; 0x38
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	e000ed04 	.word	0xe000ed04

08012c58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b08e      	sub	sp, #56	; 0x38
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
 8012c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d10c      	bne.n	8012c8a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8012c70:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012c74:	b672      	cpsid	i
 8012c76:	f383 8811 	msr	BASEPRI, r3
 8012c7a:	f3bf 8f6f 	isb	sy
 8012c7e:	f3bf 8f4f 	dsb	sy
 8012c82:	b662      	cpsie	i
 8012c84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012c86:	bf00      	nop
 8012c88:	e7fe      	b.n	8012c88 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d103      	bne.n	8012c98 <xQueueGenericSendFromISR+0x40>
 8012c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d101      	bne.n	8012c9c <xQueueGenericSendFromISR+0x44>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	e000      	b.n	8012c9e <xQueueGenericSendFromISR+0x46>
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d10c      	bne.n	8012cbc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8012ca2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ca6:	b672      	cpsid	i
 8012ca8:	f383 8811 	msr	BASEPRI, r3
 8012cac:	f3bf 8f6f 	isb	sy
 8012cb0:	f3bf 8f4f 	dsb	sy
 8012cb4:	b662      	cpsie	i
 8012cb6:	623b      	str	r3, [r7, #32]
}
 8012cb8:	bf00      	nop
 8012cba:	e7fe      	b.n	8012cba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	2b02      	cmp	r3, #2
 8012cc0:	d103      	bne.n	8012cca <xQueueGenericSendFromISR+0x72>
 8012cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cc6:	2b01      	cmp	r3, #1
 8012cc8:	d101      	bne.n	8012cce <xQueueGenericSendFromISR+0x76>
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e000      	b.n	8012cd0 <xQueueGenericSendFromISR+0x78>
 8012cce:	2300      	movs	r3, #0
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d10c      	bne.n	8012cee <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8012cd4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012cd8:	b672      	cpsid	i
 8012cda:	f383 8811 	msr	BASEPRI, r3
 8012cde:	f3bf 8f6f 	isb	sy
 8012ce2:	f3bf 8f4f 	dsb	sy
 8012ce6:	b662      	cpsie	i
 8012ce8:	61fb      	str	r3, [r7, #28]
}
 8012cea:	bf00      	nop
 8012cec:	e7fe      	b.n	8012cec <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012cee:	f7ff fca5 	bl	801263c <vPortValidateInterruptPriority>
	__asm volatile
 8012cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8012cf6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012cfa:	b672      	cpsid	i
 8012cfc:	f383 8811 	msr	BASEPRI, r3
 8012d00:	f3bf 8f6f 	isb	sy
 8012d04:	f3bf 8f4f 	dsb	sy
 8012d08:	b662      	cpsie	i
 8012d0a:	61ba      	str	r2, [r7, #24]
 8012d0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012d0e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d302      	bcc.n	8012d24 <xQueueGenericSendFromISR+0xcc>
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	2b02      	cmp	r3, #2
 8012d22:	d12c      	bne.n	8012d7e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012d2e:	683a      	ldr	r2, [r7, #0]
 8012d30:	68b9      	ldr	r1, [r7, #8]
 8012d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d34:	f000 fb83 	bl	801343e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012d38:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d40:	d112      	bne.n	8012d68 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d016      	beq.n	8012d78 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4c:	3324      	adds	r3, #36	; 0x24
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f001 f986 	bl	8014060 <xTaskRemoveFromEventList>
 8012d54:	4603      	mov	r3, r0
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d00e      	beq.n	8012d78 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d00b      	beq.n	8012d78 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2201      	movs	r2, #1
 8012d64:	601a      	str	r2, [r3, #0]
 8012d66:	e007      	b.n	8012d78 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012d68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	b25a      	sxtb	r2, r3
 8012d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012d78:	2301      	movs	r3, #1
 8012d7a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012d7c:	e001      	b.n	8012d82 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	637b      	str	r3, [r7, #52]	; 0x34
 8012d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	f383 8811 	msr	BASEPRI, r3
}
 8012d8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3738      	adds	r7, #56	; 0x38
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}

08012d98 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b08e      	sub	sp, #56	; 0x38
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d10c      	bne.n	8012dc6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8012dac:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012db0:	b672      	cpsid	i
 8012db2:	f383 8811 	msr	BASEPRI, r3
 8012db6:	f3bf 8f6f 	isb	sy
 8012dba:	f3bf 8f4f 	dsb	sy
 8012dbe:	b662      	cpsie	i
 8012dc0:	623b      	str	r3, [r7, #32]
}
 8012dc2:	bf00      	nop
 8012dc4:	e7fe      	b.n	8012dc4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d00c      	beq.n	8012de8 <xQueueGiveFromISR+0x50>
	__asm volatile
 8012dce:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012dd2:	b672      	cpsid	i
 8012dd4:	f383 8811 	msr	BASEPRI, r3
 8012dd8:	f3bf 8f6f 	isb	sy
 8012ddc:	f3bf 8f4f 	dsb	sy
 8012de0:	b662      	cpsie	i
 8012de2:	61fb      	str	r3, [r7, #28]
}
 8012de4:	bf00      	nop
 8012de6:	e7fe      	b.n	8012de6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d103      	bne.n	8012df8 <xQueueGiveFromISR+0x60>
 8012df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df2:	689b      	ldr	r3, [r3, #8]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d101      	bne.n	8012dfc <xQueueGiveFromISR+0x64>
 8012df8:	2301      	movs	r3, #1
 8012dfa:	e000      	b.n	8012dfe <xQueueGiveFromISR+0x66>
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d10c      	bne.n	8012e1c <xQueueGiveFromISR+0x84>
	__asm volatile
 8012e02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e06:	b672      	cpsid	i
 8012e08:	f383 8811 	msr	BASEPRI, r3
 8012e0c:	f3bf 8f6f 	isb	sy
 8012e10:	f3bf 8f4f 	dsb	sy
 8012e14:	b662      	cpsie	i
 8012e16:	61bb      	str	r3, [r7, #24]
}
 8012e18:	bf00      	nop
 8012e1a:	e7fe      	b.n	8012e1a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e1c:	f7ff fc0e 	bl	801263c <vPortValidateInterruptPriority>
	__asm volatile
 8012e20:	f3ef 8211 	mrs	r2, BASEPRI
 8012e24:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e28:	b672      	cpsid	i
 8012e2a:	f383 8811 	msr	BASEPRI, r3
 8012e2e:	f3bf 8f6f 	isb	sy
 8012e32:	f3bf 8f4f 	dsb	sy
 8012e36:	b662      	cpsie	i
 8012e38:	617a      	str	r2, [r7, #20]
 8012e3a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012e3c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e44:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d22b      	bcs.n	8012ea8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5c:	1c5a      	adds	r2, r3, #1
 8012e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e60:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012e62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e6a:	d112      	bne.n	8012e92 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d016      	beq.n	8012ea2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e76:	3324      	adds	r3, #36	; 0x24
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f001 f8f1 	bl	8014060 <xTaskRemoveFromEventList>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d00e      	beq.n	8012ea2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d00b      	beq.n	8012ea2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	601a      	str	r2, [r3, #0]
 8012e90:	e007      	b.n	8012ea2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e96:	3301      	adds	r3, #1
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	b25a      	sxtb	r2, r3
 8012e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8012ea6:	e001      	b.n	8012eac <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8012eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eae:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f383 8811 	msr	BASEPRI, r3
}
 8012eb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3738      	adds	r7, #56	; 0x38
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
	...

08012ec4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b08c      	sub	sp, #48	; 0x30
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	60f8      	str	r0, [r7, #12]
 8012ecc:	60b9      	str	r1, [r7, #8]
 8012ece:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10c      	bne.n	8012ef8 <xQueueReceive+0x34>
	__asm volatile
 8012ede:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ee2:	b672      	cpsid	i
 8012ee4:	f383 8811 	msr	BASEPRI, r3
 8012ee8:	f3bf 8f6f 	isb	sy
 8012eec:	f3bf 8f4f 	dsb	sy
 8012ef0:	b662      	cpsie	i
 8012ef2:	623b      	str	r3, [r7, #32]
}
 8012ef4:	bf00      	nop
 8012ef6:	e7fe      	b.n	8012ef6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d103      	bne.n	8012f06 <xQueueReceive+0x42>
 8012efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d101      	bne.n	8012f0a <xQueueReceive+0x46>
 8012f06:	2301      	movs	r3, #1
 8012f08:	e000      	b.n	8012f0c <xQueueReceive+0x48>
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d10c      	bne.n	8012f2a <xQueueReceive+0x66>
	__asm volatile
 8012f10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f14:	b672      	cpsid	i
 8012f16:	f383 8811 	msr	BASEPRI, r3
 8012f1a:	f3bf 8f6f 	isb	sy
 8012f1e:	f3bf 8f4f 	dsb	sy
 8012f22:	b662      	cpsie	i
 8012f24:	61fb      	str	r3, [r7, #28]
}
 8012f26:	bf00      	nop
 8012f28:	e7fe      	b.n	8012f28 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f2a:	f001 fa5f 	bl	80143ec <xTaskGetSchedulerState>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d102      	bne.n	8012f3a <xQueueReceive+0x76>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d101      	bne.n	8012f3e <xQueueReceive+0x7a>
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	e000      	b.n	8012f40 <xQueueReceive+0x7c>
 8012f3e:	2300      	movs	r3, #0
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d10c      	bne.n	8012f5e <xQueueReceive+0x9a>
	__asm volatile
 8012f44:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f48:	b672      	cpsid	i
 8012f4a:	f383 8811 	msr	BASEPRI, r3
 8012f4e:	f3bf 8f6f 	isb	sy
 8012f52:	f3bf 8f4f 	dsb	sy
 8012f56:	b662      	cpsie	i
 8012f58:	61bb      	str	r3, [r7, #24]
}
 8012f5a:	bf00      	nop
 8012f5c:	e7fe      	b.n	8012f5c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f5e:	f7ff fa85 	bl	801246c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d01f      	beq.n	8012fae <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012f6e:	68b9      	ldr	r1, [r7, #8]
 8012f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f72:	f000 face 	bl	8013512 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f78:	1e5a      	subs	r2, r3, #1
 8012f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d00f      	beq.n	8012fa6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f88:	3310      	adds	r3, #16
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f001 f868 	bl	8014060 <xTaskRemoveFromEventList>
 8012f90:	4603      	mov	r3, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d007      	beq.n	8012fa6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012f96:	4b3d      	ldr	r3, [pc, #244]	; (801308c <xQueueReceive+0x1c8>)
 8012f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f9c:	601a      	str	r2, [r3, #0]
 8012f9e:	f3bf 8f4f 	dsb	sy
 8012fa2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012fa6:	f7ff fa95 	bl	80124d4 <vPortExitCritical>
				return pdPASS;
 8012faa:	2301      	movs	r3, #1
 8012fac:	e069      	b.n	8013082 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d103      	bne.n	8012fbc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012fb4:	f7ff fa8e 	bl	80124d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	e062      	b.n	8013082 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d106      	bne.n	8012fd0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012fc2:	f107 0310 	add.w	r3, r7, #16
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f001 f8b0 	bl	801412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012fcc:	2301      	movs	r3, #1
 8012fce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012fd0:	f7ff fa80 	bl	80124d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012fd4:	f000 fe16 	bl	8013c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012fd8:	f7ff fa48 	bl	801246c <vPortEnterCritical>
 8012fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012fe2:	b25b      	sxtb	r3, r3
 8012fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fe8:	d103      	bne.n	8012ff2 <xQueueReceive+0x12e>
 8012fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fec:	2200      	movs	r2, #0
 8012fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ff8:	b25b      	sxtb	r3, r3
 8012ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ffe:	d103      	bne.n	8013008 <xQueueReceive+0x144>
 8013000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013002:	2200      	movs	r2, #0
 8013004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013008:	f7ff fa64 	bl	80124d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801300c:	1d3a      	adds	r2, r7, #4
 801300e:	f107 0310 	add.w	r3, r7, #16
 8013012:	4611      	mov	r1, r2
 8013014:	4618      	mov	r0, r3
 8013016:	f001 f89f 	bl	8014158 <xTaskCheckForTimeOut>
 801301a:	4603      	mov	r3, r0
 801301c:	2b00      	cmp	r3, #0
 801301e:	d123      	bne.n	8013068 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013022:	f000 faee 	bl	8013602 <prvIsQueueEmpty>
 8013026:	4603      	mov	r3, r0
 8013028:	2b00      	cmp	r3, #0
 801302a:	d017      	beq.n	801305c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801302e:	3324      	adds	r3, #36	; 0x24
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	4611      	mov	r1, r2
 8013034:	4618      	mov	r0, r3
 8013036:	f000 ffbf 	bl	8013fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801303a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801303c:	f000 fa8f 	bl	801355e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013040:	f000 fdee 	bl	8013c20 <xTaskResumeAll>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d189      	bne.n	8012f5e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801304a:	4b10      	ldr	r3, [pc, #64]	; (801308c <xQueueReceive+0x1c8>)
 801304c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013050:	601a      	str	r2, [r3, #0]
 8013052:	f3bf 8f4f 	dsb	sy
 8013056:	f3bf 8f6f 	isb	sy
 801305a:	e780      	b.n	8012f5e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801305c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801305e:	f000 fa7e 	bl	801355e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013062:	f000 fddd 	bl	8013c20 <xTaskResumeAll>
 8013066:	e77a      	b.n	8012f5e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801306a:	f000 fa78 	bl	801355e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801306e:	f000 fdd7 	bl	8013c20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013074:	f000 fac5 	bl	8013602 <prvIsQueueEmpty>
 8013078:	4603      	mov	r3, r0
 801307a:	2b00      	cmp	r3, #0
 801307c:	f43f af6f 	beq.w	8012f5e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013080:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013082:	4618      	mov	r0, r3
 8013084:	3730      	adds	r7, #48	; 0x30
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	e000ed04 	.word	0xe000ed04

08013090 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b08e      	sub	sp, #56	; 0x38
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801309a:	2300      	movs	r3, #0
 801309c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80130a2:	2300      	movs	r3, #0
 80130a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80130a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d10c      	bne.n	80130c6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80130ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80130b0:	b672      	cpsid	i
 80130b2:	f383 8811 	msr	BASEPRI, r3
 80130b6:	f3bf 8f6f 	isb	sy
 80130ba:	f3bf 8f4f 	dsb	sy
 80130be:	b662      	cpsie	i
 80130c0:	623b      	str	r3, [r7, #32]
}
 80130c2:	bf00      	nop
 80130c4:	e7fe      	b.n	80130c4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80130c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d00c      	beq.n	80130e8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80130ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80130d2:	b672      	cpsid	i
 80130d4:	f383 8811 	msr	BASEPRI, r3
 80130d8:	f3bf 8f6f 	isb	sy
 80130dc:	f3bf 8f4f 	dsb	sy
 80130e0:	b662      	cpsie	i
 80130e2:	61fb      	str	r3, [r7, #28]
}
 80130e4:	bf00      	nop
 80130e6:	e7fe      	b.n	80130e6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80130e8:	f001 f980 	bl	80143ec <xTaskGetSchedulerState>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d102      	bne.n	80130f8 <xQueueSemaphoreTake+0x68>
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d101      	bne.n	80130fc <xQueueSemaphoreTake+0x6c>
 80130f8:	2301      	movs	r3, #1
 80130fa:	e000      	b.n	80130fe <xQueueSemaphoreTake+0x6e>
 80130fc:	2300      	movs	r3, #0
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d10c      	bne.n	801311c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8013102:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013106:	b672      	cpsid	i
 8013108:	f383 8811 	msr	BASEPRI, r3
 801310c:	f3bf 8f6f 	isb	sy
 8013110:	f3bf 8f4f 	dsb	sy
 8013114:	b662      	cpsie	i
 8013116:	61bb      	str	r3, [r7, #24]
}
 8013118:	bf00      	nop
 801311a:	e7fe      	b.n	801311a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801311c:	f7ff f9a6 	bl	801246c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013124:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013128:	2b00      	cmp	r3, #0
 801312a:	d024      	beq.n	8013176 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312e:	1e5a      	subs	r2, r3, #1
 8013130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013132:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d104      	bne.n	8013146 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801313c:	f001 fad4 	bl	80146e8 <pvTaskIncrementMutexHeldCount>
 8013140:	4602      	mov	r2, r0
 8013142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013144:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d00f      	beq.n	801316e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013150:	3310      	adds	r3, #16
 8013152:	4618      	mov	r0, r3
 8013154:	f000 ff84 	bl	8014060 <xTaskRemoveFromEventList>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d007      	beq.n	801316e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801315e:	4b55      	ldr	r3, [pc, #340]	; (80132b4 <xQueueSemaphoreTake+0x224>)
 8013160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013164:	601a      	str	r2, [r3, #0]
 8013166:	f3bf 8f4f 	dsb	sy
 801316a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801316e:	f7ff f9b1 	bl	80124d4 <vPortExitCritical>
				return pdPASS;
 8013172:	2301      	movs	r3, #1
 8013174:	e099      	b.n	80132aa <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d113      	bne.n	80131a4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317e:	2b00      	cmp	r3, #0
 8013180:	d00c      	beq.n	801319c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8013182:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013186:	b672      	cpsid	i
 8013188:	f383 8811 	msr	BASEPRI, r3
 801318c:	f3bf 8f6f 	isb	sy
 8013190:	f3bf 8f4f 	dsb	sy
 8013194:	b662      	cpsie	i
 8013196:	617b      	str	r3, [r7, #20]
}
 8013198:	bf00      	nop
 801319a:	e7fe      	b.n	801319a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801319c:	f7ff f99a 	bl	80124d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80131a0:	2300      	movs	r3, #0
 80131a2:	e082      	b.n	80132aa <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80131a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d106      	bne.n	80131b8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80131aa:	f107 030c 	add.w	r3, r7, #12
 80131ae:	4618      	mov	r0, r3
 80131b0:	f000 ffbc 	bl	801412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80131b4:	2301      	movs	r3, #1
 80131b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80131b8:	f7ff f98c 	bl	80124d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80131bc:	f000 fd22 	bl	8013c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80131c0:	f7ff f954 	bl	801246c <vPortEnterCritical>
 80131c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80131ca:	b25b      	sxtb	r3, r3
 80131cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131d0:	d103      	bne.n	80131da <xQueueSemaphoreTake+0x14a>
 80131d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d4:	2200      	movs	r2, #0
 80131d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80131da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131e0:	b25b      	sxtb	r3, r3
 80131e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131e6:	d103      	bne.n	80131f0 <xQueueSemaphoreTake+0x160>
 80131e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ea:	2200      	movs	r2, #0
 80131ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80131f0:	f7ff f970 	bl	80124d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80131f4:	463a      	mov	r2, r7
 80131f6:	f107 030c 	add.w	r3, r7, #12
 80131fa:	4611      	mov	r1, r2
 80131fc:	4618      	mov	r0, r3
 80131fe:	f000 ffab 	bl	8014158 <xTaskCheckForTimeOut>
 8013202:	4603      	mov	r3, r0
 8013204:	2b00      	cmp	r3, #0
 8013206:	d132      	bne.n	801326e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801320a:	f000 f9fa 	bl	8013602 <prvIsQueueEmpty>
 801320e:	4603      	mov	r3, r0
 8013210:	2b00      	cmp	r3, #0
 8013212:	d026      	beq.n	8013262 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d109      	bne.n	8013230 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 801321c:	f7ff f926 	bl	801246c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	4618      	mov	r0, r3
 8013226:	f001 f8ff 	bl	8014428 <xTaskPriorityInherit>
 801322a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801322c:	f7ff f952 	bl	80124d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013232:	3324      	adds	r3, #36	; 0x24
 8013234:	683a      	ldr	r2, [r7, #0]
 8013236:	4611      	mov	r1, r2
 8013238:	4618      	mov	r0, r3
 801323a:	f000 febd 	bl	8013fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801323e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013240:	f000 f98d 	bl	801355e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013244:	f000 fcec 	bl	8013c20 <xTaskResumeAll>
 8013248:	4603      	mov	r3, r0
 801324a:	2b00      	cmp	r3, #0
 801324c:	f47f af66 	bne.w	801311c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8013250:	4b18      	ldr	r3, [pc, #96]	; (80132b4 <xQueueSemaphoreTake+0x224>)
 8013252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013256:	601a      	str	r2, [r3, #0]
 8013258:	f3bf 8f4f 	dsb	sy
 801325c:	f3bf 8f6f 	isb	sy
 8013260:	e75c      	b.n	801311c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013264:	f000 f97b 	bl	801355e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013268:	f000 fcda 	bl	8013c20 <xTaskResumeAll>
 801326c:	e756      	b.n	801311c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801326e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013270:	f000 f975 	bl	801355e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013274:	f000 fcd4 	bl	8013c20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801327a:	f000 f9c2 	bl	8013602 <prvIsQueueEmpty>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	f43f af4b 	beq.w	801311c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013288:	2b00      	cmp	r3, #0
 801328a:	d00d      	beq.n	80132a8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801328c:	f7ff f8ee 	bl	801246c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013292:	f000 f8bc 	bl	801340e <prvGetDisinheritPriorityAfterTimeout>
 8013296:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329a:	689b      	ldr	r3, [r3, #8]
 801329c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801329e:	4618      	mov	r0, r3
 80132a0:	f001 f99c 	bl	80145dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80132a4:	f7ff f916 	bl	80124d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80132a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3738      	adds	r7, #56	; 0x38
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	e000ed04 	.word	0xe000ed04

080132b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b08e      	sub	sp, #56	; 0x38
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80132c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d10c      	bne.n	80132e8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80132ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80132d2:	b672      	cpsid	i
 80132d4:	f383 8811 	msr	BASEPRI, r3
 80132d8:	f3bf 8f6f 	isb	sy
 80132dc:	f3bf 8f4f 	dsb	sy
 80132e0:	b662      	cpsie	i
 80132e2:	623b      	str	r3, [r7, #32]
}
 80132e4:	bf00      	nop
 80132e6:	e7fe      	b.n	80132e6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d103      	bne.n	80132f6 <xQueueReceiveFromISR+0x3e>
 80132ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d101      	bne.n	80132fa <xQueueReceiveFromISR+0x42>
 80132f6:	2301      	movs	r3, #1
 80132f8:	e000      	b.n	80132fc <xQueueReceiveFromISR+0x44>
 80132fa:	2300      	movs	r3, #0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d10c      	bne.n	801331a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8013300:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013304:	b672      	cpsid	i
 8013306:	f383 8811 	msr	BASEPRI, r3
 801330a:	f3bf 8f6f 	isb	sy
 801330e:	f3bf 8f4f 	dsb	sy
 8013312:	b662      	cpsie	i
 8013314:	61fb      	str	r3, [r7, #28]
}
 8013316:	bf00      	nop
 8013318:	e7fe      	b.n	8013318 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801331a:	f7ff f98f 	bl	801263c <vPortValidateInterruptPriority>
	__asm volatile
 801331e:	f3ef 8211 	mrs	r2, BASEPRI
 8013322:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013326:	b672      	cpsid	i
 8013328:	f383 8811 	msr	BASEPRI, r3
 801332c:	f3bf 8f6f 	isb	sy
 8013330:	f3bf 8f4f 	dsb	sy
 8013334:	b662      	cpsie	i
 8013336:	61ba      	str	r2, [r7, #24]
 8013338:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801333a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801333c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013342:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013346:	2b00      	cmp	r3, #0
 8013348:	d02f      	beq.n	80133aa <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801334c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013354:	68b9      	ldr	r1, [r7, #8]
 8013356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013358:	f000 f8db 	bl	8013512 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801335e:	1e5a      	subs	r2, r3, #1
 8013360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013362:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013364:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801336c:	d112      	bne.n	8013394 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013370:	691b      	ldr	r3, [r3, #16]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d016      	beq.n	80133a4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013378:	3310      	adds	r3, #16
 801337a:	4618      	mov	r0, r3
 801337c:	f000 fe70 	bl	8014060 <xTaskRemoveFromEventList>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d00e      	beq.n	80133a4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d00b      	beq.n	80133a4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2201      	movs	r2, #1
 8013390:	601a      	str	r2, [r3, #0]
 8013392:	e007      	b.n	80133a4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013398:	3301      	adds	r3, #1
 801339a:	b2db      	uxtb	r3, r3
 801339c:	b25a      	sxtb	r2, r3
 801339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80133a4:	2301      	movs	r3, #1
 80133a6:	637b      	str	r3, [r7, #52]	; 0x34
 80133a8:	e001      	b.n	80133ae <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80133aa:	2300      	movs	r3, #0
 80133ac:	637b      	str	r3, [r7, #52]	; 0x34
 80133ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	f383 8811 	msr	BASEPRI, r3
}
 80133b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80133ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3738      	adds	r7, #56	; 0x38
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b084      	sub	sp, #16
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d10c      	bne.n	80133f0 <vQueueDelete+0x2c>
	__asm volatile
 80133d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133da:	b672      	cpsid	i
 80133dc:	f383 8811 	msr	BASEPRI, r3
 80133e0:	f3bf 8f6f 	isb	sy
 80133e4:	f3bf 8f4f 	dsb	sy
 80133e8:	b662      	cpsie	i
 80133ea:	60bb      	str	r3, [r7, #8]
}
 80133ec:	bf00      	nop
 80133ee:	e7fe      	b.n	80133ee <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80133f0:	68f8      	ldr	r0, [r7, #12]
 80133f2:	f000 f95f 	bl	80136b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d102      	bne.n	8013406 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8013400:	68f8      	ldr	r0, [r7, #12]
 8013402:	f7fe fd55 	bl	8011eb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013406:	bf00      	nop
 8013408:	3710      	adds	r7, #16
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}

0801340e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801340e:	b480      	push	{r7}
 8013410:	b085      	sub	sp, #20
 8013412:	af00      	add	r7, sp, #0
 8013414:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801341a:	2b00      	cmp	r3, #0
 801341c:	d006      	beq.n	801342c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013428:	60fb      	str	r3, [r7, #12]
 801342a:	e001      	b.n	8013430 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801342c:	2300      	movs	r3, #0
 801342e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013430:	68fb      	ldr	r3, [r7, #12]
	}
 8013432:	4618      	mov	r0, r3
 8013434:	3714      	adds	r7, #20
 8013436:	46bd      	mov	sp, r7
 8013438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343c:	4770      	bx	lr

0801343e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801343e:	b580      	push	{r7, lr}
 8013440:	b086      	sub	sp, #24
 8013442:	af00      	add	r7, sp, #0
 8013444:	60f8      	str	r0, [r7, #12]
 8013446:	60b9      	str	r1, [r7, #8]
 8013448:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801344a:	2300      	movs	r3, #0
 801344c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013452:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013458:	2b00      	cmp	r3, #0
 801345a:	d10d      	bne.n	8013478 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d14d      	bne.n	8013500 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	689b      	ldr	r3, [r3, #8]
 8013468:	4618      	mov	r0, r3
 801346a:	f001 f845 	bl	80144f8 <xTaskPriorityDisinherit>
 801346e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2200      	movs	r2, #0
 8013474:	609a      	str	r2, [r3, #8]
 8013476:	e043      	b.n	8013500 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d119      	bne.n	80134b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6858      	ldr	r0, [r3, #4]
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013486:	461a      	mov	r2, r3
 8013488:	68b9      	ldr	r1, [r7, #8]
 801348a:	f012 fe27 	bl	80260dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	685a      	ldr	r2, [r3, #4]
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013496:	441a      	add	r2, r3
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	685a      	ldr	r2, [r3, #4]
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	689b      	ldr	r3, [r3, #8]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d32b      	bcc.n	8013500 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	605a      	str	r2, [r3, #4]
 80134b0:	e026      	b.n	8013500 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	68d8      	ldr	r0, [r3, #12]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ba:	461a      	mov	r2, r3
 80134bc:	68b9      	ldr	r1, [r7, #8]
 80134be:	f012 fe0d 	bl	80260dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	68da      	ldr	r2, [r3, #12]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ca:	425b      	negs	r3, r3
 80134cc:	441a      	add	r2, r3
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	68da      	ldr	r2, [r3, #12]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d207      	bcs.n	80134ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	689a      	ldr	r2, [r3, #8]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134e6:	425b      	negs	r3, r3
 80134e8:	441a      	add	r2, r3
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2b02      	cmp	r3, #2
 80134f2:	d105      	bne.n	8013500 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d002      	beq.n	8013500 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	3b01      	subs	r3, #1
 80134fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	1c5a      	adds	r2, r3, #1
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013508:	697b      	ldr	r3, [r7, #20]
}
 801350a:	4618      	mov	r0, r3
 801350c:	3718      	adds	r7, #24
 801350e:	46bd      	mov	sp, r7
 8013510:	bd80      	pop	{r7, pc}

08013512 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013512:	b580      	push	{r7, lr}
 8013514:	b082      	sub	sp, #8
 8013516:	af00      	add	r7, sp, #0
 8013518:	6078      	str	r0, [r7, #4]
 801351a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013520:	2b00      	cmp	r3, #0
 8013522:	d018      	beq.n	8013556 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	68da      	ldr	r2, [r3, #12]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801352c:	441a      	add	r2, r3
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	68da      	ldr	r2, [r3, #12]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	689b      	ldr	r3, [r3, #8]
 801353a:	429a      	cmp	r2, r3
 801353c:	d303      	bcc.n	8013546 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681a      	ldr	r2, [r3, #0]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	68d9      	ldr	r1, [r3, #12]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801354e:	461a      	mov	r2, r3
 8013550:	6838      	ldr	r0, [r7, #0]
 8013552:	f012 fdc3 	bl	80260dc <memcpy>
	}
}
 8013556:	bf00      	nop
 8013558:	3708      	adds	r7, #8
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}

0801355e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801355e:	b580      	push	{r7, lr}
 8013560:	b084      	sub	sp, #16
 8013562:	af00      	add	r7, sp, #0
 8013564:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013566:	f7fe ff81 	bl	801246c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013570:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013572:	e011      	b.n	8013598 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013578:	2b00      	cmp	r3, #0
 801357a:	d012      	beq.n	80135a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	3324      	adds	r3, #36	; 0x24
 8013580:	4618      	mov	r0, r3
 8013582:	f000 fd6d 	bl	8014060 <xTaskRemoveFromEventList>
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d001      	beq.n	8013590 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801358c:	f000 fe4a 	bl	8014224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013590:	7bfb      	ldrb	r3, [r7, #15]
 8013592:	3b01      	subs	r3, #1
 8013594:	b2db      	uxtb	r3, r3
 8013596:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801359c:	2b00      	cmp	r3, #0
 801359e:	dce9      	bgt.n	8013574 <prvUnlockQueue+0x16>
 80135a0:	e000      	b.n	80135a4 <prvUnlockQueue+0x46>
					break;
 80135a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	22ff      	movs	r2, #255	; 0xff
 80135a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80135ac:	f7fe ff92 	bl	80124d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80135b0:	f7fe ff5c 	bl	801246c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80135bc:	e011      	b.n	80135e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	691b      	ldr	r3, [r3, #16]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d012      	beq.n	80135ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	3310      	adds	r3, #16
 80135ca:	4618      	mov	r0, r3
 80135cc:	f000 fd48 	bl	8014060 <xTaskRemoveFromEventList>
 80135d0:	4603      	mov	r3, r0
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d001      	beq.n	80135da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80135d6:	f000 fe25 	bl	8014224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80135da:	7bbb      	ldrb	r3, [r7, #14]
 80135dc:	3b01      	subs	r3, #1
 80135de:	b2db      	uxtb	r3, r3
 80135e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80135e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	dce9      	bgt.n	80135be <prvUnlockQueue+0x60>
 80135ea:	e000      	b.n	80135ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80135ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	22ff      	movs	r2, #255	; 0xff
 80135f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80135f6:	f7fe ff6d 	bl	80124d4 <vPortExitCritical>
}
 80135fa:	bf00      	nop
 80135fc:	3710      	adds	r7, #16
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}

08013602 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013602:	b580      	push	{r7, lr}
 8013604:	b084      	sub	sp, #16
 8013606:	af00      	add	r7, sp, #0
 8013608:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801360a:	f7fe ff2f 	bl	801246c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013612:	2b00      	cmp	r3, #0
 8013614:	d102      	bne.n	801361c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013616:	2301      	movs	r3, #1
 8013618:	60fb      	str	r3, [r7, #12]
 801361a:	e001      	b.n	8013620 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801361c:	2300      	movs	r3, #0
 801361e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013620:	f7fe ff58 	bl	80124d4 <vPortExitCritical>

	return xReturn;
 8013624:	68fb      	ldr	r3, [r7, #12]
}
 8013626:	4618      	mov	r0, r3
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}

0801362e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801362e:	b580      	push	{r7, lr}
 8013630:	b084      	sub	sp, #16
 8013632:	af00      	add	r7, sp, #0
 8013634:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013636:	f7fe ff19 	bl	801246c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013642:	429a      	cmp	r2, r3
 8013644:	d102      	bne.n	801364c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013646:	2301      	movs	r3, #1
 8013648:	60fb      	str	r3, [r7, #12]
 801364a:	e001      	b.n	8013650 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801364c:	2300      	movs	r3, #0
 801364e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013650:	f7fe ff40 	bl	80124d4 <vPortExitCritical>

	return xReturn;
 8013654:	68fb      	ldr	r3, [r7, #12]
}
 8013656:	4618      	mov	r0, r3
 8013658:	3710      	adds	r7, #16
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
	...

08013660 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013660:	b480      	push	{r7}
 8013662:	b085      	sub	sp, #20
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801366a:	2300      	movs	r3, #0
 801366c:	60fb      	str	r3, [r7, #12]
 801366e:	e014      	b.n	801369a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013670:	4a0f      	ldr	r2, [pc, #60]	; (80136b0 <vQueueAddToRegistry+0x50>)
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d10b      	bne.n	8013694 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801367c:	490c      	ldr	r1, [pc, #48]	; (80136b0 <vQueueAddToRegistry+0x50>)
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	683a      	ldr	r2, [r7, #0]
 8013682:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013686:	4a0a      	ldr	r2, [pc, #40]	; (80136b0 <vQueueAddToRegistry+0x50>)
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	00db      	lsls	r3, r3, #3
 801368c:	4413      	add	r3, r2
 801368e:	687a      	ldr	r2, [r7, #4]
 8013690:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013692:	e006      	b.n	80136a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	3301      	adds	r3, #1
 8013698:	60fb      	str	r3, [r7, #12]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	2b07      	cmp	r3, #7
 801369e:	d9e7      	bls.n	8013670 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80136a0:	bf00      	nop
 80136a2:	bf00      	nop
 80136a4:	3714      	adds	r7, #20
 80136a6:	46bd      	mov	sp, r7
 80136a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ac:	4770      	bx	lr
 80136ae:	bf00      	nop
 80136b0:	200570b4 	.word	0x200570b4

080136b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80136b4:	b480      	push	{r7}
 80136b6:	b085      	sub	sp, #20
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80136bc:	2300      	movs	r3, #0
 80136be:	60fb      	str	r3, [r7, #12]
 80136c0:	e016      	b.n	80136f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80136c2:	4a10      	ldr	r2, [pc, #64]	; (8013704 <vQueueUnregisterQueue+0x50>)
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	00db      	lsls	r3, r3, #3
 80136c8:	4413      	add	r3, r2
 80136ca:	685b      	ldr	r3, [r3, #4]
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d10b      	bne.n	80136ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80136d2:	4a0c      	ldr	r2, [pc, #48]	; (8013704 <vQueueUnregisterQueue+0x50>)
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2100      	movs	r1, #0
 80136d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80136dc:	4a09      	ldr	r2, [pc, #36]	; (8013704 <vQueueUnregisterQueue+0x50>)
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	4413      	add	r3, r2
 80136e4:	2200      	movs	r2, #0
 80136e6:	605a      	str	r2, [r3, #4]
				break;
 80136e8:	e006      	b.n	80136f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	3301      	adds	r3, #1
 80136ee:	60fb      	str	r3, [r7, #12]
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	2b07      	cmp	r3, #7
 80136f4:	d9e5      	bls.n	80136c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80136f6:	bf00      	nop
 80136f8:	bf00      	nop
 80136fa:	3714      	adds	r7, #20
 80136fc:	46bd      	mov	sp, r7
 80136fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013702:	4770      	bx	lr
 8013704:	200570b4 	.word	0x200570b4

08013708 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013708:	b580      	push	{r7, lr}
 801370a:	b086      	sub	sp, #24
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013718:	f7fe fea8 	bl	801246c <vPortEnterCritical>
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013722:	b25b      	sxtb	r3, r3
 8013724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013728:	d103      	bne.n	8013732 <vQueueWaitForMessageRestricted+0x2a>
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	2200      	movs	r2, #0
 801372e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013732:	697b      	ldr	r3, [r7, #20]
 8013734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013738:	b25b      	sxtb	r3, r3
 801373a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801373e:	d103      	bne.n	8013748 <vQueueWaitForMessageRestricted+0x40>
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	2200      	movs	r2, #0
 8013744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013748:	f7fe fec4 	bl	80124d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013750:	2b00      	cmp	r3, #0
 8013752:	d106      	bne.n	8013762 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	3324      	adds	r3, #36	; 0x24
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	68b9      	ldr	r1, [r7, #8]
 801375c:	4618      	mov	r0, r3
 801375e:	f000 fc51 	bl	8014004 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013762:	6978      	ldr	r0, [r7, #20]
 8013764:	f7ff fefb 	bl	801355e <prvUnlockQueue>
	}
 8013768:	bf00      	nop
 801376a:	3718      	adds	r7, #24
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}

08013770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013770:	b580      	push	{r7, lr}
 8013772:	b08e      	sub	sp, #56	; 0x38
 8013774:	af04      	add	r7, sp, #16
 8013776:	60f8      	str	r0, [r7, #12]
 8013778:	60b9      	str	r1, [r7, #8]
 801377a:	607a      	str	r2, [r7, #4]
 801377c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013780:	2b00      	cmp	r3, #0
 8013782:	d10c      	bne.n	801379e <xTaskCreateStatic+0x2e>
	__asm volatile
 8013784:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013788:	b672      	cpsid	i
 801378a:	f383 8811 	msr	BASEPRI, r3
 801378e:	f3bf 8f6f 	isb	sy
 8013792:	f3bf 8f4f 	dsb	sy
 8013796:	b662      	cpsie	i
 8013798:	623b      	str	r3, [r7, #32]
}
 801379a:	bf00      	nop
 801379c:	e7fe      	b.n	801379c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d10c      	bne.n	80137be <xTaskCreateStatic+0x4e>
	__asm volatile
 80137a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137a8:	b672      	cpsid	i
 80137aa:	f383 8811 	msr	BASEPRI, r3
 80137ae:	f3bf 8f6f 	isb	sy
 80137b2:	f3bf 8f4f 	dsb	sy
 80137b6:	b662      	cpsie	i
 80137b8:	61fb      	str	r3, [r7, #28]
}
 80137ba:	bf00      	nop
 80137bc:	e7fe      	b.n	80137bc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80137be:	235c      	movs	r3, #92	; 0x5c
 80137c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	2b5c      	cmp	r3, #92	; 0x5c
 80137c6:	d00c      	beq.n	80137e2 <xTaskCreateStatic+0x72>
	__asm volatile
 80137c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137cc:	b672      	cpsid	i
 80137ce:	f383 8811 	msr	BASEPRI, r3
 80137d2:	f3bf 8f6f 	isb	sy
 80137d6:	f3bf 8f4f 	dsb	sy
 80137da:	b662      	cpsie	i
 80137dc:	61bb      	str	r3, [r7, #24]
}
 80137de:	bf00      	nop
 80137e0:	e7fe      	b.n	80137e0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80137e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80137e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d01e      	beq.n	8013828 <xTaskCreateStatic+0xb8>
 80137ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d01b      	beq.n	8013828 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80137f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80137f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80137fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fc:	2202      	movs	r2, #2
 80137fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013802:	2300      	movs	r3, #0
 8013804:	9303      	str	r3, [sp, #12]
 8013806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013808:	9302      	str	r3, [sp, #8]
 801380a:	f107 0314 	add.w	r3, r7, #20
 801380e:	9301      	str	r3, [sp, #4]
 8013810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013812:	9300      	str	r3, [sp, #0]
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	687a      	ldr	r2, [r7, #4]
 8013818:	68b9      	ldr	r1, [r7, #8]
 801381a:	68f8      	ldr	r0, [r7, #12]
 801381c:	f000 f850 	bl	80138c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013822:	f000 f8df 	bl	80139e4 <prvAddNewTaskToReadyList>
 8013826:	e001      	b.n	801382c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8013828:	2300      	movs	r3, #0
 801382a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801382c:	697b      	ldr	r3, [r7, #20]
	}
 801382e:	4618      	mov	r0, r3
 8013830:	3728      	adds	r7, #40	; 0x28
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}

08013836 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013836:	b580      	push	{r7, lr}
 8013838:	b08c      	sub	sp, #48	; 0x30
 801383a:	af04      	add	r7, sp, #16
 801383c:	60f8      	str	r0, [r7, #12]
 801383e:	60b9      	str	r1, [r7, #8]
 8013840:	603b      	str	r3, [r7, #0]
 8013842:	4613      	mov	r3, r2
 8013844:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013846:	88fb      	ldrh	r3, [r7, #6]
 8013848:	009b      	lsls	r3, r3, #2
 801384a:	4618      	mov	r0, r3
 801384c:	f7fe fa66 	bl	8011d1c <pvPortMalloc>
 8013850:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00e      	beq.n	8013876 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013858:	205c      	movs	r0, #92	; 0x5c
 801385a:	f7fe fa5f 	bl	8011d1c <pvPortMalloc>
 801385e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d003      	beq.n	801386e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	697a      	ldr	r2, [r7, #20]
 801386a:	631a      	str	r2, [r3, #48]	; 0x30
 801386c:	e005      	b.n	801387a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801386e:	6978      	ldr	r0, [r7, #20]
 8013870:	f7fe fb1e 	bl	8011eb0 <vPortFree>
 8013874:	e001      	b.n	801387a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013876:	2300      	movs	r3, #0
 8013878:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801387a:	69fb      	ldr	r3, [r7, #28]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d017      	beq.n	80138b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	2200      	movs	r2, #0
 8013884:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013888:	88fa      	ldrh	r2, [r7, #6]
 801388a:	2300      	movs	r3, #0
 801388c:	9303      	str	r3, [sp, #12]
 801388e:	69fb      	ldr	r3, [r7, #28]
 8013890:	9302      	str	r3, [sp, #8]
 8013892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013894:	9301      	str	r3, [sp, #4]
 8013896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013898:	9300      	str	r3, [sp, #0]
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	68b9      	ldr	r1, [r7, #8]
 801389e:	68f8      	ldr	r0, [r7, #12]
 80138a0:	f000 f80e 	bl	80138c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138a4:	69f8      	ldr	r0, [r7, #28]
 80138a6:	f000 f89d 	bl	80139e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80138aa:	2301      	movs	r3, #1
 80138ac:	61bb      	str	r3, [r7, #24]
 80138ae:	e002      	b.n	80138b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80138b0:	f04f 33ff 	mov.w	r3, #4294967295
 80138b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80138b6:	69bb      	ldr	r3, [r7, #24]
	}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3720      	adds	r7, #32
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b088      	sub	sp, #32
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
 80138cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80138ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	009b      	lsls	r3, r3, #2
 80138d6:	461a      	mov	r2, r3
 80138d8:	21a5      	movs	r1, #165	; 0xa5
 80138da:	f012 fc0d 	bl	80260f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80138de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80138e2:	6879      	ldr	r1, [r7, #4]
 80138e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80138e8:	440b      	add	r3, r1
 80138ea:	009b      	lsls	r3, r3, #2
 80138ec:	4413      	add	r3, r2
 80138ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80138f0:	69bb      	ldr	r3, [r7, #24]
 80138f2:	f023 0307 	bic.w	r3, r3, #7
 80138f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	f003 0307 	and.w	r3, r3, #7
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d00c      	beq.n	801391c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8013902:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013906:	b672      	cpsid	i
 8013908:	f383 8811 	msr	BASEPRI, r3
 801390c:	f3bf 8f6f 	isb	sy
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	b662      	cpsie	i
 8013916:	617b      	str	r3, [r7, #20]
}
 8013918:	bf00      	nop
 801391a:	e7fe      	b.n	801391a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d01f      	beq.n	8013962 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013922:	2300      	movs	r3, #0
 8013924:	61fb      	str	r3, [r7, #28]
 8013926:	e012      	b.n	801394e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013928:	68ba      	ldr	r2, [r7, #8]
 801392a:	69fb      	ldr	r3, [r7, #28]
 801392c:	4413      	add	r3, r2
 801392e:	7819      	ldrb	r1, [r3, #0]
 8013930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	4413      	add	r3, r2
 8013936:	3334      	adds	r3, #52	; 0x34
 8013938:	460a      	mov	r2, r1
 801393a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801393c:	68ba      	ldr	r2, [r7, #8]
 801393e:	69fb      	ldr	r3, [r7, #28]
 8013940:	4413      	add	r3, r2
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d006      	beq.n	8013956 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	3301      	adds	r3, #1
 801394c:	61fb      	str	r3, [r7, #28]
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	2b0f      	cmp	r3, #15
 8013952:	d9e9      	bls.n	8013928 <prvInitialiseNewTask+0x68>
 8013954:	e000      	b.n	8013958 <prvInitialiseNewTask+0x98>
			{
				break;
 8013956:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395a:	2200      	movs	r2, #0
 801395c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013960:	e003      	b.n	801396a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013964:	2200      	movs	r2, #0
 8013966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396c:	2b37      	cmp	r3, #55	; 0x37
 801396e:	d901      	bls.n	8013974 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013970:	2337      	movs	r3, #55	; 0x37
 8013972:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013978:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801397e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013982:	2200      	movs	r2, #0
 8013984:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013988:	3304      	adds	r3, #4
 801398a:	4618      	mov	r0, r3
 801398c:	f7fe fbca 	bl	8012124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013992:	3318      	adds	r3, #24
 8013994:	4618      	mov	r0, r3
 8013996:	f7fe fbc5 	bl	8012124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801399e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80139a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80139aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80139b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b2:	2200      	movs	r2, #0
 80139b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80139b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b8:	2200      	movs	r2, #0
 80139ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80139be:	683a      	ldr	r2, [r7, #0]
 80139c0:	68f9      	ldr	r1, [r7, #12]
 80139c2:	69b8      	ldr	r0, [r7, #24]
 80139c4:	f7fe fc42 	bl	801224c <pxPortInitialiseStack>
 80139c8:	4602      	mov	r2, r0
 80139ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80139ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d002      	beq.n	80139da <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80139d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80139da:	bf00      	nop
 80139dc:	3720      	adds	r7, #32
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}
	...

080139e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80139ec:	f7fe fd3e 	bl	801246c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80139f0:	4b2d      	ldr	r3, [pc, #180]	; (8013aa8 <prvAddNewTaskToReadyList+0xc4>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	3301      	adds	r3, #1
 80139f6:	4a2c      	ldr	r2, [pc, #176]	; (8013aa8 <prvAddNewTaskToReadyList+0xc4>)
 80139f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80139fa:	4b2c      	ldr	r3, [pc, #176]	; (8013aac <prvAddNewTaskToReadyList+0xc8>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d109      	bne.n	8013a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a02:	4a2a      	ldr	r2, [pc, #168]	; (8013aac <prvAddNewTaskToReadyList+0xc8>)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a08:	4b27      	ldr	r3, [pc, #156]	; (8013aa8 <prvAddNewTaskToReadyList+0xc4>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2b01      	cmp	r3, #1
 8013a0e:	d110      	bne.n	8013a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a10:	f000 fc2c 	bl	801426c <prvInitialiseTaskLists>
 8013a14:	e00d      	b.n	8013a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a16:	4b26      	ldr	r3, [pc, #152]	; (8013ab0 <prvAddNewTaskToReadyList+0xcc>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d109      	bne.n	8013a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a1e:	4b23      	ldr	r3, [pc, #140]	; (8013aac <prvAddNewTaskToReadyList+0xc8>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	d802      	bhi.n	8013a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013a2c:	4a1f      	ldr	r2, [pc, #124]	; (8013aac <prvAddNewTaskToReadyList+0xc8>)
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013a32:	4b20      	ldr	r3, [pc, #128]	; (8013ab4 <prvAddNewTaskToReadyList+0xd0>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	3301      	adds	r3, #1
 8013a38:	4a1e      	ldr	r2, [pc, #120]	; (8013ab4 <prvAddNewTaskToReadyList+0xd0>)
 8013a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013a3c:	4b1d      	ldr	r3, [pc, #116]	; (8013ab4 <prvAddNewTaskToReadyList+0xd0>)
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a48:	4b1b      	ldr	r3, [pc, #108]	; (8013ab8 <prvAddNewTaskToReadyList+0xd4>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d903      	bls.n	8013a58 <prvAddNewTaskToReadyList+0x74>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a54:	4a18      	ldr	r2, [pc, #96]	; (8013ab8 <prvAddNewTaskToReadyList+0xd4>)
 8013a56:	6013      	str	r3, [r2, #0]
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a5c:	4613      	mov	r3, r2
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	4413      	add	r3, r2
 8013a62:	009b      	lsls	r3, r3, #2
 8013a64:	4a15      	ldr	r2, [pc, #84]	; (8013abc <prvAddNewTaskToReadyList+0xd8>)
 8013a66:	441a      	add	r2, r3
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	3304      	adds	r3, #4
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4610      	mov	r0, r2
 8013a70:	f7fe fb65 	bl	801213e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013a74:	f7fe fd2e 	bl	80124d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013a78:	4b0d      	ldr	r3, [pc, #52]	; (8013ab0 <prvAddNewTaskToReadyList+0xcc>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d00e      	beq.n	8013a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013a80:	4b0a      	ldr	r3, [pc, #40]	; (8013aac <prvAddNewTaskToReadyList+0xc8>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d207      	bcs.n	8013a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013a8e:	4b0c      	ldr	r3, [pc, #48]	; (8013ac0 <prvAddNewTaskToReadyList+0xdc>)
 8013a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a94:	601a      	str	r2, [r3, #0]
 8013a96:	f3bf 8f4f 	dsb	sy
 8013a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a9e:	bf00      	nop
 8013aa0:	3708      	adds	r7, #8
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	20056594 	.word	0x20056594
 8013aac:	200560c0 	.word	0x200560c0
 8013ab0:	200565a0 	.word	0x200565a0
 8013ab4:	200565b0 	.word	0x200565b0
 8013ab8:	2005659c 	.word	0x2005659c
 8013abc:	200560c4 	.word	0x200560c4
 8013ac0:	e000ed04 	.word	0xe000ed04

08013ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b084      	sub	sp, #16
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013acc:	2300      	movs	r3, #0
 8013ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d019      	beq.n	8013b0a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013ad6:	4b14      	ldr	r3, [pc, #80]	; (8013b28 <vTaskDelay+0x64>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d00c      	beq.n	8013af8 <vTaskDelay+0x34>
	__asm volatile
 8013ade:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ae2:	b672      	cpsid	i
 8013ae4:	f383 8811 	msr	BASEPRI, r3
 8013ae8:	f3bf 8f6f 	isb	sy
 8013aec:	f3bf 8f4f 	dsb	sy
 8013af0:	b662      	cpsie	i
 8013af2:	60bb      	str	r3, [r7, #8]
}
 8013af4:	bf00      	nop
 8013af6:	e7fe      	b.n	8013af6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013af8:	f000 f884 	bl	8013c04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013afc:	2100      	movs	r1, #0
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f000 fe06 	bl	8014710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b04:	f000 f88c 	bl	8013c20 <xTaskResumeAll>
 8013b08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d107      	bne.n	8013b20 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8013b10:	4b06      	ldr	r3, [pc, #24]	; (8013b2c <vTaskDelay+0x68>)
 8013b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b16:	601a      	str	r2, [r3, #0]
 8013b18:	f3bf 8f4f 	dsb	sy
 8013b1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b20:	bf00      	nop
 8013b22:	3710      	adds	r7, #16
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	200565bc 	.word	0x200565bc
 8013b2c:	e000ed04 	.word	0xe000ed04

08013b30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b08a      	sub	sp, #40	; 0x28
 8013b34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013b36:	2300      	movs	r3, #0
 8013b38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013b3e:	463a      	mov	r2, r7
 8013b40:	1d39      	adds	r1, r7, #4
 8013b42:	f107 0308 	add.w	r3, r7, #8
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fe f8b4 	bl	8011cb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013b4c:	6839      	ldr	r1, [r7, #0]
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	68ba      	ldr	r2, [r7, #8]
 8013b52:	9202      	str	r2, [sp, #8]
 8013b54:	9301      	str	r3, [sp, #4]
 8013b56:	2300      	movs	r3, #0
 8013b58:	9300      	str	r3, [sp, #0]
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	460a      	mov	r2, r1
 8013b5e:	4923      	ldr	r1, [pc, #140]	; (8013bec <vTaskStartScheduler+0xbc>)
 8013b60:	4823      	ldr	r0, [pc, #140]	; (8013bf0 <vTaskStartScheduler+0xc0>)
 8013b62:	f7ff fe05 	bl	8013770 <xTaskCreateStatic>
 8013b66:	4603      	mov	r3, r0
 8013b68:	4a22      	ldr	r2, [pc, #136]	; (8013bf4 <vTaskStartScheduler+0xc4>)
 8013b6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013b6c:	4b21      	ldr	r3, [pc, #132]	; (8013bf4 <vTaskStartScheduler+0xc4>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d002      	beq.n	8013b7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013b74:	2301      	movs	r3, #1
 8013b76:	617b      	str	r3, [r7, #20]
 8013b78:	e001      	b.n	8013b7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	d102      	bne.n	8013b8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013b84:	f000 fe18 	bl	80147b8 <xTimerCreateTimerTask>
 8013b88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	2b01      	cmp	r3, #1
 8013b8e:	d118      	bne.n	8013bc2 <vTaskStartScheduler+0x92>
	__asm volatile
 8013b90:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b94:	b672      	cpsid	i
 8013b96:	f383 8811 	msr	BASEPRI, r3
 8013b9a:	f3bf 8f6f 	isb	sy
 8013b9e:	f3bf 8f4f 	dsb	sy
 8013ba2:	b662      	cpsie	i
 8013ba4:	613b      	str	r3, [r7, #16]
}
 8013ba6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013ba8:	4b13      	ldr	r3, [pc, #76]	; (8013bf8 <vTaskStartScheduler+0xc8>)
 8013baa:	f04f 32ff 	mov.w	r2, #4294967295
 8013bae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013bb0:	4b12      	ldr	r3, [pc, #72]	; (8013bfc <vTaskStartScheduler+0xcc>)
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013bb6:	4b12      	ldr	r3, [pc, #72]	; (8013c00 <vTaskStartScheduler+0xd0>)
 8013bb8:	2200      	movs	r2, #0
 8013bba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013bbc:	f7fe fbd8 	bl	8012370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013bc0:	e010      	b.n	8013be4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc8:	d10c      	bne.n	8013be4 <vTaskStartScheduler+0xb4>
	__asm volatile
 8013bca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013bce:	b672      	cpsid	i
 8013bd0:	f383 8811 	msr	BASEPRI, r3
 8013bd4:	f3bf 8f6f 	isb	sy
 8013bd8:	f3bf 8f4f 	dsb	sy
 8013bdc:	b662      	cpsie	i
 8013bde:	60fb      	str	r3, [r7, #12]
}
 8013be0:	bf00      	nop
 8013be2:	e7fe      	b.n	8013be2 <vTaskStartScheduler+0xb2>
}
 8013be4:	bf00      	nop
 8013be6:	3718      	adds	r7, #24
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	0802b3ec 	.word	0x0802b3ec
 8013bf0:	0801423d 	.word	0x0801423d
 8013bf4:	200565b8 	.word	0x200565b8
 8013bf8:	200565b4 	.word	0x200565b4
 8013bfc:	200565a0 	.word	0x200565a0
 8013c00:	20056598 	.word	0x20056598

08013c04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c04:	b480      	push	{r7}
 8013c06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013c08:	4b04      	ldr	r3, [pc, #16]	; (8013c1c <vTaskSuspendAll+0x18>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	4a03      	ldr	r2, [pc, #12]	; (8013c1c <vTaskSuspendAll+0x18>)
 8013c10:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013c12:	bf00      	nop
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr
 8013c1c:	200565bc 	.word	0x200565bc

08013c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b084      	sub	sp, #16
 8013c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013c26:	2300      	movs	r3, #0
 8013c28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013c2e:	4b43      	ldr	r3, [pc, #268]	; (8013d3c <xTaskResumeAll+0x11c>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d10c      	bne.n	8013c50 <xTaskResumeAll+0x30>
	__asm volatile
 8013c36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c3a:	b672      	cpsid	i
 8013c3c:	f383 8811 	msr	BASEPRI, r3
 8013c40:	f3bf 8f6f 	isb	sy
 8013c44:	f3bf 8f4f 	dsb	sy
 8013c48:	b662      	cpsie	i
 8013c4a:	603b      	str	r3, [r7, #0]
}
 8013c4c:	bf00      	nop
 8013c4e:	e7fe      	b.n	8013c4e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013c50:	f7fe fc0c 	bl	801246c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013c54:	4b39      	ldr	r3, [pc, #228]	; (8013d3c <xTaskResumeAll+0x11c>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	3b01      	subs	r3, #1
 8013c5a:	4a38      	ldr	r2, [pc, #224]	; (8013d3c <xTaskResumeAll+0x11c>)
 8013c5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c5e:	4b37      	ldr	r3, [pc, #220]	; (8013d3c <xTaskResumeAll+0x11c>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d162      	bne.n	8013d2c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013c66:	4b36      	ldr	r3, [pc, #216]	; (8013d40 <xTaskResumeAll+0x120>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d05e      	beq.n	8013d2c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c6e:	e02f      	b.n	8013cd0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c70:	4b34      	ldr	r3, [pc, #208]	; (8013d44 <xTaskResumeAll+0x124>)
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	68db      	ldr	r3, [r3, #12]
 8013c76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	3318      	adds	r3, #24
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7fe fabb 	bl	80121f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	3304      	adds	r3, #4
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7fe fab6 	bl	80121f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c90:	4b2d      	ldr	r3, [pc, #180]	; (8013d48 <xTaskResumeAll+0x128>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d903      	bls.n	8013ca0 <xTaskResumeAll+0x80>
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c9c:	4a2a      	ldr	r2, [pc, #168]	; (8013d48 <xTaskResumeAll+0x128>)
 8013c9e:	6013      	str	r3, [r2, #0]
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ca4:	4613      	mov	r3, r2
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	4413      	add	r3, r2
 8013caa:	009b      	lsls	r3, r3, #2
 8013cac:	4a27      	ldr	r2, [pc, #156]	; (8013d4c <xTaskResumeAll+0x12c>)
 8013cae:	441a      	add	r2, r3
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	3304      	adds	r3, #4
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	4610      	mov	r0, r2
 8013cb8:	f7fe fa41 	bl	801213e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cc0:	4b23      	ldr	r3, [pc, #140]	; (8013d50 <xTaskResumeAll+0x130>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d302      	bcc.n	8013cd0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8013cca:	4b22      	ldr	r3, [pc, #136]	; (8013d54 <xTaskResumeAll+0x134>)
 8013ccc:	2201      	movs	r2, #1
 8013cce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013cd0:	4b1c      	ldr	r3, [pc, #112]	; (8013d44 <xTaskResumeAll+0x124>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d1cb      	bne.n	8013c70 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d001      	beq.n	8013ce2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013cde:	f000 fb65 	bl	80143ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013ce2:	4b1d      	ldr	r3, [pc, #116]	; (8013d58 <xTaskResumeAll+0x138>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d010      	beq.n	8013d10 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013cee:	f000 f847 	bl	8013d80 <xTaskIncrementTick>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d002      	beq.n	8013cfe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8013cf8:	4b16      	ldr	r3, [pc, #88]	; (8013d54 <xTaskResumeAll+0x134>)
 8013cfa:	2201      	movs	r2, #1
 8013cfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	3b01      	subs	r3, #1
 8013d02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d1f1      	bne.n	8013cee <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8013d0a:	4b13      	ldr	r3, [pc, #76]	; (8013d58 <xTaskResumeAll+0x138>)
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d10:	4b10      	ldr	r3, [pc, #64]	; (8013d54 <xTaskResumeAll+0x134>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d009      	beq.n	8013d2c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d1c:	4b0f      	ldr	r3, [pc, #60]	; (8013d5c <xTaskResumeAll+0x13c>)
 8013d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d22:	601a      	str	r2, [r3, #0]
 8013d24:	f3bf 8f4f 	dsb	sy
 8013d28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d2c:	f7fe fbd2 	bl	80124d4 <vPortExitCritical>

	return xAlreadyYielded;
 8013d30:	68bb      	ldr	r3, [r7, #8]
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	3710      	adds	r7, #16
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}
 8013d3a:	bf00      	nop
 8013d3c:	200565bc 	.word	0x200565bc
 8013d40:	20056594 	.word	0x20056594
 8013d44:	20056554 	.word	0x20056554
 8013d48:	2005659c 	.word	0x2005659c
 8013d4c:	200560c4 	.word	0x200560c4
 8013d50:	200560c0 	.word	0x200560c0
 8013d54:	200565a8 	.word	0x200565a8
 8013d58:	200565a4 	.word	0x200565a4
 8013d5c:	e000ed04 	.word	0xe000ed04

08013d60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013d66:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <xTaskGetTickCount+0x1c>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013d6c:	687b      	ldr	r3, [r7, #4]
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	370c      	adds	r7, #12
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr
 8013d7a:	bf00      	nop
 8013d7c:	20056598 	.word	0x20056598

08013d80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b086      	sub	sp, #24
 8013d84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013d86:	2300      	movs	r3, #0
 8013d88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d8a:	4b50      	ldr	r3, [pc, #320]	; (8013ecc <xTaskIncrementTick+0x14c>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	f040 808b 	bne.w	8013eaa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013d94:	4b4e      	ldr	r3, [pc, #312]	; (8013ed0 <xTaskIncrementTick+0x150>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	3301      	adds	r3, #1
 8013d9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d9c:	4a4c      	ldr	r2, [pc, #304]	; (8013ed0 <xTaskIncrementTick+0x150>)
 8013d9e:	693b      	ldr	r3, [r7, #16]
 8013da0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d122      	bne.n	8013dee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8013da8:	4b4a      	ldr	r3, [pc, #296]	; (8013ed4 <xTaskIncrementTick+0x154>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d00c      	beq.n	8013dcc <xTaskIncrementTick+0x4c>
	__asm volatile
 8013db2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013db6:	b672      	cpsid	i
 8013db8:	f383 8811 	msr	BASEPRI, r3
 8013dbc:	f3bf 8f6f 	isb	sy
 8013dc0:	f3bf 8f4f 	dsb	sy
 8013dc4:	b662      	cpsie	i
 8013dc6:	603b      	str	r3, [r7, #0]
}
 8013dc8:	bf00      	nop
 8013dca:	e7fe      	b.n	8013dca <xTaskIncrementTick+0x4a>
 8013dcc:	4b41      	ldr	r3, [pc, #260]	; (8013ed4 <xTaskIncrementTick+0x154>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	60fb      	str	r3, [r7, #12]
 8013dd2:	4b41      	ldr	r3, [pc, #260]	; (8013ed8 <xTaskIncrementTick+0x158>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	4a3f      	ldr	r2, [pc, #252]	; (8013ed4 <xTaskIncrementTick+0x154>)
 8013dd8:	6013      	str	r3, [r2, #0]
 8013dda:	4a3f      	ldr	r2, [pc, #252]	; (8013ed8 <xTaskIncrementTick+0x158>)
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	6013      	str	r3, [r2, #0]
 8013de0:	4b3e      	ldr	r3, [pc, #248]	; (8013edc <xTaskIncrementTick+0x15c>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	3301      	adds	r3, #1
 8013de6:	4a3d      	ldr	r2, [pc, #244]	; (8013edc <xTaskIncrementTick+0x15c>)
 8013de8:	6013      	str	r3, [r2, #0]
 8013dea:	f000 fadf 	bl	80143ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013dee:	4b3c      	ldr	r3, [pc, #240]	; (8013ee0 <xTaskIncrementTick+0x160>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	693a      	ldr	r2, [r7, #16]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d349      	bcc.n	8013e8c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013df8:	4b36      	ldr	r3, [pc, #216]	; (8013ed4 <xTaskIncrementTick+0x154>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d104      	bne.n	8013e0c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e02:	4b37      	ldr	r3, [pc, #220]	; (8013ee0 <xTaskIncrementTick+0x160>)
 8013e04:	f04f 32ff 	mov.w	r2, #4294967295
 8013e08:	601a      	str	r2, [r3, #0]
					break;
 8013e0a:	e03f      	b.n	8013e8c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e0c:	4b31      	ldr	r3, [pc, #196]	; (8013ed4 <xTaskIncrementTick+0x154>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	68db      	ldr	r3, [r3, #12]
 8013e12:	68db      	ldr	r3, [r3, #12]
 8013e14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e1c:	693a      	ldr	r2, [r7, #16]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d203      	bcs.n	8013e2c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e24:	4a2e      	ldr	r2, [pc, #184]	; (8013ee0 <xTaskIncrementTick+0x160>)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013e2a:	e02f      	b.n	8013e8c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	3304      	adds	r3, #4
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fe f9e1 	bl	80121f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d004      	beq.n	8013e48 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	3318      	adds	r3, #24
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fe f9d8 	bl	80121f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e4c:	4b25      	ldr	r3, [pc, #148]	; (8013ee4 <xTaskIncrementTick+0x164>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	d903      	bls.n	8013e5c <xTaskIncrementTick+0xdc>
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e58:	4a22      	ldr	r2, [pc, #136]	; (8013ee4 <xTaskIncrementTick+0x164>)
 8013e5a:	6013      	str	r3, [r2, #0]
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e60:	4613      	mov	r3, r2
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	4413      	add	r3, r2
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	4a1f      	ldr	r2, [pc, #124]	; (8013ee8 <xTaskIncrementTick+0x168>)
 8013e6a:	441a      	add	r2, r3
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	3304      	adds	r3, #4
 8013e70:	4619      	mov	r1, r3
 8013e72:	4610      	mov	r0, r2
 8013e74:	f7fe f963 	bl	801213e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e7c:	4b1b      	ldr	r3, [pc, #108]	; (8013eec <xTaskIncrementTick+0x16c>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d3b8      	bcc.n	8013df8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8013e86:	2301      	movs	r3, #1
 8013e88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e8a:	e7b5      	b.n	8013df8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013e8c:	4b17      	ldr	r3, [pc, #92]	; (8013eec <xTaskIncrementTick+0x16c>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e92:	4915      	ldr	r1, [pc, #84]	; (8013ee8 <xTaskIncrementTick+0x168>)
 8013e94:	4613      	mov	r3, r2
 8013e96:	009b      	lsls	r3, r3, #2
 8013e98:	4413      	add	r3, r2
 8013e9a:	009b      	lsls	r3, r3, #2
 8013e9c:	440b      	add	r3, r1
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	2b01      	cmp	r3, #1
 8013ea2:	d907      	bls.n	8013eb4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	617b      	str	r3, [r7, #20]
 8013ea8:	e004      	b.n	8013eb4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013eaa:	4b11      	ldr	r3, [pc, #68]	; (8013ef0 <xTaskIncrementTick+0x170>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	3301      	adds	r3, #1
 8013eb0:	4a0f      	ldr	r2, [pc, #60]	; (8013ef0 <xTaskIncrementTick+0x170>)
 8013eb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013eb4:	4b0f      	ldr	r3, [pc, #60]	; (8013ef4 <xTaskIncrementTick+0x174>)
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d001      	beq.n	8013ec0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013ec0:	697b      	ldr	r3, [r7, #20]
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3718      	adds	r7, #24
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	200565bc 	.word	0x200565bc
 8013ed0:	20056598 	.word	0x20056598
 8013ed4:	2005654c 	.word	0x2005654c
 8013ed8:	20056550 	.word	0x20056550
 8013edc:	200565ac 	.word	0x200565ac
 8013ee0:	200565b4 	.word	0x200565b4
 8013ee4:	2005659c 	.word	0x2005659c
 8013ee8:	200560c4 	.word	0x200560c4
 8013eec:	200560c0 	.word	0x200560c0
 8013ef0:	200565a4 	.word	0x200565a4
 8013ef4:	200565a8 	.word	0x200565a8

08013ef8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b085      	sub	sp, #20
 8013efc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013efe:	4b29      	ldr	r3, [pc, #164]	; (8013fa4 <vTaskSwitchContext+0xac>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d003      	beq.n	8013f0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f06:	4b28      	ldr	r3, [pc, #160]	; (8013fa8 <vTaskSwitchContext+0xb0>)
 8013f08:	2201      	movs	r2, #1
 8013f0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f0c:	e043      	b.n	8013f96 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8013f0e:	4b26      	ldr	r3, [pc, #152]	; (8013fa8 <vTaskSwitchContext+0xb0>)
 8013f10:	2200      	movs	r2, #0
 8013f12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f14:	4b25      	ldr	r3, [pc, #148]	; (8013fac <vTaskSwitchContext+0xb4>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	60fb      	str	r3, [r7, #12]
 8013f1a:	e012      	b.n	8013f42 <vTaskSwitchContext+0x4a>
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d10c      	bne.n	8013f3c <vTaskSwitchContext+0x44>
	__asm volatile
 8013f22:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f26:	b672      	cpsid	i
 8013f28:	f383 8811 	msr	BASEPRI, r3
 8013f2c:	f3bf 8f6f 	isb	sy
 8013f30:	f3bf 8f4f 	dsb	sy
 8013f34:	b662      	cpsie	i
 8013f36:	607b      	str	r3, [r7, #4]
}
 8013f38:	bf00      	nop
 8013f3a:	e7fe      	b.n	8013f3a <vTaskSwitchContext+0x42>
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	3b01      	subs	r3, #1
 8013f40:	60fb      	str	r3, [r7, #12]
 8013f42:	491b      	ldr	r1, [pc, #108]	; (8013fb0 <vTaskSwitchContext+0xb8>)
 8013f44:	68fa      	ldr	r2, [r7, #12]
 8013f46:	4613      	mov	r3, r2
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	4413      	add	r3, r2
 8013f4c:	009b      	lsls	r3, r3, #2
 8013f4e:	440b      	add	r3, r1
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d0e2      	beq.n	8013f1c <vTaskSwitchContext+0x24>
 8013f56:	68fa      	ldr	r2, [r7, #12]
 8013f58:	4613      	mov	r3, r2
 8013f5a:	009b      	lsls	r3, r3, #2
 8013f5c:	4413      	add	r3, r2
 8013f5e:	009b      	lsls	r3, r3, #2
 8013f60:	4a13      	ldr	r2, [pc, #76]	; (8013fb0 <vTaskSwitchContext+0xb8>)
 8013f62:	4413      	add	r3, r2
 8013f64:	60bb      	str	r3, [r7, #8]
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	685b      	ldr	r3, [r3, #4]
 8013f6a:	685a      	ldr	r2, [r3, #4]
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	605a      	str	r2, [r3, #4]
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	685a      	ldr	r2, [r3, #4]
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	3308      	adds	r3, #8
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	d104      	bne.n	8013f86 <vTaskSwitchContext+0x8e>
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	685b      	ldr	r3, [r3, #4]
 8013f80:	685a      	ldr	r2, [r3, #4]
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	605a      	str	r2, [r3, #4]
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	68db      	ldr	r3, [r3, #12]
 8013f8c:	4a09      	ldr	r2, [pc, #36]	; (8013fb4 <vTaskSwitchContext+0xbc>)
 8013f8e:	6013      	str	r3, [r2, #0]
 8013f90:	4a06      	ldr	r2, [pc, #24]	; (8013fac <vTaskSwitchContext+0xb4>)
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	6013      	str	r3, [r2, #0]
}
 8013f96:	bf00      	nop
 8013f98:	3714      	adds	r7, #20
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa0:	4770      	bx	lr
 8013fa2:	bf00      	nop
 8013fa4:	200565bc 	.word	0x200565bc
 8013fa8:	200565a8 	.word	0x200565a8
 8013fac:	2005659c 	.word	0x2005659c
 8013fb0:	200560c4 	.word	0x200560c4
 8013fb4:	200560c0 	.word	0x200560c0

08013fb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d10c      	bne.n	8013fe2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8013fc8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013fcc:	b672      	cpsid	i
 8013fce:	f383 8811 	msr	BASEPRI, r3
 8013fd2:	f3bf 8f6f 	isb	sy
 8013fd6:	f3bf 8f4f 	dsb	sy
 8013fda:	b662      	cpsie	i
 8013fdc:	60fb      	str	r3, [r7, #12]
}
 8013fde:	bf00      	nop
 8013fe0:	e7fe      	b.n	8013fe0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013fe2:	4b07      	ldr	r3, [pc, #28]	; (8014000 <vTaskPlaceOnEventList+0x48>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	3318      	adds	r3, #24
 8013fe8:	4619      	mov	r1, r3
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f7fe f8cb 	bl	8012186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013ff0:	2101      	movs	r1, #1
 8013ff2:	6838      	ldr	r0, [r7, #0]
 8013ff4:	f000 fb8c 	bl	8014710 <prvAddCurrentTaskToDelayedList>
}
 8013ff8:	bf00      	nop
 8013ffa:	3710      	adds	r7, #16
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	200560c0 	.word	0x200560c0

08014004 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014004:	b580      	push	{r7, lr}
 8014006:	b086      	sub	sp, #24
 8014008:	af00      	add	r7, sp, #0
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d10c      	bne.n	8014030 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8014016:	f04f 0330 	mov.w	r3, #48	; 0x30
 801401a:	b672      	cpsid	i
 801401c:	f383 8811 	msr	BASEPRI, r3
 8014020:	f3bf 8f6f 	isb	sy
 8014024:	f3bf 8f4f 	dsb	sy
 8014028:	b662      	cpsie	i
 801402a:	617b      	str	r3, [r7, #20]
}
 801402c:	bf00      	nop
 801402e:	e7fe      	b.n	801402e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014030:	4b0a      	ldr	r3, [pc, #40]	; (801405c <vTaskPlaceOnEventListRestricted+0x58>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	3318      	adds	r3, #24
 8014036:	4619      	mov	r1, r3
 8014038:	68f8      	ldr	r0, [r7, #12]
 801403a:	f7fe f880 	bl	801213e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d002      	beq.n	801404a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8014044:	f04f 33ff 	mov.w	r3, #4294967295
 8014048:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801404a:	6879      	ldr	r1, [r7, #4]
 801404c:	68b8      	ldr	r0, [r7, #8]
 801404e:	f000 fb5f 	bl	8014710 <prvAddCurrentTaskToDelayedList>
	}
 8014052:	bf00      	nop
 8014054:	3718      	adds	r7, #24
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}
 801405a:	bf00      	nop
 801405c:	200560c0 	.word	0x200560c0

08014060 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b086      	sub	sp, #24
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	68db      	ldr	r3, [r3, #12]
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d10c      	bne.n	8014090 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8014076:	f04f 0330 	mov.w	r3, #48	; 0x30
 801407a:	b672      	cpsid	i
 801407c:	f383 8811 	msr	BASEPRI, r3
 8014080:	f3bf 8f6f 	isb	sy
 8014084:	f3bf 8f4f 	dsb	sy
 8014088:	b662      	cpsie	i
 801408a:	60fb      	str	r3, [r7, #12]
}
 801408c:	bf00      	nop
 801408e:	e7fe      	b.n	801408e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	3318      	adds	r3, #24
 8014094:	4618      	mov	r0, r3
 8014096:	f7fe f8af 	bl	80121f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801409a:	4b1e      	ldr	r3, [pc, #120]	; (8014114 <xTaskRemoveFromEventList+0xb4>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d11d      	bne.n	80140de <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	3304      	adds	r3, #4
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7fe f8a6 	bl	80121f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140b0:	4b19      	ldr	r3, [pc, #100]	; (8014118 <xTaskRemoveFromEventList+0xb8>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d903      	bls.n	80140c0 <xTaskRemoveFromEventList+0x60>
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140bc:	4a16      	ldr	r2, [pc, #88]	; (8014118 <xTaskRemoveFromEventList+0xb8>)
 80140be:	6013      	str	r3, [r2, #0]
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140c4:	4613      	mov	r3, r2
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	4413      	add	r3, r2
 80140ca:	009b      	lsls	r3, r3, #2
 80140cc:	4a13      	ldr	r2, [pc, #76]	; (801411c <xTaskRemoveFromEventList+0xbc>)
 80140ce:	441a      	add	r2, r3
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	3304      	adds	r3, #4
 80140d4:	4619      	mov	r1, r3
 80140d6:	4610      	mov	r0, r2
 80140d8:	f7fe f831 	bl	801213e <vListInsertEnd>
 80140dc:	e005      	b.n	80140ea <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	3318      	adds	r3, #24
 80140e2:	4619      	mov	r1, r3
 80140e4:	480e      	ldr	r0, [pc, #56]	; (8014120 <xTaskRemoveFromEventList+0xc0>)
 80140e6:	f7fe f82a 	bl	801213e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ee:	4b0d      	ldr	r3, [pc, #52]	; (8014124 <xTaskRemoveFromEventList+0xc4>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d905      	bls.n	8014104 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80140f8:	2301      	movs	r3, #1
 80140fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80140fc:	4b0a      	ldr	r3, [pc, #40]	; (8014128 <xTaskRemoveFromEventList+0xc8>)
 80140fe:	2201      	movs	r2, #1
 8014100:	601a      	str	r2, [r3, #0]
 8014102:	e001      	b.n	8014108 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014104:	2300      	movs	r3, #0
 8014106:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014108:	697b      	ldr	r3, [r7, #20]
}
 801410a:	4618      	mov	r0, r3
 801410c:	3718      	adds	r7, #24
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	200565bc 	.word	0x200565bc
 8014118:	2005659c 	.word	0x2005659c
 801411c:	200560c4 	.word	0x200560c4
 8014120:	20056554 	.word	0x20056554
 8014124:	200560c0 	.word	0x200560c0
 8014128:	200565a8 	.word	0x200565a8

0801412c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801412c:	b480      	push	{r7}
 801412e:	b083      	sub	sp, #12
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014134:	4b06      	ldr	r3, [pc, #24]	; (8014150 <vTaskInternalSetTimeOutState+0x24>)
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801413c:	4b05      	ldr	r3, [pc, #20]	; (8014154 <vTaskInternalSetTimeOutState+0x28>)
 801413e:	681a      	ldr	r2, [r3, #0]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	605a      	str	r2, [r3, #4]
}
 8014144:	bf00      	nop
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr
 8014150:	200565ac 	.word	0x200565ac
 8014154:	20056598 	.word	0x20056598

08014158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b088      	sub	sp, #32
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d10c      	bne.n	8014182 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8014168:	f04f 0330 	mov.w	r3, #48	; 0x30
 801416c:	b672      	cpsid	i
 801416e:	f383 8811 	msr	BASEPRI, r3
 8014172:	f3bf 8f6f 	isb	sy
 8014176:	f3bf 8f4f 	dsb	sy
 801417a:	b662      	cpsie	i
 801417c:	613b      	str	r3, [r7, #16]
}
 801417e:	bf00      	nop
 8014180:	e7fe      	b.n	8014180 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d10c      	bne.n	80141a2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8014188:	f04f 0330 	mov.w	r3, #48	; 0x30
 801418c:	b672      	cpsid	i
 801418e:	f383 8811 	msr	BASEPRI, r3
 8014192:	f3bf 8f6f 	isb	sy
 8014196:	f3bf 8f4f 	dsb	sy
 801419a:	b662      	cpsie	i
 801419c:	60fb      	str	r3, [r7, #12]
}
 801419e:	bf00      	nop
 80141a0:	e7fe      	b.n	80141a0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80141a2:	f7fe f963 	bl	801246c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80141a6:	4b1d      	ldr	r3, [pc, #116]	; (801421c <xTaskCheckForTimeOut+0xc4>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	69ba      	ldr	r2, [r7, #24]
 80141b2:	1ad3      	subs	r3, r2, r3
 80141b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141be:	d102      	bne.n	80141c6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80141c0:	2300      	movs	r3, #0
 80141c2:	61fb      	str	r3, [r7, #28]
 80141c4:	e023      	b.n	801420e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681a      	ldr	r2, [r3, #0]
 80141ca:	4b15      	ldr	r3, [pc, #84]	; (8014220 <xTaskCheckForTimeOut+0xc8>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d007      	beq.n	80141e2 <xTaskCheckForTimeOut+0x8a>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	69ba      	ldr	r2, [r7, #24]
 80141d8:	429a      	cmp	r2, r3
 80141da:	d302      	bcc.n	80141e2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80141dc:	2301      	movs	r3, #1
 80141de:	61fb      	str	r3, [r7, #28]
 80141e0:	e015      	b.n	801420e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	697a      	ldr	r2, [r7, #20]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d20b      	bcs.n	8014204 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	681a      	ldr	r2, [r3, #0]
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	1ad2      	subs	r2, r2, r3
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80141f8:	6878      	ldr	r0, [r7, #4]
 80141fa:	f7ff ff97 	bl	801412c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80141fe:	2300      	movs	r3, #0
 8014200:	61fb      	str	r3, [r7, #28]
 8014202:	e004      	b.n	801420e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	2200      	movs	r2, #0
 8014208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801420a:	2301      	movs	r3, #1
 801420c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801420e:	f7fe f961 	bl	80124d4 <vPortExitCritical>

	return xReturn;
 8014212:	69fb      	ldr	r3, [r7, #28]
}
 8014214:	4618      	mov	r0, r3
 8014216:	3720      	adds	r7, #32
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}
 801421c:	20056598 	.word	0x20056598
 8014220:	200565ac 	.word	0x200565ac

08014224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014224:	b480      	push	{r7}
 8014226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014228:	4b03      	ldr	r3, [pc, #12]	; (8014238 <vTaskMissedYield+0x14>)
 801422a:	2201      	movs	r2, #1
 801422c:	601a      	str	r2, [r3, #0]
}
 801422e:	bf00      	nop
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr
 8014238:	200565a8 	.word	0x200565a8

0801423c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014244:	f000 f852 	bl	80142ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014248:	4b06      	ldr	r3, [pc, #24]	; (8014264 <prvIdleTask+0x28>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b01      	cmp	r3, #1
 801424e:	d9f9      	bls.n	8014244 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014250:	4b05      	ldr	r3, [pc, #20]	; (8014268 <prvIdleTask+0x2c>)
 8014252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014256:	601a      	str	r2, [r3, #0]
 8014258:	f3bf 8f4f 	dsb	sy
 801425c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014260:	e7f0      	b.n	8014244 <prvIdleTask+0x8>
 8014262:	bf00      	nop
 8014264:	200560c4 	.word	0x200560c4
 8014268:	e000ed04 	.word	0xe000ed04

0801426c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014272:	2300      	movs	r3, #0
 8014274:	607b      	str	r3, [r7, #4]
 8014276:	e00c      	b.n	8014292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	4613      	mov	r3, r2
 801427c:	009b      	lsls	r3, r3, #2
 801427e:	4413      	add	r3, r2
 8014280:	009b      	lsls	r3, r3, #2
 8014282:	4a12      	ldr	r2, [pc, #72]	; (80142cc <prvInitialiseTaskLists+0x60>)
 8014284:	4413      	add	r3, r2
 8014286:	4618      	mov	r0, r3
 8014288:	f7fd ff2c 	bl	80120e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	3301      	adds	r3, #1
 8014290:	607b      	str	r3, [r7, #4]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	2b37      	cmp	r3, #55	; 0x37
 8014296:	d9ef      	bls.n	8014278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014298:	480d      	ldr	r0, [pc, #52]	; (80142d0 <prvInitialiseTaskLists+0x64>)
 801429a:	f7fd ff23 	bl	80120e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801429e:	480d      	ldr	r0, [pc, #52]	; (80142d4 <prvInitialiseTaskLists+0x68>)
 80142a0:	f7fd ff20 	bl	80120e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80142a4:	480c      	ldr	r0, [pc, #48]	; (80142d8 <prvInitialiseTaskLists+0x6c>)
 80142a6:	f7fd ff1d 	bl	80120e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80142aa:	480c      	ldr	r0, [pc, #48]	; (80142dc <prvInitialiseTaskLists+0x70>)
 80142ac:	f7fd ff1a 	bl	80120e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80142b0:	480b      	ldr	r0, [pc, #44]	; (80142e0 <prvInitialiseTaskLists+0x74>)
 80142b2:	f7fd ff17 	bl	80120e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80142b6:	4b0b      	ldr	r3, [pc, #44]	; (80142e4 <prvInitialiseTaskLists+0x78>)
 80142b8:	4a05      	ldr	r2, [pc, #20]	; (80142d0 <prvInitialiseTaskLists+0x64>)
 80142ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80142bc:	4b0a      	ldr	r3, [pc, #40]	; (80142e8 <prvInitialiseTaskLists+0x7c>)
 80142be:	4a05      	ldr	r2, [pc, #20]	; (80142d4 <prvInitialiseTaskLists+0x68>)
 80142c0:	601a      	str	r2, [r3, #0]
}
 80142c2:	bf00      	nop
 80142c4:	3708      	adds	r7, #8
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	200560c4 	.word	0x200560c4
 80142d0:	20056524 	.word	0x20056524
 80142d4:	20056538 	.word	0x20056538
 80142d8:	20056554 	.word	0x20056554
 80142dc:	20056568 	.word	0x20056568
 80142e0:	20056580 	.word	0x20056580
 80142e4:	2005654c 	.word	0x2005654c
 80142e8:	20056550 	.word	0x20056550

080142ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b082      	sub	sp, #8
 80142f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142f2:	e019      	b.n	8014328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80142f4:	f7fe f8ba 	bl	801246c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142f8:	4b10      	ldr	r3, [pc, #64]	; (801433c <prvCheckTasksWaitingTermination+0x50>)
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	68db      	ldr	r3, [r3, #12]
 80142fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	3304      	adds	r3, #4
 8014304:	4618      	mov	r0, r3
 8014306:	f7fd ff77 	bl	80121f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801430a:	4b0d      	ldr	r3, [pc, #52]	; (8014340 <prvCheckTasksWaitingTermination+0x54>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	3b01      	subs	r3, #1
 8014310:	4a0b      	ldr	r2, [pc, #44]	; (8014340 <prvCheckTasksWaitingTermination+0x54>)
 8014312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014314:	4b0b      	ldr	r3, [pc, #44]	; (8014344 <prvCheckTasksWaitingTermination+0x58>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	3b01      	subs	r3, #1
 801431a:	4a0a      	ldr	r2, [pc, #40]	; (8014344 <prvCheckTasksWaitingTermination+0x58>)
 801431c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801431e:	f7fe f8d9 	bl	80124d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f000 f810 	bl	8014348 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014328:	4b06      	ldr	r3, [pc, #24]	; (8014344 <prvCheckTasksWaitingTermination+0x58>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d1e1      	bne.n	80142f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014330:	bf00      	nop
 8014332:	bf00      	nop
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	20056568 	.word	0x20056568
 8014340:	20056594 	.word	0x20056594
 8014344:	2005657c 	.word	0x2005657c

08014348 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014356:	2b00      	cmp	r3, #0
 8014358:	d108      	bne.n	801436c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801435e:	4618      	mov	r0, r3
 8014360:	f7fd fda6 	bl	8011eb0 <vPortFree>
				vPortFree( pxTCB );
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7fd fda3 	bl	8011eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801436a:	e01a      	b.n	80143a2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014372:	2b01      	cmp	r3, #1
 8014374:	d103      	bne.n	801437e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014376:	6878      	ldr	r0, [r7, #4]
 8014378:	f7fd fd9a 	bl	8011eb0 <vPortFree>
	}
 801437c:	e011      	b.n	80143a2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014384:	2b02      	cmp	r3, #2
 8014386:	d00c      	beq.n	80143a2 <prvDeleteTCB+0x5a>
	__asm volatile
 8014388:	f04f 0330 	mov.w	r3, #48	; 0x30
 801438c:	b672      	cpsid	i
 801438e:	f383 8811 	msr	BASEPRI, r3
 8014392:	f3bf 8f6f 	isb	sy
 8014396:	f3bf 8f4f 	dsb	sy
 801439a:	b662      	cpsie	i
 801439c:	60fb      	str	r3, [r7, #12]
}
 801439e:	bf00      	nop
 80143a0:	e7fe      	b.n	80143a0 <prvDeleteTCB+0x58>
	}
 80143a2:	bf00      	nop
 80143a4:	3710      	adds	r7, #16
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
	...

080143ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143b2:	4b0c      	ldr	r3, [pc, #48]	; (80143e4 <prvResetNextTaskUnblockTime+0x38>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d104      	bne.n	80143c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80143bc:	4b0a      	ldr	r3, [pc, #40]	; (80143e8 <prvResetNextTaskUnblockTime+0x3c>)
 80143be:	f04f 32ff 	mov.w	r2, #4294967295
 80143c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80143c4:	e008      	b.n	80143d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143c6:	4b07      	ldr	r3, [pc, #28]	; (80143e4 <prvResetNextTaskUnblockTime+0x38>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	68db      	ldr	r3, [r3, #12]
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	4a04      	ldr	r2, [pc, #16]	; (80143e8 <prvResetNextTaskUnblockTime+0x3c>)
 80143d6:	6013      	str	r3, [r2, #0]
}
 80143d8:	bf00      	nop
 80143da:	370c      	adds	r7, #12
 80143dc:	46bd      	mov	sp, r7
 80143de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e2:	4770      	bx	lr
 80143e4:	2005654c 	.word	0x2005654c
 80143e8:	200565b4 	.word	0x200565b4

080143ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80143f2:	4b0b      	ldr	r3, [pc, #44]	; (8014420 <xTaskGetSchedulerState+0x34>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d102      	bne.n	8014400 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80143fa:	2301      	movs	r3, #1
 80143fc:	607b      	str	r3, [r7, #4]
 80143fe:	e008      	b.n	8014412 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014400:	4b08      	ldr	r3, [pc, #32]	; (8014424 <xTaskGetSchedulerState+0x38>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d102      	bne.n	801440e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014408:	2302      	movs	r3, #2
 801440a:	607b      	str	r3, [r7, #4]
 801440c:	e001      	b.n	8014412 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801440e:	2300      	movs	r3, #0
 8014410:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014412:	687b      	ldr	r3, [r7, #4]
	}
 8014414:	4618      	mov	r0, r3
 8014416:	370c      	adds	r7, #12
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr
 8014420:	200565a0 	.word	0x200565a0
 8014424:	200565bc 	.word	0x200565bc

08014428 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014428:	b580      	push	{r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014434:	2300      	movs	r3, #0
 8014436:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d051      	beq.n	80144e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014442:	4b2a      	ldr	r3, [pc, #168]	; (80144ec <xTaskPriorityInherit+0xc4>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014448:	429a      	cmp	r2, r3
 801444a:	d241      	bcs.n	80144d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	699b      	ldr	r3, [r3, #24]
 8014450:	2b00      	cmp	r3, #0
 8014452:	db06      	blt.n	8014462 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014454:	4b25      	ldr	r3, [pc, #148]	; (80144ec <xTaskPriorityInherit+0xc4>)
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801445a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	6959      	ldr	r1, [r3, #20]
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801446a:	4613      	mov	r3, r2
 801446c:	009b      	lsls	r3, r3, #2
 801446e:	4413      	add	r3, r2
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	4a1f      	ldr	r2, [pc, #124]	; (80144f0 <xTaskPriorityInherit+0xc8>)
 8014474:	4413      	add	r3, r2
 8014476:	4299      	cmp	r1, r3
 8014478:	d122      	bne.n	80144c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	3304      	adds	r3, #4
 801447e:	4618      	mov	r0, r3
 8014480:	f7fd feba 	bl	80121f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014484:	4b19      	ldr	r3, [pc, #100]	; (80144ec <xTaskPriorityInherit+0xc4>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014492:	4b18      	ldr	r3, [pc, #96]	; (80144f4 <xTaskPriorityInherit+0xcc>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	429a      	cmp	r2, r3
 8014498:	d903      	bls.n	80144a2 <xTaskPriorityInherit+0x7a>
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801449e:	4a15      	ldr	r2, [pc, #84]	; (80144f4 <xTaskPriorityInherit+0xcc>)
 80144a0:	6013      	str	r3, [r2, #0]
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144a6:	4613      	mov	r3, r2
 80144a8:	009b      	lsls	r3, r3, #2
 80144aa:	4413      	add	r3, r2
 80144ac:	009b      	lsls	r3, r3, #2
 80144ae:	4a10      	ldr	r2, [pc, #64]	; (80144f0 <xTaskPriorityInherit+0xc8>)
 80144b0:	441a      	add	r2, r3
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	3304      	adds	r3, #4
 80144b6:	4619      	mov	r1, r3
 80144b8:	4610      	mov	r0, r2
 80144ba:	f7fd fe40 	bl	801213e <vListInsertEnd>
 80144be:	e004      	b.n	80144ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80144c0:	4b0a      	ldr	r3, [pc, #40]	; (80144ec <xTaskPriorityInherit+0xc4>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80144ca:	2301      	movs	r3, #1
 80144cc:	60fb      	str	r3, [r7, #12]
 80144ce:	e008      	b.n	80144e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144d4:	4b05      	ldr	r3, [pc, #20]	; (80144ec <xTaskPriorityInherit+0xc4>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144da:	429a      	cmp	r2, r3
 80144dc:	d201      	bcs.n	80144e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80144de:	2301      	movs	r3, #1
 80144e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80144e2:	68fb      	ldr	r3, [r7, #12]
	}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}
 80144ec:	200560c0 	.word	0x200560c0
 80144f0:	200560c4 	.word	0x200560c4
 80144f4:	2005659c 	.word	0x2005659c

080144f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b086      	sub	sp, #24
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014504:	2300      	movs	r3, #0
 8014506:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d05a      	beq.n	80145c4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801450e:	4b30      	ldr	r3, [pc, #192]	; (80145d0 <xTaskPriorityDisinherit+0xd8>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	693a      	ldr	r2, [r7, #16]
 8014514:	429a      	cmp	r2, r3
 8014516:	d00c      	beq.n	8014532 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8014518:	f04f 0330 	mov.w	r3, #48	; 0x30
 801451c:	b672      	cpsid	i
 801451e:	f383 8811 	msr	BASEPRI, r3
 8014522:	f3bf 8f6f 	isb	sy
 8014526:	f3bf 8f4f 	dsb	sy
 801452a:	b662      	cpsie	i
 801452c:	60fb      	str	r3, [r7, #12]
}
 801452e:	bf00      	nop
 8014530:	e7fe      	b.n	8014530 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014536:	2b00      	cmp	r3, #0
 8014538:	d10c      	bne.n	8014554 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801453a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801453e:	b672      	cpsid	i
 8014540:	f383 8811 	msr	BASEPRI, r3
 8014544:	f3bf 8f6f 	isb	sy
 8014548:	f3bf 8f4f 	dsb	sy
 801454c:	b662      	cpsie	i
 801454e:	60bb      	str	r3, [r7, #8]
}
 8014550:	bf00      	nop
 8014552:	e7fe      	b.n	8014552 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014558:	1e5a      	subs	r2, r3, #1
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014566:	429a      	cmp	r2, r3
 8014568:	d02c      	beq.n	80145c4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801456e:	2b00      	cmp	r3, #0
 8014570:	d128      	bne.n	80145c4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	3304      	adds	r3, #4
 8014576:	4618      	mov	r0, r3
 8014578:	f7fd fe3e 	bl	80121f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014588:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014590:	693b      	ldr	r3, [r7, #16]
 8014592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014594:	4b0f      	ldr	r3, [pc, #60]	; (80145d4 <xTaskPriorityDisinherit+0xdc>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	429a      	cmp	r2, r3
 801459a:	d903      	bls.n	80145a4 <xTaskPriorityDisinherit+0xac>
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a0:	4a0c      	ldr	r2, [pc, #48]	; (80145d4 <xTaskPriorityDisinherit+0xdc>)
 80145a2:	6013      	str	r3, [r2, #0]
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145a8:	4613      	mov	r3, r2
 80145aa:	009b      	lsls	r3, r3, #2
 80145ac:	4413      	add	r3, r2
 80145ae:	009b      	lsls	r3, r3, #2
 80145b0:	4a09      	ldr	r2, [pc, #36]	; (80145d8 <xTaskPriorityDisinherit+0xe0>)
 80145b2:	441a      	add	r2, r3
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	3304      	adds	r3, #4
 80145b8:	4619      	mov	r1, r3
 80145ba:	4610      	mov	r0, r2
 80145bc:	f7fd fdbf 	bl	801213e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80145c0:	2301      	movs	r3, #1
 80145c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80145c4:	697b      	ldr	r3, [r7, #20]
	}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3718      	adds	r7, #24
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	200560c0 	.word	0x200560c0
 80145d4:	2005659c 	.word	0x2005659c
 80145d8:	200560c4 	.word	0x200560c4

080145dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b088      	sub	sp, #32
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80145ea:	2301      	movs	r3, #1
 80145ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d06e      	beq.n	80146d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d10c      	bne.n	8014616 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80145fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014600:	b672      	cpsid	i
 8014602:	f383 8811 	msr	BASEPRI, r3
 8014606:	f3bf 8f6f 	isb	sy
 801460a:	f3bf 8f4f 	dsb	sy
 801460e:	b662      	cpsie	i
 8014610:	60fb      	str	r3, [r7, #12]
}
 8014612:	bf00      	nop
 8014614:	e7fe      	b.n	8014614 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014616:	69bb      	ldr	r3, [r7, #24]
 8014618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801461a:	683a      	ldr	r2, [r7, #0]
 801461c:	429a      	cmp	r2, r3
 801461e:	d902      	bls.n	8014626 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	61fb      	str	r3, [r7, #28]
 8014624:	e002      	b.n	801462c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801462a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801462c:	69bb      	ldr	r3, [r7, #24]
 801462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014630:	69fa      	ldr	r2, [r7, #28]
 8014632:	429a      	cmp	r2, r3
 8014634:	d04d      	beq.n	80146d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014636:	69bb      	ldr	r3, [r7, #24]
 8014638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801463a:	697a      	ldr	r2, [r7, #20]
 801463c:	429a      	cmp	r2, r3
 801463e:	d148      	bne.n	80146d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014640:	4b26      	ldr	r3, [pc, #152]	; (80146dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	69ba      	ldr	r2, [r7, #24]
 8014646:	429a      	cmp	r2, r3
 8014648:	d10c      	bne.n	8014664 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 801464a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801464e:	b672      	cpsid	i
 8014650:	f383 8811 	msr	BASEPRI, r3
 8014654:	f3bf 8f6f 	isb	sy
 8014658:	f3bf 8f4f 	dsb	sy
 801465c:	b662      	cpsie	i
 801465e:	60bb      	str	r3, [r7, #8]
}
 8014660:	bf00      	nop
 8014662:	e7fe      	b.n	8014662 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014664:	69bb      	ldr	r3, [r7, #24]
 8014666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014668:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801466a:	69bb      	ldr	r3, [r7, #24]
 801466c:	69fa      	ldr	r2, [r7, #28]
 801466e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014670:	69bb      	ldr	r3, [r7, #24]
 8014672:	699b      	ldr	r3, [r3, #24]
 8014674:	2b00      	cmp	r3, #0
 8014676:	db04      	blt.n	8014682 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014678:	69fb      	ldr	r3, [r7, #28]
 801467a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014682:	69bb      	ldr	r3, [r7, #24]
 8014684:	6959      	ldr	r1, [r3, #20]
 8014686:	693a      	ldr	r2, [r7, #16]
 8014688:	4613      	mov	r3, r2
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	4413      	add	r3, r2
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	4a13      	ldr	r2, [pc, #76]	; (80146e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014692:	4413      	add	r3, r2
 8014694:	4299      	cmp	r1, r3
 8014696:	d11c      	bne.n	80146d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014698:	69bb      	ldr	r3, [r7, #24]
 801469a:	3304      	adds	r3, #4
 801469c:	4618      	mov	r0, r3
 801469e:	f7fd fdab 	bl	80121f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80146a2:	69bb      	ldr	r3, [r7, #24]
 80146a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146a6:	4b0f      	ldr	r3, [pc, #60]	; (80146e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d903      	bls.n	80146b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80146ae:	69bb      	ldr	r3, [r7, #24]
 80146b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146b2:	4a0c      	ldr	r2, [pc, #48]	; (80146e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80146b4:	6013      	str	r3, [r2, #0]
 80146b6:	69bb      	ldr	r3, [r7, #24]
 80146b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146ba:	4613      	mov	r3, r2
 80146bc:	009b      	lsls	r3, r3, #2
 80146be:	4413      	add	r3, r2
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	4a07      	ldr	r2, [pc, #28]	; (80146e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80146c4:	441a      	add	r2, r3
 80146c6:	69bb      	ldr	r3, [r7, #24]
 80146c8:	3304      	adds	r3, #4
 80146ca:	4619      	mov	r1, r3
 80146cc:	4610      	mov	r0, r2
 80146ce:	f7fd fd36 	bl	801213e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80146d2:	bf00      	nop
 80146d4:	3720      	adds	r7, #32
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
 80146da:	bf00      	nop
 80146dc:	200560c0 	.word	0x200560c0
 80146e0:	200560c4 	.word	0x200560c4
 80146e4:	2005659c 	.word	0x2005659c

080146e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80146e8:	b480      	push	{r7}
 80146ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80146ec:	4b07      	ldr	r3, [pc, #28]	; (801470c <pvTaskIncrementMutexHeldCount+0x24>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d004      	beq.n	80146fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80146f4:	4b05      	ldr	r3, [pc, #20]	; (801470c <pvTaskIncrementMutexHeldCount+0x24>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80146fa:	3201      	adds	r2, #1
 80146fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80146fe:	4b03      	ldr	r3, [pc, #12]	; (801470c <pvTaskIncrementMutexHeldCount+0x24>)
 8014700:	681b      	ldr	r3, [r3, #0]
	}
 8014702:	4618      	mov	r0, r3
 8014704:	46bd      	mov	sp, r7
 8014706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470a:	4770      	bx	lr
 801470c:	200560c0 	.word	0x200560c0

08014710 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801471a:	4b21      	ldr	r3, [pc, #132]	; (80147a0 <prvAddCurrentTaskToDelayedList+0x90>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014720:	4b20      	ldr	r3, [pc, #128]	; (80147a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	3304      	adds	r3, #4
 8014726:	4618      	mov	r0, r3
 8014728:	f7fd fd66 	bl	80121f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014732:	d10a      	bne.n	801474a <prvAddCurrentTaskToDelayedList+0x3a>
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d007      	beq.n	801474a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801473a:	4b1a      	ldr	r3, [pc, #104]	; (80147a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	3304      	adds	r3, #4
 8014740:	4619      	mov	r1, r3
 8014742:	4819      	ldr	r0, [pc, #100]	; (80147a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8014744:	f7fd fcfb 	bl	801213e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014748:	e026      	b.n	8014798 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801474a:	68fa      	ldr	r2, [r7, #12]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	4413      	add	r3, r2
 8014750:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014752:	4b14      	ldr	r3, [pc, #80]	; (80147a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	68ba      	ldr	r2, [r7, #8]
 8014758:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801475a:	68ba      	ldr	r2, [r7, #8]
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	429a      	cmp	r2, r3
 8014760:	d209      	bcs.n	8014776 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014762:	4b12      	ldr	r3, [pc, #72]	; (80147ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8014764:	681a      	ldr	r2, [r3, #0]
 8014766:	4b0f      	ldr	r3, [pc, #60]	; (80147a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	3304      	adds	r3, #4
 801476c:	4619      	mov	r1, r3
 801476e:	4610      	mov	r0, r2
 8014770:	f7fd fd09 	bl	8012186 <vListInsert>
}
 8014774:	e010      	b.n	8014798 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014776:	4b0e      	ldr	r3, [pc, #56]	; (80147b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	4b0a      	ldr	r3, [pc, #40]	; (80147a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	3304      	adds	r3, #4
 8014780:	4619      	mov	r1, r3
 8014782:	4610      	mov	r0, r2
 8014784:	f7fd fcff 	bl	8012186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014788:	4b0a      	ldr	r3, [pc, #40]	; (80147b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	68ba      	ldr	r2, [r7, #8]
 801478e:	429a      	cmp	r2, r3
 8014790:	d202      	bcs.n	8014798 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014792:	4a08      	ldr	r2, [pc, #32]	; (80147b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	6013      	str	r3, [r2, #0]
}
 8014798:	bf00      	nop
 801479a:	3710      	adds	r7, #16
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	20056598 	.word	0x20056598
 80147a4:	200560c0 	.word	0x200560c0
 80147a8:	20056580 	.word	0x20056580
 80147ac:	20056550 	.word	0x20056550
 80147b0:	2005654c 	.word	0x2005654c
 80147b4:	200565b4 	.word	0x200565b4

080147b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b08a      	sub	sp, #40	; 0x28
 80147bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80147be:	2300      	movs	r3, #0
 80147c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80147c2:	f000 fb15 	bl	8014df0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80147c6:	4b1d      	ldr	r3, [pc, #116]	; (801483c <xTimerCreateTimerTask+0x84>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d021      	beq.n	8014812 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80147ce:	2300      	movs	r3, #0
 80147d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80147d2:	2300      	movs	r3, #0
 80147d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80147d6:	1d3a      	adds	r2, r7, #4
 80147d8:	f107 0108 	add.w	r1, r7, #8
 80147dc:	f107 030c 	add.w	r3, r7, #12
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fd fa81 	bl	8011ce8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80147e6:	6879      	ldr	r1, [r7, #4]
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	68fa      	ldr	r2, [r7, #12]
 80147ec:	9202      	str	r2, [sp, #8]
 80147ee:	9301      	str	r3, [sp, #4]
 80147f0:	2302      	movs	r3, #2
 80147f2:	9300      	str	r3, [sp, #0]
 80147f4:	2300      	movs	r3, #0
 80147f6:	460a      	mov	r2, r1
 80147f8:	4911      	ldr	r1, [pc, #68]	; (8014840 <xTimerCreateTimerTask+0x88>)
 80147fa:	4812      	ldr	r0, [pc, #72]	; (8014844 <xTimerCreateTimerTask+0x8c>)
 80147fc:	f7fe ffb8 	bl	8013770 <xTaskCreateStatic>
 8014800:	4603      	mov	r3, r0
 8014802:	4a11      	ldr	r2, [pc, #68]	; (8014848 <xTimerCreateTimerTask+0x90>)
 8014804:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014806:	4b10      	ldr	r3, [pc, #64]	; (8014848 <xTimerCreateTimerTask+0x90>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d001      	beq.n	8014812 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801480e:	2301      	movs	r3, #1
 8014810:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d10c      	bne.n	8014832 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8014818:	f04f 0330 	mov.w	r3, #48	; 0x30
 801481c:	b672      	cpsid	i
 801481e:	f383 8811 	msr	BASEPRI, r3
 8014822:	f3bf 8f6f 	isb	sy
 8014826:	f3bf 8f4f 	dsb	sy
 801482a:	b662      	cpsie	i
 801482c:	613b      	str	r3, [r7, #16]
}
 801482e:	bf00      	nop
 8014830:	e7fe      	b.n	8014830 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8014832:	697b      	ldr	r3, [r7, #20]
}
 8014834:	4618      	mov	r0, r3
 8014836:	3718      	adds	r7, #24
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}
 801483c:	200565f0 	.word	0x200565f0
 8014840:	0802b3f4 	.word	0x0802b3f4
 8014844:	08014989 	.word	0x08014989
 8014848:	200565f4 	.word	0x200565f4

0801484c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b08a      	sub	sp, #40	; 0x28
 8014850:	af00      	add	r7, sp, #0
 8014852:	60f8      	str	r0, [r7, #12]
 8014854:	60b9      	str	r1, [r7, #8]
 8014856:	607a      	str	r2, [r7, #4]
 8014858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801485a:	2300      	movs	r3, #0
 801485c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d10c      	bne.n	801487e <xTimerGenericCommand+0x32>
	__asm volatile
 8014864:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014868:	b672      	cpsid	i
 801486a:	f383 8811 	msr	BASEPRI, r3
 801486e:	f3bf 8f6f 	isb	sy
 8014872:	f3bf 8f4f 	dsb	sy
 8014876:	b662      	cpsie	i
 8014878:	623b      	str	r3, [r7, #32]
}
 801487a:	bf00      	nop
 801487c:	e7fe      	b.n	801487c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801487e:	4b1a      	ldr	r3, [pc, #104]	; (80148e8 <xTimerGenericCommand+0x9c>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d02a      	beq.n	80148dc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	2b05      	cmp	r3, #5
 8014896:	dc18      	bgt.n	80148ca <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014898:	f7ff fda8 	bl	80143ec <xTaskGetSchedulerState>
 801489c:	4603      	mov	r3, r0
 801489e:	2b02      	cmp	r3, #2
 80148a0:	d109      	bne.n	80148b6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80148a2:	4b11      	ldr	r3, [pc, #68]	; (80148e8 <xTimerGenericCommand+0x9c>)
 80148a4:	6818      	ldr	r0, [r3, #0]
 80148a6:	f107 0110 	add.w	r1, r7, #16
 80148aa:	2300      	movs	r3, #0
 80148ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148ae:	f7fe f8cd 	bl	8012a4c <xQueueGenericSend>
 80148b2:	6278      	str	r0, [r7, #36]	; 0x24
 80148b4:	e012      	b.n	80148dc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80148b6:	4b0c      	ldr	r3, [pc, #48]	; (80148e8 <xTimerGenericCommand+0x9c>)
 80148b8:	6818      	ldr	r0, [r3, #0]
 80148ba:	f107 0110 	add.w	r1, r7, #16
 80148be:	2300      	movs	r3, #0
 80148c0:	2200      	movs	r2, #0
 80148c2:	f7fe f8c3 	bl	8012a4c <xQueueGenericSend>
 80148c6:	6278      	str	r0, [r7, #36]	; 0x24
 80148c8:	e008      	b.n	80148dc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80148ca:	4b07      	ldr	r3, [pc, #28]	; (80148e8 <xTimerGenericCommand+0x9c>)
 80148cc:	6818      	ldr	r0, [r3, #0]
 80148ce:	f107 0110 	add.w	r1, r7, #16
 80148d2:	2300      	movs	r3, #0
 80148d4:	683a      	ldr	r2, [r7, #0]
 80148d6:	f7fe f9bf 	bl	8012c58 <xQueueGenericSendFromISR>
 80148da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80148dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80148de:	4618      	mov	r0, r3
 80148e0:	3728      	adds	r7, #40	; 0x28
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}
 80148e6:	bf00      	nop
 80148e8:	200565f0 	.word	0x200565f0

080148ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b088      	sub	sp, #32
 80148f0:	af02      	add	r7, sp, #8
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148f6:	4b23      	ldr	r3, [pc, #140]	; (8014984 <prvProcessExpiredTimer+0x98>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	68db      	ldr	r3, [r3, #12]
 80148fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	3304      	adds	r3, #4
 8014904:	4618      	mov	r0, r3
 8014906:	f7fd fc77 	bl	80121f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014910:	f003 0304 	and.w	r3, r3, #4
 8014914:	2b00      	cmp	r3, #0
 8014916:	d024      	beq.n	8014962 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	699a      	ldr	r2, [r3, #24]
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	18d1      	adds	r1, r2, r3
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	683a      	ldr	r2, [r7, #0]
 8014924:	6978      	ldr	r0, [r7, #20]
 8014926:	f000 f8d3 	bl	8014ad0 <prvInsertTimerInActiveList>
 801492a:	4603      	mov	r3, r0
 801492c:	2b00      	cmp	r3, #0
 801492e:	d021      	beq.n	8014974 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014930:	2300      	movs	r3, #0
 8014932:	9300      	str	r3, [sp, #0]
 8014934:	2300      	movs	r3, #0
 8014936:	687a      	ldr	r2, [r7, #4]
 8014938:	2100      	movs	r1, #0
 801493a:	6978      	ldr	r0, [r7, #20]
 801493c:	f7ff ff86 	bl	801484c <xTimerGenericCommand>
 8014940:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d115      	bne.n	8014974 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8014948:	f04f 0330 	mov.w	r3, #48	; 0x30
 801494c:	b672      	cpsid	i
 801494e:	f383 8811 	msr	BASEPRI, r3
 8014952:	f3bf 8f6f 	isb	sy
 8014956:	f3bf 8f4f 	dsb	sy
 801495a:	b662      	cpsie	i
 801495c:	60fb      	str	r3, [r7, #12]
}
 801495e:	bf00      	nop
 8014960:	e7fe      	b.n	8014960 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014962:	697b      	ldr	r3, [r7, #20]
 8014964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014968:	f023 0301 	bic.w	r3, r3, #1
 801496c:	b2da      	uxtb	r2, r3
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	6a1b      	ldr	r3, [r3, #32]
 8014978:	6978      	ldr	r0, [r7, #20]
 801497a:	4798      	blx	r3
}
 801497c:	bf00      	nop
 801497e:	3718      	adds	r7, #24
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	200565e8 	.word	0x200565e8

08014988 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b084      	sub	sp, #16
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014990:	f107 0308 	add.w	r3, r7, #8
 8014994:	4618      	mov	r0, r3
 8014996:	f000 f857 	bl	8014a48 <prvGetNextExpireTime>
 801499a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	4619      	mov	r1, r3
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f000 f803 	bl	80149ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80149a6:	f000 f8d5 	bl	8014b54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80149aa:	e7f1      	b.n	8014990 <prvTimerTask+0x8>

080149ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80149b6:	f7ff f925 	bl	8013c04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80149ba:	f107 0308 	add.w	r3, r7, #8
 80149be:	4618      	mov	r0, r3
 80149c0:	f000 f866 	bl	8014a90 <prvSampleTimeNow>
 80149c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80149c6:	68bb      	ldr	r3, [r7, #8]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d130      	bne.n	8014a2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d10a      	bne.n	80149e8 <prvProcessTimerOrBlockTask+0x3c>
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d806      	bhi.n	80149e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80149da:	f7ff f921 	bl	8013c20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80149de:	68f9      	ldr	r1, [r7, #12]
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f7ff ff83 	bl	80148ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80149e6:	e024      	b.n	8014a32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d008      	beq.n	8014a00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80149ee:	4b13      	ldr	r3, [pc, #76]	; (8014a3c <prvProcessTimerOrBlockTask+0x90>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d101      	bne.n	80149fc <prvProcessTimerOrBlockTask+0x50>
 80149f8:	2301      	movs	r3, #1
 80149fa:	e000      	b.n	80149fe <prvProcessTimerOrBlockTask+0x52>
 80149fc:	2300      	movs	r3, #0
 80149fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014a00:	4b0f      	ldr	r3, [pc, #60]	; (8014a40 <prvProcessTimerOrBlockTask+0x94>)
 8014a02:	6818      	ldr	r0, [r3, #0]
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	1ad3      	subs	r3, r2, r3
 8014a0a:	683a      	ldr	r2, [r7, #0]
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	f7fe fe7b 	bl	8013708 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014a12:	f7ff f905 	bl	8013c20 <xTaskResumeAll>
 8014a16:	4603      	mov	r3, r0
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d10a      	bne.n	8014a32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014a1c:	4b09      	ldr	r3, [pc, #36]	; (8014a44 <prvProcessTimerOrBlockTask+0x98>)
 8014a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a22:	601a      	str	r2, [r3, #0]
 8014a24:	f3bf 8f4f 	dsb	sy
 8014a28:	f3bf 8f6f 	isb	sy
}
 8014a2c:	e001      	b.n	8014a32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014a2e:	f7ff f8f7 	bl	8013c20 <xTaskResumeAll>
}
 8014a32:	bf00      	nop
 8014a34:	3710      	adds	r7, #16
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}
 8014a3a:	bf00      	nop
 8014a3c:	200565ec 	.word	0x200565ec
 8014a40:	200565f0 	.word	0x200565f0
 8014a44:	e000ed04 	.word	0xe000ed04

08014a48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014a48:	b480      	push	{r7}
 8014a4a:	b085      	sub	sp, #20
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014a50:	4b0e      	ldr	r3, [pc, #56]	; (8014a8c <prvGetNextExpireTime+0x44>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d101      	bne.n	8014a5e <prvGetNextExpireTime+0x16>
 8014a5a:	2201      	movs	r2, #1
 8014a5c:	e000      	b.n	8014a60 <prvGetNextExpireTime+0x18>
 8014a5e:	2200      	movs	r2, #0
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d105      	bne.n	8014a78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014a6c:	4b07      	ldr	r3, [pc, #28]	; (8014a8c <prvGetNextExpireTime+0x44>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	60fb      	str	r3, [r7, #12]
 8014a76:	e001      	b.n	8014a7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3714      	adds	r7, #20
 8014a82:	46bd      	mov	sp, r7
 8014a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a88:	4770      	bx	lr
 8014a8a:	bf00      	nop
 8014a8c:	200565e8 	.word	0x200565e8

08014a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b084      	sub	sp, #16
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014a98:	f7ff f962 	bl	8013d60 <xTaskGetTickCount>
 8014a9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014a9e:	4b0b      	ldr	r3, [pc, #44]	; (8014acc <prvSampleTimeNow+0x3c>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	68fa      	ldr	r2, [r7, #12]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d205      	bcs.n	8014ab4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014aa8:	f000 f93c 	bl	8014d24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2201      	movs	r2, #1
 8014ab0:	601a      	str	r2, [r3, #0]
 8014ab2:	e002      	b.n	8014aba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014aba:	4a04      	ldr	r2, [pc, #16]	; (8014acc <prvSampleTimeNow+0x3c>)
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
}
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	3710      	adds	r7, #16
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	bf00      	nop
 8014acc:	200565f8 	.word	0x200565f8

08014ad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b086      	sub	sp, #24
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	607a      	str	r2, [r7, #4]
 8014adc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	68ba      	ldr	r2, [r7, #8]
 8014ae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	68fa      	ldr	r2, [r7, #12]
 8014aec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014aee:	68ba      	ldr	r2, [r7, #8]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	429a      	cmp	r2, r3
 8014af4:	d812      	bhi.n	8014b1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	1ad2      	subs	r2, r2, r3
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	699b      	ldr	r3, [r3, #24]
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d302      	bcc.n	8014b0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014b04:	2301      	movs	r3, #1
 8014b06:	617b      	str	r3, [r7, #20]
 8014b08:	e01b      	b.n	8014b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014b0a:	4b10      	ldr	r3, [pc, #64]	; (8014b4c <prvInsertTimerInActiveList+0x7c>)
 8014b0c:	681a      	ldr	r2, [r3, #0]
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	3304      	adds	r3, #4
 8014b12:	4619      	mov	r1, r3
 8014b14:	4610      	mov	r0, r2
 8014b16:	f7fd fb36 	bl	8012186 <vListInsert>
 8014b1a:	e012      	b.n	8014b42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d206      	bcs.n	8014b32 <prvInsertTimerInActiveList+0x62>
 8014b24:	68ba      	ldr	r2, [r7, #8]
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	d302      	bcc.n	8014b32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	617b      	str	r3, [r7, #20]
 8014b30:	e007      	b.n	8014b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014b32:	4b07      	ldr	r3, [pc, #28]	; (8014b50 <prvInsertTimerInActiveList+0x80>)
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	3304      	adds	r3, #4
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	4610      	mov	r0, r2
 8014b3e:	f7fd fb22 	bl	8012186 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014b42:	697b      	ldr	r3, [r7, #20]
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	3718      	adds	r7, #24
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}
 8014b4c:	200565ec 	.word	0x200565ec
 8014b50:	200565e8 	.word	0x200565e8

08014b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b08e      	sub	sp, #56	; 0x38
 8014b58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014b5a:	e0d0      	b.n	8014cfe <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	da1a      	bge.n	8014b98 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014b62:	1d3b      	adds	r3, r7, #4
 8014b64:	3304      	adds	r3, #4
 8014b66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d10c      	bne.n	8014b88 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8014b6e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b72:	b672      	cpsid	i
 8014b74:	f383 8811 	msr	BASEPRI, r3
 8014b78:	f3bf 8f6f 	isb	sy
 8014b7c:	f3bf 8f4f 	dsb	sy
 8014b80:	b662      	cpsie	i
 8014b82:	61fb      	str	r3, [r7, #28]
}
 8014b84:	bf00      	nop
 8014b86:	e7fe      	b.n	8014b86 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b8e:	6850      	ldr	r0, [r2, #4]
 8014b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b92:	6892      	ldr	r2, [r2, #8]
 8014b94:	4611      	mov	r1, r2
 8014b96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	f2c0 80ae 	blt.w	8014cfc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba6:	695b      	ldr	r3, [r3, #20]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d004      	beq.n	8014bb6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bae:	3304      	adds	r3, #4
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7fd fb21 	bl	80121f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014bb6:	463b      	mov	r3, r7
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7ff ff69 	bl	8014a90 <prvSampleTimeNow>
 8014bbe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2b09      	cmp	r3, #9
 8014bc4:	f200 809b 	bhi.w	8014cfe <prvProcessReceivedCommands+0x1aa>
 8014bc8:	a201      	add	r2, pc, #4	; (adr r2, 8014bd0 <prvProcessReceivedCommands+0x7c>)
 8014bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bce:	bf00      	nop
 8014bd0:	08014bf9 	.word	0x08014bf9
 8014bd4:	08014bf9 	.word	0x08014bf9
 8014bd8:	08014bf9 	.word	0x08014bf9
 8014bdc:	08014c71 	.word	0x08014c71
 8014be0:	08014c85 	.word	0x08014c85
 8014be4:	08014cd3 	.word	0x08014cd3
 8014be8:	08014bf9 	.word	0x08014bf9
 8014bec:	08014bf9 	.word	0x08014bf9
 8014bf0:	08014c71 	.word	0x08014c71
 8014bf4:	08014c85 	.word	0x08014c85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bfe:	f043 0301 	orr.w	r3, r3, #1
 8014c02:	b2da      	uxtb	r2, r3
 8014c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014c0a:	68ba      	ldr	r2, [r7, #8]
 8014c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c0e:	699b      	ldr	r3, [r3, #24]
 8014c10:	18d1      	adds	r1, r2, r3
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c18:	f7ff ff5a 	bl	8014ad0 <prvInsertTimerInActiveList>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d06d      	beq.n	8014cfe <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c24:	6a1b      	ldr	r3, [r3, #32]
 8014c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c30:	f003 0304 	and.w	r3, r3, #4
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d062      	beq.n	8014cfe <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014c38:	68ba      	ldr	r2, [r7, #8]
 8014c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c3c:	699b      	ldr	r3, [r3, #24]
 8014c3e:	441a      	add	r2, r3
 8014c40:	2300      	movs	r3, #0
 8014c42:	9300      	str	r3, [sp, #0]
 8014c44:	2300      	movs	r3, #0
 8014c46:	2100      	movs	r1, #0
 8014c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c4a:	f7ff fdff 	bl	801484c <xTimerGenericCommand>
 8014c4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014c50:	6a3b      	ldr	r3, [r7, #32]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d153      	bne.n	8014cfe <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8014c56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014c5a:	b672      	cpsid	i
 8014c5c:	f383 8811 	msr	BASEPRI, r3
 8014c60:	f3bf 8f6f 	isb	sy
 8014c64:	f3bf 8f4f 	dsb	sy
 8014c68:	b662      	cpsie	i
 8014c6a:	61bb      	str	r3, [r7, #24]
}
 8014c6c:	bf00      	nop
 8014c6e:	e7fe      	b.n	8014c6e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c76:	f023 0301 	bic.w	r3, r3, #1
 8014c7a:	b2da      	uxtb	r2, r3
 8014c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014c82:	e03c      	b.n	8014cfe <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c8a:	f043 0301 	orr.w	r3, r3, #1
 8014c8e:	b2da      	uxtb	r2, r3
 8014c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014c96:	68ba      	ldr	r2, [r7, #8]
 8014c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c9e:	699b      	ldr	r3, [r3, #24]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d10c      	bne.n	8014cbe <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8014ca4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014ca8:	b672      	cpsid	i
 8014caa:	f383 8811 	msr	BASEPRI, r3
 8014cae:	f3bf 8f6f 	isb	sy
 8014cb2:	f3bf 8f4f 	dsb	sy
 8014cb6:	b662      	cpsie	i
 8014cb8:	617b      	str	r3, [r7, #20]
}
 8014cba:	bf00      	nop
 8014cbc:	e7fe      	b.n	8014cbc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc0:	699a      	ldr	r2, [r3, #24]
 8014cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc4:	18d1      	adds	r1, r2, r3
 8014cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ccc:	f7ff ff00 	bl	8014ad0 <prvInsertTimerInActiveList>
					break;
 8014cd0:	e015      	b.n	8014cfe <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014cd8:	f003 0302 	and.w	r3, r3, #2
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d103      	bne.n	8014ce8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8014ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ce2:	f7fd f8e5 	bl	8011eb0 <vPortFree>
 8014ce6:	e00a      	b.n	8014cfe <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014cee:	f023 0301 	bic.w	r3, r3, #1
 8014cf2:	b2da      	uxtb	r2, r3
 8014cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014cfa:	e000      	b.n	8014cfe <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014cfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014cfe:	4b08      	ldr	r3, [pc, #32]	; (8014d20 <prvProcessReceivedCommands+0x1cc>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	1d39      	adds	r1, r7, #4
 8014d04:	2200      	movs	r2, #0
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fe f8dc 	bl	8012ec4 <xQueueReceive>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	f47f af24 	bne.w	8014b5c <prvProcessReceivedCommands+0x8>
	}
}
 8014d14:	bf00      	nop
 8014d16:	bf00      	nop
 8014d18:	3730      	adds	r7, #48	; 0x30
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	200565f0 	.word	0x200565f0

08014d24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b088      	sub	sp, #32
 8014d28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014d2a:	e04a      	b.n	8014dc2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014d2c:	4b2e      	ldr	r3, [pc, #184]	; (8014de8 <prvSwitchTimerLists+0xc4>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	68db      	ldr	r3, [r3, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d36:	4b2c      	ldr	r3, [pc, #176]	; (8014de8 <prvSwitchTimerLists+0xc4>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	68db      	ldr	r3, [r3, #12]
 8014d3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	3304      	adds	r3, #4
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7fd fa57 	bl	80121f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	6a1b      	ldr	r3, [r3, #32]
 8014d4e:	68f8      	ldr	r0, [r7, #12]
 8014d50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d58:	f003 0304 	and.w	r3, r3, #4
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d030      	beq.n	8014dc2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	699b      	ldr	r3, [r3, #24]
 8014d64:	693a      	ldr	r2, [r7, #16]
 8014d66:	4413      	add	r3, r2
 8014d68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014d6a:	68ba      	ldr	r2, [r7, #8]
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	429a      	cmp	r2, r3
 8014d70:	d90e      	bls.n	8014d90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	68ba      	ldr	r2, [r7, #8]
 8014d76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	68fa      	ldr	r2, [r7, #12]
 8014d7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014d7e:	4b1a      	ldr	r3, [pc, #104]	; (8014de8 <prvSwitchTimerLists+0xc4>)
 8014d80:	681a      	ldr	r2, [r3, #0]
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	3304      	adds	r3, #4
 8014d86:	4619      	mov	r1, r3
 8014d88:	4610      	mov	r0, r2
 8014d8a:	f7fd f9fc 	bl	8012186 <vListInsert>
 8014d8e:	e018      	b.n	8014dc2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014d90:	2300      	movs	r3, #0
 8014d92:	9300      	str	r3, [sp, #0]
 8014d94:	2300      	movs	r3, #0
 8014d96:	693a      	ldr	r2, [r7, #16]
 8014d98:	2100      	movs	r1, #0
 8014d9a:	68f8      	ldr	r0, [r7, #12]
 8014d9c:	f7ff fd56 	bl	801484c <xTimerGenericCommand>
 8014da0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d10c      	bne.n	8014dc2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8014da8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014dac:	b672      	cpsid	i
 8014dae:	f383 8811 	msr	BASEPRI, r3
 8014db2:	f3bf 8f6f 	isb	sy
 8014db6:	f3bf 8f4f 	dsb	sy
 8014dba:	b662      	cpsie	i
 8014dbc:	603b      	str	r3, [r7, #0]
}
 8014dbe:	bf00      	nop
 8014dc0:	e7fe      	b.n	8014dc0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014dc2:	4b09      	ldr	r3, [pc, #36]	; (8014de8 <prvSwitchTimerLists+0xc4>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d1af      	bne.n	8014d2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014dcc:	4b06      	ldr	r3, [pc, #24]	; (8014de8 <prvSwitchTimerLists+0xc4>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014dd2:	4b06      	ldr	r3, [pc, #24]	; (8014dec <prvSwitchTimerLists+0xc8>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	4a04      	ldr	r2, [pc, #16]	; (8014de8 <prvSwitchTimerLists+0xc4>)
 8014dd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014dda:	4a04      	ldr	r2, [pc, #16]	; (8014dec <prvSwitchTimerLists+0xc8>)
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	6013      	str	r3, [r2, #0]
}
 8014de0:	bf00      	nop
 8014de2:	3718      	adds	r7, #24
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}
 8014de8:	200565e8 	.word	0x200565e8
 8014dec:	200565ec 	.word	0x200565ec

08014df0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014df6:	f7fd fb39 	bl	801246c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014dfa:	4b15      	ldr	r3, [pc, #84]	; (8014e50 <prvCheckForValidListAndQueue+0x60>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d120      	bne.n	8014e44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014e02:	4814      	ldr	r0, [pc, #80]	; (8014e54 <prvCheckForValidListAndQueue+0x64>)
 8014e04:	f7fd f96e 	bl	80120e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014e08:	4813      	ldr	r0, [pc, #76]	; (8014e58 <prvCheckForValidListAndQueue+0x68>)
 8014e0a:	f7fd f96b 	bl	80120e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014e0e:	4b13      	ldr	r3, [pc, #76]	; (8014e5c <prvCheckForValidListAndQueue+0x6c>)
 8014e10:	4a10      	ldr	r2, [pc, #64]	; (8014e54 <prvCheckForValidListAndQueue+0x64>)
 8014e12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014e14:	4b12      	ldr	r3, [pc, #72]	; (8014e60 <prvCheckForValidListAndQueue+0x70>)
 8014e16:	4a10      	ldr	r2, [pc, #64]	; (8014e58 <prvCheckForValidListAndQueue+0x68>)
 8014e18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	9300      	str	r3, [sp, #0]
 8014e1e:	4b11      	ldr	r3, [pc, #68]	; (8014e64 <prvCheckForValidListAndQueue+0x74>)
 8014e20:	4a11      	ldr	r2, [pc, #68]	; (8014e68 <prvCheckForValidListAndQueue+0x78>)
 8014e22:	2110      	movs	r1, #16
 8014e24:	200a      	movs	r0, #10
 8014e26:	f7fd fcb7 	bl	8012798 <xQueueGenericCreateStatic>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	4a08      	ldr	r2, [pc, #32]	; (8014e50 <prvCheckForValidListAndQueue+0x60>)
 8014e2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014e30:	4b07      	ldr	r3, [pc, #28]	; (8014e50 <prvCheckForValidListAndQueue+0x60>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d005      	beq.n	8014e44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014e38:	4b05      	ldr	r3, [pc, #20]	; (8014e50 <prvCheckForValidListAndQueue+0x60>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	490b      	ldr	r1, [pc, #44]	; (8014e6c <prvCheckForValidListAndQueue+0x7c>)
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f7fe fc0e 	bl	8013660 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014e44:	f7fd fb46 	bl	80124d4 <vPortExitCritical>
}
 8014e48:	bf00      	nop
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	200565f0 	.word	0x200565f0
 8014e54:	200565c0 	.word	0x200565c0
 8014e58:	200565d4 	.word	0x200565d4
 8014e5c:	200565e8 	.word	0x200565e8
 8014e60:	200565ec 	.word	0x200565ec
 8014e64:	2005669c 	.word	0x2005669c
 8014e68:	200565fc 	.word	0x200565fc
 8014e6c:	0802b3fc 	.word	0x0802b3fc

08014e70 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014e70:	8880      	ldrh	r0, [r0, #4]
 8014e72:	4770      	bx	lr

08014e74 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014e74:	2300      	movs	r3, #0
 8014e76:	8083      	strh	r3, [r0, #4]
 8014e78:	4770      	bx	lr
	...

08014e7c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e7e:	6803      	ldr	r3, [r0, #0]
 8014e80:	460e      	mov	r6, r1
 8014e82:	2100      	movs	r1, #0
 8014e84:	4605      	mov	r5, r0
 8014e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e88:	4798      	blx	r3
 8014e8a:	4604      	mov	r4, r0
 8014e8c:	682b      	ldr	r3, [r5, #0]
 8014e8e:	4628      	mov	r0, r5
 8014e90:	1b34      	subs	r4, r6, r4
 8014e92:	6a1b      	ldr	r3, [r3, #32]
 8014e94:	b2a4      	uxth	r4, r4
 8014e96:	4798      	blx	r3
 8014e98:	88ab      	ldrh	r3, [r5, #4]
 8014e9a:	fbb4 f4f0 	udiv	r4, r4, r0
 8014e9e:	42a3      	cmp	r3, r4
 8014ea0:	d805      	bhi.n	8014eae <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8014ea2:	4b0e      	ldr	r3, [pc, #56]	; (8014edc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014ea4:	211e      	movs	r1, #30
 8014ea6:	4a0e      	ldr	r2, [pc, #56]	; (8014ee0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014ea8:	480e      	ldr	r0, [pc, #56]	; (8014ee4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8014eaa:	f011 f899 	bl	8025fe0 <__assert_func>
 8014eae:	682b      	ldr	r3, [r5, #0]
 8014eb0:	2100      	movs	r1, #0
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eb6:	4798      	blx	r3
 8014eb8:	682b      	ldr	r3, [r5, #0]
 8014eba:	4607      	mov	r7, r0
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	6a1b      	ldr	r3, [r3, #32]
 8014ec0:	4798      	blx	r3
 8014ec2:	1bf3      	subs	r3, r6, r7
 8014ec4:	b29b      	uxth	r3, r3
 8014ec6:	fbb3 f2f0 	udiv	r2, r3, r0
 8014eca:	fb02 3010 	mls	r0, r2, r0, r3
 8014ece:	b118      	cbz	r0, 8014ed8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8014ed0:	4b05      	ldr	r3, [pc, #20]	; (8014ee8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8014ed2:	211f      	movs	r1, #31
 8014ed4:	4a02      	ldr	r2, [pc, #8]	; (8014ee0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014ed6:	e7e7      	b.n	8014ea8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014ed8:	4620      	mov	r0, r4
 8014eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014edc:	0802be44 	.word	0x0802be44
 8014ee0:	0802bfb2 	.word	0x0802bfb2
 8014ee4:	0802be59 	.word	0x0802be59
 8014ee8:	0802be87 	.word	0x0802be87

08014eec <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014eec:	b538      	push	{r3, r4, r5, lr}
 8014eee:	6803      	ldr	r3, [r0, #0]
 8014ef0:	460d      	mov	r5, r1
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	6a1b      	ldr	r3, [r3, #32]
 8014ef6:	4798      	blx	r3
 8014ef8:	4285      	cmp	r5, r0
 8014efa:	d905      	bls.n	8014f08 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014efc:	4b0c      	ldr	r3, [pc, #48]	; (8014f30 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8014efe:	2130      	movs	r1, #48	; 0x30
 8014f00:	4a0c      	ldr	r2, [pc, #48]	; (8014f34 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014f02:	480d      	ldr	r0, [pc, #52]	; (8014f38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014f04:	f011 f86c 	bl	8025fe0 <__assert_func>
 8014f08:	6823      	ldr	r3, [r4, #0]
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	88a5      	ldrh	r5, [r4, #4]
 8014f0e:	69db      	ldr	r3, [r3, #28]
 8014f10:	4798      	blx	r3
 8014f12:	4285      	cmp	r5, r0
 8014f14:	d303      	bcc.n	8014f1e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8014f16:	4b09      	ldr	r3, [pc, #36]	; (8014f3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014f18:	2131      	movs	r1, #49	; 0x31
 8014f1a:	4a06      	ldr	r2, [pc, #24]	; (8014f34 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014f1c:	e7f1      	b.n	8014f02 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8014f1e:	6823      	ldr	r3, [r4, #0]
 8014f20:	4620      	mov	r0, r4
 8014f22:	88a1      	ldrh	r1, [r4, #4]
 8014f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f26:	4798      	blx	r3
 8014f28:	88a3      	ldrh	r3, [r4, #4]
 8014f2a:	3301      	adds	r3, #1
 8014f2c:	80a3      	strh	r3, [r4, #4]
 8014f2e:	bd38      	pop	{r3, r4, r5, pc}
 8014f30:	0802bf01 	.word	0x0802bf01
 8014f34:	0802bff5 	.word	0x0802bff5
 8014f38:	0802be59 	.word	0x0802be59
 8014f3c:	0802bf18 	.word	0x0802bf18

08014f40 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014f40:	b570      	push	{r4, r5, r6, lr}
 8014f42:	6803      	ldr	r3, [r0, #0]
 8014f44:	4616      	mov	r6, r2
 8014f46:	4604      	mov	r4, r0
 8014f48:	460d      	mov	r5, r1
 8014f4a:	6a1b      	ldr	r3, [r3, #32]
 8014f4c:	4798      	blx	r3
 8014f4e:	4286      	cmp	r6, r0
 8014f50:	d905      	bls.n	8014f5e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8014f52:	4b06      	ldr	r3, [pc, #24]	; (8014f6c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014f54:	213a      	movs	r1, #58	; 0x3a
 8014f56:	4a06      	ldr	r2, [pc, #24]	; (8014f70 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014f58:	4806      	ldr	r0, [pc, #24]	; (8014f74 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014f5a:	f011 f841 	bl	8025fe0 <__assert_func>
 8014f5e:	6823      	ldr	r3, [r4, #0]
 8014f60:	4629      	mov	r1, r5
 8014f62:	4620      	mov	r0, r4
 8014f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f6a:	4718      	bx	r3
 8014f6c:	0802bf01 	.word	0x0802bf01
 8014f70:	0802bf68 	.word	0x0802bf68
 8014f74:	0802be59 	.word	0x0802be59

08014f78 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014f78:	4770      	bx	lr
	...

08014f7c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014f7c:	4a02      	ldr	r2, [pc, #8]	; (8014f88 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014f7e:	6002      	str	r2, [r0, #0]
 8014f80:	2200      	movs	r2, #0
 8014f82:	8082      	strh	r2, [r0, #4]
 8014f84:	4770      	bx	lr
 8014f86:	bf00      	nop
 8014f88:	0802bf3c 	.word	0x0802bf3c

08014f8c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014f8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014f8e:	2000      	movs	r0, #0
 8014f90:	b12b      	cbz	r3, 8014f9e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014f92:	b920      	cbnz	r0, 8014f9e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014f94:	1a5a      	subs	r2, r3, r1
 8014f96:	699b      	ldr	r3, [r3, #24]
 8014f98:	4250      	negs	r0, r2
 8014f9a:	4150      	adcs	r0, r2
 8014f9c:	e7f8      	b.n	8014f90 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014f9e:	4770      	bx	lr

08014fa0 <_ZN8touchgfx9Container9removeAllEv>:
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014fa4:	b123      	cbz	r3, 8014fb0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014fa6:	6999      	ldr	r1, [r3, #24]
 8014fa8:	6281      	str	r1, [r0, #40]	; 0x28
 8014faa:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014fae:	e7f8      	b.n	8014fa2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014fb0:	4770      	bx	lr

08014fb2 <_ZN8touchgfx9Container6unlinkEv>:
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	6283      	str	r3, [r0, #40]	; 0x28
 8014fb6:	4770      	bx	lr

08014fb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fbc:	461f      	mov	r7, r3
 8014fbe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014fc2:	460d      	mov	r5, r1
 8014fc4:	4616      	mov	r6, r2
 8014fc6:	b103      	cbz	r3, 8014fca <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014fc8:	6038      	str	r0, [r7, #0]
 8014fca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014fcc:	b314      	cbz	r4, 8015014 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014fce:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014fd2:	b1eb      	cbz	r3, 8015010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014fd4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014fd8:	428d      	cmp	r5, r1
 8014fda:	db19      	blt.n	8015010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014fdc:	b289      	uxth	r1, r1
 8014fde:	8923      	ldrh	r3, [r4, #8]
 8014fe0:	440b      	add	r3, r1
 8014fe2:	b21b      	sxth	r3, r3
 8014fe4:	429d      	cmp	r5, r3
 8014fe6:	da13      	bge.n	8015010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014fe8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014fec:	4296      	cmp	r6, r2
 8014fee:	db0f      	blt.n	8015010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014ff0:	b292      	uxth	r2, r2
 8014ff2:	8963      	ldrh	r3, [r4, #10]
 8014ff4:	4413      	add	r3, r2
 8014ff6:	b21b      	sxth	r3, r3
 8014ff8:	429e      	cmp	r6, r3
 8014ffa:	da09      	bge.n	8015010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014ffc:	6823      	ldr	r3, [r4, #0]
 8014ffe:	1ab2      	subs	r2, r6, r2
 8015000:	1a69      	subs	r1, r5, r1
 8015002:	4620      	mov	r0, r4
 8015004:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015008:	b212      	sxth	r2, r2
 801500a:	463b      	mov	r3, r7
 801500c:	b209      	sxth	r1, r1
 801500e:	47c0      	blx	r8
 8015010:	69a4      	ldr	r4, [r4, #24]
 8015012:	e7db      	b.n	8014fcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015018 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015018:	2200      	movs	r2, #0
 801501a:	8002      	strh	r2, [r0, #0]
 801501c:	8042      	strh	r2, [r0, #2]
 801501e:	8082      	strh	r2, [r0, #4]
 8015020:	80c2      	strh	r2, [r0, #6]
 8015022:	4770      	bx	lr

08015024 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015024:	b570      	push	{r4, r5, r6, lr}
 8015026:	460d      	mov	r5, r1
 8015028:	4616      	mov	r6, r2
 801502a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801502c:	b13c      	cbz	r4, 801503e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801502e:	6823      	ldr	r3, [r4, #0]
 8015030:	4620      	mov	r0, r4
 8015032:	4632      	mov	r2, r6
 8015034:	4629      	mov	r1, r5
 8015036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015038:	4798      	blx	r3
 801503a:	69a4      	ldr	r4, [r4, #24]
 801503c:	e7f6      	b.n	801502c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801503e:	bd70      	pop	{r4, r5, r6, pc}

08015040 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015040:	b538      	push	{r3, r4, r5, lr}
 8015042:	460d      	mov	r5, r1
 8015044:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015046:	b134      	cbz	r4, 8015056 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015048:	682b      	ldr	r3, [r5, #0]
 801504a:	4621      	mov	r1, r4
 801504c:	4628      	mov	r0, r5
 801504e:	689b      	ldr	r3, [r3, #8]
 8015050:	4798      	blx	r3
 8015052:	69a4      	ldr	r4, [r4, #24]
 8015054:	e7f7      	b.n	8015046 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015056:	bd38      	pop	{r3, r4, r5, pc}

08015058 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015058:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801505a:	b19b      	cbz	r3, 8015084 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801505c:	428b      	cmp	r3, r1
 801505e:	d109      	bne.n	8015074 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015060:	699a      	ldr	r2, [r3, #24]
 8015062:	2100      	movs	r1, #0
 8015064:	6159      	str	r1, [r3, #20]
 8015066:	6282      	str	r2, [r0, #40]	; 0x28
 8015068:	b902      	cbnz	r2, 801506c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801506a:	4770      	bx	lr
 801506c:	6199      	str	r1, [r3, #24]
 801506e:	4770      	bx	lr
 8015070:	4613      	mov	r3, r2
 8015072:	b13a      	cbz	r2, 8015084 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015074:	699a      	ldr	r2, [r3, #24]
 8015076:	428a      	cmp	r2, r1
 8015078:	d1fa      	bne.n	8015070 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801507a:	698a      	ldr	r2, [r1, #24]
 801507c:	619a      	str	r2, [r3, #24]
 801507e:	2300      	movs	r3, #0
 8015080:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015084:	4770      	bx	lr

08015086 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015086:	b410      	push	{r4}
 8015088:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801508a:	4604      	mov	r4, r0
 801508c:	b92b      	cbnz	r3, 801509a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801508e:	6803      	ldr	r3, [r0, #0]
 8015090:	4611      	mov	r1, r2
 8015092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015098:	4718      	bx	r3
 801509a:	b941      	cbnz	r1, 80150ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801509c:	6193      	str	r3, [r2, #24]
 801509e:	6282      	str	r2, [r0, #40]	; 0x28
 80150a0:	6154      	str	r4, [r2, #20]
 80150a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150a6:	4770      	bx	lr
 80150a8:	4603      	mov	r3, r0
 80150aa:	2800      	cmp	r0, #0
 80150ac:	d0f9      	beq.n	80150a2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80150ae:	4299      	cmp	r1, r3
 80150b0:	6998      	ldr	r0, [r3, #24]
 80150b2:	d1f9      	bne.n	80150a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80150b4:	6190      	str	r0, [r2, #24]
 80150b6:	618a      	str	r2, [r1, #24]
 80150b8:	e7f2      	b.n	80150a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080150bc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80150bc:	4288      	cmp	r0, r1
 80150be:	b508      	push	{r3, lr}
 80150c0:	d105      	bne.n	80150ce <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80150c2:	4b11      	ldr	r3, [pc, #68]	; (8015108 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80150c4:	2121      	movs	r1, #33	; 0x21
 80150c6:	4a11      	ldr	r2, [pc, #68]	; (801510c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80150c8:	4811      	ldr	r0, [pc, #68]	; (8015110 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80150ca:	f010 ff89 	bl	8025fe0 <__assert_func>
 80150ce:	694b      	ldr	r3, [r1, #20]
 80150d0:	b11b      	cbz	r3, 80150da <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80150d2:	4b10      	ldr	r3, [pc, #64]	; (8015114 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80150d4:	2122      	movs	r1, #34	; 0x22
 80150d6:	4a0d      	ldr	r2, [pc, #52]	; (801510c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80150d8:	e7f6      	b.n	80150c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80150da:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80150de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80150e0:	b913      	cbnz	r3, 80150e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80150e2:	6281      	str	r1, [r0, #40]	; 0x28
 80150e4:	bd08      	pop	{r3, pc}
 80150e6:	4613      	mov	r3, r2
 80150e8:	699a      	ldr	r2, [r3, #24]
 80150ea:	b12a      	cbz	r2, 80150f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80150ec:	428b      	cmp	r3, r1
 80150ee:	d1fa      	bne.n	80150e6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80150f0:	4b09      	ldr	r3, [pc, #36]	; (8015118 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80150f2:	2133      	movs	r1, #51	; 0x33
 80150f4:	4a05      	ldr	r2, [pc, #20]	; (801510c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80150f6:	e7e7      	b.n	80150c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80150f8:	428b      	cmp	r3, r1
 80150fa:	d103      	bne.n	8015104 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80150fc:	4b06      	ldr	r3, [pc, #24]	; (8015118 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80150fe:	2136      	movs	r1, #54	; 0x36
 8015100:	4a02      	ldr	r2, [pc, #8]	; (801510c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015102:	e7e1      	b.n	80150c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015104:	6199      	str	r1, [r3, #24]
 8015106:	e7ed      	b.n	80150e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015108:	0802c033 	.word	0x0802c033
 801510c:	0802c184 	.word	0x0802c184
 8015110:	0802c05f 	.word	0x0802c05f
 8015114:	0802c092 	.word	0x0802c092
 8015118:	0802c0c8 	.word	0x0802c0c8

0801511c <_ZN8touchgfx4RectaNERKS0_>:
 801511c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015120:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015124:	888c      	ldrh	r4, [r1, #4]
 8015126:	f9b0 9000 	ldrsh.w	r9, [r0]
 801512a:	443c      	add	r4, r7
 801512c:	b2a4      	uxth	r4, r4
 801512e:	fa0f f884 	sxth.w	r8, r4
 8015132:	45c1      	cmp	r9, r8
 8015134:	da2f      	bge.n	8015196 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015136:	8882      	ldrh	r2, [r0, #4]
 8015138:	444a      	add	r2, r9
 801513a:	b292      	uxth	r2, r2
 801513c:	fa0f fe82 	sxth.w	lr, r2
 8015140:	4577      	cmp	r7, lr
 8015142:	da28      	bge.n	8015196 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015144:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015148:	88cb      	ldrh	r3, [r1, #6]
 801514a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801514e:	442b      	add	r3, r5
 8015150:	b21b      	sxth	r3, r3
 8015152:	429e      	cmp	r6, r3
 8015154:	da1f      	bge.n	8015196 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015156:	88c3      	ldrh	r3, [r0, #6]
 8015158:	4433      	add	r3, r6
 801515a:	b29b      	uxth	r3, r3
 801515c:	fa0f fc83 	sxth.w	ip, r3
 8015160:	4565      	cmp	r5, ip
 8015162:	da18      	bge.n	8015196 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015164:	454f      	cmp	r7, r9
 8015166:	bfb8      	it	lt
 8015168:	464f      	movlt	r7, r9
 801516a:	42b5      	cmp	r5, r6
 801516c:	bfb8      	it	lt
 801516e:	4635      	movlt	r5, r6
 8015170:	45f0      	cmp	r8, lr
 8015172:	bfd8      	it	le
 8015174:	4622      	movle	r2, r4
 8015176:	1bd2      	subs	r2, r2, r7
 8015178:	8082      	strh	r2, [r0, #4]
 801517a:	884a      	ldrh	r2, [r1, #2]
 801517c:	88c9      	ldrh	r1, [r1, #6]
 801517e:	8007      	strh	r7, [r0, #0]
 8015180:	440a      	add	r2, r1
 8015182:	8045      	strh	r5, [r0, #2]
 8015184:	b292      	uxth	r2, r2
 8015186:	b211      	sxth	r1, r2
 8015188:	458c      	cmp	ip, r1
 801518a:	bfa8      	it	ge
 801518c:	4613      	movge	r3, r2
 801518e:	1b5b      	subs	r3, r3, r5
 8015190:	80c3      	strh	r3, [r0, #6]
 8015192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015196:	2300      	movs	r3, #0
 8015198:	8003      	strh	r3, [r0, #0]
 801519a:	8043      	strh	r3, [r0, #2]
 801519c:	8083      	strh	r3, [r0, #4]
 801519e:	80c3      	strh	r3, [r0, #6]
 80151a0:	e7f7      	b.n	8015192 <_ZN8touchgfx4RectaNERKS0_+0x76>

080151a2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80151a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	dd06      	ble.n	80151b8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80151aa:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80151ae:	2800      	cmp	r0, #0
 80151b0:	bfcc      	ite	gt
 80151b2:	2000      	movgt	r0, #0
 80151b4:	2001      	movle	r0, #1
 80151b6:	4770      	bx	lr
 80151b8:	2001      	movs	r0, #1
 80151ba:	4770      	bx	lr

080151bc <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80151bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151c0:	2300      	movs	r3, #0
 80151c2:	4604      	mov	r4, r0
 80151c4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80151c6:	8003      	strh	r3, [r0, #0]
 80151c8:	8043      	strh	r3, [r0, #2]
 80151ca:	8083      	strh	r3, [r0, #4]
 80151cc:	80c3      	strh	r3, [r0, #6]
 80151ce:	2d00      	cmp	r5, #0
 80151d0:	d040      	beq.n	8015254 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80151d2:	1d28      	adds	r0, r5, #4
 80151d4:	f7ff ffe5 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80151d8:	b988      	cbnz	r0, 80151fe <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80151da:	4620      	mov	r0, r4
 80151dc:	f7ff ffe1 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80151e0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80151e4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80151e8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80151ec:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80151f0:	b138      	cbz	r0, 8015202 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80151f2:	8022      	strh	r2, [r4, #0]
 80151f4:	8063      	strh	r3, [r4, #2]
 80151f6:	f8a4 e004 	strh.w	lr, [r4, #4]
 80151fa:	f8a4 c006 	strh.w	ip, [r4, #6]
 80151fe:	69ad      	ldr	r5, [r5, #24]
 8015200:	e7e5      	b.n	80151ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015202:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015206:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801520a:	4290      	cmp	r0, r2
 801520c:	4607      	mov	r7, r0
 801520e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015212:	460e      	mov	r6, r1
 8015214:	bfa8      	it	ge
 8015216:	4617      	movge	r7, r2
 8015218:	4299      	cmp	r1, r3
 801521a:	4472      	add	r2, lr
 801521c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015220:	bfa8      	it	ge
 8015222:	461e      	movge	r6, r3
 8015224:	4440      	add	r0, r8
 8015226:	4471      	add	r1, lr
 8015228:	4463      	add	r3, ip
 801522a:	b200      	sxth	r0, r0
 801522c:	8027      	strh	r7, [r4, #0]
 801522e:	b212      	sxth	r2, r2
 8015230:	8066      	strh	r6, [r4, #2]
 8015232:	b209      	sxth	r1, r1
 8015234:	b21b      	sxth	r3, r3
 8015236:	4290      	cmp	r0, r2
 8015238:	bfac      	ite	ge
 801523a:	ebc7 0200 	rsbge	r2, r7, r0
 801523e:	ebc7 0202 	rsblt	r2, r7, r2
 8015242:	4299      	cmp	r1, r3
 8015244:	bfac      	ite	ge
 8015246:	ebc6 0301 	rsbge	r3, r6, r1
 801524a:	ebc6 0303 	rsblt	r3, r6, r3
 801524e:	80a2      	strh	r2, [r4, #4]
 8015250:	80e3      	strh	r3, [r4, #6]
 8015252:	e7d4      	b.n	80151fe <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015254:	4620      	mov	r0, r4
 8015256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801525a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801525a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801525e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015262:	b383      	cbz	r3, 80152c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015264:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015266:	b374      	cbz	r4, 80152c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015268:	f9b1 5000 	ldrsh.w	r5, [r1]
 801526c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015270:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015274:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015278:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801527c:	b303      	cbz	r3, 80152c0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801527e:	4668      	mov	r0, sp
 8015280:	1d21      	adds	r1, r4, #4
 8015282:	f8ad 5000 	strh.w	r5, [sp]
 8015286:	f8ad 6002 	strh.w	r6, [sp, #2]
 801528a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801528e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015292:	f7ff ff43 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 8015296:	4668      	mov	r0, sp
 8015298:	f7ff ff83 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801529c:	b980      	cbnz	r0, 80152c0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801529e:	f8bd 3000 	ldrh.w	r3, [sp]
 80152a2:	4669      	mov	r1, sp
 80152a4:	88a2      	ldrh	r2, [r4, #4]
 80152a6:	4620      	mov	r0, r4
 80152a8:	1a9b      	subs	r3, r3, r2
 80152aa:	88e2      	ldrh	r2, [r4, #6]
 80152ac:	f8ad 3000 	strh.w	r3, [sp]
 80152b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80152b4:	1a9b      	subs	r3, r3, r2
 80152b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80152ba:	6823      	ldr	r3, [r4, #0]
 80152bc:	689b      	ldr	r3, [r3, #8]
 80152be:	4798      	blx	r3
 80152c0:	69a4      	ldr	r4, [r4, #24]
 80152c2:	2c00      	cmp	r4, #0
 80152c4:	d1d8      	bne.n	8015278 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80152c6:	b002      	add	sp, #8
 80152c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080152cc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80152cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80152ce:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80152d2:	460d      	mov	r5, r1
 80152d4:	4616      	mov	r6, r2
 80152d6:	b323      	cbz	r3, 8015322 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80152d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80152da:	b314      	cbz	r4, 8015322 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80152dc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80152e0:	b1eb      	cbz	r3, 801531e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80152e2:	6828      	ldr	r0, [r5, #0]
 80152e4:	466b      	mov	r3, sp
 80152e6:	6869      	ldr	r1, [r5, #4]
 80152e8:	c303      	stmia	r3!, {r0, r1}
 80152ea:	4668      	mov	r0, sp
 80152ec:	1d21      	adds	r1, r4, #4
 80152ee:	f7ff ff15 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 80152f2:	4668      	mov	r0, sp
 80152f4:	f7ff ff55 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80152f8:	b988      	cbnz	r0, 801531e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80152fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80152fe:	4669      	mov	r1, sp
 8015300:	88a2      	ldrh	r2, [r4, #4]
 8015302:	4620      	mov	r0, r4
 8015304:	1a9b      	subs	r3, r3, r2
 8015306:	88e2      	ldrh	r2, [r4, #6]
 8015308:	f8ad 3000 	strh.w	r3, [sp]
 801530c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015310:	1a9b      	subs	r3, r3, r2
 8015312:	4632      	mov	r2, r6
 8015314:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015318:	6823      	ldr	r3, [r4, #0]
 801531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801531c:	4798      	blx	r3
 801531e:	69a4      	ldr	r4, [r4, #24]
 8015320:	e7db      	b.n	80152da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015322:	b002      	add	sp, #8
 8015324:	bd70      	pop	{r4, r5, r6, pc}

08015326 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015326:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801532a:	4770      	bx	lr

0801532c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801532c:	4770      	bx	lr

0801532e <_ZN8touchgfx3HAL10FlushCacheEv>:
 801532e:	4770      	bx	lr

08015330 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015330:	6803      	ldr	r3, [r0, #0]
 8015332:	b513      	push	{r0, r1, r4, lr}
 8015334:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8015338:	2300      	movs	r3, #0
 801533a:	e9cd 3300 	strd	r3, r3, [sp]
 801533e:	466b      	mov	r3, sp
 8015340:	47a0      	blx	r4
 8015342:	b002      	add	sp, #8
 8015344:	bd10      	pop	{r4, pc}

08015346 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015346:	2301      	movs	r3, #1
 8015348:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801534c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015350:	4770      	bx	lr

08015352 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015352:	2301      	movs	r3, #1
 8015354:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015358:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801535c:	4770      	bx	lr

0801535e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801535e:	6843      	ldr	r3, [r0, #4]
 8015360:	2201      	movs	r2, #1
 8015362:	725a      	strb	r2, [r3, #9]
 8015364:	6840      	ldr	r0, [r0, #4]
 8015366:	6803      	ldr	r3, [r0, #0]
 8015368:	691b      	ldr	r3, [r3, #16]
 801536a:	4718      	bx	r3

0801536c <_ZN8touchgfx3HAL8flushDMAEv>:
 801536c:	6840      	ldr	r0, [r0, #4]
 801536e:	6803      	ldr	r3, [r0, #0]
 8015370:	689b      	ldr	r3, [r3, #8]
 8015372:	4718      	bx	r3

08015374 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015374:	b530      	push	{r4, r5, lr}
 8015376:	b08b      	sub	sp, #44	; 0x2c
 8015378:	6804      	ldr	r4, [r0, #0]
 801537a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801537e:	9508      	str	r5, [sp, #32]
 8015380:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015384:	9507      	str	r5, [sp, #28]
 8015386:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801538a:	9506      	str	r5, [sp, #24]
 801538c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015390:	9505      	str	r5, [sp, #20]
 8015392:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015396:	9504      	str	r5, [sp, #16]
 8015398:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801539c:	9503      	str	r5, [sp, #12]
 801539e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80153a2:	9502      	str	r5, [sp, #8]
 80153a4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80153a8:	e9cd 3500 	strd	r3, r5, [sp]
 80153ac:	4613      	mov	r3, r2
 80153ae:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80153b0:	2200      	movs	r2, #0
 80153b2:	47a0      	blx	r4
 80153b4:	b00b      	add	sp, #44	; 0x2c
 80153b6:	bd30      	pop	{r4, r5, pc}

080153b8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80153b8:	4b04      	ldr	r3, [pc, #16]	; (80153cc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80153ba:	781b      	ldrb	r3, [r3, #0]
 80153bc:	b123      	cbz	r3, 80153c8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80153be:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80153c2:	f080 0001 	eor.w	r0, r0, #1
 80153c6:	4770      	bx	lr
 80153c8:	2001      	movs	r0, #1
 80153ca:	4770      	bx	lr
 80153cc:	200566f6 	.word	0x200566f6

080153d0 <_ZN8touchgfx3HAL8endFrameEv>:
 80153d0:	b510      	push	{r4, lr}
 80153d2:	4604      	mov	r4, r0
 80153d4:	6840      	ldr	r0, [r0, #4]
 80153d6:	6803      	ldr	r3, [r0, #0]
 80153d8:	689b      	ldr	r3, [r3, #8]
 80153da:	4798      	blx	r3
 80153dc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80153e0:	b113      	cbz	r3, 80153e8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80153e2:	2301      	movs	r3, #1
 80153e4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80153e8:	bd10      	pop	{r4, pc}

080153ea <_ZN8touchgfx3HAL10initializeEv>:
 80153ea:	b510      	push	{r4, lr}
 80153ec:	4604      	mov	r4, r0
 80153ee:	f7ee f96d 	bl	80036cc <_ZN8touchgfx10OSWrappers10initializeEv>
 80153f2:	6860      	ldr	r0, [r4, #4]
 80153f4:	6803      	ldr	r3, [r0, #0]
 80153f6:	68db      	ldr	r3, [r3, #12]
 80153f8:	4798      	blx	r3
 80153fa:	68e0      	ldr	r0, [r4, #12]
 80153fc:	6803      	ldr	r3, [r0, #0]
 80153fe:	689b      	ldr	r3, [r3, #8]
 8015400:	4798      	blx	r3
 8015402:	6823      	ldr	r3, [r4, #0]
 8015404:	4620      	mov	r0, r4
 8015406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801540c:	4718      	bx	r3

0801540e <_ZN8touchgfx3HAL9taskEntryEv>:
 801540e:	b508      	push	{r3, lr}
 8015410:	6803      	ldr	r3, [r0, #0]
 8015412:	4604      	mov	r4, r0
 8015414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015416:	4798      	blx	r3
 8015418:	6823      	ldr	r3, [r4, #0]
 801541a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801541c:	4620      	mov	r0, r4
 801541e:	4798      	blx	r3
 8015420:	f7ee f9ca 	bl	80037b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015424:	6823      	ldr	r3, [r4, #0]
 8015426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015428:	e7f8      	b.n	801541c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801542c <_ZN8touchgfx3HAL4tickEv>:
 801542c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801542e:	6803      	ldr	r3, [r0, #0]
 8015430:	4604      	mov	r4, r0
 8015432:	4d5c      	ldr	r5, [pc, #368]	; (80155a4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015434:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015438:	4798      	blx	r3
 801543a:	2800      	cmp	r0, #0
 801543c:	f000 8097 	beq.w	801556e <_ZN8touchgfx3HAL4tickEv+0x142>
 8015440:	2001      	movs	r0, #1
 8015442:	2600      	movs	r6, #0
 8015444:	f7ed ff14 	bl	8003270 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015448:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801544c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015450:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015454:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015458:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801545c:	b133      	cbz	r3, 801546c <_ZN8touchgfx3HAL4tickEv+0x40>
 801545e:	6823      	ldr	r3, [r4, #0]
 8015460:	4620      	mov	r0, r4
 8015462:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015466:	4798      	blx	r3
 8015468:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801546c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015470:	2601      	movs	r6, #1
 8015472:	6862      	ldr	r2, [r4, #4]
 8015474:	f083 0301 	eor.w	r3, r3, #1
 8015478:	702e      	strb	r6, [r5, #0]
 801547a:	7253      	strb	r3, [r2, #9]
 801547c:	f003 fcac 	bl	8018dd8 <_ZN8touchgfx11Application11getInstanceEv>
 8015480:	6803      	ldr	r3, [r0, #0]
 8015482:	4631      	mov	r1, r6
 8015484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015486:	4798      	blx	r3
 8015488:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801548c:	b90b      	cbnz	r3, 8015492 <_ZN8touchgfx3HAL4tickEv+0x66>
 801548e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015492:	f003 fca1 	bl	8018dd8 <_ZN8touchgfx11Application11getInstanceEv>
 8015496:	6803      	ldr	r3, [r0, #0]
 8015498:	695b      	ldr	r3, [r3, #20]
 801549a:	4798      	blx	r3
 801549c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801549e:	6803      	ldr	r3, [r0, #0]
 80154a0:	691b      	ldr	r3, [r3, #16]
 80154a2:	4798      	blx	r3
 80154a4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80154a8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80154ac:	3b01      	subs	r3, #1
 80154ae:	b2db      	uxtb	r3, r3
 80154b0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80154b4:	b10a      	cbz	r2, 80154ba <_ZN8touchgfx3HAL4tickEv+0x8e>
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d1eb      	bne.n	8015492 <_ZN8touchgfx3HAL4tickEv+0x66>
 80154ba:	4a3b      	ldr	r2, [pc, #236]	; (80155a8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80154bc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80154c0:	7813      	ldrb	r3, [r2, #0]
 80154c2:	3301      	adds	r3, #1
 80154c4:	b25b      	sxtb	r3, r3
 80154c6:	4299      	cmp	r1, r3
 80154c8:	7013      	strb	r3, [r2, #0]
 80154ca:	dc10      	bgt.n	80154ee <_ZN8touchgfx3HAL4tickEv+0xc2>
 80154cc:	2300      	movs	r3, #0
 80154ce:	68e0      	ldr	r0, [r4, #12]
 80154d0:	a902      	add	r1, sp, #8
 80154d2:	7013      	strb	r3, [r2, #0]
 80154d4:	aa03      	add	r2, sp, #12
 80154d6:	6803      	ldr	r3, [r0, #0]
 80154d8:	68db      	ldr	r3, [r3, #12]
 80154da:	4798      	blx	r3
 80154dc:	6823      	ldr	r3, [r4, #0]
 80154de:	2800      	cmp	r0, #0
 80154e0:	d051      	beq.n	8015586 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80154e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80154e6:	4620      	mov	r0, r4
 80154e8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80154ec:	4798      	blx	r3
 80154ee:	2300      	movs	r3, #0
 80154f0:	6960      	ldr	r0, [r4, #20]
 80154f2:	f88d 3007 	strb.w	r3, [sp, #7]
 80154f6:	b158      	cbz	r0, 8015510 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80154f8:	6803      	ldr	r3, [r0, #0]
 80154fa:	f10d 0107 	add.w	r1, sp, #7
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	4798      	blx	r3
 8015502:	b128      	cbz	r0, 8015510 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015506:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801550a:	6803      	ldr	r3, [r0, #0]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	4798      	blx	r3
 8015510:	f104 001c 	add.w	r0, r4, #28
 8015514:	f00e ff5e 	bl	80243d4 <_ZN8touchgfx8Gestures4tickEv>
 8015518:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801551c:	b30b      	cbz	r3, 8015562 <_ZN8touchgfx3HAL4tickEv+0x136>
 801551e:	6920      	ldr	r0, [r4, #16]
 8015520:	6803      	ldr	r3, [r0, #0]
 8015522:	691b      	ldr	r3, [r3, #16]
 8015524:	4798      	blx	r3
 8015526:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015528:	4606      	mov	r6, r0
 801552a:	b903      	cbnz	r3, 801552e <_ZN8touchgfx3HAL4tickEv+0x102>
 801552c:	6720      	str	r0, [r4, #112]	; 0x70
 801552e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015530:	4a1e      	ldr	r2, [pc, #120]	; (80155ac <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015532:	1af3      	subs	r3, r6, r3
 8015534:	4293      	cmp	r3, r2
 8015536:	d914      	bls.n	8015562 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015538:	6920      	ldr	r0, [r4, #16]
 801553a:	6803      	ldr	r3, [r0, #0]
 801553c:	699b      	ldr	r3, [r3, #24]
 801553e:	4798      	blx	r3
 8015540:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015542:	2264      	movs	r2, #100	; 0x64
 8015544:	1af3      	subs	r3, r6, r3
 8015546:	fbb3 f3f2 	udiv	r3, r3, r2
 801554a:	fbb0 f0f3 	udiv	r0, r0, r3
 801554e:	2800      	cmp	r0, #0
 8015550:	dc1e      	bgt.n	8015590 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015552:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015556:	6920      	ldr	r0, [r4, #16]
 8015558:	2100      	movs	r1, #0
 801555a:	6803      	ldr	r3, [r0, #0]
 801555c:	69db      	ldr	r3, [r3, #28]
 801555e:	4798      	blx	r3
 8015560:	6726      	str	r6, [r4, #112]	; 0x70
 8015562:	f003 fc39 	bl	8018dd8 <_ZN8touchgfx11Application11getInstanceEv>
 8015566:	6803      	ldr	r3, [r0, #0]
 8015568:	2100      	movs	r1, #0
 801556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801556c:	4798      	blx	r3
 801556e:	6823      	ldr	r3, [r4, #0]
 8015570:	4620      	mov	r0, r4
 8015572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015576:	4798      	blx	r3
 8015578:	2001      	movs	r0, #1
 801557a:	f7ed fe84 	bl	8003286 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801557e:	2300      	movs	r3, #0
 8015580:	702b      	strb	r3, [r5, #0]
 8015582:	b004      	add	sp, #16
 8015584:	bd70      	pop	{r4, r5, r6, pc}
 8015586:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801558a:	4620      	mov	r0, r4
 801558c:	4798      	blx	r3
 801558e:	e7ae      	b.n	80154ee <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015590:	2863      	cmp	r0, #99	; 0x63
 8015592:	bfcb      	itete	gt
 8015594:	2300      	movgt	r3, #0
 8015596:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801559a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801559e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80155a2:	e7d8      	b.n	8015556 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80155a4:	200566fc 	.word	0x200566fc
 80155a8:	200566fd 	.word	0x200566fd
 80155ac:	05f5e100 	.word	0x05f5e100

080155b0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80155b0:	f7ee b8ce 	b.w	8003750 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080155b4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80155b4:	6581      	str	r1, [r0, #88]	; 0x58
 80155b6:	301c      	adds	r0, #28
 80155b8:	f00e bf0a 	b.w	80243d0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080155bc <_ZN8touchgfx3HAL5touchEll>:
 80155bc:	b530      	push	{r4, r5, lr}
 80155be:	b087      	sub	sp, #28
 80155c0:	4604      	mov	r4, r0
 80155c2:	a804      	add	r0, sp, #16
 80155c4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80155c8:	f003 f9f2 	bl	80189b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80155cc:	9b04      	ldr	r3, [sp, #16]
 80155ce:	a906      	add	r1, sp, #24
 80155d0:	a803      	add	r0, sp, #12
 80155d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80155d6:	9b05      	ldr	r3, [sp, #20]
 80155d8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80155dc:	f003 fa26 	bl	8018a2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80155e0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80155e4:	f104 001c 	add.w	r0, r4, #28
 80155e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80155ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80155f0:	b189      	cbz	r1, 8015616 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80155f2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	4613      	mov	r3, r2
 80155fa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80155fe:	462a      	mov	r2, r5
 8015600:	f00e fef6 	bl	80243f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015604:	b128      	cbz	r0, 8015612 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015606:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801560a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801560c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015610:	6623      	str	r3, [r4, #96]	; 0x60
 8015612:	b007      	add	sp, #28
 8015614:	bd30      	pop	{r4, r5, pc}
 8015616:	f00e ff2f 	bl	8024478 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801561a:	2301      	movs	r3, #1
 801561c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015620:	e7f1      	b.n	8015606 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015622 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015622:	b570      	push	{r4, r5, r6, lr}
 8015624:	2b00      	cmp	r3, #0
 8015626:	d050      	beq.n	80156ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015628:	ea81 0002 	eor.w	r0, r1, r2
 801562c:	07c6      	lsls	r6, r0, #31
 801562e:	d508      	bpl.n	8015642 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015630:	3a01      	subs	r2, #1
 8015632:	18cc      	adds	r4, r1, r3
 8015634:	42a1      	cmp	r1, r4
 8015636:	d048      	beq.n	80156ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015638:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801563c:	f801 0b01 	strb.w	r0, [r1], #1
 8015640:	e7f8      	b.n	8015634 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015642:	07d5      	lsls	r5, r2, #31
 8015644:	bf42      	ittt	mi
 8015646:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801564a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801564e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015652:	2b01      	cmp	r3, #1
 8015654:	d915      	bls.n	8015682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015656:	ea82 0001 	eor.w	r0, r2, r1
 801565a:	0784      	lsls	r4, r0, #30
 801565c:	d02d      	beq.n	80156ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801565e:	1e94      	subs	r4, r2, #2
 8015660:	4608      	mov	r0, r1
 8015662:	18ce      	adds	r6, r1, r3
 8015664:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015668:	f820 5b02 	strh.w	r5, [r0], #2
 801566c:	1a35      	subs	r5, r6, r0
 801566e:	2d01      	cmp	r5, #1
 8015670:	d8f8      	bhi.n	8015664 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015672:	1e98      	subs	r0, r3, #2
 8015674:	f003 0301 	and.w	r3, r3, #1
 8015678:	f020 0001 	bic.w	r0, r0, #1
 801567c:	3002      	adds	r0, #2
 801567e:	4401      	add	r1, r0
 8015680:	4402      	add	r2, r0
 8015682:	1f14      	subs	r4, r2, #4
 8015684:	4608      	mov	r0, r1
 8015686:	18ce      	adds	r6, r1, r3
 8015688:	1a35      	subs	r5, r6, r0
 801568a:	2d03      	cmp	r5, #3
 801568c:	d810      	bhi.n	80156b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801568e:	089c      	lsrs	r4, r3, #2
 8015690:	00a0      	lsls	r0, r4, #2
 8015692:	4401      	add	r1, r0
 8015694:	3801      	subs	r0, #1
 8015696:	4402      	add	r2, r0
 8015698:	f06f 0003 	mvn.w	r0, #3
 801569c:	fb00 3404 	mla	r4, r0, r4, r3
 80156a0:	440c      	add	r4, r1
 80156a2:	42a1      	cmp	r1, r4
 80156a4:	d011      	beq.n	80156ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80156a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80156aa:	f801 3b01 	strb.w	r3, [r1], #1
 80156ae:	e7f8      	b.n	80156a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80156b0:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80156b4:	f840 5b04 	str.w	r5, [r0], #4
 80156b8:	e7e6      	b.n	8015688 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80156ba:	0790      	lsls	r0, r2, #30
 80156bc:	d0e1      	beq.n	8015682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80156be:	f832 0b02 	ldrh.w	r0, [r2], #2
 80156c2:	3b02      	subs	r3, #2
 80156c4:	f821 0b02 	strh.w	r0, [r1], #2
 80156c8:	e7db      	b.n	8015682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80156ca:	2001      	movs	r0, #1
 80156cc:	bd70      	pop	{r4, r5, r6, pc}

080156ce <_ZN8touchgfx3HAL7noTouchEv>:
 80156ce:	b510      	push	{r4, lr}
 80156d0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80156d4:	4604      	mov	r4, r0
 80156d6:	b153      	cbz	r3, 80156ee <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80156d8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80156dc:	2101      	movs	r1, #1
 80156de:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80156e2:	301c      	adds	r0, #28
 80156e4:	f00e fec8 	bl	8024478 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80156e8:	2300      	movs	r3, #0
 80156ea:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80156ee:	bd10      	pop	{r4, pc}

080156f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80156f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156f4:	4604      	mov	r4, r0
 80156f6:	6980      	ldr	r0, [r0, #24]
 80156f8:	b085      	sub	sp, #20
 80156fa:	460f      	mov	r7, r1
 80156fc:	4690      	mov	r8, r2
 80156fe:	4699      	mov	r9, r3
 8015700:	b930      	cbnz	r0, 8015710 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015702:	4b1c      	ldr	r3, [pc, #112]	; (8015774 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8015704:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8015708:	4a1b      	ldr	r2, [pc, #108]	; (8015778 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801570a:	481c      	ldr	r0, [pc, #112]	; (801577c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 801570c:	f010 fc68 	bl	8025fe0 <__assert_func>
 8015710:	ad04      	add	r5, sp, #16
 8015712:	2600      	movs	r6, #0
 8015714:	f845 6d04 	str.w	r6, [r5, #-4]!
 8015718:	6806      	ldr	r6, [r0, #0]
 801571a:	9501      	str	r5, [sp, #4]
 801571c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015720:	9500      	str	r5, [sp, #0]
 8015722:	6835      	ldr	r5, [r6, #0]
 8015724:	47a8      	blx	r5
 8015726:	4d16      	ldr	r5, [pc, #88]	; (8015780 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015728:	4606      	mov	r6, r0
 801572a:	f8a5 9000 	strh.w	r9, [r5]
 801572e:	f7f0 fb03 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8015732:	6803      	ldr	r3, [r0, #0]
 8015734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015736:	4798      	blx	r3
 8015738:	2801      	cmp	r0, #1
 801573a:	d012      	beq.n	8015762 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 801573c:	d306      	bcc.n	801574c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801573e:	280d      	cmp	r0, #13
 8015740:	d80b      	bhi.n	801575a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8015742:	4b10      	ldr	r3, [pc, #64]	; (8015784 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015744:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8015748:	4a0b      	ldr	r2, [pc, #44]	; (8015778 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801574a:	e7de      	b.n	801570a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801574c:	882b      	ldrh	r3, [r5, #0]
 801574e:	fb08 7203 	mla	r2, r8, r3, r7
 8015752:	9b03      	ldr	r3, [sp, #12]
 8015754:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015758:	63e3      	str	r3, [r4, #60]	; 0x3c
 801575a:	4630      	mov	r0, r6
 801575c:	b005      	add	sp, #20
 801575e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015762:	882a      	ldrh	r2, [r5, #0]
 8015764:	9b03      	ldr	r3, [sp, #12]
 8015766:	fb08 7202 	mla	r2, r8, r2, r7
 801576a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801576e:	1a9a      	subs	r2, r3, r2
 8015770:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015772:	e7f2      	b.n	801575a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8015774:	0802c32c 	.word	0x0802c32c
 8015778:	0802c6b1 	.word	0x0802c6b1
 801577c:	0802c371 	.word	0x0802c371
 8015780:	200566f2 	.word	0x200566f2
 8015784:	0802c397 	.word	0x0802c397

08015788 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801578a:	b08b      	sub	sp, #44	; 0x2c
 801578c:	4617      	mov	r7, r2
 801578e:	4604      	mov	r4, r0
 8015790:	460e      	mov	r6, r1
 8015792:	461d      	mov	r5, r3
 8015794:	f7f0 fad0 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8015798:	6803      	ldr	r3, [r0, #0]
 801579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801579c:	4798      	blx	r3
 801579e:	4b0f      	ldr	r3, [pc, #60]	; (80157dc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 80157a0:	6822      	ldr	r2, [r4, #0]
 80157a2:	4631      	mov	r1, r6
 80157a4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80157a8:	881b      	ldrh	r3, [r3, #0]
 80157aa:	4620      	mov	r0, r4
 80157ac:	9306      	str	r3, [sp, #24]
 80157ae:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80157b2:	9305      	str	r3, [sp, #20]
 80157b4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80157b8:	9304      	str	r3, [sp, #16]
 80157ba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80157be:	9303      	str	r3, [sp, #12]
 80157c0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80157c4:	9302      	str	r3, [sp, #8]
 80157c6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80157ca:	e9cd 5300 	strd	r5, r3, [sp]
 80157ce:	463b      	mov	r3, r7
 80157d0:	6b95      	ldr	r5, [r2, #56]	; 0x38
 80157d2:	2200      	movs	r2, #0
 80157d4:	47a8      	blx	r5
 80157d6:	b00b      	add	sp, #44	; 0x2c
 80157d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157da:	bf00      	nop
 80157dc:	200566f2 	.word	0x200566f2

080157e0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80157e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157e4:	4698      	mov	r8, r3
 80157e6:	6803      	ldr	r3, [r0, #0]
 80157e8:	b08b      	sub	sp, #44	; 0x2c
 80157ea:	4617      	mov	r7, r2
 80157ec:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80157ee:	460e      	mov	r6, r1
 80157f0:	4b11      	ldr	r3, [pc, #68]	; (8015838 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80157f2:	4604      	mov	r4, r0
 80157f4:	f8b3 9000 	ldrh.w	r9, [r3]
 80157f8:	f7f0 fa9e 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 80157fc:	6803      	ldr	r3, [r0, #0]
 80157fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015800:	4798      	blx	r3
 8015802:	2302      	movs	r3, #2
 8015804:	9008      	str	r0, [sp, #32]
 8015806:	2200      	movs	r2, #0
 8015808:	4631      	mov	r1, r6
 801580a:	4620      	mov	r0, r4
 801580c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8015810:	2301      	movs	r3, #1
 8015812:	9305      	str	r3, [sp, #20]
 8015814:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015818:	9304      	str	r3, [sp, #16]
 801581a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801581e:	9303      	str	r3, [sp, #12]
 8015820:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015824:	9302      	str	r3, [sp, #8]
 8015826:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801582a:	e9cd 8300 	strd	r8, r3, [sp]
 801582e:	463b      	mov	r3, r7
 8015830:	47a8      	blx	r5
 8015832:	b00b      	add	sp, #44	; 0x2c
 8015834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015838:	200566f2 	.word	0x200566f2

0801583c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801583c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015840:	4698      	mov	r8, r3
 8015842:	6803      	ldr	r3, [r0, #0]
 8015844:	b087      	sub	sp, #28
 8015846:	460e      	mov	r6, r1
 8015848:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801584a:	4617      	mov	r7, r2
 801584c:	4b0d      	ldr	r3, [pc, #52]	; (8015884 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801584e:	4604      	mov	r4, r0
 8015850:	f8b3 9000 	ldrh.w	r9, [r3]
 8015854:	f7f0 fa70 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8015858:	6803      	ldr	r3, [r0, #0]
 801585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801585c:	4798      	blx	r3
 801585e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015862:	463a      	mov	r2, r7
 8015864:	4631      	mov	r1, r6
 8015866:	9302      	str	r3, [sp, #8]
 8015868:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801586c:	9301      	str	r3, [sp, #4]
 801586e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015872:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015876:	9300      	str	r3, [sp, #0]
 8015878:	4620      	mov	r0, r4
 801587a:	4643      	mov	r3, r8
 801587c:	47a8      	blx	r5
 801587e:	b007      	add	sp, #28
 8015880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015884:	200566f2 	.word	0x200566f2

08015888 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801588c:	4604      	mov	r4, r0
 801588e:	b08f      	sub	sp, #60	; 0x3c
 8015890:	4610      	mov	r0, r2
 8015892:	460d      	mov	r5, r1
 8015894:	4691      	mov	r9, r2
 8015896:	461e      	mov	r6, r3
 8015898:	f006 fabc 	bl	801be14 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801589c:	2800      	cmp	r0, #0
 801589e:	f000 80b3 	beq.w	8015a08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 80158a2:	6823      	ldr	r3, [r4, #0]
 80158a4:	4620      	mov	r0, r4
 80158a6:	f8df b190 	ldr.w	fp, [pc, #400]	; 8015a38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 80158aa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80158ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158b0:	4798      	blx	r3
 80158b2:	6823      	ldr	r3, [r4, #0]
 80158b4:	4620      	mov	r0, r4
 80158b6:	f8df a184 	ldr.w	sl, [pc, #388]	; 8015a3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 80158ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158bc:	4798      	blx	r3
 80158be:	f8bb 3000 	ldrh.w	r3, [fp]
 80158c2:	4f5a      	ldr	r7, [pc, #360]	; (8015a2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80158c4:	9300      	str	r3, [sp, #0]
 80158c6:	f8ba 3000 	ldrh.w	r3, [sl]
 80158ca:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80158ce:	4640      	mov	r0, r8
 80158d0:	9301      	str	r3, [sp, #4]
 80158d2:	883b      	ldrh	r3, [r7, #0]
 80158d4:	9302      	str	r3, [sp, #8]
 80158d6:	4b56      	ldr	r3, [pc, #344]	; (8015a30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80158d8:	881a      	ldrh	r2, [r3, #0]
 80158da:	9304      	str	r3, [sp, #16]
 80158dc:	9203      	str	r2, [sp, #12]
 80158de:	f006 fb53 	bl	801bf88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80158e2:	8038      	strh	r0, [r7, #0]
 80158e4:	4640      	mov	r0, r8
 80158e6:	f006 fb89 	bl	801bffc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80158ea:	9b04      	ldr	r3, [sp, #16]
 80158ec:	8018      	strh	r0, [r3, #0]
 80158ee:	4b51      	ldr	r3, [pc, #324]	; (8015a34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	f040 808b 	bne.w	8015a0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 80158f8:	883b      	ldrh	r3, [r7, #0]
 80158fa:	f8aa 0000 	strh.w	r0, [sl]
 80158fe:	f8ab 3000 	strh.w	r3, [fp]
 8015902:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015904:	4648      	mov	r0, r9
 8015906:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8015908:	9304      	str	r3, [sp, #16]
 801590a:	f006 fa83 	bl	801be14 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801590e:	2200      	movs	r2, #0
 8015910:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8015914:	4611      	mov	r1, r2
 8015916:	4628      	mov	r0, r5
 8015918:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801591c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015920:	f7f0 ffec 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>
 8015924:	2301      	movs	r3, #1
 8015926:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801592a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801592e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015932:	2b00      	cmp	r3, #0
 8015934:	dd71      	ble.n	8015a1a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8015936:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801593a:	2b00      	cmp	r3, #0
 801593c:	dd6d      	ble.n	8015a1a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 801593e:	462a      	mov	r2, r5
 8015940:	ab0a      	add	r3, sp, #40	; 0x28
 8015942:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015946:	6851      	ldr	r1, [r2, #4]
 8015948:	c303      	stmia	r3!, {r0, r1}
 801594a:	4631      	mov	r1, r6
 801594c:	a80a      	add	r0, sp, #40	; 0x28
 801594e:	f7ff fbe5 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 8015952:	4b36      	ldr	r3, [pc, #216]	; (8015a2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8015954:	2600      	movs	r6, #0
 8015956:	f9b3 2000 	ldrsh.w	r2, [r3]
 801595a:	4b35      	ldr	r3, [pc, #212]	; (8015a30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801595c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015960:	aa0a      	add	r2, sp, #40	; 0x28
 8015962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015966:	960c      	str	r6, [sp, #48]	; 0x30
 8015968:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801596c:	ab08      	add	r3, sp, #32
 801596e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015972:	e883 0003 	stmia.w	r3, {r0, r1}
 8015976:	4618      	mov	r0, r3
 8015978:	a90c      	add	r1, sp, #48	; 0x30
 801597a:	f7ff fbcf 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 801597e:	a807      	add	r0, sp, #28
 8015980:	f006 fc00 	bl	801c184 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015984:	4680      	mov	r8, r0
 8015986:	f7f0 f9d7 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 801598a:	6802      	ldr	r2, [r0, #0]
 801598c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801598e:	4790      	blx	r2
 8015990:	4580      	cmp	r8, r0
 8015992:	d049      	beq.n	8015a28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 8015994:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015996:	b150      	cbz	r0, 80159ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8015998:	a807      	add	r0, sp, #28
 801599a:	f006 fbf3 	bl	801c184 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801599e:	4606      	mov	r6, r0
 80159a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80159a2:	6803      	ldr	r3, [r0, #0]
 80159a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159a6:	4798      	blx	r3
 80159a8:	1a33      	subs	r3, r6, r0
 80159aa:	4258      	negs	r0, r3
 80159ac:	4158      	adcs	r0, r3
 80159ae:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80159b2:	2600      	movs	r6, #0
 80159b4:	696b      	ldr	r3, [r5, #20]
 80159b6:	a908      	add	r1, sp, #32
 80159b8:	682a      	ldr	r2, [r5, #0]
 80159ba:	4628      	mov	r0, r5
 80159bc:	9305      	str	r3, [sp, #20]
 80159be:	616e      	str	r6, [r5, #20]
 80159c0:	6892      	ldr	r2, [r2, #8]
 80159c2:	4790      	blx	r2
 80159c4:	9b05      	ldr	r3, [sp, #20]
 80159c6:	4652      	mov	r2, sl
 80159c8:	4649      	mov	r1, r9
 80159ca:	616b      	str	r3, [r5, #20]
 80159cc:	4628      	mov	r0, r5
 80159ce:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80159d2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80159d6:	f7f0 ff91 	bl	80068fc <_ZN8touchgfx8Drawable5setXYEss>
 80159da:	9b04      	ldr	r3, [sp, #16]
 80159dc:	9a00      	ldr	r2, [sp, #0]
 80159de:	4620      	mov	r0, r4
 80159e0:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 80159e4:	4b14      	ldr	r3, [pc, #80]	; (8015a38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80159e6:	801a      	strh	r2, [r3, #0]
 80159e8:	9a01      	ldr	r2, [sp, #4]
 80159ea:	4b14      	ldr	r3, [pc, #80]	; (8015a3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80159ec:	801a      	strh	r2, [r3, #0]
 80159ee:	9a02      	ldr	r2, [sp, #8]
 80159f0:	4b0e      	ldr	r3, [pc, #56]	; (8015a2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80159f2:	801a      	strh	r2, [r3, #0]
 80159f4:	4b0e      	ldr	r3, [pc, #56]	; (8015a30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80159f6:	9a03      	ldr	r2, [sp, #12]
 80159f8:	801a      	strh	r2, [r3, #0]
 80159fa:	6823      	ldr	r3, [r4, #0]
 80159fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159fe:	4798      	blx	r3
 8015a00:	6823      	ldr	r3, [r4, #0]
 8015a02:	4620      	mov	r0, r4
 8015a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a06:	4798      	blx	r3
 8015a08:	b00f      	add	sp, #60	; 0x3c
 8015a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0e:	883b      	ldrh	r3, [r7, #0]
 8015a10:	f8ab 0000 	strh.w	r0, [fp]
 8015a14:	f8aa 3000 	strh.w	r3, [sl]
 8015a18:	e773      	b.n	8015902 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8015a1a:	462a      	mov	r2, r5
 8015a1c:	ab0a      	add	r3, sp, #40	; 0x28
 8015a1e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015a22:	6851      	ldr	r1, [r2, #4]
 8015a24:	c303      	stmia	r3!, {r0, r1}
 8015a26:	e794      	b.n	8015952 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 8015a28:	4630      	mov	r0, r6
 8015a2a:	e7c0      	b.n	80159ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8015a2c:	200566ec 	.word	0x200566ec
 8015a30:	200566ee 	.word	0x200566ee
 8015a34:	200566f0 	.word	0x200566f0
 8015a38:	200566f2 	.word	0x200566f2
 8015a3c:	200566f4 	.word	0x200566f4

08015a40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015a40:	4b07      	ldr	r3, [pc, #28]	; (8015a60 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015a42:	b510      	push	{r4, lr}
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	4604      	mov	r4, r0
 8015a48:	b13b      	cbz	r3, 8015a5a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015a4a:	6803      	ldr	r3, [r0, #0]
 8015a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a4e:	4798      	blx	r3
 8015a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015a52:	4283      	cmp	r3, r0
 8015a54:	d101      	bne.n	8015a5a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015a56:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015a58:	bd10      	pop	{r4, pc}
 8015a5a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015a5c:	e7fc      	b.n	8015a58 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015a5e:	bf00      	nop
 8015a60:	200566f6 	.word	0x200566f6

08015a64 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a68:	b088      	sub	sp, #32
 8015a6a:	4692      	mov	sl, r2
 8015a6c:	461c      	mov	r4, r3
 8015a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a72:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8015a76:	2500      	movs	r5, #0
 8015a78:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8015a7c:	4606      	mov	r6, r0
 8015a7e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8015a82:	fb09 a404 	mla	r4, r9, r4, sl
 8015a86:	9503      	str	r5, [sp, #12]
 8015a88:	f8ad 8014 	strh.w	r8, [sp, #20]
 8015a8c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8015a90:	f88d 501c 	strb.w	r5, [sp, #28]
 8015a94:	e9cd 3100 	strd	r3, r1, [sp]
 8015a98:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015a9c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015aa0:	f7ff ffce 	bl	8015a40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015aa4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8015aa8:	f8ad 901a 	strh.w	r9, [sp, #26]
 8015aac:	f88d 501e 	strb.w	r5, [sp, #30]
 8015ab0:	9404      	str	r4, [sp, #16]
 8015ab2:	f88d 501d 	strb.w	r5, [sp, #29]
 8015ab6:	f1b8 0f00 	cmp.w	r8, #0
 8015aba:	d000      	beq.n	8015abe <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 8015abc:	b937      	cbnz	r7, 8015acc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 8015abe:	4b0d      	ldr	r3, [pc, #52]	; (8015af4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 8015ac0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015ac4:	4a0c      	ldr	r2, [pc, #48]	; (8015af8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8015ac6:	480d      	ldr	r0, [pc, #52]	; (8015afc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8015ac8:	f010 fa8a 	bl	8025fe0 <__assert_func>
 8015acc:	6833      	ldr	r3, [r6, #0]
 8015ace:	4630      	mov	r0, r6
 8015ad0:	9c00      	ldr	r4, [sp, #0]
 8015ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ad4:	4798      	blx	r3
 8015ad6:	4220      	tst	r0, r4
 8015ad8:	d104      	bne.n	8015ae4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 8015ada:	4b09      	ldr	r3, [pc, #36]	; (8015b00 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8015adc:	f240 2105 	movw	r1, #517	; 0x205
 8015ae0:	4a05      	ldr	r2, [pc, #20]	; (8015af8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8015ae2:	e7f0      	b.n	8015ac6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 8015ae4:	6870      	ldr	r0, [r6, #4]
 8015ae6:	4669      	mov	r1, sp
 8015ae8:	6803      	ldr	r3, [r0, #0]
 8015aea:	685b      	ldr	r3, [r3, #4]
 8015aec:	4798      	blx	r3
 8015aee:	b008      	add	sp, #32
 8015af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015af4:	0802c1bf 	.word	0x0802c1bf
 8015af8:	0802c4ec 	.word	0x0802c4ec
 8015afc:	0802c371 	.word	0x0802c371
 8015b00:	0802c1f7 	.word	0x0802c1f7

08015b04 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b08:	b089      	sub	sp, #36	; 0x24
 8015b0a:	4693      	mov	fp, r2
 8015b0c:	461d      	mov	r5, r3
 8015b0e:	2400      	movs	r4, #0
 8015b10:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8015b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015b18:	468a      	mov	sl, r1
 8015b1a:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8015b1e:	fb09 b505 	mla	r5, r9, r5, fp
 8015b22:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8015b26:	4606      	mov	r6, r0
 8015b28:	9403      	str	r4, [sp, #12]
 8015b2a:	e9cd 3400 	strd	r3, r4, [sp]
 8015b2e:	f7ff ff87 	bl	8015a40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015b32:	f8ad 8014 	strh.w	r8, [sp, #20]
 8015b36:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015b3a:	f8ad 7016 	strh.w	r7, [sp, #22]
 8015b3e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8015b42:	9504      	str	r5, [sp, #16]
 8015b44:	f8ad 901a 	strh.w	r9, [sp, #26]
 8015b48:	f8cd a00c 	str.w	sl, [sp, #12]
 8015b4c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015b50:	f88d 401e 	strb.w	r4, [sp, #30]
 8015b54:	f1b8 0f00 	cmp.w	r8, #0
 8015b58:	d000      	beq.n	8015b5c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 8015b5a:	b937      	cbnz	r7, 8015b6a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 8015b5c:	4b0d      	ldr	r3, [pc, #52]	; (8015b94 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 8015b5e:	f240 2119 	movw	r1, #537	; 0x219
 8015b62:	4a0d      	ldr	r2, [pc, #52]	; (8015b98 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8015b64:	480d      	ldr	r0, [pc, #52]	; (8015b9c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8015b66:	f010 fa3b 	bl	8025fe0 <__assert_func>
 8015b6a:	6833      	ldr	r3, [r6, #0]
 8015b6c:	4630      	mov	r0, r6
 8015b6e:	9c00      	ldr	r4, [sp, #0]
 8015b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b72:	4798      	blx	r3
 8015b74:	4220      	tst	r0, r4
 8015b76:	d104      	bne.n	8015b82 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 8015b78:	4b09      	ldr	r3, [pc, #36]	; (8015ba0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8015b7a:	f240 211a 	movw	r1, #538	; 0x21a
 8015b7e:	4a06      	ldr	r2, [pc, #24]	; (8015b98 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8015b80:	e7f0      	b.n	8015b64 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8015b82:	6870      	ldr	r0, [r6, #4]
 8015b84:	4669      	mov	r1, sp
 8015b86:	6803      	ldr	r3, [r0, #0]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	4798      	blx	r3
 8015b8c:	b009      	add	sp, #36	; 0x24
 8015b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b92:	bf00      	nop
 8015b94:	0802c23c 	.word	0x0802c23c
 8015b98:	0802c562 	.word	0x0802c562
 8015b9c:	0802c371 	.word	0x0802c371
 8015ba0:	0802c274 	.word	0x0802c274

08015ba4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015ba4:	b508      	push	{r3, lr}
 8015ba6:	290d      	cmp	r1, #13
 8015ba8:	d817      	bhi.n	8015bda <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015baa:	e8df f001 	tbb	[pc, r1]
 8015bae:	090b      	.short	0x090b
 8015bb0:	0d0d0d07 	.word	0x0d0d0d07
 8015bb4:	1414140d 	.word	0x1414140d
 8015bb8:	0d0d1414 	.word	0x0d0d1414
 8015bbc:	2020      	movs	r0, #32
 8015bbe:	bd08      	pop	{r3, pc}
 8015bc0:	2018      	movs	r0, #24
 8015bc2:	e7fc      	b.n	8015bbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015bc4:	2010      	movs	r0, #16
 8015bc6:	e7fa      	b.n	8015bbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015bc8:	4b05      	ldr	r3, [pc, #20]	; (8015be0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015bca:	f240 2177 	movw	r1, #631	; 0x277
 8015bce:	4a05      	ldr	r2, [pc, #20]	; (8015be4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015bd0:	4805      	ldr	r0, [pc, #20]	; (8015be8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015bd2:	f010 fa05 	bl	8025fe0 <__assert_func>
 8015bd6:	2008      	movs	r0, #8
 8015bd8:	e7f1      	b.n	8015bbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015bda:	2000      	movs	r0, #0
 8015bdc:	e7ef      	b.n	8015bbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015bde:	bf00      	nop
 8015be0:	0802c3ed 	.word	0x0802c3ed
 8015be4:	0802c87b 	.word	0x0802c87b
 8015be8:	0802c371 	.word	0x0802c371

08015bec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015bec:	b570      	push	{r4, r5, r6, lr}
 8015bee:	460d      	mov	r5, r1
 8015bf0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015bf4:	4616      	mov	r6, r2
 8015bf6:	461c      	mov	r4, r3
 8015bf8:	f7ff ffd4 	bl	8015ba4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015bfc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015c00:	10c0      	asrs	r0, r0, #3
 8015c02:	fb06 5101 	mla	r1, r6, r1, r5
 8015c06:	fb00 4001 	mla	r0, r0, r1, r4
 8015c0a:	bd70      	pop	{r4, r5, r6, pc}

08015c0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c10:	b08a      	sub	sp, #40	; 0x28
 8015c12:	f04f 0c00 	mov.w	ip, #0
 8015c16:	4604      	mov	r4, r0
 8015c18:	469a      	mov	sl, r3
 8015c1a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8015c1e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8015c22:	2d0b      	cmp	r5, #11
 8015c24:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8015c28:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015c2c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015c30:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015c34:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8015c38:	f8cd c014 	str.w	ip, [sp, #20]
 8015c3c:	d129      	bne.n	8015c92 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 8015c3e:	2080      	movs	r0, #128	; 0x80
 8015c40:	9204      	str	r2, [sp, #16]
 8015c42:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015c46:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015c4a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015c4e:	f8ad 701c 	strh.w	r7, [sp, #28]
 8015c52:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	f7ff fef0 	bl	8015a40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015c60:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015c64:	4603      	mov	r3, r0
 8015c66:	4651      	mov	r1, sl
 8015c68:	4620      	mov	r0, r4
 8015c6a:	e9cd 9800 	strd	r9, r8, [sp]
 8015c6e:	f7ff ffbd 	bl	8015bec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015c72:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8015c76:	9006      	str	r0, [sp, #24]
 8015c78:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015c7c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8015c80:	b107      	cbz	r7, 8015c84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8015c82:	b9d6      	cbnz	r6, 8015cba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8015c84:	4b17      	ldr	r3, [pc, #92]	; (8015ce4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015c86:	f240 11cf 	movw	r1, #463	; 0x1cf
 8015c8a:	4a17      	ldr	r2, [pc, #92]	; (8015ce8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015c8c:	4817      	ldr	r0, [pc, #92]	; (8015cec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8015c8e:	f010 f9a7 	bl	8025fe0 <__assert_func>
 8015c92:	2d02      	cmp	r5, #2
 8015c94:	d108      	bne.n	8015ca8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 8015c96:	2bff      	cmp	r3, #255	; 0xff
 8015c98:	d104      	bne.n	8015ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 8015c9a:	2800      	cmp	r0, #0
 8015c9c:	bf14      	ite	ne
 8015c9e:	2040      	movne	r0, #64	; 0x40
 8015ca0:	2020      	moveq	r0, #32
 8015ca2:	e7cd      	b.n	8015c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015ca4:	2040      	movs	r0, #64	; 0x40
 8015ca6:	e7cb      	b.n	8015c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015ca8:	2bff      	cmp	r3, #255	; 0xff
 8015caa:	d104      	bne.n	8015cb6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 8015cac:	2800      	cmp	r0, #0
 8015cae:	bf14      	ite	ne
 8015cb0:	2004      	movne	r0, #4
 8015cb2:	2001      	moveq	r0, #1
 8015cb4:	e7c4      	b.n	8015c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015cb6:	2004      	movs	r0, #4
 8015cb8:	e7c2      	b.n	8015c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015cba:	6823      	ldr	r3, [r4, #0]
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	9d02      	ldr	r5, [sp, #8]
 8015cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cc2:	4798      	blx	r3
 8015cc4:	4228      	tst	r0, r5
 8015cc6:	d104      	bne.n	8015cd2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 8015cc8:	4b09      	ldr	r3, [pc, #36]	; (8015cf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 8015cca:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8015cce:	4a06      	ldr	r2, [pc, #24]	; (8015ce8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015cd0:	e7dc      	b.n	8015c8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 8015cd2:	6860      	ldr	r0, [r4, #4]
 8015cd4:	a902      	add	r1, sp, #8
 8015cd6:	6803      	ldr	r3, [r0, #0]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	4798      	blx	r3
 8015cdc:	b00a      	add	sp, #40	; 0x28
 8015cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ce2:	bf00      	nop
 8015ce4:	0802c1bf 	.word	0x0802c1bf
 8015ce8:	0802c715 	.word	0x0802c715
 8015cec:	0802c371 	.word	0x0802c371
 8015cf0:	0802c1f7 	.word	0x0802c1f7

08015cf4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8015cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf8:	b08b      	sub	sp, #44	; 0x2c
 8015cfa:	469b      	mov	fp, r3
 8015cfc:	4604      	mov	r4, r0
 8015cfe:	4692      	mov	sl, r2
 8015d00:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015d04:	2600      	movs	r6, #0
 8015d06:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8015d0a:	4689      	mov	r9, r1
 8015d0c:	2fff      	cmp	r7, #255	; 0xff
 8015d0e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015d12:	9605      	str	r6, [sp, #20]
 8015d14:	bf14      	ite	ne
 8015d16:	2308      	movne	r3, #8
 8015d18:	2302      	moveq	r3, #2
 8015d1a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8015d1e:	f7ff fe8f 	bl	8015a40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015d22:	465a      	mov	r2, fp
 8015d24:	4603      	mov	r3, r0
 8015d26:	4651      	mov	r1, sl
 8015d28:	4620      	mov	r0, r4
 8015d2a:	e9cd 8500 	strd	r8, r5, [sp]
 8015d2e:	f7ff ff5d 	bl	8015bec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015d32:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015d36:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015d3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015d3e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015d42:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8015d46:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015d4a:	6823      	ldr	r3, [r4, #0]
 8015d4c:	9d02      	ldr	r5, [sp, #8]
 8015d4e:	9006      	str	r0, [sp, #24]
 8015d50:	4620      	mov	r0, r4
 8015d52:	f8ad 6020 	strh.w	r6, [sp, #32]
 8015d56:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8015d5a:	f8cd 9014 	str.w	r9, [sp, #20]
 8015d5e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d64:	4798      	blx	r3
 8015d66:	4228      	tst	r0, r5
 8015d68:	d106      	bne.n	8015d78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8015d6a:	4b07      	ldr	r3, [pc, #28]	; (8015d88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015d6c:	f240 212e 	movw	r1, #558	; 0x22e
 8015d70:	4a06      	ldr	r2, [pc, #24]	; (8015d8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015d72:	4807      	ldr	r0, [pc, #28]	; (8015d90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015d74:	f010 f934 	bl	8025fe0 <__assert_func>
 8015d78:	6860      	ldr	r0, [r4, #4]
 8015d7a:	a902      	add	r1, sp, #8
 8015d7c:	6803      	ldr	r3, [r0, #0]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	4798      	blx	r3
 8015d82:	b00b      	add	sp, #44	; 0x2c
 8015d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d88:	0802c1f7 	.word	0x0802c1f7
 8015d8c:	0802c7e6 	.word	0x0802c7e6
 8015d90:	0802c371 	.word	0x0802c371

08015d94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015d94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015d98:	461f      	mov	r7, r3
 8015d9a:	4b0b      	ldr	r3, [pc, #44]	; (8015dc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015d9c:	460d      	mov	r5, r1
 8015d9e:	4616      	mov	r6, r2
 8015da0:	f8b3 8000 	ldrh.w	r8, [r3]
 8015da4:	4604      	mov	r4, r0
 8015da6:	f7ef ffc7 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8015daa:	6803      	ldr	r3, [r0, #0]
 8015dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dae:	4798      	blx	r3
 8015db0:	463b      	mov	r3, r7
 8015db2:	4632      	mov	r2, r6
 8015db4:	4629      	mov	r1, r5
 8015db6:	e9cd 8000 	strd	r8, r0, [sp]
 8015dba:	4620      	mov	r0, r4
 8015dbc:	f7ff ff16 	bl	8015bec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015dc0:	b002      	add	sp, #8
 8015dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dc6:	bf00      	nop
 8015dc8:	200566f2 	.word	0x200566f2

08015dcc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8015dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd0:	4698      	mov	r8, r3
 8015dd2:	b088      	sub	sp, #32
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	4617      	mov	r7, r2
 8015dd8:	4604      	mov	r4, r0
 8015dda:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015dde:	9303      	str	r3, [sp, #12]
 8015de0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015de4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015de8:	f8ad 6014 	strh.w	r6, [sp, #20]
 8015dec:	f8ad 5016 	strh.w	r5, [sp, #22]
 8015df0:	e9cd 3100 	strd	r3, r1, [sp]
 8015df4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015df8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015dfc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015e00:	f88d 301c 	strb.w	r3, [sp, #28]
 8015e04:	f7ff fe1c 	bl	8015a40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e08:	4642      	mov	r2, r8
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	4639      	mov	r1, r7
 8015e0e:	4620      	mov	r0, r4
 8015e10:	f7ff ffc0 	bl	8015d94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015e14:	4b16      	ldr	r3, [pc, #88]	; (8015e70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8015e16:	9004      	str	r0, [sp, #16]
 8015e18:	881b      	ldrh	r3, [r3, #0]
 8015e1a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015e1e:	f7ef ff8b 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8015e22:	6803      	ldr	r3, [r0, #0]
 8015e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e26:	4798      	blx	r3
 8015e28:	f88d 001e 	strb.w	r0, [sp, #30]
 8015e2c:	f88d 001d 	strb.w	r0, [sp, #29]
 8015e30:	b106      	cbz	r6, 8015e34 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015e32:	b935      	cbnz	r5, 8015e42 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015e34:	4b0f      	ldr	r3, [pc, #60]	; (8015e74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8015e36:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8015e3a:	4a0f      	ldr	r2, [pc, #60]	; (8015e78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015e3c:	480f      	ldr	r0, [pc, #60]	; (8015e7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8015e3e:	f010 f8cf 	bl	8025fe0 <__assert_func>
 8015e42:	6823      	ldr	r3, [r4, #0]
 8015e44:	4620      	mov	r0, r4
 8015e46:	9d00      	ldr	r5, [sp, #0]
 8015e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e4a:	4798      	blx	r3
 8015e4c:	4228      	tst	r0, r5
 8015e4e:	d104      	bne.n	8015e5a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015e50:	4b0b      	ldr	r3, [pc, #44]	; (8015e80 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015e52:	f240 11ed 	movw	r1, #493	; 0x1ed
 8015e56:	4a08      	ldr	r2, [pc, #32]	; (8015e78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015e58:	e7f0      	b.n	8015e3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8015e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e5c:	4669      	mov	r1, sp
 8015e5e:	6860      	ldr	r0, [r4, #4]
 8015e60:	9303      	str	r3, [sp, #12]
 8015e62:	6803      	ldr	r3, [r0, #0]
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	4798      	blx	r3
 8015e68:	b008      	add	sp, #32
 8015e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e6e:	bf00      	nop
 8015e70:	200566f2 	.word	0x200566f2
 8015e74:	0802c1bf 	.word	0x0802c1bf
 8015e78:	0802c5c7 	.word	0x0802c5c7
 8015e7c:	0802c371 	.word	0x0802c371
 8015e80:	0802c1f7 	.word	0x0802c1f7

08015e84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	b08a      	sub	sp, #40	; 0x28
 8015e88:	4604      	mov	r4, r0
 8015e8a:	466b      	mov	r3, sp
 8015e8c:	e883 0006 	stmia.w	r3, {r1, r2}
 8015e90:	4b1f      	ldr	r3, [pc, #124]	; (8015f10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015e92:	781b      	ldrb	r3, [r3, #0]
 8015e94:	b933      	cbnz	r3, 8015ea4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8015e96:	4b1f      	ldr	r3, [pc, #124]	; (8015f14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015e98:	f240 213f 	movw	r1, #575	; 0x23f
 8015e9c:	4a1e      	ldr	r2, [pc, #120]	; (8015f18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8015e9e:	481f      	ldr	r0, [pc, #124]	; (8015f1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015ea0:	f010 f89e 	bl	8025fe0 <__assert_func>
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	f8bd 5000 	ldrh.w	r5, [sp]
 8015eaa:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015eae:	9305      	str	r3, [sp, #20]
 8015eb0:	2301      	movs	r3, #1
 8015eb2:	9302      	str	r3, [sp, #8]
 8015eb4:	6803      	ldr	r3, [r0, #0]
 8015eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eb8:	4798      	blx	r3
 8015eba:	4632      	mov	r2, r6
 8015ebc:	4629      	mov	r1, r5
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	4620      	mov	r0, r4
 8015ec2:	f7ff ff67 	bl	8015d94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015ec6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015ec8:	9003      	str	r0, [sp, #12]
 8015eca:	9306      	str	r3, [sp, #24]
 8015ecc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015ed0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015ed4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015ed8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015edc:	4b10      	ldr	r3, [pc, #64]	; (8015f20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015ede:	881b      	ldrh	r3, [r3, #0]
 8015ee0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015ee4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015ee8:	f7ef ff26 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8015eec:	6803      	ldr	r3, [r0, #0]
 8015eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ef0:	4798      	blx	r3
 8015ef2:	23ff      	movs	r3, #255	; 0xff
 8015ef4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015ef8:	a902      	add	r1, sp, #8
 8015efa:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015efe:	6860      	ldr	r0, [r4, #4]
 8015f00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015f04:	6803      	ldr	r3, [r0, #0]
 8015f06:	685b      	ldr	r3, [r3, #4]
 8015f08:	4798      	blx	r3
 8015f0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015f0c:	b00a      	add	sp, #40	; 0x28
 8015f0e:	bd70      	pop	{r4, r5, r6, pc}
 8015f10:	200566f7 	.word	0x200566f7
 8015f14:	0802c2be 	.word	0x0802c2be
 8015f18:	0802c66b 	.word	0x0802c66b
 8015f1c:	0802c371 	.word	0x0802c371
 8015f20:	200566f2 	.word	0x200566f2

08015f24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f26:	b08b      	sub	sp, #44	; 0x2c
 8015f28:	4604      	mov	r4, r0
 8015f2a:	466d      	mov	r5, sp
 8015f2c:	e885 0006 	stmia.w	r5, {r1, r2}
 8015f30:	461d      	mov	r5, r3
 8015f32:	2300      	movs	r3, #0
 8015f34:	f8bd 6000 	ldrh.w	r6, [sp]
 8015f38:	9305      	str	r3, [sp, #20]
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015f40:	9302      	str	r3, [sp, #8]
 8015f42:	6803      	ldr	r3, [r0, #0]
 8015f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f46:	4798      	blx	r3
 8015f48:	463a      	mov	r2, r7
 8015f4a:	4631      	mov	r1, r6
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f7ff ff20 	bl	8015d94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015f54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015f58:	9003      	str	r0, [sp, #12]
 8015f5a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015f5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015f62:	9506      	str	r5, [sp, #24]
 8015f64:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015f68:	4b0d      	ldr	r3, [pc, #52]	; (8015fa0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8015f6a:	881b      	ldrh	r3, [r3, #0]
 8015f6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015f70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f72:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015f76:	f7ef fedf 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8015f7a:	6803      	ldr	r3, [r0, #0]
 8015f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f7e:	4798      	blx	r3
 8015f80:	23ff      	movs	r3, #255	; 0xff
 8015f82:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015f86:	a902      	add	r1, sp, #8
 8015f88:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015f8c:	6860      	ldr	r0, [r4, #4]
 8015f8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015f92:	6803      	ldr	r3, [r0, #0]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	4798      	blx	r3
 8015f98:	4628      	mov	r0, r5
 8015f9a:	b00b      	add	sp, #44	; 0x2c
 8015f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	200566f2 	.word	0x200566f2

08015fa4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015fa4:	b570      	push	{r4, r5, r6, lr}
 8015fa6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8015faa:	4604      	mov	r4, r0
 8015fac:	b19b      	cbz	r3, 8015fd6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015fae:	2002      	movs	r0, #2
 8015fb0:	f7ed f974 	bl	800329c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015fbc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015fc0:	6823      	ldr	r3, [r4, #0]
 8015fc2:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8015fc6:	f7ff fd3b 	bl	8015a40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015fca:	4601      	mov	r1, r0
 8015fcc:	4620      	mov	r0, r4
 8015fce:	462b      	mov	r3, r5
 8015fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fd4:	4718      	bx	r3
 8015fd6:	bd70      	pop	{r4, r5, r6, pc}

08015fd8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015fd8:	b538      	push	{r3, r4, r5, lr}
 8015fda:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8015fde:	4604      	mov	r4, r0
 8015fe0:	460d      	mov	r5, r1
 8015fe2:	428a      	cmp	r2, r1
 8015fe4:	d008      	beq.n	8015ff8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8015fe6:	2a01      	cmp	r2, #1
 8015fe8:	6803      	ldr	r3, [r0, #0]
 8015fea:	d106      	bne.n	8015ffa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8015fec:	b929      	cbnz	r1, 8015ffa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8015fee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015ff2:	4798      	blx	r3
 8015ff4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8015ff8:	bd38      	pop	{r3, r4, r5, pc}
 8015ffa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015ffe:	4620      	mov	r0, r4
 8016000:	e7f7      	b.n	8015ff2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08016004 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016004:	4b0d      	ldr	r3, [pc, #52]	; (801603c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016006:	b510      	push	{r4, lr}
 8016008:	781b      	ldrb	r3, [r3, #0]
 801600a:	4604      	mov	r4, r0
 801600c:	b95b      	cbnz	r3, 8016026 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801600e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016012:	2b02      	cmp	r3, #2
 8016014:	d007      	beq.n	8016026 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016016:	6840      	ldr	r0, [r0, #4]
 8016018:	f000 f93a 	bl	8016290 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801601c:	b118      	cbz	r0, 8016026 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801601e:	6862      	ldr	r2, [r4, #4]
 8016020:	7a53      	ldrb	r3, [r2, #9]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d0fc      	beq.n	8016020 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016026:	f7ed fb85 	bl	8003734 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801602a:	4620      	mov	r0, r4
 801602c:	2100      	movs	r1, #0
 801602e:	f7ff ffd3 	bl	8015fd8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016032:	4620      	mov	r0, r4
 8016034:	f7ff fd04 	bl	8015a40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016038:	bd10      	pop	{r4, pc}
 801603a:	bf00      	nop
 801603c:	200566f6 	.word	0x200566f6

08016040 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016040:	4770      	bx	lr

08016042 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016042:	2000      	movs	r0, #0
 8016044:	4770      	bx	lr

08016046 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016046:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801604a:	1a13      	subs	r3, r2, r0
 801604c:	4258      	negs	r0, r3
 801604e:	4158      	adcs	r0, r3
 8016050:	4770      	bx	lr

08016052 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016052:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016056:	1a9b      	subs	r3, r3, r2
 8016058:	2b00      	cmp	r3, #0
 801605a:	bfdc      	itt	le
 801605c:	6882      	ldrle	r2, [r0, #8]
 801605e:	189b      	addle	r3, r3, r2
 8016060:	2b01      	cmp	r3, #1
 8016062:	bfcc      	ite	gt
 8016064:	2000      	movgt	r0, #0
 8016066:	2001      	movle	r0, #1
 8016068:	4770      	bx	lr

0801606a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801606a:	6902      	ldr	r2, [r0, #16]
 801606c:	6840      	ldr	r0, [r0, #4]
 801606e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016072:	4770      	bx	lr

08016074 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016074:	6803      	ldr	r3, [r0, #0]
 8016076:	691b      	ldr	r3, [r3, #16]
 8016078:	4718      	bx	r3

0801607a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801607a:	4770      	bx	lr

0801607c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801607c:	4770      	bx	lr
	...

08016080 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016080:	2301      	movs	r3, #1
 8016082:	b570      	push	{r4, r5, r6, lr}
 8016084:	7203      	strb	r3, [r0, #8]
 8016086:	4604      	mov	r4, r0
 8016088:	6840      	ldr	r0, [r0, #4]
 801608a:	6803      	ldr	r3, [r0, #0]
 801608c:	699b      	ldr	r3, [r3, #24]
 801608e:	4798      	blx	r3
 8016090:	6803      	ldr	r3, [r0, #0]
 8016092:	4605      	mov	r5, r0
 8016094:	2b40      	cmp	r3, #64	; 0x40
 8016096:	d039      	beq.n	801610c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016098:	d815      	bhi.n	80160c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801609a:	2b04      	cmp	r3, #4
 801609c:	d022      	beq.n	80160e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801609e:	d808      	bhi.n	80160b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80160a0:	2b01      	cmp	r3, #1
 80160a2:	d033      	beq.n	801610c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80160a4:	2b02      	cmp	r3, #2
 80160a6:	d108      	bne.n	80160ba <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 80160a8:	6823      	ldr	r3, [r4, #0]
 80160aa:	4620      	mov	r0, r4
 80160ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160ae:	4798      	blx	r3
 80160b0:	e025      	b.n	80160fe <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 80160b2:	2b08      	cmp	r3, #8
 80160b4:	d01e      	beq.n	80160f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 80160b6:	2b20      	cmp	r3, #32
 80160b8:	d028      	beq.n	801610c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80160ba:	4b17      	ldr	r3, [pc, #92]	; (8016118 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 80160bc:	218b      	movs	r1, #139	; 0x8b
 80160be:	4a17      	ldr	r2, [pc, #92]	; (801611c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80160c0:	4817      	ldr	r0, [pc, #92]	; (8016120 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80160c2:	f00f ff8d 	bl	8025fe0 <__assert_func>
 80160c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160ca:	d01f      	beq.n	801610c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80160cc:	d804      	bhi.n	80160d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 80160ce:	2b80      	cmp	r3, #128	; 0x80
 80160d0:	d01c      	beq.n	801610c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80160d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160d6:	e7ef      	b.n	80160b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80160d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80160dc:	d016      	beq.n	801610c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80160de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80160e2:	e7e0      	b.n	80160a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80160e4:	6823      	ldr	r3, [r4, #0]
 80160e6:	7f01      	ldrb	r1, [r0, #28]
 80160e8:	4620      	mov	r0, r4
 80160ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160ec:	4798      	blx	r3
 80160ee:	6823      	ldr	r3, [r4, #0]
 80160f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160f2:	e006      	b.n	8016102 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80160f4:	6823      	ldr	r3, [r4, #0]
 80160f6:	7f01      	ldrb	r1, [r0, #28]
 80160f8:	4620      	mov	r0, r4
 80160fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160fc:	4798      	blx	r3
 80160fe:	6823      	ldr	r3, [r4, #0]
 8016100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016102:	4629      	mov	r1, r5
 8016104:	4620      	mov	r0, r4
 8016106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801610a:	4718      	bx	r3
 801610c:	6823      	ldr	r3, [r4, #0]
 801610e:	4620      	mov	r0, r4
 8016110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016112:	4798      	blx	r3
 8016114:	e7eb      	b.n	80160ee <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016116:	bf00      	nop
 8016118:	0802c8c4 	.word	0x0802c8c4
 801611c:	0802c9d4 	.word	0x0802c9d4
 8016120:	0802c8e9 	.word	0x0802c8e9

08016124 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016124:	b570      	push	{r4, r5, r6, lr}
 8016126:	4604      	mov	r4, r0
 8016128:	460e      	mov	r6, r1
 801612a:	6860      	ldr	r0, [r4, #4]
 801612c:	6803      	ldr	r3, [r0, #0]
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	4798      	blx	r3
 8016132:	2800      	cmp	r0, #0
 8016134:	d1f9      	bne.n	801612a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016136:	4d0d      	ldr	r5, [pc, #52]	; (801616c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016138:	6828      	ldr	r0, [r5, #0]
 801613a:	6803      	ldr	r3, [r0, #0]
 801613c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801613e:	4798      	blx	r3
 8016140:	f7ed fb12 	bl	8003768 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016144:	6828      	ldr	r0, [r5, #0]
 8016146:	2101      	movs	r1, #1
 8016148:	f7ff ff46 	bl	8015fd8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801614c:	6860      	ldr	r0, [r4, #4]
 801614e:	4631      	mov	r1, r6
 8016150:	6803      	ldr	r3, [r0, #0]
 8016152:	689b      	ldr	r3, [r3, #8]
 8016154:	4798      	blx	r3
 8016156:	6823      	ldr	r3, [r4, #0]
 8016158:	4620      	mov	r0, r4
 801615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801615c:	4798      	blx	r3
 801615e:	6828      	ldr	r0, [r5, #0]
 8016160:	6803      	ldr	r3, [r0, #0]
 8016162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016168:	4718      	bx	r3
 801616a:	bf00      	nop
 801616c:	200566f8 	.word	0x200566f8

08016170 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016170:	b508      	push	{r3, lr}
 8016172:	f7ed fadf 	bl	8003734 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801617a:	f7ed bae9 	b.w	8003750 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801617e <_ZN8touchgfx13DMA_Interface5startEv>:
 801617e:	b510      	push	{r4, lr}
 8016180:	4604      	mov	r4, r0
 8016182:	6840      	ldr	r0, [r0, #4]
 8016184:	6803      	ldr	r3, [r0, #0]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	4798      	blx	r3
 801618a:	b948      	cbnz	r0, 80161a0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801618c:	7a63      	ldrb	r3, [r4, #9]
 801618e:	b13b      	cbz	r3, 80161a0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016190:	7a23      	ldrb	r3, [r4, #8]
 8016192:	b92b      	cbnz	r3, 80161a0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016194:	6823      	ldr	r3, [r4, #0]
 8016196:	4620      	mov	r0, r4
 8016198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801619a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801619e:	4718      	bx	r3
 80161a0:	bd10      	pop	{r4, pc}
	...

080161a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80161a4:	b510      	push	{r4, lr}
 80161a6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80161aa:	1b12      	subs	r2, r2, r4
 80161ac:	2a00      	cmp	r2, #0
 80161ae:	bfdc      	itt	le
 80161b0:	6883      	ldrle	r3, [r0, #8]
 80161b2:	18d2      	addle	r2, r2, r3
 80161b4:	2a01      	cmp	r2, #1
 80161b6:	dd18      	ble.n	80161ea <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80161b8:	6843      	ldr	r3, [r0, #4]
 80161ba:	f101 021c 	add.w	r2, r1, #28
 80161be:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80161c2:	f851 4b04 	ldr.w	r4, [r1], #4
 80161c6:	4291      	cmp	r1, r2
 80161c8:	f843 4b04 	str.w	r4, [r3], #4
 80161cc:	d1f9      	bne.n	80161c2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80161ce:	880a      	ldrh	r2, [r1, #0]
 80161d0:	801a      	strh	r2, [r3, #0]
 80161d2:	788a      	ldrb	r2, [r1, #2]
 80161d4:	709a      	strb	r2, [r3, #2]
 80161d6:	68c3      	ldr	r3, [r0, #12]
 80161d8:	6882      	ldr	r2, [r0, #8]
 80161da:	f3bf 8f5b 	dmb	ish
 80161de:	3301      	adds	r3, #1
 80161e0:	429a      	cmp	r2, r3
 80161e2:	bfd8      	it	le
 80161e4:	1a9b      	suble	r3, r3, r2
 80161e6:	60c3      	str	r3, [r0, #12]
 80161e8:	bd10      	pop	{r4, pc}
 80161ea:	4b03      	ldr	r3, [pc, #12]	; (80161f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80161ec:	2139      	movs	r1, #57	; 0x39
 80161ee:	4a03      	ldr	r2, [pc, #12]	; (80161fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80161f0:	4803      	ldr	r0, [pc, #12]	; (8016200 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80161f2:	f00f fef5 	bl	8025fe0 <__assert_func>
 80161f6:	bf00      	nop
 80161f8:	0802c90f 	.word	0x0802c90f
 80161fc:	0802ca04 	.word	0x0802ca04
 8016200:	0802c8e9 	.word	0x0802c8e9

08016204 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016204:	b510      	push	{r4, lr}
 8016206:	6803      	ldr	r3, [r0, #0]
 8016208:	4604      	mov	r4, r0
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	4798      	blx	r3
 801620e:	b128      	cbz	r0, 801621c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016210:	4b07      	ldr	r3, [pc, #28]	; (8016230 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016212:	213f      	movs	r1, #63	; 0x3f
 8016214:	4a07      	ldr	r2, [pc, #28]	; (8016234 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016216:	4808      	ldr	r0, [pc, #32]	; (8016238 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016218:	f00f fee2 	bl	8025fe0 <__assert_func>
 801621c:	6923      	ldr	r3, [r4, #16]
 801621e:	68a2      	ldr	r2, [r4, #8]
 8016220:	f3bf 8f5b 	dmb	ish
 8016224:	3301      	adds	r3, #1
 8016226:	429a      	cmp	r2, r3
 8016228:	bfd8      	it	le
 801622a:	1a9b      	suble	r3, r3, r2
 801622c:	6123      	str	r3, [r4, #16]
 801622e:	bd10      	pop	{r4, pc}
 8016230:	0802c932 	.word	0x0802c932
 8016234:	0802ca52 	.word	0x0802ca52
 8016238:	0802c8e9 	.word	0x0802c8e9

0801623c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801623c:	b570      	push	{r4, r5, r6, lr}
 801623e:	4604      	mov	r4, r0
 8016240:	6840      	ldr	r0, [r0, #4]
 8016242:	6803      	ldr	r3, [r0, #0]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	4798      	blx	r3
 8016248:	4605      	mov	r5, r0
 801624a:	b930      	cbnz	r0, 801625a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801624c:	7a23      	ldrb	r3, [r4, #8]
 801624e:	b123      	cbz	r3, 801625a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016250:	6860      	ldr	r0, [r4, #4]
 8016252:	6803      	ldr	r3, [r0, #0]
 8016254:	695b      	ldr	r3, [r3, #20]
 8016256:	4798      	blx	r3
 8016258:	7225      	strb	r5, [r4, #8]
 801625a:	6860      	ldr	r0, [r4, #4]
 801625c:	6803      	ldr	r3, [r0, #0]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	4798      	blx	r3
 8016262:	b928      	cbnz	r0, 8016270 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016264:	6823      	ldr	r3, [r4, #0]
 8016266:	4620      	mov	r0, r4
 8016268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801626a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801626e:	4718      	bx	r3
 8016270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016274:	f7ed ba84 	b.w	8003780 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016278 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016278:	b510      	push	{r4, lr}
 801627a:	6082      	str	r2, [r0, #8]
 801627c:	2200      	movs	r2, #0
 801627e:	4c03      	ldr	r4, [pc, #12]	; (801628c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016280:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016284:	e9c0 4100 	strd	r4, r1, [r0]
 8016288:	bd10      	pop	{r4, pc}
 801628a:	bf00      	nop
 801628c:	0802c9b8 	.word	0x0802c9b8

08016290 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016290:	6840      	ldr	r0, [r0, #4]
 8016292:	6803      	ldr	r3, [r0, #0]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	4718      	bx	r3

08016298 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016298:	2001      	movs	r0, #1
 801629a:	4770      	bx	lr

0801629c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801629c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162a0:	460d      	mov	r5, r1
 80162a2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80162a6:	b085      	sub	sp, #20
 80162a8:	4690      	mov	r8, r2
 80162aa:	4411      	add	r1, r2
 80162ac:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80162b0:	4699      	mov	r9, r3
 80162b2:	6803      	ldr	r3, [r0, #0]
 80162b4:	60c1      	str	r1, [r0, #12]
 80162b6:	4604      	mov	r4, r0
 80162b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80162ba:	440a      	add	r2, r1
 80162bc:	6102      	str	r2, [r0, #16]
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80162c4:	4798      	blx	r3
 80162c6:	2800      	cmp	r0, #0
 80162c8:	d03a      	beq.n	8016340 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 80162ca:	44c8      	add	r8, r9
 80162cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80162d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80162d4:	4445      	add	r5, r8
 80162d6:	442e      	add	r6, r5
 80162d8:	6823      	ldr	r3, [r4, #0]
 80162da:	f10d 020f 	add.w	r2, sp, #15
 80162de:	a903      	add	r1, sp, #12
 80162e0:	4620      	mov	r0, r4
 80162e2:	9200      	str	r2, [sp, #0]
 80162e4:	f10d 020d 	add.w	r2, sp, #13
 80162e8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80162ec:	f10d 030e 	add.w	r3, sp, #14
 80162f0:	47c0      	blx	r8
 80162f2:	b1f0      	cbz	r0, 8016332 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 80162f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80162f8:	7a20      	ldrb	r0, [r4, #8]
 80162fa:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80162fe:	4358      	muls	r0, r3
 8016300:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016304:	1c43      	adds	r3, r0, #1
 8016306:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801630a:	7838      	ldrb	r0, [r7, #0]
 801630c:	121b      	asrs	r3, r3, #8
 801630e:	fb10 f003 	smulbb	r0, r0, r3
 8016312:	b283      	uxth	r3, r0
 8016314:	1c58      	adds	r0, r3, #1
 8016316:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801631a:	6823      	ldr	r3, [r4, #0]
 801631c:	1200      	asrs	r0, r0, #8
 801631e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8016322:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016326:	28ff      	cmp	r0, #255	; 0xff
 8016328:	d10d      	bne.n	8016346 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 801632a:	9100      	str	r1, [sp, #0]
 801632c:	4629      	mov	r1, r5
 801632e:	4620      	mov	r0, r4
 8016330:	47c0      	blx	r8
 8016332:	68e3      	ldr	r3, [r4, #12]
 8016334:	3503      	adds	r5, #3
 8016336:	3701      	adds	r7, #1
 8016338:	3301      	adds	r3, #1
 801633a:	42ae      	cmp	r6, r5
 801633c:	60e3      	str	r3, [r4, #12]
 801633e:	d8cb      	bhi.n	80162d8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 8016340:	b005      	add	sp, #20
 8016342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016346:	fa1f fc80 	uxth.w	ip, r0
 801634a:	43c0      	mvns	r0, r0
 801634c:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016350:	fb12 f20c 	smulbb	r2, r2, ip
 8016354:	b2c0      	uxtb	r0, r0
 8016356:	fb13 f30c 	smulbb	r3, r3, ip
 801635a:	fb0e 2200 	mla	r2, lr, r0, r2
 801635e:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016362:	fb11 f10c 	smulbb	r1, r1, ip
 8016366:	fb0e 3300 	mla	r3, lr, r0, r3
 801636a:	f895 e000 	ldrb.w	lr, [r5]
 801636e:	b292      	uxth	r2, r2
 8016370:	b29b      	uxth	r3, r3
 8016372:	fb0e 1000 	mla	r0, lr, r0, r1
 8016376:	1c59      	adds	r1, r3, #1
 8016378:	b280      	uxth	r0, r0
 801637a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801637e:	1c51      	adds	r1, r2, #1
 8016380:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016384:	1c41      	adds	r1, r0, #1
 8016386:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801638a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801638e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016392:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016396:	9000      	str	r0, [sp, #0]
 8016398:	e7c8      	b.n	801632c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0801639a <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801639a:	f89d 0000 	ldrb.w	r0, [sp]
 801639e:	704b      	strb	r3, [r1, #1]
 80163a0:	7008      	strb	r0, [r1, #0]
 80163a2:	708a      	strb	r2, [r1, #2]
 80163a4:	4770      	bx	lr

080163a6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80163a6:	4413      	add	r3, r2
 80163a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80163ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ae:	4419      	add	r1, r3
 80163b0:	7a03      	ldrb	r3, [r0, #8]
 80163b2:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 80163b6:	2bff      	cmp	r3, #255	; 0xff
 80163b8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80163bc:	440e      	add	r6, r1
 80163be:	d13d      	bne.n	801643c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 80163c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80163c4:	3103      	adds	r1, #3
 80163c6:	7d87      	ldrb	r7, [r0, #22]
 80163c8:	2bff      	cmp	r3, #255	; 0xff
 80163ca:	d10a      	bne.n	80163e2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 80163cc:	f801 7c03 	strb.w	r7, [r1, #-3]
 80163d0:	7d43      	ldrb	r3, [r0, #21]
 80163d2:	f801 3c02 	strb.w	r3, [r1, #-2]
 80163d6:	7d03      	ldrb	r3, [r0, #20]
 80163d8:	f801 3c01 	strb.w	r3, [r1, #-1]
 80163dc:	428e      	cmp	r6, r1
 80163de:	d8ef      	bhi.n	80163c0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 80163e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163e2:	b29a      	uxth	r2, r3
 80163e4:	43db      	mvns	r3, r3
 80163e6:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80163ea:	fb17 f702 	smulbb	r7, r7, r2
 80163ee:	b2db      	uxtb	r3, r3
 80163f0:	fb05 7503 	mla	r5, r5, r3, r7
 80163f4:	b2ad      	uxth	r5, r5
 80163f6:	1c6f      	adds	r7, r5, #1
 80163f8:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80163fc:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 8016400:	fb17 f703 	smulbb	r7, r7, r3
 8016404:	122d      	asrs	r5, r5, #8
 8016406:	f801 5c03 	strb.w	r5, [r1, #-3]
 801640a:	7d45      	ldrb	r5, [r0, #21]
 801640c:	fb05 7502 	mla	r5, r5, r2, r7
 8016410:	b2ad      	uxth	r5, r5
 8016412:	1c6f      	adds	r7, r5, #1
 8016414:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8016418:	122d      	asrs	r5, r5, #8
 801641a:	f801 5c02 	strb.w	r5, [r1, #-2]
 801641e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016422:	7d07      	ldrb	r7, [r0, #20]
 8016424:	fb15 f303 	smulbb	r3, r5, r3
 8016428:	fb07 3202 	mla	r2, r7, r2, r3
 801642c:	b292      	uxth	r2, r2
 801642e:	1c53      	adds	r3, r2, #1
 8016430:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016434:	1212      	asrs	r2, r2, #8
 8016436:	f801 2c01 	strb.w	r2, [r1, #-1]
 801643a:	e7cf      	b.n	80163dc <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 801643c:	3103      	adds	r1, #3
 801643e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016442:	428e      	cmp	r6, r1
 8016444:	7a03      	ldrb	r3, [r0, #8]
 8016446:	f101 0103 	add.w	r1, r1, #3
 801644a:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801644e:	fb02 f303 	mul.w	r3, r2, r3
 8016452:	f103 0201 	add.w	r2, r3, #1
 8016456:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801645a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801645e:	b295      	uxth	r5, r2
 8016460:	ea6f 0202 	mvn.w	r2, r2
 8016464:	b2d3      	uxtb	r3, r2
 8016466:	7d82      	ldrb	r2, [r0, #22]
 8016468:	fb1c fc03 	smulbb	ip, ip, r3
 801646c:	fb02 c205 	mla	r2, r2, r5, ip
 8016470:	b292      	uxth	r2, r2
 8016472:	f102 0c01 	add.w	ip, r2, #1
 8016476:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801647a:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801647e:	fb1c fc03 	smulbb	ip, ip, r3
 8016482:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016486:	f801 2c06 	strb.w	r2, [r1, #-6]
 801648a:	7d42      	ldrb	r2, [r0, #21]
 801648c:	fb02 c205 	mla	r2, r2, r5, ip
 8016490:	b292      	uxth	r2, r2
 8016492:	f102 0c01 	add.w	ip, r2, #1
 8016496:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801649a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801649e:	f801 2c05 	strb.w	r2, [r1, #-5]
 80164a2:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80164a6:	f890 c014 	ldrb.w	ip, [r0, #20]
 80164aa:	fb12 f303 	smulbb	r3, r2, r3
 80164ae:	fb0c 3305 	mla	r3, ip, r5, r3
 80164b2:	b29b      	uxth	r3, r3
 80164b4:	f103 0201 	add.w	r2, r3, #1
 80164b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80164bc:	ea4f 2323 	mov.w	r3, r3, asr #8
 80164c0:	f801 3c04 	strb.w	r3, [r1, #-4]
 80164c4:	d8bb      	bhi.n	801643e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 80164c6:	e78b      	b.n	80163e0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

080164c8 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 80164c8:	b510      	push	{r4, lr}
 80164ca:	7d04      	ldrb	r4, [r0, #20]
 80164cc:	700c      	strb	r4, [r1, #0]
 80164ce:	7d41      	ldrb	r1, [r0, #21]
 80164d0:	7011      	strb	r1, [r2, #0]
 80164d2:	7d82      	ldrb	r2, [r0, #22]
 80164d4:	2001      	movs	r0, #1
 80164d6:	701a      	strb	r2, [r3, #0]
 80164d8:	22ff      	movs	r2, #255	; 0xff
 80164da:	9b02      	ldr	r3, [sp, #8]
 80164dc:	701a      	strb	r2, [r3, #0]
 80164de:	bd10      	pop	{r4, pc}

080164e0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80164e0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80164e4:	4770      	bx	lr

080164e6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80164e6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80164ea:	4770      	bx	lr

080164ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80164ec:	6281      	str	r1, [r0, #40]	; 0x28
 80164ee:	4770      	bx	lr

080164f0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80164f0:	b510      	push	{r4, lr}
 80164f2:	2200      	movs	r2, #0
 80164f4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80164f8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80164fc:	8002      	strh	r2, [r0, #0]
 80164fe:	8042      	strh	r2, [r0, #2]
 8016500:	8084      	strh	r4, [r0, #4]
 8016502:	80c1      	strh	r1, [r0, #6]
 8016504:	bd10      	pop	{r4, pc}

08016506 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016506:	2200      	movs	r2, #0
 8016508:	8002      	strh	r2, [r0, #0]
 801650a:	8042      	strh	r2, [r0, #2]
 801650c:	8082      	strh	r2, [r0, #4]
 801650e:	80c2      	strh	r2, [r0, #6]
 8016510:	4770      	bx	lr
	...

08016514 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016514:	b508      	push	{r3, lr}
 8016516:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016518:	b928      	cbnz	r0, 8016526 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801651a:	4b03      	ldr	r3, [pc, #12]	; (8016528 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801651c:	2126      	movs	r1, #38	; 0x26
 801651e:	4a03      	ldr	r2, [pc, #12]	; (801652c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016520:	4803      	ldr	r0, [pc, #12]	; (8016530 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016522:	f00f fd5d 	bl	8025fe0 <__assert_func>
 8016526:	bd08      	pop	{r3, pc}
 8016528:	0802cac4 	.word	0x0802cac4
 801652c:	0802cba4 	.word	0x0802cba4
 8016530:	0802caeb 	.word	0x0802caeb

08016534 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016534:	b510      	push	{r4, lr}
 8016536:	f9b1 4000 	ldrsh.w	r4, [r1]
 801653a:	888a      	ldrh	r2, [r1, #4]
 801653c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016540:	4422      	add	r2, r4
 8016542:	b212      	sxth	r2, r2
 8016544:	4293      	cmp	r3, r2
 8016546:	da15      	bge.n	8016574 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016548:	8882      	ldrh	r2, [r0, #4]
 801654a:	4413      	add	r3, r2
 801654c:	b21b      	sxth	r3, r3
 801654e:	429c      	cmp	r4, r3
 8016550:	da10      	bge.n	8016574 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016552:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016556:	88c9      	ldrh	r1, [r1, #6]
 8016558:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801655c:	4419      	add	r1, r3
 801655e:	b209      	sxth	r1, r1
 8016560:	428a      	cmp	r2, r1
 8016562:	da07      	bge.n	8016574 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016564:	88c0      	ldrh	r0, [r0, #6]
 8016566:	4410      	add	r0, r2
 8016568:	b200      	sxth	r0, r0
 801656a:	4283      	cmp	r3, r0
 801656c:	bfac      	ite	ge
 801656e:	2000      	movge	r0, #0
 8016570:	2001      	movlt	r0, #1
 8016572:	bd10      	pop	{r4, pc}
 8016574:	2000      	movs	r0, #0
 8016576:	e7fc      	b.n	8016572 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016578 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801657c:	b08b      	sub	sp, #44	; 0x2c
 801657e:	4604      	mov	r4, r0
 8016580:	6808      	ldr	r0, [r1, #0]
 8016582:	f04f 0a00 	mov.w	sl, #0
 8016586:	6849      	ldr	r1, [r1, #4]
 8016588:	ab04      	add	r3, sp, #16
 801658a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 801658e:	c303      	stmia	r3!, {r0, r1}
 8016590:	4b35      	ldr	r3, [pc, #212]	; (8016668 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8016592:	4621      	mov	r1, r4
 8016594:	a806      	add	r0, sp, #24
 8016596:	781b      	ldrb	r3, [r3, #0]
 8016598:	2b01      	cmp	r3, #1
 801659a:	6823      	ldr	r3, [r4, #0]
 801659c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801659e:	bf1f      	itttt	ne
 80165a0:	f10d 090e 	addne.w	r9, sp, #14
 80165a4:	ae05      	addne	r6, sp, #20
 80165a6:	f10d 0516 	addne.w	r5, sp, #22
 80165aa:	f10d 0812 	addne.w	r8, sp, #18
 80165ae:	bf01      	itttt	eq
 80165b0:	f10d 0916 	addeq.w	r9, sp, #22
 80165b4:	f10d 060e 	addeq.w	r6, sp, #14
 80165b8:	ad05      	addeq	r5, sp, #20
 80165ba:	f10d 0810 	addeq.w	r8, sp, #16
 80165be:	4798      	blx	r3
 80165c0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80165c4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d042      	beq.n	8016652 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 80165cc:	4293      	cmp	r3, r2
 80165ce:	bfa8      	it	ge
 80165d0:	4613      	movge	r3, r2
 80165d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80165d6:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80165da:	2f00      	cmp	r7, #0
 80165dc:	dd21      	ble.n	8016622 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 80165de:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80165e2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80165e6:	f9b6 2000 	ldrsh.w	r2, [r6]
 80165ea:	f9b9 3000 	ldrsh.w	r3, [r9]
 80165ee:	f8ad 0020 	strh.w	r0, [sp, #32]
 80165f2:	a808      	add	r0, sp, #32
 80165f4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80165f8:	a906      	add	r1, sp, #24
 80165fa:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80165fe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016602:	f7ff ff97 	bl	8016534 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016606:	9001      	str	r0, [sp, #4]
 8016608:	b1d0      	cbz	r0, 8016640 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801660a:	6822      	ldr	r2, [r4, #0]
 801660c:	a908      	add	r1, sp, #32
 801660e:	4620      	mov	r0, r4
 8016610:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8016612:	4790      	blx	r2
 8016614:	b9a0      	cbnz	r0, 8016640 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8016616:	107f      	asrs	r7, r7, #1
 8016618:	9b01      	ldr	r3, [sp, #4]
 801661a:	f8ad 700e 	strh.w	r7, [sp, #14]
 801661e:	469a      	mov	sl, r3
 8016620:	e7d9      	b.n	80165d6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016622:	d10d      	bne.n	8016640 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8016624:	2301      	movs	r3, #1
 8016626:	f8ad 300e 	strh.w	r3, [sp, #14]
 801662a:	f8b8 2000 	ldrh.w	r2, [r8]
 801662e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8016632:	440a      	add	r2, r1
 8016634:	f8a8 2000 	strh.w	r2, [r8]
 8016638:	882b      	ldrh	r3, [r5, #0]
 801663a:	1a5b      	subs	r3, r3, r1
 801663c:	802b      	strh	r3, [r5, #0]
 801663e:	e7bf      	b.n	80165c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016640:	f1ba 0f00 	cmp.w	sl, #0
 8016644:	d0f1      	beq.n	801662a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8016646:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 801664a:	455b      	cmp	r3, fp
 801664c:	bf08      	it	eq
 801664e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016650:	e7eb      	b.n	801662a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8016652:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016656:	429a      	cmp	r2, r3
 8016658:	bf04      	itt	eq
 801665a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801665e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016660:	b00b      	add	sp, #44	; 0x2c
 8016662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016666:	bf00      	nop
 8016668:	200566f0 	.word	0x200566f0

0801666c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801666c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801666e:	b085      	sub	sp, #20
 8016670:	6803      	ldr	r3, [r0, #0]
 8016672:	4604      	mov	r4, r0
 8016674:	4601      	mov	r1, r0
 8016676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016678:	4668      	mov	r0, sp
 801667a:	4798      	blx	r3
 801667c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8016680:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8016684:	2300      	movs	r3, #0
 8016686:	a902      	add	r1, sp, #8
 8016688:	4668      	mov	r0, sp
 801668a:	9302      	str	r3, [sp, #8]
 801668c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8016690:	f8ad 500e 	strh.w	r5, [sp, #14]
 8016694:	f7ff ff4e 	bl	8016534 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016698:	b340      	cbz	r0, 80166ec <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 801669a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801669e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 80166a2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80166a6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80166aa:	443a      	add	r2, r7
 80166ac:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 80166b0:	f8ad 0000 	strh.w	r0, [sp]
 80166b4:	b292      	uxth	r2, r2
 80166b6:	f8ad 1002 	strh.w	r1, [sp, #2]
 80166ba:	b217      	sxth	r7, r2
 80166bc:	42be      	cmp	r6, r7
 80166be:	bfd8      	it	le
 80166c0:	b2b2      	uxthle	r2, r6
 80166c2:	1a12      	subs	r2, r2, r0
 80166c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80166c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80166cc:	4413      	add	r3, r2
 80166ce:	b29b      	uxth	r3, r3
 80166d0:	b21a      	sxth	r2, r3
 80166d2:	4295      	cmp	r5, r2
 80166d4:	bfd8      	it	le
 80166d6:	b2ab      	uxthle	r3, r5
 80166d8:	1a5b      	subs	r3, r3, r1
 80166da:	f8ad 3006 	strh.w	r3, [sp, #6]
 80166de:	6823      	ldr	r3, [r4, #0]
 80166e0:	4669      	mov	r1, sp
 80166e2:	4620      	mov	r0, r4
 80166e4:	691b      	ldr	r3, [r3, #16]
 80166e6:	4798      	blx	r3
 80166e8:	b005      	add	sp, #20
 80166ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ec:	e9cd 0000 	strd	r0, r0, [sp]
 80166f0:	e7f5      	b.n	80166de <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

080166f4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80166f4:	2200      	movs	r2, #0
 80166f6:	2101      	movs	r1, #1
 80166f8:	8082      	strh	r2, [r0, #4]
 80166fa:	80c2      	strh	r2, [r0, #6]
 80166fc:	8102      	strh	r2, [r0, #8]
 80166fe:	8142      	strh	r2, [r0, #10]
 8016700:	8182      	strh	r2, [r0, #12]
 8016702:	81c2      	strh	r2, [r0, #14]
 8016704:	8202      	strh	r2, [r0, #16]
 8016706:	8242      	strh	r2, [r0, #18]
 8016708:	61c2      	str	r2, [r0, #28]
 801670a:	8402      	strh	r2, [r0, #32]
 801670c:	8442      	strh	r2, [r0, #34]	; 0x22
 801670e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016712:	6282      	str	r2, [r0, #40]	; 0x28
 8016714:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016718:	4905      	ldr	r1, [pc, #20]	; (8016730 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 801671a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801671e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016722:	6001      	str	r1, [r0, #0]
 8016724:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016726:	22ff      	movs	r2, #255	; 0xff
 8016728:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801672c:	4770      	bx	lr
 801672e:	bf00      	nop
 8016730:	0802cb30 	.word	0x0802cb30

08016734 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016734:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8016738:	4602      	mov	r2, r0
 801673a:	cb03      	ldmia	r3!, {r0, r1}
 801673c:	6010      	str	r0, [r2, #0]
 801673e:	4610      	mov	r0, r2
 8016740:	6051      	str	r1, [r2, #4]
 8016742:	4770      	bx	lr

08016744 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016744:	b507      	push	{r0, r1, r2, lr}
 8016746:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801674a:	ab01      	add	r3, sp, #4
 801674c:	6809      	ldr	r1, [r1, #0]
 801674e:	6800      	ldr	r0, [r0, #0]
 8016750:	f003 fc74 	bl	801a03c <_ZN8touchgfx6muldivElllRl>
 8016754:	b003      	add	sp, #12
 8016756:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801675c <_ZN8touchgfx7CWRUtil4sineEi>:
 801675c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016760:	fb90 f3f2 	sdiv	r3, r0, r2
 8016764:	fb03 0312 	mls	r3, r3, r2, r0
 8016768:	4413      	add	r3, r2
 801676a:	fb93 f0f2 	sdiv	r0, r3, r2
 801676e:	fb02 3010 	mls	r0, r2, r0, r3
 8016772:	4b0a      	ldr	r3, [pc, #40]	; (801679c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016774:	285a      	cmp	r0, #90	; 0x5a
 8016776:	dc02      	bgt.n	801677e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016778:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801677c:	4770      	bx	lr
 801677e:	28b4      	cmp	r0, #180	; 0xb4
 8016780:	dc02      	bgt.n	8016788 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016782:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016786:	e7f7      	b.n	8016778 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016788:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801678c:	bfd4      	ite	le
 801678e:	38b4      	suble	r0, #180	; 0xb4
 8016790:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016794:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016798:	4240      	negs	r0, r0
 801679a:	4770      	bx	lr
 801679c:	0802cc4e 	.word	0x0802cc4e

080167a0 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80167a0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80167a4:	f04f 0300 	mov.w	r3, #0
 80167a8:	bf2c      	ite	cs
 80167aa:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80167ae:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80167b2:	1899      	adds	r1, r3, r2
 80167b4:	4288      	cmp	r0, r1
 80167b6:	bf24      	itt	cs
 80167b8:	1853      	addcs	r3, r2, r1
 80167ba:	1a40      	subcs	r0, r0, r1
 80167bc:	0892      	lsrs	r2, r2, #2
 80167be:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80167c2:	d1f6      	bne.n	80167b2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80167c4:	4618      	mov	r0, r3
 80167c6:	4770      	bx	lr

080167c8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80167c8:	b510      	push	{r4, lr}
 80167ca:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80167ce:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80167d2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80167d6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80167da:	139b      	asrs	r3, r3, #14
 80167dc:	13a4      	asrs	r4, r4, #14
 80167de:	429c      	cmp	r4, r3
 80167e0:	bfb8      	it	lt
 80167e2:	461c      	movlt	r4, r3
 80167e4:	2c01      	cmp	r4, #1
 80167e6:	dd07      	ble.n	80167f8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80167e8:	fb91 f1f4 	sdiv	r1, r1, r4
 80167ec:	fb90 f0f4 	sdiv	r0, r0, r4
 80167f0:	f7ff ffea 	bl	80167c8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80167f4:	4360      	muls	r0, r4
 80167f6:	bd10      	pop	{r4, pc}
 80167f8:	4340      	muls	r0, r0
 80167fa:	fb01 0001 	mla	r0, r1, r1, r0
 80167fe:	f7ff ffcf 	bl	80167a0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016802:	e7f8      	b.n	80167f6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08016804 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016804:	2800      	cmp	r0, #0
 8016806:	b508      	push	{r3, lr}
 8016808:	da05      	bge.n	8016816 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801680a:	4240      	negs	r0, r0
 801680c:	f7ff fffa 	bl	8016804 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016810:	4240      	negs	r0, r0
 8016812:	b240      	sxtb	r0, r0
 8016814:	bd08      	pop	{r3, pc}
 8016816:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801681a:	dc11      	bgt.n	8016840 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801681c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016820:	dd09      	ble.n	8016836 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016822:	4340      	muls	r0, r0
 8016824:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016828:	f7ff ffba 	bl	80167a0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801682c:	f7ff ffea 	bl	8016804 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016830:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016834:	e7ed      	b.n	8016812 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016836:	3003      	adds	r0, #3
 8016838:	4b02      	ldr	r3, [pc, #8]	; (8016844 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801683a:	10c0      	asrs	r0, r0, #3
 801683c:	5618      	ldrsb	r0, [r3, r0]
 801683e:	e7e9      	b.n	8016814 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016840:	2000      	movs	r0, #0
 8016842:	e7e7      	b.n	8016814 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016844:	0802cbf2 	.word	0x0802cbf2

08016848 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016848:	1e03      	subs	r3, r0, #0
 801684a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801684c:	460c      	mov	r4, r1
 801684e:	4615      	mov	r5, r2
 8016850:	db01      	blt.n	8016856 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016852:	2900      	cmp	r1, #0
 8016854:	da06      	bge.n	8016864 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8016856:	4b10      	ldr	r3, [pc, #64]	; (8016898 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x50>)
 8016858:	f44f 714b 	mov.w	r1, #812	; 0x32c
 801685c:	4a0f      	ldr	r2, [pc, #60]	; (801689c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801685e:	4810      	ldr	r0, [pc, #64]	; (80168a0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8016860:	f00f fbbe 	bl	8025fe0 <__assert_func>
 8016864:	4299      	cmp	r1, r3
 8016866:	dd07      	ble.n	8016878 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x30>
 8016868:	4619      	mov	r1, r3
 801686a:	4620      	mov	r0, r4
 801686c:	f7ff ffec 	bl	8016848 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016870:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016874:	b003      	add	sp, #12
 8016876:	bd30      	pop	{r4, r5, pc}
 8016878:	f7ff ffa6 	bl	80167c8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801687c:	6028      	str	r0, [r5, #0]
 801687e:	2800      	cmp	r0, #0
 8016880:	d0f8      	beq.n	8016874 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8016882:	4602      	mov	r2, r0
 8016884:	ab01      	add	r3, sp, #4
 8016886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801688a:	4620      	mov	r0, r4
 801688c:	f003 fbd6 	bl	801a03c <_ZN8touchgfx6muldivElllRl>
 8016890:	f7ff ffb8 	bl	8016804 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016894:	e7ee      	b.n	8016874 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8016896:	bf00      	nop
 8016898:	0802cd04 	.word	0x0802cd04
 801689c:	0802cdc8 	.word	0x0802cdc8
 80168a0:	0802cd15 	.word	0x0802cd15

080168a4 <_ZN8touchgfx4LineC1Ev>:
 80168a4:	b510      	push	{r4, lr}
 80168a6:	4604      	mov	r4, r0
 80168a8:	f7ff ff24 	bl	80166f4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80168ac:	4b0c      	ldr	r3, [pc, #48]	; (80168e0 <_ZN8touchgfx4LineC1Ev+0x3c>)
 80168ae:	2220      	movs	r2, #32
 80168b0:	4620      	mov	r0, r4
 80168b2:	6023      	str	r3, [r4, #0]
 80168b4:	2300      	movs	r3, #0
 80168b6:	6422      	str	r2, [r4, #64]	; 0x40
 80168b8:	2212      	movs	r2, #18
 80168ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80168be:	6722      	str	r2, [r4, #112]	; 0x70
 80168c0:	60a3      	str	r3, [r4, #8]
 80168c2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80168c6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80168ca:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80168ce:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80168d2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80168d6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80168da:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80168de:	bd10      	pop	{r4, pc}
 80168e0:	0802cd54 	.word	0x0802cd54

080168e4 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80168e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168e8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80168ea:	4604      	mov	r4, r0
 80168ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80168ee:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80168f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80168f2:	1af6      	subs	r6, r6, r3
 80168f4:	eba5 0502 	sub.w	r5, r5, r2
 80168f8:	f040 808e 	bne.w	8016a18 <_ZN8touchgfx4Line17updateCachedShapeEv+0x134>
 80168fc:	b955      	cbnz	r5, 8016914 <_ZN8touchgfx4Line17updateCachedShapeEv+0x30>
 80168fe:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8016902:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016906:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801690a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801690e:	b003      	add	sp, #12
 8016910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016914:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8016918:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801691c:	f04f 0802 	mov.w	r8, #2
 8016920:	463a      	mov	r2, r7
 8016922:	4629      	mov	r1, r5
 8016924:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016926:	f003 fba8 	bl	801a07a <_ZN8touchgfx6muldivElll>
 801692a:	4631      	mov	r1, r6
 801692c:	463a      	mov	r2, r7
 801692e:	fb90 f5f8 	sdiv	r5, r0, r8
 8016932:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016934:	f003 fba1 	bl	801a07a <_ZN8touchgfx6muldivElll>
 8016938:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801693c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 801693e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8016940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016942:	fb90 f0f8 	sdiv	r0, r0, r8
 8016946:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801694a:	eba8 0305 	sub.w	r3, r8, r5
 801694e:	f1ba 0f00 	cmp.w	sl, #0
 8016952:	f040 80b8 	bne.w	8016ac6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e2>
 8016956:	64a3      	str	r3, [r4, #72]	; 0x48
 8016958:	1843      	adds	r3, r0, r1
 801695a:	65a3      	str	r3, [r4, #88]	; 0x58
 801695c:	1b7b      	subs	r3, r7, r5
 801695e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016960:	1983      	adds	r3, r0, r6
 8016962:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016964:	19eb      	adds	r3, r5, r7
 8016966:	6523      	str	r3, [r4, #80]	; 0x50
 8016968:	1a33      	subs	r3, r6, r0
 801696a:	6623      	str	r3, [r4, #96]	; 0x60
 801696c:	eb05 0308 	add.w	r3, r5, r8
 8016970:	6563      	str	r3, [r4, #84]	; 0x54
 8016972:	1a0b      	subs	r3, r1, r0
 8016974:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 8016978:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801697c:	6663      	str	r3, [r4, #100]	; 0x64
 801697e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8016982:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
 8016986:	4672      	mov	r2, lr
 8016988:	9301      	str	r3, [sp, #4]
 801698a:	f8cd c000 	str.w	ip, [sp]
 801698e:	f859 bb04 	ldr.w	fp, [r9], #4
 8016992:	9b00      	ldr	r3, [sp, #0]
 8016994:	45de      	cmp	lr, fp
 8016996:	bfa8      	it	ge
 8016998:	46de      	movge	lr, fp
 801699a:	455a      	cmp	r2, fp
 801699c:	bfb8      	it	lt
 801699e:	465a      	movlt	r2, fp
 80169a0:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80169a4:	45dc      	cmp	ip, fp
 80169a6:	bfa8      	it	ge
 80169a8:	46dc      	movge	ip, fp
 80169aa:	455b      	cmp	r3, fp
 80169ac:	bfb8      	it	lt
 80169ae:	465b      	movlt	r3, fp
 80169b0:	9300      	str	r3, [sp, #0]
 80169b2:	9b01      	ldr	r3, [sp, #4]
 80169b4:	454b      	cmp	r3, r9
 80169b6:	d1ea      	bne.n	801698e <_ZN8touchgfx4Line17updateCachedShapeEv+0xaa>
 80169b8:	f04f 0920 	mov.w	r9, #32
 80169bc:	9b00      	ldr	r3, [sp, #0]
 80169be:	f1ba 0f01 	cmp.w	sl, #1
 80169c2:	fb92 f2f9 	sdiv	r2, r2, r9
 80169c6:	fb93 f3f9 	sdiv	r3, r3, r9
 80169ca:	fb9e fef9 	sdiv	lr, lr, r9
 80169ce:	fb9c fcf9 	sdiv	ip, ip, r9
 80169d2:	f102 0201 	add.w	r2, r2, #1
 80169d6:	f103 0301 	add.w	r3, r3, #1
 80169da:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
 80169de:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
 80169e2:	eba2 0e0e 	sub.w	lr, r2, lr
 80169e6:	eba3 0c0c 	sub.w	ip, r3, ip
 80169ea:	f8a4 e06c 	strh.w	lr, [r4, #108]	; 0x6c
 80169ee:	f8a4 c06e 	strh.w	ip, [r4, #110]	; 0x6e
 80169f2:	d18c      	bne.n	801690e <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 80169f4:	eba8 0305 	sub.w	r3, r8, r5
 80169f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80169fa:	1843      	adds	r3, r0, r1
 80169fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80169fe:	1b7b      	subs	r3, r7, r5
 8016a00:	442f      	add	r7, r5
 8016a02:	4445      	add	r5, r8
 8016a04:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016a06:	1983      	adds	r3, r0, r6
 8016a08:	1a36      	subs	r6, r6, r0
 8016a0a:	1a08      	subs	r0, r1, r0
 8016a0c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016a0e:	6527      	str	r7, [r4, #80]	; 0x50
 8016a10:	6626      	str	r6, [r4, #96]	; 0x60
 8016a12:	6565      	str	r5, [r4, #84]	; 0x54
 8016a14:	6660      	str	r0, [r4, #100]	; 0x64
 8016a16:	e77a      	b.n	801690e <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8016a18:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8016a1c:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016a20:	2d00      	cmp	r5, #0
 8016a22:	f43f af7b 	beq.w	801691c <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8016a26:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8016a2a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8016a2e:	fb93 f2f7 	sdiv	r2, r3, r7
 8016a32:	fb07 3312 	mls	r3, r7, r2, r3
 8016a36:	b34b      	cbz	r3, 8016a8c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a8>
 8016a38:	fb97 f2f3 	sdiv	r2, r7, r3
 8016a3c:	fb03 7712 	mls	r7, r3, r2, r7
 8016a40:	2f00      	cmp	r7, #0
 8016a42:	d1f4      	bne.n	8016a2e <_ZN8touchgfx4Line17updateCachedShapeEv+0x14a>
 8016a44:	2b01      	cmp	r3, #1
 8016a46:	f24b 5204 	movw	r2, #46340	; 0xb504
 8016a4a:	bf18      	it	ne
 8016a4c:	fb96 f6f3 	sdivne	r6, r6, r3
 8016a50:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8016a54:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8016a58:	bf18      	it	ne
 8016a5a:	fb95 f5f3 	sdivne	r5, r5, r3
 8016a5e:	4291      	cmp	r1, r2
 8016a60:	dd16      	ble.n	8016a90 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ac>
 8016a62:	2d00      	cmp	r5, #0
 8016a64:	da47      	bge.n	8016af6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x212>
 8016a66:	4b26      	ldr	r3, [pc, #152]	; (8016b00 <_ZN8touchgfx4Line17updateCachedShapeEv+0x21c>)
 8016a68:	429d      	cmp	r5, r3
 8016a6a:	da25      	bge.n	8016ab8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d4>
 8016a6c:	426a      	negs	r2, r5
 8016a6e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016a72:	fb91 f1f3 	sdiv	r1, r1, r3
 8016a76:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a7a:	4299      	cmp	r1, r3
 8016a7c:	bfcc      	ite	gt
 8016a7e:	1c4b      	addgt	r3, r1, #1
 8016a80:	3301      	addle	r3, #1
 8016a82:	fb96 f6f3 	sdiv	r6, r6, r3
 8016a86:	fb95 f5f3 	sdiv	r5, r5, r3
 8016a8a:	e00f      	b.n	8016aac <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8016a8c:	463b      	mov	r3, r7
 8016a8e:	e7d9      	b.n	8016a44 <_ZN8touchgfx4Line17updateCachedShapeEv+0x160>
 8016a90:	2d00      	cmp	r5, #0
 8016a92:	fb92 f2f1 	sdiv	r2, r2, r1
 8016a96:	da11      	bge.n	8016abc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d8>
 8016a98:	4269      	negs	r1, r5
 8016a9a:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016a9e:	fb93 f3f1 	sdiv	r3, r3, r1
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	bfa8      	it	ge
 8016aa6:	461a      	movge	r2, r3
 8016aa8:	4356      	muls	r6, r2
 8016aaa:	4355      	muls	r5, r2
 8016aac:	4629      	mov	r1, r5
 8016aae:	4630      	mov	r0, r6
 8016ab0:	f7ff fe8a 	bl	80167c8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016ab4:	4607      	mov	r7, r0
 8016ab6:	e731      	b.n	801691c <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8016ab8:	2200      	movs	r2, #0
 8016aba:	e7ed      	b.n	8016a98 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b4>
 8016abc:	4629      	mov	r1, r5
 8016abe:	e7ec      	b.n	8016a9a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8016ac0:	4629      	mov	r1, r5
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	e7e9      	b.n	8016a9a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8016ac6:	1a1b      	subs	r3, r3, r0
 8016ac8:	64a3      	str	r3, [r4, #72]	; 0x48
 8016aca:	1843      	adds	r3, r0, r1
 8016acc:	1b5b      	subs	r3, r3, r5
 8016ace:	65a3      	str	r3, [r4, #88]	; 0x58
 8016ad0:	1b7b      	subs	r3, r7, r5
 8016ad2:	4403      	add	r3, r0
 8016ad4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016ad6:	1983      	adds	r3, r0, r6
 8016ad8:	442b      	add	r3, r5
 8016ada:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016adc:	19eb      	adds	r3, r5, r7
 8016ade:	4403      	add	r3, r0
 8016ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8016ae2:	1a33      	subs	r3, r6, r0
 8016ae4:	442b      	add	r3, r5
 8016ae6:	6623      	str	r3, [r4, #96]	; 0x60
 8016ae8:	eb05 0308 	add.w	r3, r5, r8
 8016aec:	1a1b      	subs	r3, r3, r0
 8016aee:	6563      	str	r3, [r4, #84]	; 0x54
 8016af0:	1a0b      	subs	r3, r1, r0
 8016af2:	1b5b      	subs	r3, r3, r5
 8016af4:	e73e      	b.n	8016974 <_ZN8touchgfx4Line17updateCachedShapeEv+0x90>
 8016af6:	4295      	cmp	r5, r2
 8016af8:	dde2      	ble.n	8016ac0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1dc>
 8016afa:	462a      	mov	r2, r5
 8016afc:	e7b7      	b.n	8016a6e <_ZN8touchgfx4Line17updateCachedShapeEv+0x18a>
 8016afe:	bf00      	nop
 8016b00:	ffff4afc 	.word	0xffff4afc

08016b04 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016b04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016b06:	428b      	cmp	r3, r1
 8016b08:	d102      	bne.n	8016b10 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016b0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016b0c:	4293      	cmp	r3, r2
 8016b0e:	d003      	beq.n	8016b18 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8016b10:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8016b14:	f7ff bee6 	b.w	80168e4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016b18:	4770      	bx	lr

08016b1a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016b1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016b1c:	428b      	cmp	r3, r1
 8016b1e:	d102      	bne.n	8016b26 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8016b20:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016b22:	4293      	cmp	r3, r2
 8016b24:	d003      	beq.n	8016b2e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016b26:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016b2a:	f7ff bedb 	b.w	80168e4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016b2e:	4770      	bx	lr

08016b30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8016b30:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8016b34:	f7ff bed6 	b.w	80168e4 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016b38 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b3c:	b0b3      	sub	sp, #204	; 0xcc
 8016b3e:	4604      	mov	r4, r0
 8016b40:	460a      	mov	r2, r1
 8016b42:	4601      	mov	r1, r0
 8016b44:	a803      	add	r0, sp, #12
 8016b46:	ad32      	add	r5, sp, #200	; 0xc8
 8016b48:	f00d fd48 	bl	80245dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8016b50:	f845 3dc8 	str.w	r3, [r5, #-200]!
 8016b54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016b56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016b58:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016b5a:	1ac0      	subs	r0, r0, r3
 8016b5c:	eba1 0102 	sub.w	r1, r1, r2
 8016b60:	d43c      	bmi.n	8016bdc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8016b62:	2900      	cmp	r1, #0
 8016b64:	462a      	mov	r2, r5
 8016b66:	db33      	blt.n	8016bd0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8016b68:	f7ff fe6e 	bl	8016848 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016b6c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8016b70:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016b72:	a803      	add	r0, sp, #12
 8016b74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016b76:	f00d fefc 	bl	8024972 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016b7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016b7c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016b7e:	a803      	add	r0, sp, #12
 8016b80:	f00d fe86 	bl	8024890 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016b84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d137      	bne.n	8016bfc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016b8c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016b8e:	2eb3      	cmp	r6, #179	; 0xb3
 8016b90:	dc34      	bgt.n	8016bfc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016b92:	eba7 0906 	sub.w	r9, r7, r6
 8016b96:	4648      	mov	r0, r9
 8016b98:	f7ff fde0 	bl	801675c <_ZN8touchgfx7CWRUtil4sineEi>
 8016b9c:	a901      	add	r1, sp, #4
 8016b9e:	9001      	str	r0, [sp, #4]
 8016ba0:	4628      	mov	r0, r5
 8016ba2:	f7ff fdcf 	bl	8016744 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016ba6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016ba8:	eb00 0801 	add.w	r8, r0, r1
 8016bac:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016bb0:	f7ff fdd4 	bl	801675c <_ZN8touchgfx7CWRUtil4sineEi>
 8016bb4:	a902      	add	r1, sp, #8
 8016bb6:	9002      	str	r0, [sp, #8]
 8016bb8:	4628      	mov	r0, r5
 8016bba:	f7ff fdc3 	bl	8016744 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016bbe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016bc0:	4641      	mov	r1, r8
 8016bc2:	1a12      	subs	r2, r2, r0
 8016bc4:	a803      	add	r0, sp, #12
 8016bc6:	f00d fe63 	bl	8024890 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016bca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016bcc:	441e      	add	r6, r3
 8016bce:	e7de      	b.n	8016b8e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8016bd0:	4249      	negs	r1, r1
 8016bd2:	f7ff fe39 	bl	8016848 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016bd6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8016bda:	e7c9      	b.n	8016b70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016bdc:	2900      	cmp	r1, #0
 8016bde:	f1c0 0000 	rsb	r0, r0, #0
 8016be2:	462a      	mov	r2, r5
 8016be4:	db04      	blt.n	8016bf0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8016be6:	f7ff fe2f 	bl	8016848 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016bea:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8016bee:	e7bf      	b.n	8016b70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016bf0:	4249      	negs	r1, r1
 8016bf2:	f7ff fe29 	bl	8016848 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016bf6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8016bfa:	e7b9      	b.n	8016b70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016bfc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8016bfe:	a803      	add	r0, sp, #12
 8016c00:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016c02:	f00d fe45 	bl	8024890 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016c08:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8016c0a:	a803      	add	r0, sp, #12
 8016c0c:	f00d fe40 	bl	8024890 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016c10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016c14:	2b01      	cmp	r3, #1
 8016c16:	d123      	bne.n	8016c60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016c18:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016c1a:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8016c1e:	2e00      	cmp	r6, #0
 8016c20:	dd1e      	ble.n	8016c60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016c22:	eb06 0907 	add.w	r9, r6, r7
 8016c26:	4648      	mov	r0, r9
 8016c28:	f7ff fd98 	bl	801675c <_ZN8touchgfx7CWRUtil4sineEi>
 8016c2c:	a901      	add	r1, sp, #4
 8016c2e:	9001      	str	r0, [sp, #4]
 8016c30:	4628      	mov	r0, r5
 8016c32:	f7ff fd87 	bl	8016744 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016c38:	eb00 0801 	add.w	r8, r0, r1
 8016c3c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016c40:	f7ff fd8c 	bl	801675c <_ZN8touchgfx7CWRUtil4sineEi>
 8016c44:	a902      	add	r1, sp, #8
 8016c46:	9002      	str	r0, [sp, #8]
 8016c48:	4628      	mov	r0, r5
 8016c4a:	f7ff fd7b 	bl	8016744 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016c50:	4641      	mov	r1, r8
 8016c52:	1a12      	subs	r2, r2, r0
 8016c54:	a803      	add	r0, sp, #12
 8016c56:	f00d fe1b 	bl	8024890 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016c5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016c5c:	1af6      	subs	r6, r6, r3
 8016c5e:	e7de      	b.n	8016c1e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8016c60:	21ff      	movs	r1, #255	; 0xff
 8016c62:	a803      	add	r0, sp, #12
 8016c64:	f00d ff89 	bl	8024b7a <_ZN8touchgfx6Canvas6renderEh>
 8016c68:	4604      	mov	r4, r0
 8016c6a:	a803      	add	r0, sp, #12
 8016c6c:	f00d ffc4 	bl	8024bf8 <_ZN8touchgfx6CanvasD1Ev>
 8016c70:	4620      	mov	r0, r4
 8016c72:	b033      	add	sp, #204	; 0xcc
 8016c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016c78 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8016c78:	2200      	movs	r2, #0
 8016c7a:	8002      	strh	r2, [r0, #0]
 8016c7c:	8042      	strh	r2, [r0, #2]
 8016c7e:	8082      	strh	r2, [r0, #4]
 8016c80:	80c2      	strh	r2, [r0, #6]
 8016c82:	4770      	bx	lr

08016c84 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8016c84:	b570      	push	{r4, r5, r6, lr}
 8016c86:	6803      	ldr	r3, [r0, #0]
 8016c88:	4604      	mov	r4, r0
 8016c8a:	4615      	mov	r5, r2
 8016c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c8e:	4798      	blx	r3
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	4629      	mov	r1, r5
 8016c94:	4620      	mov	r0, r4
 8016c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c9c:	4718      	bx	r3
	...

08016ca0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016ca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ca6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016ca8:	4299      	cmp	r1, r3
 8016caa:	d029      	beq.n	8016d00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8016cac:	4b15      	ldr	r3, [pc, #84]	; (8016d04 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	b92b      	cbnz	r3, 8016cbe <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8016cb2:	4b15      	ldr	r3, [pc, #84]	; (8016d08 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016cb4:	21ae      	movs	r1, #174	; 0xae
 8016cb6:	4a15      	ldr	r2, [pc, #84]	; (8016d0c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016cb8:	4815      	ldr	r0, [pc, #84]	; (8016d10 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8016cba:	f00f f991 	bl	8025fe0 <__assert_func>
 8016cbe:	4a15      	ldr	r2, [pc, #84]	; (8016d14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8016cc0:	8812      	ldrh	r2, [r2, #0]
 8016cc2:	428a      	cmp	r2, r1
 8016cc4:	d803      	bhi.n	8016cce <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8016cc6:	4b14      	ldr	r3, [pc, #80]	; (8016d18 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8016cc8:	21af      	movs	r1, #175	; 0xaf
 8016cca:	4a10      	ldr	r2, [pc, #64]	; (8016d0c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016ccc:	e7f4      	b.n	8016cb8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8016cce:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016cd2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016cd6:	4b11      	ldr	r3, [pc, #68]	; (8016d1c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8016cd8:	7854      	ldrb	r4, [r2, #1]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8016ce0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8016ce4:	682b      	ldr	r3, [r5, #0]
 8016ce6:	69de      	ldr	r6, [r3, #28]
 8016ce8:	4b0d      	ldr	r3, [pc, #52]	; (8016d20 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8016cea:	6818      	ldr	r0, [r3, #0]
 8016cec:	f7f1 fe64 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	4621      	mov	r1, r4
 8016cf6:	9300      	str	r3, [sp, #0]
 8016cf8:	4628      	mov	r0, r5
 8016cfa:	47b0      	blx	r6
 8016cfc:	b002      	add	sp, #8
 8016cfe:	bd70      	pop	{r4, r5, r6, pc}
 8016d00:	2000      	movs	r0, #0
 8016d02:	e7fb      	b.n	8016cfc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8016d04:	20056768 	.word	0x20056768
 8016d08:	0802ce33 	.word	0x0802ce33
 8016d0c:	0802cf68 	.word	0x0802cf68
 8016d10:	0802ce75 	.word	0x0802ce75
 8016d14:	2005676c 	.word	0x2005676c
 8016d18:	0802ce9e 	.word	0x0802ce9e
 8016d1c:	20056770 	.word	0x20056770
 8016d20:	20056774 	.word	0x20056774

08016d24 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8016d24:	b570      	push	{r4, r5, r6, lr}
 8016d26:	6803      	ldr	r3, [r0, #0]
 8016d28:	4604      	mov	r4, r0
 8016d2a:	b28d      	uxth	r5, r1
 8016d2c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016d2e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8016d30:	4b10      	ldr	r3, [pc, #64]	; (8016d74 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	b92b      	cbnz	r3, 8016d42 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8016d36:	4b10      	ldr	r3, [pc, #64]	; (8016d78 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8016d38:	21ae      	movs	r1, #174	; 0xae
 8016d3a:	4a10      	ldr	r2, [pc, #64]	; (8016d7c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8016d3c:	4810      	ldr	r0, [pc, #64]	; (8016d80 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8016d3e:	f00f f94f 	bl	8025fe0 <__assert_func>
 8016d42:	4910      	ldr	r1, [pc, #64]	; (8016d84 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8016d44:	8809      	ldrh	r1, [r1, #0]
 8016d46:	4291      	cmp	r1, r2
 8016d48:	d803      	bhi.n	8016d52 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8016d4a:	4b0f      	ldr	r3, [pc, #60]	; (8016d88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8016d4c:	21af      	movs	r1, #175	; 0xaf
 8016d4e:	4a0b      	ldr	r2, [pc, #44]	; (8016d7c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8016d50:	e7f4      	b.n	8016d3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8016d52:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016d56:	4b0d      	ldr	r3, [pc, #52]	; (8016d8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016d5e:	6803      	ldr	r3, [r0, #0]
 8016d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d62:	4798      	blx	r3
 8016d64:	1a29      	subs	r1, r5, r0
 8016d66:	4633      	mov	r3, r6
 8016d68:	4620      	mov	r0, r4
 8016d6a:	b209      	sxth	r1, r1
 8016d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d70:	4718      	bx	r3
 8016d72:	bf00      	nop
 8016d74:	20056768 	.word	0x20056768
 8016d78:	0802ce33 	.word	0x0802ce33
 8016d7c:	0802cf68 	.word	0x0802cf68
 8016d80:	0802ce75 	.word	0x0802ce75
 8016d84:	2005676c 	.word	0x2005676c
 8016d88:	0802ce9e 	.word	0x0802ce9e
 8016d8c:	20056770 	.word	0x20056770

08016d90 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d98:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016d9a:	b08c      	sub	sp, #48	; 0x30
 8016d9c:	4604      	mov	r4, r0
 8016d9e:	4293      	cmp	r3, r2
 8016da0:	4688      	mov	r8, r1
 8016da2:	d05f      	beq.n	8016e64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016da4:	4e31      	ldr	r6, [pc, #196]	; (8016e6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8016da6:	6832      	ldr	r2, [r6, #0]
 8016da8:	b92a      	cbnz	r2, 8016db6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8016daa:	4b31      	ldr	r3, [pc, #196]	; (8016e70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8016dac:	21ae      	movs	r1, #174	; 0xae
 8016dae:	4a31      	ldr	r2, [pc, #196]	; (8016e74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016db0:	4831      	ldr	r0, [pc, #196]	; (8016e78 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8016db2:	f00f f915 	bl	8025fe0 <__assert_func>
 8016db6:	4d31      	ldr	r5, [pc, #196]	; (8016e7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8016db8:	8829      	ldrh	r1, [r5, #0]
 8016dba:	4299      	cmp	r1, r3
 8016dbc:	d803      	bhi.n	8016dc6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8016dbe:	4b30      	ldr	r3, [pc, #192]	; (8016e80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8016dc0:	21af      	movs	r1, #175	; 0xaf
 8016dc2:	4a2c      	ldr	r2, [pc, #176]	; (8016e74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016dc4:	e7f4      	b.n	8016db0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8016dc6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8016dca:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016dce:	4b2d      	ldr	r3, [pc, #180]	; (8016e84 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016dd6:	2a00      	cmp	r2, #0
 8016dd8:	d044      	beq.n	8016e64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016dda:	784b      	ldrb	r3, [r1, #1]
 8016ddc:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8016de0:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8016de4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016de8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8016dec:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8016df0:	4b25      	ldr	r3, [pc, #148]	; (8016e88 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8016df2:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8016dfc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8016e00:	9207      	str	r2, [sp, #28]
 8016e02:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016e04:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016e08:	f88d a020 	strb.w	sl, [sp, #32]
 8016e0c:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8016e10:	9009      	str	r0, [sp, #36]	; 0x24
 8016e12:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8016e16:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8016e1a:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8016e1e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8016e22:	b10a      	cbz	r2, 8016e28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8016e24:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8016e26:	b907      	cbnz	r7, 8016e2a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8016e28:	689f      	ldr	r7, [r3, #8]
 8016e2a:	f10d 0914 	add.w	r9, sp, #20
 8016e2e:	4621      	mov	r1, r4
 8016e30:	4648      	mov	r0, r9
 8016e32:	f002 fff5 	bl	8019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016e36:	6833      	ldr	r3, [r6, #0]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d0b6      	beq.n	8016daa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8016e3c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016e3e:	882b      	ldrh	r3, [r5, #0]
 8016e40:	428b      	cmp	r3, r1
 8016e42:	d9bc      	bls.n	8016dbe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8016e44:	4b11      	ldr	r3, [pc, #68]	; (8016e8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8016e46:	6818      	ldr	r0, [r3, #0]
 8016e48:	f7f1 fdb6 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	9001      	str	r0, [sp, #4]
 8016e50:	4638      	mov	r0, r7
 8016e52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016e56:	ab07      	add	r3, sp, #28
 8016e58:	9300      	str	r3, [sp, #0]
 8016e5a:	4643      	mov	r3, r8
 8016e5c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8016e60:	f7f1 fd3b 	bl	80088da <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016e64:	b00c      	add	sp, #48	; 0x30
 8016e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e6a:	bf00      	nop
 8016e6c:	20056768 	.word	0x20056768
 8016e70:	0802ce33 	.word	0x0802ce33
 8016e74:	0802cf68 	.word	0x0802cf68
 8016e78:	0802ce75 	.word	0x0802ce75
 8016e7c:	2005676c 	.word	0x2005676c
 8016e80:	0802ce9e 	.word	0x0802ce9e
 8016e84:	20056770 	.word	0x20056770
 8016e88:	200566f8 	.word	0x200566f8
 8016e8c:	20056774 	.word	0x20056774

08016e90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016e90:	b40e      	push	{r1, r2, r3}
 8016e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e9a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016e9c:	b09a      	sub	sp, #104	; 0x68
 8016e9e:	4605      	mov	r5, r0
 8016ea0:	4293      	cmp	r3, r2
 8016ea2:	d067      	beq.n	8016f74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 8016ea4:	aa24      	add	r2, sp, #144	; 0x90
 8016ea6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8016f88 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 8016eaa:	9202      	str	r2, [sp, #8]
 8016eac:	f8da 2000 	ldr.w	r2, [sl]
 8016eb0:	b92a      	cbnz	r2, 8016ebe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8016eb2:	4b31      	ldr	r3, [pc, #196]	; (8016f78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8016eb4:	21ae      	movs	r1, #174	; 0xae
 8016eb6:	4a31      	ldr	r2, [pc, #196]	; (8016f7c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8016eb8:	4831      	ldr	r0, [pc, #196]	; (8016f80 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8016eba:	f00f f891 	bl	8025fe0 <__assert_func>
 8016ebe:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8016f8c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 8016ec2:	f8b8 1000 	ldrh.w	r1, [r8]
 8016ec6:	4299      	cmp	r1, r3
 8016ec8:	d803      	bhi.n	8016ed2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8016eca:	4b2e      	ldr	r3, [pc, #184]	; (8016f84 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8016ecc:	21af      	movs	r1, #175	; 0xaf
 8016ece:	4a2b      	ldr	r2, [pc, #172]	; (8016f7c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8016ed0:	e7f2      	b.n	8016eb8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8016ed2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8016f90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8016ed6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016eda:	f8d9 3000 	ldr.w	r3, [r9]
 8016ede:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8016ee2:	6823      	ldr	r3, [r4, #0]
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ee8:	4798      	blx	r3
 8016eea:	4607      	mov	r7, r0
 8016eec:	b206      	sxth	r6, r0
 8016eee:	a803      	add	r0, sp, #12
 8016ef0:	f003 fc55 	bl	801a79e <_ZN8touchgfx12TextProviderC1Ev>
 8016ef4:	6823      	ldr	r3, [r4, #0]
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016efa:	4798      	blx	r3
 8016efc:	6823      	ldr	r3, [r4, #0]
 8016efe:	4683      	mov	fp, r0
 8016f00:	4620      	mov	r0, r4
 8016f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016f04:	4798      	blx	r3
 8016f06:	465b      	mov	r3, fp
 8016f08:	9000      	str	r0, [sp, #0]
 8016f0a:	a803      	add	r0, sp, #12
 8016f0c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8016f0e:	9a02      	ldr	r2, [sp, #8]
 8016f10:	f003 fc92 	bl	801a838 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016f14:	f8da 3000 	ldr.w	r3, [sl]
 8016f18:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d0c8      	beq.n	8016eb2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8016f20:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8016f22:	f8b8 0000 	ldrh.w	r0, [r8]
 8016f26:	4290      	cmp	r0, r2
 8016f28:	d9cf      	bls.n	8016eca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8016f2a:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 8016f2e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016f32:	f8d9 3000 	ldr.w	r3, [r9]
 8016f36:	7862      	ldrb	r2, [r4, #1]
 8016f38:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8016f3c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016f40:	9400      	str	r4, [sp, #0]
 8016f42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016f46:	a803      	add	r0, sp, #12
 8016f48:	f001 fad1 	bl	80184ee <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016f4c:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8016f50:	b203      	sxth	r3, r0
 8016f52:	18b1      	adds	r1, r6, r2
 8016f54:	2900      	cmp	r1, #0
 8016f56:	dd0b      	ble.n	8016f70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8016f58:	3b01      	subs	r3, #1
 8016f5a:	fb13 f302 	smulbb	r3, r3, r2
 8016f5e:	fb17 3300 	smlabb	r3, r7, r0, r3
 8016f62:	b21e      	sxth	r6, r3
 8016f64:	4630      	mov	r0, r6
 8016f66:	b01a      	add	sp, #104	; 0x68
 8016f68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f6c:	b003      	add	sp, #12
 8016f6e:	4770      	bx	lr
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	dcf7      	bgt.n	8016f64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8016f74:	2600      	movs	r6, #0
 8016f76:	e7f5      	b.n	8016f64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8016f78:	0802ce33 	.word	0x0802ce33
 8016f7c:	0802cf68 	.word	0x0802cf68
 8016f80:	0802ce75 	.word	0x0802ce75
 8016f84:	0802ce9e 	.word	0x0802ce9e
 8016f88:	20056768 	.word	0x20056768
 8016f8c:	2005676c 	.word	0x2005676c
 8016f90:	20056770 	.word	0x20056770

08016f94 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8016f94:	b570      	push	{r4, r5, r6, lr}
 8016f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f9a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016f9c:	4604      	mov	r4, r0
 8016f9e:	4299      	cmp	r1, r3
 8016fa0:	d01e      	beq.n	8016fe0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8016fa2:	6803      	ldr	r3, [r0, #0]
 8016fa4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8016fa6:	4b0f      	ldr	r3, [pc, #60]	; (8016fe4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	b92b      	cbnz	r3, 8016fb8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8016fac:	4b0e      	ldr	r3, [pc, #56]	; (8016fe8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8016fae:	21ae      	movs	r1, #174	; 0xae
 8016fb0:	4a0e      	ldr	r2, [pc, #56]	; (8016fec <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016fb2:	480f      	ldr	r0, [pc, #60]	; (8016ff0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8016fb4:	f00f f814 	bl	8025fe0 <__assert_func>
 8016fb8:	4b0e      	ldr	r3, [pc, #56]	; (8016ff4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8016fba:	881b      	ldrh	r3, [r3, #0]
 8016fbc:	428b      	cmp	r3, r1
 8016fbe:	d803      	bhi.n	8016fc8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8016fc0:	4b0d      	ldr	r3, [pc, #52]	; (8016ff8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8016fc2:	21af      	movs	r1, #175	; 0xaf
 8016fc4:	4a09      	ldr	r2, [pc, #36]	; (8016fec <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016fc6:	e7f4      	b.n	8016fb2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8016fc8:	4b0c      	ldr	r3, [pc, #48]	; (8016ffc <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8016fca:	6818      	ldr	r0, [r3, #0]
 8016fcc:	f7f1 fcf4 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	4601      	mov	r1, r0
 8016fd4:	46ac      	mov	ip, r5
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	461a      	mov	r2, r3
 8016fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fde:	4760      	bx	ip
 8016fe0:	2000      	movs	r0, #0
 8016fe2:	bd70      	pop	{r4, r5, r6, pc}
 8016fe4:	20056768 	.word	0x20056768
 8016fe8:	0802ce33 	.word	0x0802ce33
 8016fec:	0802cf68 	.word	0x0802cf68
 8016ff0:	0802ce75 	.word	0x0802ce75
 8016ff4:	2005676c 	.word	0x2005676c
 8016ff8:	0802ce9e 	.word	0x0802ce9e
 8016ffc:	20056774 	.word	0x20056774

08017000 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017000:	b538      	push	{r3, r4, r5, lr}
 8017002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017006:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017008:	4604      	mov	r4, r0
 801700a:	429a      	cmp	r2, r3
 801700c:	d014      	beq.n	8017038 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801700e:	6803      	ldr	r3, [r0, #0]
 8017010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017012:	4798      	blx	r3
 8017014:	6823      	ldr	r3, [r4, #0]
 8017016:	4605      	mov	r5, r0
 8017018:	4620      	mov	r0, r4
 801701a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801701c:	4798      	blx	r3
 801701e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017022:	b22d      	sxth	r5, r5
 8017024:	4601      	mov	r1, r0
 8017026:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801702a:	bf06      	itte	eq
 801702c:	4602      	moveq	r2, r0
 801702e:	4629      	moveq	r1, r5
 8017030:	462a      	movne	r2, r5
 8017032:	4620      	mov	r0, r4
 8017034:	f7ef fc80 	bl	8006938 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017038:	bd38      	pop	{r3, r4, r5, pc}

0801703a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801703a:	888a      	ldrh	r2, [r1, #4]
 801703c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801703e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017042:	b922      	cbnz	r2, 801704e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8017044:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017048:	b90b      	cbnz	r3, 801704e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801704a:	f7ff bfd9 	b.w	8017000 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801704e:	4770      	bx	lr

08017050 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017050:	2300      	movs	r3, #0
 8017052:	8083      	strh	r3, [r0, #4]
 8017054:	80c3      	strh	r3, [r0, #6]
 8017056:	8003      	strh	r3, [r0, #0]
 8017058:	8043      	strh	r3, [r0, #2]
 801705a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801705e:	2bff      	cmp	r3, #255	; 0xff
 8017060:	bf01      	itttt	eq
 8017062:	890b      	ldrheq	r3, [r1, #8]
 8017064:	8083      	strheq	r3, [r0, #4]
 8017066:	894b      	ldrheq	r3, [r1, #10]
 8017068:	80c3      	strheq	r3, [r0, #6]
 801706a:	4770      	bx	lr

0801706c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801706c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801706e:	4604      	mov	r4, r0
 8017070:	466b      	mov	r3, sp
 8017072:	6808      	ldr	r0, [r1, #0]
 8017074:	6849      	ldr	r1, [r1, #4]
 8017076:	c303      	stmia	r3!, {r0, r1}
 8017078:	6823      	ldr	r3, [r4, #0]
 801707a:	4669      	mov	r1, sp
 801707c:	4620      	mov	r0, r4
 801707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017080:	4798      	blx	r3
 8017082:	4b08      	ldr	r3, [pc, #32]	; (80170a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801708a:	b10a      	cbz	r2, 8017090 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801708c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801708e:	b900      	cbnz	r0, 8017092 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017090:	6898      	ldr	r0, [r3, #8]
 8017092:	6803      	ldr	r3, [r0, #0]
 8017094:	4669      	mov	r1, sp
 8017096:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017098:	699d      	ldr	r5, [r3, #24]
 801709a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801709e:	47a8      	blx	r5
 80170a0:	b003      	add	sp, #12
 80170a2:	bd30      	pop	{r4, r5, pc}
 80170a4:	200566f8 	.word	0x200566f8

080170a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80170a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170ae:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80170b0:	4606      	mov	r6, r0
 80170b2:	4299      	cmp	r1, r3
 80170b4:	d02a      	beq.n	801710c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 80170b6:	4b16      	ldr	r3, [pc, #88]	; (8017110 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	b92b      	cbnz	r3, 80170c8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 80170bc:	4b15      	ldr	r3, [pc, #84]	; (8017114 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 80170be:	21ae      	movs	r1, #174	; 0xae
 80170c0:	4a15      	ldr	r2, [pc, #84]	; (8017118 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80170c2:	4816      	ldr	r0, [pc, #88]	; (801711c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 80170c4:	f00e ff8c 	bl	8025fe0 <__assert_func>
 80170c8:	4a15      	ldr	r2, [pc, #84]	; (8017120 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 80170ca:	8812      	ldrh	r2, [r2, #0]
 80170cc:	428a      	cmp	r2, r1
 80170ce:	d803      	bhi.n	80170d8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 80170d0:	4b14      	ldr	r3, [pc, #80]	; (8017124 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 80170d2:	21af      	movs	r1, #175	; 0xaf
 80170d4:	4a10      	ldr	r2, [pc, #64]	; (8017118 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80170d6:	e7f4      	b.n	80170c2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 80170d8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80170dc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80170e0:	4b11      	ldr	r3, [pc, #68]	; (8017128 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 80170e2:	7854      	ldrb	r4, [r2, #1]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80170ea:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80170ee:	682b      	ldr	r3, [r5, #0]
 80170f0:	69df      	ldr	r7, [r3, #28]
 80170f2:	4b0e      	ldr	r3, [pc, #56]	; (801712c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 80170f4:	6818      	ldr	r0, [r3, #0]
 80170f6:	f7f1 fc5f 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 80170fa:	2300      	movs	r3, #0
 80170fc:	4602      	mov	r2, r0
 80170fe:	4621      	mov	r1, r4
 8017100:	9300      	str	r3, [sp, #0]
 8017102:	4628      	mov	r0, r5
 8017104:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8017106:	47b8      	blx	r7
 8017108:	b003      	add	sp, #12
 801710a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801710c:	2000      	movs	r0, #0
 801710e:	e7fb      	b.n	8017108 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8017110:	20056768 	.word	0x20056768
 8017114:	0802ce33 	.word	0x0802ce33
 8017118:	0802d074 	.word	0x0802d074
 801711c:	0802ce75 	.word	0x0802ce75
 8017120:	2005676c 	.word	0x2005676c
 8017124:	0802ce9e 	.word	0x0802ce9e
 8017128:	20056770 	.word	0x20056770
 801712c:	20056774 	.word	0x20056774

08017130 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017130:	b570      	push	{r4, r5, r6, lr}
 8017132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017136:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017138:	4604      	mov	r4, r0
 801713a:	4299      	cmp	r1, r3
 801713c:	d01e      	beq.n	801717c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801713e:	6803      	ldr	r3, [r0, #0]
 8017140:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017142:	4b0f      	ldr	r3, [pc, #60]	; (8017180 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	b92b      	cbnz	r3, 8017154 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8017148:	4b0e      	ldr	r3, [pc, #56]	; (8017184 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801714a:	21ae      	movs	r1, #174	; 0xae
 801714c:	4a0e      	ldr	r2, [pc, #56]	; (8017188 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801714e:	480f      	ldr	r0, [pc, #60]	; (801718c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8017150:	f00e ff46 	bl	8025fe0 <__assert_func>
 8017154:	4b0e      	ldr	r3, [pc, #56]	; (8017190 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8017156:	881b      	ldrh	r3, [r3, #0]
 8017158:	428b      	cmp	r3, r1
 801715a:	d803      	bhi.n	8017164 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801715c:	4b0d      	ldr	r3, [pc, #52]	; (8017194 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801715e:	21af      	movs	r1, #175	; 0xaf
 8017160:	4a09      	ldr	r2, [pc, #36]	; (8017188 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017162:	e7f4      	b.n	801714e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8017164:	4b0c      	ldr	r3, [pc, #48]	; (8017198 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8017166:	6818      	ldr	r0, [r3, #0]
 8017168:	f7f1 fc26 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 801716c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801716e:	4601      	mov	r1, r0
 8017170:	46ac      	mov	ip, r5
 8017172:	4620      	mov	r0, r4
 8017174:	2300      	movs	r3, #0
 8017176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801717a:	4760      	bx	ip
 801717c:	2000      	movs	r0, #0
 801717e:	bd70      	pop	{r4, r5, r6, pc}
 8017180:	20056768 	.word	0x20056768
 8017184:	0802ce33 	.word	0x0802ce33
 8017188:	0802d074 	.word	0x0802d074
 801718c:	0802ce75 	.word	0x0802ce75
 8017190:	2005676c 	.word	0x2005676c
 8017194:	0802ce9e 	.word	0x0802ce9e
 8017198:	20056774 	.word	0x20056774

0801719c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171a4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80171a6:	b08c      	sub	sp, #48	; 0x30
 80171a8:	4604      	mov	r4, r0
 80171aa:	4293      	cmp	r3, r2
 80171ac:	460e      	mov	r6, r1
 80171ae:	d05d      	beq.n	801726c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80171b0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017290 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 80171b4:	f8d8 2000 	ldr.w	r2, [r8]
 80171b8:	b92a      	cbnz	r2, 80171c6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 80171ba:	4b2e      	ldr	r3, [pc, #184]	; (8017274 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 80171bc:	21ae      	movs	r1, #174	; 0xae
 80171be:	4a2e      	ldr	r2, [pc, #184]	; (8017278 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80171c0:	482e      	ldr	r0, [pc, #184]	; (801727c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 80171c2:	f00e ff0d 	bl	8025fe0 <__assert_func>
 80171c6:	4f2e      	ldr	r7, [pc, #184]	; (8017280 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 80171c8:	8839      	ldrh	r1, [r7, #0]
 80171ca:	4299      	cmp	r1, r3
 80171cc:	d803      	bhi.n	80171d6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 80171ce:	4b2d      	ldr	r3, [pc, #180]	; (8017284 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 80171d0:	21af      	movs	r1, #175	; 0xaf
 80171d2:	4a29      	ldr	r2, [pc, #164]	; (8017278 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80171d4:	e7f4      	b.n	80171c0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 80171d6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80171da:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80171de:	4b2a      	ldr	r3, [pc, #168]	; (8017288 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80171e6:	2a00      	cmp	r2, #0
 80171e8:	d040      	beq.n	801726c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80171ea:	784b      	ldrb	r3, [r1, #1]
 80171ec:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 80171f0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80171f4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80171f8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80171fc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017200:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8017204:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8017208:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801720c:	ad05      	add	r5, sp, #20
 801720e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017210:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017214:	9207      	str	r2, [sp, #28]
 8017216:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801721a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801721e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8017222:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017226:	f88d a020 	strb.w	sl, [sp, #32]
 801722a:	9009      	str	r0, [sp, #36]	; 0x24
 801722c:	f7ee fd84 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8017230:	4621      	mov	r1, r4
 8017232:	4681      	mov	r9, r0
 8017234:	4628      	mov	r0, r5
 8017236:	f002 fdf3 	bl	8019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801723a:	f8d8 3000 	ldr.w	r3, [r8]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d0bb      	beq.n	80171ba <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8017242:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017244:	883b      	ldrh	r3, [r7, #0]
 8017246:	428b      	cmp	r3, r1
 8017248:	d9c1      	bls.n	80171ce <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801724a:	4b10      	ldr	r3, [pc, #64]	; (801728c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801724c:	6818      	ldr	r0, [r3, #0]
 801724e:	f7f1 fbb3 	bl	80089b8 <_ZNK8touchgfx5Texts7getTextEt>
 8017252:	2300      	movs	r3, #0
 8017254:	9303      	str	r3, [sp, #12]
 8017256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017258:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801725c:	ab07      	add	r3, sp, #28
 801725e:	4648      	mov	r0, r9
 8017260:	9300      	str	r3, [sp, #0]
 8017262:	4633      	mov	r3, r6
 8017264:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017268:	f7f1 fb37 	bl	80088da <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801726c:	b00c      	add	sp, #48	; 0x30
 801726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017272:	bf00      	nop
 8017274:	0802ce33 	.word	0x0802ce33
 8017278:	0802d074 	.word	0x0802d074
 801727c:	0802ce75 	.word	0x0802ce75
 8017280:	2005676c 	.word	0x2005676c
 8017284:	0802ce9e 	.word	0x0802ce9e
 8017288:	20056770 	.word	0x20056770
 801728c:	20056774 	.word	0x20056774
 8017290:	20056768 	.word	0x20056768

08017294 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8017294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017298:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801729a:	4604      	mov	r4, r0
 801729c:	460e      	mov	r6, r1
 801729e:	b08e      	sub	sp, #56	; 0x38
 80172a0:	b218      	sxth	r0, r3
 80172a2:	8921      	ldrh	r1, [r4, #8]
 80172a4:	005b      	lsls	r3, r3, #1
 80172a6:	8962      	ldrh	r2, [r4, #10]
 80172a8:	f8ad 0000 	strh.w	r0, [sp]
 80172ac:	b29b      	uxth	r3, r3
 80172ae:	f8ad 0002 	strh.w	r0, [sp, #2]
 80172b2:	1ac9      	subs	r1, r1, r3
 80172b4:	1ad3      	subs	r3, r2, r3
 80172b6:	b209      	sxth	r1, r1
 80172b8:	b21b      	sxth	r3, r3
 80172ba:	2900      	cmp	r1, #0
 80172bc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80172c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80172c4:	dd5e      	ble.n	8017384 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	dd5c      	ble.n	8017384 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80172ca:	6830      	ldr	r0, [r6, #0]
 80172cc:	ab02      	add	r3, sp, #8
 80172ce:	6871      	ldr	r1, [r6, #4]
 80172d0:	c303      	stmia	r3!, {r0, r1}
 80172d2:	4669      	mov	r1, sp
 80172d4:	a802      	add	r0, sp, #8
 80172d6:	f7fd ff21 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 80172da:	4620      	mov	r0, r4
 80172dc:	a902      	add	r1, sp, #8
 80172de:	f7ff fec5 	bl	801706c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80172e2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80172e4:	2800      	cmp	r0, #0
 80172e6:	d05f      	beq.n	80173a8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80172e8:	8963      	ldrh	r3, [r4, #10]
 80172ea:	b202      	sxth	r2, r0
 80172ec:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80172f0:	2500      	movs	r5, #0
 80172f2:	1a1f      	subs	r7, r3, r0
 80172f4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80172f8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80172fc:	b21b      	sxth	r3, r3
 80172fe:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8017302:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8017306:	af04      	add	r7, sp, #16
 8017308:	1a09      	subs	r1, r1, r0
 801730a:	9506      	str	r5, [sp, #24]
 801730c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017310:	f8ad 5020 	strh.w	r5, [sp, #32]
 8017314:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8017318:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 801731c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017320:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017324:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017328:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 801732c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017330:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017334:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017338:	ab06      	add	r3, sp, #24
 801733a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801733e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017342:	e887 0003 	stmia.w	r7, {r0, r1}
 8017346:	4631      	mov	r1, r6
 8017348:	4638      	mov	r0, r7
 801734a:	f7fd fee7 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 801734e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017352:	2b00      	cmp	r3, #0
 8017354:	dd12      	ble.n	801737c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017356:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801735a:	2b00      	cmp	r3, #0
 801735c:	dd0e      	ble.n	801737c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801735e:	6823      	ldr	r3, [r4, #0]
 8017360:	4639      	mov	r1, r7
 8017362:	4620      	mov	r0, r4
 8017364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017366:	4798      	blx	r3
 8017368:	f7ee fce6 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 801736c:	6803      	ldr	r3, [r0, #0]
 801736e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017370:	4639      	mov	r1, r7
 8017372:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017376:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801737a:	47c0      	blx	r8
 801737c:	3501      	adds	r5, #1
 801737e:	2d04      	cmp	r5, #4
 8017380:	d1da      	bne.n	8017338 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8017382:	e011      	b.n	80173a8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017384:	6830      	ldr	r0, [r6, #0]
 8017386:	ab06      	add	r3, sp, #24
 8017388:	6871      	ldr	r1, [r6, #4]
 801738a:	c303      	stmia	r3!, {r0, r1}
 801738c:	6823      	ldr	r3, [r4, #0]
 801738e:	a906      	add	r1, sp, #24
 8017390:	4620      	mov	r0, r4
 8017392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017394:	4798      	blx	r3
 8017396:	f7ee fccf 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 801739a:	6803      	ldr	r3, [r0, #0]
 801739c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801739e:	a906      	add	r1, sp, #24
 80173a0:	699d      	ldr	r5, [r3, #24]
 80173a2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80173a6:	47a8      	blx	r5
 80173a8:	b00e      	add	sp, #56	; 0x38
 80173aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080173b0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80173b0:	4b02      	ldr	r3, [pc, #8]	; (80173bc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80173b2:	6018      	str	r0, [r3, #0]
 80173b4:	4b02      	ldr	r3, [pc, #8]	; (80173c0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80173b6:	6019      	str	r1, [r3, #0]
 80173b8:	4770      	bx	lr
 80173ba:	bf00      	nop
 80173bc:	20056700 	.word	0x20056700
 80173c0:	20056714 	.word	0x20056714

080173c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80173c4:	b538      	push	{r3, r4, r5, lr}
 80173c6:	4c2b      	ldr	r4, [pc, #172]	; (8017474 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80173c8:	4b2b      	ldr	r3, [pc, #172]	; (8017478 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80173ca:	6821      	ldr	r1, [r4, #0]
 80173cc:	681a      	ldr	r2, [r3, #0]
 80173ce:	4281      	cmp	r1, r0
 80173d0:	4d2a      	ldr	r5, [pc, #168]	; (801747c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80173d2:	492b      	ldr	r1, [pc, #172]	; (8017480 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80173d4:	d108      	bne.n	80173e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80173d6:	682b      	ldr	r3, [r5, #0]
 80173d8:	4293      	cmp	r3, r2
 80173da:	d105      	bne.n	80173e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80173dc:	6808      	ldr	r0, [r1, #0]
 80173de:	280f      	cmp	r0, #15
 80173e0:	bf94      	ite	ls
 80173e2:	2000      	movls	r0, #0
 80173e4:	2001      	movhi	r0, #1
 80173e6:	bd38      	pop	{r3, r4, r5, pc}
 80173e8:	4b26      	ldr	r3, [pc, #152]	; (8017484 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80173ea:	6020      	str	r0, [r4, #0]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	602a      	str	r2, [r5, #0]
 80173f0:	4298      	cmp	r0, r3
 80173f2:	d905      	bls.n	8017400 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80173f4:	4b24      	ldr	r3, [pc, #144]	; (8017488 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80173f6:	2137      	movs	r1, #55	; 0x37
 80173f8:	4a24      	ldr	r2, [pc, #144]	; (801748c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80173fa:	4825      	ldr	r0, [pc, #148]	; (8017490 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80173fc:	f00e fdf0 	bl	8025fe0 <__assert_func>
 8017400:	f010 0403 	ands.w	r4, r0, #3
 8017404:	bf1f      	itttt	ne
 8017406:	f1c4 0504 	rsbne	r5, r4, #4
 801740a:	3b04      	subne	r3, #4
 801740c:	1952      	addne	r2, r2, r5
 801740e:	191b      	addne	r3, r3, r4
 8017410:	4d20      	ldr	r5, [pc, #128]	; (8017494 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017412:	4402      	add	r2, r0
 8017414:	1a1b      	subs	r3, r3, r0
 8017416:	3001      	adds	r0, #1
 8017418:	602a      	str	r2, [r5, #0]
 801741a:	f020 0401 	bic.w	r4, r0, #1
 801741e:	42a3      	cmp	r3, r4
 8017420:	d203      	bcs.n	801742a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017422:	4b19      	ldr	r3, [pc, #100]	; (8017488 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017424:	214a      	movs	r1, #74	; 0x4a
 8017426:	4a19      	ldr	r2, [pc, #100]	; (801748c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017428:	e7e7      	b.n	80173fa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801742a:	f010 0002 	ands.w	r0, r0, #2
 801742e:	bf1f      	itttt	ne
 8017430:	f1c0 0504 	rsbne	r5, r0, #4
 8017434:	1952      	addne	r2, r2, r5
 8017436:	1f05      	subne	r5, r0, #4
 8017438:	195b      	addne	r3, r3, r5
 801743a:	4422      	add	r2, r4
 801743c:	4d16      	ldr	r5, [pc, #88]	; (8017498 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801743e:	1b1b      	subs	r3, r3, r4
 8017440:	602a      	str	r2, [r5, #0]
 8017442:	429c      	cmp	r4, r3
 8017444:	d903      	bls.n	801744e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017446:	4b10      	ldr	r3, [pc, #64]	; (8017488 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017448:	215d      	movs	r1, #93	; 0x5d
 801744a:	4a10      	ldr	r2, [pc, #64]	; (801748c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801744c:	e7d5      	b.n	80173fa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801744e:	b120      	cbz	r0, 801745a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017450:	f1c0 0504 	rsb	r5, r0, #4
 8017454:	3804      	subs	r0, #4
 8017456:	442a      	add	r2, r5
 8017458:	4403      	add	r3, r0
 801745a:	1b1b      	subs	r3, r3, r4
 801745c:	4422      	add	r2, r4
 801745e:	480f      	ldr	r0, [pc, #60]	; (801749c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017460:	2b0f      	cmp	r3, #15
 8017462:	600b      	str	r3, [r1, #0]
 8017464:	6002      	str	r2, [r0, #0]
 8017466:	d803      	bhi.n	8017470 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017468:	4b0d      	ldr	r3, [pc, #52]	; (80174a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801746a:	2170      	movs	r1, #112	; 0x70
 801746c:	4a07      	ldr	r2, [pc, #28]	; (801748c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801746e:	e7c4      	b.n	80173fa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017470:	2001      	movs	r0, #1
 8017472:	e7b8      	b.n	80173e6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017474:	20056708 	.word	0x20056708
 8017478:	20056700 	.word	0x20056700
 801747c:	20056710 	.word	0x20056710
 8017480:	20056718 	.word	0x20056718
 8017484:	20056714 	.word	0x20056714
 8017488:	0802d108 	.word	0x0802d108
 801748c:	0802d1d0 	.word	0x0802d1d0
 8017490:	0802d141 	.word	0x0802d141
 8017494:	2005671c 	.word	0x2005671c
 8017498:	2005670c 	.word	0x2005670c
 801749c:	20056704 	.word	0x20056704
 80174a0:	0802d18b 	.word	0x0802d18b

080174a4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80174a4:	4b04      	ldr	r3, [pc, #16]	; (80174b8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80174a6:	6818      	ldr	r0, [r3, #0]
 80174a8:	b120      	cbz	r0, 80174b4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80174aa:	4b04      	ldr	r3, [pc, #16]	; (80174bc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80174ac:	6818      	ldr	r0, [r3, #0]
 80174ae:	3000      	adds	r0, #0
 80174b0:	bf18      	it	ne
 80174b2:	2001      	movne	r0, #1
 80174b4:	4770      	bx	lr
 80174b6:	bf00      	nop
 80174b8:	20056700 	.word	0x20056700
 80174bc:	20056714 	.word	0x20056714

080174c0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80174c0:	4b01      	ldr	r3, [pc, #4]	; (80174c8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80174c2:	6818      	ldr	r0, [r3, #0]
 80174c4:	4770      	bx	lr
 80174c6:	bf00      	nop
 80174c8:	20056708 	.word	0x20056708

080174cc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80174cc:	4b01      	ldr	r3, [pc, #4]	; (80174d4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80174ce:	6818      	ldr	r0, [r3, #0]
 80174d0:	4770      	bx	lr
 80174d2:	bf00      	nop
 80174d4:	20056710 	.word	0x20056710

080174d8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80174d8:	4b01      	ldr	r3, [pc, #4]	; (80174e0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80174da:	6818      	ldr	r0, [r3, #0]
 80174dc:	4770      	bx	lr
 80174de:	bf00      	nop
 80174e0:	2005671c 	.word	0x2005671c

080174e4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80174e4:	4b01      	ldr	r3, [pc, #4]	; (80174ec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80174e6:	6818      	ldr	r0, [r3, #0]
 80174e8:	4770      	bx	lr
 80174ea:	bf00      	nop
 80174ec:	2005670c 	.word	0x2005670c

080174f0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80174f0:	4b01      	ldr	r3, [pc, #4]	; (80174f8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80174f2:	6818      	ldr	r0, [r3, #0]
 80174f4:	4770      	bx	lr
 80174f6:	bf00      	nop
 80174f8:	20056704 	.word	0x20056704

080174fc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80174fc:	4b01      	ldr	r3, [pc, #4]	; (8017504 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80174fe:	6818      	ldr	r0, [r3, #0]
 8017500:	4770      	bx	lr
 8017502:	bf00      	nop
 8017504:	20056718 	.word	0x20056718

08017508 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017508:	4b01      	ldr	r3, [pc, #4]	; (8017510 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801750a:	6019      	str	r1, [r3, #0]
 801750c:	4770      	bx	lr
 801750e:	bf00      	nop
 8017510:	20056720 	.word	0x20056720

08017514 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017518:	4696      	mov	lr, r2
 801751a:	b097      	sub	sp, #92	; 0x5c
 801751c:	4605      	mov	r5, r0
 801751e:	4614      	mov	r4, r2
 8017520:	460e      	mov	r6, r1
 8017522:	461f      	mov	r7, r3
 8017524:	f10d 0c1c 	add.w	ip, sp, #28
 8017528:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801752c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017530:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017534:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801753c:	f8de 3000 	ldr.w	r3, [lr]
 8017540:	f104 0e14 	add.w	lr, r4, #20
 8017544:	f8cc 3000 	str.w	r3, [ip]
 8017548:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801754c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017550:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017554:	f8de 3000 	ldr.w	r3, [lr]
 8017558:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801755c:	f8cc 3000 	str.w	r3, [ip]
 8017560:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017564:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801756c:	f8de 3000 	ldr.w	r3, [lr]
 8017570:	4631      	mov	r1, r6
 8017572:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017574:	4628      	mov	r0, r5
 8017576:	f8cc 3000 	str.w	r3, [ip]
 801757a:	682b      	ldr	r3, [r5, #0]
 801757c:	9201      	str	r2, [sp, #4]
 801757e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017580:	f8cd 8008 	str.w	r8, [sp, #8]
 8017584:	9200      	str	r2, [sp, #0]
 8017586:	aa07      	add	r2, sp, #28
 8017588:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801758c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8017590:	463b      	mov	r3, r7
 8017592:	47d8      	blx	fp
 8017594:	46a6      	mov	lr, r4
 8017596:	f10d 0c1c 	add.w	ip, sp, #28
 801759a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801759e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175a2:	f8de 3000 	ldr.w	r3, [lr]
 80175a6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80175aa:	343c      	adds	r4, #60	; 0x3c
 80175ac:	f8cc 3000 	str.w	r3, [ip]
 80175b0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80175b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80175b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175bc:	f8de 3000 	ldr.w	r3, [lr]
 80175c0:	f8cc 3000 	str.w	r3, [ip]
 80175c4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80175c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175ce:	6823      	ldr	r3, [r4, #0]
 80175d0:	4631      	mov	r1, r6
 80175d2:	4628      	mov	r0, r5
 80175d4:	f8cc 3000 	str.w	r3, [ip]
 80175d8:	682b      	ldr	r3, [r5, #0]
 80175da:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80175de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80175e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80175e4:	9201      	str	r2, [sp, #4]
 80175e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80175e8:	9200      	str	r2, [sp, #0]
 80175ea:	aa07      	add	r2, sp, #28
 80175ec:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80175ee:	463b      	mov	r3, r7
 80175f0:	47a0      	blx	r4
 80175f2:	b017      	add	sp, #92	; 0x5c
 80175f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080175f8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80175f8:	2000      	movs	r0, #0
 80175fa:	4770      	bx	lr

080175fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80175fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017600:	b08d      	sub	sp, #52	; 0x34
 8017602:	4688      	mov	r8, r1
 8017604:	f8d3 c000 	ldr.w	ip, [r3]
 8017608:	9916      	ldr	r1, [sp, #88]	; 0x58
 801760a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801760e:	680f      	ldr	r7, [r1, #0]
 8017610:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017614:	eba7 070c 	sub.w	r7, r7, ip
 8017618:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801761c:	edd3 6a07 	vldr	s13, [r3, #28]
 8017620:	42bc      	cmp	r4, r7
 8017622:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017624:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017628:	bfa8      	it	ge
 801762a:	463c      	movge	r4, r7
 801762c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017630:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017634:	ee07 4a90 	vmov	s15, r4
 8017638:	eb09 0e0c 	add.w	lr, r9, ip
 801763c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017640:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017644:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8017648:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801764c:	4571      	cmp	r1, lr
 801764e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017652:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017656:	ee25 5a27 	vmul.f32	s10, s10, s15
 801765a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801765e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017662:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017666:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801766a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801766e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017672:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017676:	f340 808c 	ble.w	8017792 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801767a:	eba1 060e 	sub.w	r6, r1, lr
 801767e:	fb96 f5f4 	sdiv	r5, r6, r4
 8017682:	ee07 5a10 	vmov	s14, r5
 8017686:	2d00      	cmp	r5, #0
 8017688:	fb04 6615 	mls	r6, r4, r5, r6
 801768c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017690:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017694:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017698:	eea7 1a05 	vfma.f32	s2, s14, s10
 801769c:	dd12      	ble.n	80176c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801769e:	ee70 6a44 	vsub.f32	s13, s0, s8
 80176a2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80176a6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80176aa:	eef5 6a40 	vcmp.f32	s13, #0.0
 80176ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176b2:	bf14      	ite	ne
 80176b4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80176b8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80176bc:	ee61 1a87 	vmul.f32	s3, s3, s14
 80176c0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80176c4:	fb05 f204 	mul.w	r2, r5, r4
 80176c8:	1abf      	subs	r7, r7, r2
 80176ca:	4494      	add	ip, r2
 80176cc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80176d0:	4411      	add	r1, r2
 80176d2:	eb09 020c 	add.w	r2, r9, ip
 80176d6:	b209      	sxth	r1, r1
 80176d8:	443a      	add	r2, r7
 80176da:	428a      	cmp	r2, r1
 80176dc:	bfc4      	itt	gt
 80176de:	eba1 0209 	subgt.w	r2, r1, r9
 80176e2:	eba2 070c 	subgt.w	r7, r2, ip
 80176e6:	2f00      	cmp	r7, #0
 80176e8:	dd50      	ble.n	801778c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80176ea:	fb97 f1f4 	sdiv	r1, r7, r4
 80176ee:	fb04 7211 	mls	r2, r4, r1, r7
 80176f2:	b90a      	cbnz	r2, 80176f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80176f4:	3901      	subs	r1, #1
 80176f6:	4622      	mov	r2, r4
 80176f8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80176fc:	6840      	ldr	r0, [r0, #4]
 80176fe:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8017702:	44b6      	add	lr, r6
 8017704:	f8d0 a000 	ldr.w	sl, [r0]
 8017708:	2900      	cmp	r1, #0
 801770a:	bfcc      	ite	gt
 801770c:	46a1      	movgt	r9, r4
 801770e:	4691      	movle	r9, r2
 8017710:	900b      	str	r0, [sp, #44]	; 0x2c
 8017712:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017714:	fb04 e505 	mla	r5, r4, r5, lr
 8017718:	eef0 6a42 	vmov.f32	s13, s4
 801771c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017720:	9008      	str	r0, [sp, #32]
 8017722:	eeb0 7a61 	vmov.f32	s14, s3
 8017726:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017728:	695b      	ldr	r3, [r3, #20]
 801772a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801772e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017732:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017736:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017738:	445b      	add	r3, fp
 801773a:	9307      	str	r3, [sp, #28]
 801773c:	ee16 3a90 	vmov	r3, s13
 8017740:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017744:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017748:	ee21 3a23 	vmul.f32	s6, s2, s7
 801774c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017750:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017754:	ee17 7a90 	vmov	r7, s15
 8017758:	ee73 7a42 	vsub.f32	s15, s6, s4
 801775c:	fb97 f7f4 	sdiv	r7, r7, r4
 8017760:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017764:	ee17 ca90 	vmov	ip, s15
 8017768:	fb9c fcf4 	sdiv	ip, ip, r4
 801776c:	fb0c 3306 	mla	r3, ip, r6, r3
 8017770:	9302      	str	r3, [sp, #8]
 8017772:	ee17 3a10 	vmov	r3, s14
 8017776:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801777a:	fb07 3706 	mla	r7, r7, r6, r3
 801777e:	eba9 0306 	sub.w	r3, r9, r6
 8017782:	e9cd 4700 	strd	r4, r7, [sp]
 8017786:	f8da 4008 	ldr.w	r4, [sl, #8]
 801778a:	47a0      	blx	r4
 801778c:	b00d      	add	sp, #52	; 0x34
 801778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017792:	2500      	movs	r5, #0
 8017794:	462e      	mov	r6, r5
 8017796:	e799      	b.n	80176cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801779c:	b0db      	sub	sp, #364	; 0x16c
 801779e:	461d      	mov	r5, r3
 80177a0:	4614      	mov	r4, r2
 80177a2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80177a6:	910f      	str	r1, [sp, #60]	; 0x3c
 80177a8:	4629      	mov	r1, r5
 80177aa:	930a      	str	r3, [sp, #40]	; 0x28
 80177ac:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80177b0:	9009      	str	r0, [sp, #36]	; 0x24
 80177b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80177b4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80177b8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80177bc:	9310      	str	r3, [sp, #64]	; 0x40
 80177be:	6803      	ldr	r3, [r0, #0]
 80177c0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80177c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80177c6:	47b8      	blx	r7
 80177c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ca:	6058      	str	r0, [r3, #4]
 80177cc:	2800      	cmp	r0, #0
 80177ce:	f000 83a1 	beq.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80177d2:	682b      	ldr	r3, [r5, #0]
 80177d4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80177d8:	ed94 7a02 	vldr	s14, [r4, #8]
 80177dc:	9314      	str	r3, [sp, #80]	; 0x50
 80177de:	686b      	ldr	r3, [r5, #4]
 80177e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80177e4:	9315      	str	r3, [sp, #84]	; 0x54
 80177e6:	4bc1      	ldr	r3, [pc, #772]	; (8017aec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80177e8:	7819      	ldrb	r1, [r3, #0]
 80177ea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80177ee:	2900      	cmp	r1, #0
 80177f0:	bf16      	itet	ne
 80177f2:	4619      	movne	r1, r3
 80177f4:	4611      	moveq	r1, r2
 80177f6:	4613      	movne	r3, r2
 80177f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fc:	9116      	str	r1, [sp, #88]	; 0x58
 80177fe:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8017802:	f240 8387 	bls.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017806:	ed94 7a07 	vldr	s14, [r4, #28]
 801780a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801780e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017812:	f240 837f 	bls.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017816:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801781a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801781e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017822:	f240 8377 	bls.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017826:	6822      	ldr	r2, [r4, #0]
 8017828:	4bb1      	ldr	r3, [pc, #708]	; (8017af0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801782a:	429a      	cmp	r2, r3
 801782c:	f2c0 8372 	blt.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017830:	49b0      	ldr	r1, [pc, #704]	; (8017af4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017832:	6963      	ldr	r3, [r4, #20]
 8017834:	428a      	cmp	r2, r1
 8017836:	f300 836d 	bgt.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801783a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801783e:	48ae      	ldr	r0, [pc, #696]	; (8017af8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017840:	33ff      	adds	r3, #255	; 0xff
 8017842:	4283      	cmp	r3, r0
 8017844:	f200 8366 	bhi.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801784a:	4dac      	ldr	r5, [pc, #688]	; (8017afc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801784c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017850:	33ff      	adds	r3, #255	; 0xff
 8017852:	42ab      	cmp	r3, r5
 8017854:	f200 835e 	bhi.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017858:	6862      	ldr	r2, [r4, #4]
 801785a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801785e:	33ff      	adds	r3, #255	; 0xff
 8017860:	4283      	cmp	r3, r0
 8017862:	f200 8357 	bhi.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017866:	69a1      	ldr	r1, [r4, #24]
 8017868:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801786c:	33ff      	adds	r3, #255	; 0xff
 801786e:	4283      	cmp	r3, r0
 8017870:	f200 8350 	bhi.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017874:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017876:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801787a:	30ff      	adds	r0, #255	; 0xff
 801787c:	42a8      	cmp	r0, r5
 801787e:	f200 8349 	bhi.w	8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017882:	428a      	cmp	r2, r1
 8017884:	f280 8110 	bge.w	8017aa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017888:	429a      	cmp	r2, r3
 801788a:	f300 8119 	bgt.w	8017ac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801788e:	4299      	cmp	r1, r3
 8017890:	f280 811d 	bge.w	8017ace <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017894:	2502      	movs	r5, #2
 8017896:	2701      	movs	r7, #1
 8017898:	46a9      	mov	r9, r5
 801789a:	46b8      	mov	r8, r7
 801789c:	f04f 0a00 	mov.w	sl, #0
 80178a0:	4621      	mov	r1, r4
 80178a2:	a849      	add	r0, sp, #292	; 0x124
 80178a4:	f003 fd3e 	bl	801b324 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80178a8:	4622      	mov	r2, r4
 80178aa:	4653      	mov	r3, sl
 80178ac:	a949      	add	r1, sp, #292	; 0x124
 80178ae:	f8cd 9000 	str.w	r9, [sp]
 80178b2:	a819      	add	r0, sp, #100	; 0x64
 80178b4:	f003 fe66 	bl	801b584 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80178b8:	4622      	mov	r2, r4
 80178ba:	4653      	mov	r3, sl
 80178bc:	a949      	add	r1, sp, #292	; 0x124
 80178be:	f8cd 8000 	str.w	r8, [sp]
 80178c2:	a829      	add	r0, sp, #164	; 0xa4
 80178c4:	f003 fe5e 	bl	801b584 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80178c8:	4643      	mov	r3, r8
 80178ca:	4622      	mov	r2, r4
 80178cc:	a949      	add	r1, sp, #292	; 0x124
 80178ce:	f8cd 9000 	str.w	r9, [sp]
 80178d2:	a839      	add	r0, sp, #228	; 0xe4
 80178d4:	f003 fe56 	bl	801b584 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80178d8:	42af      	cmp	r7, r5
 80178da:	af12      	add	r7, sp, #72	; 0x48
 80178dc:	bfb7      	itett	lt
 80178de:	2300      	movlt	r3, #0
 80178e0:	2301      	movge	r3, #1
 80178e2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80178e4:	ac19      	addlt	r4, sp, #100	; 0x64
 80178e6:	bfb1      	iteee	lt
 80178e8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80178ea:	ad19      	addge	r5, sp, #100	; 0x64
 80178ec:	930e      	strge	r3, [sp, #56]	; 0x38
 80178ee:	ac29      	addge	r4, sp, #164	; 0xa4
 80178f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80178f6:	e887 0003 	stmia.w	r7, {r0, r1}
 80178fa:	b928      	cbnz	r0, 8017908 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80178fc:	4b80      	ldr	r3, [pc, #512]	; (8017b00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80178fe:	6818      	ldr	r0, [r3, #0]
 8017900:	6803      	ldr	r3, [r0, #0]
 8017902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017904:	4798      	blx	r3
 8017906:	6038      	str	r0, [r7, #0]
 8017908:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801790a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801790e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017912:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017914:	930c      	str	r3, [sp, #48]	; 0x30
 8017916:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017918:	6963      	ldr	r3, [r4, #20]
 801791a:	440b      	add	r3, r1
 801791c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017920:	4408      	add	r0, r1
 8017922:	b200      	sxth	r0, r0
 8017924:	4283      	cmp	r3, r0
 8017926:	900d      	str	r0, [sp, #52]	; 0x34
 8017928:	f280 80dd 	bge.w	8017ae6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801792c:	428b      	cmp	r3, r1
 801792e:	da08      	bge.n	8017942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017930:	2a00      	cmp	r2, #0
 8017932:	dd06      	ble.n	8017942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017934:	1acb      	subs	r3, r1, r3
 8017936:	429a      	cmp	r2, r3
 8017938:	f2c0 80e4 	blt.w	8017b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801793c:	2b00      	cmp	r3, #0
 801793e:	f300 80e2 	bgt.w	8017b06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017942:	6967      	ldr	r7, [r4, #20]
 8017944:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801794a:	443b      	add	r3, r7
 801794c:	461f      	mov	r7, r3
 801794e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017950:	1bdf      	subs	r7, r3, r7
 8017952:	4297      	cmp	r7, r2
 8017954:	bfa8      	it	ge
 8017956:	4617      	movge	r7, r2
 8017958:	2f00      	cmp	r7, #0
 801795a:	f340 8166 	ble.w	8017c2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801795e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017960:	6829      	ldr	r1, [r5, #0]
 8017962:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017966:	f9bb 3000 	ldrsh.w	r3, [fp]
 801796a:	4411      	add	r1, r2
 801796c:	6820      	ldr	r0, [r4, #0]
 801796e:	4299      	cmp	r1, r3
 8017970:	dd1a      	ble.n	80179a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017972:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017976:	4402      	add	r2, r0
 8017978:	440b      	add	r3, r1
 801797a:	b21b      	sxth	r3, r3
 801797c:	429a      	cmp	r2, r3
 801797e:	dc13      	bgt.n	80179a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017980:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017982:	a912      	add	r1, sp, #72	; 0x48
 8017984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017986:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	9206      	str	r2, [sp, #24]
 801798c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801798e:	9500      	str	r5, [sp, #0]
 8017990:	9205      	str	r2, [sp, #20]
 8017992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017994:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017998:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801799a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801799e:	aa49      	add	r2, sp, #292	; 0x124
 80179a0:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 80179a4:	4623      	mov	r3, r4
 80179a6:	47c8      	blx	r9
 80179a8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80179ac:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80179b0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80179b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80179b8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80179bc:	68a1      	ldr	r1, [r4, #8]
 80179be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80179c2:	ed94 6a08 	vldr	s12, [r4, #32]
 80179c6:	edd4 6a07 	vldr	s13, [r4, #28]
 80179ca:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80179ce:	ee76 6a86 	vadd.f32	s13, s13, s12
 80179d2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80179d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80179da:	edc4 6a07 	vstr	s13, [r4, #28]
 80179de:	441a      	add	r2, r3
 80179e0:	6963      	ldr	r3, [r4, #20]
 80179e2:	3301      	adds	r3, #1
 80179e4:	6022      	str	r2, [r4, #0]
 80179e6:	6163      	str	r3, [r4, #20]
 80179e8:	69a3      	ldr	r3, [r4, #24]
 80179ea:	3b01      	subs	r3, #1
 80179ec:	61a3      	str	r3, [r4, #24]
 80179ee:	6923      	ldr	r3, [r4, #16]
 80179f0:	440b      	add	r3, r1
 80179f2:	68e1      	ldr	r1, [r4, #12]
 80179f4:	428b      	cmp	r3, r1
 80179f6:	6123      	str	r3, [r4, #16]
 80179f8:	db15      	blt.n	8017a26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80179fa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80179fe:	3201      	adds	r2, #1
 8017a00:	1a5b      	subs	r3, r3, r1
 8017a02:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017a06:	6022      	str	r2, [r4, #0]
 8017a08:	6123      	str	r3, [r4, #16]
 8017a0a:	edc4 6a07 	vstr	s13, [r4, #28]
 8017a0e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017a12:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017a16:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017a1a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a22:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017a26:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017a2a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017a2e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a36:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017a3a:	68a9      	ldr	r1, [r5, #8]
 8017a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017a40:	ed95 6a08 	vldr	s12, [r5, #32]
 8017a44:	edd5 6a07 	vldr	s13, [r5, #28]
 8017a48:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017a4c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017a50:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017a54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017a58:	edc5 6a07 	vstr	s13, [r5, #28]
 8017a5c:	441a      	add	r2, r3
 8017a5e:	696b      	ldr	r3, [r5, #20]
 8017a60:	3301      	adds	r3, #1
 8017a62:	602a      	str	r2, [r5, #0]
 8017a64:	616b      	str	r3, [r5, #20]
 8017a66:	69ab      	ldr	r3, [r5, #24]
 8017a68:	3b01      	subs	r3, #1
 8017a6a:	61ab      	str	r3, [r5, #24]
 8017a6c:	692b      	ldr	r3, [r5, #16]
 8017a6e:	440b      	add	r3, r1
 8017a70:	68e9      	ldr	r1, [r5, #12]
 8017a72:	428b      	cmp	r3, r1
 8017a74:	612b      	str	r3, [r5, #16]
 8017a76:	db15      	blt.n	8017aa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017a78:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017a7c:	3201      	adds	r2, #1
 8017a7e:	1a5b      	subs	r3, r3, r1
 8017a80:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017a84:	602a      	str	r2, [r5, #0]
 8017a86:	612b      	str	r3, [r5, #16]
 8017a88:	edc5 6a07 	vstr	s13, [r5, #28]
 8017a8c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017a90:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017a94:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017a98:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017aa0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017aa4:	3f01      	subs	r7, #1
 8017aa6:	e757      	b.n	8017958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017aa8:	4299      	cmp	r1, r3
 8017aaa:	dc13      	bgt.n	8017ad4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017aac:	429a      	cmp	r2, r3
 8017aae:	da14      	bge.n	8017ada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017ab0:	2502      	movs	r5, #2
 8017ab2:	2703      	movs	r7, #3
 8017ab4:	f04f 0800 	mov.w	r8, #0
 8017ab8:	46a9      	mov	r9, r5
 8017aba:	f04f 0a01 	mov.w	sl, #1
 8017abe:	e6ef      	b.n	80178a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017ac0:	2501      	movs	r5, #1
 8017ac2:	2700      	movs	r7, #0
 8017ac4:	46a9      	mov	r9, r5
 8017ac6:	46b8      	mov	r8, r7
 8017ac8:	f04f 0a02 	mov.w	sl, #2
 8017acc:	e6e8      	b.n	80178a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017ace:	2501      	movs	r5, #1
 8017ad0:	2702      	movs	r7, #2
 8017ad2:	e6e1      	b.n	8017898 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017ad4:	2500      	movs	r5, #0
 8017ad6:	2701      	movs	r7, #1
 8017ad8:	e7f4      	b.n	8017ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8017ada:	2702      	movs	r7, #2
 8017adc:	2503      	movs	r5, #3
 8017ade:	f04f 0900 	mov.w	r9, #0
 8017ae2:	46b8      	mov	r8, r7
 8017ae4:	e7e9      	b.n	8017aba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8017ae6:	4613      	mov	r3, r2
 8017ae8:	e728      	b.n	801793c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8017aea:	bf00      	nop
 8017aec:	200566f0 	.word	0x200566f0
 8017af0:	fffd8f01 	.word	0xfffd8f01
 8017af4:	00027100 	.word	0x00027100
 8017af8:	0004e1ff 	.word	0x0004e1ff
 8017afc:	0004e1fe 	.word	0x0004e1fe
 8017b00:	200566f8 	.word	0x200566f8
 8017b04:	4613      	mov	r3, r2
 8017b06:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017b08:	469e      	mov	lr, r3
 8017b0a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8017b0c:	469c      	mov	ip, r3
 8017b0e:	9111      	str	r1, [sp, #68]	; 0x44
 8017b10:	f04f 0900 	mov.w	r9, #0
 8017b14:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8017b18:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8017b1c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017b20:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8017b24:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8017b28:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017b2c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8017b30:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8017b34:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8017b38:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8017b3c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8017b40:	f1bc 0f00 	cmp.w	ip, #0
 8017b44:	d147      	bne.n	8017bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017b46:	eb03 0c07 	add.w	ip, r3, r7
 8017b4a:	1ad7      	subs	r7, r2, r3
 8017b4c:	f1b9 0f00 	cmp.w	r9, #0
 8017b50:	d009      	beq.n	8017b66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017b52:	9029      	str	r0, [sp, #164]	; 0xa4
 8017b54:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8017b58:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8017b5c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8017b60:	912d      	str	r1, [sp, #180]	; 0xb4
 8017b62:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8017b66:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017b68:	f04f 0800 	mov.w	r8, #0
 8017b6c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017b70:	9111      	str	r1, [sp, #68]	; 0x44
 8017b72:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017b76:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017b7a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017b7e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017b82:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017b86:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017b8a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017b8e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017b92:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017b96:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017b9a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017b9e:	f1be 0f00 	cmp.w	lr, #0
 8017ba2:	d031      	beq.n	8017c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017ba4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017ba6:	4450      	add	r0, sl
 8017ba8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017bac:	4431      	add	r1, r6
 8017bae:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017bb2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017bb6:	4549      	cmp	r1, r9
 8017bb8:	db08      	blt.n	8017bcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8017bba:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017bbe:	3001      	adds	r0, #1
 8017bc0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017bc4:	eba1 0109 	sub.w	r1, r1, r9
 8017bc8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017bcc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017bd0:	f04f 0801 	mov.w	r8, #1
 8017bd4:	e7e3      	b.n	8017b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8017bd6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017bd8:	4450      	add	r0, sl
 8017bda:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017bde:	4431      	add	r1, r6
 8017be0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017be4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017be8:	4541      	cmp	r1, r8
 8017bea:	db08      	blt.n	8017bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017bec:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017bf0:	3001      	adds	r0, #1
 8017bf2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017bf6:	eba1 0108 	sub.w	r1, r1, r8
 8017bfa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017bfe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017c02:	f04f 0901 	mov.w	r9, #1
 8017c06:	e79b      	b.n	8017b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017c08:	449c      	add	ip, r3
 8017c0a:	1aff      	subs	r7, r7, r3
 8017c0c:	f1b8 0f00 	cmp.w	r8, #0
 8017c10:	d009      	beq.n	8017c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017c12:	9019      	str	r0, [sp, #100]	; 0x64
 8017c14:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017c18:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017c1c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017c20:	911d      	str	r1, [sp, #116]	; 0x74
 8017c22:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017c26:	1ad2      	subs	r2, r2, r3
 8017c28:	e68b      	b.n	8017942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c2c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	f000 80d1 	beq.w	8017dd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017c34:	ad19      	add	r5, sp, #100	; 0x64
 8017c36:	ac39      	add	r4, sp, #228	; 0xe4
 8017c38:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017c3a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017c3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017c42:	930c      	str	r3, [sp, #48]	; 0x30
 8017c44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017c46:	6963      	ldr	r3, [r4, #20]
 8017c48:	440b      	add	r3, r1
 8017c4a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017c4e:	4408      	add	r0, r1
 8017c50:	b200      	sxth	r0, r0
 8017c52:	4283      	cmp	r3, r0
 8017c54:	900d      	str	r0, [sp, #52]	; 0x34
 8017c56:	f280 80c1 	bge.w	8017ddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8017c5a:	428b      	cmp	r3, r1
 8017c5c:	da08      	bge.n	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017c5e:	2a00      	cmp	r2, #0
 8017c60:	dd06      	ble.n	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017c62:	1acb      	subs	r3, r1, r3
 8017c64:	429a      	cmp	r2, r3
 8017c66:	f2c0 80bb 	blt.w	8017de0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	f300 80b9 	bgt.w	8017de2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017c70:	6967      	ldr	r7, [r4, #20]
 8017c72:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017c76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c78:	443b      	add	r3, r7
 8017c7a:	461f      	mov	r7, r3
 8017c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c7e:	1bdf      	subs	r7, r3, r7
 8017c80:	4297      	cmp	r7, r2
 8017c82:	bfa8      	it	ge
 8017c84:	4617      	movge	r7, r2
 8017c86:	2f00      	cmp	r7, #0
 8017c88:	f340 813c 	ble.w	8017f04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017c8c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017c8e:	6829      	ldr	r1, [r5, #0]
 8017c90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c94:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017c98:	4411      	add	r1, r2
 8017c9a:	6820      	ldr	r0, [r4, #0]
 8017c9c:	4299      	cmp	r1, r3
 8017c9e:	dd1a      	ble.n	8017cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017ca0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017ca4:	4402      	add	r2, r0
 8017ca6:	440b      	add	r3, r1
 8017ca8:	b21b      	sxth	r3, r3
 8017caa:	429a      	cmp	r2, r3
 8017cac:	dc13      	bgt.n	8017cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017cae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017cb0:	a912      	add	r1, sp, #72	; 0x48
 8017cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	9206      	str	r2, [sp, #24]
 8017cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017cbc:	9500      	str	r5, [sp, #0]
 8017cbe:	9205      	str	r2, [sp, #20]
 8017cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cc2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017cc6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017cc8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017ccc:	aa49      	add	r2, sp, #292	; 0x124
 8017cce:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8017cd2:	4623      	mov	r3, r4
 8017cd4:	47c8      	blx	r9
 8017cd6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017cda:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017cde:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017ce6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017cea:	68a1      	ldr	r1, [r4, #8]
 8017cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017cf0:	ed94 6a08 	vldr	s12, [r4, #32]
 8017cf4:	edd4 6a07 	vldr	s13, [r4, #28]
 8017cf8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017cfc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017d00:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017d04:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017d08:	edc4 6a07 	vstr	s13, [r4, #28]
 8017d0c:	441a      	add	r2, r3
 8017d0e:	6963      	ldr	r3, [r4, #20]
 8017d10:	3301      	adds	r3, #1
 8017d12:	6022      	str	r2, [r4, #0]
 8017d14:	6163      	str	r3, [r4, #20]
 8017d16:	69a3      	ldr	r3, [r4, #24]
 8017d18:	3b01      	subs	r3, #1
 8017d1a:	61a3      	str	r3, [r4, #24]
 8017d1c:	6923      	ldr	r3, [r4, #16]
 8017d1e:	440b      	add	r3, r1
 8017d20:	68e1      	ldr	r1, [r4, #12]
 8017d22:	428b      	cmp	r3, r1
 8017d24:	6123      	str	r3, [r4, #16]
 8017d26:	db15      	blt.n	8017d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017d28:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017d2c:	3201      	adds	r2, #1
 8017d2e:	1a5b      	subs	r3, r3, r1
 8017d30:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017d34:	6022      	str	r2, [r4, #0]
 8017d36:	6123      	str	r3, [r4, #16]
 8017d38:	edc4 6a07 	vstr	s13, [r4, #28]
 8017d3c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017d40:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017d44:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017d48:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d50:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017d54:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017d58:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017d5c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d64:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017d68:	68a9      	ldr	r1, [r5, #8]
 8017d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017d6e:	ed95 6a08 	vldr	s12, [r5, #32]
 8017d72:	edd5 6a07 	vldr	s13, [r5, #28]
 8017d76:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017d7a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017d7e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017d82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017d86:	edc5 6a07 	vstr	s13, [r5, #28]
 8017d8a:	441a      	add	r2, r3
 8017d8c:	696b      	ldr	r3, [r5, #20]
 8017d8e:	3301      	adds	r3, #1
 8017d90:	602a      	str	r2, [r5, #0]
 8017d92:	616b      	str	r3, [r5, #20]
 8017d94:	69ab      	ldr	r3, [r5, #24]
 8017d96:	3b01      	subs	r3, #1
 8017d98:	61ab      	str	r3, [r5, #24]
 8017d9a:	692b      	ldr	r3, [r5, #16]
 8017d9c:	440b      	add	r3, r1
 8017d9e:	68e9      	ldr	r1, [r5, #12]
 8017da0:	428b      	cmp	r3, r1
 8017da2:	612b      	str	r3, [r5, #16]
 8017da4:	db15      	blt.n	8017dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017da6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017daa:	3201      	adds	r2, #1
 8017dac:	1a5b      	subs	r3, r3, r1
 8017dae:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017db2:	602a      	str	r2, [r5, #0]
 8017db4:	612b      	str	r3, [r5, #16]
 8017db6:	edc5 6a07 	vstr	s13, [r5, #28]
 8017dba:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017dbe:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017dc2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017dc6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017dce:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017dd2:	3f01      	subs	r7, #1
 8017dd4:	e757      	b.n	8017c86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8017dd6:	ad39      	add	r5, sp, #228	; 0xe4
 8017dd8:	ac19      	add	r4, sp, #100	; 0x64
 8017dda:	e72d      	b.n	8017c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017ddc:	4613      	mov	r3, r2
 8017dde:	e744      	b.n	8017c6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017de0:	4613      	mov	r3, r2
 8017de2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017de4:	469e      	mov	lr, r3
 8017de6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017dea:	461f      	mov	r7, r3
 8017dec:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017df0:	f04f 0900 	mov.w	r9, #0
 8017df4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017df8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017dfc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017e00:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017e04:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8017e08:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8017e0a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8017e0e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017e12:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8017e16:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8017e1a:	960e      	str	r6, [sp, #56]	; 0x38
 8017e1c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017e20:	2f00      	cmp	r7, #0
 8017e22:	d146      	bne.n	8017eb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017e24:	449c      	add	ip, r3
 8017e26:	1ad7      	subs	r7, r2, r3
 8017e28:	f1b9 0f00 	cmp.w	r9, #0
 8017e2c:	d009      	beq.n	8017e42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017e2e:	9039      	str	r0, [sp, #228]	; 0xe4
 8017e30:	913d      	str	r1, [sp, #244]	; 0xf4
 8017e32:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017e36:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8017e3a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8017e3e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017e42:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017e44:	f04f 0800 	mov.w	r8, #0
 8017e48:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017e4c:	910e      	str	r1, [sp, #56]	; 0x38
 8017e4e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017e52:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017e56:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017e5a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017e5e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017e62:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017e66:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017e6a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017e6e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017e72:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017e76:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017e7a:	f1be 0f00 	cmp.w	lr, #0
 8017e7e:	d030      	beq.n	8017ee2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017e80:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017e82:	4450      	add	r0, sl
 8017e84:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017e88:	4431      	add	r1, r6
 8017e8a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017e8e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017e92:	4549      	cmp	r1, r9
 8017e94:	db08      	blt.n	8017ea8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017e96:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017e9a:	3001      	adds	r0, #1
 8017e9c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017ea0:	eba1 0109 	sub.w	r1, r1, r9
 8017ea4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017ea8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017eac:	f04f 0801 	mov.w	r8, #1
 8017eb0:	e7e3      	b.n	8017e7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017eb2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017eb4:	4450      	add	r0, sl
 8017eb6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017eba:	4431      	add	r1, r6
 8017ebc:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017ec0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017ec4:	4541      	cmp	r1, r8
 8017ec6:	db08      	blt.n	8017eda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8017ec8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017ecc:	3001      	adds	r0, #1
 8017ece:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017ed2:	eba1 0108 	sub.w	r1, r1, r8
 8017ed6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017eda:	3f01      	subs	r7, #1
 8017edc:	f04f 0901 	mov.w	r9, #1
 8017ee0:	e79e      	b.n	8017e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017ee2:	449c      	add	ip, r3
 8017ee4:	1aff      	subs	r7, r7, r3
 8017ee6:	f1b8 0f00 	cmp.w	r8, #0
 8017eea:	d009      	beq.n	8017f00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017eec:	9019      	str	r0, [sp, #100]	; 0x64
 8017eee:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017ef2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017ef6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017efa:	911d      	str	r1, [sp, #116]	; 0x74
 8017efc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017f00:	1ad2      	subs	r2, r2, r3
 8017f02:	e6b5      	b.n	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	b923      	cbnz	r3, 8017f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017f0a:	4b04      	ldr	r3, [pc, #16]	; (8017f1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017f0c:	6818      	ldr	r0, [r3, #0]
 8017f0e:	6803      	ldr	r3, [r0, #0]
 8017f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f12:	4798      	blx	r3
 8017f14:	b05b      	add	sp, #364	; 0x16c
 8017f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f1a:	bf00      	nop
 8017f1c:	200566f8 	.word	0x200566f8

08017f20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017f20:	b570      	push	{r4, r5, r6, lr}
 8017f22:	4604      	mov	r4, r0
 8017f24:	2500      	movs	r5, #0
 8017f26:	9804      	ldr	r0, [sp, #16]
 8017f28:	7223      	strb	r3, [r4, #8]
 8017f2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017f2e:	8025      	strh	r5, [r4, #0]
 8017f30:	6061      	str	r1, [r4, #4]
 8017f32:	7263      	strb	r3, [r4, #9]
 8017f34:	60e0      	str	r0, [r4, #12]
 8017f36:	8222      	strh	r2, [r4, #16]
 8017f38:	8265      	strh	r5, [r4, #18]
 8017f3a:	82a5      	strh	r5, [r4, #20]
 8017f3c:	82e5      	strh	r5, [r4, #22]
 8017f3e:	8325      	strh	r5, [r4, #24]
 8017f40:	8365      	strh	r5, [r4, #26]
 8017f42:	83a5      	strh	r5, [r4, #28]
 8017f44:	77a5      	strb	r5, [r4, #30]
 8017f46:	6803      	ldr	r3, [r0, #0]
 8017f48:	695b      	ldr	r3, [r3, #20]
 8017f4a:	4798      	blx	r3
 8017f4c:	4606      	mov	r6, r0
 8017f4e:	b1f8      	cbz	r0, 8017f90 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017f50:	68e0      	ldr	r0, [r4, #12]
 8017f52:	4631      	mov	r1, r6
 8017f54:	6803      	ldr	r3, [r0, #0]
 8017f56:	68db      	ldr	r3, [r3, #12]
 8017f58:	4798      	blx	r3
 8017f5a:	7b43      	ldrb	r3, [r0, #13]
 8017f5c:	7a82      	ldrb	r2, [r0, #10]
 8017f5e:	4605      	mov	r5, r0
 8017f60:	005b      	lsls	r3, r3, #1
 8017f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017f66:	4313      	orrs	r3, r2
 8017f68:	83a3      	strh	r3, [r4, #28]
 8017f6a:	7a63      	ldrb	r3, [r4, #9]
 8017f6c:	2b04      	cmp	r3, #4
 8017f6e:	d10f      	bne.n	8017f90 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017f70:	68e0      	ldr	r0, [r4, #12]
 8017f72:	462a      	mov	r2, r5
 8017f74:	4631      	mov	r1, r6
 8017f76:	6803      	ldr	r3, [r0, #0]
 8017f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f7a:	4798      	blx	r3
 8017f7c:	7b6b      	ldrb	r3, [r5, #13]
 8017f7e:	005b      	lsls	r3, r3, #1
 8017f80:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017f84:	7aab      	ldrb	r3, [r5, #10]
 8017f86:	4313      	orrs	r3, r2
 8017f88:	4418      	add	r0, r3
 8017f8a:	8ba3      	ldrh	r3, [r4, #28]
 8017f8c:	4418      	add	r0, r3
 8017f8e:	83a0      	strh	r0, [r4, #28]
 8017f90:	4620      	mov	r0, r4
 8017f92:	bd70      	pop	{r4, r5, r6, pc}

08017f94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f98:	2400      	movs	r4, #0
 8017f9a:	b085      	sub	sp, #20
 8017f9c:	4681      	mov	r9, r0
 8017f9e:	4688      	mov	r8, r1
 8017fa0:	4692      	mov	sl, r2
 8017fa2:	469b      	mov	fp, r3
 8017fa4:	4627      	mov	r7, r4
 8017fa6:	4625      	mov	r5, r4
 8017fa8:	4626      	mov	r6, r4
 8017faa:	4554      	cmp	r4, sl
 8017fac:	da2a      	bge.n	8018004 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017fae:	2300      	movs	r3, #0
 8017fb0:	9303      	str	r3, [sp, #12]
 8017fb2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017fb6:	429d      	cmp	r5, r3
 8017fb8:	d004      	beq.n	8017fc4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8017fba:	f242 030b 	movw	r3, #8203	; 0x200b
 8017fbe:	429d      	cmp	r5, r3
 8017fc0:	bf18      	it	ne
 8017fc2:	462f      	movne	r7, r5
 8017fc4:	ab03      	add	r3, sp, #12
 8017fc6:	4642      	mov	r2, r8
 8017fc8:	4659      	mov	r1, fp
 8017fca:	4648      	mov	r0, r9
 8017fcc:	f002 ff30 	bl	801ae30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017fd0:	4605      	mov	r5, r0
 8017fd2:	b1b8      	cbz	r0, 8018004 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017fd4:	280a      	cmp	r0, #10
 8017fd6:	d015      	beq.n	8018004 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017fd8:	9a03      	ldr	r2, [sp, #12]
 8017fda:	b18a      	cbz	r2, 8018000 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017fdc:	7b50      	ldrb	r0, [r2, #13]
 8017fde:	4639      	mov	r1, r7
 8017fe0:	7a93      	ldrb	r3, [r2, #10]
 8017fe2:	0040      	lsls	r0, r0, #1
 8017fe4:	8895      	ldrh	r5, [r2, #4]
 8017fe6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017fea:	4303      	orrs	r3, r0
 8017fec:	4640      	mov	r0, r8
 8017fee:	9301      	str	r3, [sp, #4]
 8017ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8017ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ff6:	4798      	blx	r3
 8017ff8:	9b01      	ldr	r3, [sp, #4]
 8017ffa:	4418      	add	r0, r3
 8017ffc:	4406      	add	r6, r0
 8017ffe:	b2b6      	uxth	r6, r6
 8018000:	3401      	adds	r4, #1
 8018002:	e7d2      	b.n	8017faa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8018004:	4630      	mov	r0, r6
 8018006:	b005      	add	sp, #20
 8018008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801800c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801800c:	2a02      	cmp	r2, #2
 801800e:	b530      	push	{r4, r5, lr}
 8018010:	d011      	beq.n	8018036 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018012:	2a03      	cmp	r2, #3
 8018014:	d01c      	beq.n	8018050 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018016:	2a01      	cmp	r2, #1
 8018018:	d10c      	bne.n	8018034 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801801a:	888b      	ldrh	r3, [r1, #4]
 801801c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018020:	8801      	ldrh	r1, [r0, #0]
 8018022:	1a9b      	subs	r3, r3, r2
 8018024:	8844      	ldrh	r4, [r0, #2]
 8018026:	1a5b      	subs	r3, r3, r1
 8018028:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801802c:	8004      	strh	r4, [r0, #0]
 801802e:	8043      	strh	r3, [r0, #2]
 8018030:	8081      	strh	r1, [r0, #4]
 8018032:	80c2      	strh	r2, [r0, #6]
 8018034:	bd30      	pop	{r4, r5, pc}
 8018036:	88cb      	ldrh	r3, [r1, #6]
 8018038:	88c2      	ldrh	r2, [r0, #6]
 801803a:	1a9b      	subs	r3, r3, r2
 801803c:	8842      	ldrh	r2, [r0, #2]
 801803e:	1a9b      	subs	r3, r3, r2
 8018040:	888a      	ldrh	r2, [r1, #4]
 8018042:	8881      	ldrh	r1, [r0, #4]
 8018044:	8043      	strh	r3, [r0, #2]
 8018046:	1a52      	subs	r2, r2, r1
 8018048:	8801      	ldrh	r1, [r0, #0]
 801804a:	1a52      	subs	r2, r2, r1
 801804c:	8002      	strh	r2, [r0, #0]
 801804e:	e7f1      	b.n	8018034 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018050:	88cb      	ldrh	r3, [r1, #6]
 8018052:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018056:	8841      	ldrh	r1, [r0, #2]
 8018058:	1a9b      	subs	r3, r3, r2
 801805a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801805e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018062:	1a5b      	subs	r3, r3, r1
 8018064:	8045      	strh	r5, [r0, #2]
 8018066:	8082      	strh	r2, [r0, #4]
 8018068:	8003      	strh	r3, [r0, #0]
 801806a:	80c4      	strh	r4, [r0, #6]
 801806c:	e7e2      	b.n	8018034 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801806e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801806e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018072:	b09f      	sub	sp, #124	; 0x7c
 8018074:	9116      	str	r1, [sp, #88]	; 0x58
 8018076:	9317      	str	r3, [sp, #92]	; 0x5c
 8018078:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801807a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801807c:	8809      	ldrh	r1, [r1, #0]
 801807e:	889b      	ldrh	r3, [r3, #4]
 8018080:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8018084:	440b      	add	r3, r1
 8018086:	9212      	str	r2, [sp, #72]	; 0x48
 8018088:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801808c:	b21b      	sxth	r3, r3
 801808e:	9011      	str	r0, [sp, #68]	; 0x44
 8018090:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8018094:	9310      	str	r3, [sp, #64]	; 0x40
 8018096:	f8d8 3000 	ldr.w	r3, [r8]
 801809a:	7a59      	ldrb	r1, [r3, #9]
 801809c:	7a1b      	ldrb	r3, [r3, #8]
 801809e:	9114      	str	r1, [sp, #80]	; 0x50
 80180a0:	9315      	str	r3, [sp, #84]	; 0x54
 80180a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80180a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80180a8:	2a00      	cmp	r2, #0
 80180aa:	d067      	beq.n	801817c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 80180ac:	f898 3010 	ldrb.w	r3, [r8, #16]
 80180b0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80180b2:	2b04      	cmp	r3, #4
 80180b4:	bf14      	ite	ne
 80180b6:	2301      	movne	r3, #1
 80180b8:	2302      	moveq	r3, #2
 80180ba:	4413      	add	r3, r2
 80180bc:	f04f 0900 	mov.w	r9, #0
 80180c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80180c2:	464c      	mov	r4, r9
 80180c4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80180c8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80180cc:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80180d0:	4293      	cmp	r3, r2
 80180d2:	f280 808c 	bge.w	80181ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80180d6:	2300      	movs	r3, #0
 80180d8:	931c      	str	r3, [sp, #112]	; 0x70
 80180da:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80180de:	429c      	cmp	r4, r3
 80180e0:	d006      	beq.n	80180f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80180e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180e4:	f242 020b 	movw	r2, #8203	; 0x200b
 80180e8:	4294      	cmp	r4, r2
 80180ea:	bf18      	it	ne
 80180ec:	4623      	movne	r3, r4
 80180ee:	930d      	str	r3, [sp, #52]	; 0x34
 80180f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180f2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80180f4:	f8d8 2000 	ldr.w	r2, [r8]
 80180f8:	428b      	cmp	r3, r1
 80180fa:	db41      	blt.n	8018180 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80180fc:	6813      	ldr	r3, [r2, #0]
 80180fe:	4610      	mov	r0, r2
 8018100:	695b      	ldr	r3, [r3, #20]
 8018102:	4798      	blx	r3
 8018104:	4604      	mov	r4, r0
 8018106:	f8d8 0000 	ldr.w	r0, [r8]
 801810a:	aa1d      	add	r2, sp, #116	; 0x74
 801810c:	4621      	mov	r1, r4
 801810e:	6803      	ldr	r3, [r0, #0]
 8018110:	689e      	ldr	r6, [r3, #8]
 8018112:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018116:	47b0      	blx	r6
 8018118:	901c      	str	r0, [sp, #112]	; 0x70
 801811a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801811e:	429c      	cmp	r4, r3
 8018120:	f000 80ea 	beq.w	80182f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018124:	f242 030b 	movw	r3, #8203	; 0x200b
 8018128:	429c      	cmp	r4, r3
 801812a:	f000 80e5 	beq.w	80182f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801812e:	2c00      	cmp	r4, #0
 8018130:	f000 80f7 	beq.w	8018322 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018134:	2c0a      	cmp	r4, #10
 8018136:	d060      	beq.n	80181fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018138:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801813a:	b36a      	cbz	r2, 8018198 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801813c:	8894      	ldrh	r4, [r2, #4]
 801813e:	f1bb 0f00 	cmp.w	fp, #0
 8018142:	d03b      	beq.n	80181bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8018144:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018148:	f1bb 0f01 	cmp.w	fp, #1
 801814c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018150:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018154:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018158:	ea49 0903 	orr.w	r9, r9, r3
 801815c:	d134      	bne.n	80181c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801815e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018160:	eba5 0509 	sub.w	r5, r5, r9
 8018164:	2b00      	cmp	r3, #0
 8018166:	d14f      	bne.n	8018208 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018168:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801816a:	eb09 0305 	add.w	r3, r9, r5
 801816e:	4413      	add	r3, r2
 8018170:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018172:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018176:	4293      	cmp	r3, r2
 8018178:	da51      	bge.n	801821e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801817a:	e038      	b.n	80181ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801817c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801817e:	e79d      	b.n	80180bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8018180:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018184:	4659      	mov	r1, fp
 8018186:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018188:	9301      	str	r3, [sp, #4]
 801818a:	ab1d      	add	r3, sp, #116	; 0x74
 801818c:	9300      	str	r3, [sp, #0]
 801818e:	ab1c      	add	r3, sp, #112	; 0x70
 8018190:	f002 fea6 	bl	801aee0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018194:	4604      	mov	r4, r0
 8018196:	e7c0      	b.n	801811a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018198:	f8d8 0000 	ldr.w	r0, [r8]
 801819c:	6803      	ldr	r3, [r0, #0]
 801819e:	691b      	ldr	r3, [r3, #16]
 80181a0:	4798      	blx	r3
 80181a2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80181a6:	4298      	cmp	r0, r3
 80181a8:	f000 80a6 	beq.w	80182f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80181ac:	f242 030b 	movw	r3, #8203	; 0x200b
 80181b0:	4298      	cmp	r0, r3
 80181b2:	f000 80a1 	beq.w	80182f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80181b6:	f1bb 0f00 	cmp.w	fp, #0
 80181ba:	d100      	bne.n	80181be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80181bc:	444d      	add	r5, r9
 80181be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80181c0:	2a00      	cmp	r2, #0
 80181c2:	d1bf      	bne.n	8018144 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80181c4:	4691      	mov	r9, r2
 80181c6:	e097      	b.n	80182f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80181c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	f000 80ab 	beq.w	8018326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80181d0:	f1bb 0f00 	cmp.w	fp, #0
 80181d4:	d118      	bne.n	8018208 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80181d6:	f8d8 0000 	ldr.w	r0, [r8]
 80181da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80181dc:	6803      	ldr	r3, [r0, #0]
 80181de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181e0:	4798      	blx	r3
 80181e2:	4405      	add	r5, r0
 80181e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80181e8:	1aeb      	subs	r3, r5, r3
 80181ea:	4293      	cmp	r3, r2
 80181ec:	dd17      	ble.n	801821e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80181ee:	2c00      	cmp	r4, #0
 80181f0:	f000 8097 	beq.w	8018322 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80181f4:	2c0a      	cmp	r4, #10
 80181f6:	f040 8085 	bne.w	8018304 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80181fa:	240a      	movs	r4, #10
 80181fc:	fab4 f084 	clz	r0, r4
 8018200:	0940      	lsrs	r0, r0, #5
 8018202:	b01f      	add	sp, #124	; 0x7c
 8018204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018208:	f8d8 0000 	ldr.w	r0, [r8]
 801820c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801820e:	6803      	ldr	r3, [r0, #0]
 8018210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018212:	4798      	blx	r3
 8018214:	f1bb 0f01 	cmp.w	fp, #1
 8018218:	eba5 0500 	sub.w	r5, r5, r0
 801821c:	d0a4      	beq.n	8018168 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801821e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018220:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018222:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018226:	f9b3 6000 	ldrsh.w	r6, [r3]
 801822a:	7b43      	ldrb	r3, [r0, #13]
 801822c:	4429      	add	r1, r5
 801822e:	015b      	lsls	r3, r3, #5
 8018230:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018234:	7983      	ldrb	r3, [r0, #6]
 8018236:	4313      	orrs	r3, r2
 8018238:	440b      	add	r3, r1
 801823a:	42b3      	cmp	r3, r6
 801823c:	db5c      	blt.n	80182f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801823e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018240:	4299      	cmp	r1, r3
 8018242:	da59      	bge.n	80182f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018244:	f8d8 0000 	ldr.w	r0, [r8]
 8018248:	42ae      	cmp	r6, r5
 801824a:	6803      	ldr	r3, [r0, #0]
 801824c:	bfcc      	ite	gt
 801824e:	1b76      	subgt	r6, r6, r5
 8018250:	2600      	movle	r6, #0
 8018252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018254:	bfc8      	it	gt
 8018256:	b2b6      	uxthgt	r6, r6
 8018258:	4798      	blx	r3
 801825a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801825c:	7b5a      	ldrb	r2, [r3, #13]
 801825e:	00d1      	lsls	r1, r2, #3
 8018260:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018264:	7a19      	ldrb	r1, [r3, #8]
 8018266:	4339      	orrs	r1, r7
 8018268:	0657      	lsls	r7, r2, #25
 801826a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801826c:	bf48      	it	mi
 801826e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018272:	4407      	add	r7, r0
 8018274:	bf48      	it	mi
 8018276:	b209      	sxthmi	r1, r1
 8018278:	1a7f      	subs	r7, r7, r1
 801827a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801827c:	b2bf      	uxth	r7, r7
 801827e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018282:	fa0f fa87 	sxth.w	sl, r7
 8018286:	4551      	cmp	r1, sl
 8018288:	dd3a      	ble.n	8018300 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801828a:	0112      	lsls	r2, r2, #4
 801828c:	79d8      	ldrb	r0, [r3, #7]
 801828e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018292:	4302      	orrs	r2, r0
 8018294:	4492      	add	sl, r2
 8018296:	4551      	cmp	r1, sl
 8018298:	dc2e      	bgt.n	80182f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801829a:	1bcf      	subs	r7, r1, r7
 801829c:	468a      	mov	sl, r1
 801829e:	b2bf      	uxth	r7, r7
 80182a0:	9319      	str	r3, [sp, #100]	; 0x64
 80182a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80182a4:	f8d8 0000 	ldr.w	r0, [r8]
 80182a8:	681a      	ldr	r2, [r3, #0]
 80182aa:	6801      	ldr	r1, [r0, #0]
 80182ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80182ae:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80182b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80182b2:	9218      	str	r2, [sp, #96]	; 0x60
 80182b4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80182b6:	4788      	blx	r1
 80182b8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80182bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80182be:	910b      	str	r1, [sp, #44]	; 0x2c
 80182c0:	f898 100e 	ldrb.w	r1, [r8, #14]
 80182c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80182c6:	910a      	str	r1, [sp, #40]	; 0x28
 80182c8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80182cc:	9109      	str	r1, [sp, #36]	; 0x24
 80182ce:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80182d2:	9305      	str	r3, [sp, #20]
 80182d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80182d6:	9206      	str	r2, [sp, #24]
 80182d8:	e9cd a601 	strd	sl, r6, [sp, #4]
 80182dc:	442e      	add	r6, r5
 80182de:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80182e2:	b236      	sxth	r6, r6
 80182e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80182e6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80182ea:	9600      	str	r6, [sp, #0]
 80182ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80182ee:	681a      	ldr	r2, [r3, #0]
 80182f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80182f2:	685b      	ldr	r3, [r3, #4]
 80182f4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80182f6:	47b0      	blx	r6
 80182f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182fa:	3301      	adds	r3, #1
 80182fc:	930e      	str	r3, [sp, #56]	; 0x38
 80182fe:	e6e5      	b.n	80180cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8018300:	2700      	movs	r7, #0
 8018302:	e7cd      	b.n	80182a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8018304:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018306:	3501      	adds	r5, #1
 8018308:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801830a:	429d      	cmp	r5, r3
 801830c:	f6bf af76 	bge.w	80181fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018310:	4659      	mov	r1, fp
 8018312:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018314:	f7f0 fa30 	bl	8008778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018318:	4604      	mov	r4, r0
 801831a:	b110      	cbz	r0, 8018322 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801831c:	280a      	cmp	r0, #10
 801831e:	d1f2      	bne.n	8018306 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018320:	e76b      	b.n	80181fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018322:	2400      	movs	r4, #0
 8018324:	e76a      	b.n	80181fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018326:	f1bb 0f00 	cmp.w	fp, #0
 801832a:	f43f af5b 	beq.w	80181e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801832e:	e776      	b.n	801821e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018330 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018330:	b530      	push	{r4, r5, lr}
 8018332:	8a44      	ldrh	r4, [r0, #18]
 8018334:	8ac5      	ldrh	r5, [r0, #22]
 8018336:	82c3      	strh	r3, [r0, #22]
 8018338:	442c      	add	r4, r5
 801833a:	1ae4      	subs	r4, r4, r3
 801833c:	8b03      	ldrh	r3, [r0, #24]
 801833e:	8244      	strh	r4, [r0, #18]
 8018340:	8a84      	ldrh	r4, [r0, #20]
 8018342:	4422      	add	r2, r4
 8018344:	440c      	add	r4, r1
 8018346:	1a59      	subs	r1, r3, r1
 8018348:	8342      	strh	r2, [r0, #26]
 801834a:	8284      	strh	r4, [r0, #20]
 801834c:	8301      	strh	r1, [r0, #24]
 801834e:	bd30      	pop	{r4, r5, pc}

08018350 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018354:	7a43      	ldrb	r3, [r0, #9]
 8018356:	b087      	sub	sp, #28
 8018358:	4604      	mov	r4, r0
 801835a:	460f      	mov	r7, r1
 801835c:	1eda      	subs	r2, r3, #3
 801835e:	b2d2      	uxtb	r2, r2
 8018360:	2900      	cmp	r1, #0
 8018362:	d036      	beq.n	80183d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018364:	2a01      	cmp	r2, #1
 8018366:	d932      	bls.n	80183ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8018368:	1e58      	subs	r0, r3, #1
 801836a:	f1d0 0b00 	rsbs	fp, r0, #0
 801836e:	eb4b 0b00 	adc.w	fp, fp, r0
 8018372:	1e99      	subs	r1, r3, #2
 8018374:	424b      	negs	r3, r1
 8018376:	414b      	adcs	r3, r1
 8018378:	9303      	str	r3, [sp, #12]
 801837a:	2300      	movs	r3, #0
 801837c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018380:	2500      	movs	r5, #0
 8018382:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8018386:	46a9      	mov	r9, r5
 8018388:	8265      	strh	r5, [r4, #18]
 801838a:	82a5      	strh	r5, [r4, #20]
 801838c:	2300      	movs	r3, #0
 801838e:	9305      	str	r3, [sp, #20]
 8018390:	8823      	ldrh	r3, [r4, #0]
 8018392:	2b20      	cmp	r3, #32
 8018394:	d02b      	beq.n	80183ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8018396:	eba3 020a 	sub.w	r2, r3, sl
 801839a:	4256      	negs	r6, r2
 801839c:	4156      	adcs	r6, r2
 801839e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80183a2:	4293      	cmp	r3, r2
 80183a4:	d004      	beq.n	80183b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80183a6:	4553      	cmp	r3, sl
 80183a8:	bf16      	itet	ne
 80183aa:	4699      	movne	r9, r3
 80183ac:	2601      	moveq	r6, #1
 80183ae:	2600      	movne	r6, #0
 80183b0:	ab05      	add	r3, sp, #20
 80183b2:	68e2      	ldr	r2, [r4, #12]
 80183b4:	7a21      	ldrb	r1, [r4, #8]
 80183b6:	6860      	ldr	r0, [r4, #4]
 80183b8:	f002 fd3a 	bl	801ae30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80183bc:	8020      	strh	r0, [r4, #0]
 80183be:	b9c8      	cbnz	r0, 80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80183c0:	8b22      	ldrh	r2, [r4, #24]
 80183c2:	2300      	movs	r3, #0
 80183c4:	4611      	mov	r1, r2
 80183c6:	4620      	mov	r0, r4
 80183c8:	f7ff ffb2 	bl	8018330 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80183cc:	e066      	b.n	801849c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80183ce:	468b      	mov	fp, r1
 80183d0:	e7cf      	b.n	8018372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80183d2:	3b01      	subs	r3, #1
 80183d4:	2a01      	cmp	r2, #1
 80183d6:	9103      	str	r1, [sp, #12]
 80183d8:	468b      	mov	fp, r1
 80183da:	bf8c      	ite	hi
 80183dc:	2200      	movhi	r2, #0
 80183de:	2201      	movls	r2, #1
 80183e0:	2b01      	cmp	r3, #1
 80183e2:	9202      	str	r2, [sp, #8]
 80183e4:	bf8c      	ite	hi
 80183e6:	2300      	movhi	r3, #0
 80183e8:	2301      	movls	r3, #1
 80183ea:	9301      	str	r3, [sp, #4]
 80183ec:	e7c8      	b.n	8018380 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80183ee:	4699      	mov	r9, r3
 80183f0:	2601      	movs	r6, #1
 80183f2:	e7dd      	b.n	80183b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80183f4:	8ae3      	ldrh	r3, [r4, #22]
 80183f6:	280a      	cmp	r0, #10
 80183f8:	f103 0301 	add.w	r3, r3, #1
 80183fc:	82e3      	strh	r3, [r4, #22]
 80183fe:	d0df      	beq.n	80183c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8018400:	9a05      	ldr	r2, [sp, #20]
 8018402:	bb42      	cbnz	r2, 8018456 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8018404:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018408:	4298      	cmp	r0, r3
 801840a:	d001      	beq.n	8018410 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801840c:	4550      	cmp	r0, sl
 801840e:	d1bd      	bne.n	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018410:	8823      	ldrh	r3, [r4, #0]
 8018412:	8b21      	ldrh	r1, [r4, #24]
 8018414:	2b20      	cmp	r3, #32
 8018416:	d001      	beq.n	801841c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8018418:	4553      	cmp	r3, sl
 801841a:	d131      	bne.n	8018480 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801841c:	2e00      	cmp	r6, #0
 801841e:	bf0a      	itet	eq
 8018420:	460d      	moveq	r5, r1
 8018422:	4630      	movne	r0, r6
 8018424:	2001      	moveq	r0, #1
 8018426:	440a      	add	r2, r1
 8018428:	8aa3      	ldrh	r3, [r4, #20]
 801842a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801842e:	b292      	uxth	r2, r2
 8018430:	8322      	strh	r2, [r4, #24]
 8018432:	4413      	add	r3, r2
 8018434:	2f00      	cmp	r7, #0
 8018436:	d03a      	beq.n	80184ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018438:	f1bb 0f00 	cmp.w	fp, #0
 801843c:	d102      	bne.n	8018444 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801843e:	9903      	ldr	r1, [sp, #12]
 8018440:	b301      	cbz	r1, 8018484 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018442:	b1f8      	cbz	r0, 8018484 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018444:	8ba1      	ldrh	r1, [r4, #28]
 8018446:	4419      	add	r1, r3
 8018448:	458c      	cmp	ip, r1
 801844a:	da2a      	bge.n	80184a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801844c:	8a61      	ldrh	r1, [r4, #18]
 801844e:	b341      	cbz	r1, 80184a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018450:	4563      	cmp	r3, ip
 8018452:	dd9b      	ble.n	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018454:	e01c      	b.n	8018490 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018456:	8893      	ldrh	r3, [r2, #4]
 8018458:	4649      	mov	r1, r9
 801845a:	8023      	strh	r3, [r4, #0]
 801845c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018460:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018464:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8018468:	f892 800a 	ldrb.w	r8, [r2, #10]
 801846c:	ea48 0800 	orr.w	r8, r8, r0
 8018470:	68e0      	ldr	r0, [r4, #12]
 8018472:	6803      	ldr	r3, [r0, #0]
 8018474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018476:	4798      	blx	r3
 8018478:	eb08 0200 	add.w	r2, r8, r0
 801847c:	b292      	uxth	r2, r2
 801847e:	e7c7      	b.n	8018410 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018480:	2000      	movs	r0, #0
 8018482:	e7d0      	b.n	8018426 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018484:	4563      	cmp	r3, ip
 8018486:	dd81      	ble.n	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018488:	8a63      	ldrh	r3, [r4, #18]
 801848a:	2b00      	cmp	r3, #0
 801848c:	f43f af7e 	beq.w	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018490:	2301      	movs	r3, #1
 8018492:	8ba2      	ldrh	r2, [r4, #28]
 8018494:	77a3      	strb	r3, [r4, #30]
 8018496:	8b63      	ldrh	r3, [r4, #26]
 8018498:	4413      	add	r3, r2
 801849a:	8363      	strh	r3, [r4, #26]
 801849c:	b007      	add	sp, #28
 801849e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184a2:	2300      	movs	r3, #0
 80184a4:	4611      	mov	r1, r2
 80184a6:	4620      	mov	r0, r4
 80184a8:	f7ff ff42 	bl	8018330 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80184ac:	e76e      	b.n	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80184ae:	4563      	cmp	r3, ip
 80184b0:	dd14      	ble.n	80184dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 80184b2:	9b02      	ldr	r3, [sp, #8]
 80184b4:	b113      	cbz	r3, 80184bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80184b6:	2301      	movs	r3, #1
 80184b8:	460a      	mov	r2, r1
 80184ba:	e783      	b.n	80183c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80184bc:	9b01      	ldr	r3, [sp, #4]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	f43f af64 	beq.w	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80184c4:	2800      	cmp	r0, #0
 80184c6:	f47f af61 	bne.w	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80184ca:	b116      	cbz	r6, 80184d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80184cc:	2301      	movs	r3, #1
 80184ce:	462a      	mov	r2, r5
 80184d0:	e779      	b.n	80183c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80184d2:	8a63      	ldrh	r3, [r4, #18]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	f43f af59 	beq.w	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80184da:	e7df      	b.n	801849c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80184dc:	2800      	cmp	r0, #0
 80184de:	f47f af55 	bne.w	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80184e2:	2e00      	cmp	r6, #0
 80184e4:	f43f af52 	beq.w	801838c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80184e8:	2301      	movs	r3, #1
 80184ea:	462a      	mov	r2, r5
 80184ec:	e7db      	b.n	80184a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080184ee <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80184ee:	b530      	push	{r4, r5, lr}
 80184f0:	4605      	mov	r5, r0
 80184f2:	b08b      	sub	sp, #44	; 0x2c
 80184f4:	b191      	cbz	r1, 801851c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80184f6:	2401      	movs	r4, #1
 80184f8:	e9cd 3100 	strd	r3, r1, [sp]
 80184fc:	4613      	mov	r3, r2
 80184fe:	4601      	mov	r1, r0
 8018500:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018504:	a802      	add	r0, sp, #8
 8018506:	f7ff fd0b 	bl	8017f20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801850a:	2100      	movs	r1, #0
 801850c:	a802      	add	r0, sp, #8
 801850e:	f7ff ff1f 	bl	8018350 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018512:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018516:	b163      	cbz	r3, 8018532 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018518:	3401      	adds	r4, #1
 801851a:	e7f6      	b.n	801850a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801851c:	2401      	movs	r4, #1
 801851e:	f002 fd7f 	bl	801b020 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018522:	280a      	cmp	r0, #10
 8018524:	4628      	mov	r0, r5
 8018526:	bf08      	it	eq
 8018528:	3401      	addeq	r4, #1
 801852a:	f002 fd79 	bl	801b020 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801852e:	2800      	cmp	r0, #0
 8018530:	d1f7      	bne.n	8018522 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018532:	b2a0      	uxth	r0, r4
 8018534:	b00b      	add	sp, #44	; 0x2c
 8018536:	bd30      	pop	{r4, r5, pc}

08018538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801853c:	b0df      	sub	sp, #380	; 0x17c
 801853e:	4689      	mov	r9, r1
 8018540:	461c      	mov	r4, r3
 8018542:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 8018546:	900a      	str	r0, [sp, #40]	; 0x28
 8018548:	f1ba 0f00 	cmp.w	sl, #0
 801854c:	f000 80b1 	beq.w	80186b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	2b00      	cmp	r3, #0
 8018554:	f000 80ad 	beq.w	80186b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018558:	7ba3      	ldrb	r3, [r4, #14]
 801855a:	2b00      	cmp	r3, #0
 801855c:	f000 80a9 	beq.w	80186b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018560:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8018564:	6810      	ldr	r0, [r2, #0]
 8018566:	6851      	ldr	r1, [r2, #4]
 8018568:	2500      	movs	r5, #0
 801856a:	4643      	mov	r3, r8
 801856c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018570:	950f      	str	r5, [sp, #60]	; 0x3c
 8018572:	af19      	add	r7, sp, #100	; 0x64
 8018574:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018578:	79a2      	ldrb	r2, [r4, #6]
 801857a:	c303      	stmia	r3!, {r0, r1}
 801857c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018580:	a90f      	add	r1, sp, #60	; 0x3c
 8018582:	4640      	mov	r0, r8
 8018584:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018588:	f7ff fd40 	bl	801800c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801858c:	a90f      	add	r1, sp, #60	; 0x3c
 801858e:	79a2      	ldrb	r2, [r4, #6]
 8018590:	4608      	mov	r0, r1
 8018592:	f7ff fd3b 	bl	801800c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018596:	4638      	mov	r0, r7
 8018598:	f002 f901 	bl	801a79e <_ZN8touchgfx12TextProviderC1Ev>
 801859c:	6820      	ldr	r0, [r4, #0]
 801859e:	6803      	ldr	r3, [r0, #0]
 80185a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185a2:	4798      	blx	r3
 80185a4:	4606      	mov	r6, r0
 80185a6:	6820      	ldr	r0, [r4, #0]
 80185a8:	6803      	ldr	r3, [r0, #0]
 80185aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80185ac:	4798      	blx	r3
 80185ae:	4633      	mov	r3, r6
 80185b0:	9000      	str	r0, [sp, #0]
 80185b2:	4651      	mov	r1, sl
 80185b4:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80185b6:	4638      	mov	r0, r7
 80185b8:	f002 f93e 	bl	801a838 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80185bc:	7923      	ldrb	r3, [r4, #4]
 80185be:	6820      	ldr	r0, [r4, #0]
 80185c0:	9308      	str	r3, [sp, #32]
 80185c2:	6803      	ldr	r3, [r0, #0]
 80185c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185c6:	4798      	blx	r3
 80185c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185cc:	181e      	adds	r6, r3, r0
 80185ce:	42ae      	cmp	r6, r5
 80185d0:	dd06      	ble.n	80185e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80185d2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80185d6:	4282      	cmp	r2, r0
 80185d8:	bfa4      	itt	ge
 80185da:	189d      	addge	r5, r3, r2
 80185dc:	fb95 f5f6 	sdivge	r5, r5, r6
 80185e0:	a830      	add	r0, sp, #192	; 0xc0
 80185e2:	f002 f8dc 	bl	801a79e <_ZN8touchgfx12TextProviderC1Ev>
 80185e6:	7c23      	ldrb	r3, [r4, #16]
 80185e8:	b17b      	cbz	r3, 801860a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80185ea:	6820      	ldr	r0, [r4, #0]
 80185ec:	6803      	ldr	r3, [r0, #0]
 80185ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185f0:	4798      	blx	r3
 80185f2:	4683      	mov	fp, r0
 80185f4:	6820      	ldr	r0, [r4, #0]
 80185f6:	6803      	ldr	r3, [r0, #0]
 80185f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80185fa:	4798      	blx	r3
 80185fc:	465b      	mov	r3, fp
 80185fe:	9000      	str	r0, [sp, #0]
 8018600:	4651      	mov	r1, sl
 8018602:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8018604:	a830      	add	r0, sp, #192	; 0xc0
 8018606:	f002 f917 	bl	801a838 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801860a:	7c21      	ldrb	r1, [r4, #16]
 801860c:	a811      	add	r0, sp, #68	; 0x44
 801860e:	7963      	ldrb	r3, [r4, #5]
 8018610:	9101      	str	r1, [sp, #4]
 8018612:	6821      	ldr	r1, [r4, #0]
 8018614:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018618:	9100      	str	r1, [sp, #0]
 801861a:	a930      	add	r1, sp, #192	; 0xc0
 801861c:	f7ff fc80 	bl	8017f20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018620:	7c23      	ldrb	r3, [r4, #16]
 8018622:	b9bb      	cbnz	r3, 8018654 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 8018624:	fa1f fa86 	uxth.w	sl, r6
 8018628:	2d00      	cmp	r5, #0
 801862a:	dd45      	ble.n	80186b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801862c:	4638      	mov	r0, r7
 801862e:	f002 fcf7 	bl	801b020 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018632:	2800      	cmp	r0, #0
 8018634:	d03d      	beq.n	80186b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018636:	280a      	cmp	r0, #10
 8018638:	d1f6      	bne.n	8018628 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 801863a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801863e:	3d01      	subs	r5, #1
 8018640:	4453      	add	r3, sl
 8018642:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018646:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801864a:	eba3 030a 	sub.w	r3, r3, sl
 801864e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018652:	e7e9      	b.n	8018628 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 8018654:	0073      	lsls	r3, r6, #1
 8018656:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801865a:	fa1f fa86 	uxth.w	sl, r6
 801865e:	9309      	str	r3, [sp, #36]	; 0x24
 8018660:	2d00      	cmp	r5, #0
 8018662:	dd29      	ble.n	80186b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8018664:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8018668:	a811      	add	r0, sp, #68	; 0x44
 801866a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801866c:	428b      	cmp	r3, r1
 801866e:	bfd4      	ite	le
 8018670:	2100      	movle	r1, #0
 8018672:	2101      	movgt	r1, #1
 8018674:	f7ff fe6c 	bl	8018350 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018678:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801867c:	3b01      	subs	r3, #1
 801867e:	b29b      	uxth	r3, r3
 8018680:	455b      	cmp	r3, fp
 8018682:	930b      	str	r3, [sp, #44]	; 0x2c
 8018684:	d005      	beq.n	8018692 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8018686:	7961      	ldrb	r1, [r4, #5]
 8018688:	4638      	mov	r0, r7
 801868a:	f7f0 f875 	bl	8008778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801868e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018690:	e7f4      	b.n	801867c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8018692:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018696:	3d01      	subs	r5, #1
 8018698:	4453      	add	r3, sl
 801869a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801869e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80186a2:	eba3 030a 	sub.w	r3, r3, sl
 80186a6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80186aa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d1d6      	bne.n	8018660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 80186b2:	b05f      	add	sp, #380	; 0x17c
 80186b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186b8:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 80186bc:	ad47      	add	r5, sp, #284	; 0x11c
 80186be:	f04f 0b00 	mov.w	fp, #0
 80186c2:	7c23      	ldrb	r3, [r4, #16]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d067      	beq.n	8018798 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80186c8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80186cc:	a811      	add	r0, sp, #68	; 0x44
 80186ce:	458a      	cmp	sl, r1
 80186d0:	bfd4      	ite	le
 80186d2:	2100      	movle	r1, #0
 80186d4:	2101      	movgt	r1, #1
 80186d6:	f7ff fe3b 	bl	8018350 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80186da:	9b08      	ldr	r3, [sp, #32]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d056      	beq.n	801878e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80186e0:	7c23      	ldrb	r3, [r4, #16]
 80186e2:	225c      	movs	r2, #92	; 0x5c
 80186e4:	4639      	mov	r1, r7
 80186e6:	4628      	mov	r0, r5
 80186e8:	9309      	str	r3, [sp, #36]	; 0x24
 80186ea:	f00d fcf7 	bl	80260dc <memcpy>
 80186ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d059      	beq.n	80187a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80186f4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80186f8:	7922      	ldrb	r2, [r4, #4]
 80186fa:	2a01      	cmp	r2, #1
 80186fc:	d13d      	bne.n	801877a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80186fe:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8018702:	1ac0      	subs	r0, r0, r3
 8018704:	2302      	movs	r3, #2
 8018706:	fb90 f0f3 	sdiv	r0, r0, r3
 801870a:	b200      	sxth	r0, r0
 801870c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018710:	4418      	add	r0, r3
 8018712:	7c23      	ldrb	r3, [r4, #16]
 8018714:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 8018718:	2b00      	cmp	r3, #0
 801871a:	d03a      	beq.n	8018792 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801871c:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8018720:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8018724:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8018728:	9500      	str	r5, [sp, #0]
 801872a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801872c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018730:	e9cd b703 	strd	fp, r7, [sp, #12]
 8018734:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8018738:	464a      	mov	r2, r9
 801873a:	2100      	movs	r1, #0
 801873c:	f7ff fc97 	bl	801806e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018740:	2800      	cmp	r0, #0
 8018742:	d1b6      	bne.n	80186b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018744:	b2b2      	uxth	r2, r6
 8018746:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801874a:	4611      	mov	r1, r2
 801874c:	4413      	add	r3, r2
 801874e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018752:	b21b      	sxth	r3, r3
 8018754:	1a52      	subs	r2, r2, r1
 8018756:	7c21      	ldrb	r1, [r4, #16]
 8018758:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801875c:	b212      	sxth	r2, r2
 801875e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018762:	b109      	cbz	r1, 8018768 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8018764:	42b2      	cmp	r2, r6
 8018766:	dba4      	blt.n	80186b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018768:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801876c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8018770:	440a      	add	r2, r1
 8018772:	b212      	sxth	r2, r2
 8018774:	4293      	cmp	r3, r2
 8018776:	dda4      	ble.n	80186c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 8018778:	e79b      	b.n	80186b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801877a:	2a02      	cmp	r2, #2
 801877c:	d105      	bne.n	801878a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801877e:	7be2      	ldrb	r2, [r4, #15]
 8018780:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8018784:	1a80      	subs	r0, r0, r2
 8018786:	1ac0      	subs	r0, r0, r3
 8018788:	e7bf      	b.n	801870a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 801878a:	2000      	movs	r0, #0
 801878c:	e7be      	b.n	801870c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801878e:	7be0      	ldrb	r0, [r4, #15]
 8018790:	e7bc      	b.n	801870c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8018792:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018796:	e7c3      	b.n	8018720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8018798:	9b08      	ldr	r3, [sp, #32]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d0f7      	beq.n	801878e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801879e:	225c      	movs	r2, #92	; 0x5c
 80187a0:	4639      	mov	r1, r7
 80187a2:	4628      	mov	r0, r5
 80187a4:	f00d fc9a 	bl	80260dc <memcpy>
 80187a8:	2300      	movs	r3, #0
 80187aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80187ae:	6821      	ldr	r1, [r4, #0]
 80187b0:	4628      	mov	r0, r5
 80187b2:	f7ff fbef 	bl	8017f94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80187b6:	b203      	sxth	r3, r0
 80187b8:	e79e      	b.n	80186f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

080187ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80187ba:	2b02      	cmp	r3, #2
 80187bc:	b510      	push	{r4, lr}
 80187be:	f9b0 4000 	ldrsh.w	r4, [r0]
 80187c2:	d00b      	beq.n	80187dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80187c4:	2b03      	cmp	r3, #3
 80187c6:	d00e      	beq.n	80187e6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80187c8:	2b01      	cmp	r3, #1
 80187ca:	d001      	beq.n	80187d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80187cc:	1860      	adds	r0, r4, r1
 80187ce:	bd10      	pop	{r4, pc}
 80187d0:	8880      	ldrh	r0, [r0, #4]
 80187d2:	4420      	add	r0, r4
 80187d4:	b200      	sxth	r0, r0
 80187d6:	1a80      	subs	r0, r0, r2
 80187d8:	3801      	subs	r0, #1
 80187da:	e7f8      	b.n	80187ce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80187dc:	8880      	ldrh	r0, [r0, #4]
 80187de:	4420      	add	r0, r4
 80187e0:	b200      	sxth	r0, r0
 80187e2:	1a40      	subs	r0, r0, r1
 80187e4:	e7f8      	b.n	80187d8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80187e6:	18a0      	adds	r0, r4, r2
 80187e8:	e7f1      	b.n	80187ce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080187ea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80187ea:	2b02      	cmp	r3, #2
 80187ec:	b510      	push	{r4, lr}
 80187ee:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80187f2:	d006      	beq.n	8018802 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80187f4:	2b03      	cmp	r3, #3
 80187f6:	d00a      	beq.n	801880e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80187f8:	2b01      	cmp	r3, #1
 80187fa:	bf14      	ite	ne
 80187fc:	18a0      	addne	r0, r4, r2
 80187fe:	1860      	addeq	r0, r4, r1
 8018800:	bd10      	pop	{r4, pc}
 8018802:	88c0      	ldrh	r0, [r0, #6]
 8018804:	4420      	add	r0, r4
 8018806:	b200      	sxth	r0, r0
 8018808:	1a80      	subs	r0, r0, r2
 801880a:	3801      	subs	r0, #1
 801880c:	e7f8      	b.n	8018800 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801880e:	88c0      	ldrh	r0, [r0, #6]
 8018810:	4420      	add	r0, r4
 8018812:	b200      	sxth	r0, r0
 8018814:	1a40      	subs	r0, r0, r1
 8018816:	e7f8      	b.n	801880a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

08018818 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018818:	4b01      	ldr	r3, [pc, #4]	; (8018820 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801881a:	2200      	movs	r2, #0
 801881c:	601a      	str	r2, [r3, #0]
 801881e:	4770      	bx	lr
 8018820:	20056720 	.word	0x20056720

08018824 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018824:	4603      	mov	r3, r0
 8018826:	b1c8      	cbz	r0, 801885c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8018828:	0c02      	lsrs	r2, r0, #16
 801882a:	0412      	lsls	r2, r2, #16
 801882c:	b9a2      	cbnz	r2, 8018858 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801882e:	0403      	lsls	r3, r0, #16
 8018830:	2010      	movs	r0, #16
 8018832:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018836:	bf04      	itt	eq
 8018838:	021b      	lsleq	r3, r3, #8
 801883a:	3008      	addeq	r0, #8
 801883c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018840:	bf04      	itt	eq
 8018842:	011b      	lsleq	r3, r3, #4
 8018844:	3004      	addeq	r0, #4
 8018846:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801884a:	bf04      	itt	eq
 801884c:	009b      	lsleq	r3, r3, #2
 801884e:	3002      	addeq	r0, #2
 8018850:	2b00      	cmp	r3, #0
 8018852:	db04      	blt.n	801885e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018854:	3001      	adds	r0, #1
 8018856:	4770      	bx	lr
 8018858:	2000      	movs	r0, #0
 801885a:	e7ea      	b.n	8018832 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801885c:	2020      	movs	r0, #32
 801885e:	4770      	bx	lr

08018860 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8018860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018864:	b087      	sub	sp, #28
 8018866:	4681      	mov	r9, r0
 8018868:	4698      	mov	r8, r3
 801886a:	4610      	mov	r0, r2
 801886c:	460d      	mov	r5, r1
 801886e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8018872:	b981      	cbnz	r1, 8018896 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8018874:	b14b      	cbz	r3, 801888a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8018876:	460b      	mov	r3, r1
 8018878:	464a      	mov	r2, r9
 801887a:	4641      	mov	r1, r8
 801887c:	e9cd 4700 	strd	r4, r7, [sp]
 8018880:	f7ff ffee 	bl	8018860 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018884:	b007      	add	sp, #28
 8018886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801888a:	f04f 33ff 	mov.w	r3, #4294967295
 801888e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018892:	603b      	str	r3, [r7, #0]
 8018894:	e7f6      	b.n	8018884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018896:	fa32 fa01 	lsrs.w	sl, r2, r1
 801889a:	d107      	bne.n	80188ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801889c:	fb09 f602 	mul.w	r6, r9, r2
 80188a0:	fbb6 f0f4 	udiv	r0, r6, r4
 80188a4:	fb04 6610 	mls	r6, r4, r0, r6
 80188a8:	603e      	str	r6, [r7, #0]
 80188aa:	e7eb      	b.n	8018884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80188ac:	2601      	movs	r6, #1
 80188ae:	fa09 fb01 	lsl.w	fp, r9, r1
 80188b2:	408e      	lsls	r6, r1
 80188b4:	fbbb f3f4 	udiv	r3, fp, r4
 80188b8:	3e01      	subs	r6, #1
 80188ba:	9302      	str	r3, [sp, #8]
 80188bc:	fb0a f303 	mul.w	r3, sl, r3
 80188c0:	4016      	ands	r6, r2
 80188c2:	9303      	str	r3, [sp, #12]
 80188c4:	4630      	mov	r0, r6
 80188c6:	f7ff ffad 	bl	8018824 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80188ca:	464a      	mov	r2, r9
 80188cc:	460b      	mov	r3, r1
 80188ce:	4601      	mov	r1, r0
 80188d0:	4630      	mov	r0, r6
 80188d2:	e9cd 4700 	strd	r4, r7, [sp]
 80188d6:	f7ff ffc3 	bl	8018860 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80188da:	9b02      	ldr	r3, [sp, #8]
 80188dc:	4606      	mov	r6, r0
 80188de:	eb05 0108 	add.w	r1, r5, r8
 80188e2:	fb04 bb13 	mls	fp, r4, r3, fp
 80188e6:	4658      	mov	r0, fp
 80188e8:	f7ff ff9c 	bl	8018824 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80188ec:	ab05      	add	r3, sp, #20
 80188ee:	465a      	mov	r2, fp
 80188f0:	e9cd 4300 	strd	r4, r3, [sp]
 80188f4:	4603      	mov	r3, r0
 80188f6:	4650      	mov	r0, sl
 80188f8:	f7ff ffb2 	bl	8018860 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80188fc:	6839      	ldr	r1, [r7, #0]
 80188fe:	9a05      	ldr	r2, [sp, #20]
 8018900:	9b03      	ldr	r3, [sp, #12]
 8018902:	4411      	add	r1, r2
 8018904:	fbb1 f2f4 	udiv	r2, r1, r4
 8018908:	18d3      	adds	r3, r2, r3
 801890a:	fb04 1412 	mls	r4, r4, r2, r1
 801890e:	441e      	add	r6, r3
 8018910:	603c      	str	r4, [r7, #0]
 8018912:	4430      	add	r0, r6
 8018914:	e7b6      	b.n	8018884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08018916 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018916:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801891a:	b085      	sub	sp, #20
 801891c:	f1b0 0900 	subs.w	r9, r0, #0
 8018920:	461d      	mov	r5, r3
 8018922:	4617      	mov	r7, r2
 8018924:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018926:	bfbb      	ittet	lt
 8018928:	f1c9 0900 	rsblt	r9, r9, #0
 801892c:	f04f 36ff 	movlt.w	r6, #4294967295
 8018930:	2601      	movge	r6, #1
 8018932:	6823      	ldrlt	r3, [r4, #0]
 8018934:	bfbc      	itt	lt
 8018936:	425b      	neglt	r3, r3
 8018938:	6023      	strlt	r3, [r4, #0]
 801893a:	2a00      	cmp	r2, #0
 801893c:	da04      	bge.n	8018948 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801893e:	6823      	ldr	r3, [r4, #0]
 8018940:	4257      	negs	r7, r2
 8018942:	4276      	negs	r6, r6
 8018944:	425b      	negs	r3, r3
 8018946:	6023      	str	r3, [r4, #0]
 8018948:	2d00      	cmp	r5, #0
 801894a:	4638      	mov	r0, r7
 801894c:	bfba      	itte	lt
 801894e:	426d      	neglt	r5, r5
 8018950:	f04f 38ff 	movlt.w	r8, #4294967295
 8018954:	f04f 0801 	movge.w	r8, #1
 8018958:	f7ff ff64 	bl	8018824 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801895c:	ab03      	add	r3, sp, #12
 801895e:	463a      	mov	r2, r7
 8018960:	e9cd 5300 	strd	r5, r3, [sp]
 8018964:	4603      	mov	r3, r0
 8018966:	4648      	mov	r0, r9
 8018968:	f7ff ff7a 	bl	8018860 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801896c:	6823      	ldr	r3, [r4, #0]
 801896e:	9a03      	ldr	r2, [sp, #12]
 8018970:	4546      	cmp	r6, r8
 8018972:	441a      	add	r2, r3
 8018974:	fb92 f3f5 	sdiv	r3, r2, r5
 8018978:	4418      	add	r0, r3
 801897a:	fb05 2313 	mls	r3, r5, r3, r2
 801897e:	bf18      	it	ne
 8018980:	4240      	negne	r0, r0
 8018982:	1c72      	adds	r2, r6, #1
 8018984:	6023      	str	r3, [r4, #0]
 8018986:	d105      	bne.n	8018994 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018988:	2b00      	cmp	r3, #0
 801898a:	f1c3 0200 	rsb	r2, r3, #0
 801898e:	db0b      	blt.n	80189a8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8018990:	6022      	str	r2, [r4, #0]
 8018992:	e006      	b.n	80189a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018994:	2e01      	cmp	r6, #1
 8018996:	d104      	bne.n	80189a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018998:	2b00      	cmp	r3, #0
 801899a:	da02      	bge.n	80189a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801899c:	442b      	add	r3, r5
 801899e:	3801      	subs	r0, #1
 80189a0:	6023      	str	r3, [r4, #0]
 80189a2:	b005      	add	sp, #20
 80189a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189a8:	3801      	subs	r0, #1
 80189aa:	1b52      	subs	r2, r2, r5
 80189ac:	e7f0      	b.n	8018990 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080189b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80189b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80189b4:	4c1c      	ldr	r4, [pc, #112]	; (8018a28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80189b6:	4605      	mov	r5, r0
 80189b8:	6807      	ldr	r7, [r0, #0]
 80189ba:	69a3      	ldr	r3, [r4, #24]
 80189bc:	b92b      	cbnz	r3, 80189ca <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80189be:	6840      	ldr	r0, [r0, #4]
 80189c0:	e9c5 7000 	strd	r7, r0, [r5]
 80189c4:	b004      	add	sp, #16
 80189c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189ca:	f04f 0802 	mov.w	r8, #2
 80189ce:	68a2      	ldr	r2, [r4, #8]
 80189d0:	ae04      	add	r6, sp, #16
 80189d2:	6820      	ldr	r0, [r4, #0]
 80189d4:	fb93 f1f8 	sdiv	r1, r3, r8
 80189d8:	440a      	add	r2, r1
 80189da:	69e1      	ldr	r1, [r4, #28]
 80189dc:	f846 2d04 	str.w	r2, [r6, #-4]!
 80189e0:	463a      	mov	r2, r7
 80189e2:	9600      	str	r6, [sp, #0]
 80189e4:	f7ff ff97 	bl	8018916 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80189e8:	69a3      	ldr	r3, [r4, #24]
 80189ea:	4607      	mov	r7, r0
 80189ec:	686a      	ldr	r2, [r5, #4]
 80189ee:	6a21      	ldr	r1, [r4, #32]
 80189f0:	9600      	str	r6, [sp, #0]
 80189f2:	6860      	ldr	r0, [r4, #4]
 80189f4:	f7ff ff8f 	bl	8018916 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80189f8:	69a3      	ldr	r3, [r4, #24]
 80189fa:	6962      	ldr	r2, [r4, #20]
 80189fc:	4407      	add	r7, r0
 80189fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018a00:	9600      	str	r6, [sp, #0]
 8018a02:	68e0      	ldr	r0, [r4, #12]
 8018a04:	fb93 f8f8 	sdiv	r8, r3, r8
 8018a08:	4442      	add	r2, r8
 8018a0a:	9203      	str	r2, [sp, #12]
 8018a0c:	682a      	ldr	r2, [r5, #0]
 8018a0e:	f7ff ff82 	bl	8018916 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018a12:	4680      	mov	r8, r0
 8018a14:	9600      	str	r6, [sp, #0]
 8018a16:	69a3      	ldr	r3, [r4, #24]
 8018a18:	686a      	ldr	r2, [r5, #4]
 8018a1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018a1c:	6920      	ldr	r0, [r4, #16]
 8018a1e:	f7ff ff7a 	bl	8018916 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018a22:	4440      	add	r0, r8
 8018a24:	e7cc      	b.n	80189c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018a26:	bf00      	nop
 8018a28:	20056724 	.word	0x20056724

08018a2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018a2c:	4b07      	ldr	r3, [pc, #28]	; (8018a4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018a2e:	b510      	push	{r4, lr}
 8018a30:	781b      	ldrb	r3, [r3, #0]
 8018a32:	2b01      	cmp	r3, #1
 8018a34:	d108      	bne.n	8018a48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018a36:	4b06      	ldr	r3, [pc, #24]	; (8018a50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018a38:	880c      	ldrh	r4, [r1, #0]
 8018a3a:	881b      	ldrh	r3, [r3, #0]
 8018a3c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018a40:	3b01      	subs	r3, #1
 8018a42:	1b1b      	subs	r3, r3, r4
 8018a44:	8003      	strh	r3, [r0, #0]
 8018a46:	800a      	strh	r2, [r1, #0]
 8018a48:	bd10      	pop	{r4, pc}
 8018a4a:	bf00      	nop
 8018a4c:	200566f0 	.word	0x200566f0
 8018a50:	200566f4 	.word	0x200566f4

08018a54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018a54:	4b0a      	ldr	r3, [pc, #40]	; (8018a80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018a56:	b510      	push	{r4, lr}
 8018a58:	781b      	ldrb	r3, [r3, #0]
 8018a5a:	2b01      	cmp	r3, #1
 8018a5c:	d10e      	bne.n	8018a7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018a5e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018a62:	8843      	ldrh	r3, [r0, #2]
 8018a64:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018a68:	18ca      	adds	r2, r1, r3
 8018a6a:	4b06      	ldr	r3, [pc, #24]	; (8018a84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018a6c:	8044      	strh	r4, [r0, #2]
 8018a6e:	881b      	ldrh	r3, [r3, #0]
 8018a70:	1a9b      	subs	r3, r3, r2
 8018a72:	8003      	strh	r3, [r0, #0]
 8018a74:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018a78:	8081      	strh	r1, [r0, #4]
 8018a7a:	80c3      	strh	r3, [r0, #6]
 8018a7c:	bd10      	pop	{r4, pc}
 8018a7e:	bf00      	nop
 8018a80:	200566f0 	.word	0x200566f0
 8018a84:	200566ec 	.word	0x200566ec

08018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018a88:	4b07      	ldr	r3, [pc, #28]	; (8018aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018a8a:	b510      	push	{r4, lr}
 8018a8c:	781b      	ldrb	r3, [r3, #0]
 8018a8e:	2b01      	cmp	r3, #1
 8018a90:	d108      	bne.n	8018aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018a92:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018a96:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018a9a:	8003      	strh	r3, [r0, #0]
 8018a9c:	8893      	ldrh	r3, [r2, #4]
 8018a9e:	3b01      	subs	r3, #1
 8018aa0:	1b1b      	subs	r3, r3, r4
 8018aa2:	800b      	strh	r3, [r1, #0]
 8018aa4:	bd10      	pop	{r4, pc}
 8018aa6:	bf00      	nop
 8018aa8:	200566f0 	.word	0x200566f0

08018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018aac:	4b08      	ldr	r3, [pc, #32]	; (8018ad0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018aae:	b513      	push	{r0, r1, r4, lr}
 8018ab0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ab4:	2400      	movs	r4, #0
 8018ab6:	4b07      	ldr	r3, [pc, #28]	; (8018ad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018ab8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018abc:	466a      	mov	r2, sp
 8018abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ac2:	9400      	str	r4, [sp, #0]
 8018ac4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018ac8:	f7ff ffde 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018acc:	b002      	add	sp, #8
 8018ace:	bd10      	pop	{r4, pc}
 8018ad0:	200566ec 	.word	0x200566ec
 8018ad4:	200566ee 	.word	0x200566ee

08018ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018ad8:	4b0a      	ldr	r3, [pc, #40]	; (8018b04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018ada:	460a      	mov	r2, r1
 8018adc:	b510      	push	{r4, lr}
 8018ade:	781b      	ldrb	r3, [r3, #0]
 8018ae0:	2b01      	cmp	r3, #1
 8018ae2:	d10d      	bne.n	8018b00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018ae4:	8881      	ldrh	r1, [r0, #4]
 8018ae6:	8803      	ldrh	r3, [r0, #0]
 8018ae8:	440b      	add	r3, r1
 8018aea:	4601      	mov	r1, r0
 8018aec:	3b01      	subs	r3, #1
 8018aee:	f821 3b02 	strh.w	r3, [r1], #2
 8018af2:	f7ff ffc9 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018af6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018afa:	88c2      	ldrh	r2, [r0, #6]
 8018afc:	80c3      	strh	r3, [r0, #6]
 8018afe:	8082      	strh	r2, [r0, #4]
 8018b00:	bd10      	pop	{r4, pc}
 8018b02:	bf00      	nop
 8018b04:	200566f0 	.word	0x200566f0

08018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018b08:	4b09      	ldr	r3, [pc, #36]	; (8018b30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018b0a:	b507      	push	{r0, r1, r2, lr}
 8018b0c:	2100      	movs	r1, #0
 8018b0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b12:	4b08      	ldr	r3, [pc, #32]	; (8018b34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018b14:	9100      	str	r1, [sp, #0]
 8018b16:	4669      	mov	r1, sp
 8018b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b1c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018b20:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b24:	f7ff ffd8 	bl	8018ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018b28:	b003      	add	sp, #12
 8018b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b2e:	bf00      	nop
 8018b30:	200566ec 	.word	0x200566ec
 8018b34:	200566ee 	.word	0x200566ee

08018b38 <_ZN8touchgfx11Application13requestRedrawEv>:
 8018b38:	4b06      	ldr	r3, [pc, #24]	; (8018b54 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8018b3a:	2100      	movs	r1, #0
 8018b3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b40:	4b05      	ldr	r3, [pc, #20]	; (8018b58 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018b42:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8018b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b4a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8018b4e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8018b52:	4770      	bx	lr
 8018b54:	200566ec 	.word	0x200566ec
 8018b58:	200566ee 	.word	0x200566ee

08018b5c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018b5c:	4b03      	ldr	r3, [pc, #12]	; (8018b6c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018b5e:	6818      	ldr	r0, [r3, #0]
 8018b60:	b110      	cbz	r0, 8018b68 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018b62:	6803      	ldr	r3, [r0, #0]
 8018b64:	699b      	ldr	r3, [r3, #24]
 8018b66:	4718      	bx	r3
 8018b68:	4770      	bx	lr
 8018b6a:	bf00      	nop
 8018b6c:	20056754 	.word	0x20056754

08018b70 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018b70:	4770      	bx	lr
	...

08018b74 <_ZN8touchgfx11Application4drawEv>:
 8018b74:	4b09      	ldr	r3, [pc, #36]	; (8018b9c <_ZN8touchgfx11Application4drawEv+0x28>)
 8018b76:	b507      	push	{r0, r1, r2, lr}
 8018b78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b7c:	2100      	movs	r1, #0
 8018b7e:	4b08      	ldr	r3, [pc, #32]	; (8018ba0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018b80:	9100      	str	r1, [sp, #0]
 8018b82:	4669      	mov	r1, sp
 8018b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b88:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018b8c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b90:	6803      	ldr	r3, [r0, #0]
 8018b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b94:	4798      	blx	r3
 8018b96:	b003      	add	sp, #12
 8018b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b9c:	200566ec 	.word	0x200566ec
 8018ba0:	200566ee 	.word	0x200566ee

08018ba4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018ba4:	4b03      	ldr	r3, [pc, #12]	; (8018bb4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018ba6:	6818      	ldr	r0, [r3, #0]
 8018ba8:	b110      	cbz	r0, 8018bb0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018baa:	6803      	ldr	r3, [r0, #0]
 8018bac:	69db      	ldr	r3, [r3, #28]
 8018bae:	4718      	bx	r3
 8018bb0:	4770      	bx	lr
 8018bb2:	bf00      	nop
 8018bb4:	20056754 	.word	0x20056754

08018bb8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018bb8:	4b03      	ldr	r3, [pc, #12]	; (8018bc8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018bba:	6818      	ldr	r0, [r3, #0]
 8018bbc:	b110      	cbz	r0, 8018bc4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018bbe:	6803      	ldr	r3, [r0, #0]
 8018bc0:	6a1b      	ldr	r3, [r3, #32]
 8018bc2:	4718      	bx	r3
 8018bc4:	4770      	bx	lr
 8018bc6:	bf00      	nop
 8018bc8:	20056754 	.word	0x20056754

08018bcc <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018bcc:	4b03      	ldr	r3, [pc, #12]	; (8018bdc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018bce:	6818      	ldr	r0, [r3, #0]
 8018bd0:	b110      	cbz	r0, 8018bd8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018bd2:	6803      	ldr	r3, [r0, #0]
 8018bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bd6:	4718      	bx	r3
 8018bd8:	4770      	bx	lr
 8018bda:	bf00      	nop
 8018bdc:	20056754 	.word	0x20056754

08018be0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018be0:	b570      	push	{r4, r5, r6, lr}
 8018be2:	4d34      	ldr	r5, [pc, #208]	; (8018cb4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8018be4:	4604      	mov	r4, r0
 8018be6:	6828      	ldr	r0, [r5, #0]
 8018be8:	b140      	cbz	r0, 8018bfc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018bea:	7a03      	ldrb	r3, [r0, #8]
 8018bec:	b933      	cbnz	r3, 8018bfc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018bee:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018bf2:	6803      	ldr	r3, [r0, #0]
 8018bf4:	689b      	ldr	r3, [r3, #8]
 8018bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bfa:	4718      	bx	r3
 8018bfc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8018c00:	b97b      	cbnz	r3, 8018c22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018c02:	b170      	cbz	r0, 8018c22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018c04:	7a03      	ldrb	r3, [r0, #8]
 8018c06:	b163      	cbz	r3, 8018c22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018c08:	4b2b      	ldr	r3, [pc, #172]	; (8018cb8 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8018c0a:	6818      	ldr	r0, [r3, #0]
 8018c0c:	b110      	cbz	r0, 8018c14 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018c0e:	6803      	ldr	r3, [r0, #0]
 8018c10:	691b      	ldr	r3, [r3, #16]
 8018c12:	4798      	blx	r3
 8018c14:	6828      	ldr	r0, [r5, #0]
 8018c16:	6803      	ldr	r3, [r0, #0]
 8018c18:	68db      	ldr	r3, [r3, #12]
 8018c1a:	4798      	blx	r3
 8018c1c:	2301      	movs	r3, #1
 8018c1e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018c22:	2500      	movs	r5, #0
 8018c24:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018c28:	42a8      	cmp	r0, r5
 8018c2a:	dd0c      	ble.n	8018c46 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8018c2c:	1963      	adds	r3, r4, r5
 8018c2e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018c32:	b132      	cbz	r2, 8018c42 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8018c34:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018c38:	4413      	add	r3, r2
 8018c3a:	6858      	ldr	r0, [r3, #4]
 8018c3c:	6803      	ldr	r3, [r0, #0]
 8018c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018c40:	4798      	blx	r3
 8018c42:	3501      	adds	r5, #1
 8018c44:	e7ee      	b.n	8018c24 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018c46:	2300      	movs	r3, #0
 8018c48:	461a      	mov	r2, r3
 8018c4a:	4298      	cmp	r0, r3
 8018c4c:	d114      	bne.n	8018c78 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8018c4e:	1d25      	adds	r5, r4, #4
 8018c50:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8018c54:	1e48      	subs	r0, r1, #1
 8018c56:	b280      	uxth	r0, r0
 8018c58:	4291      	cmp	r1, r2
 8018c5a:	dd24      	ble.n	8018ca6 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8018c5c:	4288      	cmp	r0, r1
 8018c5e:	d2fb      	bcs.n	8018c58 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8018c60:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8018c64:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8018c68:	3304      	adds	r3, #4
 8018c6a:	428b      	cmp	r3, r1
 8018c6c:	d018      	beq.n	8018ca0 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8018c6e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8018c72:	f843 6c04 	str.w	r6, [r3, #-4]
 8018c76:	e7f8      	b.n	8018c6a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8018c78:	18e1      	adds	r1, r4, r3
 8018c7a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8018c7e:	b16d      	cbz	r5, 8018c9c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8018c80:	429a      	cmp	r2, r3
 8018c82:	d00a      	beq.n	8018c9a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8018c84:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8018c88:	4431      	add	r1, r6
 8018c8a:	684e      	ldr	r6, [r1, #4]
 8018c8c:	b291      	uxth	r1, r2
 8018c8e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8018c92:	604e      	str	r6, [r1, #4]
 8018c94:	18a1      	adds	r1, r4, r2
 8018c96:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8018c9a:	3201      	adds	r2, #1
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	e7d4      	b.n	8018c4a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8018ca0:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8018ca4:	e7d4      	b.n	8018c50 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8018ca6:	4b04      	ldr	r3, [pc, #16]	; (8018cb8 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8018ca8:	6818      	ldr	r0, [r3, #0]
 8018caa:	b110      	cbz	r0, 8018cb2 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8018cac:	6803      	ldr	r3, [r0, #0]
 8018cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb0:	e7a1      	b.n	8018bf6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018cb2:	bd70      	pop	{r4, r5, r6, pc}
 8018cb4:	20056758 	.word	0x20056758
 8018cb8:	20056754 	.word	0x20056754

08018cbc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018cbc:	b570      	push	{r4, r5, r6, lr}
 8018cbe:	4606      	mov	r6, r0
 8018cc0:	460c      	mov	r4, r1
 8018cc2:	b929      	cbnz	r1, 8018cd0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018cc4:	4b0c      	ldr	r3, [pc, #48]	; (8018cf8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018cc6:	2167      	movs	r1, #103	; 0x67
 8018cc8:	4a0c      	ldr	r2, [pc, #48]	; (8018cfc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018cca:	480d      	ldr	r0, [pc, #52]	; (8018d00 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018ccc:	f00d f988 	bl	8025fe0 <__assert_func>
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	4d0c      	ldr	r5, [pc, #48]	; (8018d04 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018cd4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018cd8:	6828      	ldr	r0, [r5, #0]
 8018cda:	b110      	cbz	r0, 8018ce2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018cdc:	6803      	ldr	r3, [r0, #0]
 8018cde:	695b      	ldr	r3, [r3, #20]
 8018ce0:	4798      	blx	r3
 8018ce2:	602c      	str	r4, [r5, #0]
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	6823      	ldr	r3, [r4, #0]
 8018ce8:	68db      	ldr	r3, [r3, #12]
 8018cea:	4798      	blx	r3
 8018cec:	6833      	ldr	r3, [r6, #0]
 8018cee:	4630      	mov	r0, r6
 8018cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018cf6:	4718      	bx	r3
 8018cf8:	0802d268 	.word	0x0802d268
 8018cfc:	0802d338 	.word	0x0802d338
 8018d00:	0802d272 	.word	0x0802d272
 8018d04:	20056754 	.word	0x20056754

08018d08 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018d08:	b570      	push	{r4, r5, r6, lr}
 8018d0a:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018d0e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018d12:	42ac      	cmp	r4, r5
 8018d14:	db18      	blt.n	8018d48 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018d16:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018d1a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	db12      	blt.n	8018d48 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018d22:	8886      	ldrh	r6, [r0, #4]
 8018d24:	4435      	add	r5, r6
 8018d26:	888e      	ldrh	r6, [r1, #4]
 8018d28:	4434      	add	r4, r6
 8018d2a:	b22d      	sxth	r5, r5
 8018d2c:	b224      	sxth	r4, r4
 8018d2e:	42a5      	cmp	r5, r4
 8018d30:	db0a      	blt.n	8018d48 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018d32:	88c0      	ldrh	r0, [r0, #6]
 8018d34:	4418      	add	r0, r3
 8018d36:	88cb      	ldrh	r3, [r1, #6]
 8018d38:	441a      	add	r2, r3
 8018d3a:	b200      	sxth	r0, r0
 8018d3c:	b212      	sxth	r2, r2
 8018d3e:	4290      	cmp	r0, r2
 8018d40:	bfb4      	ite	lt
 8018d42:	2000      	movlt	r0, #0
 8018d44:	2001      	movge	r0, #1
 8018d46:	bd70      	pop	{r4, r5, r6, pc}
 8018d48:	2000      	movs	r0, #0
 8018d4a:	e7fc      	b.n	8018d46 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018d4c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8018d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d4e:	4604      	mov	r4, r0
 8018d50:	4608      	mov	r0, r1
 8018d52:	460d      	mov	r5, r1
 8018d54:	f7fc fa25 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d58:	b978      	cbnz	r0, 8018d7a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8018d5a:	4620      	mov	r0, r4
 8018d5c:	f7fc fa21 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d60:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018d64:	b150      	cbz	r0, 8018d7c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018d66:	8026      	strh	r6, [r4, #0]
 8018d68:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018d6c:	8063      	strh	r3, [r4, #2]
 8018d6e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018d72:	80a3      	strh	r3, [r4, #4]
 8018d74:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018d78:	80e3      	strh	r3, [r4, #6]
 8018d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d7c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018d80:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018d84:	42b1      	cmp	r1, r6
 8018d86:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8018d8a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8018d8e:	460f      	mov	r7, r1
 8018d90:	88ed      	ldrh	r5, [r5, #6]
 8018d92:	bfa8      	it	ge
 8018d94:	4637      	movge	r7, r6
 8018d96:	4293      	cmp	r3, r2
 8018d98:	4618      	mov	r0, r3
 8018d9a:	4466      	add	r6, ip
 8018d9c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018da0:	bfa8      	it	ge
 8018da2:	4610      	movge	r0, r2
 8018da4:	442a      	add	r2, r5
 8018da6:	88e5      	ldrh	r5, [r4, #6]
 8018da8:	4461      	add	r1, ip
 8018daa:	b236      	sxth	r6, r6
 8018dac:	8027      	strh	r7, [r4, #0]
 8018dae:	442b      	add	r3, r5
 8018db0:	b209      	sxth	r1, r1
 8018db2:	b212      	sxth	r2, r2
 8018db4:	8060      	strh	r0, [r4, #2]
 8018db6:	b21b      	sxth	r3, r3
 8018db8:	428e      	cmp	r6, r1
 8018dba:	bfac      	ite	ge
 8018dbc:	ebc7 0106 	rsbge	r1, r7, r6
 8018dc0:	ebc7 0101 	rsblt	r1, r7, r1
 8018dc4:	429a      	cmp	r2, r3
 8018dc6:	bfac      	ite	ge
 8018dc8:	ebc0 0202 	rsbge	r2, r0, r2
 8018dcc:	ebc0 0203 	rsblt	r2, r0, r3
 8018dd0:	80a1      	strh	r1, [r4, #4]
 8018dd2:	80e2      	strh	r2, [r4, #6]
 8018dd4:	e7d1      	b.n	8018d7a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018dd8 <_ZN8touchgfx11Application11getInstanceEv>:
 8018dd8:	4b01      	ldr	r3, [pc, #4]	; (8018de0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018dda:	6818      	ldr	r0, [r3, #0]
 8018ddc:	4770      	bx	lr
 8018dde:	bf00      	nop
 8018de0:	20056764 	.word	0x20056764

08018de4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018de4:	2300      	movs	r3, #0
 8018de6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018dea:	30a8      	adds	r0, #168	; 0xa8
 8018dec:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018df0:	f802 3b01 	strb.w	r3, [r2], #1
 8018df4:	4282      	cmp	r2, r0
 8018df6:	d1fb      	bne.n	8018df0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018df8:	4770      	bx	lr

08018dfa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018e00:	2200      	movs	r2, #0
 8018e02:	801a      	strh	r2, [r3, #0]
 8018e04:	3308      	adds	r3, #8
 8018e06:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018e0a:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018e0e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018e12:	428b      	cmp	r3, r1
 8018e14:	d1f5      	bne.n	8018e02 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018e16:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018e1a:	4770      	bx	lr

08018e1c <_ZN8touchgfx11ApplicationC1Ev>:
 8018e1c:	b570      	push	{r4, r5, r6, lr}
 8018e1e:	4b1a      	ldr	r3, [pc, #104]	; (8018e88 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018e20:	2500      	movs	r5, #0
 8018e22:	4604      	mov	r4, r0
 8018e24:	30a8      	adds	r0, #168	; 0xa8
 8018e26:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018e2a:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018e2e:	f7ff ffe4 	bl	8018dfa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018e32:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018e36:	f7ff ffe0 	bl	8018dfa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018e3a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8018e3e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8018e42:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018e46:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018e4a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8018e4e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8018e52:	490e      	ldr	r1, [pc, #56]	; (8018e8c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018e54:	480e      	ldr	r0, [pc, #56]	; (8018e90 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018e56:	f00b fa69 	bl	802432c <CRC_Lock>
 8018e5a:	4e0e      	ldr	r6, [pc, #56]	; (8018e94 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018e5c:	4b0e      	ldr	r3, [pc, #56]	; (8018e98 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018e5e:	b158      	cbz	r0, 8018e78 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8018e60:	801d      	strh	r5, [r3, #0]
 8018e62:	2300      	movs	r3, #0
 8018e64:	4a0d      	ldr	r2, [pc, #52]	; (8018e9c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018e66:	4620      	mov	r0, r4
 8018e68:	6013      	str	r3, [r2, #0]
 8018e6a:	4a0d      	ldr	r2, [pc, #52]	; (8018ea0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018e6c:	6033      	str	r3, [r6, #0]
 8018e6e:	6013      	str	r3, [r2, #0]
 8018e70:	f7ff ffb8 	bl	8018de4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018e74:	4620      	mov	r0, r4
 8018e76:	bd70      	pop	{r4, r5, r6, pc}
 8018e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018e7c:	2002      	movs	r0, #2
 8018e7e:	801a      	strh	r2, [r3, #0]
 8018e80:	6030      	str	r0, [r6, #0]
 8018e82:	f001 fb41 	bl	801a508 <_ZN8touchgfx6Screen4drawEv>
 8018e86:	e7ec      	b.n	8018e62 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8018e88:	0802d2fc 	.word	0x0802d2fc
 8018e8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018e90:	f407a5c2 	.word	0xf407a5c2
 8018e94:	20056754 	.word	0x20056754
 8018e98:	20000024 	.word	0x20000024
 8018e9c:	20056764 	.word	0x20056764
 8018ea0:	20056758 	.word	0x20056758

08018ea4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018ea4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018ea8:	428b      	cmp	r3, r1
 8018eaa:	b510      	push	{r4, lr}
 8018eac:	d90e      	bls.n	8018ecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8018eae:	3b01      	subs	r3, #1
 8018eb0:	b29b      	uxth	r3, r3
 8018eb2:	428b      	cmp	r3, r1
 8018eb4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018eb8:	d908      	bls.n	8018ecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8018eba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018ebe:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018ec2:	681a      	ldr	r2, [r3, #0]
 8018ec4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018ec8:	685a      	ldr	r2, [r3, #4]
 8018eca:	6062      	str	r2, [r4, #4]
 8018ecc:	bd10      	pop	{r4, pc}
	...

08018ed0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ed2:	466b      	mov	r3, sp
 8018ed4:	4604      	mov	r4, r0
 8018ed6:	e883 0006 	stmia.w	r3, {r1, r2}
 8018eda:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018ede:	2a07      	cmp	r2, #7
 8018ee0:	d906      	bls.n	8018ef0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018ee2:	4b09      	ldr	r3, [pc, #36]	; (8018f08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018ee4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8018ee8:	4a08      	ldr	r2, [pc, #32]	; (8018f0c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018eea:	4809      	ldr	r0, [pc, #36]	; (8018f10 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018eec:	f00d f878 	bl	8025fe0 <__assert_func>
 8018ef0:	1c51      	adds	r1, r2, #1
 8018ef2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018ef6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018efa:	cb03      	ldmia	r3!, {r0, r1}
 8018efc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018f00:	6069      	str	r1, [r5, #4]
 8018f02:	b003      	add	sp, #12
 8018f04:	bd30      	pop	{r4, r5, pc}
 8018f06:	bf00      	nop
 8018f08:	0802d29c 	.word	0x0802d29c
 8018f0c:	0802d37c 	.word	0x0802d37c
 8018f10:	0802d2cb 	.word	0x0802d2cb

08018f14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f18:	b08d      	sub	sp, #52	; 0x34
 8018f1a:	4683      	mov	fp, r0
 8018f1c:	ac08      	add	r4, sp, #32
 8018f1e:	4620      	mov	r0, r4
 8018f20:	e884 0006 	stmia.w	r4, {r1, r2}
 8018f24:	f7fc f93d 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f28:	2800      	cmp	r0, #0
 8018f2a:	d16a      	bne.n	8019002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018f2c:	9402      	str	r4, [sp, #8]
 8018f2e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8018f32:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8018f36:	2400      	movs	r4, #0
 8018f38:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8018f3c:	9301      	str	r3, [sp, #4]
 8018f3e:	36a0      	adds	r6, #160	; 0xa0
 8018f40:	42a5      	cmp	r5, r4
 8018f42:	d00d      	beq.n	8018f60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8018f44:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8018f48:	9802      	ldr	r0, [sp, #8]
 8018f4a:	f7ff fedd 	bl	8018d08 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018f4e:	b128      	cbz	r0, 8018f5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8018f50:	1e69      	subs	r1, r5, #1
 8018f52:	9801      	ldr	r0, [sp, #4]
 8018f54:	1b09      	subs	r1, r1, r4
 8018f56:	b289      	uxth	r1, r1
 8018f58:	f7ff ffa4 	bl	8018ea4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018f5c:	3401      	adds	r4, #1
 8018f5e:	e7ef      	b.n	8018f40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018f60:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8018f64:	1e7b      	subs	r3, r7, #1
 8018f66:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8018f6a:	9703      	str	r7, [sp, #12]
 8018f6c:	9300      	str	r3, [sp, #0]
 8018f6e:	2400      	movs	r4, #0
 8018f70:	4655      	mov	r5, sl
 8018f72:	9704      	str	r7, [sp, #16]
 8018f74:	4626      	mov	r6, r4
 8018f76:	9b04      	ldr	r3, [sp, #16]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d078      	beq.n	801906e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8018f7c:	9902      	ldr	r1, [sp, #8]
 8018f7e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018f82:	f7fd fad7 	bl	8016534 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018f86:	b360      	cbz	r0, 8018fe2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018f88:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8018f8c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8018f90:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8018f94:	45e6      	cmp	lr, ip
 8018f96:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8018f9a:	db35      	blt.n	8019008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018f9c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018fa0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018fa4:	4472      	add	r2, lr
 8018fa6:	4463      	add	r3, ip
 8018fa8:	b212      	sxth	r2, r2
 8018faa:	b21b      	sxth	r3, r3
 8018fac:	429a      	cmp	r2, r3
 8018fae:	dc2b      	bgt.n	8019008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018fb0:	fa1f f288 	uxth.w	r2, r8
 8018fb4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018fb8:	45c1      	cmp	r9, r8
 8018fba:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018fbe:	4413      	add	r3, r2
 8018fc0:	fa1f fc89 	uxth.w	ip, r9
 8018fc4:	b29b      	uxth	r3, r3
 8018fc6:	fa0f fe83 	sxth.w	lr, r3
 8018fca:	db0f      	blt.n	8018fec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8018fcc:	eba3 030c 	sub.w	r3, r3, ip
 8018fd0:	1ac9      	subs	r1, r1, r3
 8018fd2:	b209      	sxth	r1, r1
 8018fd4:	2900      	cmp	r1, #0
 8018fd6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8018fda:	dd12      	ble.n	8019002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018fdc:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8018fe0:	4604      	mov	r4, r0
 8018fe2:	9b04      	ldr	r3, [sp, #16]
 8018fe4:	3d08      	subs	r5, #8
 8018fe6:	3b01      	subs	r3, #1
 8018fe8:	9304      	str	r3, [sp, #16]
 8018fea:	e7c4      	b.n	8018f76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8018fec:	4461      	add	r1, ip
 8018fee:	b209      	sxth	r1, r1
 8018ff0:	4571      	cmp	r1, lr
 8018ff2:	dc3a      	bgt.n	801906a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018ff4:	eba2 020c 	sub.w	r2, r2, ip
 8018ff8:	b212      	sxth	r2, r2
 8018ffa:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018ffe:	2a00      	cmp	r2, #0
 8019000:	dcee      	bgt.n	8018fe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8019002:	b00d      	add	sp, #52	; 0x34
 8019004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019008:	45c1      	cmp	r9, r8
 801900a:	db2e      	blt.n	801906a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801900c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8019010:	4499      	add	r9, r3
 8019012:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8019016:	4498      	add	r8, r3
 8019018:	fa0f f989 	sxth.w	r9, r9
 801901c:	fa0f f888 	sxth.w	r8, r8
 8019020:	45c1      	cmp	r9, r8
 8019022:	dc22      	bgt.n	801906a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8019024:	fa1f f28c 	uxth.w	r2, ip
 8019028:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801902c:	45e6      	cmp	lr, ip
 801902e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019032:	4413      	add	r3, r2
 8019034:	fa1f f88e 	uxth.w	r8, lr
 8019038:	b29b      	uxth	r3, r3
 801903a:	fa0f f983 	sxth.w	r9, r3
 801903e:	db0a      	blt.n	8019056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8019040:	eba3 0308 	sub.w	r3, r3, r8
 8019044:	1ac9      	subs	r1, r1, r3
 8019046:	b209      	sxth	r1, r1
 8019048:	2900      	cmp	r1, #0
 801904a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801904e:	ddd8      	ble.n	8019002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019050:	f8ad 9020 	strh.w	r9, [sp, #32]
 8019054:	e7c4      	b.n	8018fe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8019056:	4441      	add	r1, r8
 8019058:	b209      	sxth	r1, r1
 801905a:	4549      	cmp	r1, r9
 801905c:	dc05      	bgt.n	801906a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801905e:	eba2 0208 	sub.w	r2, r2, r8
 8019062:	b212      	sxth	r2, r2
 8019064:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8019068:	e7c9      	b.n	8018ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801906a:	4606      	mov	r6, r0
 801906c:	e7b9      	b.n	8018fe2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801906e:	2c00      	cmp	r4, #0
 8019070:	f47f af7d 	bne.w	8018f6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8019074:	2e00      	cmp	r6, #0
 8019076:	f000 81dc 	beq.w	8019432 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801907a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801907e:	4655      	mov	r5, sl
 8019080:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8019084:	b2b9      	uxth	r1, r7
 8019086:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801908a:	b2b3      	uxth	r3, r6
 801908c:	9104      	str	r1, [sp, #16]
 801908e:	9804      	ldr	r0, [sp, #16]
 8019090:	441a      	add	r2, r3
 8019092:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8019096:	b292      	uxth	r2, r2
 8019098:	4401      	add	r1, r0
 801909a:	fa0f f882 	sxth.w	r8, r2
 801909e:	b289      	uxth	r1, r1
 80190a0:	9105      	str	r1, [sp, #20]
 80190a2:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 80190a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80190aa:	9b03      	ldr	r3, [sp, #12]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d054      	beq.n	801915a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80190b0:	9902      	ldr	r1, [sp, #8]
 80190b2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80190b6:	f7fd fa3d 	bl	8016534 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80190ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80190be:	b1d8      	cbz	r0, 80190f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80190c0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80190c4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80190c8:	4576      	cmp	r6, lr
 80190ca:	dc26      	bgt.n	801911a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80190cc:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80190d0:	44f4      	add	ip, lr
 80190d2:	fa0f fc8c 	sxth.w	ip, ip
 80190d6:	45e0      	cmp	r8, ip
 80190d8:	db1f      	blt.n	801911a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80190da:	428f      	cmp	r7, r1
 80190dc:	fa1f fc81 	uxth.w	ip, r1
 80190e0:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80190e4:	dc0f      	bgt.n	8019106 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80190e6:	9805      	ldr	r0, [sp, #20]
 80190e8:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80190ec:	eba0 0c0c 	sub.w	ip, r0, ip
 80190f0:	eba1 010c 	sub.w	r1, r1, ip
 80190f4:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80190f8:	4620      	mov	r0, r4
 80190fa:	9903      	ldr	r1, [sp, #12]
 80190fc:	3d08      	subs	r5, #8
 80190fe:	4604      	mov	r4, r0
 8019100:	3901      	subs	r1, #1
 8019102:	9103      	str	r1, [sp, #12]
 8019104:	e7cf      	b.n	80190a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8019106:	4461      	add	r1, ip
 8019108:	b209      	sxth	r1, r1
 801910a:	4549      	cmp	r1, r9
 801910c:	dcf5      	bgt.n	80190fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801910e:	9904      	ldr	r1, [sp, #16]
 8019110:	eba1 0c0c 	sub.w	ip, r1, ip
 8019114:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8019118:	e7ee      	b.n	80190f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801911a:	428f      	cmp	r7, r1
 801911c:	dced      	bgt.n	80190fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801911e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8019122:	4461      	add	r1, ip
 8019124:	b209      	sxth	r1, r1
 8019126:	4589      	cmp	r9, r1
 8019128:	dbe7      	blt.n	80190fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801912a:	4576      	cmp	r6, lr
 801912c:	fa1f fc8e 	uxth.w	ip, lr
 8019130:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8019134:	dc08      	bgt.n	8019148 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8019136:	eba2 0c0c 	sub.w	ip, r2, ip
 801913a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801913e:	eba1 010c 	sub.w	r1, r1, ip
 8019142:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8019146:	e7d7      	b.n	80190f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019148:	4461      	add	r1, ip
 801914a:	b209      	sxth	r1, r1
 801914c:	4588      	cmp	r8, r1
 801914e:	dbd4      	blt.n	80190fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019150:	eba3 0c0c 	sub.w	ip, r3, ip
 8019154:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8019158:	e7ce      	b.n	80190f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801915a:	2c00      	cmp	r4, #0
 801915c:	f000 8169 	beq.w	8019432 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019160:	9b00      	ldr	r3, [sp, #0]
 8019162:	3301      	adds	r3, #1
 8019164:	f000 8165 	beq.w	8019432 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019168:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801916c:	9802      	ldr	r0, [sp, #8]
 801916e:	4621      	mov	r1, r4
 8019170:	f7ff fdca 	bl	8018d08 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019174:	b120      	cbz	r0, 8019180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8019176:	f8bd 1000 	ldrh.w	r1, [sp]
 801917a:	9801      	ldr	r0, [sp, #4]
 801917c:	f7ff fe92 	bl	8018ea4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019180:	9902      	ldr	r1, [sp, #8]
 8019182:	4620      	mov	r0, r4
 8019184:	f7fd f9d6 	bl	8016534 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019188:	2800      	cmp	r0, #0
 801918a:	f000 809b 	beq.w	80192c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801918e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8019192:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8019196:	fa1f f288 	uxth.w	r2, r8
 801919a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801919e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 80191a2:	19d5      	adds	r5, r2, r7
 80191a4:	b2a1      	uxth	r1, r4
 80191a6:	45a0      	cmp	r8, r4
 80191a8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80191ac:	fa1f f985 	uxth.w	r9, r5
 80191b0:	440b      	add	r3, r1
 80191b2:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 80191b6:	fa0f f589 	sxth.w	r5, r9
 80191ba:	b29b      	uxth	r3, r3
 80191bc:	9503      	str	r5, [sp, #12]
 80191be:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80191c2:	9507      	str	r5, [sp, #28]
 80191c4:	f340 809d 	ble.w	8019302 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80191c8:	1a52      	subs	r2, r2, r1
 80191ca:	4584      	cmp	ip, r0
 80191cc:	fa0f fe83 	sxth.w	lr, r3
 80191d0:	b292      	uxth	r2, r2
 80191d2:	b215      	sxth	r5, r2
 80191d4:	dd2f      	ble.n	8019236 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80191d6:	9e00      	ldr	r6, [sp, #0]
 80191d8:	fa1f fc8c 	uxth.w	ip, ip
 80191dc:	b280      	uxth	r0, r0
 80191de:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80191e2:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 80191e6:	9e03      	ldr	r6, [sp, #12]
 80191e8:	ebac 0300 	sub.w	r3, ip, r0
 80191ec:	448c      	add	ip, r1
 80191ee:	eba6 060e 	sub.w	r6, r6, lr
 80191f2:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80191f6:	b29b      	uxth	r3, r3
 80191f8:	4470      	add	r0, lr
 80191fa:	fa0f fc8c 	sxth.w	ip, ip
 80191fe:	b21c      	sxth	r4, r3
 8019200:	b200      	sxth	r0, r0
 8019202:	4366      	muls	r6, r4
 8019204:	ebac 0000 	sub.w	r0, ip, r0
 8019208:	4368      	muls	r0, r5
 801920a:	4286      	cmp	r6, r0
 801920c:	db09      	blt.n	8019222 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801920e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8019212:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8019216:	4417      	add	r7, r2
 8019218:	f8ad 3020 	strh.w	r3, [sp, #32]
 801921c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019220:	e685      	b.n	8018f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019222:	440b      	add	r3, r1
 8019224:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8019228:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801922c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8019230:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019234:	e67b      	b.n	8018f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019236:	9e03      	ldr	r6, [sp, #12]
 8019238:	45b6      	cmp	lr, r6
 801923a:	da28      	bge.n	801928e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801923c:	9b00      	ldr	r3, [sp, #0]
 801923e:	eba6 060e 	sub.w	r6, r6, lr
 8019242:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8019246:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801924a:	eb04 030c 	add.w	r3, r4, ip
 801924e:	fa1f f883 	uxth.w	r8, r3
 8019252:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8019256:	4403      	add	r3, r0
 8019258:	fa0f f988 	sxth.w	r9, r8
 801925c:	eba0 000c 	sub.w	r0, r0, ip
 8019260:	eba3 0308 	sub.w	r3, r3, r8
 8019264:	4368      	muls	r0, r5
 8019266:	b29b      	uxth	r3, r3
 8019268:	fa0f f883 	sxth.w	r8, r3
 801926c:	fb08 f606 	mul.w	r6, r8, r6
 8019270:	42b0      	cmp	r0, r6
 8019272:	dc06      	bgt.n	8019282 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8019274:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8019278:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801927c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8019280:	e7c9      	b.n	8019216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8019282:	4423      	add	r3, r4
 8019284:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8019288:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801928c:	e64f      	b.n	8018f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801928e:	eba3 0309 	sub.w	r3, r3, r9
 8019292:	9807      	ldr	r0, [sp, #28]
 8019294:	b29b      	uxth	r3, r3
 8019296:	2806      	cmp	r0, #6
 8019298:	fa0f fc83 	sxth.w	ip, r3
 801929c:	d818      	bhi.n	80192d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801929e:	4652      	mov	r2, sl
 80192a0:	ab0a      	add	r3, sp, #40	; 0x28
 80192a2:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 80192a6:	6851      	ldr	r1, [r2, #4]
 80192a8:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 80192ac:	c303      	stmia	r3!, {r0, r1}
 80192ae:	9b03      	ldr	r3, [sp, #12]
 80192b0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 80192b4:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80192b8:	ab0a      	add	r3, sp, #40	; 0x28
 80192ba:	9801      	ldr	r0, [sp, #4]
 80192bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80192c0:	f7ff fe06 	bl	8018ed0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80192c4:	9b00      	ldr	r3, [sp, #0]
 80192c6:	f1aa 0a08 	sub.w	sl, sl, #8
 80192ca:	3b01      	subs	r3, #1
 80192cc:	9300      	str	r3, [sp, #0]
 80192ce:	e747      	b.n	8019160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80192d0:	9800      	ldr	r0, [sp, #0]
 80192d2:	45ac      	cmp	ip, r5
 80192d4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80192d8:	db0c      	blt.n	80192f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 80192da:	4417      	add	r7, r2
 80192dc:	4458      	add	r0, fp
 80192de:	f8ad 4020 	strh.w	r4, [sp, #32]
 80192e2:	b2bf      	uxth	r7, r7
 80192e4:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 80192e8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80192ec:	440f      	add	r7, r1
 80192ee:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80192f2:	e61c      	b.n	8018f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80192f4:	4458      	add	r0, fp
 80192f6:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 80192fa:	443b      	add	r3, r7
 80192fc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019300:	e615      	b.n	8018f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019302:	fa1f f18c 	uxth.w	r1, ip
 8019306:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801930a:	b282      	uxth	r2, r0
 801930c:	4584      	cmp	ip, r0
 801930e:	eb01 0e05 	add.w	lr, r1, r5
 8019312:	9204      	str	r2, [sp, #16]
 8019314:	fa1f fe8e 	uxth.w	lr, lr
 8019318:	9e04      	ldr	r6, [sp, #16]
 801931a:	fa0f f28e 	sxth.w	r2, lr
 801931e:	9205      	str	r2, [sp, #20]
 8019320:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8019324:	4432      	add	r2, r6
 8019326:	b292      	uxth	r2, r2
 8019328:	9206      	str	r2, [sp, #24]
 801932a:	da26      	bge.n	801937a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801932c:	eba3 0309 	sub.w	r3, r3, r9
 8019330:	eba2 020e 	sub.w	r2, r2, lr
 8019334:	eba0 000c 	sub.w	r0, r0, ip
 8019338:	eba4 0408 	sub.w	r4, r4, r8
 801933c:	b29b      	uxth	r3, r3
 801933e:	b292      	uxth	r2, r2
 8019340:	fa0f fa83 	sxth.w	sl, r3
 8019344:	b211      	sxth	r1, r2
 8019346:	fb0a f000 	mul.w	r0, sl, r0
 801934a:	434c      	muls	r4, r1
 801934c:	42a0      	cmp	r0, r4
 801934e:	9800      	ldr	r0, [sp, #0]
 8019350:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019354:	dc06      	bgt.n	8019364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8019356:	4458      	add	r0, fp
 8019358:	9a05      	ldr	r2, [sp, #20]
 801935a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801935e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8019362:	e7ca      	b.n	80192fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019364:	eb0b 0300 	add.w	r3, fp, r0
 8019368:	9903      	ldr	r1, [sp, #12]
 801936a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801936e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8019372:	442a      	add	r2, r5
 8019374:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019378:	e5d9      	b.n	8018f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801937a:	9e04      	ldr	r6, [sp, #16]
 801937c:	9a03      	ldr	r2, [sp, #12]
 801937e:	1b89      	subs	r1, r1, r6
 8019380:	b21e      	sxth	r6, r3
 8019382:	b289      	uxth	r1, r1
 8019384:	4296      	cmp	r6, r2
 8019386:	fa0f fc81 	sxth.w	ip, r1
 801938a:	dd25      	ble.n	80193d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801938c:	eba3 0309 	sub.w	r3, r3, r9
 8019390:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8019394:	9e05      	ldr	r6, [sp, #20]
 8019396:	eba4 0408 	sub.w	r4, r4, r8
 801939a:	b29b      	uxth	r3, r3
 801939c:	eba6 0902 	sub.w	r9, r6, r2
 80193a0:	fb0c f404 	mul.w	r4, ip, r4
 80193a4:	b218      	sxth	r0, r3
 80193a6:	9a00      	ldr	r2, [sp, #0]
 80193a8:	fb00 f909 	mul.w	r9, r0, r9
 80193ac:	00d2      	lsls	r2, r2, #3
 80193ae:	454c      	cmp	r4, r9
 80193b0:	db03      	blt.n	80193ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 80193b2:	445a      	add	r2, fp
 80193b4:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 80193b8:	e79f      	b.n	80192fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80193ba:	eb0b 0302 	add.w	r3, fp, r2
 80193be:	9a03      	ldr	r2, [sp, #12]
 80193c0:	4429      	add	r1, r5
 80193c2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80193c6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80193ca:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80193ce:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80193d2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80193d6:	e5aa      	b.n	8018f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80193d8:	9b06      	ldr	r3, [sp, #24]
 80193da:	9c07      	ldr	r4, [sp, #28]
 80193dc:	eba3 020e 	sub.w	r2, r3, lr
 80193e0:	2c06      	cmp	r4, #6
 80193e2:	b292      	uxth	r2, r2
 80193e4:	b213      	sxth	r3, r2
 80193e6:	d80d      	bhi.n	8019404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 80193e8:	4651      	mov	r1, sl
 80193ea:	aa0a      	add	r2, sp, #40	; 0x28
 80193ec:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 80193f0:	6849      	ldr	r1, [r1, #4]
 80193f2:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 80193f6:	9b05      	ldr	r3, [sp, #20]
 80193f8:	c203      	stmia	r2!, {r0, r1}
 80193fa:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80193fe:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8019402:	e759      	b.n	80192b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8019404:	9c00      	ldr	r4, [sp, #0]
 8019406:	4563      	cmp	r3, ip
 8019408:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801940c:	db0d      	blt.n	801942a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801940e:	4429      	add	r1, r5
 8019410:	9a04      	ldr	r2, [sp, #16]
 8019412:	445c      	add	r4, fp
 8019414:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019418:	b289      	uxth	r1, r1
 801941a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801941e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8019422:	4411      	add	r1, r2
 8019424:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8019428:	e581      	b.n	8018f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801942a:	445c      	add	r4, fp
 801942c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8019430:	e79f      	b.n	8019372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8019432:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019436:	2f07      	cmp	r7, #7
 8019438:	d806      	bhi.n	8019448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801943a:	ab08      	add	r3, sp, #32
 801943c:	9801      	ldr	r0, [sp, #4]
 801943e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019442:	f7ff fd45 	bl	8018ed0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019446:	e5dc      	b.n	8019002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019448:	f107 39ff 	add.w	r9, r7, #4294967295
 801944c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019450:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8019454:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019458:	f04f 35ff 	mov.w	r5, #4294967295
 801945c:	2400      	movs	r4, #0
 801945e:	9304      	str	r3, [sp, #16]
 8019460:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8019464:	f109 32ff 	add.w	r2, r9, #4294967295
 8019468:	9300      	str	r3, [sp, #0]
 801946a:	4690      	mov	r8, r2
 801946c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8019470:	9303      	str	r3, [sp, #12]
 8019472:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019476:	f1b8 3fff 	cmp.w	r8, #4294967295
 801947a:	6818      	ldr	r0, [r3, #0]
 801947c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8019480:	9206      	str	r2, [sp, #24]
 8019482:	bf16      	itet	ne
 8019484:	9904      	ldrne	r1, [sp, #16]
 8019486:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801948a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801948e:	9305      	str	r3, [sp, #20]
 8019490:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019494:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8019498:	fb16 f601 	smulbb	r6, r6, r1
 801949c:	6859      	ldr	r1, [r3, #4]
 801949e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80194a2:	4671      	mov	r1, lr
 80194a4:	a80a      	add	r0, sp, #40	; 0x28
 80194a6:	f7ff fc51 	bl	8018d4c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80194aa:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80194ae:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80194b2:	9b03      	ldr	r3, [sp, #12]
 80194b4:	9a00      	ldr	r2, [sp, #0]
 80194b6:	fb11 f100 	smulbb	r1, r1, r0
 80194ba:	2008      	movs	r0, #8
 80194bc:	fb02 6603 	mla	r6, r2, r3, r6
 80194c0:	1b8e      	subs	r6, r1, r6
 80194c2:	fb91 f1f0 	sdiv	r1, r1, r0
 80194c6:	42b1      	cmp	r1, r6
 80194c8:	dc21      	bgt.n	801950e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80194ca:	4556      	cmp	r6, sl
 80194cc:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80194d0:	da03      	bge.n	80194da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 80194d2:	b1e6      	cbz	r6, 801950e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80194d4:	46b2      	mov	sl, r6
 80194d6:	4645      	mov	r5, r8
 80194d8:	464c      	mov	r4, r9
 80194da:	f108 38ff 	add.w	r8, r8, #4294967295
 80194de:	f118 0f02 	cmn.w	r8, #2
 80194e2:	d1c8      	bne.n	8019476 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 80194e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80194e8:	f1a7 0708 	sub.w	r7, r7, #8
 80194ec:	4691      	mov	r9, r2
 80194ee:	d1b7      	bne.n	8019460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80194f0:	9b01      	ldr	r3, [sp, #4]
 80194f2:	b2a6      	uxth	r6, r4
 80194f4:	00e4      	lsls	r4, r4, #3
 80194f6:	1918      	adds	r0, r3, r4
 80194f8:	1c6b      	adds	r3, r5, #1
 80194fa:	d10b      	bne.n	8019514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 80194fc:	4601      	mov	r1, r0
 80194fe:	9802      	ldr	r0, [sp, #8]
 8019500:	f7ff fc24 	bl	8018d4c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019504:	4631      	mov	r1, r6
 8019506:	9801      	ldr	r0, [sp, #4]
 8019508:	f7ff fccc 	bl	8018ea4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801950c:	e50f      	b.n	8018f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801950e:	4645      	mov	r5, r8
 8019510:	464c      	mov	r4, r9
 8019512:	e7ed      	b.n	80194f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8019514:	9b01      	ldr	r3, [sp, #4]
 8019516:	00ed      	lsls	r5, r5, #3
 8019518:	445c      	add	r4, fp
 801951a:	1959      	adds	r1, r3, r5
 801951c:	445d      	add	r5, fp
 801951e:	f7ff fc15 	bl	8018d4c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019522:	9b02      	ldr	r3, [sp, #8]
 8019524:	cb03      	ldmia	r3!, {r0, r1}
 8019526:	9b02      	ldr	r3, [sp, #8]
 8019528:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801952c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8019530:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8019534:	6861      	ldr	r1, [r4, #4]
 8019536:	c303      	stmia	r3!, {r0, r1}
 8019538:	e7e4      	b.n	8019504 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801953c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801953c:	4b1d      	ldr	r3, [pc, #116]	; (80195b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801953e:	b530      	push	{r4, r5, lr}
 8019540:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019544:	b085      	sub	sp, #20
 8019546:	4b1c      	ldr	r3, [pc, #112]	; (80195b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019548:	460c      	mov	r4, r1
 801954a:	2100      	movs	r1, #0
 801954c:	4605      	mov	r5, r0
 801954e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019552:	6820      	ldr	r0, [r4, #0]
 8019554:	9100      	str	r1, [sp, #0]
 8019556:	f8ad 3006 	strh.w	r3, [sp, #6]
 801955a:	ab02      	add	r3, sp, #8
 801955c:	6861      	ldr	r1, [r4, #4]
 801955e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019562:	c303      	stmia	r3!, {r0, r1}
 8019564:	4669      	mov	r1, sp
 8019566:	a802      	add	r0, sp, #8
 8019568:	f7fb fdd8 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 801956c:	ab02      	add	r3, sp, #8
 801956e:	cb03      	ldmia	r3!, {r0, r1}
 8019570:	4b12      	ldr	r3, [pc, #72]	; (80195bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019572:	6020      	str	r0, [r4, #0]
 8019574:	6818      	ldr	r0, [r3, #0]
 8019576:	6061      	str	r1, [r4, #4]
 8019578:	b138      	cbz	r0, 801958a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801957a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801957e:	b133      	cbz	r3, 801958e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019580:	6821      	ldr	r1, [r4, #0]
 8019582:	4628      	mov	r0, r5
 8019584:	6862      	ldr	r2, [r4, #4]
 8019586:	f7ff fcc5 	bl	8018f14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801958a:	b005      	add	sp, #20
 801958c:	bd30      	pop	{r4, r5, pc}
 801958e:	6803      	ldr	r3, [r0, #0]
 8019590:	4621      	mov	r1, r4
 8019592:	689b      	ldr	r3, [r3, #8]
 8019594:	4798      	blx	r3
 8019596:	4b0a      	ldr	r3, [pc, #40]	; (80195c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019598:	6818      	ldr	r0, [r3, #0]
 801959a:	b118      	cbz	r0, 80195a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801959c:	6803      	ldr	r3, [r0, #0]
 801959e:	4621      	mov	r1, r4
 80195a0:	689b      	ldr	r3, [r3, #8]
 80195a2:	4798      	blx	r3
 80195a4:	4b07      	ldr	r3, [pc, #28]	; (80195c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80195a6:	4621      	mov	r1, r4
 80195a8:	6818      	ldr	r0, [r3, #0]
 80195aa:	6803      	ldr	r3, [r0, #0]
 80195ac:	699b      	ldr	r3, [r3, #24]
 80195ae:	4798      	blx	r3
 80195b0:	e7eb      	b.n	801958a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80195b2:	bf00      	nop
 80195b4:	200566ec 	.word	0x200566ec
 80195b8:	200566ee 	.word	0x200566ee
 80195bc:	20056754 	.word	0x20056754
 80195c0:	20056750 	.word	0x20056750
 80195c4:	200566f8 	.word	0x200566f8

080195c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80195c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195cc:	4604      	mov	r4, r0
 80195ce:	b09b      	sub	sp, #108	; 0x6c
 80195d0:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80195d4:	b129      	cbz	r1, 80195e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80195d6:	2300      	movs	r3, #0
 80195d8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80195dc:	b01b      	add	sp, #108	; 0x6c
 80195de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195e2:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80195e6:	4630      	mov	r0, r6
 80195e8:	f7fb fddb 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80195ec:	4605      	mov	r5, r0
 80195ee:	b940      	cbnz	r0, 8019602 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 80195f0:	4620      	mov	r0, r4
 80195f2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80195f6:	f7ff fc8d 	bl	8018f14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80195fa:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80195fe:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8019602:	4ba6      	ldr	r3, [pc, #664]	; (801989c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	b33b      	cbz	r3, 8019658 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019608:	4da5      	ldr	r5, [pc, #660]	; (80198a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801960a:	4628      	mov	r0, r5
 801960c:	f7fb fdc9 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019610:	4606      	mov	r6, r0
 8019612:	bb08      	cbnz	r0, 8019658 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019614:	4628      	mov	r0, r5
 8019616:	f7ff fa1d 	bl	8018a54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801961a:	6829      	ldr	r1, [r5, #0]
 801961c:	686a      	ldr	r2, [r5, #4]
 801961e:	4620      	mov	r0, r4
 8019620:	f7ff fc78 	bl	8018f14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019624:	802e      	strh	r6, [r5, #0]
 8019626:	806e      	strh	r6, [r5, #2]
 8019628:	80ae      	strh	r6, [r5, #4]
 801962a:	80ee      	strh	r6, [r5, #6]
 801962c:	4f9d      	ldr	r7, [pc, #628]	; (80198a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801962e:	a809      	add	r0, sp, #36	; 0x24
 8019630:	f7ff fbe3 	bl	8018dfa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019634:	883d      	ldrh	r5, [r7, #0]
 8019636:	462e      	mov	r6, r5
 8019638:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801963c:	42b3      	cmp	r3, r6
 801963e:	d910      	bls.n	8019662 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8019640:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019644:	3601      	adds	r6, #1
 8019646:	a809      	add	r0, sp, #36	; 0x24
 8019648:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801964c:	b2b6      	uxth	r6, r6
 801964e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019652:	f7ff fc3d 	bl	8018ed0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019656:	e7ef      	b.n	8019638 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019658:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801965c:	2b00      	cmp	r3, #0
 801965e:	d1e5      	bne.n	801962c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8019660:	e7bc      	b.n	80195dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019662:	462e      	mov	r6, r5
 8019664:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019668:	42b3      	cmp	r3, r6
 801966a:	d90b      	bls.n	8019684 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801966c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019670:	3601      	adds	r6, #1
 8019672:	4620      	mov	r0, r4
 8019674:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019678:	b2b6      	uxth	r6, r6
 801967a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801967e:	f7ff fc49 	bl	8018f14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019682:	e7ef      	b.n	8019664 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019684:	4a88      	ldr	r2, [pc, #544]	; (80198a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8019686:	6813      	ldr	r3, [r2, #0]
 8019688:	4690      	mov	r8, r2
 801968a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801968e:	2b01      	cmp	r3, #1
 8019690:	f040 8094 	bne.w	80197bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8019694:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019698:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801969c:	f04f 0900 	mov.w	r9, #0
 80196a0:	33aa      	adds	r3, #170	; 0xaa
 80196a2:	42a8      	cmp	r0, r5
 80196a4:	f103 0308 	add.w	r3, r3, #8
 80196a8:	dd0a      	ble.n	80196c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 80196aa:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80196ae:	3501      	adds	r5, #1
 80196b0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80196b4:	440a      	add	r2, r1
 80196b6:	b212      	sxth	r2, r2
 80196b8:	4591      	cmp	r9, r2
 80196ba:	bfb8      	it	lt
 80196bc:	4691      	movlt	r9, r2
 80196be:	e7f0      	b.n	80196a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 80196c0:	4b7a      	ldr	r3, [pc, #488]	; (80198ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80196c2:	4e7b      	ldr	r6, [pc, #492]	; (80198b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80196c4:	881d      	ldrh	r5, [r3, #0]
 80196c6:	2300      	movs	r3, #0
 80196c8:	2d0f      	cmp	r5, #15
 80196ca:	bf8c      	ite	hi
 80196cc:	08ed      	lsrhi	r5, r5, #3
 80196ce:	2501      	movls	r5, #1
 80196d0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80196d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80196d8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80196dc:	f8d8 0000 	ldr.w	r0, [r8]
 80196e0:	440b      	add	r3, r1
 80196e2:	6802      	ldr	r2, [r0, #0]
 80196e4:	b21b      	sxth	r3, r3
 80196e6:	4599      	cmp	r9, r3
 80196e8:	dd4b      	ble.n	8019782 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 80196ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80196ee:	4798      	blx	r3
 80196f0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80196f4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80196f8:	4413      	add	r3, r2
 80196fa:	b21b      	sxth	r3, r3
 80196fc:	195a      	adds	r2, r3, r5
 80196fe:	4290      	cmp	r0, r2
 8019700:	da07      	bge.n	8019712 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8019702:	4581      	cmp	r9, r0
 8019704:	dd05      	ble.n	8019712 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8019706:	4298      	cmp	r0, r3
 8019708:	da33      	bge.n	8019772 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801970a:	2b00      	cmp	r3, #0
 801970c:	dd31      	ble.n	8019772 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801970e:	4648      	mov	r0, r9
 8019710:	e004      	b.n	801971c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8019712:	4298      	cmp	r0, r3
 8019714:	dbfb      	blt.n	801970e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8019716:	4548      	cmp	r0, r9
 8019718:	bfa8      	it	ge
 801971a:	4648      	movge	r0, r9
 801971c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8019720:	2100      	movs	r1, #0
 8019722:	1ac0      	subs	r0, r0, r3
 8019724:	f8b7 a000 	ldrh.w	sl, [r7]
 8019728:	f8ad 1014 	strh.w	r1, [sp, #20]
 801972c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019730:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019734:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019738:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801973c:	4553      	cmp	r3, sl
 801973e:	d9c9      	bls.n	80196d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019740:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019744:	ab07      	add	r3, sp, #28
 8019746:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801974a:	6851      	ldr	r1, [r2, #4]
 801974c:	c303      	stmia	r3!, {r0, r1}
 801974e:	a807      	add	r0, sp, #28
 8019750:	a905      	add	r1, sp, #20
 8019752:	f7fb fce3 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 8019756:	a807      	add	r0, sp, #28
 8019758:	f7fb fd23 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801975c:	b920      	cbnz	r0, 8019768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801975e:	6823      	ldr	r3, [r4, #0]
 8019760:	a907      	add	r1, sp, #28
 8019762:	4620      	mov	r0, r4
 8019764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019766:	4798      	blx	r3
 8019768:	f10a 0a01 	add.w	sl, sl, #1
 801976c:	fa1f fa8a 	uxth.w	sl, sl
 8019770:	e7e2      	b.n	8019738 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8019772:	f8d8 0000 	ldr.w	r0, [r8]
 8019776:	2101      	movs	r1, #1
 8019778:	6803      	ldr	r3, [r0, #0]
 801977a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801977e:	4798      	blx	r3
 8019780:	e7a8      	b.n	80196d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019782:	6a13      	ldr	r3, [r2, #32]
 8019784:	4798      	blx	r3
 8019786:	4b4b      	ldr	r3, [pc, #300]	; (80198b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8019788:	781b      	ldrb	r3, [r3, #0]
 801978a:	2b00      	cmp	r3, #0
 801978c:	f43f af26 	beq.w	80195dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019790:	2300      	movs	r3, #0
 8019792:	883d      	ldrh	r5, [r7, #0]
 8019794:	34ea      	adds	r4, #234	; 0xea
 8019796:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801979a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801979e:	42ab      	cmp	r3, r5
 80197a0:	f67f af1c 	bls.w	80195dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80197a4:	ab1a      	add	r3, sp, #104	; 0x68
 80197a6:	4620      	mov	r0, r4
 80197a8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80197ac:	3501      	adds	r5, #1
 80197ae:	3b44      	subs	r3, #68	; 0x44
 80197b0:	b2ad      	uxth	r5, r5
 80197b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80197b6:	f7ff fb8b 	bl	8018ed0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80197ba:	e7ee      	b.n	801979a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 80197bc:	2b02      	cmp	r3, #2
 80197be:	f040 813d 	bne.w	8019a3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 80197c2:	4b3d      	ldr	r3, [pc, #244]	; (80198b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 80197c4:	781b      	ldrb	r3, [r3, #0]
 80197c6:	2b01      	cmp	r3, #1
 80197c8:	d02c      	beq.n	8019824 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 80197ca:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 80197ce:	883a      	ldrh	r2, [r7, #0]
 80197d0:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80197d4:	3201      	adds	r2, #1
 80197d6:	b292      	uxth	r2, r2
 80197d8:	2900      	cmp	r1, #0
 80197da:	d0d4      	beq.n	8019786 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80197dc:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80197e0:	4610      	mov	r0, r2
 80197e2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80197e6:	f04f 0a00 	mov.w	sl, #0
 80197ea:	441d      	add	r5, r3
 80197ec:	b22d      	sxth	r5, r5
 80197ee:	b283      	uxth	r3, r0
 80197f0:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 80197f4:	4299      	cmp	r1, r3
 80197f6:	f240 80c3 	bls.w	8019980 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 80197fa:	4426      	add	r6, r4
 80197fc:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8019800:	4684      	mov	ip, r0
 8019802:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8019806:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801980a:	4573      	cmp	r3, lr
 801980c:	f340 80a5 	ble.w	801995a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8019810:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8019814:	4475      	add	r5, lr
 8019816:	b22d      	sxth	r5, r5
 8019818:	429d      	cmp	r5, r3
 801981a:	bfa8      	it	ge
 801981c:	461d      	movge	r5, r3
 801981e:	3001      	adds	r0, #1
 8019820:	46e2      	mov	sl, ip
 8019822:	e7e4      	b.n	80197ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8019824:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8019828:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801982c:	f1bb 0f00 	cmp.w	fp, #0
 8019830:	d0a9      	beq.n	8019786 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019832:	883b      	ldrh	r3, [r7, #0]
 8019834:	2600      	movs	r6, #0
 8019836:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801983a:	3301      	adds	r3, #1
 801983c:	b29b      	uxth	r3, r3
 801983e:	b299      	uxth	r1, r3
 8019840:	00f5      	lsls	r5, r6, #3
 8019842:	458b      	cmp	fp, r1
 8019844:	d93a      	bls.n	80198bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8019846:	4425      	add	r5, r4
 8019848:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801984c:	469c      	mov	ip, r3
 801984e:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8019852:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8019856:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801985a:	4408      	add	r0, r1
 801985c:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8019860:	4471      	add	r1, lr
 8019862:	b200      	sxth	r0, r0
 8019864:	b209      	sxth	r1, r1
 8019866:	4288      	cmp	r0, r1
 8019868:	da06      	bge.n	8019878 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801986a:	4586      	cmp	lr, r0
 801986c:	4672      	mov	r2, lr
 801986e:	bfb8      	it	lt
 8019870:	4602      	movlt	r2, r0
 8019872:	3301      	adds	r3, #1
 8019874:	4666      	mov	r6, ip
 8019876:	e7e2      	b.n	801983e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8019878:	d10b      	bne.n	8019892 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801987a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801987e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8019882:	458c      	cmp	ip, r1
 8019884:	bfb4      	ite	lt
 8019886:	469c      	movlt	ip, r3
 8019888:	46b4      	movge	ip, r6
 801988a:	4572      	cmp	r2, lr
 801988c:	bfb8      	it	lt
 801988e:	4672      	movlt	r2, lr
 8019890:	e7ef      	b.n	8019872 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8019892:	428a      	cmp	r2, r1
 8019894:	46b4      	mov	ip, r6
 8019896:	bfb8      	it	lt
 8019898:	460a      	movlt	r2, r1
 801989a:	e7ea      	b.n	8019872 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801989c:	20056750 	.word	0x20056750
 80198a0:	2005675c 	.word	0x2005675c
 80198a4:	20000024 	.word	0x20000024
 80198a8:	200566f8 	.word	0x200566f8
 80198ac:	200566ee 	.word	0x200566ee
 80198b0:	200566ec 	.word	0x200566ec
 80198b4:	200566f6 	.word	0x200566f6
 80198b8:	200566f0 	.word	0x200566f0
 80198bc:	1961      	adds	r1, r4, r5
 80198be:	ab07      	add	r3, sp, #28
 80198c0:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80198c4:	6849      	ldr	r1, [r1, #4]
 80198c6:	c303      	stmia	r3!, {r0, r1}
 80198c8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80198cc:	a807      	add	r0, sp, #28
 80198ce:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80198d2:	2b13      	cmp	r3, #19
 80198d4:	440b      	add	r3, r1
 80198d6:	bfd8      	it	le
 80198d8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80198dc:	1a9b      	subs	r3, r3, r2
 80198de:	f8ad 201c 	strh.w	r2, [sp, #28]
 80198e2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80198e6:	f7ff f90f 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80198ea:	a807      	add	r0, sp, #28
 80198ec:	f7fb fc59 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80198f0:	2800      	cmp	r0, #0
 80198f2:	d199      	bne.n	8019828 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80198f4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80198f8:	4425      	add	r5, r4
 80198fa:	f8d8 0000 	ldr.w	r0, [r8]
 80198fe:	f1bc 0f14 	cmp.w	ip, #20
 8019902:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019906:	f8d0 e000 	ldr.w	lr, [r0]
 801990a:	bfa8      	it	ge
 801990c:	f04f 0c14 	movge.w	ip, #20
 8019910:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019914:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019918:	fa1f fc8c 	uxth.w	ip, ip
 801991c:	f8cd c000 	str.w	ip, [sp]
 8019920:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 8019924:	47d0      	blx	sl
 8019926:	4682      	mov	sl, r0
 8019928:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801992c:	a807      	add	r0, sp, #28
 801992e:	f7ff f891 	bl	8018a54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019932:	6823      	ldr	r3, [r4, #0]
 8019934:	4620      	mov	r0, r4
 8019936:	a907      	add	r1, sp, #28
 8019938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801993a:	4798      	blx	r3
 801993c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8019940:	eba0 000a 	sub.w	r0, r0, sl
 8019944:	b200      	sxth	r0, r0
 8019946:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801994a:	2800      	cmp	r0, #0
 801994c:	f47f af6c 	bne.w	8019828 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019950:	b2b1      	uxth	r1, r6
 8019952:	4648      	mov	r0, r9
 8019954:	f7ff faa6 	bl	8018ea4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019958:	e766      	b.n	8019828 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801995a:	d10c      	bne.n	8019976 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801995c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8019960:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8019964:	45b4      	cmp	ip, r6
 8019966:	bfb4      	ite	lt
 8019968:	4684      	movlt	ip, r0
 801996a:	46d4      	movge	ip, sl
 801996c:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8019970:	4433      	add	r3, r6
 8019972:	b21b      	sxth	r3, r3
 8019974:	e750      	b.n	8019818 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8019976:	4575      	cmp	r5, lr
 8019978:	46d4      	mov	ip, sl
 801997a:	bfa8      	it	ge
 801997c:	4675      	movge	r5, lr
 801997e:	e74e      	b.n	801981e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8019980:	eb0b 0006 	add.w	r0, fp, r6
 8019984:	4426      	add	r6, r4
 8019986:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801998a:	f1b9 0f13 	cmp.w	r9, #19
 801998e:	bfdc      	itt	le
 8019990:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8019994:	444d      	addle	r5, r9
 8019996:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801999a:	bfd8      	it	le
 801999c:	b22d      	sxthle	r5, r5
 801999e:	f7fb fc00 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80199a2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80199a6:	2800      	cmp	r0, #0
 80199a8:	f47f af16 	bne.w	80197d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 80199ac:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 80199b0:	fa1f f989 	uxth.w	r9, r9
 80199b4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80199b8:	eba5 050c 	sub.w	r5, r5, ip
 80199bc:	fa1f f28c 	uxth.w	r2, ip
 80199c0:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 80199c4:	eb02 0009 	add.w	r0, r2, r9
 80199c8:	2d14      	cmp	r5, #20
 80199ca:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 80199ce:	bfa8      	it	ge
 80199d0:	2514      	movge	r5, #20
 80199d2:	b200      	sxth	r0, r0
 80199d4:	f8ad 101c 	strh.w	r1, [sp, #28]
 80199d8:	b289      	uxth	r1, r1
 80199da:	fa1f fe85 	uxth.w	lr, r5
 80199de:	eba0 000c 	sub.w	r0, r0, ip
 80199e2:	f8ad c01e 	strh.w	ip, [sp, #30]
 80199e6:	4586      	cmp	lr, r0
 80199e8:	f8d8 0000 	ldr.w	r0, [r8]
 80199ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 80199f0:	b29b      	uxth	r3, r3
 80199f2:	bfb8      	it	lt
 80199f4:	46f1      	movlt	r9, lr
 80199f6:	6805      	ldr	r5, [r0, #0]
 80199f8:	f8cd 9000 	str.w	r9, [sp]
 80199fc:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 8019a00:	47a8      	blx	r5
 8019a02:	6823      	ldr	r3, [r4, #0]
 8019a04:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019a08:	a907      	add	r1, sp, #28
 8019a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a0c:	4620      	mov	r0, r4
 8019a0e:	4798      	blx	r3
 8019a10:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019a14:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8019a18:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8019a1c:	1a5b      	subs	r3, r3, r1
 8019a1e:	440a      	add	r2, r1
 8019a20:	b21b      	sxth	r3, r3
 8019a22:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8019a26:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	f47f aecf 	bne.w	80197ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8019a30:	fa1f f18a 	uxth.w	r1, sl
 8019a34:	4658      	mov	r0, fp
 8019a36:	f7ff fa35 	bl	8018ea4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019a3a:	e6c8      	b.n	80197ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8019a3c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019a40:	42ab      	cmp	r3, r5
 8019a42:	f67f aea0 	bls.w	8019786 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019a46:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019a4a:	ab07      	add	r3, sp, #28
 8019a4c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019a50:	6851      	ldr	r1, [r2, #4]
 8019a52:	c303      	stmia	r3!, {r0, r1}
 8019a54:	a807      	add	r0, sp, #28
 8019a56:	f7fb fba4 	bl	80151a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a5a:	b920      	cbnz	r0, 8019a66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8019a5c:	6823      	ldr	r3, [r4, #0]
 8019a5e:	a907      	add	r1, sp, #28
 8019a60:	4620      	mov	r0, r4
 8019a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a64:	4798      	blx	r3
 8019a66:	3501      	adds	r5, #1
 8019a68:	b2ad      	uxth	r5, r5
 8019a6a:	e7e7      	b.n	8019a3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08019a6c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019a6c:	4b03      	ldr	r3, [pc, #12]	; (8019a7c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019a6e:	2200      	movs	r2, #0
 8019a70:	801a      	strh	r2, [r3, #0]
 8019a72:	805a      	strh	r2, [r3, #2]
 8019a74:	809a      	strh	r2, [r3, #4]
 8019a76:	80da      	strh	r2, [r3, #6]
 8019a78:	4770      	bx	lr
 8019a7a:	bf00      	nop
 8019a7c:	2005675c 	.word	0x2005675c

08019a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a84:	b09b      	sub	sp, #108	; 0x6c
 8019a86:	4606      	mov	r6, r0
 8019a88:	4614      	mov	r4, r2
 8019a8a:	468a      	mov	sl, r1
 8019a8c:	a803      	add	r0, sp, #12
 8019a8e:	461d      	mov	r5, r3
 8019a90:	f000 fe85 	bl	801a79e <_ZN8touchgfx12TextProviderC1Ev>
 8019a94:	6833      	ldr	r3, [r6, #0]
 8019a96:	4630      	mov	r0, r6
 8019a98:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a9e:	4798      	blx	r3
 8019aa0:	6833      	ldr	r3, [r6, #0]
 8019aa2:	4607      	mov	r7, r0
 8019aa4:	4630      	mov	r0, r6
 8019aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019aa8:	4798      	blx	r3
 8019aaa:	462a      	mov	r2, r5
 8019aac:	2500      	movs	r5, #0
 8019aae:	4621      	mov	r1, r4
 8019ab0:	9000      	str	r0, [sp, #0]
 8019ab2:	463b      	mov	r3, r7
 8019ab4:	462c      	mov	r4, r5
 8019ab6:	46a9      	mov	r9, r5
 8019ab8:	46a8      	mov	r8, r5
 8019aba:	a803      	add	r0, sp, #12
 8019abc:	f000 febc 	bl	801a838 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	9302      	str	r3, [sp, #8]
 8019ac4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019ac8:	429c      	cmp	r4, r3
 8019aca:	d002      	beq.n	8019ad2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019acc:	455c      	cmp	r4, fp
 8019ace:	bf18      	it	ne
 8019ad0:	4625      	movne	r5, r4
 8019ad2:	ab02      	add	r3, sp, #8
 8019ad4:	4632      	mov	r2, r6
 8019ad6:	4651      	mov	r1, sl
 8019ad8:	a803      	add	r0, sp, #12
 8019ada:	f001 f9a9 	bl	801ae30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019ade:	4604      	mov	r4, r0
 8019ae0:	b108      	cbz	r0, 8019ae6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8019ae2:	280a      	cmp	r0, #10
 8019ae4:	d10a      	bne.n	8019afc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8019ae6:	45c1      	cmp	r9, r8
 8019ae8:	bf38      	it	cc
 8019aea:	46c1      	movcc	r9, r8
 8019aec:	f04f 0800 	mov.w	r8, #0
 8019af0:	2c00      	cmp	r4, #0
 8019af2:	d1e5      	bne.n	8019ac0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019af4:	4648      	mov	r0, r9
 8019af6:	b01b      	add	sp, #108	; 0x6c
 8019af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019afc:	9a02      	ldr	r2, [sp, #8]
 8019afe:	2a00      	cmp	r2, #0
 8019b00:	d0de      	beq.n	8019ac0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019b02:	7b57      	ldrb	r7, [r2, #13]
 8019b04:	4629      	mov	r1, r5
 8019b06:	6833      	ldr	r3, [r6, #0]
 8019b08:	007f      	lsls	r7, r7, #1
 8019b0a:	8894      	ldrh	r4, [r2, #4]
 8019b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b0e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8019b12:	7a97      	ldrb	r7, [r2, #10]
 8019b14:	4307      	orrs	r7, r0
 8019b16:	4630      	mov	r0, r6
 8019b18:	4798      	blx	r3
 8019b1a:	4438      	add	r0, r7
 8019b1c:	4480      	add	r8, r0
 8019b1e:	fa1f f888 	uxth.w	r8, r8
 8019b22:	e7e5      	b.n	8019af0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08019b24 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019b24:	b508      	push	{r3, lr}
 8019b26:	6803      	ldr	r3, [r0, #0]
 8019b28:	68db      	ldr	r3, [r3, #12]
 8019b2a:	4798      	blx	r3
 8019b2c:	b128      	cbz	r0, 8019b3a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019b2e:	7b43      	ldrb	r3, [r0, #13]
 8019b30:	7a80      	ldrb	r0, [r0, #10]
 8019b32:	005b      	lsls	r3, r3, #1
 8019b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b38:	4318      	orrs	r0, r3
 8019b3a:	bd08      	pop	{r3, pc}

08019b3c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019b3c:	b40e      	push	{r1, r2, r3}
 8019b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b40:	b09c      	sub	sp, #112	; 0x70
 8019b42:	4605      	mov	r5, r0
 8019b44:	ab21      	add	r3, sp, #132	; 0x84
 8019b46:	a805      	add	r0, sp, #20
 8019b48:	f853 4b04 	ldr.w	r4, [r3], #4
 8019b4c:	9303      	str	r3, [sp, #12]
 8019b4e:	f000 fe26 	bl	801a79e <_ZN8touchgfx12TextProviderC1Ev>
 8019b52:	682b      	ldr	r3, [r5, #0]
 8019b54:	4628      	mov	r0, r5
 8019b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b58:	4798      	blx	r3
 8019b5a:	682b      	ldr	r3, [r5, #0]
 8019b5c:	4606      	mov	r6, r0
 8019b5e:	4628      	mov	r0, r5
 8019b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b62:	4798      	blx	r3
 8019b64:	4633      	mov	r3, r6
 8019b66:	4621      	mov	r1, r4
 8019b68:	ae1c      	add	r6, sp, #112	; 0x70
 8019b6a:	2400      	movs	r4, #0
 8019b6c:	9000      	str	r0, [sp, #0]
 8019b6e:	9a03      	ldr	r2, [sp, #12]
 8019b70:	a805      	add	r0, sp, #20
 8019b72:	f000 fe61 	bl	801a838 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019b76:	f846 4d60 	str.w	r4, [r6, #-96]!
 8019b7a:	462a      	mov	r2, r5
 8019b7c:	4633      	mov	r3, r6
 8019b7e:	4621      	mov	r1, r4
 8019b80:	a805      	add	r0, sp, #20
 8019b82:	f001 f955 	bl	801ae30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b86:	b300      	cbz	r0, 8019bca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8019b88:	280a      	cmp	r0, #10
 8019b8a:	d01a      	beq.n	8019bc2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019b8c:	9f04      	ldr	r7, [sp, #16]
 8019b8e:	b1c7      	cbz	r7, 8019bc2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019b90:	7b78      	ldrb	r0, [r7, #13]
 8019b92:	7a3b      	ldrb	r3, [r7, #8]
 8019b94:	00c1      	lsls	r1, r0, #3
 8019b96:	88aa      	ldrh	r2, [r5, #4]
 8019b98:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019b9c:	4319      	orrs	r1, r3
 8019b9e:	0643      	lsls	r3, r0, #25
 8019ba0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019ba4:	bf48      	it	mi
 8019ba6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019baa:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019bae:	bf48      	it	mi
 8019bb0:	b219      	sxthmi	r1, r3
 8019bb2:	79fb      	ldrb	r3, [r7, #7]
 8019bb4:	4303      	orrs	r3, r0
 8019bb6:	4413      	add	r3, r2
 8019bb8:	1a5b      	subs	r3, r3, r1
 8019bba:	b29b      	uxth	r3, r3
 8019bbc:	42a3      	cmp	r3, r4
 8019bbe:	bfc8      	it	gt
 8019bc0:	b21c      	sxthgt	r4, r3
 8019bc2:	4633      	mov	r3, r6
 8019bc4:	462a      	mov	r2, r5
 8019bc6:	2100      	movs	r1, #0
 8019bc8:	e7da      	b.n	8019b80 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019bca:	b2a0      	uxth	r0, r4
 8019bcc:	b01c      	add	sp, #112	; 0x70
 8019bce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019bd2:	b003      	add	sp, #12
 8019bd4:	4770      	bx	lr

08019bd6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019bd6:	b40e      	push	{r1, r2, r3}
 8019bd8:	b570      	push	{r4, r5, r6, lr}
 8019bda:	b09b      	sub	sp, #108	; 0x6c
 8019bdc:	4604      	mov	r4, r0
 8019bde:	ab1f      	add	r3, sp, #124	; 0x7c
 8019be0:	a803      	add	r0, sp, #12
 8019be2:	f853 5b04 	ldr.w	r5, [r3], #4
 8019be6:	9302      	str	r3, [sp, #8]
 8019be8:	f000 fdd9 	bl	801a79e <_ZN8touchgfx12TextProviderC1Ev>
 8019bec:	6823      	ldr	r3, [r4, #0]
 8019bee:	4620      	mov	r0, r4
 8019bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019bf2:	4798      	blx	r3
 8019bf4:	6823      	ldr	r3, [r4, #0]
 8019bf6:	4606      	mov	r6, r0
 8019bf8:	4620      	mov	r0, r4
 8019bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019bfc:	2401      	movs	r4, #1
 8019bfe:	4798      	blx	r3
 8019c00:	4633      	mov	r3, r6
 8019c02:	9000      	str	r0, [sp, #0]
 8019c04:	4629      	mov	r1, r5
 8019c06:	9a02      	ldr	r2, [sp, #8]
 8019c08:	a803      	add	r0, sp, #12
 8019c0a:	f000 fe15 	bl	801a838 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019c0e:	a803      	add	r0, sp, #12
 8019c10:	f001 fa06 	bl	801b020 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019c14:	b2a3      	uxth	r3, r4
 8019c16:	b138      	cbz	r0, 8019c28 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019c18:	280a      	cmp	r0, #10
 8019c1a:	a803      	add	r0, sp, #12
 8019c1c:	bf04      	itt	eq
 8019c1e:	3301      	addeq	r3, #1
 8019c20:	b21c      	sxtheq	r4, r3
 8019c22:	f001 f9fd 	bl	801b020 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019c26:	e7f5      	b.n	8019c14 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019c28:	4618      	mov	r0, r3
 8019c2a:	b01b      	add	sp, #108	; 0x6c
 8019c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c30:	b003      	add	sp, #12
 8019c32:	4770      	bx	lr

08019c34 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019c34:	b40e      	push	{r1, r2, r3}
 8019c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c38:	b09c      	sub	sp, #112	; 0x70
 8019c3a:	4604      	mov	r4, r0
 8019c3c:	ab21      	add	r3, sp, #132	; 0x84
 8019c3e:	a805      	add	r0, sp, #20
 8019c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8019c44:	9303      	str	r3, [sp, #12]
 8019c46:	f000 fdaa 	bl	801a79e <_ZN8touchgfx12TextProviderC1Ev>
 8019c4a:	6823      	ldr	r3, [r4, #0]
 8019c4c:	4620      	mov	r0, r4
 8019c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c50:	4798      	blx	r3
 8019c52:	6823      	ldr	r3, [r4, #0]
 8019c54:	4606      	mov	r6, r0
 8019c56:	4620      	mov	r0, r4
 8019c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c5a:	4798      	blx	r3
 8019c5c:	4633      	mov	r3, r6
 8019c5e:	4629      	mov	r1, r5
 8019c60:	9000      	str	r0, [sp, #0]
 8019c62:	9a03      	ldr	r2, [sp, #12]
 8019c64:	a805      	add	r0, sp, #20
 8019c66:	f000 fde7 	bl	801a838 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019c6a:	ad1c      	add	r5, sp, #112	; 0x70
 8019c6c:	2100      	movs	r1, #0
 8019c6e:	26ff      	movs	r6, #255	; 0xff
 8019c70:	4622      	mov	r2, r4
 8019c72:	a805      	add	r0, sp, #20
 8019c74:	f845 1d60 	str.w	r1, [r5, #-96]!
 8019c78:	462b      	mov	r3, r5
 8019c7a:	f001 f8d9 	bl	801ae30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c7e:	b1d8      	cbz	r0, 8019cb8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8019c80:	280a      	cmp	r0, #10
 8019c82:	d012      	beq.n	8019caa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019c84:	9804      	ldr	r0, [sp, #16]
 8019c86:	b180      	cbz	r0, 8019caa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019c88:	7b47      	ldrb	r7, [r0, #13]
 8019c8a:	7922      	ldrb	r2, [r4, #4]
 8019c8c:	00fb      	lsls	r3, r7, #3
 8019c8e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019c92:	7a03      	ldrb	r3, [r0, #8]
 8019c94:	430b      	orrs	r3, r1
 8019c96:	0679      	lsls	r1, r7, #25
 8019c98:	bf44      	itt	mi
 8019c9a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019c9e:	b21b      	sxthmi	r3, r3
 8019ca0:	1ad3      	subs	r3, r2, r3
 8019ca2:	b2db      	uxtb	r3, r3
 8019ca4:	429e      	cmp	r6, r3
 8019ca6:	bf28      	it	cs
 8019ca8:	461e      	movcs	r6, r3
 8019caa:	462b      	mov	r3, r5
 8019cac:	4622      	mov	r2, r4
 8019cae:	2100      	movs	r1, #0
 8019cb0:	a805      	add	r0, sp, #20
 8019cb2:	f001 f8bd 	bl	801ae30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019cb6:	e7e2      	b.n	8019c7e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8019cb8:	4630      	mov	r0, r6
 8019cba:	b01c      	add	sp, #112	; 0x70
 8019cbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019cc0:	b003      	add	sp, #12
 8019cc2:	4770      	bx	lr

08019cc4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019cc4:	b513      	push	{r0, r1, r4, lr}
 8019cc6:	1d01      	adds	r1, r0, #4
 8019cc8:	4603      	mov	r3, r0
 8019cca:	466a      	mov	r2, sp
 8019ccc:	c903      	ldmia	r1, {r0, r1}
 8019cce:	e882 0003 	stmia.w	r2, {r0, r1}
 8019cd2:	2100      	movs	r1, #0
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	9100      	str	r1, [sp, #0]
 8019cd8:	6819      	ldr	r1, [r3, #0]
 8019cda:	690c      	ldr	r4, [r1, #16]
 8019cdc:	4611      	mov	r1, r2
 8019cde:	47a0      	blx	r4
 8019ce0:	b002      	add	sp, #8
 8019ce2:	bd10      	pop	{r4, pc}

08019ce4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019ce4:	b538      	push	{r3, r4, r5, lr}
 8019ce6:	680b      	ldr	r3, [r1, #0]
 8019ce8:	460c      	mov	r4, r1
 8019cea:	4605      	mov	r5, r0
 8019cec:	68db      	ldr	r3, [r3, #12]
 8019cee:	4798      	blx	r3
 8019cf0:	6823      	ldr	r3, [r4, #0]
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	4629      	mov	r1, r5
 8019cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cf8:	4798      	blx	r3
 8019cfa:	4628      	mov	r0, r5
 8019cfc:	bd38      	pop	{r3, r4, r5, pc}

08019cfe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019cfe:	b410      	push	{r4}
 8019d00:	880a      	ldrh	r2, [r1, #0]
 8019d02:	8884      	ldrh	r4, [r0, #4]
 8019d04:	4422      	add	r2, r4
 8019d06:	800a      	strh	r2, [r1, #0]
 8019d08:	884a      	ldrh	r2, [r1, #2]
 8019d0a:	88c4      	ldrh	r4, [r0, #6]
 8019d0c:	4422      	add	r2, r4
 8019d0e:	804a      	strh	r2, [r1, #2]
 8019d10:	6940      	ldr	r0, [r0, #20]
 8019d12:	b120      	cbz	r0, 8019d1e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019d14:	6803      	ldr	r3, [r0, #0]
 8019d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d1c:	4718      	bx	r3
 8019d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d22:	4770      	bx	lr

08019d24 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d26:	460b      	mov	r3, r1
 8019d28:	b085      	sub	sp, #20
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	b901      	cbnz	r1, 8019d30 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019d2e:	b322      	cbz	r2, 8019d7a <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 8019d30:	1d27      	adds	r7, r4, #4
 8019d32:	466e      	mov	r6, sp
 8019d34:	88e5      	ldrh	r5, [r4, #6]
 8019d36:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019d3a:	442a      	add	r2, r5
 8019d3c:	e886 0003 	stmia.w	r6, {r0, r1}
 8019d40:	88a1      	ldrh	r1, [r4, #4]
 8019d42:	4620      	mov	r0, r4
 8019d44:	b215      	sxth	r5, r2
 8019d46:	4419      	add	r1, r3
 8019d48:	6823      	ldr	r3, [r4, #0]
 8019d4a:	b209      	sxth	r1, r1
 8019d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d4e:	4798      	blx	r3
 8019d50:	6823      	ldr	r3, [r4, #0]
 8019d52:	4629      	mov	r1, r5
 8019d54:	4620      	mov	r0, r4
 8019d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d58:	ad02      	add	r5, sp, #8
 8019d5a:	4798      	blx	r3
 8019d5c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019d60:	e885 0003 	stmia.w	r5, {r0, r1}
 8019d64:	6960      	ldr	r0, [r4, #20]
 8019d66:	b150      	cbz	r0, 8019d7e <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8019d68:	6803      	ldr	r3, [r0, #0]
 8019d6a:	4631      	mov	r1, r6
 8019d6c:	691b      	ldr	r3, [r3, #16]
 8019d6e:	4798      	blx	r3
 8019d70:	6960      	ldr	r0, [r4, #20]
 8019d72:	6803      	ldr	r3, [r0, #0]
 8019d74:	691b      	ldr	r3, [r3, #16]
 8019d76:	4629      	mov	r1, r5
 8019d78:	4798      	blx	r3
 8019d7a:	b005      	add	sp, #20
 8019d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d7e:	f7ff f82b 	bl	8018dd8 <_ZN8touchgfx11Application11getInstanceEv>
 8019d82:	6803      	ldr	r3, [r0, #0]
 8019d84:	4631      	mov	r1, r6
 8019d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d88:	4798      	blx	r3
 8019d8a:	f7ff f825 	bl	8018dd8 <_ZN8touchgfx11Application11getInstanceEv>
 8019d8e:	6803      	ldr	r3, [r0, #0]
 8019d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d92:	e7f0      	b.n	8019d76 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08019d94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d96:	8882      	ldrh	r2, [r0, #4]
 8019d98:	4605      	mov	r5, r0
 8019d9a:	880b      	ldrh	r3, [r1, #0]
 8019d9c:	460c      	mov	r4, r1
 8019d9e:	4413      	add	r3, r2
 8019da0:	800b      	strh	r3, [r1, #0]
 8019da2:	884b      	ldrh	r3, [r1, #2]
 8019da4:	88c2      	ldrh	r2, [r0, #6]
 8019da6:	4413      	add	r3, r2
 8019da8:	4602      	mov	r2, r0
 8019daa:	804b      	strh	r3, [r1, #2]
 8019dac:	466b      	mov	r3, sp
 8019dae:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019db2:	6851      	ldr	r1, [r2, #4]
 8019db4:	c303      	stmia	r3!, {r0, r1}
 8019db6:	4621      	mov	r1, r4
 8019db8:	4668      	mov	r0, sp
 8019dba:	f7fb f9af 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 8019dbe:	466b      	mov	r3, sp
 8019dc0:	cb03      	ldmia	r3!, {r0, r1}
 8019dc2:	6020      	str	r0, [r4, #0]
 8019dc4:	6061      	str	r1, [r4, #4]
 8019dc6:	6968      	ldr	r0, [r5, #20]
 8019dc8:	b128      	cbz	r0, 8019dd6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019dca:	6803      	ldr	r3, [r0, #0]
 8019dcc:	691b      	ldr	r3, [r3, #16]
 8019dce:	4621      	mov	r1, r4
 8019dd0:	4798      	blx	r3
 8019dd2:	b003      	add	sp, #12
 8019dd4:	bd30      	pop	{r4, r5, pc}
 8019dd6:	f7fe ffff 	bl	8018dd8 <_ZN8touchgfx11Application11getInstanceEv>
 8019dda:	6803      	ldr	r3, [r0, #0]
 8019ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019dde:	e7f6      	b.n	8019dce <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019de0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019de0:	b570      	push	{r4, r5, r6, lr}
 8019de2:	8882      	ldrh	r2, [r0, #4]
 8019de4:	460c      	mov	r4, r1
 8019de6:	880b      	ldrh	r3, [r1, #0]
 8019de8:	4605      	mov	r5, r0
 8019dea:	4413      	add	r3, r2
 8019dec:	800b      	strh	r3, [r1, #0]
 8019dee:	884b      	ldrh	r3, [r1, #2]
 8019df0:	88c2      	ldrh	r2, [r0, #6]
 8019df2:	4413      	add	r3, r2
 8019df4:	804b      	strh	r3, [r1, #2]
 8019df6:	1d01      	adds	r1, r0, #4
 8019df8:	4620      	mov	r0, r4
 8019dfa:	f7fb f98f 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 8019dfe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	dd0b      	ble.n	8019e1e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019e06:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	dd07      	ble.n	8019e1e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019e0e:	6968      	ldr	r0, [r5, #20]
 8019e10:	b128      	cbz	r0, 8019e1e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019e12:	6803      	ldr	r3, [r0, #0]
 8019e14:	4621      	mov	r1, r4
 8019e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e1c:	4718      	bx	r3
 8019e1e:	bd70      	pop	{r4, r5, r6, pc}

08019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019e20:	b510      	push	{r4, lr}
 8019e22:	2300      	movs	r3, #0
 8019e24:	4604      	mov	r4, r0
 8019e26:	4608      	mov	r0, r1
 8019e28:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019e2c:	8023      	strh	r3, [r4, #0]
 8019e2e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019e32:	8063      	strh	r3, [r4, #2]
 8019e34:	6803      	ldr	r3, [r0, #0]
 8019e36:	80a1      	strh	r1, [r4, #4]
 8019e38:	4621      	mov	r1, r4
 8019e3a:	80e2      	strh	r2, [r4, #6]
 8019e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e3e:	4798      	blx	r3
 8019e40:	4620      	mov	r0, r4
 8019e42:	bd10      	pop	{r4, pc}

08019e44 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019e44:	b530      	push	{r4, r5, lr}
 8019e46:	8083      	strh	r3, [r0, #4]
 8019e48:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019e4c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019e50:	7183      	strb	r3, [r0, #6]
 8019e52:	79c3      	ldrb	r3, [r0, #7]
 8019e54:	6101      	str	r1, [r0, #16]
 8019e56:	f365 0306 	bfi	r3, r5, #0, #7
 8019e5a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019e5e:	8282      	strh	r2, [r0, #20]
 8019e60:	f365 13c7 	bfi	r3, r5, #7, #1
 8019e64:	71c3      	strb	r3, [r0, #7]
 8019e66:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019e6a:	7203      	strb	r3, [r0, #8]
 8019e6c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019e70:	7243      	strb	r3, [r0, #9]
 8019e72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019e76:	8143      	strh	r3, [r0, #10]
 8019e78:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019e7c:	8183      	strh	r3, [r0, #12]
 8019e7e:	4b01      	ldr	r3, [pc, #4]	; (8019e84 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019e80:	6003      	str	r3, [r0, #0]
 8019e82:	bd30      	pop	{r4, r5, pc}
 8019e84:	0802d450 	.word	0x0802d450

08019e88 <_ZNK8touchgfx9ConstFont4findEt>:
 8019e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e8a:	6904      	ldr	r4, [r0, #16]
 8019e8c:	b3bc      	cbz	r4, 8019efe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019e8e:	88a3      	ldrh	r3, [r4, #4]
 8019e90:	8a82      	ldrh	r2, [r0, #20]
 8019e92:	1acb      	subs	r3, r1, r3
 8019e94:	f102 32ff 	add.w	r2, r2, #4294967295
 8019e98:	d431      	bmi.n	8019efe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019e9a:	4293      	cmp	r3, r2
 8019e9c:	dd0c      	ble.n	8019eb8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019e9e:	230e      	movs	r3, #14
 8019ea0:	fb03 4302 	mla	r3, r3, r2, r4
 8019ea4:	889b      	ldrh	r3, [r3, #4]
 8019ea6:	1a5b      	subs	r3, r3, r1
 8019ea8:	1ad3      	subs	r3, r2, r3
 8019eaa:	429a      	cmp	r2, r3
 8019eac:	db27      	blt.n	8019efe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	bfbc      	itt	lt
 8019eb2:	2302      	movlt	r3, #2
 8019eb4:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019eb8:	2500      	movs	r5, #0
 8019eba:	260e      	movs	r6, #14
 8019ebc:	4295      	cmp	r5, r2
 8019ebe:	dc1e      	bgt.n	8019efe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ec0:	fb06 4003 	mla	r0, r6, r3, r4
 8019ec4:	8887      	ldrh	r7, [r0, #4]
 8019ec6:	42b9      	cmp	r1, r7
 8019ec8:	d01a      	beq.n	8019f00 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019eca:	d20d      	bcs.n	8019ee8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019ecc:	1e5a      	subs	r2, r3, #1
 8019ece:	4295      	cmp	r5, r2
 8019ed0:	dc15      	bgt.n	8019efe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ed2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019ed6:	1a5b      	subs	r3, r3, r1
 8019ed8:	1ad3      	subs	r3, r2, r3
 8019eda:	429a      	cmp	r2, r3
 8019edc:	db0f      	blt.n	8019efe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ede:	429d      	cmp	r5, r3
 8019ee0:	ddec      	ble.n	8019ebc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019ee2:	1953      	adds	r3, r2, r5
 8019ee4:	105b      	asrs	r3, r3, #1
 8019ee6:	e7e9      	b.n	8019ebc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019ee8:	1c5d      	adds	r5, r3, #1
 8019eea:	42aa      	cmp	r2, r5
 8019eec:	db07      	blt.n	8019efe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019eee:	8a43      	ldrh	r3, [r0, #18]
 8019ef0:	1acb      	subs	r3, r1, r3
 8019ef2:	442b      	add	r3, r5
 8019ef4:	429d      	cmp	r5, r3
 8019ef6:	dc02      	bgt.n	8019efe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ef8:	429a      	cmp	r2, r3
 8019efa:	dadf      	bge.n	8019ebc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019efc:	e7f1      	b.n	8019ee2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019efe:	2000      	movs	r0, #0
 8019f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019f02 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f04:	4604      	mov	r4, r0
 8019f06:	4617      	mov	r7, r2
 8019f08:	461e      	mov	r6, r3
 8019f0a:	b911      	cbnz	r1, 8019f12 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019f0c:	2500      	movs	r5, #0
 8019f0e:	4628      	mov	r0, r5
 8019f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f12:	290a      	cmp	r1, #10
 8019f14:	d0fa      	beq.n	8019f0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019f16:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019f1a:	4291      	cmp	r1, r2
 8019f1c:	d0f6      	beq.n	8019f0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019f1e:	f242 020b 	movw	r2, #8203	; 0x200b
 8019f22:	4291      	cmp	r1, r2
 8019f24:	d0f2      	beq.n	8019f0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019f26:	f7ff ffaf 	bl	8019e88 <_ZNK8touchgfx9ConstFont4findEt>
 8019f2a:	4605      	mov	r5, r0
 8019f2c:	b950      	cbnz	r0, 8019f44 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019f2e:	6823      	ldr	r3, [r4, #0]
 8019f30:	4620      	mov	r0, r4
 8019f32:	691b      	ldr	r3, [r3, #16]
 8019f34:	4798      	blx	r3
 8019f36:	4601      	mov	r1, r0
 8019f38:	4620      	mov	r0, r4
 8019f3a:	f7ff ffa5 	bl	8019e88 <_ZNK8touchgfx9ConstFont4findEt>
 8019f3e:	4605      	mov	r5, r0
 8019f40:	2800      	cmp	r0, #0
 8019f42:	d0e3      	beq.n	8019f0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019f44:	6823      	ldr	r3, [r4, #0]
 8019f46:	4629      	mov	r1, r5
 8019f48:	4620      	mov	r0, r4
 8019f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019f4c:	4798      	blx	r3
 8019f4e:	6038      	str	r0, [r7, #0]
 8019f50:	6823      	ldr	r3, [r4, #0]
 8019f52:	4620      	mov	r0, r4
 8019f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f56:	4798      	blx	r3
 8019f58:	7030      	strb	r0, [r6, #0]
 8019f5a:	e7d8      	b.n	8019f0e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019f5c <_ZN8touchgfx6memsetEPvhm>:
 8019f5c:	4402      	add	r2, r0
 8019f5e:	4290      	cmp	r0, r2
 8019f60:	d002      	beq.n	8019f68 <_ZN8touchgfx6memsetEPvhm+0xc>
 8019f62:	f800 1b01 	strb.w	r1, [r0], #1
 8019f66:	e7fa      	b.n	8019f5e <_ZN8touchgfx6memsetEPvhm+0x2>
 8019f68:	4770      	bx	lr

08019f6a <_ZN8touchgfx4clzuEm>:
 8019f6a:	4603      	mov	r3, r0
 8019f6c:	b1c8      	cbz	r0, 8019fa2 <_ZN8touchgfx4clzuEm+0x38>
 8019f6e:	0c02      	lsrs	r2, r0, #16
 8019f70:	0412      	lsls	r2, r2, #16
 8019f72:	b9a2      	cbnz	r2, 8019f9e <_ZN8touchgfx4clzuEm+0x34>
 8019f74:	0403      	lsls	r3, r0, #16
 8019f76:	2010      	movs	r0, #16
 8019f78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019f7c:	bf04      	itt	eq
 8019f7e:	021b      	lsleq	r3, r3, #8
 8019f80:	3008      	addeq	r0, #8
 8019f82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019f86:	bf04      	itt	eq
 8019f88:	011b      	lsleq	r3, r3, #4
 8019f8a:	3004      	addeq	r0, #4
 8019f8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019f90:	bf04      	itt	eq
 8019f92:	009b      	lsleq	r3, r3, #2
 8019f94:	3002      	addeq	r0, #2
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	db04      	blt.n	8019fa4 <_ZN8touchgfx4clzuEm+0x3a>
 8019f9a:	3001      	adds	r0, #1
 8019f9c:	4770      	bx	lr
 8019f9e:	2000      	movs	r0, #0
 8019fa0:	e7ea      	b.n	8019f78 <_ZN8touchgfx4clzuEm+0xe>
 8019fa2:	2020      	movs	r0, #32
 8019fa4:	4770      	bx	lr

08019fa6 <_ZN8touchgfx7muldivuEmmmRm>:
 8019fa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019faa:	4680      	mov	r8, r0
 8019fac:	460f      	mov	r7, r1
 8019fae:	4615      	mov	r5, r2
 8019fb0:	461e      	mov	r6, r3
 8019fb2:	f7ff ffda 	bl	8019f6a <_ZN8touchgfx4clzuEm>
 8019fb6:	b998      	cbnz	r0, 8019fe0 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8019fb8:	4608      	mov	r0, r1
 8019fba:	f7ff ffd6 	bl	8019f6a <_ZN8touchgfx4clzuEm>
 8019fbe:	2800      	cmp	r0, #0
 8019fc0:	dd08      	ble.n	8019fd4 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8019fc2:	4633      	mov	r3, r6
 8019fc4:	462a      	mov	r2, r5
 8019fc6:	4641      	mov	r1, r8
 8019fc8:	4638      	mov	r0, r7
 8019fca:	f7ff ffec 	bl	8019fa6 <_ZN8touchgfx7muldivuEmmmRm>
 8019fce:	b003      	add	sp, #12
 8019fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8019fd8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019fdc:	6033      	str	r3, [r6, #0]
 8019fde:	e7f6      	b.n	8019fce <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8019fe0:	fa31 f900 	lsrs.w	r9, r1, r0
 8019fe4:	fb01 f308 	mul.w	r3, r1, r8
 8019fe8:	d105      	bne.n	8019ff6 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8019fea:	fbb3 f0f5 	udiv	r0, r3, r5
 8019fee:	fb05 3510 	mls	r5, r5, r0, r3
 8019ff2:	6035      	str	r5, [r6, #0]
 8019ff4:	e7eb      	b.n	8019fce <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	fa08 fb00 	lsl.w	fp, r8, r0
 8019ffc:	462a      	mov	r2, r5
 8019ffe:	4641      	mov	r1, r8
 801a000:	fa03 f000 	lsl.w	r0, r3, r0
 801a004:	4633      	mov	r3, r6
 801a006:	fbbb faf5 	udiv	sl, fp, r5
 801a00a:	3801      	subs	r0, #1
 801a00c:	fb09 f40a 	mul.w	r4, r9, sl
 801a010:	4038      	ands	r0, r7
 801a012:	f7ff ffc8 	bl	8019fa6 <_ZN8touchgfx7muldivuEmmmRm>
 801a016:	462a      	mov	r2, r5
 801a018:	4607      	mov	r7, r0
 801a01a:	ab01      	add	r3, sp, #4
 801a01c:	fb05 b11a 	mls	r1, r5, sl, fp
 801a020:	4648      	mov	r0, r9
 801a022:	f7ff ffc0 	bl	8019fa6 <_ZN8touchgfx7muldivuEmmmRm>
 801a026:	9b01      	ldr	r3, [sp, #4]
 801a028:	6832      	ldr	r2, [r6, #0]
 801a02a:	441a      	add	r2, r3
 801a02c:	fbb2 f3f5 	udiv	r3, r2, r5
 801a030:	441c      	add	r4, r3
 801a032:	fb05 2513 	mls	r5, r5, r3, r2
 801a036:	443c      	add	r4, r7
 801a038:	4420      	add	r0, r4
 801a03a:	e7da      	b.n	8019ff2 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801a03c <_ZN8touchgfx6muldivElllRl>:
 801a03c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a03e:	2800      	cmp	r0, #0
 801a040:	461e      	mov	r6, r3
 801a042:	bfba      	itte	lt
 801a044:	4240      	neglt	r0, r0
 801a046:	f04f 34ff 	movlt.w	r4, #4294967295
 801a04a:	2401      	movge	r4, #1
 801a04c:	2900      	cmp	r1, #0
 801a04e:	bfbc      	itt	lt
 801a050:	4249      	neglt	r1, r1
 801a052:	4264      	neglt	r4, r4
 801a054:	2a00      	cmp	r2, #0
 801a056:	bfb6      	itet	lt
 801a058:	4265      	neglt	r5, r4
 801a05a:	4625      	movge	r5, r4
 801a05c:	4252      	neglt	r2, r2
 801a05e:	4288      	cmp	r0, r1
 801a060:	bfc2      	ittt	gt
 801a062:	4603      	movgt	r3, r0
 801a064:	4608      	movgt	r0, r1
 801a066:	4619      	movgt	r1, r3
 801a068:	ab01      	add	r3, sp, #4
 801a06a:	f7ff ff9c 	bl	8019fa6 <_ZN8touchgfx7muldivuEmmmRm>
 801a06e:	9b01      	ldr	r3, [sp, #4]
 801a070:	4368      	muls	r0, r5
 801a072:	435c      	muls	r4, r3
 801a074:	6034      	str	r4, [r6, #0]
 801a076:	b002      	add	sp, #8
 801a078:	bd70      	pop	{r4, r5, r6, pc}

0801a07a <_ZN8touchgfx6muldivElll>:
 801a07a:	b513      	push	{r0, r1, r4, lr}
 801a07c:	4614      	mov	r4, r2
 801a07e:	ab01      	add	r3, sp, #4
 801a080:	f7ff ffdc 	bl	801a03c <_ZN8touchgfx6muldivElllRl>
 801a084:	2800      	cmp	r0, #0
 801a086:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801a08a:	9b01      	ldr	r3, [sp, #4]
 801a08c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801a090:	db0a      	blt.n	801a0a8 <_ZN8touchgfx6muldivElll+0x2e>
 801a092:	2b00      	cmp	r3, #0
 801a094:	f102 0201 	add.w	r2, r2, #1
 801a098:	bfb8      	it	lt
 801a09a:	425b      	neglt	r3, r3
 801a09c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801a0a0:	db00      	blt.n	801a0a4 <_ZN8touchgfx6muldivElll+0x2a>
 801a0a2:	3001      	adds	r0, #1
 801a0a4:	b002      	add	sp, #8
 801a0a6:	bd10      	pop	{r4, pc}
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	bfb8      	it	lt
 801a0ac:	425b      	neglt	r3, r3
 801a0ae:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801a0b2:	bfc8      	it	gt
 801a0b4:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801a0b8:	e7f4      	b.n	801a0a4 <_ZN8touchgfx6muldivElll+0x2a>

0801a0ba <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801a0ba:	2000      	movs	r0, #0
 801a0bc:	4770      	bx	lr

0801a0be <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801a0be:	2001      	movs	r0, #1
 801a0c0:	4770      	bx	lr

0801a0c2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801a0c2:	2002      	movs	r0, #2
 801a0c4:	4770      	bx	lr

0801a0c6 <_ZN8touchgfx12GestureEventD1Ev>:
 801a0c6:	4770      	bx	lr

0801a0c8 <_ZN8touchgfx9DragEventD1Ev>:
 801a0c8:	4770      	bx	lr

0801a0ca <_ZN8touchgfx10ClickEventD1Ev>:
 801a0ca:	4770      	bx	lr

0801a0cc <_ZN8touchgfx10ClickEventD0Ev>:
 801a0cc:	b510      	push	{r4, lr}
 801a0ce:	4604      	mov	r4, r0
 801a0d0:	210c      	movs	r1, #12
 801a0d2:	f00b fe50 	bl	8025d76 <_ZdlPvj>
 801a0d6:	4620      	mov	r0, r4
 801a0d8:	bd10      	pop	{r4, pc}

0801a0da <_ZN8touchgfx9DragEventD0Ev>:
 801a0da:	b510      	push	{r4, lr}
 801a0dc:	4604      	mov	r4, r0
 801a0de:	2110      	movs	r1, #16
 801a0e0:	f00b fe49 	bl	8025d76 <_ZdlPvj>
 801a0e4:	4620      	mov	r0, r4
 801a0e6:	bd10      	pop	{r4, pc}

0801a0e8 <_ZN8touchgfx12GestureEventD0Ev>:
 801a0e8:	b510      	push	{r4, lr}
 801a0ea:	4604      	mov	r4, r0
 801a0ec:	210c      	movs	r1, #12
 801a0ee:	f00b fe42 	bl	8025d76 <_ZdlPvj>
 801a0f2:	4620      	mov	r0, r4
 801a0f4:	bd10      	pop	{r4, pc}
	...

0801a0f8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a0f8:	b530      	push	{r4, r5, lr}
 801a0fa:	460d      	mov	r5, r1
 801a0fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a0fe:	b087      	sub	sp, #28
 801a100:	4604      	mov	r4, r0
 801a102:	b301      	cbz	r1, 801a146 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a104:	a801      	add	r0, sp, #4
 801a106:	f7ff fe8b 	bl	8019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a10a:	892a      	ldrh	r2, [r5, #8]
 801a10c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a110:	7928      	ldrb	r0, [r5, #4]
 801a112:	1ad2      	subs	r2, r2, r3
 801a114:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a116:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a11a:	441a      	add	r2, r3
 801a11c:	896b      	ldrh	r3, [r5, #10]
 801a11e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a122:	f88d 0010 	strb.w	r0, [sp, #16]
 801a126:	1b5b      	subs	r3, r3, r5
 801a128:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a12a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a12c:	442b      	add	r3, r5
 801a12e:	4d07      	ldr	r5, [pc, #28]	; (801a14c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a130:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a134:	a903      	add	r1, sp, #12
 801a136:	9503      	str	r5, [sp, #12]
 801a138:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a13c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a140:	6803      	ldr	r3, [r0, #0]
 801a142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a144:	4798      	blx	r3
 801a146:	b007      	add	sp, #28
 801a148:	bd30      	pop	{r4, r5, pc}
 801a14a:	bf00      	nop
 801a14c:	0802d4d0 	.word	0x0802d4d0

0801a150 <_ZNK8touchgfx4Rect9intersectEss>:
 801a150:	b510      	push	{r4, lr}
 801a152:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a156:	428b      	cmp	r3, r1
 801a158:	dc10      	bgt.n	801a17c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a15a:	8884      	ldrh	r4, [r0, #4]
 801a15c:	4423      	add	r3, r4
 801a15e:	b21b      	sxth	r3, r3
 801a160:	4299      	cmp	r1, r3
 801a162:	da0b      	bge.n	801a17c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a164:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a168:	4293      	cmp	r3, r2
 801a16a:	dc07      	bgt.n	801a17c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a16c:	88c0      	ldrh	r0, [r0, #6]
 801a16e:	4418      	add	r0, r3
 801a170:	b200      	sxth	r0, r0
 801a172:	4282      	cmp	r2, r0
 801a174:	bfac      	ite	ge
 801a176:	2000      	movge	r0, #0
 801a178:	2001      	movlt	r0, #1
 801a17a:	bd10      	pop	{r4, pc}
 801a17c:	2000      	movs	r0, #0
 801a17e:	e7fc      	b.n	801a17a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801a180 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a180:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a182:	460c      	mov	r4, r1
 801a184:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a186:	b089      	sub	sp, #36	; 0x24
 801a188:	4605      	mov	r5, r0
 801a18a:	2900      	cmp	r1, #0
 801a18c:	d054      	beq.n	801a238 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801a18e:	4668      	mov	r0, sp
 801a190:	f7ff fe46 	bl	8019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a194:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801a196:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801a198:	4668      	mov	r0, sp
 801a19a:	8922      	ldrh	r2, [r4, #8]
 801a19c:	88e1      	ldrh	r1, [r4, #6]
 801a19e:	443a      	add	r2, r7
 801a1a0:	4431      	add	r1, r6
 801a1a2:	b212      	sxth	r2, r2
 801a1a4:	b209      	sxth	r1, r1
 801a1a6:	f7ff ffd3 	bl	801a150 <_ZNK8touchgfx4Rect9intersectEss>
 801a1aa:	b1d0      	cbz	r0, 801a1e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a1ac:	89a2      	ldrh	r2, [r4, #12]
 801a1ae:	4668      	mov	r0, sp
 801a1b0:	8961      	ldrh	r1, [r4, #10]
 801a1b2:	443a      	add	r2, r7
 801a1b4:	4431      	add	r1, r6
 801a1b6:	b212      	sxth	r2, r2
 801a1b8:	b209      	sxth	r1, r1
 801a1ba:	f7ff ffc9 	bl	801a150 <_ZNK8touchgfx4Rect9intersectEss>
 801a1be:	4603      	mov	r3, r0
 801a1c0:	b978      	cbnz	r0, 801a1e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a1c2:	4a1e      	ldr	r2, [pc, #120]	; (801a23c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a1c4:	a904      	add	r1, sp, #16
 801a1c6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a1c8:	9204      	str	r2, [sp, #16]
 801a1ca:	2202      	movs	r2, #2
 801a1cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a1d0:	f88d 2014 	strb.w	r2, [sp, #20]
 801a1d4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a1d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a1dc:	6803      	ldr	r3, [r0, #0]
 801a1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1e0:	4798      	blx	r3
 801a1e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a1e4:	a802      	add	r0, sp, #8
 801a1e6:	f7ff fe1b 	bl	8019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1ea:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a1ee:	88e0      	ldrh	r0, [r4, #6]
 801a1f0:	8961      	ldrh	r1, [r4, #10]
 801a1f2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a1f6:	1a80      	subs	r0, r0, r2
 801a1f8:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801a1fc:	1a89      	subs	r1, r1, r2
 801a1fe:	8923      	ldrh	r3, [r4, #8]
 801a200:	4460      	add	r0, ip
 801a202:	89a2      	ldrh	r2, [r4, #12]
 801a204:	4461      	add	r1, ip
 801a206:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a208:	eba3 030e 	sub.w	r3, r3, lr
 801a20c:	eba2 020e 	sub.w	r2, r2, lr
 801a210:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a214:	7927      	ldrb	r7, [r4, #4]
 801a216:	4433      	add	r3, r6
 801a218:	4432      	add	r2, r6
 801a21a:	4c09      	ldr	r4, [pc, #36]	; (801a240 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a21c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a21e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a222:	a904      	add	r1, sp, #16
 801a224:	9404      	str	r4, [sp, #16]
 801a226:	f88d 7014 	strb.w	r7, [sp, #20]
 801a22a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a22e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a232:	6803      	ldr	r3, [r0, #0]
 801a234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a236:	4798      	blx	r3
 801a238:	b009      	add	sp, #36	; 0x24
 801a23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a23c:	0802d4a8 	.word	0x0802d4a8
 801a240:	0802d4bc 	.word	0x0802d4bc

0801a244 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a248:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801a24c:	b0a1      	sub	sp, #132	; 0x84
 801a24e:	4604      	mov	r4, r0
 801a250:	460d      	mov	r5, r1
 801a252:	790b      	ldrb	r3, [r1, #4]
 801a254:	f1b9 0f00 	cmp.w	r9, #0
 801a258:	d00f      	beq.n	801a27a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	f040 80a2 	bne.w	801a3a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a260:	b021      	add	sp, #132	; 0x84
 801a262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a266:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a26a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a26e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a272:	1d20      	adds	r0, r4, #4
 801a274:	f7fa fea0 	bl	8014fb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a278:	e094      	b.n	801a3a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d1f0      	bne.n	801a260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a27e:	4b5f      	ldr	r3, [pc, #380]	; (801a3fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801a286:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801a28a:	f1ba 0f03 	cmp.w	sl, #3
 801a28e:	ddea      	ble.n	801a266 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801a290:	f1ba 0f0c 	cmp.w	sl, #12
 801a294:	f04f 0303 	mov.w	r3, #3
 801a298:	f04f 0600 	mov.w	r6, #0
 801a29c:	4958      	ldr	r1, [pc, #352]	; (801a400 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801a29e:	bfd8      	it	le
 801a2a0:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801a2a4:	960a      	str	r6, [sp, #40]	; 0x28
 801a2a6:	bfd8      	it	le
 801a2a8:	fb92 f3f3 	sdivle	r3, r2, r3
 801a2ac:	9301      	str	r3, [sp, #4]
 801a2ae:	4b55      	ldr	r3, [pc, #340]	; (801a404 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801a2b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a2b4:	4b54      	ldr	r3, [pc, #336]	; (801a408 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801a2b6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a2ba:	2248      	movs	r2, #72	; 0x48
 801a2bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2c0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a2c4:	ab0e      	add	r3, sp, #56	; 0x38
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	f00b ff08 	bl	80260dc <memcpy>
 801a2cc:	f04f 32ff 	mov.w	r2, #4294967295
 801a2d0:	f8cd a008 	str.w	sl, [sp, #8]
 801a2d4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801a2d8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a2dc:	46b3      	mov	fp, r6
 801a2de:	fb93 f3f2 	sdiv	r3, r3, r2
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	9303      	str	r3, [sp, #12]
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	9a03      	ldr	r2, [sp, #12]
 801a2ea:	88ef      	ldrh	r7, [r5, #6]
 801a2ec:	a80a      	add	r0, sp, #40	; 0x28
 801a2ee:	9309      	str	r3, [sp, #36]	; 0x24
 801a2f0:	9b07      	ldr	r3, [sp, #28]
 801a2f2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a2f6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a2fa:	fb13 f302 	smulbb	r3, r3, r2
 801a2fe:	b29b      	uxth	r3, r3
 801a300:	9304      	str	r3, [sp, #16]
 801a302:	9b07      	ldr	r3, [sp, #28]
 801a304:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a308:	685b      	ldr	r3, [r3, #4]
 801a30a:	fb13 f302 	smulbb	r3, r3, r2
 801a30e:	b29b      	uxth	r3, r3
 801a310:	9305      	str	r3, [sp, #20]
 801a312:	9b04      	ldr	r3, [sp, #16]
 801a314:	441f      	add	r7, r3
 801a316:	9b05      	ldr	r3, [sp, #20]
 801a318:	4498      	add	r8, r3
 801a31a:	b23f      	sxth	r7, r7
 801a31c:	fa0f f888 	sxth.w	r8, r8
 801a320:	4639      	mov	r1, r7
 801a322:	4642      	mov	r2, r8
 801a324:	f7ff ff14 	bl	801a150 <_ZNK8touchgfx4Rect9intersectEss>
 801a328:	b380      	cbz	r0, 801a38c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a32a:	4639      	mov	r1, r7
 801a32c:	ab09      	add	r3, sp, #36	; 0x24
 801a32e:	4642      	mov	r2, r8
 801a330:	1d20      	adds	r0, r4, #4
 801a332:	f7fa fe41 	bl	8014fb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a336:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a338:	b341      	cbz	r1, 801a38c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a33a:	4549      	cmp	r1, r9
 801a33c:	d026      	beq.n	801a38c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a33e:	a80c      	add	r0, sp, #48	; 0x30
 801a340:	f7ff fd6e 	bl	8019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a344:	2002      	movs	r0, #2
 801a346:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a34a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a34e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a352:	fb92 f2f0 	sdiv	r2, r2, r0
 801a356:	440a      	add	r2, r1
 801a358:	1a99      	subs	r1, r3, r2
 801a35a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a35e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a362:	fb93 f3f0 	sdiv	r3, r3, r0
 801a366:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a36a:	4403      	add	r3, r0
 801a36c:	1ad3      	subs	r3, r2, r3
 801a36e:	9a06      	ldr	r2, [sp, #24]
 801a370:	435b      	muls	r3, r3
 801a372:	fb01 3301 	mla	r3, r1, r1, r3
 801a376:	4293      	cmp	r3, r2
 801a378:	d208      	bcs.n	801a38c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a37a:	9a04      	ldr	r2, [sp, #16]
 801a37c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a380:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a382:	9a05      	ldr	r2, [sp, #20]
 801a384:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a388:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a38a:	9306      	str	r3, [sp, #24]
 801a38c:	f10b 0b02 	add.w	fp, fp, #2
 801a390:	f1bb 0f08 	cmp.w	fp, #8
 801a394:	dda7      	ble.n	801a2e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a396:	9b02      	ldr	r3, [sp, #8]
 801a398:	3601      	adds	r6, #1
 801a39a:	4453      	add	r3, sl
 801a39c:	9302      	str	r3, [sp, #8]
 801a39e:	9b01      	ldr	r3, [sp, #4]
 801a3a0:	42b3      	cmp	r3, r6
 801a3a2:	d199      	bne.n	801a2d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a3a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a3a6:	2900      	cmp	r1, #0
 801a3a8:	f43f af5a 	beq.w	801a260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a3ac:	a80c      	add	r0, sp, #48	; 0x30
 801a3ae:	2600      	movs	r6, #0
 801a3b0:	f7ff fd36 	bl	8019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a3b4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a3b8:	88ea      	ldrh	r2, [r5, #6]
 801a3ba:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a3be:	1ad2      	subs	r2, r2, r3
 801a3c0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a3c2:	7929      	ldrb	r1, [r5, #4]
 801a3c4:	441a      	add	r2, r3
 801a3c6:	892b      	ldrh	r3, [r5, #8]
 801a3c8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a3cc:	a90e      	add	r1, sp, #56	; 0x38
 801a3ce:	1a1b      	subs	r3, r3, r0
 801a3d0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a3d2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a3d6:	4403      	add	r3, r0
 801a3d8:	480c      	ldr	r0, [pc, #48]	; (801a40c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a3da:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a3de:	900e      	str	r0, [sp, #56]	; 0x38
 801a3e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a3e2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a3e6:	6803      	ldr	r3, [r0, #0]
 801a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3ea:	4798      	blx	r3
 801a3ec:	792b      	ldrb	r3, [r5, #4]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	f43f af36 	beq.w	801a260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a3f4:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a3f8:	e732      	b.n	801a260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a3fa:	bf00      	nop
 801a3fc:	200566f8 	.word	0x200566f8
 801a400:	0802b404 	.word	0x0802b404
 801a404:	200566ec 	.word	0x200566ec
 801a408:	200566ee 	.word	0x200566ee
 801a40c:	0802d4a8 	.word	0x0802d4a8

0801a410 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a412:	4604      	mov	r4, r0
 801a414:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a418:	3201      	adds	r2, #1
 801a41a:	d112      	bne.n	801a442 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a41c:	2500      	movs	r5, #0
 801a41e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a422:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a426:	6803      	ldr	r3, [r0, #0]
 801a428:	9500      	str	r5, [sp, #0]
 801a42a:	466d      	mov	r5, sp
 801a42c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a430:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a434:	4629      	mov	r1, r5
 801a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a438:	4798      	blx	r3
 801a43a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a43e:	e884 0003 	stmia.w	r4, {r0, r1}
 801a442:	4620      	mov	r0, r4
 801a444:	b003      	add	sp, #12
 801a446:	bd30      	pop	{r4, r5, pc}

0801a448 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a448:	b513      	push	{r0, r1, r4, lr}
 801a44a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a44e:	4604      	mov	r4, r0
 801a450:	3301      	adds	r3, #1
 801a452:	d109      	bne.n	801a468 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a454:	4601      	mov	r1, r0
 801a456:	4668      	mov	r0, sp
 801a458:	f7ff fce2 	bl	8019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a45c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a460:	8423      	strh	r3, [r4, #32]
 801a462:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a466:	8463      	strh	r3, [r4, #34]	; 0x22
 801a468:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a46c:	b002      	add	sp, #8
 801a46e:	bd10      	pop	{r4, pc}

0801a470 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a470:	b513      	push	{r0, r1, r4, lr}
 801a472:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a476:	4604      	mov	r4, r0
 801a478:	3301      	adds	r3, #1
 801a47a:	d109      	bne.n	801a490 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a47c:	4601      	mov	r1, r0
 801a47e:	4668      	mov	r0, sp
 801a480:	f7ff fcce 	bl	8019e20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a484:	f8bd 3000 	ldrh.w	r3, [sp]
 801a488:	8423      	strh	r3, [r4, #32]
 801a48a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a48e:	8463      	strh	r3, [r4, #34]	; 0x22
 801a490:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a494:	b002      	add	sp, #8
 801a496:	bd10      	pop	{r4, pc}

0801a498 <_ZN8touchgfx6ScreenC1Ev>:
 801a498:	b570      	push	{r4, r5, r6, lr}
 801a49a:	4b17      	ldr	r3, [pc, #92]	; (801a4f8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a49c:	4605      	mov	r5, r0
 801a49e:	4a17      	ldr	r2, [pc, #92]	; (801a4fc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a4a0:	2101      	movs	r1, #1
 801a4a2:	f845 3b04 	str.w	r3, [r5], #4
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	6042      	str	r2, [r0, #4]
 801a4aa:	4604      	mov	r4, r0
 801a4ac:	8103      	strh	r3, [r0, #8]
 801a4ae:	8143      	strh	r3, [r0, #10]
 801a4b0:	8183      	strh	r3, [r0, #12]
 801a4b2:	81c3      	strh	r3, [r0, #14]
 801a4b4:	8203      	strh	r3, [r0, #16]
 801a4b6:	8243      	strh	r3, [r0, #18]
 801a4b8:	8283      	strh	r3, [r0, #20]
 801a4ba:	82c3      	strh	r3, [r0, #22]
 801a4bc:	6203      	str	r3, [r0, #32]
 801a4be:	8483      	strh	r3, [r0, #36]	; 0x24
 801a4c0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a4c2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a4c6:	6343      	str	r3, [r0, #52]	; 0x34
 801a4c8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a4cc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a4d0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a4d4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a4d8:	4b09      	ldr	r3, [pc, #36]	; (801a500 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a4da:	4628      	mov	r0, r5
 801a4dc:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a4e0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801a4e2:	4a08      	ldr	r2, [pc, #32]	; (801a504 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a4e4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a4e8:	4798      	blx	r3
 801a4ea:	6863      	ldr	r3, [r4, #4]
 801a4ec:	4628      	mov	r0, r5
 801a4ee:	4631      	mov	r1, r6
 801a4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4f2:	4798      	blx	r3
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	bd70      	pop	{r4, r5, r6, pc}
 801a4f8:	0802d4e4 	.word	0x0802d4e4
 801a4fc:	0802c104 	.word	0x0802c104
 801a500:	200566ee 	.word	0x200566ee
 801a504:	200566ec 	.word	0x200566ec

0801a508 <_ZN8touchgfx6Screen4drawEv>:
 801a508:	4b09      	ldr	r3, [pc, #36]	; (801a530 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a50a:	b507      	push	{r0, r1, r2, lr}
 801a50c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a510:	2100      	movs	r1, #0
 801a512:	4b08      	ldr	r3, [pc, #32]	; (801a534 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a514:	9100      	str	r1, [sp, #0]
 801a516:	4669      	mov	r1, sp
 801a518:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a51c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a520:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a524:	6803      	ldr	r3, [r0, #0]
 801a526:	689b      	ldr	r3, [r3, #8]
 801a528:	4798      	blx	r3
 801a52a:	b003      	add	sp, #12
 801a52c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a530:	200566ec 	.word	0x200566ec
 801a534:	200566ee 	.word	0x200566ee

0801a538 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a53c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a540:	b089      	sub	sp, #36	; 0x24
 801a542:	4680      	mov	r8, r0
 801a544:	460c      	mov	r4, r1
 801a546:	2b00      	cmp	r3, #0
 801a548:	4615      	mov	r5, r2
 801a54a:	dd0e      	ble.n	801a56a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a54c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a550:	2b00      	cmp	r3, #0
 801a552:	dd0a      	ble.n	801a56a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a554:	4628      	mov	r0, r5
 801a556:	f7ff ff5b 	bl	801a410 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a55a:	4621      	mov	r1, r4
 801a55c:	f7fb ffea 	bl	8016534 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a560:	69eb      	ldr	r3, [r5, #28]
 801a562:	b928      	cbnz	r0, 801a570 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a564:	461d      	mov	r5, r3
 801a566:	2b00      	cmp	r3, #0
 801a568:	d1f4      	bne.n	801a554 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a56a:	b009      	add	sp, #36	; 0x24
 801a56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a570:	ae04      	add	r6, sp, #16
 801a572:	2b00      	cmp	r3, #0
 801a574:	f000 80b5 	beq.w	801a6e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a578:	682b      	ldr	r3, [r5, #0]
 801a57a:	4629      	mov	r1, r5
 801a57c:	a802      	add	r0, sp, #8
 801a57e:	68db      	ldr	r3, [r3, #12]
 801a580:	4798      	blx	r3
 801a582:	4628      	mov	r0, r5
 801a584:	f7ff ff60 	bl	801a448 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a588:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a58c:	4407      	add	r7, r0
 801a58e:	4628      	mov	r0, r5
 801a590:	f7ff ff6e 	bl	801a470 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a594:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a598:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a59c:	b23f      	sxth	r7, r7
 801a59e:	4418      	add	r0, r3
 801a5a0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a5a4:	4621      	mov	r1, r4
 801a5a6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a5aa:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a5ae:	4630      	mov	r0, r6
 801a5b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5b4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a5b8:	f7fa fdb0 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 801a5bc:	4628      	mov	r0, r5
 801a5be:	f7ff ff27 	bl	801a410 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a5c2:	ab06      	add	r3, sp, #24
 801a5c4:	4602      	mov	r2, r0
 801a5c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a5ca:	e883 0003 	stmia.w	r3, {r0, r1}
 801a5ce:	4611      	mov	r1, r2
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	f7fa fda3 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 801a5d6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a5da:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a5de:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a5e2:	4299      	cmp	r1, r3
 801a5e4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a5e8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a5ec:	d10b      	bne.n	801a606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a5ee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a5f2:	4552      	cmp	r2, sl
 801a5f4:	d107      	bne.n	801a606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a5f6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a5fa:	455a      	cmp	r2, fp
 801a5fc:	d103      	bne.n	801a606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a5fe:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a602:	454a      	cmp	r2, r9
 801a604:	d06d      	beq.n	801a6e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a606:	f1bb 0f00 	cmp.w	fp, #0
 801a60a:	dd65      	ble.n	801a6d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a60c:	f1b9 0f00 	cmp.w	r9, #0
 801a610:	dd62      	ble.n	801a6d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a612:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a616:	fa1f f08a 	uxth.w	r0, sl
 801a61a:	4552      	cmp	r2, sl
 801a61c:	9000      	str	r0, [sp, #0]
 801a61e:	da12      	bge.n	801a646 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a620:	9301      	str	r3, [sp, #4]
 801a622:	9b00      	ldr	r3, [sp, #0]
 801a624:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a628:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a62c:	1a9a      	subs	r2, r3, r2
 801a62e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a632:	4631      	mov	r1, r6
 801a634:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a638:	4640      	mov	r0, r8
 801a63a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a63e:	69ea      	ldr	r2, [r5, #28]
 801a640:	f7ff ff7a 	bl	801a538 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a644:	9b01      	ldr	r3, [sp, #4]
 801a646:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a64a:	b29f      	uxth	r7, r3
 801a64c:	429a      	cmp	r2, r3
 801a64e:	da0d      	bge.n	801a66c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a650:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a654:	1aba      	subs	r2, r7, r2
 801a656:	f8ad a012 	strh.w	sl, [sp, #18]
 801a65a:	4631      	mov	r1, r6
 801a65c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a660:	4640      	mov	r0, r8
 801a662:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a666:	69ea      	ldr	r2, [r5, #28]
 801a668:	f7ff ff66 	bl	801a538 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a66c:	8822      	ldrh	r2, [r4, #0]
 801a66e:	445f      	add	r7, fp
 801a670:	88a3      	ldrh	r3, [r4, #4]
 801a672:	b2bf      	uxth	r7, r7
 801a674:	4413      	add	r3, r2
 801a676:	b23a      	sxth	r2, r7
 801a678:	b29b      	uxth	r3, r3
 801a67a:	b219      	sxth	r1, r3
 801a67c:	4291      	cmp	r1, r2
 801a67e:	dd0d      	ble.n	801a69c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a680:	1bdb      	subs	r3, r3, r7
 801a682:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a686:	f8ad a012 	strh.w	sl, [sp, #18]
 801a68a:	4631      	mov	r1, r6
 801a68c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a690:	4640      	mov	r0, r8
 801a692:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a696:	69ea      	ldr	r2, [r5, #28]
 801a698:	f7ff ff4e 	bl	801a538 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a69c:	88e2      	ldrh	r2, [r4, #6]
 801a69e:	8863      	ldrh	r3, [r4, #2]
 801a6a0:	4413      	add	r3, r2
 801a6a2:	9a00      	ldr	r2, [sp, #0]
 801a6a4:	444a      	add	r2, r9
 801a6a6:	b29b      	uxth	r3, r3
 801a6a8:	fa1f f982 	uxth.w	r9, r2
 801a6ac:	b219      	sxth	r1, r3
 801a6ae:	fa0f f289 	sxth.w	r2, r9
 801a6b2:	428a      	cmp	r2, r1
 801a6b4:	da15      	bge.n	801a6e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a6b6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a6ba:	eba3 0309 	sub.w	r3, r3, r9
 801a6be:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a6c2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a6c6:	4631      	mov	r1, r6
 801a6c8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a6cc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a6d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a6d4:	69ea      	ldr	r2, [r5, #28]
 801a6d6:	e001      	b.n	801a6dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a6d8:	69ea      	ldr	r2, [r5, #28]
 801a6da:	4621      	mov	r1, r4
 801a6dc:	4640      	mov	r0, r8
 801a6de:	f7ff ff2b 	bl	801a538 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a6e2:	4628      	mov	r0, r5
 801a6e4:	f7ff fe94 	bl	801a410 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a6e8:	6861      	ldr	r1, [r4, #4]
 801a6ea:	4602      	mov	r2, r0
 801a6ec:	4633      	mov	r3, r6
 801a6ee:	6820      	ldr	r0, [r4, #0]
 801a6f0:	c303      	stmia	r3!, {r0, r1}
 801a6f2:	4611      	mov	r1, r2
 801a6f4:	4630      	mov	r0, r6
 801a6f6:	f7fa fd11 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 801a6fa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	f77f af33 	ble.w	801a56a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a704:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	f77f af2e 	ble.w	801a56a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a70e:	4628      	mov	r0, r5
 801a710:	f7ff fe9a 	bl	801a448 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a714:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a718:	1a18      	subs	r0, r3, r0
 801a71a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a71e:	4628      	mov	r0, r5
 801a720:	f7ff fea6 	bl	801a470 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a724:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a728:	4631      	mov	r1, r6
 801a72a:	1a18      	subs	r0, r3, r0
 801a72c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a730:	4628      	mov	r0, r5
 801a732:	682b      	ldr	r3, [r5, #0]
 801a734:	689b      	ldr	r3, [r3, #8]
 801a736:	4798      	blx	r3
 801a738:	e717      	b.n	801a56a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a73a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a73a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a73c:	2300      	movs	r3, #0
 801a73e:	aa02      	add	r2, sp, #8
 801a740:	4604      	mov	r4, r0
 801a742:	3004      	adds	r0, #4
 801a744:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a748:	460d      	mov	r5, r1
 801a74a:	f7fa fdbf 	bl	80152cc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a74e:	9a01      	ldr	r2, [sp, #4]
 801a750:	b11a      	cbz	r2, 801a75a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a752:	4629      	mov	r1, r5
 801a754:	4620      	mov	r0, r4
 801a756:	f7ff feef 	bl	801a538 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a75a:	b003      	add	sp, #12
 801a75c:	bd30      	pop	{r4, r5, pc}

0801a75e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a75e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a760:	4602      	mov	r2, r0
 801a762:	4604      	mov	r4, r0
 801a764:	460d      	mov	r5, r1
 801a766:	466b      	mov	r3, sp
 801a768:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a76c:	6851      	ldr	r1, [r2, #4]
 801a76e:	c303      	stmia	r3!, {r0, r1}
 801a770:	4629      	mov	r1, r5
 801a772:	4668      	mov	r0, sp
 801a774:	f7fa fcd2 	bl	801511c <_ZN8touchgfx4RectaNERKS0_>
 801a778:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a77c:	4669      	mov	r1, sp
 801a77e:	b123      	cbz	r3, 801a78a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a780:	4620      	mov	r0, r4
 801a782:	f7ff ffda 	bl	801a73a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a786:	b003      	add	sp, #12
 801a788:	bd30      	pop	{r4, r5, pc}
 801a78a:	1d20      	adds	r0, r4, #4
 801a78c:	f7fa fd65 	bl	801525a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a790:	e7f9      	b.n	801a786 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a792 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a792:	460b      	mov	r3, r1
 801a794:	680a      	ldr	r2, [r1, #0]
 801a796:	1d01      	adds	r1, r0, #4
 801a798:	6992      	ldr	r2, [r2, #24]
 801a79a:	4618      	mov	r0, r3
 801a79c:	4710      	bx	r2

0801a79e <_ZN8touchgfx12TextProviderC1Ev>:
 801a79e:	b538      	push	{r3, r4, r5, lr}
 801a7a0:	2500      	movs	r5, #0
 801a7a2:	4604      	mov	r4, r0
 801a7a4:	220e      	movs	r2, #14
 801a7a6:	7405      	strb	r5, [r0, #16]
 801a7a8:	4629      	mov	r1, r5
 801a7aa:	82c5      	strh	r5, [r0, #22]
 801a7ac:	8305      	strh	r5, [r0, #24]
 801a7ae:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801a7b0:	8605      	strh	r5, [r0, #48]	; 0x30
 801a7b2:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a7b4:	8705      	strh	r5, [r0, #56]	; 0x38
 801a7b6:	e9c0 5500 	strd	r5, r5, [r0]
 801a7ba:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801a7be:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 801a7c2:	3044      	adds	r0, #68	; 0x44
 801a7c4:	f00b fc98 	bl	80260f8 <memset>
 801a7c8:	2301      	movs	r3, #1
 801a7ca:	4620      	mov	r0, r4
 801a7cc:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801a7d0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801a7d4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801a7d8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801a7dc:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801a7e0:	f7ee f870 	bl	80088c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a7e4:	4620      	mov	r0, r4
 801a7e6:	bd38      	pop	{r3, r4, r5, pc}

0801a7e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a7e8:	b530      	push	{r4, r5, lr}
 801a7ea:	2500      	movs	r5, #0
 801a7ec:	2401      	movs	r4, #1
 801a7ee:	6843      	ldr	r3, [r0, #4]
 801a7f0:	b913      	cbnz	r3, 801a7f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a7f2:	6803      	ldr	r3, [r0, #0]
 801a7f4:	b1f3      	cbz	r3, 801a834 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a7f6:	6043      	str	r3, [r0, #4]
 801a7f8:	7c03      	ldrb	r3, [r0, #16]
 801a7fa:	b143      	cbz	r3, 801a80e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a7fc:	68c3      	ldr	r3, [r0, #12]
 801a7fe:	b12b      	cbz	r3, 801a80c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a800:	881a      	ldrh	r2, [r3, #0]
 801a802:	b11a      	cbz	r2, 801a80c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a804:	1c9a      	adds	r2, r3, #2
 801a806:	60c2      	str	r2, [r0, #12]
 801a808:	8818      	ldrh	r0, [r3, #0]
 801a80a:	bd30      	pop	{r4, r5, pc}
 801a80c:	7405      	strb	r5, [r0, #16]
 801a80e:	6843      	ldr	r3, [r0, #4]
 801a810:	8819      	ldrh	r1, [r3, #0]
 801a812:	b179      	cbz	r1, 801a834 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a814:	1c9a      	adds	r2, r3, #2
 801a816:	2902      	cmp	r1, #2
 801a818:	6042      	str	r2, [r0, #4]
 801a81a:	d1f5      	bne.n	801a808 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a81c:	6883      	ldr	r3, [r0, #8]
 801a81e:	1d1a      	adds	r2, r3, #4
 801a820:	6082      	str	r2, [r0, #8]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	60c3      	str	r3, [r0, #12]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d0e1      	beq.n	801a7ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a82a:	881b      	ldrh	r3, [r3, #0]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d0de      	beq.n	801a7ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a830:	7404      	strb	r4, [r0, #16]
 801a832:	e7dc      	b.n	801a7ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a834:	2000      	movs	r0, #0
 801a836:	e7e8      	b.n	801a80a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a838 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a838:	b410      	push	{r4}
 801a83a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a83c:	9b01      	ldr	r3, [sp, #4]
 801a83e:	6082      	str	r2, [r0, #8]
 801a840:	6403      	str	r3, [r0, #64]	; 0x40
 801a842:	2300      	movs	r3, #0
 801a844:	6001      	str	r1, [r0, #0]
 801a846:	6043      	str	r3, [r0, #4]
 801a848:	60c3      	str	r3, [r0, #12]
 801a84a:	7403      	strb	r3, [r0, #16]
 801a84c:	8603      	strh	r3, [r0, #48]	; 0x30
 801a84e:	8303      	strh	r3, [r0, #24]
 801a850:	8703      	strh	r3, [r0, #56]	; 0x38
 801a852:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a856:	f7ee b835 	b.w	80088c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a85a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a85a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a85c:	4605      	mov	r5, r0
 801a85e:	4608      	mov	r0, r1
 801a860:	b1f1      	cbz	r1, 801a8a0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a862:	f105 0444 	add.w	r4, r5, #68	; 0x44
 801a866:	460b      	mov	r3, r1
 801a868:	f101 0708 	add.w	r7, r1, #8
 801a86c:	4622      	mov	r2, r4
 801a86e:	6818      	ldr	r0, [r3, #0]
 801a870:	3308      	adds	r3, #8
 801a872:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a876:	4626      	mov	r6, r4
 801a878:	42bb      	cmp	r3, r7
 801a87a:	c603      	stmia	r6!, {r0, r1}
 801a87c:	4634      	mov	r4, r6
 801a87e:	d1f6      	bne.n	801a86e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a880:	6818      	ldr	r0, [r3, #0]
 801a882:	6030      	str	r0, [r6, #0]
 801a884:	4610      	mov	r0, r2
 801a886:	889b      	ldrh	r3, [r3, #4]
 801a888:	80b3      	strh	r3, [r6, #4]
 801a88a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801a88e:	015b      	lsls	r3, r3, #5
 801a890:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a894:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 801a898:	430b      	orrs	r3, r1
 801a89a:	425b      	negs	r3, r3
 801a89c:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 801a8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a8a2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a8a2:	b538      	push	{r3, r4, r5, lr}
 801a8a4:	460c      	mov	r4, r1
 801a8a6:	6811      	ldr	r1, [r2, #0]
 801a8a8:	4610      	mov	r0, r2
 801a8aa:	68cd      	ldr	r5, [r1, #12]
 801a8ac:	4619      	mov	r1, r3
 801a8ae:	47a8      	blx	r5
 801a8b0:	2800      	cmp	r0, #0
 801a8b2:	bf08      	it	eq
 801a8b4:	4620      	moveq	r0, r4
 801a8b6:	bd38      	pop	{r3, r4, r5, pc}

0801a8b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8ba:	4604      	mov	r4, r0
 801a8bc:	4615      	mov	r5, r2
 801a8be:	4608      	mov	r0, r1
 801a8c0:	b93a      	cbnz	r2, 801a8d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a8c2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a8c6:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 801a8ca:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8d2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a8d6:	8893      	ldrh	r3, [r2, #4]
 801a8d8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a8dc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a8e0:	79ee      	ldrb	r6, [r5, #7]
 801a8e2:	4316      	orrs	r6, r2
 801a8e4:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801a8e8:	189a      	adds	r2, r3, r2
 801a8ea:	b2b7      	uxth	r7, r6
 801a8ec:	b291      	uxth	r1, r2
 801a8ee:	291d      	cmp	r1, #29
 801a8f0:	f200 8084 	bhi.w	801a9fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a8f4:	2201      	movs	r2, #1
 801a8f6:	10f6      	asrs	r6, r6, #3
 801a8f8:	408a      	lsls	r2, r1
 801a8fa:	4978      	ldr	r1, [pc, #480]	; (801aadc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801a8fc:	420a      	tst	r2, r1
 801a8fe:	d12e      	bne.n	801a95e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a900:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a904:	d07a      	beq.n	801a9fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a906:	f104 0244 	add.w	r2, r4, #68	; 0x44
 801a90a:	462b      	mov	r3, r5
 801a90c:	f105 0e08 	add.w	lr, r5, #8
 801a910:	4615      	mov	r5, r2
 801a912:	6818      	ldr	r0, [r3, #0]
 801a914:	3308      	adds	r3, #8
 801a916:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a91a:	4694      	mov	ip, r2
 801a91c:	4573      	cmp	r3, lr
 801a91e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a922:	4662      	mov	r2, ip
 801a924:	d1f5      	bne.n	801a912 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801a926:	6818      	ldr	r0, [r3, #0]
 801a928:	f8cc 0000 	str.w	r0, [ip]
 801a92c:	889b      	ldrh	r3, [r3, #4]
 801a92e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a932:	b2b3      	uxth	r3, r6
 801a934:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 801a938:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 801a93c:	1aca      	subs	r2, r1, r3
 801a93e:	1bcf      	subs	r7, r1, r7
 801a940:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a944:	b292      	uxth	r2, r2
 801a946:	1afb      	subs	r3, r7, r3
 801a948:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 801a94c:	10d2      	asrs	r2, r2, #3
 801a94e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a952:	4302      	orrs	r2, r0
 801a954:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 801a958:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801a95c:	e7b7      	b.n	801a8ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a95e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a960:	b92b      	cbnz	r3, 801a96e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801a962:	4b5f      	ldr	r3, [pc, #380]	; (801aae0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801a964:	21bf      	movs	r1, #191	; 0xbf
 801a966:	4a5f      	ldr	r2, [pc, #380]	; (801aae4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801a968:	485f      	ldr	r0, [pc, #380]	; (801aae8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801a96a:	f00b fb39 	bl	8025fe0 <__assert_func>
 801a96e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a970:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a974:	8b59      	ldrh	r1, [r3, #26]
 801a976:	f640 6333 	movw	r3, #3635	; 0xe33
 801a97a:	4299      	cmp	r1, r3
 801a97c:	d110      	bne.n	801a9a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801a97e:	6803      	ldr	r3, [r0, #0]
 801a980:	68db      	ldr	r3, [r3, #12]
 801a982:	4798      	blx	r3
 801a984:	7b41      	ldrb	r1, [r0, #13]
 801a986:	00cb      	lsls	r3, r1, #3
 801a988:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a98c:	7a03      	ldrb	r3, [r0, #8]
 801a98e:	0648      	lsls	r0, r1, #25
 801a990:	ea43 0302 	orr.w	r3, r3, r2
 801a994:	bf44      	itt	mi
 801a996:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a99a:	b21b      	sxthmi	r3, r3
 801a99c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a9a0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801a9a4:	462a      	mov	r2, r5
 801a9a6:	f105 0c08 	add.w	ip, r5, #8
 801a9aa:	443b      	add	r3, r7
 801a9ac:	4433      	add	r3, r6
 801a9ae:	f104 0644 	add.w	r6, r4, #68	; 0x44
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	4635      	mov	r5, r6
 801a9b6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a9ba:	6810      	ldr	r0, [r2, #0]
 801a9bc:	3208      	adds	r2, #8
 801a9be:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a9c2:	4637      	mov	r7, r6
 801a9c4:	4562      	cmp	r2, ip
 801a9c6:	c703      	stmia	r7!, {r0, r1}
 801a9c8:	463e      	mov	r6, r7
 801a9ca:	d1f6      	bne.n	801a9ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801a9cc:	6810      	ldr	r0, [r2, #0]
 801a9ce:	6038      	str	r0, [r7, #0]
 801a9d0:	8892      	ldrh	r2, [r2, #4]
 801a9d2:	80ba      	strh	r2, [r7, #4]
 801a9d4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801a9d8:	10db      	asrs	r3, r3, #3
 801a9da:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801a9de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a9e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a9e6:	4313      	orrs	r3, r2
 801a9e8:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801a9ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801a9f0:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 801a9f4:	1a9b      	subs	r3, r3, r2
 801a9f6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801a9fa:	e768      	b.n	801a8ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a9fc:	f023 0204 	bic.w	r2, r3, #4
 801aa00:	f640 611b 	movw	r1, #3611	; 0xe1b
 801aa04:	428a      	cmp	r2, r1
 801aa06:	d003      	beq.n	801aa10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801aa08:	f640 621d 	movw	r2, #3613	; 0xe1d
 801aa0c:	4293      	cmp	r3, r2
 801aa0e:	d120      	bne.n	801aa52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801aa10:	3b01      	subs	r3, #1
 801aa12:	4602      	mov	r2, r0
 801aa14:	4629      	mov	r1, r5
 801aa16:	4620      	mov	r0, r4
 801aa18:	b29b      	uxth	r3, r3
 801aa1a:	f7ff ff42 	bl	801a8a2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801aa1e:	7b41      	ldrb	r1, [r0, #13]
 801aa20:	00cb      	lsls	r3, r1, #3
 801aa22:	0649      	lsls	r1, r1, #25
 801aa24:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aa28:	7a03      	ldrb	r3, [r0, #8]
 801aa2a:	ea43 0302 	orr.w	r3, r3, r2
 801aa2e:	bf44      	itt	mi
 801aa30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa34:	b21b      	sxthmi	r3, r3
 801aa36:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801aa3a:	7b6b      	ldrb	r3, [r5, #13]
 801aa3c:	7aaa      	ldrb	r2, [r5, #10]
 801aa3e:	005b      	lsls	r3, r3, #1
 801aa40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aa44:	4313      	orrs	r3, r2
 801aa46:	115a      	asrs	r2, r3, #5
 801aa48:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801aa4c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801aa50:	e035      	b.n	801aabe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801aa52:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801aa56:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801aa5a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801aa5e:	7a2a      	ldrb	r2, [r5, #8]
 801aa60:	ea42 0201 	orr.w	r2, r2, r1
 801aa64:	f640 6109 	movw	r1, #3593	; 0xe09
 801aa68:	bf1c      	itt	ne
 801aa6a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801aa6e:	b212      	sxthne	r2, r2
 801aa70:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801aa74:	f023 0210 	bic.w	r2, r3, #16
 801aa78:	428a      	cmp	r2, r1
 801aa7a:	d003      	beq.n	801aa84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801aa7c:	f640 6213 	movw	r2, #3603	; 0xe13
 801aa80:	4293      	cmp	r3, r2
 801aa82:	d129      	bne.n	801aad8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801aa84:	7b6e      	ldrb	r6, [r5, #13]
 801aa86:	4629      	mov	r1, r5
 801aa88:	0076      	lsls	r6, r6, #1
 801aa8a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801aa8e:	7aae      	ldrb	r6, [r5, #10]
 801aa90:	4316      	orrs	r6, r2
 801aa92:	f640 6213 	movw	r2, #3603	; 0xe13
 801aa96:	4293      	cmp	r3, r2
 801aa98:	4602      	mov	r2, r0
 801aa9a:	4620      	mov	r0, r4
 801aa9c:	bf16      	itet	ne
 801aa9e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801aaa2:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801aaa6:	b29b      	uxthne	r3, r3
 801aaa8:	f7ff fefb 	bl	801a8a2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801aaac:	7b43      	ldrb	r3, [r0, #13]
 801aaae:	7a82      	ldrb	r2, [r0, #10]
 801aab0:	005b      	lsls	r3, r3, #1
 801aab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aab6:	4313      	orrs	r3, r2
 801aab8:	1af6      	subs	r6, r6, r3
 801aaba:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 801aabe:	7b69      	ldrb	r1, [r5, #13]
 801aac0:	00cb      	lsls	r3, r1, #3
 801aac2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aac6:	7a2b      	ldrb	r3, [r5, #8]
 801aac8:	4313      	orrs	r3, r2
 801aaca:	064a      	lsls	r2, r1, #25
 801aacc:	bf44      	itt	mi
 801aace:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aad2:	b21b      	sxthmi	r3, r3
 801aad4:	1bdb      	subs	r3, r3, r7
 801aad6:	e73f      	b.n	801a958 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801aad8:	2300      	movs	r3, #0
 801aada:	e7b7      	b.n	801aa4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801aadc:	3fc00079 	.word	0x3fc00079
 801aae0:	0802d510 	.word	0x0802d510
 801aae4:	0802d782 	.word	0x0802d782
 801aae8:	0802d519 	.word	0x0802d519

0801aaec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801aaec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aaf0:	4604      	mov	r4, r0
 801aaf2:	b942      	cbnz	r2, 801ab06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801aaf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801aaf8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801aafc:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 801ab00:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801ab04:	e046      	b.n	801ab94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801ab06:	7b51      	ldrb	r1, [r2, #13]
 801ab08:	8893      	ldrh	r3, [r2, #4]
 801ab0a:	010f      	lsls	r7, r1, #4
 801ab0c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ab10:	79d7      	ldrb	r7, [r2, #7]
 801ab12:	4307      	orrs	r7, r0
 801ab14:	2f04      	cmp	r7, #4
 801ab16:	b2bd      	uxth	r5, r7
 801ab18:	bfcc      	ite	gt
 801ab1a:	08bf      	lsrgt	r7, r7, #2
 801ab1c:	2701      	movle	r7, #1
 801ab1e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801ab22:	f200 80ab 	bhi.w	801ac7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801ab26:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ab2a:	4283      	cmp	r3, r0
 801ab2c:	d216      	bcs.n	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab2e:	f240 605b 	movw	r0, #1627	; 0x65b
 801ab32:	4283      	cmp	r3, r0
 801ab34:	d859      	bhi.n	801abea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801ab36:	f240 6057 	movw	r0, #1623	; 0x657
 801ab3a:	4283      	cmp	r3, r0
 801ab3c:	d20e      	bcs.n	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab3e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ab42:	d24a      	bcs.n	801abda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801ab44:	f240 604e 	movw	r0, #1614	; 0x64e
 801ab48:	4283      	cmp	r3, r0
 801ab4a:	d207      	bcs.n	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab4c:	f240 601a 	movw	r0, #1562	; 0x61a
 801ab50:	4283      	cmp	r3, r0
 801ab52:	d02a      	beq.n	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab54:	d821      	bhi.n	801ab9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801ab56:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801ab5a:	d35b      	bcc.n	801ac14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ab5c:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 801ab60:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ab64:	f040 80d0 	bne.w	801ad08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801ab68:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 801ab6c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ab70:	f040 80ca 	bne.w	801ad08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801ab74:	00cb      	lsls	r3, r1, #3
 801ab76:	0649      	lsls	r1, r1, #25
 801ab78:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ab7c:	7a13      	ldrb	r3, [r2, #8]
 801ab7e:	ea43 0300 	orr.w	r3, r3, r0
 801ab82:	bf44      	itt	mi
 801ab84:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ab88:	b21b      	sxthmi	r3, r3
 801ab8a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801ab8e:	1b5d      	subs	r5, r3, r5
 801ab90:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801ab94:	4610      	mov	r0, r2
 801ab96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab9a:	f240 604b 	movw	r0, #1611	; 0x64b
 801ab9e:	4283      	cmp	r3, r0
 801aba0:	d338      	bcc.n	801ac14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aba2:	f240 604c 	movw	r0, #1612	; 0x64c
 801aba6:	4283      	cmp	r3, r0
 801aba8:	d9d8      	bls.n	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abaa:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801abae:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801abb2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801abb6:	f040 80f2 	bne.w	801ad9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801abba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801abbe:	f040 80ee 	bne.w	801ad9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801abc2:	00cb      	lsls	r3, r1, #3
 801abc4:	064e      	lsls	r6, r1, #25
 801abc6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801abca:	7a13      	ldrb	r3, [r2, #8]
 801abcc:	ea43 0300 	orr.w	r3, r3, r0
 801abd0:	bf44      	itt	mi
 801abd2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801abd6:	b21b      	sxthmi	r3, r3
 801abd8:	e7d9      	b.n	801ab8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801abda:	f240 6054 	movw	r0, #1620	; 0x654
 801abde:	4283      	cmp	r3, r0
 801abe0:	d8e3      	bhi.n	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abe2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801abe6:	d9e0      	bls.n	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abe8:	e7b8      	b.n	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abea:	f240 6074 	movw	r0, #1652	; 0x674
 801abee:	4283      	cmp	r3, r0
 801abf0:	d0b4      	beq.n	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abf2:	d82d      	bhi.n	801ac50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801abf4:	f240 605e 	movw	r0, #1630	; 0x65e
 801abf8:	4283      	cmp	r3, r0
 801abfa:	d804      	bhi.n	801ac06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801abfc:	f240 605d 	movw	r0, #1629	; 0x65d
 801ac00:	4283      	cmp	r3, r0
 801ac02:	d3d2      	bcc.n	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac04:	e7aa      	b.n	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac06:	f240 605f 	movw	r0, #1631	; 0x65f
 801ac0a:	4283      	cmp	r3, r0
 801ac0c:	d0cd      	beq.n	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac0e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801ac12:	d0a3      	beq.n	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac14:	00cb      	lsls	r3, r1, #3
 801ac16:	0649      	lsls	r1, r1, #25
 801ac18:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ac1c:	7a13      	ldrb	r3, [r2, #8]
 801ac1e:	ea43 0300 	orr.w	r3, r3, r0
 801ac22:	bf44      	itt	mi
 801ac24:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac28:	b21b      	sxthmi	r3, r3
 801ac2a:	1b5d      	subs	r5, r3, r5
 801ac2c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801ac30:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801ac34:	7b53      	ldrb	r3, [r2, #13]
 801ac36:	015b      	lsls	r3, r3, #5
 801ac38:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ac3c:	7993      	ldrb	r3, [r2, #6]
 801ac3e:	430b      	orrs	r3, r1
 801ac40:	2105      	movs	r1, #5
 801ac42:	005b      	lsls	r3, r3, #1
 801ac44:	fb93 f3f1 	sdiv	r3, r3, r1
 801ac48:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ac4c:	440b      	add	r3, r1
 801ac4e:	e757      	b.n	801ab00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ac50:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ac54:	4283      	cmp	r3, r0
 801ac56:	d809      	bhi.n	801ac6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801ac58:	f240 60df 	movw	r0, #1759	; 0x6df
 801ac5c:	4283      	cmp	r3, r0
 801ac5e:	f4bf af7d 	bcs.w	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac62:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ac66:	2b05      	cmp	r3, #5
 801ac68:	d8d4      	bhi.n	801ac14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ac6a:	e777      	b.n	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac6c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ac70:	4283      	cmp	r3, r0
 801ac72:	d09a      	beq.n	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac74:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ac78:	4283      	cmp	r3, r0
 801ac7a:	e7ca      	b.n	801ac12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801ac7c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ac80:	d22b      	bcs.n	801acda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801ac82:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ac86:	4283      	cmp	r3, r0
 801ac88:	d28f      	bcs.n	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac8a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ac8e:	4283      	cmp	r3, r0
 801ac90:	d816      	bhi.n	801acc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801ac92:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ac96:	4283      	cmp	r3, r0
 801ac98:	f4bf af60 	bcs.w	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac9c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801aca0:	4283      	cmp	r3, r0
 801aca2:	d80a      	bhi.n	801acba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801aca4:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801aca8:	4283      	cmp	r3, r0
 801acaa:	f4bf af57 	bcs.w	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801acae:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801acb2:	4283      	cmp	r3, r0
 801acb4:	f43f af79 	beq.w	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801acb8:	e7ac      	b.n	801ac14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801acba:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801acbe:	e7f8      	b.n	801acb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801acc0:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801acc4:	4283      	cmp	r3, r0
 801acc6:	d802      	bhi.n	801acce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801acc8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801accc:	e798      	b.n	801ac00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801acce:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801acd2:	4283      	cmp	r3, r0
 801acd4:	f47f af42 	bne.w	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801acd8:	e767      	b.n	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801acda:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801acde:	4283      	cmp	r3, r0
 801ace0:	f43f af63 	beq.w	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ace4:	d802      	bhi.n	801acec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801ace6:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801acea:	e7f2      	b.n	801acd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801acec:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801acf0:	4283      	cmp	r3, r0
 801acf2:	d805      	bhi.n	801ad00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801acf4:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801acf8:	4283      	cmp	r3, r0
 801acfa:	f4ff af2f 	bcc.w	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801acfe:	e754      	b.n	801abaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ad00:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ad04:	4283      	cmp	r3, r0
 801ad06:	e7af      	b.n	801ac68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801ad08:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 801ad0c:	4617      	mov	r7, r2
 801ad0e:	f102 0808 	add.w	r8, r2, #8
 801ad12:	4666      	mov	r6, ip
 801ad14:	6838      	ldr	r0, [r7, #0]
 801ad16:	3708      	adds	r7, #8
 801ad18:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ad1c:	46e6      	mov	lr, ip
 801ad1e:	4547      	cmp	r7, r8
 801ad20:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ad24:	46f4      	mov	ip, lr
 801ad26:	d1f5      	bne.n	801ad14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801ad28:	6838      	ldr	r0, [r7, #0]
 801ad2a:	f8ce 0000 	str.w	r0, [lr]
 801ad2e:	88b9      	ldrh	r1, [r7, #4]
 801ad30:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ad34:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801ad38:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ad3c:	d009      	beq.n	801ad52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ad3e:	7b51      	ldrb	r1, [r2, #13]
 801ad40:	7992      	ldrb	r2, [r2, #6]
 801ad42:	0149      	lsls	r1, r1, #5
 801ad44:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ad48:	4311      	orrs	r1, r2
 801ad4a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ad4e:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801ad52:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ad56:	d00d      	beq.n	801ad74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801ad58:	442b      	add	r3, r5
 801ad5a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801ad5e:	b29b      	uxth	r3, r3
 801ad60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ad64:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801ad68:	10db      	asrs	r3, r3, #3
 801ad6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ad6e:	4313      	orrs	r3, r2
 801ad70:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801ad74:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801ad78:	00cb      	lsls	r3, r1, #3
 801ad7a:	064f      	lsls	r7, r1, #25
 801ad7c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ad80:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801ad84:	ea43 0302 	orr.w	r3, r3, r2
 801ad88:	bf44      	itt	mi
 801ad8a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ad8e:	b21b      	sxthmi	r3, r3
 801ad90:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801ad94:	1b5d      	subs	r5, r3, r5
 801ad96:	4632      	mov	r2, r6
 801ad98:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801ad9c:	e6fa      	b.n	801ab94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801ad9e:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 801ada2:	4694      	mov	ip, r2
 801ada4:	f102 0908 	add.w	r9, r2, #8
 801ada8:	4676      	mov	r6, lr
 801adaa:	f8dc 0000 	ldr.w	r0, [ip]
 801adae:	f10c 0c08 	add.w	ip, ip, #8
 801adb2:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801adb6:	46f0      	mov	r8, lr
 801adb8:	45cc      	cmp	ip, r9
 801adba:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801adbe:	46c6      	mov	lr, r8
 801adc0:	d1f3      	bne.n	801adaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801adc2:	f8dc 0000 	ldr.w	r0, [ip]
 801adc6:	f8c8 0000 	str.w	r0, [r8]
 801adca:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801adce:	f8a8 1004 	strh.w	r1, [r8, #4]
 801add2:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801add6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801adda:	d009      	beq.n	801adf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801addc:	7b51      	ldrb	r1, [r2, #13]
 801adde:	7992      	ldrb	r2, [r2, #6]
 801ade0:	0149      	lsls	r1, r1, #5
 801ade2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ade6:	4311      	orrs	r1, r2
 801ade8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801adec:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801adf0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801adf4:	d00d      	beq.n	801ae12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801adf6:	1bdb      	subs	r3, r3, r7
 801adf8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801adfc:	b29b      	uxth	r3, r3
 801adfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ae02:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801ae06:	10db      	asrs	r3, r3, #3
 801ae08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ae0c:	4313      	orrs	r3, r2
 801ae0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801ae12:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801ae16:	00cb      	lsls	r3, r1, #3
 801ae18:	0648      	lsls	r0, r1, #25
 801ae1a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ae1e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801ae22:	ea43 0302 	orr.w	r3, r3, r2
 801ae26:	bf44      	itt	mi
 801ae28:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ae2c:	b21b      	sxthmi	r3, r3
 801ae2e:	e7b1      	b.n	801ad94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801ae30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ae30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae34:	461e      	mov	r6, r3
 801ae36:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ae38:	4604      	mov	r4, r0
 801ae3a:	4617      	mov	r7, r2
 801ae3c:	b92b      	cbnz	r3, 801ae4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801ae3e:	4b25      	ldr	r3, [pc, #148]	; (801aed4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801ae40:	21bf      	movs	r1, #191	; 0xbf
 801ae42:	4a25      	ldr	r2, [pc, #148]	; (801aed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801ae44:	4825      	ldr	r0, [pc, #148]	; (801aedc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801ae46:	f00b f8cb 	bl	8025fe0 <__assert_func>
 801ae4a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ae4c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ae50:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ae54:	f7ed fc90 	bl	8008778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ae58:	4605      	mov	r5, r0
 801ae5a:	b918      	cbnz	r0, 801ae64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801ae5c:	6030      	str	r0, [r6, #0]
 801ae5e:	4628      	mov	r0, r5
 801ae60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae64:	683b      	ldr	r3, [r7, #0]
 801ae66:	4601      	mov	r1, r0
 801ae68:	4638      	mov	r0, r7
 801ae6a:	68db      	ldr	r3, [r3, #12]
 801ae6c:	4798      	blx	r3
 801ae6e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ae72:	4602      	mov	r2, r0
 801ae74:	6030      	str	r0, [r6, #0]
 801ae76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ae7a:	d213      	bcs.n	801aea4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801ae7c:	4643      	mov	r3, r8
 801ae7e:	4639      	mov	r1, r7
 801ae80:	4620      	mov	r0, r4
 801ae82:	f7ff fe33 	bl	801aaec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ae86:	6030      	str	r0, [r6, #0]
 801ae88:	6833      	ldr	r3, [r6, #0]
 801ae8a:	b143      	cbz	r3, 801ae9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801ae8c:	7b5a      	ldrb	r2, [r3, #13]
 801ae8e:	7a9b      	ldrb	r3, [r3, #10]
 801ae90:	0052      	lsls	r2, r2, #1
 801ae92:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ae96:	4313      	orrs	r3, r2
 801ae98:	bf0c      	ite	eq
 801ae9a:	2301      	moveq	r3, #1
 801ae9c:	2300      	movne	r3, #0
 801ae9e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801aea2:	e7dc      	b.n	801ae5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801aea4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801aea8:	b29b      	uxth	r3, r3
 801aeaa:	2b7f      	cmp	r3, #127	; 0x7f
 801aeac:	d804      	bhi.n	801aeb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801aeae:	4639      	mov	r1, r7
 801aeb0:	4620      	mov	r0, r4
 801aeb2:	f7ff fd01 	bl	801a8b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801aeb6:	e7e6      	b.n	801ae86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801aeb8:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d0e3      	beq.n	801ae88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801aec0:	f640 1302 	movw	r3, #2306	; 0x902
 801aec4:	429d      	cmp	r5, r3
 801aec6:	d1df      	bne.n	801ae88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801aec8:	4601      	mov	r1, r0
 801aeca:	4620      	mov	r0, r4
 801aecc:	f7ff fcc5 	bl	801a85a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801aed0:	e7d9      	b.n	801ae86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801aed2:	bf00      	nop
 801aed4:	0802d510 	.word	0x0802d510
 801aed8:	0802d782 	.word	0x0802d782
 801aedc:	0802d519 	.word	0x0802d519

0801aee0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801aee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aee4:	461e      	mov	r6, r3
 801aee6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801aee8:	4604      	mov	r4, r0
 801aeea:	4617      	mov	r7, r2
 801aeec:	b92b      	cbnz	r3, 801aefa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801aeee:	4b26      	ldr	r3, [pc, #152]	; (801af88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801aef0:	21bf      	movs	r1, #191	; 0xbf
 801aef2:	4a26      	ldr	r2, [pc, #152]	; (801af8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801aef4:	4826      	ldr	r0, [pc, #152]	; (801af90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801aef6:	f00b f873 	bl	8025fe0 <__assert_func>
 801aefa:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801aefc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801af00:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801af04:	f7ed fc38 	bl	8008778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801af08:	4605      	mov	r5, r0
 801af0a:	b918      	cbnz	r0, 801af14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801af0c:	6030      	str	r0, [r6, #0]
 801af0e:	4628      	mov	r0, r5
 801af10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af14:	683b      	ldr	r3, [r7, #0]
 801af16:	4601      	mov	r1, r0
 801af18:	4638      	mov	r0, r7
 801af1a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801af1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801af22:	47c8      	blx	r9
 801af24:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801af28:	4602      	mov	r2, r0
 801af2a:	6030      	str	r0, [r6, #0]
 801af2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801af30:	d213      	bcs.n	801af5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801af32:	4643      	mov	r3, r8
 801af34:	4639      	mov	r1, r7
 801af36:	4620      	mov	r0, r4
 801af38:	f7ff fdd8 	bl	801aaec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801af3c:	6030      	str	r0, [r6, #0]
 801af3e:	6833      	ldr	r3, [r6, #0]
 801af40:	b143      	cbz	r3, 801af54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801af42:	7b5a      	ldrb	r2, [r3, #13]
 801af44:	7a9b      	ldrb	r3, [r3, #10]
 801af46:	0052      	lsls	r2, r2, #1
 801af48:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801af4c:	4313      	orrs	r3, r2
 801af4e:	bf0c      	ite	eq
 801af50:	2301      	moveq	r3, #1
 801af52:	2300      	movne	r3, #0
 801af54:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801af58:	e7d9      	b.n	801af0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801af5a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801af5e:	b29b      	uxth	r3, r3
 801af60:	2b7f      	cmp	r3, #127	; 0x7f
 801af62:	d804      	bhi.n	801af6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801af64:	4639      	mov	r1, r7
 801af66:	4620      	mov	r0, r4
 801af68:	f7ff fca6 	bl	801a8b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801af6c:	e7e6      	b.n	801af3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801af6e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801af72:	2b00      	cmp	r3, #0
 801af74:	d0e3      	beq.n	801af3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801af76:	f640 1302 	movw	r3, #2306	; 0x902
 801af7a:	429d      	cmp	r5, r3
 801af7c:	d1df      	bne.n	801af3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801af7e:	4601      	mov	r1, r0
 801af80:	4620      	mov	r0, r4
 801af82:	f7ff fc6a 	bl	801a85a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801af86:	e7d9      	b.n	801af3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801af88:	0802d510 	.word	0x0802d510
 801af8c:	0802d782 	.word	0x0802d782
 801af90:	0802d519 	.word	0x0802d519

0801af94 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801af94:	b510      	push	{r4, lr}
 801af96:	4604      	mov	r4, r0
 801af98:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801af9a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801af9c:	b9d9      	cbnz	r1, 801afd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801af9e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801afa0:	2b0a      	cmp	r3, #10
 801afa2:	d036      	beq.n	801b012 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801afa4:	4620      	mov	r0, r4
 801afa6:	f7ff fc1f 	bl	801a7e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801afaa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801afac:	2b09      	cmp	r3, #9
 801afae:	d906      	bls.n	801afbe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801afb0:	4b18      	ldr	r3, [pc, #96]	; (801b014 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801afb2:	f240 1103 	movw	r1, #259	; 0x103
 801afb6:	4a18      	ldr	r2, [pc, #96]	; (801b018 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801afb8:	4818      	ldr	r0, [pc, #96]	; (801b01c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801afba:	f00b f811 	bl	8025fe0 <__assert_func>
 801afbe:	1c5a      	adds	r2, r3, #1
 801afc0:	8622      	strh	r2, [r4, #48]	; 0x30
 801afc2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801afc4:	4413      	add	r3, r2
 801afc6:	b29b      	uxth	r3, r3
 801afc8:	2b09      	cmp	r3, #9
 801afca:	bf88      	it	hi
 801afcc:	3b0a      	subhi	r3, #10
 801afce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801afd2:	8358      	strh	r0, [r3, #26]
 801afd4:	e7e3      	b.n	801af9e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801afd6:	2b0a      	cmp	r3, #10
 801afd8:	d01b      	beq.n	801b012 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801afda:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801afdc:	3901      	subs	r1, #1
 801afde:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801afe2:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801afe4:	8721      	strh	r1, [r4, #56]	; 0x38
 801afe6:	1c51      	adds	r1, r2, #1
 801afe8:	b289      	uxth	r1, r1
 801afea:	2901      	cmp	r1, #1
 801afec:	bf8a      	itet	hi
 801afee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aff2:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801aff4:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801aff6:	2b09      	cmp	r3, #9
 801aff8:	d8da      	bhi.n	801afb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801affa:	1c5a      	adds	r2, r3, #1
 801affc:	8622      	strh	r2, [r4, #48]	; 0x30
 801affe:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b000:	4413      	add	r3, r2
 801b002:	b29b      	uxth	r3, r3
 801b004:	2b09      	cmp	r3, #9
 801b006:	bf88      	it	hi
 801b008:	3b0a      	subhi	r3, #10
 801b00a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b00e:	8358      	strh	r0, [r3, #26]
 801b010:	e7c2      	b.n	801af98 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b012:	bd10      	pop	{r4, pc}
 801b014:	0802d545 	.word	0x0802d545
 801b018:	0802d8d8 	.word	0x0802d8d8
 801b01c:	0802d519 	.word	0x0802d519

0801b020 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b020:	b538      	push	{r3, r4, r5, lr}
 801b022:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801b024:	4604      	mov	r4, r0
 801b026:	b92a      	cbnz	r2, 801b034 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801b028:	4b13      	ldr	r3, [pc, #76]	; (801b078 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801b02a:	21d4      	movs	r1, #212	; 0xd4
 801b02c:	4a13      	ldr	r2, [pc, #76]	; (801b07c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801b02e:	4814      	ldr	r0, [pc, #80]	; (801b080 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801b030:	f00a ffd6 	bl	8025fe0 <__assert_func>
 801b034:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b036:	3a01      	subs	r2, #1
 801b038:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801b03c:	8b4d      	ldrh	r5, [r1, #26]
 801b03e:	8602      	strh	r2, [r0, #48]	; 0x30
 801b040:	1c5a      	adds	r2, r3, #1
 801b042:	b292      	uxth	r2, r2
 801b044:	2a09      	cmp	r2, #9
 801b046:	bf8a      	itet	hi
 801b048:	3b09      	subhi	r3, #9
 801b04a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801b04c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801b04e:	f7ff ffa1 	bl	801af94 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b052:	8b23      	ldrh	r3, [r4, #24]
 801b054:	2b01      	cmp	r3, #1
 801b056:	bf9c      	itt	ls
 801b058:	3301      	addls	r3, #1
 801b05a:	8323      	strhls	r3, [r4, #24]
 801b05c:	8ae3      	ldrh	r3, [r4, #22]
 801b05e:	b90b      	cbnz	r3, 801b064 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801b060:	2302      	movs	r3, #2
 801b062:	82e3      	strh	r3, [r4, #22]
 801b064:	8ae3      	ldrh	r3, [r4, #22]
 801b066:	4628      	mov	r0, r5
 801b068:	3b01      	subs	r3, #1
 801b06a:	b29b      	uxth	r3, r3
 801b06c:	82e3      	strh	r3, [r4, #22]
 801b06e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b072:	8265      	strh	r5, [r4, #18]
 801b074:	bd38      	pop	{r3, r4, r5, pc}
 801b076:	bf00      	nop
 801b078:	0802d510 	.word	0x0802d510
 801b07c:	0802d82d 	.word	0x0802d82d
 801b080:	0802d519 	.word	0x0802d519

0801b084 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b084:	428a      	cmp	r2, r1
 801b086:	b538      	push	{r3, r4, r5, lr}
 801b088:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801b08a:	d90c      	bls.n	801b0a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801b08c:	b92c      	cbnz	r4, 801b09a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801b08e:	4b1c      	ldr	r3, [pc, #112]	; (801b100 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801b090:	21e0      	movs	r1, #224	; 0xe0
 801b092:	4a1c      	ldr	r2, [pc, #112]	; (801b104 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801b094:	481c      	ldr	r0, [pc, #112]	; (801b108 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801b096:	f00a ffa3 	bl	8025fe0 <__assert_func>
 801b09a:	3c01      	subs	r4, #1
 801b09c:	4b1b      	ldr	r3, [pc, #108]	; (801b10c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801b09e:	4a1c      	ldr	r2, [pc, #112]	; (801b110 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801b0a0:	21c4      	movs	r1, #196	; 0xc4
 801b0a2:	8604      	strh	r4, [r0, #48]	; 0x30
 801b0a4:	e7f6      	b.n	801b094 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b0a6:	428c      	cmp	r4, r1
 801b0a8:	d203      	bcs.n	801b0b2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801b0aa:	4b1a      	ldr	r3, [pc, #104]	; (801b114 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801b0ac:	21ca      	movs	r1, #202	; 0xca
 801b0ae:	4a1a      	ldr	r2, [pc, #104]	; (801b118 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801b0b0:	e7f0      	b.n	801b094 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b0b2:	1a64      	subs	r4, r4, r1
 801b0b4:	250a      	movs	r5, #10
 801b0b6:	8604      	strh	r4, [r0, #48]	; 0x30
 801b0b8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801b0ba:	4421      	add	r1, r4
 801b0bc:	b289      	uxth	r1, r1
 801b0be:	2909      	cmp	r1, #9
 801b0c0:	bf88      	it	hi
 801b0c2:	390a      	subhi	r1, #10
 801b0c4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b0c6:	b1ba      	cbz	r2, 801b0f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801b0c8:	3a01      	subs	r2, #1
 801b0ca:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801b0cc:	b292      	uxth	r2, r2
 801b0ce:	2909      	cmp	r1, #9
 801b0d0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801b0d4:	d903      	bls.n	801b0de <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801b0d6:	4b11      	ldr	r3, [pc, #68]	; (801b11c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801b0d8:	21e5      	movs	r1, #229	; 0xe5
 801b0da:	4a11      	ldr	r2, [pc, #68]	; (801b120 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801b0dc:	e7da      	b.n	801b094 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b0de:	3101      	adds	r1, #1
 801b0e0:	8601      	strh	r1, [r0, #48]	; 0x30
 801b0e2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b0e4:	b901      	cbnz	r1, 801b0e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801b0e6:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b0e8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b0ea:	3901      	subs	r1, #1
 801b0ec:	b289      	uxth	r1, r1
 801b0ee:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b0f0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b0f4:	834c      	strh	r4, [r1, #26]
 801b0f6:	e7e6      	b.n	801b0c6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801b0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b0fc:	f7ff bf4a 	b.w	801af94 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b100:	0802d510 	.word	0x0802d510
 801b104:	0802d606 	.word	0x0802d606
 801b108:	0802d519 	.word	0x0802d519
 801b10c:	0802d551 	.word	0x0802d551
 801b110:	0802d6b0 	.word	0x0802d6b0
 801b114:	0802d55f 	.word	0x0802d55f
 801b118:	0802d987 	.word	0x0802d987
 801b11c:	0802d56b 	.word	0x0802d56b
 801b120:	0802d57e 	.word	0x0802d57e

0801b124 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b124:	3a01      	subs	r2, #1
 801b126:	b570      	push	{r4, r5, r6, lr}
 801b128:	b292      	uxth	r2, r2
 801b12a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b12e:	42b2      	cmp	r2, r6
 801b130:	d019      	beq.n	801b166 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801b132:	8b04      	ldrh	r4, [r0, #24]
 801b134:	f831 5b02 	ldrh.w	r5, [r1], #2
 801b138:	4294      	cmp	r4, r2
 801b13a:	d805      	bhi.n	801b148 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801b13c:	4b19      	ldr	r3, [pc, #100]	; (801b1a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b13e:	4a1a      	ldr	r2, [pc, #104]	; (801b1a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801b140:	21c4      	movs	r1, #196	; 0xc4
 801b142:	481a      	ldr	r0, [pc, #104]	; (801b1ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801b144:	f00a ff4c 	bl	8025fe0 <__assert_func>
 801b148:	8ac4      	ldrh	r4, [r0, #22]
 801b14a:	4414      	add	r4, r2
 801b14c:	3a01      	subs	r2, #1
 801b14e:	b2a4      	uxth	r4, r4
 801b150:	b292      	uxth	r2, r2
 801b152:	2c01      	cmp	r4, #1
 801b154:	bf88      	it	hi
 801b156:	3c02      	subhi	r4, #2
 801b158:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b15c:	8a64      	ldrh	r4, [r4, #18]
 801b15e:	42ac      	cmp	r4, r5
 801b160:	d0e5      	beq.n	801b12e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801b162:	2000      	movs	r0, #0
 801b164:	bd70      	pop	{r4, r5, r6, pc}
 801b166:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b16a:	2400      	movs	r4, #0
 801b16c:	4413      	add	r3, r2
 801b16e:	b2a2      	uxth	r2, r4
 801b170:	429a      	cmp	r2, r3
 801b172:	da14      	bge.n	801b19e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801b174:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801b176:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b17a:	4296      	cmp	r6, r2
 801b17c:	d802      	bhi.n	801b184 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801b17e:	4b09      	ldr	r3, [pc, #36]	; (801b1a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b180:	4a0b      	ldr	r2, [pc, #44]	; (801b1b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801b182:	e7dd      	b.n	801b140 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801b184:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801b186:	3401      	adds	r4, #1
 801b188:	4432      	add	r2, r6
 801b18a:	b292      	uxth	r2, r2
 801b18c:	2a09      	cmp	r2, #9
 801b18e:	bf88      	it	hi
 801b190:	3a0a      	subhi	r2, #10
 801b192:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b196:	8b52      	ldrh	r2, [r2, #26]
 801b198:	42aa      	cmp	r2, r5
 801b19a:	d0e8      	beq.n	801b16e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801b19c:	e7e1      	b.n	801b162 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801b19e:	2001      	movs	r0, #1
 801b1a0:	e7e0      	b.n	801b164 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801b1a2:	bf00      	nop
 801b1a4:	0802d551 	.word	0x0802d551
 801b1a8:	0802da0b 	.word	0x0802da0b
 801b1ac:	0802d519 	.word	0x0802d519
 801b1b0:	0802d6b0 	.word	0x0802d6b0

0801b1b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1b8:	4605      	mov	r5, r0
 801b1ba:	4616      	mov	r6, r2
 801b1bc:	1c8c      	adds	r4, r1, #2
 801b1be:	8809      	ldrh	r1, [r1, #0]
 801b1c0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b1c4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b1c8:	42b3      	cmp	r3, r6
 801b1ca:	d124      	bne.n	801b216 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b1cc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b1d0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b1d4:	f001 070f 	and.w	r7, r1, #15
 801b1d8:	4652      	mov	r2, sl
 801b1da:	f8cd 8000 	str.w	r8, [sp]
 801b1de:	464b      	mov	r3, r9
 801b1e0:	4621      	mov	r1, r4
 801b1e2:	4628      	mov	r0, r5
 801b1e4:	f7ff ff9e 	bl	801b124 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b1e8:	4683      	mov	fp, r0
 801b1ea:	b168      	cbz	r0, 801b208 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b1ec:	eb0a 0109 	add.w	r1, sl, r9
 801b1f0:	463a      	mov	r2, r7
 801b1f2:	4628      	mov	r0, r5
 801b1f4:	4441      	add	r1, r8
 801b1f6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b1fa:	4649      	mov	r1, r9
 801b1fc:	f7ff ff42 	bl	801b084 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b200:	4658      	mov	r0, fp
 801b202:	b003      	add	sp, #12
 801b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b208:	eb07 010a 	add.w	r1, r7, sl
 801b20c:	4449      	add	r1, r9
 801b20e:	4441      	add	r1, r8
 801b210:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b214:	e7d2      	b.n	801b1bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b216:	f04f 0b00 	mov.w	fp, #0
 801b21a:	e7f1      	b.n	801b200 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b21c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b21c:	b570      	push	{r4, r5, r6, lr}
 801b21e:	8810      	ldrh	r0, [r2, #0]
 801b220:	4298      	cmp	r0, r3
 801b222:	d817      	bhi.n	801b254 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b224:	1e48      	subs	r0, r1, #1
 801b226:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b22a:	4298      	cmp	r0, r3
 801b22c:	d312      	bcc.n	801b254 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b22e:	2400      	movs	r4, #0
 801b230:	428c      	cmp	r4, r1
 801b232:	d20f      	bcs.n	801b254 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b234:	1860      	adds	r0, r4, r1
 801b236:	1040      	asrs	r0, r0, #1
 801b238:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b23c:	0085      	lsls	r5, r0, #2
 801b23e:	42b3      	cmp	r3, r6
 801b240:	d902      	bls.n	801b248 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b242:	3001      	adds	r0, #1
 801b244:	b284      	uxth	r4, r0
 801b246:	e7f3      	b.n	801b230 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b248:	d201      	bcs.n	801b24e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b24a:	b281      	uxth	r1, r0
 801b24c:	e7f0      	b.n	801b230 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b24e:	442a      	add	r2, r5
 801b250:	8850      	ldrh	r0, [r2, #2]
 801b252:	bd70      	pop	{r4, r5, r6, pc}
 801b254:	2000      	movs	r0, #0
 801b256:	e7fc      	b.n	801b252 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b258 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b25c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b25e:	4604      	mov	r4, r0
 801b260:	260b      	movs	r6, #11
 801b262:	886f      	ldrh	r7, [r5, #2]
 801b264:	087f      	lsrs	r7, r7, #1
 801b266:	3e01      	subs	r6, #1
 801b268:	d01b      	beq.n	801b2a2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b26a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b26c:	b92b      	cbnz	r3, 801b27a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801b26e:	4b0e      	ldr	r3, [pc, #56]	; (801b2a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801b270:	21bf      	movs	r1, #191	; 0xbf
 801b272:	4a0e      	ldr	r2, [pc, #56]	; (801b2ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801b274:	480e      	ldr	r0, [pc, #56]	; (801b2b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801b276:	f00a feb3 	bl	8025fe0 <__assert_func>
 801b27a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b27c:	462a      	mov	r2, r5
 801b27e:	4639      	mov	r1, r7
 801b280:	4620      	mov	r0, r4
 801b282:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b286:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b28a:	4643      	mov	r3, r8
 801b28c:	f7ff ffc6 	bl	801b21c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b290:	b138      	cbz	r0, 801b2a2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b292:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b296:	4642      	mov	r2, r8
 801b298:	4620      	mov	r0, r4
 801b29a:	f7ff ff8b 	bl	801b1b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b29e:	2800      	cmp	r0, #0
 801b2a0:	d1e1      	bne.n	801b266 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2a6:	bf00      	nop
 801b2a8:	0802d510 	.word	0x0802d510
 801b2ac:	0802d782 	.word	0x0802d782
 801b2b0:	0802d519 	.word	0x0802d519

0801b2b4 <_ZN8touchgfx8ceil28_4El>:
 801b2b4:	f110 030f 	adds.w	r3, r0, #15
 801b2b8:	d401      	bmi.n	801b2be <_ZN8touchgfx8ceil28_4El+0xa>
 801b2ba:	1118      	asrs	r0, r3, #4
 801b2bc:	4770      	bx	lr
 801b2be:	2210      	movs	r2, #16
 801b2c0:	f1c0 0001 	rsb	r0, r0, #1
 801b2c4:	fb93 f3f2 	sdiv	r3, r3, r2
 801b2c8:	f010 000f 	ands.w	r0, r0, #15
 801b2cc:	bf18      	it	ne
 801b2ce:	2001      	movne	r0, #1
 801b2d0:	1a18      	subs	r0, r3, r0
 801b2d2:	4770      	bx	lr

0801b2d4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801b2d4:	2900      	cmp	r1, #0
 801b2d6:	b538      	push	{r3, r4, r5, lr}
 801b2d8:	dc05      	bgt.n	801b2e6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801b2da:	4b0f      	ldr	r3, [pc, #60]	; (801b318 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801b2dc:	21f7      	movs	r1, #247	; 0xf7
 801b2de:	4a0f      	ldr	r2, [pc, #60]	; (801b31c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801b2e0:	480f      	ldr	r0, [pc, #60]	; (801b320 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801b2e2:	f00a fe7d 	bl	8025fe0 <__assert_func>
 801b2e6:	2800      	cmp	r0, #0
 801b2e8:	db06      	blt.n	801b2f8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801b2ea:	fb90 f4f1 	sdiv	r4, r0, r1
 801b2ee:	fb01 0114 	mls	r1, r1, r4, r0
 801b2f2:	6014      	str	r4, [r2, #0]
 801b2f4:	6019      	str	r1, [r3, #0]
 801b2f6:	bd38      	pop	{r3, r4, r5, pc}
 801b2f8:	4240      	negs	r0, r0
 801b2fa:	fb90 f4f1 	sdiv	r4, r0, r1
 801b2fe:	4265      	negs	r5, r4
 801b300:	fb01 0014 	mls	r0, r1, r4, r0
 801b304:	6015      	str	r5, [r2, #0]
 801b306:	6018      	str	r0, [r3, #0]
 801b308:	2800      	cmp	r0, #0
 801b30a:	d0f4      	beq.n	801b2f6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801b30c:	6810      	ldr	r0, [r2, #0]
 801b30e:	3801      	subs	r0, #1
 801b310:	6010      	str	r0, [r2, #0]
 801b312:	6818      	ldr	r0, [r3, #0]
 801b314:	1a09      	subs	r1, r1, r0
 801b316:	e7ed      	b.n	801b2f4 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801b318:	0802dadc 	.word	0x0802dadc
 801b31c:	0802db1b 	.word	0x0802db1b
 801b320:	0802daec 	.word	0x0802daec

0801b324 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b324:	b570      	push	{r4, r5, r6, lr}
 801b326:	694a      	ldr	r2, [r1, #20]
 801b328:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b32a:	684b      	ldr	r3, [r1, #4]
 801b32c:	1b54      	subs	r4, r2, r5
 801b32e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801b330:	f000 8106 	beq.w	801b540 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801b334:	1b9b      	subs	r3, r3, r6
 801b336:	d003      	beq.n	801b340 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b338:	4363      	muls	r3, r4
 801b33a:	2210      	movs	r2, #16
 801b33c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b340:	680c      	ldr	r4, [r1, #0]
 801b342:	698a      	ldr	r2, [r1, #24]
 801b344:	1b65      	subs	r5, r4, r5
 801b346:	f000 80fd 	beq.w	801b544 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801b34a:	1b92      	subs	r2, r2, r6
 801b34c:	d003      	beq.n	801b356 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b34e:	436a      	muls	r2, r5
 801b350:	2410      	movs	r4, #16
 801b352:	fb92 f2f4 	sdiv	r2, r2, r4
 801b356:	1a9b      	subs	r3, r3, r2
 801b358:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b580 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801b35c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b360:	460a      	mov	r2, r1
 801b362:	ee07 3a90 	vmov	s15, r3
 801b366:	f100 040c 	add.w	r4, r0, #12
 801b36a:	4603      	mov	r3, r0
 801b36c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b370:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b374:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b378:	eeb1 6a43 	vneg.f32	s12, s6
 801b37c:	edd2 7a02 	vldr	s15, [r2, #8]
 801b380:	3214      	adds	r2, #20
 801b382:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b386:	ece3 6a01 	vstmia	r3!, {s13}
 801b38a:	429c      	cmp	r4, r3
 801b38c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801b390:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b394:	edc3 7a02 	vstr	s15, [r3, #8]
 801b398:	ed52 7a01 	vldr	s15, [r2, #-4]
 801b39c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b3a0:	edc3 7a05 	vstr	s15, [r3, #20]
 801b3a4:	d1ea      	bne.n	801b37c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b3a6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b3a8:	698b      	ldr	r3, [r1, #24]
 801b3aa:	edd0 4a02 	vldr	s9, [r0, #8]
 801b3ae:	1a9b      	subs	r3, r3, r2
 801b3b0:	edd0 3a00 	vldr	s7, [r0]
 801b3b4:	edd0 6a01 	vldr	s13, [r0, #4]
 801b3b8:	ee07 3a90 	vmov	s15, r3
 801b3bc:	684b      	ldr	r3, [r1, #4]
 801b3be:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b3c2:	ed90 5a05 	vldr	s10, [r0, #20]
 801b3c6:	1a9b      	subs	r3, r3, r2
 801b3c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b3cc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b3d0:	ed90 2a03 	vldr	s4, [r0, #12]
 801b3d4:	ee07 3a10 	vmov	s14, r3
 801b3d8:	edd0 5a04 	vldr	s11, [r0, #16]
 801b3dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b3e0:	ed90 1a07 	vldr	s2, [r0, #28]
 801b3e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b3e8:	edd0 2a06 	vldr	s5, [r0, #24]
 801b3ec:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b3f0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b3f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b3f8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b3fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b400:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b404:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b408:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b40a:	694a      	ldr	r2, [r1, #20]
 801b40c:	1b13      	subs	r3, r2, r4
 801b40e:	ee07 3a10 	vmov	s14, r3
 801b412:	680b      	ldr	r3, [r1, #0]
 801b414:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b418:	1b1b      	subs	r3, r3, r4
 801b41a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b41e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b422:	ee07 3a10 	vmov	s14, r3
 801b426:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b42a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b42e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b432:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b436:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b43a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b43c:	698b      	ldr	r3, [r1, #24]
 801b43e:	1a9b      	subs	r3, r3, r2
 801b440:	ee06 3a90 	vmov	s13, r3
 801b444:	684b      	ldr	r3, [r1, #4]
 801b446:	1a9b      	subs	r3, r3, r2
 801b448:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b44c:	ee07 3a10 	vmov	s14, r3
 801b450:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b454:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b458:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b45c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b460:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b464:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b468:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b46c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b46e:	694a      	ldr	r2, [r1, #20]
 801b470:	1b13      	subs	r3, r2, r4
 801b472:	ee07 3a10 	vmov	s14, r3
 801b476:	680b      	ldr	r3, [r1, #0]
 801b478:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b47c:	1b1b      	subs	r3, r3, r4
 801b47e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b482:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b486:	ee07 3a10 	vmov	s14, r3
 801b48a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b48e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b492:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b496:	edd0 5a08 	vldr	s11, [r0, #32]
 801b49a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b49e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b4a2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b4a6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b4aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b4ac:	698b      	ldr	r3, [r1, #24]
 801b4ae:	1a9b      	subs	r3, r3, r2
 801b4b0:	ee07 3a10 	vmov	s14, r3
 801b4b4:	684b      	ldr	r3, [r1, #4]
 801b4b6:	1a9b      	subs	r3, r3, r2
 801b4b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b4bc:	ee01 3a90 	vmov	s3, r3
 801b4c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b4c4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b4c8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b4cc:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b4d0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b4d4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b4d8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b4dc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b4de:	694a      	ldr	r2, [r1, #20]
 801b4e0:	1b13      	subs	r3, r2, r4
 801b4e2:	ee03 3a10 	vmov	s6, r3
 801b4e6:	680b      	ldr	r3, [r1, #0]
 801b4e8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b4ec:	1b1b      	subs	r3, r3, r4
 801b4ee:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b4f2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b4f6:	ee03 3a10 	vmov	s6, r3
 801b4fa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b4fe:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b502:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b506:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b50a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b50e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b512:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b516:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b51e:	dd13      	ble.n	801b548 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b524:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b528:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b52a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b52e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b536:	dd15      	ble.n	801b564 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801b538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b53c:	6403      	str	r3, [r0, #64]	; 0x40
 801b53e:	bd70      	pop	{r4, r5, r6, pc}
 801b540:	4623      	mov	r3, r4
 801b542:	e6fd      	b.n	801b340 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b544:	462a      	mov	r2, r5
 801b546:	e706      	b.n	801b356 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b548:	d502      	bpl.n	801b550 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801b54a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b54e:	e7e9      	b.n	801b524 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801b550:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b554:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b558:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b560:	dade      	bge.n	801b520 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801b562:	e7f2      	b.n	801b54a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b564:	d502      	bpl.n	801b56c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801b566:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b56a:	e7e7      	b.n	801b53c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b56c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b570:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b574:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b57c:	dadc      	bge.n	801b538 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b57e:	e7f2      	b.n	801b566 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b580:	3d800000 	.word	0x3d800000

0801b584 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b588:	f04f 0814 	mov.w	r8, #20
 801b58c:	4604      	mov	r4, r0
 801b58e:	4617      	mov	r7, r2
 801b590:	460d      	mov	r5, r1
 801b592:	fb08 f903 	mul.w	r9, r8, r3
 801b596:	461e      	mov	r6, r3
 801b598:	eb02 0a09 	add.w	sl, r2, r9
 801b59c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b5a0:	f7ff fe88 	bl	801b2b4 <_ZN8touchgfx8ceil28_4El>
 801b5a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b5a6:	6160      	str	r0, [r4, #20]
 801b5a8:	fb08 f803 	mul.w	r8, r8, r3
 801b5ac:	9001      	str	r0, [sp, #4]
 801b5ae:	eb07 0b08 	add.w	fp, r7, r8
 801b5b2:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b5b6:	f7ff fe7d 	bl	801b2b4 <_ZN8touchgfx8ceil28_4El>
 801b5ba:	9a01      	ldr	r2, [sp, #4]
 801b5bc:	1a80      	subs	r0, r0, r2
 801b5be:	61a0      	str	r0, [r4, #24]
 801b5c0:	2800      	cmp	r0, #0
 801b5c2:	f000 8088 	beq.w	801b6d6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801b5c6:	f857 3009 	ldr.w	r3, [r7, r9]
 801b5ca:	f857 c008 	ldr.w	ip, [r7, r8]
 801b5ce:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b5d2:	ebac 0c03 	sub.w	ip, ip, r3
 801b5d6:	f8da 1004 	ldr.w	r1, [sl, #4]
 801b5da:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801b5de:	1a40      	subs	r0, r0, r1
 801b5e0:	fb0b f202 	mul.w	r2, fp, r2
 801b5e4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801b5e8:	fb0c 2211 	mls	r2, ip, r1, r2
 801b5ec:	4641      	mov	r1, r8
 801b5ee:	fb00 2003 	mla	r0, r0, r3, r2
 801b5f2:	f104 0310 	add.w	r3, r4, #16
 801b5f6:	4622      	mov	r2, r4
 801b5f8:	3801      	subs	r0, #1
 801b5fa:	4440      	add	r0, r8
 801b5fc:	f7ff fe6a 	bl	801b2d4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b600:	f104 0308 	add.w	r3, r4, #8
 801b604:	1d22      	adds	r2, r4, #4
 801b606:	4641      	mov	r1, r8
 801b608:	4658      	mov	r0, fp
 801b60a:	f7ff fe63 	bl	801b2d4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b60e:	f8c4 800c 	str.w	r8, [r4, #12]
 801b612:	6962      	ldr	r2, [r4, #20]
 801b614:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b618:	eddf 6a31 	vldr	s13, [pc, #196]	; 801b6e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b61c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b620:	6822      	ldr	r2, [r4, #0]
 801b622:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b626:	ee07 3a10 	vmov	s14, r3
 801b62a:	f857 3009 	ldr.w	r3, [r7, r9]
 801b62e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b632:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b636:	ee07 3a90 	vmov	s15, r3
 801b63a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801b63e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b646:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b64a:	edd3 6a00 	vldr	s13, [r3]
 801b64e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b652:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b656:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b65a:	edc4 6a07 	vstr	s13, [r4, #28]
 801b65e:	edd4 6a01 	vldr	s13, [r4, #4]
 801b662:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801b666:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b66a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b66e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b672:	ed84 6a08 	vstr	s12, [r4, #32]
 801b676:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801b678:	6262      	str	r2, [r4, #36]	; 0x24
 801b67a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801b67e:	ed93 6a03 	vldr	s12, [r3, #12]
 801b682:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b686:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b68a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b68e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801b692:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b696:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801b69a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b69e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801b6a2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801b6a4:	6322      	str	r2, [r4, #48]	; 0x30
 801b6a6:	ed93 6a06 	vldr	s12, [r3, #24]
 801b6aa:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801b6ae:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b6b2:	eeb0 7a46 	vmov.f32	s14, s12
 801b6b6:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801b6ba:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b6be:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801b6c2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801b6c6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801b6ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b6ce:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801b6d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b6d4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b6d6:	4620      	mov	r0, r4
 801b6d8:	b003      	add	sp, #12
 801b6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6de:	bf00      	nop
 801b6e0:	3d800000 	.word	0x3d800000

0801b6e4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b6e4:	4602      	mov	r2, r0
 801b6e6:	b148      	cbz	r0, 801b6fc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	b298      	uxth	r0, r3
 801b6ec:	3301      	adds	r3, #1
 801b6ee:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b6f2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b6f6:	2900      	cmp	r1, #0
 801b6f8:	d1f7      	bne.n	801b6ea <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b6fa:	4770      	bx	lr
 801b6fc:	4770      	bx	lr

0801b6fe <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b6fe:	b530      	push	{r4, r5, lr}
 801b700:	4604      	mov	r4, r0
 801b702:	b159      	cbz	r1, 801b71c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b704:	b148      	cbz	r0, 801b71a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b706:	2300      	movs	r3, #0
 801b708:	b298      	uxth	r0, r3
 801b70a:	4282      	cmp	r2, r0
 801b70c:	d905      	bls.n	801b71a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b70e:	5ccd      	ldrb	r5, [r1, r3]
 801b710:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b714:	3301      	adds	r3, #1
 801b716:	2d00      	cmp	r5, #0
 801b718:	d1f6      	bne.n	801b708 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b71a:	bd30      	pop	{r4, r5, pc}
 801b71c:	4608      	mov	r0, r1
 801b71e:	e7fc      	b.n	801b71a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b720 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801b720:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b722:	468c      	mov	ip, r1
 801b724:	b08b      	sub	sp, #44	; 0x2c
 801b726:	2100      	movs	r1, #0
 801b728:	ae01      	add	r6, sp, #4
 801b72a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b72e:	211f      	movs	r1, #31
 801b730:	fbb0 f7f3 	udiv	r7, r0, r3
 801b734:	fb03 0517 	mls	r5, r3, r7, r0
 801b738:	4638      	mov	r0, r7
 801b73a:	b2ec      	uxtb	r4, r5
 801b73c:	2d09      	cmp	r5, #9
 801b73e:	bfd4      	ite	le
 801b740:	3430      	addle	r4, #48	; 0x30
 801b742:	3457      	addgt	r4, #87	; 0x57
 801b744:	b2e4      	uxtb	r4, r4
 801b746:	558c      	strb	r4, [r1, r6]
 801b748:	1e4c      	subs	r4, r1, #1
 801b74a:	b92f      	cbnz	r7, 801b758 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801b74c:	4431      	add	r1, r6
 801b74e:	4660      	mov	r0, ip
 801b750:	f7ff ffd5 	bl	801b6fe <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b754:	b00b      	add	sp, #44	; 0x2c
 801b756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b758:	4621      	mov	r1, r4
 801b75a:	e7e9      	b.n	801b730 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801b75c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b75e:	4607      	mov	r7, r0
 801b760:	b08b      	sub	sp, #44	; 0x2c
 801b762:	4608      	mov	r0, r1
 801b764:	b341      	cbz	r1, 801b7b8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b766:	1e99      	subs	r1, r3, #2
 801b768:	2922      	cmp	r1, #34	; 0x22
 801b76a:	d825      	bhi.n	801b7b8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b76c:	2100      	movs	r1, #0
 801b76e:	463c      	mov	r4, r7
 801b770:	261f      	movs	r6, #31
 801b772:	f10d 0c04 	add.w	ip, sp, #4
 801b776:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b77a:	1e71      	subs	r1, r6, #1
 801b77c:	fb94 fef3 	sdiv	lr, r4, r3
 801b780:	fb03 441e 	mls	r4, r3, lr, r4
 801b784:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b788:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b78c:	b2ec      	uxtb	r4, r5
 801b78e:	2d09      	cmp	r5, #9
 801b790:	bfd4      	ite	le
 801b792:	3430      	addle	r4, #48	; 0x30
 801b794:	3457      	addgt	r4, #87	; 0x57
 801b796:	b2e4      	uxtb	r4, r4
 801b798:	f80c 4006 	strb.w	r4, [ip, r6]
 801b79c:	4674      	mov	r4, lr
 801b79e:	b96c      	cbnz	r4, 801b7bc <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b7a0:	2f00      	cmp	r7, #0
 801b7a2:	da05      	bge.n	801b7b0 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b7a4:	ab0a      	add	r3, sp, #40	; 0x28
 801b7a6:	4419      	add	r1, r3
 801b7a8:	232d      	movs	r3, #45	; 0x2d
 801b7aa:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b7ae:	1eb1      	subs	r1, r6, #2
 801b7b0:	3101      	adds	r1, #1
 801b7b2:	4461      	add	r1, ip
 801b7b4:	f7ff ffa3 	bl	801b6fe <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b7b8:	b00b      	add	sp, #44	; 0x2c
 801b7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7bc:	460e      	mov	r6, r1
 801b7be:	e7dc      	b.n	801b77a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b7c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7c4:	b085      	sub	sp, #20
 801b7c6:	4691      	mov	r9, r2
 801b7c8:	6802      	ldr	r2, [r0, #0]
 801b7ca:	4688      	mov	r8, r1
 801b7cc:	461c      	mov	r4, r3
 801b7ce:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b7d2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b7d6:	4683      	mov	fp, r0
 801b7d8:	4610      	mov	r0, r2
 801b7da:	9103      	str	r1, [sp, #12]
 801b7dc:	9302      	str	r3, [sp, #8]
 801b7de:	9201      	str	r2, [sp, #4]
 801b7e0:	f7ff ff80 	bl	801b6e4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b7e4:	f1b8 0f00 	cmp.w	r8, #0
 801b7e8:	bf0c      	ite	eq
 801b7ea:	4684      	moveq	ip, r0
 801b7ec:	f100 0c01 	addne.w	ip, r0, #1
 801b7f0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801b7f4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801b7f8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b7fa:	fa1f fc8c 	uxth.w	ip, ip
 801b7fe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b800:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801b804:	9903      	ldr	r1, [sp, #12]
 801b806:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b80a:	d041      	beq.n	801b890 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b80c:	d834      	bhi.n	801b878 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b80e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801b812:	d059      	beq.n	801b8c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b814:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801b818:	d03a      	beq.n	801b890 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b81a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801b81e:	d034      	beq.n	801b88a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b820:	2400      	movs	r4, #0
 801b822:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b826:	3a01      	subs	r2, #1
 801b828:	b169      	cbz	r1, 801b846 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b82a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b82c:	458c      	cmp	ip, r1
 801b82e:	da09      	bge.n	801b844 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b830:	eba1 010c 	sub.w	r1, r1, ip
 801b834:	b289      	uxth	r1, r1
 801b836:	b933      	cbnz	r3, 801b846 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b838:	2e00      	cmp	r6, #0
 801b83a:	d051      	beq.n	801b8e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b83c:	2800      	cmp	r0, #0
 801b83e:	d04f      	beq.n	801b8e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b840:	440c      	add	r4, r1
 801b842:	b2a4      	uxth	r4, r4
 801b844:	2100      	movs	r1, #0
 801b846:	682b      	ldr	r3, [r5, #0]
 801b848:	4293      	cmp	r3, r2
 801b84a:	da07      	bge.n	801b85c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b84c:	f1b8 0f00 	cmp.w	r8, #0
 801b850:	d004      	beq.n	801b85c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b852:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b856:	682b      	ldr	r3, [r5, #0]
 801b858:	3301      	adds	r3, #1
 801b85a:	602b      	str	r3, [r5, #0]
 801b85c:	2730      	movs	r7, #48	; 0x30
 801b85e:	2c00      	cmp	r4, #0
 801b860:	d04e      	beq.n	801b900 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b862:	682e      	ldr	r6, [r5, #0]
 801b864:	3c01      	subs	r4, #1
 801b866:	42b2      	cmp	r2, r6
 801b868:	b2a4      	uxth	r4, r4
 801b86a:	dd49      	ble.n	801b900 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b86c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b870:	682b      	ldr	r3, [r5, #0]
 801b872:	3301      	adds	r3, #1
 801b874:	602b      	str	r3, [r5, #0]
 801b876:	e7f2      	b.n	801b85e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b878:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801b87c:	d01d      	beq.n	801b8ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b87e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801b882:	d002      	beq.n	801b88a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b884:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801b888:	e7c9      	b.n	801b81e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b88a:	4684      	mov	ip, r0
 801b88c:	f04f 0800 	mov.w	r8, #0
 801b890:	2c00      	cmp	r4, #0
 801b892:	d0c6      	beq.n	801b822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b894:	b947      	cbnz	r7, 801b8a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b896:	2801      	cmp	r0, #1
 801b898:	d106      	bne.n	801b8a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b89a:	8814      	ldrh	r4, [r2, #0]
 801b89c:	2c30      	cmp	r4, #48	; 0x30
 801b89e:	bf02      	ittt	eq
 801b8a0:	3202      	addeq	r2, #2
 801b8a2:	4638      	moveq	r0, r7
 801b8a4:	f8cb 2000 	streq.w	r2, [fp]
 801b8a8:	45bc      	cmp	ip, r7
 801b8aa:	da14      	bge.n	801b8d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b8ac:	b2bf      	uxth	r7, r7
 801b8ae:	eba7 040c 	sub.w	r4, r7, ip
 801b8b2:	46bc      	mov	ip, r7
 801b8b4:	b2a4      	uxth	r4, r4
 801b8b6:	2600      	movs	r6, #0
 801b8b8:	e7b3      	b.n	801b822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b8ba:	4684      	mov	ip, r0
 801b8bc:	b16c      	cbz	r4, 801b8da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b8be:	42b8      	cmp	r0, r7
 801b8c0:	dd00      	ble.n	801b8c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b8c2:	b2b8      	uxth	r0, r7
 801b8c4:	2400      	movs	r4, #0
 801b8c6:	e003      	b.n	801b8d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b8c8:	f04f 0c01 	mov.w	ip, #1
 801b8cc:	2400      	movs	r4, #0
 801b8ce:	4660      	mov	r0, ip
 801b8d0:	4626      	mov	r6, r4
 801b8d2:	46a0      	mov	r8, r4
 801b8d4:	e7a5      	b.n	801b822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b8d6:	2400      	movs	r4, #0
 801b8d8:	e7ed      	b.n	801b8b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b8da:	4626      	mov	r6, r4
 801b8dc:	46a0      	mov	r8, r4
 801b8de:	e7a0      	b.n	801b822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b8e0:	2900      	cmp	r1, #0
 801b8e2:	d0b0      	beq.n	801b846 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b8e4:	2720      	movs	r7, #32
 801b8e6:	682e      	ldr	r6, [r5, #0]
 801b8e8:	2900      	cmp	r1, #0
 801b8ea:	d0ac      	beq.n	801b846 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b8ec:	3901      	subs	r1, #1
 801b8ee:	4296      	cmp	r6, r2
 801b8f0:	b289      	uxth	r1, r1
 801b8f2:	daa7      	bge.n	801b844 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b8f4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b8f8:	682b      	ldr	r3, [r5, #0]
 801b8fa:	3301      	adds	r3, #1
 801b8fc:	602b      	str	r3, [r5, #0]
 801b8fe:	e7f2      	b.n	801b8e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b900:	b188      	cbz	r0, 801b926 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b902:	682b      	ldr	r3, [r5, #0]
 801b904:	3801      	subs	r0, #1
 801b906:	429a      	cmp	r2, r3
 801b908:	b280      	uxth	r0, r0
 801b90a:	dd0c      	ble.n	801b926 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b90c:	f8db 3000 	ldr.w	r3, [fp]
 801b910:	1c9c      	adds	r4, r3, #2
 801b912:	f8cb 4000 	str.w	r4, [fp]
 801b916:	881c      	ldrh	r4, [r3, #0]
 801b918:	682b      	ldr	r3, [r5, #0]
 801b91a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b91e:	682b      	ldr	r3, [r5, #0]
 801b920:	3301      	adds	r3, #1
 801b922:	602b      	str	r3, [r5, #0]
 801b924:	e7ec      	b.n	801b900 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b926:	2620      	movs	r6, #32
 801b928:	b151      	cbz	r1, 801b940 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b92a:	6828      	ldr	r0, [r5, #0]
 801b92c:	3901      	subs	r1, #1
 801b92e:	4282      	cmp	r2, r0
 801b930:	b289      	uxth	r1, r1
 801b932:	dd05      	ble.n	801b940 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b934:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b938:	682b      	ldr	r3, [r5, #0]
 801b93a:	3301      	adds	r3, #1
 801b93c:	602b      	str	r3, [r5, #0]
 801b93e:	e7f3      	b.n	801b928 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b940:	b005      	add	sp, #20
 801b942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b946:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b94a:	2400      	movs	r4, #0
 801b94c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b950:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801b954:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801b958:	8014      	strh	r4, [r2, #0]
 801b95a:	701c      	strb	r4, [r3, #0]
 801b95c:	f888 4000 	strb.w	r4, [r8]
 801b960:	f88c 4000 	strb.w	r4, [ip]
 801b964:	f88e 4000 	strb.w	r4, [lr]
 801b968:	703c      	strb	r4, [r7, #0]
 801b96a:	6804      	ldr	r4, [r0, #0]
 801b96c:	b1a4      	cbz	r4, 801b998 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b96e:	8824      	ldrh	r4, [r4, #0]
 801b970:	f04f 0901 	mov.w	r9, #1
 801b974:	b314      	cbz	r4, 801b9bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b976:	2c2b      	cmp	r4, #43	; 0x2b
 801b978:	d001      	beq.n	801b97e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b97a:	2c20      	cmp	r4, #32
 801b97c:	d110      	bne.n	801b9a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b97e:	8014      	strh	r4, [r2, #0]
 801b980:	6804      	ldr	r4, [r0, #0]
 801b982:	b10c      	cbz	r4, 801b988 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b984:	3402      	adds	r4, #2
 801b986:	6004      	str	r4, [r0, #0]
 801b988:	680c      	ldr	r4, [r1, #0]
 801b98a:	b10c      	cbz	r4, 801b990 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b98c:	3401      	adds	r4, #1
 801b98e:	600c      	str	r4, [r1, #0]
 801b990:	6804      	ldr	r4, [r0, #0]
 801b992:	b17c      	cbz	r4, 801b9b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b994:	8824      	ldrh	r4, [r4, #0]
 801b996:	e7ed      	b.n	801b974 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b998:	680c      	ldr	r4, [r1, #0]
 801b99a:	b17c      	cbz	r4, 801b9bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b99c:	7824      	ldrb	r4, [r4, #0]
 801b99e:	e7e7      	b.n	801b970 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b9a0:	2c2d      	cmp	r4, #45	; 0x2d
 801b9a2:	d102      	bne.n	801b9aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b9a4:	f883 9000 	strb.w	r9, [r3]
 801b9a8:	e7ea      	b.n	801b980 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b9aa:	2c23      	cmp	r4, #35	; 0x23
 801b9ac:	d107      	bne.n	801b9be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b9ae:	f888 9000 	strb.w	r9, [r8]
 801b9b2:	e7e5      	b.n	801b980 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b9b4:	680c      	ldr	r4, [r1, #0]
 801b9b6:	b10c      	cbz	r4, 801b9bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b9b8:	7824      	ldrb	r4, [r4, #0]
 801b9ba:	e7db      	b.n	801b974 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b9bc:	2400      	movs	r4, #0
 801b9be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b9c2:	2b09      	cmp	r3, #9
 801b9c4:	d901      	bls.n	801b9ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b9c6:	2c2a      	cmp	r4, #42	; 0x2a
 801b9c8:	d122      	bne.n	801ba10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b9ca:	2301      	movs	r3, #1
 801b9cc:	2c30      	cmp	r4, #48	; 0x30
 801b9ce:	f88e 3000 	strb.w	r3, [lr]
 801b9d2:	d10d      	bne.n	801b9f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b9d4:	f88c 3000 	strb.w	r3, [ip]
 801b9d8:	6803      	ldr	r3, [r0, #0]
 801b9da:	b10b      	cbz	r3, 801b9e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b9dc:	3302      	adds	r3, #2
 801b9de:	6003      	str	r3, [r0, #0]
 801b9e0:	680b      	ldr	r3, [r1, #0]
 801b9e2:	b10b      	cbz	r3, 801b9e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b9e4:	3301      	adds	r3, #1
 801b9e6:	600b      	str	r3, [r1, #0]
 801b9e8:	6803      	ldr	r3, [r0, #0]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d02f      	beq.n	801ba4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b9ee:	881c      	ldrh	r4, [r3, #0]
 801b9f0:	2c2a      	cmp	r4, #42	; 0x2a
 801b9f2:	d135      	bne.n	801ba60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b9f4:	f04f 33ff 	mov.w	r3, #4294967295
 801b9f8:	6033      	str	r3, [r6, #0]
 801b9fa:	6803      	ldr	r3, [r0, #0]
 801b9fc:	b10b      	cbz	r3, 801ba02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b9fe:	3302      	adds	r3, #2
 801ba00:	6003      	str	r3, [r0, #0]
 801ba02:	680b      	ldr	r3, [r1, #0]
 801ba04:	b10b      	cbz	r3, 801ba0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801ba06:	3301      	adds	r3, #1
 801ba08:	600b      	str	r3, [r1, #0]
 801ba0a:	6803      	ldr	r3, [r0, #0]
 801ba0c:	b31b      	cbz	r3, 801ba56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801ba0e:	881c      	ldrh	r4, [r3, #0]
 801ba10:	2c2e      	cmp	r4, #46	; 0x2e
 801ba12:	d11a      	bne.n	801ba4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ba14:	2301      	movs	r3, #1
 801ba16:	703b      	strb	r3, [r7, #0]
 801ba18:	6803      	ldr	r3, [r0, #0]
 801ba1a:	b10b      	cbz	r3, 801ba20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801ba1c:	3302      	adds	r3, #2
 801ba1e:	6003      	str	r3, [r0, #0]
 801ba20:	680b      	ldr	r3, [r1, #0]
 801ba22:	b10b      	cbz	r3, 801ba28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801ba24:	3301      	adds	r3, #1
 801ba26:	600b      	str	r3, [r1, #0]
 801ba28:	6803      	ldr	r3, [r0, #0]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d036      	beq.n	801ba9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801ba2e:	881b      	ldrh	r3, [r3, #0]
 801ba30:	2b2a      	cmp	r3, #42	; 0x2a
 801ba32:	d137      	bne.n	801baa4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ba34:	f04f 33ff 	mov.w	r3, #4294967295
 801ba38:	602b      	str	r3, [r5, #0]
 801ba3a:	6803      	ldr	r3, [r0, #0]
 801ba3c:	b10b      	cbz	r3, 801ba42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801ba3e:	3302      	adds	r3, #2
 801ba40:	6003      	str	r3, [r0, #0]
 801ba42:	680b      	ldr	r3, [r1, #0]
 801ba44:	b10b      	cbz	r3, 801ba4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ba46:	3301      	adds	r3, #1
 801ba48:	600b      	str	r3, [r1, #0]
 801ba4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba4e:	680c      	ldr	r4, [r1, #0]
 801ba50:	b134      	cbz	r4, 801ba60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ba52:	7824      	ldrb	r4, [r4, #0]
 801ba54:	e7cc      	b.n	801b9f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ba56:	680b      	ldr	r3, [r1, #0]
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d0f6      	beq.n	801ba4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ba5c:	781c      	ldrb	r4, [r3, #0]
 801ba5e:	e7d7      	b.n	801ba10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ba60:	2300      	movs	r3, #0
 801ba62:	220a      	movs	r2, #10
 801ba64:	6033      	str	r3, [r6, #0]
 801ba66:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ba6a:	fa1f f38c 	uxth.w	r3, ip
 801ba6e:	2b09      	cmp	r3, #9
 801ba70:	d8ce      	bhi.n	801ba10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ba72:	6833      	ldr	r3, [r6, #0]
 801ba74:	fb02 c303 	mla	r3, r2, r3, ip
 801ba78:	6033      	str	r3, [r6, #0]
 801ba7a:	6803      	ldr	r3, [r0, #0]
 801ba7c:	b10b      	cbz	r3, 801ba82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801ba7e:	3302      	adds	r3, #2
 801ba80:	6003      	str	r3, [r0, #0]
 801ba82:	680b      	ldr	r3, [r1, #0]
 801ba84:	b10b      	cbz	r3, 801ba8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801ba86:	3301      	adds	r3, #1
 801ba88:	600b      	str	r3, [r1, #0]
 801ba8a:	6803      	ldr	r3, [r0, #0]
 801ba8c:	b10b      	cbz	r3, 801ba92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801ba8e:	881c      	ldrh	r4, [r3, #0]
 801ba90:	e7e9      	b.n	801ba66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ba92:	680c      	ldr	r4, [r1, #0]
 801ba94:	2c00      	cmp	r4, #0
 801ba96:	d0e6      	beq.n	801ba66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ba98:	7824      	ldrb	r4, [r4, #0]
 801ba9a:	e7e4      	b.n	801ba66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ba9c:	680b      	ldr	r3, [r1, #0]
 801ba9e:	b10b      	cbz	r3, 801baa4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801baa0:	781b      	ldrb	r3, [r3, #0]
 801baa2:	e7c5      	b.n	801ba30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801baa4:	2200      	movs	r2, #0
 801baa6:	240a      	movs	r4, #10
 801baa8:	602a      	str	r2, [r5, #0]
 801baaa:	3b30      	subs	r3, #48	; 0x30
 801baac:	682a      	ldr	r2, [r5, #0]
 801baae:	b29e      	uxth	r6, r3
 801bab0:	2e09      	cmp	r6, #9
 801bab2:	d813      	bhi.n	801badc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801bab4:	fb04 3302 	mla	r3, r4, r2, r3
 801bab8:	602b      	str	r3, [r5, #0]
 801baba:	6803      	ldr	r3, [r0, #0]
 801babc:	b10b      	cbz	r3, 801bac2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801babe:	3302      	adds	r3, #2
 801bac0:	6003      	str	r3, [r0, #0]
 801bac2:	680b      	ldr	r3, [r1, #0]
 801bac4:	b10b      	cbz	r3, 801baca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801bac6:	3301      	adds	r3, #1
 801bac8:	600b      	str	r3, [r1, #0]
 801baca:	6803      	ldr	r3, [r0, #0]
 801bacc:	b10b      	cbz	r3, 801bad2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801bace:	881b      	ldrh	r3, [r3, #0]
 801bad0:	e7eb      	b.n	801baaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801bad2:	680b      	ldr	r3, [r1, #0]
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d0e8      	beq.n	801baaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801bad8:	781b      	ldrb	r3, [r3, #0]
 801bada:	e7e6      	b.n	801baaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801badc:	2a06      	cmp	r2, #6
 801bade:	bfa8      	it	ge
 801bae0:	2206      	movge	r2, #6
 801bae2:	602a      	str	r2, [r5, #0]
 801bae4:	e7b1      	b.n	801ba4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801bae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801bae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baea:	b0a3      	sub	sp, #140	; 0x8c
 801baec:	2600      	movs	r6, #0
 801baee:	4607      	mov	r7, r0
 801baf0:	4688      	mov	r8, r1
 801baf2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801baf6:	4631      	mov	r1, r6
 801baf8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801bafa:	4648      	mov	r0, r9
 801bafc:	960d      	str	r6, [sp, #52]	; 0x34
 801bafe:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801bb02:	2242      	movs	r2, #66	; 0x42
 801bb04:	f00a faf8 	bl	80260f8 <memset>
 801bb08:	b15f      	cbz	r7, 801bb22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801bb0a:	f108 3aff 	add.w	sl, r8, #4294967295
 801bb0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb12:	b152      	cbz	r2, 801bb2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801bb14:	8812      	ldrh	r2, [r2, #0]
 801bb16:	b10a      	cbz	r2, 801bb1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801bb18:	459a      	cmp	sl, r3
 801bb1a:	dc2e      	bgt.n	801bb7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801bb1c:	2200      	movs	r2, #0
 801bb1e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801bb22:	4638      	mov	r0, r7
 801bb24:	b023      	add	sp, #140	; 0x8c
 801bb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb2a:	9a08      	ldr	r2, [sp, #32]
 801bb2c:	2a00      	cmp	r2, #0
 801bb2e:	d0f5      	beq.n	801bb1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801bb30:	7812      	ldrb	r2, [r2, #0]
 801bb32:	e7f0      	b.n	801bb16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801bb34:	2d00      	cmp	r5, #0
 801bb36:	d0ea      	beq.n	801bb0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bb38:	782a      	ldrb	r2, [r5, #0]
 801bb3a:	b142      	cbz	r2, 801bb4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801bb3c:	2a25      	cmp	r2, #37	; 0x25
 801bb3e:	d001      	beq.n	801bb44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801bb40:	459a      	cmp	sl, r3
 801bb42:	dc08      	bgt.n	801bb56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801bb44:	f1bb 0f00 	cmp.w	fp, #0
 801bb48:	d121      	bne.n	801bb8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801bb4a:	2d00      	cmp	r5, #0
 801bb4c:	d0df      	beq.n	801bb0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bb4e:	782a      	ldrb	r2, [r5, #0]
 801bb50:	f04f 0b00 	mov.w	fp, #0
 801bb54:	e01d      	b.n	801bb92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801bb56:	f1bb 0f00 	cmp.w	fp, #0
 801bb5a:	d077      	beq.n	801bc4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801bb5c:	f8bb 2000 	ldrh.w	r2, [fp]
 801bb60:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801bb64:	f1bb 0f00 	cmp.w	fp, #0
 801bb68:	d002      	beq.n	801bb70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801bb6a:	f10b 0202 	add.w	r2, fp, #2
 801bb6e:	9209      	str	r2, [sp, #36]	; 0x24
 801bb70:	b10d      	cbz	r5, 801bb76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801bb72:	3501      	adds	r5, #1
 801bb74:	9508      	str	r5, [sp, #32]
 801bb76:	3301      	adds	r3, #1
 801bb78:	930d      	str	r3, [sp, #52]	; 0x34
 801bb7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb7c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801bb80:	f1bb 0f00 	cmp.w	fp, #0
 801bb84:	d0d6      	beq.n	801bb34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801bb86:	f8bb 2000 	ldrh.w	r2, [fp]
 801bb8a:	2a00      	cmp	r2, #0
 801bb8c:	d1d6      	bne.n	801bb3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801bb8e:	f8bb 2000 	ldrh.w	r2, [fp]
 801bb92:	2a00      	cmp	r2, #0
 801bb94:	d0bb      	beq.n	801bb0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bb96:	459a      	cmp	sl, r3
 801bb98:	ddb9      	ble.n	801bb0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bb9a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801bb9e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801bba2:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801bba6:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801bbaa:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801bbae:	960e      	str	r6, [sp, #56]	; 0x38
 801bbb0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801bbb4:	960f      	str	r6, [sp, #60]	; 0x3c
 801bbb6:	f1bb 0f00 	cmp.w	fp, #0
 801bbba:	d002      	beq.n	801bbc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801bbbc:	f10b 0302 	add.w	r3, fp, #2
 801bbc0:	9309      	str	r3, [sp, #36]	; 0x24
 801bbc2:	b10d      	cbz	r5, 801bbc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801bbc4:	1c6b      	adds	r3, r5, #1
 801bbc6:	9308      	str	r3, [sp, #32]
 801bbc8:	ab0f      	add	r3, sp, #60	; 0x3c
 801bbca:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801bbce:	a908      	add	r1, sp, #32
 801bbd0:	a809      	add	r0, sp, #36	; 0x24
 801bbd2:	9305      	str	r3, [sp, #20]
 801bbd4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801bbd8:	9304      	str	r3, [sp, #16]
 801bbda:	ab0e      	add	r3, sp, #56	; 0x38
 801bbdc:	9303      	str	r3, [sp, #12]
 801bbde:	ab0c      	add	r3, sp, #48	; 0x30
 801bbe0:	9302      	str	r3, [sp, #8]
 801bbe2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801bbe6:	9301      	str	r3, [sp, #4]
 801bbe8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801bbec:	9300      	str	r3, [sp, #0]
 801bbee:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801bbf2:	f7ff fea8 	bl	801b946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801bbf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	bfbf      	itttt	lt
 801bbfc:	6823      	ldrlt	r3, [r4, #0]
 801bbfe:	3404      	addlt	r4, #4
 801bc00:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801bc04:	930e      	strlt	r3, [sp, #56]	; 0x38
 801bc06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	bfbe      	ittt	lt
 801bc0c:	6823      	ldrlt	r3, [r4, #0]
 801bc0e:	3404      	addlt	r4, #4
 801bc10:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801bc14:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801bc18:	bfb8      	it	lt
 801bc1a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801bc1c:	b1d9      	cbz	r1, 801bc56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801bc1e:	880b      	ldrh	r3, [r1, #0]
 801bc20:	2b69      	cmp	r3, #105	; 0x69
 801bc22:	d01f      	beq.n	801bc64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bc24:	d82f      	bhi.n	801bc86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801bc26:	2b58      	cmp	r3, #88	; 0x58
 801bc28:	d01c      	beq.n	801bc64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bc2a:	d818      	bhi.n	801bc5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801bc2c:	2b25      	cmp	r3, #37	; 0x25
 801bc2e:	d034      	beq.n	801bc9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801bc30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc32:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801bc36:	f1bb 0f00 	cmp.w	fp, #0
 801bc3a:	f000 80b7 	beq.w	801bdac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801bc3e:	f8bb 5000 	ldrh.w	r5, [fp]
 801bc42:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801bc46:	3301      	adds	r3, #1
 801bc48:	930d      	str	r3, [sp, #52]	; 0x34
 801bc4a:	e029      	b.n	801bca0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801bc4c:	b10d      	cbz	r5, 801bc52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801bc4e:	782a      	ldrb	r2, [r5, #0]
 801bc50:	e786      	b.n	801bb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801bc52:	462a      	mov	r2, r5
 801bc54:	e784      	b.n	801bb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801bc56:	2a00      	cmp	r2, #0
 801bc58:	d0ea      	beq.n	801bc30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bc5a:	7813      	ldrb	r3, [r2, #0]
 801bc5c:	e7e0      	b.n	801bc20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801bc5e:	3b63      	subs	r3, #99	; 0x63
 801bc60:	2b01      	cmp	r3, #1
 801bc62:	d8e5      	bhi.n	801bc30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bc64:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801bc68:	b329      	cbz	r1, 801bcb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801bc6a:	880b      	ldrh	r3, [r1, #0]
 801bc6c:	2b69      	cmp	r3, #105	; 0x69
 801bc6e:	d063      	beq.n	801bd38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801bc70:	d825      	bhi.n	801bcbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801bc72:	2b63      	cmp	r3, #99	; 0x63
 801bc74:	d038      	beq.n	801bce8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801bc76:	2b64      	cmp	r3, #100	; 0x64
 801bc78:	d05e      	beq.n	801bd38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801bc7a:	2b58      	cmp	r3, #88	; 0x58
 801bc7c:	d07a      	beq.n	801bd74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801bc7e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801bc82:	4625      	mov	r5, r4
 801bc84:	e036      	b.n	801bcf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bc86:	2b73      	cmp	r3, #115	; 0x73
 801bc88:	d0ec      	beq.n	801bc64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bc8a:	d802      	bhi.n	801bc92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801bc8c:	2b6f      	cmp	r3, #111	; 0x6f
 801bc8e:	d1cf      	bne.n	801bc30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bc90:	e7e8      	b.n	801bc64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bc92:	2b75      	cmp	r3, #117	; 0x75
 801bc94:	d0e6      	beq.n	801bc64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bc96:	2b78      	cmp	r3, #120	; 0x78
 801bc98:	e7f9      	b.n	801bc8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801bc9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bc9c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801bca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bca2:	b10b      	cbz	r3, 801bca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801bca4:	3302      	adds	r3, #2
 801bca6:	9309      	str	r3, [sp, #36]	; 0x24
 801bca8:	9b08      	ldr	r3, [sp, #32]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	f43f af2f 	beq.w	801bb0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bcb0:	3301      	adds	r3, #1
 801bcb2:	9308      	str	r3, [sp, #32]
 801bcb4:	e72b      	b.n	801bb0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bcb6:	2a00      	cmp	r2, #0
 801bcb8:	d0e1      	beq.n	801bc7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bcba:	7813      	ldrb	r3, [r2, #0]
 801bcbc:	e7d6      	b.n	801bc6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801bcbe:	2b73      	cmp	r3, #115	; 0x73
 801bcc0:	d036      	beq.n	801bd30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801bcc2:	d807      	bhi.n	801bcd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801bcc4:	2b6f      	cmp	r3, #111	; 0x6f
 801bcc6:	d1da      	bne.n	801bc7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bcc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bcca:	1d25      	adds	r5, r4, #4
 801bccc:	2308      	movs	r3, #8
 801bcce:	eba8 0202 	sub.w	r2, r8, r2
 801bcd2:	e049      	b.n	801bd68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801bcd4:	2b75      	cmp	r3, #117	; 0x75
 801bcd6:	d042      	beq.n	801bd5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801bcd8:	2b78      	cmp	r3, #120	; 0x78
 801bcda:	d1d0      	bne.n	801bc7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bcdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bcde:	1d25      	adds	r5, r4, #4
 801bce0:	2310      	movs	r3, #16
 801bce2:	eba8 0202 	sub.w	r2, r8, r2
 801bce6:	e03f      	b.n	801bd68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801bce8:	7823      	ldrb	r3, [r4, #0]
 801bcea:	1d25      	adds	r5, r4, #4
 801bcec:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801bcf0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801bcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcf6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d051      	beq.n	801bda2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801bcfe:	881a      	ldrh	r2, [r3, #0]
 801bd00:	a80d      	add	r0, sp, #52	; 0x34
 801bd02:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801bd06:	462c      	mov	r4, r5
 801bd08:	9005      	str	r0, [sp, #20]
 801bd0a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801bd0e:	9004      	str	r0, [sp, #16]
 801bd10:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bd12:	9003      	str	r0, [sp, #12]
 801bd14:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801bd18:	9002      	str	r0, [sp, #8]
 801bd1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bd1c:	9001      	str	r0, [sp, #4]
 801bd1e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801bd22:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801bd26:	9000      	str	r0, [sp, #0]
 801bd28:	a810      	add	r0, sp, #64	; 0x40
 801bd2a:	f7ff fd49 	bl	801b7c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801bd2e:	e7b7      	b.n	801bca0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801bd30:	1d25      	adds	r5, r4, #4
 801bd32:	6823      	ldr	r3, [r4, #0]
 801bd34:	9310      	str	r3, [sp, #64]	; 0x40
 801bd36:	e7dd      	b.n	801bcf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bd38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd3a:	230a      	movs	r3, #10
 801bd3c:	4649      	mov	r1, r9
 801bd3e:	6820      	ldr	r0, [r4, #0]
 801bd40:	eba8 0202 	sub.w	r2, r8, r2
 801bd44:	1d25      	adds	r5, r4, #4
 801bd46:	b292      	uxth	r2, r2
 801bd48:	f7ff fd08 	bl	801b75c <_ZN8touchgfx7Unicode4itoaElPtti>
 801bd4c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bd50:	2b2d      	cmp	r3, #45	; 0x2d
 801bd52:	d1cf      	bne.n	801bcf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bd54:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801bd58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd5a:	3302      	adds	r3, #2
 801bd5c:	e7ea      	b.n	801bd34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801bd5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd60:	1d25      	adds	r5, r4, #4
 801bd62:	230a      	movs	r3, #10
 801bd64:	eba8 0202 	sub.w	r2, r8, r2
 801bd68:	b292      	uxth	r2, r2
 801bd6a:	4649      	mov	r1, r9
 801bd6c:	6820      	ldr	r0, [r4, #0]
 801bd6e:	f7ff fcd7 	bl	801b720 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bd72:	e7bf      	b.n	801bcf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bd74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd76:	2310      	movs	r3, #16
 801bd78:	4649      	mov	r1, r9
 801bd7a:	6820      	ldr	r0, [r4, #0]
 801bd7c:	eba8 0202 	sub.w	r2, r8, r2
 801bd80:	1d25      	adds	r5, r4, #4
 801bd82:	b292      	uxth	r2, r2
 801bd84:	f7ff fccc 	bl	801b720 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bd88:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801bd8c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d0af      	beq.n	801bcf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bd94:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801bd98:	2919      	cmp	r1, #25
 801bd9a:	d8f7      	bhi.n	801bd8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bd9c:	3b20      	subs	r3, #32
 801bd9e:	8013      	strh	r3, [r2, #0]
 801bda0:	e7f4      	b.n	801bd8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bda2:	9a08      	ldr	r2, [sp, #32]
 801bda4:	2a00      	cmp	r2, #0
 801bda6:	d0ab      	beq.n	801bd00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bda8:	7812      	ldrb	r2, [r2, #0]
 801bdaa:	e7a9      	b.n	801bd00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bdac:	2d00      	cmp	r5, #0
 801bdae:	f43f af48 	beq.w	801bc42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801bdb2:	782d      	ldrb	r5, [r5, #0]
 801bdb4:	e745      	b.n	801bc42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801bdb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801bdb6:	b507      	push	{r0, r1, r2, lr}
 801bdb8:	9300      	str	r3, [sp, #0]
 801bdba:	4613      	mov	r3, r2
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	f7ff fe92 	bl	801bae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801bdc2:	b003      	add	sp, #12
 801bdc4:	f85d fb04 	ldr.w	pc, [sp], #4

0801bdc8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801bdc8:	b40c      	push	{r2, r3}
 801bdca:	b507      	push	{r0, r1, r2, lr}
 801bdcc:	ab04      	add	r3, sp, #16
 801bdce:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdd2:	9301      	str	r3, [sp, #4]
 801bdd4:	f7ff ffef 	bl	801bdb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801bdd8:	b003      	add	sp, #12
 801bdda:	f85d eb04 	ldr.w	lr, [sp], #4
 801bdde:	b002      	add	sp, #8
 801bde0:	4770      	bx	lr
	...

0801bde4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bde4:	4b01      	ldr	r3, [pc, #4]	; (801bdec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bde6:	6018      	str	r0, [r3, #0]
 801bde8:	4770      	bx	lr
 801bdea:	bf00      	nop
 801bdec:	20056778 	.word	0x20056778

0801bdf0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801bdf0:	4b06      	ldr	r3, [pc, #24]	; (801be0c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801bdf2:	881a      	ldrh	r2, [r3, #0]
 801bdf4:	4282      	cmp	r2, r0
 801bdf6:	d807      	bhi.n	801be08 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801bdf8:	4b05      	ldr	r3, [pc, #20]	; (801be10 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801bdfa:	881b      	ldrh	r3, [r3, #0]
 801bdfc:	4413      	add	r3, r2
 801bdfe:	4298      	cmp	r0, r3
 801be00:	bfac      	ite	ge
 801be02:	2000      	movge	r0, #0
 801be04:	2001      	movlt	r0, #1
 801be06:	4770      	bx	lr
 801be08:	2000      	movs	r0, #0
 801be0a:	4770      	bx	lr
 801be0c:	20056798 	.word	0x20056798
 801be10:	2005679c 	.word	0x2005679c

0801be14 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801be14:	b508      	push	{r3, lr}
 801be16:	4601      	mov	r1, r0
 801be18:	f7ff ffea 	bl	801bdf0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801be1c:	b118      	cbz	r0, 801be26 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801be1e:	4b02      	ldr	r3, [pc, #8]	; (801be28 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801be26:	bd08      	pop	{r3, pc}
 801be28:	2005677c 	.word	0x2005677c

0801be2c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801be2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be30:	4d28      	ldr	r5, [pc, #160]	; (801bed4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801be32:	682b      	ldr	r3, [r5, #0]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d04a      	beq.n	801bece <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801be38:	4a27      	ldr	r2, [pc, #156]	; (801bed8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801be3a:	4e28      	ldr	r6, [pc, #160]	; (801bedc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801be3c:	8810      	ldrh	r0, [r2, #0]
 801be3e:	f8b6 8000 	ldrh.w	r8, [r6]
 801be42:	4c27      	ldr	r4, [pc, #156]	; (801bee0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801be44:	4440      	add	r0, r8
 801be46:	4f27      	ldr	r7, [pc, #156]	; (801bee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801be48:	1c41      	adds	r1, r0, #1
 801be4a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801be4e:	f021 0101 	bic.w	r1, r1, #1
 801be52:	eb03 020e 	add.w	r2, r3, lr
 801be56:	0409      	lsls	r1, r1, #16
 801be58:	6022      	str	r2, [r4, #0]
 801be5a:	0c09      	lsrs	r1, r1, #16
 801be5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801be60:	eb0e 010c 	add.w	r1, lr, ip
 801be64:	185a      	adds	r2, r3, r1
 801be66:	603a      	str	r2, [r7, #0]
 801be68:	220e      	movs	r2, #14
 801be6a:	fb02 f208 	mul.w	r2, r2, r8
 801be6e:	3203      	adds	r2, #3
 801be70:	f022 0203 	bic.w	r2, r2, #3
 801be74:	4411      	add	r1, r2
 801be76:	440b      	add	r3, r1
 801be78:	491b      	ldr	r1, [pc, #108]	; (801bee8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801be7a:	600b      	str	r3, [r1, #0]
 801be7c:	2300      	movs	r3, #0
 801be7e:	491b      	ldr	r1, [pc, #108]	; (801beec <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801be80:	800b      	strh	r3, [r1, #0]
 801be82:	491b      	ldr	r1, [pc, #108]	; (801bef0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801be84:	6809      	ldr	r1, [r1, #0]
 801be86:	eba1 010e 	sub.w	r1, r1, lr
 801be8a:	eba1 010c 	sub.w	r1, r1, ip
 801be8e:	469c      	mov	ip, r3
 801be90:	1a8a      	subs	r2, r1, r2
 801be92:	4918      	ldr	r1, [pc, #96]	; (801bef4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801be94:	600a      	str	r2, [r1, #0]
 801be96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801be9a:	4a17      	ldr	r2, [pc, #92]	; (801bef8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801be9c:	8013      	strh	r3, [r2, #0]
 801be9e:	4283      	cmp	r3, r0
 801bea0:	d10d      	bne.n	801bebe <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801bea2:	8835      	ldrh	r5, [r6, #0]
 801bea4:	2300      	movs	r3, #0
 801bea6:	6838      	ldr	r0, [r7, #0]
 801bea8:	240e      	movs	r4, #14
 801beaa:	429d      	cmp	r5, r3
 801beac:	d90f      	bls.n	801bece <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801beae:	fb04 0203 	mla	r2, r4, r3, r0
 801beb2:	3301      	adds	r3, #1
 801beb4:	7b11      	ldrb	r1, [r2, #12]
 801beb6:	f36f 1145 	bfc	r1, #5, #1
 801beba:	7311      	strb	r1, [r2, #12]
 801bebc:	e7f5      	b.n	801beaa <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801bebe:	682a      	ldr	r2, [r5, #0]
 801bec0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801bec4:	6822      	ldr	r2, [r4, #0]
 801bec6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801beca:	3301      	adds	r3, #1
 801becc:	e7e7      	b.n	801be9e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801bece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bed2:	bf00      	nop
 801bed4:	2005677c 	.word	0x2005677c
 801bed8:	20056798 	.word	0x20056798
 801bedc:	2005679c 	.word	0x2005679c
 801bee0:	20056790 	.word	0x20056790
 801bee4:	20056780 	.word	0x20056780
 801bee8:	20056788 	.word	0x20056788
 801beec:	2005679a 	.word	0x2005679a
 801bef0:	20056784 	.word	0x20056784
 801bef4:	20056794 	.word	0x20056794
 801bef8:	2005678c 	.word	0x2005678c

0801befc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801befc:	4b10      	ldr	r3, [pc, #64]	; (801bf40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801befe:	b510      	push	{r4, lr}
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	b9db      	cbnz	r3, 801bf3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bf04:	b1d1      	cbz	r1, 801bf3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bf06:	4b0f      	ldr	r3, [pc, #60]	; (801bf44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801bf08:	240e      	movs	r4, #14
 801bf0a:	801a      	strh	r2, [r3, #0]
 801bf0c:	b292      	uxth	r2, r2
 801bf0e:	4b0e      	ldr	r3, [pc, #56]	; (801bf48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801bf10:	881b      	ldrh	r3, [r3, #0]
 801bf12:	4413      	add	r3, r2
 801bf14:	4362      	muls	r2, r4
 801bf16:	2406      	movs	r4, #6
 801bf18:	fb04 2203 	mla	r2, r4, r3, r2
 801bf1c:	428a      	cmp	r2, r1
 801bf1e:	d305      	bcc.n	801bf2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801bf20:	4b0a      	ldr	r3, [pc, #40]	; (801bf4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801bf22:	2135      	movs	r1, #53	; 0x35
 801bf24:	4a0a      	ldr	r2, [pc, #40]	; (801bf50 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801bf26:	480b      	ldr	r0, [pc, #44]	; (801bf54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801bf28:	f00a f85a 	bl	8025fe0 <__assert_func>
 801bf2c:	4b0a      	ldr	r3, [pc, #40]	; (801bf58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801bf2e:	6019      	str	r1, [r3, #0]
 801bf30:	4b0a      	ldr	r3, [pc, #40]	; (801bf5c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801bf32:	6018      	str	r0, [r3, #0]
 801bf34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf38:	f7ff bf78 	b.w	801be2c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bf3c:	bd10      	pop	{r4, pc}
 801bf3e:	bf00      	nop
 801bf40:	20056788 	.word	0x20056788
 801bf44:	2005679c 	.word	0x2005679c
 801bf48:	20056798 	.word	0x20056798
 801bf4c:	0802dbb9 	.word	0x0802dbb9
 801bf50:	0802dc4e 	.word	0x0802dc4e
 801bf54:	0802db94 	.word	0x0802db94
 801bf58:	20056784 	.word	0x20056784
 801bf5c:	2005677c 	.word	0x2005677c

0801bf60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bf60:	b470      	push	{r4, r5, r6}
 801bf62:	4c07      	ldr	r4, [pc, #28]	; (801bf80 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bf64:	4605      	mov	r5, r0
 801bf66:	4610      	mov	r0, r2
 801bf68:	9a03      	ldr	r2, [sp, #12]
 801bf6a:	6826      	ldr	r6, [r4, #0]
 801bf6c:	b936      	cbnz	r6, 801bf7c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bf6e:	6025      	str	r5, [r4, #0]
 801bf70:	4c04      	ldr	r4, [pc, #16]	; (801bf84 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bf72:	8021      	strh	r1, [r4, #0]
 801bf74:	4619      	mov	r1, r3
 801bf76:	bc70      	pop	{r4, r5, r6}
 801bf78:	f7ff bfc0 	b.w	801befc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bf7c:	bc70      	pop	{r4, r5, r6}
 801bf7e:	4770      	bx	lr
 801bf80:	200567a0 	.word	0x200567a0
 801bf84:	20056798 	.word	0x20056798

0801bf88 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bf88:	b508      	push	{r3, lr}
 801bf8a:	4b14      	ldr	r3, [pc, #80]	; (801bfdc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bf8c:	6819      	ldr	r1, [r3, #0]
 801bf8e:	b931      	cbnz	r1, 801bf9e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801bf90:	4b13      	ldr	r3, [pc, #76]	; (801bfe0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bf92:	f240 4186 	movw	r1, #1158	; 0x486
 801bf96:	4a13      	ldr	r2, [pc, #76]	; (801bfe4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bf98:	4813      	ldr	r0, [pc, #76]	; (801bfe8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bf9a:	f00a f821 	bl	8025fe0 <__assert_func>
 801bf9e:	4a13      	ldr	r2, [pc, #76]	; (801bfec <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bfa0:	8803      	ldrh	r3, [r0, #0]
 801bfa2:	8812      	ldrh	r2, [r2, #0]
 801bfa4:	4293      	cmp	r3, r2
 801bfa6:	d204      	bcs.n	801bfb2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801bfa8:	2214      	movs	r2, #20
 801bfaa:	fb02 1303 	mla	r3, r2, r3, r1
 801bfae:	8918      	ldrh	r0, [r3, #8]
 801bfb0:	bd08      	pop	{r3, pc}
 801bfb2:	490f      	ldr	r1, [pc, #60]	; (801bff0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801bfb4:	8809      	ldrh	r1, [r1, #0]
 801bfb6:	4411      	add	r1, r2
 801bfb8:	428b      	cmp	r3, r1
 801bfba:	da06      	bge.n	801bfca <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801bfbc:	1a9b      	subs	r3, r3, r2
 801bfbe:	4a0d      	ldr	r2, [pc, #52]	; (801bff4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801bfc0:	210e      	movs	r1, #14
 801bfc2:	6812      	ldr	r2, [r2, #0]
 801bfc4:	fb01 2303 	mla	r3, r1, r3, r2
 801bfc8:	e7f1      	b.n	801bfae <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801bfca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bfce:	4293      	cmp	r3, r2
 801bfd0:	bf0a      	itet	eq
 801bfd2:	4b09      	ldreq	r3, [pc, #36]	; (801bff8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801bfd4:	2000      	movne	r0, #0
 801bfd6:	8818      	ldrheq	r0, [r3, #0]
 801bfd8:	e7ea      	b.n	801bfb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801bfda:	bf00      	nop
 801bfdc:	200567a0 	.word	0x200567a0
 801bfe0:	0802dc12 	.word	0x0802dc12
 801bfe4:	0802dcc5 	.word	0x0802dcc5
 801bfe8:	0802db94 	.word	0x0802db94
 801bfec:	20056798 	.word	0x20056798
 801bff0:	2005679c 	.word	0x2005679c
 801bff4:	20056780 	.word	0x20056780
 801bff8:	200566ec 	.word	0x200566ec

0801bffc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bffc:	b508      	push	{r3, lr}
 801bffe:	4b14      	ldr	r3, [pc, #80]	; (801c050 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801c000:	6819      	ldr	r1, [r3, #0]
 801c002:	b931      	cbnz	r1, 801c012 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801c004:	4b13      	ldr	r3, [pc, #76]	; (801c054 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801c006:	f240 419a 	movw	r1, #1178	; 0x49a
 801c00a:	4a13      	ldr	r2, [pc, #76]	; (801c058 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801c00c:	4813      	ldr	r0, [pc, #76]	; (801c05c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c00e:	f009 ffe7 	bl	8025fe0 <__assert_func>
 801c012:	4a13      	ldr	r2, [pc, #76]	; (801c060 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c014:	8803      	ldrh	r3, [r0, #0]
 801c016:	8812      	ldrh	r2, [r2, #0]
 801c018:	4293      	cmp	r3, r2
 801c01a:	d204      	bcs.n	801c026 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801c01c:	2214      	movs	r2, #20
 801c01e:	fb02 1303 	mla	r3, r2, r3, r1
 801c022:	8958      	ldrh	r0, [r3, #10]
 801c024:	bd08      	pop	{r3, pc}
 801c026:	490f      	ldr	r1, [pc, #60]	; (801c064 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801c028:	8809      	ldrh	r1, [r1, #0]
 801c02a:	4411      	add	r1, r2
 801c02c:	428b      	cmp	r3, r1
 801c02e:	da06      	bge.n	801c03e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801c030:	1a9b      	subs	r3, r3, r2
 801c032:	4a0d      	ldr	r2, [pc, #52]	; (801c068 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801c034:	210e      	movs	r1, #14
 801c036:	6812      	ldr	r2, [r2, #0]
 801c038:	fb01 2303 	mla	r3, r1, r3, r2
 801c03c:	e7f1      	b.n	801c022 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801c03e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c042:	4293      	cmp	r3, r2
 801c044:	bf0a      	itet	eq
 801c046:	4b09      	ldreq	r3, [pc, #36]	; (801c06c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801c048:	2000      	movne	r0, #0
 801c04a:	8818      	ldrheq	r0, [r3, #0]
 801c04c:	e7ea      	b.n	801c024 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801c04e:	bf00      	nop
 801c050:	200567a0 	.word	0x200567a0
 801c054:	0802dc12 	.word	0x0802dc12
 801c058:	0802dcf1 	.word	0x0802dcf1
 801c05c:	0802db94 	.word	0x0802db94
 801c060:	20056798 	.word	0x20056798
 801c064:	2005679c 	.word	0x2005679c
 801c068:	20056780 	.word	0x20056780
 801c06c:	200566ee 	.word	0x200566ee

0801c070 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801c070:	b508      	push	{r3, lr}
 801c072:	4b12      	ldr	r3, [pc, #72]	; (801c0bc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801c074:	6819      	ldr	r1, [r3, #0]
 801c076:	b931      	cbnz	r1, 801c086 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801c078:	4b11      	ldr	r3, [pc, #68]	; (801c0c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801c07a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801c07e:	4a11      	ldr	r2, [pc, #68]	; (801c0c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801c080:	4811      	ldr	r0, [pc, #68]	; (801c0c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801c082:	f009 ffad 	bl	8025fe0 <__assert_func>
 801c086:	8803      	ldrh	r3, [r0, #0]
 801c088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c08c:	4293      	cmp	r3, r2
 801c08e:	d012      	beq.n	801c0b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801c090:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c094:	4293      	cmp	r3, r2
 801c096:	d103      	bne.n	801c0a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801c098:	4b0c      	ldr	r3, [pc, #48]	; (801c0cc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801c09e:	bd08      	pop	{r3, pc}
 801c0a0:	4a0b      	ldr	r2, [pc, #44]	; (801c0d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801c0a2:	6812      	ldr	r2, [r2, #0]
 801c0a4:	b11a      	cbz	r2, 801c0ae <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801c0a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c0aa:	2800      	cmp	r0, #0
 801c0ac:	d1f7      	bne.n	801c09e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c0ae:	2214      	movs	r2, #20
 801c0b0:	4353      	muls	r3, r2
 801c0b2:	58c8      	ldr	r0, [r1, r3]
 801c0b4:	e7f3      	b.n	801c09e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c0b6:	2000      	movs	r0, #0
 801c0b8:	e7f1      	b.n	801c09e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c0ba:	bf00      	nop
 801c0bc:	200567a0 	.word	0x200567a0
 801c0c0:	0802dc12 	.word	0x0802dc12
 801c0c4:	0802dc94 	.word	0x0802dc94
 801c0c8:	0802db94 	.word	0x0802db94
 801c0cc:	200566f8 	.word	0x200566f8
 801c0d0:	2005677c 	.word	0x2005677c

0801c0d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801c0d4:	8802      	ldrh	r2, [r0, #0]
 801c0d6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801c0da:	429a      	cmp	r2, r3
 801c0dc:	d845      	bhi.n	801c16a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c0de:	4b24      	ldr	r3, [pc, #144]	; (801c170 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c0e0:	8818      	ldrh	r0, [r3, #0]
 801c0e2:	4282      	cmp	r2, r0
 801c0e4:	d221      	bcs.n	801c12a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801c0e6:	4b23      	ldr	r3, [pc, #140]	; (801c174 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801c0e8:	6819      	ldr	r1, [r3, #0]
 801c0ea:	2314      	movs	r3, #20
 801c0ec:	fb03 1302 	mla	r3, r3, r2, r1
 801c0f0:	6858      	ldr	r0, [r3, #4]
 801c0f2:	2800      	cmp	r0, #0
 801c0f4:	d03a      	beq.n	801c16c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801c0f6:	4920      	ldr	r1, [pc, #128]	; (801c178 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c0f8:	6809      	ldr	r1, [r1, #0]
 801c0fa:	2900      	cmp	r1, #0
 801c0fc:	d036      	beq.n	801c16c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801c0fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c102:	2900      	cmp	r1, #0
 801c104:	d032      	beq.n	801c16c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801c106:	891a      	ldrh	r2, [r3, #8]
 801c108:	8958      	ldrh	r0, [r3, #10]
 801c10a:	4350      	muls	r0, r2
 801c10c:	7c5a      	ldrb	r2, [r3, #17]
 801c10e:	7cdb      	ldrb	r3, [r3, #19]
 801c110:	0952      	lsrs	r2, r2, #5
 801c112:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801c116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c11a:	2b0b      	cmp	r3, #11
 801c11c:	bf18      	it	ne
 801c11e:	0040      	lslne	r0, r0, #1
 801c120:	3003      	adds	r0, #3
 801c122:	f020 0003 	bic.w	r0, r0, #3
 801c126:	4408      	add	r0, r1
 801c128:	4770      	bx	lr
 801c12a:	4b14      	ldr	r3, [pc, #80]	; (801c17c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801c12c:	881b      	ldrh	r3, [r3, #0]
 801c12e:	4403      	add	r3, r0
 801c130:	429a      	cmp	r2, r3
 801c132:	da1a      	bge.n	801c16a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c134:	4b12      	ldr	r3, [pc, #72]	; (801c180 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801c136:	1a10      	subs	r0, r2, r0
 801c138:	210e      	movs	r1, #14
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	fb01 3000 	mla	r0, r1, r0, r3
 801c140:	7b03      	ldrb	r3, [r0, #12]
 801c142:	f003 031f 	and.w	r3, r3, #31
 801c146:	2b0b      	cmp	r3, #11
 801c148:	d10b      	bne.n	801c162 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c14a:	8903      	ldrh	r3, [r0, #8]
 801c14c:	8940      	ldrh	r0, [r0, #10]
 801c14e:	4358      	muls	r0, r3
 801c150:	4b09      	ldr	r3, [pc, #36]	; (801c178 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c152:	3003      	adds	r0, #3
 801c154:	6819      	ldr	r1, [r3, #0]
 801c156:	f020 0303 	bic.w	r3, r0, #3
 801c15a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c15e:	4418      	add	r0, r3
 801c160:	4770      	bx	lr
 801c162:	2b0d      	cmp	r3, #13
 801c164:	d101      	bne.n	801c16a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c166:	300d      	adds	r0, #13
 801c168:	4770      	bx	lr
 801c16a:	2000      	movs	r0, #0
 801c16c:	4770      	bx	lr
 801c16e:	bf00      	nop
 801c170:	20056798 	.word	0x20056798
 801c174:	200567a0 	.word	0x200567a0
 801c178:	2005677c 	.word	0x2005677c
 801c17c:	2005679c 	.word	0x2005679c
 801c180:	20056780 	.word	0x20056780

0801c184 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c184:	4b17      	ldr	r3, [pc, #92]	; (801c1e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801c186:	b510      	push	{r4, lr}
 801c188:	6819      	ldr	r1, [r3, #0]
 801c18a:	8803      	ldrh	r3, [r0, #0]
 801c18c:	b1e9      	cbz	r1, 801c1ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c18e:	4a16      	ldr	r2, [pc, #88]	; (801c1e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801c190:	8812      	ldrh	r2, [r2, #0]
 801c192:	429a      	cmp	r2, r3
 801c194:	d90a      	bls.n	801c1ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801c196:	2214      	movs	r2, #20
 801c198:	fb02 1303 	mla	r3, r2, r3, r1
 801c19c:	7c58      	ldrb	r0, [r3, #17]
 801c19e:	0942      	lsrs	r2, r0, #5
 801c1a0:	7cd8      	ldrb	r0, [r3, #19]
 801c1a2:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c1a6:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c1aa:	bd10      	pop	{r4, pc}
 801c1ac:	490f      	ldr	r1, [pc, #60]	; (801c1ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c1ae:	8809      	ldrh	r1, [r1, #0]
 801c1b0:	4411      	add	r1, r2
 801c1b2:	428b      	cmp	r3, r1
 801c1b4:	da09      	bge.n	801c1ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c1b6:	1a9b      	subs	r3, r3, r2
 801c1b8:	4a0d      	ldr	r2, [pc, #52]	; (801c1f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c1ba:	210e      	movs	r1, #14
 801c1bc:	6812      	ldr	r2, [r2, #0]
 801c1be:	fb01 2303 	mla	r3, r1, r3, r2
 801c1c2:	7b18      	ldrb	r0, [r3, #12]
 801c1c4:	f000 001f 	and.w	r0, r0, #31
 801c1c8:	e7ef      	b.n	801c1aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c1ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c1ce:	4293      	cmp	r3, r2
 801c1d0:	d106      	bne.n	801c1e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c1d2:	f7e9 fdb1 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 801c1d6:	6803      	ldr	r3, [r0, #0]
 801c1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1de:	4718      	bx	r3
 801c1e0:	2000      	movs	r0, #0
 801c1e2:	e7e2      	b.n	801c1aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c1e4:	200567a0 	.word	0x200567a0
 801c1e8:	20056798 	.word	0x20056798
 801c1ec:	2005679c 	.word	0x2005679c
 801c1f0:	20056780 	.word	0x20056780

0801c1f4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c1f4:	2018      	movs	r0, #24
 801c1f6:	4770      	bx	lr

0801c1f8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c1f8:	2001      	movs	r0, #1
 801c1fa:	4770      	bx	lr

0801c1fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c200:	b085      	sub	sp, #20
 801c202:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c204:	9203      	str	r2, [sp, #12]
 801c206:	6870      	ldr	r0, [r6, #4]
 801c208:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c20c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c210:	9101      	str	r1, [sp, #4]
 801c212:	fa1f f885 	uxth.w	r8, r5
 801c216:	43ed      	mvns	r5, r5
 801c218:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c21c:	b2ed      	uxtb	r5, r5
 801c21e:	fb00 2404 	mla	r4, r0, r4, r2
 801c222:	6832      	ldr	r2, [r6, #0]
 801c224:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c228:	4414      	add	r4, r2
 801c22a:	f8dc 2000 	ldr.w	r2, [ip]
 801c22e:	9202      	str	r2, [sp, #8]
 801c230:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c234:	f102 0e04 	add.w	lr, r2, #4
 801c238:	9a01      	ldr	r2, [sp, #4]
 801c23a:	2a00      	cmp	r2, #0
 801c23c:	dc03      	bgt.n	801c246 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c23e:	9a03      	ldr	r2, [sp, #12]
 801c240:	2a00      	cmp	r2, #0
 801c242:	f340 8116 	ble.w	801c472 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c248:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801c24c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c250:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c252:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801c256:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	dd0e      	ble.n	801c27c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c25e:	1406      	asrs	r6, r0, #16
 801c260:	d405      	bmi.n	801c26e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c262:	4556      	cmp	r6, sl
 801c264:	da03      	bge.n	801c26e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c266:	1416      	asrs	r6, r2, #16
 801c268:	d401      	bmi.n	801c26e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c26a:	454e      	cmp	r6, r9
 801c26c:	db07      	blt.n	801c27e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c26e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c270:	3b01      	subs	r3, #1
 801c272:	3403      	adds	r4, #3
 801c274:	4430      	add	r0, r6
 801c276:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c278:	4432      	add	r2, r6
 801c27a:	e7ee      	b.n	801c25a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c27c:	d063      	beq.n	801c346 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c27e:	1e5e      	subs	r6, r3, #1
 801c280:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801c282:	fb07 0706 	mla	r7, r7, r6, r0
 801c286:	143f      	asrs	r7, r7, #16
 801c288:	d454      	bmi.n	801c334 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c28a:	4557      	cmp	r7, sl
 801c28c:	da52      	bge.n	801c334 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c28e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801c290:	fb07 2606 	mla	r6, r7, r6, r2
 801c294:	1436      	asrs	r6, r6, #16
 801c296:	d44d      	bmi.n	801c334 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c298:	454e      	cmp	r6, r9
 801c29a:	da4b      	bge.n	801c334 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c29c:	1ce6      	adds	r6, r4, #3
 801c29e:	4699      	mov	r9, r3
 801c2a0:	f1b9 0f00 	cmp.w	r9, #0
 801c2a4:	f106 0603 	add.w	r6, r6, #3
 801c2a8:	dd48      	ble.n	801c33c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c2aa:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c2ae:	1417      	asrs	r7, r2, #16
 801c2b0:	9902      	ldr	r1, [sp, #8]
 801c2b2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c2b6:	f109 39ff 	add.w	r9, r9, #4294967295
 801c2ba:	fb0b 1707 	mla	r7, fp, r7, r1
 801c2be:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c2c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c2c4:	f817 700a 	ldrb.w	r7, [r7, sl]
 801c2c8:	fb1b fb05 	smulbb	fp, fp, r5
 801c2cc:	4408      	add	r0, r1
 801c2ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c2d0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c2d4:	440a      	add	r2, r1
 801c2d6:	eb0e 0a07 	add.w	sl, lr, r7
 801c2da:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801c2de:	fb07 b708 	mla	r7, r7, r8, fp
 801c2e2:	b2bf      	uxth	r7, r7
 801c2e4:	f107 0b01 	add.w	fp, r7, #1
 801c2e8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c2ec:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c2f0:	fb1b fb05 	smulbb	fp, fp, r5
 801c2f4:	123f      	asrs	r7, r7, #8
 801c2f6:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c2fa:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c2fe:	fb07 b708 	mla	r7, r7, r8, fp
 801c302:	b2bf      	uxth	r7, r7
 801c304:	f107 0b01 	add.w	fp, r7, #1
 801c308:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c30c:	123f      	asrs	r7, r7, #8
 801c30e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c312:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c316:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c31a:	fb1a fa05 	smulbb	sl, sl, r5
 801c31e:	fb07 a708 	mla	r7, r7, r8, sl
 801c322:	b2bf      	uxth	r7, r7
 801c324:	f107 0a01 	add.w	sl, r7, #1
 801c328:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c32c:	123f      	asrs	r7, r7, #8
 801c32e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c332:	e7b5      	b.n	801c2a0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c334:	2700      	movs	r7, #0
 801c336:	1bde      	subs	r6, r3, r7
 801c338:	2e00      	cmp	r6, #0
 801c33a:	dc42      	bgt.n	801c3c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c33c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c340:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c344:	441c      	add	r4, r3
 801c346:	9b01      	ldr	r3, [sp, #4]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	f340 8092 	ble.w	801c472 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c34e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c354:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c358:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c35c:	eef0 6a62 	vmov.f32	s13, s5
 801c360:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c364:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c368:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c36c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c370:	eef0 6a43 	vmov.f32	s13, s6
 801c374:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c378:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c37c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c380:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c384:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c388:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c38c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c390:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c394:	ee12 2a90 	vmov	r2, s5
 801c398:	eef0 2a47 	vmov.f32	s5, s14
 801c39c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3a0:	ee13 2a10 	vmov	r2, s6
 801c3a4:	9311      	str	r3, [sp, #68]	; 0x44
 801c3a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3a8:	eeb0 3a67 	vmov.f32	s6, s15
 801c3ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3b0:	9312      	str	r3, [sp, #72]	; 0x48
 801c3b2:	9b01      	ldr	r3, [sp, #4]
 801c3b4:	9a03      	ldr	r2, [sp, #12]
 801c3b6:	3b01      	subs	r3, #1
 801c3b8:	9301      	str	r3, [sp, #4]
 801c3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3bc:	bf08      	it	eq
 801c3be:	4613      	moveq	r3, r2
 801c3c0:	e73a      	b.n	801c238 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c3c2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c3c6:	d44e      	bmi.n	801c466 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c3c8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c3cc:	4556      	cmp	r6, sl
 801c3ce:	dd4a      	ble.n	801c466 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c3d0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c3d4:	d447      	bmi.n	801c466 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c3d6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801c3da:	4559      	cmp	r1, fp
 801c3dc:	dd43      	ble.n	801c466 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c3de:	fa0f f986 	sxth.w	r9, r6
 801c3e2:	9902      	ldr	r1, [sp, #8]
 801c3e4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c3e8:	fb0b 1909 	mla	r9, fp, r9, r1
 801c3ec:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c3f0:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c3f4:	fb1b fb05 	smulbb	fp, fp, r5
 801c3f8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c3fc:	eb0e 0a09 	add.w	sl, lr, r9
 801c400:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801c404:	fb09 b908 	mla	r9, r9, r8, fp
 801c408:	fa1f f989 	uxth.w	r9, r9
 801c40c:	f109 0b01 	add.w	fp, r9, #1
 801c410:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c414:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c418:	f804 9006 	strb.w	r9, [r4, r6]
 801c41c:	4426      	add	r6, r4
 801c41e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c422:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c426:	fb1b fb05 	smulbb	fp, fp, r5
 801c42a:	fb09 b908 	mla	r9, r9, r8, fp
 801c42e:	fa1f f989 	uxth.w	r9, r9
 801c432:	f109 0b01 	add.w	fp, r9, #1
 801c436:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c43a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c43e:	f886 9001 	strb.w	r9, [r6, #1]
 801c442:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c446:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c44a:	fb1a fa05 	smulbb	sl, sl, r5
 801c44e:	fb09 a908 	mla	r9, r9, r8, sl
 801c452:	fa1f f989 	uxth.w	r9, r9
 801c456:	f109 0a01 	add.w	sl, r9, #1
 801c45a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c45e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c462:	f886 9002 	strb.w	r9, [r6, #2]
 801c466:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c468:	3701      	adds	r7, #1
 801c46a:	4408      	add	r0, r1
 801c46c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c46e:	440a      	add	r2, r1
 801c470:	e761      	b.n	801c336 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c472:	b005      	add	sp, #20
 801c474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c478 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c47c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c47e:	4693      	mov	fp, r2
 801c480:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c486:	6868      	ldr	r0, [r5, #4]
 801c488:	6877      	ldr	r7, [r6, #4]
 801c48a:	9100      	str	r1, [sp, #0]
 801c48c:	3704      	adds	r7, #4
 801c48e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c492:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801c496:	fb00 2404 	mla	r4, r0, r4, r2
 801c49a:	682a      	ldr	r2, [r5, #0]
 801c49c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c4a0:	4414      	add	r4, r2
 801c4a2:	6832      	ldr	r2, [r6, #0]
 801c4a4:	9201      	str	r2, [sp, #4]
 801c4a6:	9a00      	ldr	r2, [sp, #0]
 801c4a8:	2a00      	cmp	r2, #0
 801c4aa:	dc03      	bgt.n	801c4b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c4ac:	f1bb 0f00 	cmp.w	fp, #0
 801c4b0:	f340 80bc 	ble.w	801c62c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c4b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c4b6:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801c4ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c4be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c4c0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801c4c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	dd0c      	ble.n	801c4e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c4cc:	1405      	asrs	r5, r0, #16
 801c4ce:	d405      	bmi.n	801c4dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c4d0:	4555      	cmp	r5, sl
 801c4d2:	da03      	bge.n	801c4dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c4d4:	1415      	asrs	r5, r2, #16
 801c4d6:	d401      	bmi.n	801c4dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c4d8:	454d      	cmp	r5, r9
 801c4da:	db05      	blt.n	801c4e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c4dc:	4440      	add	r0, r8
 801c4de:	4472      	add	r2, lr
 801c4e0:	3b01      	subs	r3, #1
 801c4e2:	3403      	adds	r4, #3
 801c4e4:	e7f0      	b.n	801c4c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c4e6:	d03f      	beq.n	801c568 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801c4e8:	1e5d      	subs	r5, r3, #1
 801c4ea:	fb08 0c05 	mla	ip, r8, r5, r0
 801c4ee:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c4f2:	d42e      	bmi.n	801c552 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c4f4:	45d4      	cmp	ip, sl
 801c4f6:	da2c      	bge.n	801c552 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c4f8:	fb0e 2505 	mla	r5, lr, r5, r2
 801c4fc:	142d      	asrs	r5, r5, #16
 801c4fe:	d428      	bmi.n	801c552 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c500:	454d      	cmp	r5, r9
 801c502:	da26      	bge.n	801c552 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c504:	1ce5      	adds	r5, r4, #3
 801c506:	469c      	mov	ip, r3
 801c508:	f1bc 0f00 	cmp.w	ip, #0
 801c50c:	f105 0503 	add.w	r5, r5, #3
 801c510:	dd25      	ble.n	801c55e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801c512:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801c516:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c51a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c51e:	4472      	add	r2, lr
 801c520:	468a      	mov	sl, r1
 801c522:	9901      	ldr	r1, [sp, #4]
 801c524:	fb0a 1909 	mla	r9, sl, r9, r1
 801c528:	1401      	asrs	r1, r0, #16
 801c52a:	4440      	add	r0, r8
 801c52c:	f819 9001 	ldrb.w	r9, [r9, r1]
 801c530:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c534:	eb07 0a09 	add.w	sl, r7, r9
 801c538:	f817 9009 	ldrb.w	r9, [r7, r9]
 801c53c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c540:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c544:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c548:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c54c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c550:	e7da      	b.n	801c508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c552:	2500      	movs	r5, #0
 801c554:	eba3 0c05 	sub.w	ip, r3, r5
 801c558:	f1bc 0f00 	cmp.w	ip, #0
 801c55c:	dc3b      	bgt.n	801c5d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c55e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c566:	441c      	add	r4, r3
 801c568:	9b00      	ldr	r3, [sp, #0]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	dd5e      	ble.n	801c62c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c56e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c574:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c578:	eeb0 6a62 	vmov.f32	s12, s5
 801c57c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c580:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c584:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c588:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c58c:	eeb0 6a43 	vmov.f32	s12, s6
 801c590:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c594:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c598:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c59c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5b0:	ee12 2a90 	vmov	r2, s5
 801c5b4:	eef0 2a47 	vmov.f32	s5, s14
 801c5b8:	fb92 f8f3 	sdiv	r8, r2, r3
 801c5bc:	ee13 2a10 	vmov	r2, s6
 801c5c0:	eeb0 3a67 	vmov.f32	s6, s15
 801c5c4:	fb92 fef3 	sdiv	lr, r2, r3
 801c5c8:	9b00      	ldr	r3, [sp, #0]
 801c5ca:	3b01      	subs	r3, #1
 801c5cc:	9300      	str	r3, [sp, #0]
 801c5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c5d0:	bf08      	it	eq
 801c5d2:	465b      	moveq	r3, fp
 801c5d4:	e767      	b.n	801c4a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c5d6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c5da:	d423      	bmi.n	801c624 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c5dc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801c5e0:	45cc      	cmp	ip, r9
 801c5e2:	dd1f      	ble.n	801c624 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c5e4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c5e8:	d41c      	bmi.n	801c624 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c5ea:	68f1      	ldr	r1, [r6, #12]
 801c5ec:	4551      	cmp	r1, sl
 801c5ee:	dd19      	ble.n	801c624 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c5f0:	fa0f fc8c 	sxth.w	ip, ip
 801c5f4:	9901      	ldr	r1, [sp, #4]
 801c5f6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801c5fa:	f81c c009 	ldrb.w	ip, [ip, r9]
 801c5fe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c602:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801c606:	eb07 090c 	add.w	r9, r7, ip
 801c60a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801c60e:	f804 a00c 	strb.w	sl, [r4, ip]
 801c612:	44a4      	add	ip, r4
 801c614:	f899 a001 	ldrb.w	sl, [r9, #1]
 801c618:	f88c a001 	strb.w	sl, [ip, #1]
 801c61c:	f899 9002 	ldrb.w	r9, [r9, #2]
 801c620:	f88c 9002 	strb.w	r9, [ip, #2]
 801c624:	4440      	add	r0, r8
 801c626:	4472      	add	r2, lr
 801c628:	3501      	adds	r5, #1
 801c62a:	e793      	b.n	801c554 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801c62c:	b003      	add	sp, #12
 801c62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c632 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c636:	b085      	sub	sp, #20
 801c638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c63c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c63e:	9202      	str	r2, [sp, #8]
 801c640:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c644:	6860      	ldr	r0, [r4, #4]
 801c646:	9203      	str	r2, [sp, #12]
 801c648:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c64c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c650:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c654:	fb00 2505 	mla	r5, r0, r5, r2
 801c658:	6822      	ldr	r2, [r4, #0]
 801c65a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c65e:	4415      	add	r5, r2
 801c660:	f8dc 2000 	ldr.w	r2, [ip]
 801c664:	9200      	str	r2, [sp, #0]
 801c666:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c66a:	3204      	adds	r2, #4
 801c66c:	9201      	str	r2, [sp, #4]
 801c66e:	2900      	cmp	r1, #0
 801c670:	dc03      	bgt.n	801c67a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c672:	9a02      	ldr	r2, [sp, #8]
 801c674:	2a00      	cmp	r2, #0
 801c676:	f340 8127 	ble.w	801c8c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c67a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c67c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c680:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c686:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c68a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c68e:	2b00      	cmp	r3, #0
 801c690:	dd0d      	ble.n	801c6ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c692:	1422      	asrs	r2, r4, #16
 801c694:	d405      	bmi.n	801c6a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c696:	4542      	cmp	r2, r8
 801c698:	da03      	bge.n	801c6a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c69a:	1402      	asrs	r2, r0, #16
 801c69c:	d401      	bmi.n	801c6a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c69e:	42ba      	cmp	r2, r7
 801c6a0:	db06      	blt.n	801c6b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c6a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c6a4:	4474      	add	r4, lr
 801c6a6:	3b01      	subs	r3, #1
 801c6a8:	3503      	adds	r5, #3
 801c6aa:	4410      	add	r0, r2
 801c6ac:	e7ef      	b.n	801c68e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c6ae:	d075      	beq.n	801c79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c6b0:	1e5a      	subs	r2, r3, #1
 801c6b2:	fb0e 4602 	mla	r6, lr, r2, r4
 801c6b6:	1436      	asrs	r6, r6, #16
 801c6b8:	d465      	bmi.n	801c786 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c6ba:	4546      	cmp	r6, r8
 801c6bc:	da63      	bge.n	801c786 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c6be:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c6c0:	fb06 0202 	mla	r2, r6, r2, r0
 801c6c4:	1412      	asrs	r2, r2, #16
 801c6c6:	d45e      	bmi.n	801c786 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c6c8:	42ba      	cmp	r2, r7
 801c6ca:	da5c      	bge.n	801c786 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c6cc:	1cef      	adds	r7, r5, #3
 801c6ce:	4699      	mov	r9, r3
 801c6d0:	f1b9 0f00 	cmp.w	r9, #0
 801c6d4:	dd5d      	ble.n	801c792 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c6d6:	1402      	asrs	r2, r0, #16
 801c6d8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c6dc:	1426      	asrs	r6, r4, #16
 801c6de:	4692      	mov	sl, r2
 801c6e0:	9a00      	ldr	r2, [sp, #0]
 801c6e2:	fb08 220a 	mla	r2, r8, sl, r2
 801c6e6:	5d92      	ldrb	r2, [r2, r6]
 801c6e8:	9e01      	ldr	r6, [sp, #4]
 801c6ea:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c6ee:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c6f2:	d041      	beq.n	801c778 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c6f4:	9a03      	ldr	r2, [sp, #12]
 801c6f6:	fa5f fb86 	uxtb.w	fp, r6
 801c6fa:	fb02 f808 	mul.w	r8, r2, r8
 801c6fe:	f108 0201 	add.w	r2, r8, #1
 801c702:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c706:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c70a:	1212      	asrs	r2, r2, #8
 801c70c:	fa1f fa82 	uxth.w	sl, r2
 801c710:	43d2      	mvns	r2, r2
 801c712:	fb1b fb0a 	smulbb	fp, fp, sl
 801c716:	b2d2      	uxtb	r2, r2
 801c718:	fb08 b802 	mla	r8, r8, r2, fp
 801c71c:	fa1f f888 	uxth.w	r8, r8
 801c720:	f108 0b01 	add.w	fp, r8, #1
 801c724:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c728:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c72c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c730:	fb1b fb0a 	smulbb	fp, fp, sl
 801c734:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c738:	fb16 fa0a 	smulbb	sl, r6, sl
 801c73c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c740:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c744:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c748:	fb06 aa02 	mla	sl, r6, r2, sl
 801c74c:	fb08 b802 	mla	r8, r8, r2, fp
 801c750:	fa1f fa8a 	uxth.w	sl, sl
 801c754:	fa1f f888 	uxth.w	r8, r8
 801c758:	f10a 0601 	add.w	r6, sl, #1
 801c75c:	f108 0b01 	add.w	fp, r8, #1
 801c760:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c764:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c768:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c76c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c770:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c774:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c778:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c77a:	4474      	add	r4, lr
 801c77c:	3703      	adds	r7, #3
 801c77e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c782:	4410      	add	r0, r2
 801c784:	e7a4      	b.n	801c6d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c786:	f04f 0800 	mov.w	r8, #0
 801c78a:	eba3 0208 	sub.w	r2, r3, r8
 801c78e:	2a00      	cmp	r2, #0
 801c790:	dc3b      	bgt.n	801c80a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801c792:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c796:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c79a:	441d      	add	r5, r3
 801c79c:	2900      	cmp	r1, #0
 801c79e:	f340 8093 	ble.w	801c8c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c7a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7ac:	3901      	subs	r1, #1
 801c7ae:	eeb0 6a62 	vmov.f32	s12, s5
 801c7b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c7b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7be:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c7c2:	eeb0 6a43 	vmov.f32	s12, s6
 801c7c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7ca:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c7ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c7d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c7d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c7da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c7de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c7e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c7e6:	ee12 2a90 	vmov	r2, s5
 801c7ea:	eef0 2a47 	vmov.f32	s5, s14
 801c7ee:	fb92 fef3 	sdiv	lr, r2, r3
 801c7f2:	ee13 2a10 	vmov	r2, s6
 801c7f6:	eeb0 3a67 	vmov.f32	s6, s15
 801c7fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801c7fe:	9a02      	ldr	r2, [sp, #8]
 801c800:	9312      	str	r3, [sp, #72]	; 0x48
 801c802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c804:	bf08      	it	eq
 801c806:	4613      	moveq	r3, r2
 801c808:	e731      	b.n	801c66e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c80a:	1427      	asrs	r7, r4, #16
 801c80c:	d456      	bmi.n	801c8bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c80e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c812:	42be      	cmp	r6, r7
 801c814:	dd52      	ble.n	801c8bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c816:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c81a:	d44f      	bmi.n	801c8bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c81c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c820:	454a      	cmp	r2, r9
 801c822:	dd4b      	ble.n	801c8bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c824:	9a00      	ldr	r2, [sp, #0]
 801c826:	b236      	sxth	r6, r6
 801c828:	fb09 2606 	mla	r6, r9, r6, r2
 801c82c:	5df2      	ldrb	r2, [r6, r7]
 801c82e:	9e01      	ldr	r6, [sp, #4]
 801c830:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c834:	0e3a      	lsrs	r2, r7, #24
 801c836:	d041      	beq.n	801c8bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c838:	9e03      	ldr	r6, [sp, #12]
 801c83a:	fa5f fb87 	uxtb.w	fp, r7
 801c83e:	4372      	muls	r2, r6
 801c840:	1c56      	adds	r6, r2, #1
 801c842:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c846:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c84a:	1212      	asrs	r2, r2, #8
 801c84c:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c850:	fa1f fa82 	uxth.w	sl, r2
 801c854:	43d2      	mvns	r2, r2
 801c856:	fb1b fb0a 	smulbb	fp, fp, sl
 801c85a:	b2d2      	uxtb	r2, r2
 801c85c:	fb09 b902 	mla	r9, r9, r2, fp
 801c860:	fa1f f989 	uxth.w	r9, r9
 801c864:	f109 0b01 	add.w	fp, r9, #1
 801c868:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c86c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c870:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c874:	fb1b fb0a 	smulbb	fp, fp, sl
 801c878:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c87c:	fb17 fa0a 	smulbb	sl, r7, sl
 801c880:	f805 9006 	strb.w	r9, [r5, r6]
 801c884:	442e      	add	r6, r5
 801c886:	78b7      	ldrb	r7, [r6, #2]
 801c888:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c88c:	fb07 aa02 	mla	sl, r7, r2, sl
 801c890:	fb09 b902 	mla	r9, r9, r2, fp
 801c894:	fa1f fa8a 	uxth.w	sl, sl
 801c898:	fa1f f989 	uxth.w	r9, r9
 801c89c:	f10a 0701 	add.w	r7, sl, #1
 801c8a0:	f109 0b01 	add.w	fp, r9, #1
 801c8a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c8a8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8ac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c8b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8b4:	f886 a002 	strb.w	sl, [r6, #2]
 801c8b8:	f886 9001 	strb.w	r9, [r6, #1]
 801c8bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c8be:	4474      	add	r4, lr
 801c8c0:	f108 0801 	add.w	r8, r8, #1
 801c8c4:	4410      	add	r0, r2
 801c8c6:	e760      	b.n	801c78a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801c8c8:	b005      	add	sp, #20
 801c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c8ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c8ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8d2:	b085      	sub	sp, #20
 801c8d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c8d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c8da:	9203      	str	r2, [sp, #12]
 801c8dc:	6868      	ldr	r0, [r5, #4]
 801c8de:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c8e2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c8e6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c8ea:	fb00 2404 	mla	r4, r0, r4, r2
 801c8ee:	682a      	ldr	r2, [r5, #0]
 801c8f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c8f4:	4414      	add	r4, r2
 801c8f6:	f8dc 2000 	ldr.w	r2, [ip]
 801c8fa:	9201      	str	r2, [sp, #4]
 801c8fc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c900:	3204      	adds	r2, #4
 801c902:	9202      	str	r2, [sp, #8]
 801c904:	2900      	cmp	r1, #0
 801c906:	dc03      	bgt.n	801c910 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c908:	9a03      	ldr	r2, [sp, #12]
 801c90a:	2a00      	cmp	r2, #0
 801c90c:	f340 8137 	ble.w	801cb7e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c912:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c916:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c91a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c91c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c920:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c924:	2b00      	cmp	r3, #0
 801c926:	dd0d      	ble.n	801c944 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c928:	1405      	asrs	r5, r0, #16
 801c92a:	d405      	bmi.n	801c938 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c92c:	4545      	cmp	r5, r8
 801c92e:	da03      	bge.n	801c938 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c930:	1415      	asrs	r5, r2, #16
 801c932:	d401      	bmi.n	801c938 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c934:	42bd      	cmp	r5, r7
 801c936:	db06      	blt.n	801c946 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c938:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c93a:	4470      	add	r0, lr
 801c93c:	3b01      	subs	r3, #1
 801c93e:	3403      	adds	r4, #3
 801c940:	442a      	add	r2, r5
 801c942:	e7ef      	b.n	801c924 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801c944:	d070      	beq.n	801ca28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c946:	1e5d      	subs	r5, r3, #1
 801c948:	fb0e 0605 	mla	r6, lr, r5, r0
 801c94c:	1436      	asrs	r6, r6, #16
 801c94e:	d462      	bmi.n	801ca16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c950:	4546      	cmp	r6, r8
 801c952:	da60      	bge.n	801ca16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c954:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c956:	fb06 2505 	mla	r5, r6, r5, r2
 801c95a:	142d      	asrs	r5, r5, #16
 801c95c:	d45b      	bmi.n	801ca16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c95e:	42bd      	cmp	r5, r7
 801c960:	da59      	bge.n	801ca16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c962:	1ce5      	adds	r5, r4, #3
 801c964:	469a      	mov	sl, r3
 801c966:	f1ba 0f00 	cmp.w	sl, #0
 801c96a:	dd58      	ble.n	801ca1e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801c96c:	1416      	asrs	r6, r2, #16
 801c96e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c972:	1407      	asrs	r7, r0, #16
 801c974:	46b1      	mov	r9, r6
 801c976:	9e01      	ldr	r6, [sp, #4]
 801c978:	fb08 6609 	mla	r6, r8, r9, r6
 801c97c:	5df6      	ldrb	r6, [r6, r7]
 801c97e:	9f02      	ldr	r7, [sp, #8]
 801c980:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801c984:	0e37      	lsrs	r7, r6, #24
 801c986:	2fff      	cmp	r7, #255	; 0xff
 801c988:	f000 80f0 	beq.w	801cb6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c98c:	fa5f f887 	uxtb.w	r8, r7
 801c990:	b3d7      	cbz	r7, 801ca08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c992:	fa1f f788 	uxth.w	r7, r8
 801c996:	ea6f 0808 	mvn.w	r8, r8
 801c99a:	fa5f fb86 	uxtb.w	fp, r6
 801c99e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c9a2:	fa5f f888 	uxtb.w	r8, r8
 801c9a6:	fb1b fb07 	smulbb	fp, fp, r7
 801c9aa:	fb09 b908 	mla	r9, r9, r8, fp
 801c9ae:	fa1f f989 	uxth.w	r9, r9
 801c9b2:	f109 0b01 	add.w	fp, r9, #1
 801c9b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9ba:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c9be:	fb1b fb08 	smulbb	fp, fp, r8
 801c9c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9c6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c9ca:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c9ce:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c9d2:	fb09 b907 	mla	r9, r9, r7, fp
 801c9d6:	fa1f f989 	uxth.w	r9, r9
 801c9da:	f109 0b01 	add.w	fp, r9, #1
 801c9de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9e6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c9ea:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c9ee:	fb19 f808 	smulbb	r8, r9, r8
 801c9f2:	fb06 8607 	mla	r6, r6, r7, r8
 801c9f6:	b2b6      	uxth	r6, r6
 801c9f8:	f106 0801 	add.w	r8, r6, #1
 801c9fc:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801ca00:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ca04:	f805 8c01 	strb.w	r8, [r5, #-1]
 801ca08:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ca0a:	4470      	add	r0, lr
 801ca0c:	3503      	adds	r5, #3
 801ca0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca12:	4432      	add	r2, r6
 801ca14:	e7a7      	b.n	801c966 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ca16:	2600      	movs	r6, #0
 801ca18:	1b9d      	subs	r5, r3, r6
 801ca1a:	2d00      	cmp	r5, #0
 801ca1c:	dc3b      	bgt.n	801ca96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ca1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ca22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca26:	441c      	add	r4, r3
 801ca28:	2900      	cmp	r1, #0
 801ca2a:	f340 80a8 	ble.w	801cb7e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ca2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca38:	3901      	subs	r1, #1
 801ca3a:	eeb0 6a62 	vmov.f32	s12, s5
 801ca3e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ca42:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca4a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ca4e:	eeb0 6a43 	vmov.f32	s12, s6
 801ca52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca56:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ca5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca62:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca72:	ee12 2a90 	vmov	r2, s5
 801ca76:	eef0 2a47 	vmov.f32	s5, s14
 801ca7a:	fb92 fef3 	sdiv	lr, r2, r3
 801ca7e:	ee13 2a10 	vmov	r2, s6
 801ca82:	eeb0 3a67 	vmov.f32	s6, s15
 801ca86:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca8a:	9a03      	ldr	r2, [sp, #12]
 801ca8c:	9312      	str	r3, [sp, #72]	; 0x48
 801ca8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca90:	bf08      	it	eq
 801ca92:	4613      	moveq	r3, r2
 801ca94:	e736      	b.n	801c904 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ca96:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ca9a:	d457      	bmi.n	801cb4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ca9c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801caa0:	4547      	cmp	r7, r8
 801caa2:	dd53      	ble.n	801cb4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801caa4:	ea5f 4922 	movs.w	r9, r2, asr #16
 801caa8:	d450      	bmi.n	801cb4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801caaa:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801caae:	454d      	cmp	r5, r9
 801cab0:	dd4c      	ble.n	801cb4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cab2:	9d01      	ldr	r5, [sp, #4]
 801cab4:	b23f      	sxth	r7, r7
 801cab6:	fb09 5707 	mla	r7, r9, r7, r5
 801caba:	f817 5008 	ldrb.w	r5, [r7, r8]
 801cabe:	9f02      	ldr	r7, [sp, #8]
 801cac0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801cac4:	0e2f      	lsrs	r7, r5, #24
 801cac6:	2fff      	cmp	r7, #255	; 0xff
 801cac8:	d045      	beq.n	801cb56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801caca:	fa5f f987 	uxtb.w	r9, r7
 801cace:	b3ef      	cbz	r7, 801cb4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cad0:	fa1f f889 	uxth.w	r8, r9
 801cad4:	ea6f 0909 	mvn.w	r9, r9
 801cad8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801cadc:	fa5f fb85 	uxtb.w	fp, r5
 801cae0:	f814 a007 	ldrb.w	sl, [r4, r7]
 801cae4:	fa5f f989 	uxtb.w	r9, r9
 801cae8:	fb1b fb08 	smulbb	fp, fp, r8
 801caec:	fb0a ba09 	mla	sl, sl, r9, fp
 801caf0:	fa1f fa8a 	uxth.w	sl, sl
 801caf4:	f10a 0b01 	add.w	fp, sl, #1
 801caf8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801cafc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cb00:	f804 a007 	strb.w	sl, [r4, r7]
 801cb04:	4427      	add	r7, r4
 801cb06:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cb0a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801cb0e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801cb12:	fb1b fb09 	smulbb	fp, fp, r9
 801cb16:	fb0a ba08 	mla	sl, sl, r8, fp
 801cb1a:	fa1f fa8a 	uxth.w	sl, sl
 801cb1e:	f10a 0b01 	add.w	fp, sl, #1
 801cb22:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801cb26:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cb2a:	f887 a001 	strb.w	sl, [r7, #1]
 801cb2e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801cb32:	fb1a f909 	smulbb	r9, sl, r9
 801cb36:	fb05 9508 	mla	r5, r5, r8, r9
 801cb3a:	b2ad      	uxth	r5, r5
 801cb3c:	f105 0901 	add.w	r9, r5, #1
 801cb40:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801cb44:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cb48:	f887 9002 	strb.w	r9, [r7, #2]
 801cb4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cb4e:	4470      	add	r0, lr
 801cb50:	3601      	adds	r6, #1
 801cb52:	442a      	add	r2, r5
 801cb54:	e760      	b.n	801ca18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801cb56:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801cb5a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801cb5e:	55e5      	strb	r5, [r4, r7]
 801cb60:	4427      	add	r7, r4
 801cb62:	0c2d      	lsrs	r5, r5, #16
 801cb64:	f887 8001 	strb.w	r8, [r7, #1]
 801cb68:	70bd      	strb	r5, [r7, #2]
 801cb6a:	e7ef      	b.n	801cb4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cb6c:	0a37      	lsrs	r7, r6, #8
 801cb6e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801cb72:	0c36      	lsrs	r6, r6, #16
 801cb74:	f805 7c02 	strb.w	r7, [r5, #-2]
 801cb78:	f805 6c01 	strb.w	r6, [r5, #-1]
 801cb7c:	e744      	b.n	801ca08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801cb7e:	b005      	add	sp, #20
 801cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb88:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cb8a:	9201      	str	r2, [sp, #4]
 801cb8c:	6870      	ldr	r0, [r6, #4]
 801cb8e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801cb92:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801cb96:	fa1f fe85 	uxth.w	lr, r5
 801cb9a:	43ed      	mvns	r5, r5
 801cb9c:	f8dc 8000 	ldr.w	r8, [ip]
 801cba0:	b2ed      	uxtb	r5, r5
 801cba2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801cba6:	fb00 2404 	mla	r4, r0, r4, r2
 801cbaa:	6832      	ldr	r2, [r6, #0]
 801cbac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cbb0:	4414      	add	r4, r2
 801cbb2:	2900      	cmp	r1, #0
 801cbb4:	dc03      	bgt.n	801cbbe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cbb6:	9a01      	ldr	r2, [sp, #4]
 801cbb8:	2a00      	cmp	r2, #0
 801cbba:	f340 810d 	ble.w	801cdd8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801cbbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cbc0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801cbc4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cbc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cbca:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801cbce:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	dd0e      	ble.n	801cbf4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cbd6:	1406      	asrs	r6, r0, #16
 801cbd8:	d405      	bmi.n	801cbe6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cbda:	4556      	cmp	r6, sl
 801cbdc:	da03      	bge.n	801cbe6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cbde:	1416      	asrs	r6, r2, #16
 801cbe0:	d401      	bmi.n	801cbe6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cbe2:	454e      	cmp	r6, r9
 801cbe4:	db07      	blt.n	801cbf6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cbe6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cbe8:	3b01      	subs	r3, #1
 801cbea:	3403      	adds	r4, #3
 801cbec:	4430      	add	r0, r6
 801cbee:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cbf0:	4432      	add	r2, r6
 801cbf2:	e7ee      	b.n	801cbd2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801cbf4:	d060      	beq.n	801ccb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801cbf6:	1e5e      	subs	r6, r3, #1
 801cbf8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cbfa:	fb07 0706 	mla	r7, r7, r6, r0
 801cbfe:	143f      	asrs	r7, r7, #16
 801cc00:	d451      	bmi.n	801cca6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cc02:	4557      	cmp	r7, sl
 801cc04:	da4f      	bge.n	801cca6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cc06:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cc08:	fb07 2606 	mla	r6, r7, r6, r2
 801cc0c:	1436      	asrs	r6, r6, #16
 801cc0e:	d44a      	bmi.n	801cca6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cc10:	454e      	cmp	r6, r9
 801cc12:	da48      	bge.n	801cca6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cc14:	1ce6      	adds	r6, r4, #3
 801cc16:	4699      	mov	r9, r3
 801cc18:	f1b9 0f00 	cmp.w	r9, #0
 801cc1c:	f106 0603 	add.w	r6, r6, #3
 801cc20:	dd45      	ble.n	801ccae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801cc22:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801cc26:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cc2a:	1417      	asrs	r7, r2, #16
 801cc2c:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc30:	fb0b a707 	mla	r7, fp, r7, sl
 801cc34:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801cc38:	fb1b fb05 	smulbb	fp, fp, r5
 801cc3c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cc40:	eb08 0a07 	add.w	sl, r8, r7
 801cc44:	f818 7007 	ldrb.w	r7, [r8, r7]
 801cc48:	fb07 b70e 	mla	r7, r7, lr, fp
 801cc4c:	b2bf      	uxth	r7, r7
 801cc4e:	f107 0b01 	add.w	fp, r7, #1
 801cc52:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cc56:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801cc5a:	fb1b fb05 	smulbb	fp, fp, r5
 801cc5e:	123f      	asrs	r7, r7, #8
 801cc60:	f806 7c06 	strb.w	r7, [r6, #-6]
 801cc64:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801cc68:	fb07 b70e 	mla	r7, r7, lr, fp
 801cc6c:	b2bf      	uxth	r7, r7
 801cc6e:	f107 0b01 	add.w	fp, r7, #1
 801cc72:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cc76:	123f      	asrs	r7, r7, #8
 801cc78:	f806 7c05 	strb.w	r7, [r6, #-5]
 801cc7c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801cc80:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cc84:	fb1a fa05 	smulbb	sl, sl, r5
 801cc88:	fb07 a70e 	mla	r7, r7, lr, sl
 801cc8c:	b2bf      	uxth	r7, r7
 801cc8e:	f107 0a01 	add.w	sl, r7, #1
 801cc92:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cc96:	123f      	asrs	r7, r7, #8
 801cc98:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cc9c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cc9e:	4438      	add	r0, r7
 801cca0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cca2:	443a      	add	r2, r7
 801cca4:	e7b8      	b.n	801cc18 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cca6:	2700      	movs	r7, #0
 801cca8:	1bde      	subs	r6, r3, r7
 801ccaa:	2e00      	cmp	r6, #0
 801ccac:	dc3f      	bgt.n	801cd2e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801ccae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ccb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ccb6:	441c      	add	r4, r3
 801ccb8:	2900      	cmp	r1, #0
 801ccba:	f340 808d 	ble.w	801cdd8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ccbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ccc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ccc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ccc8:	3901      	subs	r1, #1
 801ccca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ccce:	eef0 6a62 	vmov.f32	s13, s5
 801ccd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ccd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ccda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ccde:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801cce2:	eef0 6a43 	vmov.f32	s13, s6
 801cce6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ccea:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801ccee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ccf2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ccf6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ccfa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ccfe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd06:	ee12 2a90 	vmov	r2, s5
 801cd0a:	eef0 2a47 	vmov.f32	s5, s14
 801cd0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd12:	ee13 2a10 	vmov	r2, s6
 801cd16:	930f      	str	r3, [sp, #60]	; 0x3c
 801cd18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd1a:	eeb0 3a67 	vmov.f32	s6, s15
 801cd1e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd22:	9a01      	ldr	r2, [sp, #4]
 801cd24:	9310      	str	r3, [sp, #64]	; 0x40
 801cd26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd28:	bf08      	it	eq
 801cd2a:	4613      	moveq	r3, r2
 801cd2c:	e741      	b.n	801cbb2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cd2e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cd32:	d44b      	bmi.n	801cdcc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cd34:	f8dc b008 	ldr.w	fp, [ip, #8]
 801cd38:	45cb      	cmp	fp, r9
 801cd3a:	dd47      	ble.n	801cdcc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cd3c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cd40:	d444      	bmi.n	801cdcc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cd42:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801cd46:	4556      	cmp	r6, sl
 801cd48:	dd40      	ble.n	801cdcc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cd4a:	fa0f f68b 	sxth.w	r6, fp
 801cd4e:	fb0a 9906 	mla	r9, sl, r6, r9
 801cd52:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cd56:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cd5a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801cd5e:	fb1b fb05 	smulbb	fp, fp, r5
 801cd62:	eb08 0a09 	add.w	sl, r8, r9
 801cd66:	f818 9009 	ldrb.w	r9, [r8, r9]
 801cd6a:	fb09 b90e 	mla	r9, r9, lr, fp
 801cd6e:	fa1f f989 	uxth.w	r9, r9
 801cd72:	f109 0b01 	add.w	fp, r9, #1
 801cd76:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cd7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd7e:	f804 9006 	strb.w	r9, [r4, r6]
 801cd82:	4426      	add	r6, r4
 801cd84:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cd88:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cd8c:	fb1b fb05 	smulbb	fp, fp, r5
 801cd90:	fb09 b90e 	mla	r9, r9, lr, fp
 801cd94:	fa1f f989 	uxth.w	r9, r9
 801cd98:	f109 0b01 	add.w	fp, r9, #1
 801cd9c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cda0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cda4:	f886 9001 	strb.w	r9, [r6, #1]
 801cda8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cdac:	f896 a002 	ldrb.w	sl, [r6, #2]
 801cdb0:	fb1a fa05 	smulbb	sl, sl, r5
 801cdb4:	fb09 a90e 	mla	r9, r9, lr, sl
 801cdb8:	fa1f f989 	uxth.w	r9, r9
 801cdbc:	f109 0a01 	add.w	sl, r9, #1
 801cdc0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801cdc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cdc8:	f886 9002 	strb.w	r9, [r6, #2]
 801cdcc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cdce:	3701      	adds	r7, #1
 801cdd0:	4430      	add	r0, r6
 801cdd2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cdd4:	4432      	add	r2, r6
 801cdd6:	e767      	b.n	801cca8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801cdd8:	b003      	add	sp, #12
 801cdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cdde <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cdde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cde2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cde4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cde8:	9201      	str	r2, [sp, #4]
 801cdea:	6868      	ldr	r0, [r5, #4]
 801cdec:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801cdee:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801cdf2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801cdf6:	fb00 2404 	mla	r4, r0, r4, r2
 801cdfa:	682a      	ldr	r2, [r5, #0]
 801cdfc:	f8d7 8000 	ldr.w	r8, [r7]
 801ce00:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce04:	4414      	add	r4, r2
 801ce06:	2900      	cmp	r1, #0
 801ce08:	dc03      	bgt.n	801ce12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ce0a:	9a01      	ldr	r2, [sp, #4]
 801ce0c:	2a00      	cmp	r2, #0
 801ce0e:	f340 80af 	ble.w	801cf70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ce12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ce14:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ce18:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ce1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ce1e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801ce22:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	dd0c      	ble.n	801ce44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ce2a:	1405      	asrs	r5, r0, #16
 801ce2c:	d405      	bmi.n	801ce3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce2e:	4555      	cmp	r5, sl
 801ce30:	da03      	bge.n	801ce3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce32:	1415      	asrs	r5, r2, #16
 801ce34:	d401      	bmi.n	801ce3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce36:	454d      	cmp	r5, r9
 801ce38:	db05      	blt.n	801ce46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ce3a:	4470      	add	r0, lr
 801ce3c:	4462      	add	r2, ip
 801ce3e:	3b01      	subs	r3, #1
 801ce40:	3403      	adds	r4, #3
 801ce42:	e7f0      	b.n	801ce26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ce44:	d038      	beq.n	801ceb8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ce46:	1e5d      	subs	r5, r3, #1
 801ce48:	fb0e 0605 	mla	r6, lr, r5, r0
 801ce4c:	1436      	asrs	r6, r6, #16
 801ce4e:	d42a      	bmi.n	801cea6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ce50:	4556      	cmp	r6, sl
 801ce52:	da28      	bge.n	801cea6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ce54:	fb0c 2505 	mla	r5, ip, r5, r2
 801ce58:	142d      	asrs	r5, r5, #16
 801ce5a:	d424      	bmi.n	801cea6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ce5c:	454d      	cmp	r5, r9
 801ce5e:	da22      	bge.n	801cea6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ce60:	1ce6      	adds	r6, r4, #3
 801ce62:	4699      	mov	r9, r3
 801ce64:	f1b9 0f00 	cmp.w	r9, #0
 801ce68:	f106 0603 	add.w	r6, r6, #3
 801ce6c:	dd1f      	ble.n	801ceae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801ce6e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801ce72:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ce76:	1415      	asrs	r5, r2, #16
 801ce78:	4470      	add	r0, lr
 801ce7a:	4462      	add	r2, ip
 801ce7c:	f109 39ff 	add.w	r9, r9, #4294967295
 801ce80:	fb0b a505 	mla	r5, fp, r5, sl
 801ce84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce88:	eb08 0a05 	add.w	sl, r8, r5
 801ce8c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801ce90:	f806 5c06 	strb.w	r5, [r6, #-6]
 801ce94:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801ce98:	f806 5c05 	strb.w	r5, [r6, #-5]
 801ce9c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801cea0:	f806 5c04 	strb.w	r5, [r6, #-4]
 801cea4:	e7de      	b.n	801ce64 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cea6:	2600      	movs	r6, #0
 801cea8:	1b9d      	subs	r5, r3, r6
 801ceaa:	2d00      	cmp	r5, #0
 801ceac:	dc38      	bgt.n	801cf20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ceae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ceb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ceb6:	441c      	add	r4, r3
 801ceb8:	2900      	cmp	r1, #0
 801ceba:	dd59      	ble.n	801cf70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801cebc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cec2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cec6:	3901      	subs	r1, #1
 801cec8:	eeb0 6a62 	vmov.f32	s12, s5
 801cecc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ced0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ced4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ced8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cedc:	eeb0 6a43 	vmov.f32	s12, s6
 801cee0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cee4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cee8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ceec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cef0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cef4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cef8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cefc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf00:	ee12 2a90 	vmov	r2, s5
 801cf04:	eef0 2a47 	vmov.f32	s5, s14
 801cf08:	fb92 fef3 	sdiv	lr, r2, r3
 801cf0c:	ee13 2a10 	vmov	r2, s6
 801cf10:	eeb0 3a67 	vmov.f32	s6, s15
 801cf14:	fb92 fcf3 	sdiv	ip, r2, r3
 801cf18:	9a01      	ldr	r2, [sp, #4]
 801cf1a:	bf08      	it	eq
 801cf1c:	4613      	moveq	r3, r2
 801cf1e:	e772      	b.n	801ce06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801cf20:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cf24:	d420      	bmi.n	801cf68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cf26:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801cf2a:	45cb      	cmp	fp, r9
 801cf2c:	dd1c      	ble.n	801cf68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cf2e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cf32:	d419      	bmi.n	801cf68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cf34:	68fd      	ldr	r5, [r7, #12]
 801cf36:	4555      	cmp	r5, sl
 801cf38:	dd16      	ble.n	801cf68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cf3a:	fa0f f58b 	sxth.w	r5, fp
 801cf3e:	fb0a 9505 	mla	r5, sl, r5, r9
 801cf42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cf46:	f818 9005 	ldrb.w	r9, [r8, r5]
 801cf4a:	eb08 0b05 	add.w	fp, r8, r5
 801cf4e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801cf52:	f804 9005 	strb.w	r9, [r4, r5]
 801cf56:	4425      	add	r5, r4
 801cf58:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801cf5c:	f885 9001 	strb.w	r9, [r5, #1]
 801cf60:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801cf64:	f885 9002 	strb.w	r9, [r5, #2]
 801cf68:	4470      	add	r0, lr
 801cf6a:	4462      	add	r2, ip
 801cf6c:	3601      	adds	r6, #1
 801cf6e:	e79b      	b.n	801cea8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801cf70:	b003      	add	sp, #12
 801cf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cf76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf7a:	b085      	sub	sp, #20
 801cf7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cf80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cf82:	9202      	str	r2, [sp, #8]
 801cf84:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801cf88:	6860      	ldr	r0, [r4, #4]
 801cf8a:	9203      	str	r2, [sp, #12]
 801cf8c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801cf90:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801cf94:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cf98:	fb00 2505 	mla	r5, r0, r5, r2
 801cf9c:	6822      	ldr	r2, [r4, #0]
 801cf9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cfa2:	4415      	add	r5, r2
 801cfa4:	f8dc 2000 	ldr.w	r2, [ip]
 801cfa8:	9201      	str	r2, [sp, #4]
 801cfaa:	2900      	cmp	r1, #0
 801cfac:	dc03      	bgt.n	801cfb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801cfae:	9a02      	ldr	r2, [sp, #8]
 801cfb0:	2a00      	cmp	r2, #0
 801cfb2:	f340 8122 	ble.w	801d1fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801cfb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cfb8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cfbc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cfc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cfc2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cfc6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	dd0d      	ble.n	801cfea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cfce:	1422      	asrs	r2, r4, #16
 801cfd0:	d405      	bmi.n	801cfde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cfd2:	4542      	cmp	r2, r8
 801cfd4:	da03      	bge.n	801cfde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cfd6:	1402      	asrs	r2, r0, #16
 801cfd8:	d401      	bmi.n	801cfde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cfda:	42ba      	cmp	r2, r7
 801cfdc:	db06      	blt.n	801cfec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cfde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfe0:	4474      	add	r4, lr
 801cfe2:	3b01      	subs	r3, #1
 801cfe4:	3503      	adds	r5, #3
 801cfe6:	4410      	add	r0, r2
 801cfe8:	e7ef      	b.n	801cfca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cfea:	d072      	beq.n	801d0d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801cfec:	1e5a      	subs	r2, r3, #1
 801cfee:	fb0e 4602 	mla	r6, lr, r2, r4
 801cff2:	1436      	asrs	r6, r6, #16
 801cff4:	d462      	bmi.n	801d0bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cff6:	4546      	cmp	r6, r8
 801cff8:	da60      	bge.n	801d0bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cffa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cffc:	fb06 0202 	mla	r2, r6, r2, r0
 801d000:	1412      	asrs	r2, r2, #16
 801d002:	d45b      	bmi.n	801d0bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d004:	42ba      	cmp	r2, r7
 801d006:	da59      	bge.n	801d0bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d008:	1cef      	adds	r7, r5, #3
 801d00a:	4699      	mov	r9, r3
 801d00c:	f1b9 0f00 	cmp.w	r9, #0
 801d010:	dd5a      	ble.n	801d0c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d012:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d016:	1426      	asrs	r6, r4, #16
 801d018:	1402      	asrs	r2, r0, #16
 801d01a:	fb08 6202 	mla	r2, r8, r2, r6
 801d01e:	9e01      	ldr	r6, [sp, #4]
 801d020:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801d024:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801d028:	d041      	beq.n	801d0ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d02a:	9a03      	ldr	r2, [sp, #12]
 801d02c:	fa5f fb86 	uxtb.w	fp, r6
 801d030:	fb02 f808 	mul.w	r8, r2, r8
 801d034:	f108 0201 	add.w	r2, r8, #1
 801d038:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801d03c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801d040:	1212      	asrs	r2, r2, #8
 801d042:	fa1f fa82 	uxth.w	sl, r2
 801d046:	43d2      	mvns	r2, r2
 801d048:	fb1b fb0a 	smulbb	fp, fp, sl
 801d04c:	b2d2      	uxtb	r2, r2
 801d04e:	fb08 b802 	mla	r8, r8, r2, fp
 801d052:	fa1f f888 	uxth.w	r8, r8
 801d056:	f108 0b01 	add.w	fp, r8, #1
 801d05a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d05e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d062:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d066:	fb1b fb0a 	smulbb	fp, fp, sl
 801d06a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d06e:	fb16 fa0a 	smulbb	sl, r6, sl
 801d072:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d076:	f807 8c03 	strb.w	r8, [r7, #-3]
 801d07a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801d07e:	fb06 aa02 	mla	sl, r6, r2, sl
 801d082:	fb08 b802 	mla	r8, r8, r2, fp
 801d086:	fa1f fa8a 	uxth.w	sl, sl
 801d08a:	fa1f f888 	uxth.w	r8, r8
 801d08e:	f10a 0601 	add.w	r6, sl, #1
 801d092:	f108 0b01 	add.w	fp, r8, #1
 801d096:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d09a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d09e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d0a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d0a6:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d0aa:	f807 8c02 	strb.w	r8, [r7, #-2]
 801d0ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0b0:	4474      	add	r4, lr
 801d0b2:	3703      	adds	r7, #3
 801d0b4:	f109 39ff 	add.w	r9, r9, #4294967295
 801d0b8:	4410      	add	r0, r2
 801d0ba:	e7a7      	b.n	801d00c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d0bc:	f04f 0800 	mov.w	r8, #0
 801d0c0:	eba3 0208 	sub.w	r2, r3, r8
 801d0c4:	2a00      	cmp	r2, #0
 801d0c6:	dc3b      	bgt.n	801d140 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d0c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0d0:	441d      	add	r5, r3
 801d0d2:	2900      	cmp	r1, #0
 801d0d4:	f340 8091 	ble.w	801d1fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d0d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0e2:	3901      	subs	r1, #1
 801d0e4:	eeb0 6a62 	vmov.f32	s12, s5
 801d0e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d0ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0f4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d0f8:	eeb0 6a43 	vmov.f32	s12, s6
 801d0fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d100:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d104:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d108:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d10c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d110:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d114:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d118:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d11c:	ee12 2a90 	vmov	r2, s5
 801d120:	eef0 2a47 	vmov.f32	s5, s14
 801d124:	fb92 fef3 	sdiv	lr, r2, r3
 801d128:	ee13 2a10 	vmov	r2, s6
 801d12c:	eeb0 3a67 	vmov.f32	s6, s15
 801d130:	fb92 f3f3 	sdiv	r3, r2, r3
 801d134:	9a02      	ldr	r2, [sp, #8]
 801d136:	9312      	str	r3, [sp, #72]	; 0x48
 801d138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d13a:	bf08      	it	eq
 801d13c:	4613      	moveq	r3, r2
 801d13e:	e734      	b.n	801cfaa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d140:	1427      	asrs	r7, r4, #16
 801d142:	d454      	bmi.n	801d1ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d144:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d148:	42be      	cmp	r6, r7
 801d14a:	dd50      	ble.n	801d1ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d14c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d150:	d44d      	bmi.n	801d1ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d152:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d156:	454a      	cmp	r2, r9
 801d158:	dd49      	ble.n	801d1ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d15a:	b236      	sxth	r6, r6
 801d15c:	9a01      	ldr	r2, [sp, #4]
 801d15e:	fb09 7606 	mla	r6, r9, r6, r7
 801d162:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d166:	0e3a      	lsrs	r2, r7, #24
 801d168:	d041      	beq.n	801d1ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d16a:	9e03      	ldr	r6, [sp, #12]
 801d16c:	fa5f fb87 	uxtb.w	fp, r7
 801d170:	4372      	muls	r2, r6
 801d172:	1c56      	adds	r6, r2, #1
 801d174:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d178:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801d17c:	1212      	asrs	r2, r2, #8
 801d17e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d182:	fa1f fa82 	uxth.w	sl, r2
 801d186:	43d2      	mvns	r2, r2
 801d188:	fb1b fb0a 	smulbb	fp, fp, sl
 801d18c:	b2d2      	uxtb	r2, r2
 801d18e:	fb09 b902 	mla	r9, r9, r2, fp
 801d192:	fa1f f989 	uxth.w	r9, r9
 801d196:	f109 0b01 	add.w	fp, r9, #1
 801d19a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d19e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d1a2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d1a6:	fb1b fb0a 	smulbb	fp, fp, sl
 801d1aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1ae:	fb17 fa0a 	smulbb	sl, r7, sl
 801d1b2:	f805 9006 	strb.w	r9, [r5, r6]
 801d1b6:	442e      	add	r6, r5
 801d1b8:	78b7      	ldrb	r7, [r6, #2]
 801d1ba:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d1be:	fb07 aa02 	mla	sl, r7, r2, sl
 801d1c2:	fb09 b902 	mla	r9, r9, r2, fp
 801d1c6:	fa1f fa8a 	uxth.w	sl, sl
 801d1ca:	fa1f f989 	uxth.w	r9, r9
 801d1ce:	f10a 0701 	add.w	r7, sl, #1
 801d1d2:	f109 0b01 	add.w	fp, r9, #1
 801d1d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d1da:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d1de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d1e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1e6:	f886 a002 	strb.w	sl, [r6, #2]
 801d1ea:	f886 9001 	strb.w	r9, [r6, #1]
 801d1ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d1f0:	4474      	add	r4, lr
 801d1f2:	f108 0801 	add.w	r8, r8, #1
 801d1f6:	4410      	add	r0, r2
 801d1f8:	e762      	b.n	801d0c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d1fa:	b005      	add	sp, #20
 801d1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d200 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d204:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d20a:	9201      	str	r2, [sp, #4]
 801d20c:	6860      	ldr	r0, [r4, #4]
 801d20e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d212:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801d216:	fb00 2505 	mla	r5, r0, r5, r2
 801d21a:	6822      	ldr	r2, [r4, #0]
 801d21c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d220:	4415      	add	r5, r2
 801d222:	f8dc 2000 	ldr.w	r2, [ip]
 801d226:	9200      	str	r2, [sp, #0]
 801d228:	2900      	cmp	r1, #0
 801d22a:	dc03      	bgt.n	801d234 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d22c:	9a01      	ldr	r2, [sp, #4]
 801d22e:	2a00      	cmp	r2, #0
 801d230:	f340 812b 	ble.w	801d48a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d234:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d236:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d23a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d23e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d240:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d244:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d248:	2b00      	cmp	r3, #0
 801d24a:	dd0e      	ble.n	801d26a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d24c:	1422      	asrs	r2, r4, #16
 801d24e:	d405      	bmi.n	801d25c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d250:	4572      	cmp	r2, lr
 801d252:	da03      	bge.n	801d25c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d254:	1402      	asrs	r2, r0, #16
 801d256:	d401      	bmi.n	801d25c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d258:	42ba      	cmp	r2, r7
 801d25a:	db07      	blt.n	801d26c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d25c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d25e:	3b01      	subs	r3, #1
 801d260:	3503      	adds	r5, #3
 801d262:	4414      	add	r4, r2
 801d264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d266:	4410      	add	r0, r2
 801d268:	e7ee      	b.n	801d248 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d26a:	d06f      	beq.n	801d34c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d26c:	1e5a      	subs	r2, r3, #1
 801d26e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d270:	fb06 4602 	mla	r6, r6, r2, r4
 801d274:	1436      	asrs	r6, r6, #16
 801d276:	d45e      	bmi.n	801d336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d278:	4576      	cmp	r6, lr
 801d27a:	da5c      	bge.n	801d336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d27c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d27e:	fb06 0202 	mla	r2, r6, r2, r0
 801d282:	1412      	asrs	r2, r2, #16
 801d284:	d457      	bmi.n	801d336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d286:	42ba      	cmp	r2, r7
 801d288:	da55      	bge.n	801d336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d28a:	1cee      	adds	r6, r5, #3
 801d28c:	469a      	mov	sl, r3
 801d28e:	f1ba 0f00 	cmp.w	sl, #0
 801d292:	dd56      	ble.n	801d342 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d294:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d298:	1427      	asrs	r7, r4, #16
 801d29a:	1402      	asrs	r2, r0, #16
 801d29c:	fb0e 7202 	mla	r2, lr, r2, r7
 801d2a0:	9f00      	ldr	r7, [sp, #0]
 801d2a2:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d2a6:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801d2aa:	d03c      	beq.n	801d326 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d2ac:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d2b0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d2b4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d2b8:	fa5f f28e 	uxtb.w	r2, lr
 801d2bc:	b2ff      	uxtb	r7, r7
 801d2be:	f000 80dd 	beq.w	801d47c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d2c2:	fa1f f882 	uxth.w	r8, r2
 801d2c6:	43d2      	mvns	r2, r2
 801d2c8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801d2cc:	fb17 f708 	smulbb	r7, r7, r8
 801d2d0:	b2d2      	uxtb	r2, r2
 801d2d2:	fb19 f908 	smulbb	r9, r9, r8
 801d2d6:	fb0e 7702 	mla	r7, lr, r2, r7
 801d2da:	fb1b f808 	smulbb	r8, fp, r8
 801d2de:	b2bf      	uxth	r7, r7
 801d2e0:	f107 0e01 	add.w	lr, r7, #1
 801d2e4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d2e8:	123f      	asrs	r7, r7, #8
 801d2ea:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d2ee:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d2f2:	fb07 9902 	mla	r9, r7, r2, r9
 801d2f6:	fa1f f989 	uxth.w	r9, r9
 801d2fa:	f109 0701 	add.w	r7, r9, #1
 801d2fe:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d302:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d306:	fb07 8802 	mla	r8, r7, r2, r8
 801d30a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d30e:	fa1f f888 	uxth.w	r8, r8
 801d312:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d316:	f108 0201 	add.w	r2, r8, #1
 801d31a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d31e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d322:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d328:	3603      	adds	r6, #3
 801d32a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d32e:	4414      	add	r4, r2
 801d330:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d332:	4410      	add	r0, r2
 801d334:	e7ab      	b.n	801d28e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d336:	f04f 0e00 	mov.w	lr, #0
 801d33a:	eba3 020e 	sub.w	r2, r3, lr
 801d33e:	2a00      	cmp	r2, #0
 801d340:	dc3d      	bgt.n	801d3be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801d342:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d346:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d34a:	441d      	add	r5, r3
 801d34c:	2900      	cmp	r1, #0
 801d34e:	f340 809c 	ble.w	801d48a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d352:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d358:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d35c:	3901      	subs	r1, #1
 801d35e:	eeb0 6a62 	vmov.f32	s12, s5
 801d362:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d366:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d36a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d36e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d372:	eeb0 6a43 	vmov.f32	s12, s6
 801d376:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d37a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d37e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d382:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d386:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d38a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d38e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d392:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d396:	ee12 2a90 	vmov	r2, s5
 801d39a:	eef0 2a47 	vmov.f32	s5, s14
 801d39e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3a2:	ee13 2a10 	vmov	r2, s6
 801d3a6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d3a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3aa:	eeb0 3a67 	vmov.f32	s6, s15
 801d3ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3b2:	9a01      	ldr	r2, [sp, #4]
 801d3b4:	9310      	str	r3, [sp, #64]	; 0x40
 801d3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3b8:	bf08      	it	eq
 801d3ba:	4613      	moveq	r3, r2
 801d3bc:	e734      	b.n	801d228 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d3be:	1427      	asrs	r7, r4, #16
 801d3c0:	d44d      	bmi.n	801d45e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d3c2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d3c6:	42be      	cmp	r6, r7
 801d3c8:	dd49      	ble.n	801d45e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d3ca:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d3ce:	d446      	bmi.n	801d45e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d3d0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d3d4:	4542      	cmp	r2, r8
 801d3d6:	dd42      	ble.n	801d45e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d3d8:	b236      	sxth	r6, r6
 801d3da:	9a00      	ldr	r2, [sp, #0]
 801d3dc:	fb08 7606 	mla	r6, r8, r6, r7
 801d3e0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d3e4:	0e3a      	lsrs	r2, r7, #24
 801d3e6:	d03a      	beq.n	801d45e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d3e8:	2aff      	cmp	r2, #255	; 0xff
 801d3ea:	b2d6      	uxtb	r6, r2
 801d3ec:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d3f0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d3f4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801d3f8:	b2ff      	uxtb	r7, r7
 801d3fa:	d037      	beq.n	801d46c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801d3fc:	fa1f f986 	uxth.w	r9, r6
 801d400:	4472      	add	r2, lr
 801d402:	43f6      	mvns	r6, r6
 801d404:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d408:	fb17 f709 	smulbb	r7, r7, r9
 801d40c:	fb1a fa09 	smulbb	sl, sl, r9
 801d410:	b2f6      	uxtb	r6, r6
 801d412:	fb1b f909 	smulbb	r9, fp, r9
 801d416:	fb08 7706 	mla	r7, r8, r6, r7
 801d41a:	b2bf      	uxth	r7, r7
 801d41c:	f107 0801 	add.w	r8, r7, #1
 801d420:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d424:	123f      	asrs	r7, r7, #8
 801d426:	54af      	strb	r7, [r5, r2]
 801d428:	442a      	add	r2, r5
 801d42a:	7857      	ldrb	r7, [r2, #1]
 801d42c:	fb07 aa06 	mla	sl, r7, r6, sl
 801d430:	fa1f fa8a 	uxth.w	sl, sl
 801d434:	f10a 0701 	add.w	r7, sl, #1
 801d438:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d43c:	7897      	ldrb	r7, [r2, #2]
 801d43e:	fb07 9906 	mla	r9, r7, r6, r9
 801d442:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d446:	fa1f f989 	uxth.w	r9, r9
 801d44a:	f882 a001 	strb.w	sl, [r2, #1]
 801d44e:	f109 0601 	add.w	r6, r9, #1
 801d452:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d456:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d45a:	f882 9002 	strb.w	r9, [r2, #2]
 801d45e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d460:	f10e 0e01 	add.w	lr, lr, #1
 801d464:	4414      	add	r4, r2
 801d466:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d468:	4410      	add	r0, r2
 801d46a:	e766      	b.n	801d33a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d46c:	4472      	add	r2, lr
 801d46e:	54af      	strb	r7, [r5, r2]
 801d470:	442a      	add	r2, r5
 801d472:	f882 a001 	strb.w	sl, [r2, #1]
 801d476:	f882 b002 	strb.w	fp, [r2, #2]
 801d47a:	e7f0      	b.n	801d45e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d47c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d480:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d484:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d488:	e74d      	b.n	801d326 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d48a:	b003      	add	sp, #12
 801d48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d490 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d494:	b087      	sub	sp, #28
 801d496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d49a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d49c:	9204      	str	r2, [sp, #16]
 801d49e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d4a2:	6860      	ldr	r0, [r4, #4]
 801d4a4:	9205      	str	r2, [sp, #20]
 801d4a6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d4aa:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801d4ae:	9101      	str	r1, [sp, #4]
 801d4b0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d4b4:	fb00 2505 	mla	r5, r0, r5, r2
 801d4b8:	6822      	ldr	r2, [r4, #0]
 801d4ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d4be:	4415      	add	r5, r2
 801d4c0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d4c4:	3201      	adds	r2, #1
 801d4c6:	f022 0201 	bic.w	r2, r2, #1
 801d4ca:	9202      	str	r2, [sp, #8]
 801d4cc:	f8dc 2000 	ldr.w	r2, [ip]
 801d4d0:	9203      	str	r2, [sp, #12]
 801d4d2:	9a01      	ldr	r2, [sp, #4]
 801d4d4:	2a00      	cmp	r2, #0
 801d4d6:	dc03      	bgt.n	801d4e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d4d8:	9a04      	ldr	r2, [sp, #16]
 801d4da:	2a00      	cmp	r2, #0
 801d4dc:	f340 8135 	ble.w	801d74a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d4e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d4e2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d4e6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d4ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d4ec:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d4f0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	dd0d      	ble.n	801d514 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d4f8:	1422      	asrs	r2, r4, #16
 801d4fa:	d405      	bmi.n	801d508 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d4fc:	4542      	cmp	r2, r8
 801d4fe:	da03      	bge.n	801d508 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d500:	1402      	asrs	r2, r0, #16
 801d502:	d401      	bmi.n	801d508 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d504:	42ba      	cmp	r2, r7
 801d506:	db06      	blt.n	801d516 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d50a:	4474      	add	r4, lr
 801d50c:	3b01      	subs	r3, #1
 801d50e:	3503      	adds	r5, #3
 801d510:	4410      	add	r0, r2
 801d512:	e7ef      	b.n	801d4f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d514:	d077      	beq.n	801d606 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801d516:	1e5a      	subs	r2, r3, #1
 801d518:	fb0e 4602 	mla	r6, lr, r2, r4
 801d51c:	1436      	asrs	r6, r6, #16
 801d51e:	d469      	bmi.n	801d5f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d520:	4546      	cmp	r6, r8
 801d522:	da67      	bge.n	801d5f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d524:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d526:	fb06 0202 	mla	r2, r6, r2, r0
 801d52a:	1412      	asrs	r2, r2, #16
 801d52c:	d462      	bmi.n	801d5f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d52e:	42ba      	cmp	r2, r7
 801d530:	da60      	bge.n	801d5f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d532:	1cee      	adds	r6, r5, #3
 801d534:	4699      	mov	r9, r3
 801d536:	f1b9 0f00 	cmp.w	r9, #0
 801d53a:	dd5f      	ble.n	801d5fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d53c:	1422      	asrs	r2, r4, #16
 801d53e:	9902      	ldr	r1, [sp, #8]
 801d540:	1407      	asrs	r7, r0, #16
 801d542:	fb01 2707 	mla	r7, r1, r7, r2
 801d546:	9903      	ldr	r1, [sp, #12]
 801d548:	087a      	lsrs	r2, r7, #1
 801d54a:	5c8a      	ldrb	r2, [r1, r2]
 801d54c:	07f9      	lsls	r1, r7, #31
 801d54e:	bf54      	ite	pl
 801d550:	f002 020f 	andpl.w	r2, r2, #15
 801d554:	1112      	asrmi	r2, r2, #4
 801d556:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d55a:	b2d2      	uxtb	r2, r2
 801d55c:	2a00      	cmp	r2, #0
 801d55e:	d042      	beq.n	801d5e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d560:	497b      	ldr	r1, [pc, #492]	; (801d750 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d562:	680f      	ldr	r7, [r1, #0]
 801d564:	9905      	ldr	r1, [sp, #20]
 801d566:	fa5f fb87 	uxtb.w	fp, r7
 801d56a:	434a      	muls	r2, r1
 801d56c:	f102 0801 	add.w	r8, r2, #1
 801d570:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801d574:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801d578:	1212      	asrs	r2, r2, #8
 801d57a:	fa1f fa82 	uxth.w	sl, r2
 801d57e:	43d2      	mvns	r2, r2
 801d580:	fb1b fb0a 	smulbb	fp, fp, sl
 801d584:	b2d2      	uxtb	r2, r2
 801d586:	fb08 b802 	mla	r8, r8, r2, fp
 801d58a:	fa1f f888 	uxth.w	r8, r8
 801d58e:	f108 0b01 	add.w	fp, r8, #1
 801d592:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d596:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d59a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d59e:	fb1b fb0a 	smulbb	fp, fp, sl
 801d5a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d5a6:	fb17 fa0a 	smulbb	sl, r7, sl
 801d5aa:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d5ae:	f806 8c03 	strb.w	r8, [r6, #-3]
 801d5b2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801d5b6:	fb07 aa02 	mla	sl, r7, r2, sl
 801d5ba:	fb08 b802 	mla	r8, r8, r2, fp
 801d5be:	fa1f fa8a 	uxth.w	sl, sl
 801d5c2:	fa1f f888 	uxth.w	r8, r8
 801d5c6:	f10a 0701 	add.w	r7, sl, #1
 801d5ca:	f108 0b01 	add.w	fp, r8, #1
 801d5ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d5d2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d5d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d5da:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d5de:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d5e2:	f806 8c02 	strb.w	r8, [r6, #-2]
 801d5e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5e8:	4474      	add	r4, lr
 801d5ea:	3603      	adds	r6, #3
 801d5ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801d5f0:	4410      	add	r0, r2
 801d5f2:	e7a0      	b.n	801d536 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d5f4:	2700      	movs	r7, #0
 801d5f6:	1bda      	subs	r2, r3, r7
 801d5f8:	2a00      	cmp	r2, #0
 801d5fa:	dc3e      	bgt.n	801d67a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d5fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d600:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d604:	441d      	add	r5, r3
 801d606:	9b01      	ldr	r3, [sp, #4]
 801d608:	2b00      	cmp	r3, #0
 801d60a:	f340 809e 	ble.w	801d74a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d60e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d612:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d614:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d618:	eeb0 6a62 	vmov.f32	s12, s5
 801d61c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d620:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d624:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d628:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d62c:	eeb0 6a43 	vmov.f32	s12, s6
 801d630:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d634:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d638:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d63c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d640:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d644:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d648:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d64c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d650:	ee12 2a90 	vmov	r2, s5
 801d654:	eef0 2a47 	vmov.f32	s5, s14
 801d658:	fb92 fef3 	sdiv	lr, r2, r3
 801d65c:	ee13 2a10 	vmov	r2, s6
 801d660:	eeb0 3a67 	vmov.f32	s6, s15
 801d664:	fb92 f3f3 	sdiv	r3, r2, r3
 801d668:	9314      	str	r3, [sp, #80]	; 0x50
 801d66a:	9b01      	ldr	r3, [sp, #4]
 801d66c:	9a04      	ldr	r2, [sp, #16]
 801d66e:	3b01      	subs	r3, #1
 801d670:	9301      	str	r3, [sp, #4]
 801d672:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d674:	bf08      	it	eq
 801d676:	4613      	moveq	r3, r2
 801d678:	e72b      	b.n	801d4d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d67a:	1426      	asrs	r6, r4, #16
 801d67c:	d460      	bmi.n	801d740 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d67e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d682:	42b2      	cmp	r2, r6
 801d684:	dd5c      	ble.n	801d740 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d686:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d68a:	d459      	bmi.n	801d740 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d68c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d690:	4542      	cmp	r2, r8
 801d692:	dd55      	ble.n	801d740 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d694:	9a02      	ldr	r2, [sp, #8]
 801d696:	9903      	ldr	r1, [sp, #12]
 801d698:	fb08 6602 	mla	r6, r8, r2, r6
 801d69c:	0872      	lsrs	r2, r6, #1
 801d69e:	07f6      	lsls	r6, r6, #31
 801d6a0:	5c8a      	ldrb	r2, [r1, r2]
 801d6a2:	bf54      	ite	pl
 801d6a4:	f002 020f 	andpl.w	r2, r2, #15
 801d6a8:	1112      	asrmi	r2, r2, #4
 801d6aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d6ae:	b2d2      	uxtb	r2, r2
 801d6b0:	2a00      	cmp	r2, #0
 801d6b2:	d045      	beq.n	801d740 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d6b4:	4926      	ldr	r1, [pc, #152]	; (801d750 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d6b6:	f8d1 8000 	ldr.w	r8, [r1]
 801d6ba:	9905      	ldr	r1, [sp, #20]
 801d6bc:	fa5f fb88 	uxtb.w	fp, r8
 801d6c0:	434a      	muls	r2, r1
 801d6c2:	1c56      	adds	r6, r2, #1
 801d6c4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d6c8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d6cc:	1212      	asrs	r2, r2, #8
 801d6ce:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d6d2:	fa1f fa82 	uxth.w	sl, r2
 801d6d6:	43d2      	mvns	r2, r2
 801d6d8:	fb1b fb0a 	smulbb	fp, fp, sl
 801d6dc:	b2d2      	uxtb	r2, r2
 801d6de:	fb09 b902 	mla	r9, r9, r2, fp
 801d6e2:	fa1f f989 	uxth.w	r9, r9
 801d6e6:	f109 0b01 	add.w	fp, r9, #1
 801d6ea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d6ee:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801d6f2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801d6f6:	fb1b fb0a 	smulbb	fp, fp, sl
 801d6fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d6fe:	fb18 fa0a 	smulbb	sl, r8, sl
 801d702:	f805 9006 	strb.w	r9, [r5, r6]
 801d706:	442e      	add	r6, r5
 801d708:	f896 8002 	ldrb.w	r8, [r6, #2]
 801d70c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d710:	fb08 aa02 	mla	sl, r8, r2, sl
 801d714:	fb09 b902 	mla	r9, r9, r2, fp
 801d718:	fa1f fa8a 	uxth.w	sl, sl
 801d71c:	fa1f f989 	uxth.w	r9, r9
 801d720:	f10a 0801 	add.w	r8, sl, #1
 801d724:	f109 0b01 	add.w	fp, r9, #1
 801d728:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801d72c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d730:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d734:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d738:	f886 a002 	strb.w	sl, [r6, #2]
 801d73c:	f886 9001 	strb.w	r9, [r6, #1]
 801d740:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d742:	4474      	add	r4, lr
 801d744:	3701      	adds	r7, #1
 801d746:	4410      	add	r0, r2
 801d748:	e755      	b.n	801d5f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801d74a:	b007      	add	sp, #28
 801d74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d750:	20056720 	.word	0x20056720

0801d754 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d758:	b085      	sub	sp, #20
 801d75a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d75e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d760:	9203      	str	r2, [sp, #12]
 801d762:	6860      	ldr	r0, [r4, #4]
 801d764:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d768:	9100      	str	r1, [sp, #0]
 801d76a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801d76e:	fb00 2606 	mla	r6, r0, r6, r2
 801d772:	6822      	ldr	r2, [r4, #0]
 801d774:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d778:	4416      	add	r6, r2
 801d77a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d77e:	3201      	adds	r2, #1
 801d780:	f022 0201 	bic.w	r2, r2, #1
 801d784:	9201      	str	r2, [sp, #4]
 801d786:	f8dc 2000 	ldr.w	r2, [ip]
 801d78a:	9202      	str	r2, [sp, #8]
 801d78c:	9a00      	ldr	r2, [sp, #0]
 801d78e:	2a00      	cmp	r2, #0
 801d790:	dc03      	bgt.n	801d79a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d792:	9a03      	ldr	r2, [sp, #12]
 801d794:	2a00      	cmp	r2, #0
 801d796:	f340 8140 	ble.w	801da1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d79a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d79c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d7a0:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d7a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d7a6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d7aa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	dd0e      	ble.n	801d7d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d7b2:	142a      	asrs	r2, r5, #16
 801d7b4:	d405      	bmi.n	801d7c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d7b6:	4572      	cmp	r2, lr
 801d7b8:	da03      	bge.n	801d7c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d7ba:	1422      	asrs	r2, r4, #16
 801d7bc:	d401      	bmi.n	801d7c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d7be:	42ba      	cmp	r2, r7
 801d7c0:	db07      	blt.n	801d7d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d7c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d7c4:	3b01      	subs	r3, #1
 801d7c6:	3603      	adds	r6, #3
 801d7c8:	4415      	add	r5, r2
 801d7ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d7cc:	4414      	add	r4, r2
 801d7ce:	e7ee      	b.n	801d7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d7d0:	d072      	beq.n	801d8b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d7d2:	1e5a      	subs	r2, r3, #1
 801d7d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d7d6:	fb00 5002 	mla	r0, r0, r2, r5
 801d7da:	1400      	asrs	r0, r0, #16
 801d7dc:	d463      	bmi.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d7de:	4570      	cmp	r0, lr
 801d7e0:	da61      	bge.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d7e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d7e4:	fb00 4202 	mla	r2, r0, r2, r4
 801d7e8:	1412      	asrs	r2, r2, #16
 801d7ea:	d45c      	bmi.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d7ec:	42ba      	cmp	r2, r7
 801d7ee:	da5a      	bge.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d7f0:	1cf0      	adds	r0, r6, #3
 801d7f2:	469a      	mov	sl, r3
 801d7f4:	f1ba 0f00 	cmp.w	sl, #0
 801d7f8:	dd59      	ble.n	801d8ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d7fa:	142a      	asrs	r2, r5, #16
 801d7fc:	9901      	ldr	r1, [sp, #4]
 801d7fe:	1427      	asrs	r7, r4, #16
 801d800:	fb01 2707 	mla	r7, r1, r7, r2
 801d804:	9902      	ldr	r1, [sp, #8]
 801d806:	087a      	lsrs	r2, r7, #1
 801d808:	5c8a      	ldrb	r2, [r1, r2]
 801d80a:	07f9      	lsls	r1, r7, #31
 801d80c:	bf54      	ite	pl
 801d80e:	f002 020f 	andpl.w	r2, r2, #15
 801d812:	1112      	asrmi	r2, r2, #4
 801d814:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d818:	b2d2      	uxtb	r2, r2
 801d81a:	2a00      	cmp	r2, #0
 801d81c:	d03b      	beq.n	801d896 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d81e:	4980      	ldr	r1, [pc, #512]	; (801da20 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d820:	2aff      	cmp	r2, #255	; 0xff
 801d822:	680f      	ldr	r7, [r1, #0]
 801d824:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d828:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d82c:	b2ff      	uxtb	r7, r7
 801d82e:	f000 80ed 	beq.w	801da0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801d832:	fa1f f882 	uxth.w	r8, r2
 801d836:	43d2      	mvns	r2, r2
 801d838:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801d83c:	fb17 f708 	smulbb	r7, r7, r8
 801d840:	b2d2      	uxtb	r2, r2
 801d842:	fb19 f908 	smulbb	r9, r9, r8
 801d846:	fb0e 7702 	mla	r7, lr, r2, r7
 801d84a:	fb1b f808 	smulbb	r8, fp, r8
 801d84e:	b2bf      	uxth	r7, r7
 801d850:	f107 0e01 	add.w	lr, r7, #1
 801d854:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d858:	123f      	asrs	r7, r7, #8
 801d85a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d85e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d862:	fb07 9902 	mla	r9, r7, r2, r9
 801d866:	fa1f f989 	uxth.w	r9, r9
 801d86a:	f109 0701 	add.w	r7, r9, #1
 801d86e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d872:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d876:	fb07 8802 	mla	r8, r7, r2, r8
 801d87a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d87e:	fa1f f888 	uxth.w	r8, r8
 801d882:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d886:	f108 0201 	add.w	r2, r8, #1
 801d88a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d88e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d892:	f800 8c01 	strb.w	r8, [r0, #-1]
 801d896:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d898:	3003      	adds	r0, #3
 801d89a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d89e:	4415      	add	r5, r2
 801d8a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d8a2:	4414      	add	r4, r2
 801d8a4:	e7a6      	b.n	801d7f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d8a6:	2700      	movs	r7, #0
 801d8a8:	1bda      	subs	r2, r3, r7
 801d8aa:	2a00      	cmp	r2, #0
 801d8ac:	dc40      	bgt.n	801d930 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d8ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8b6:	441e      	add	r6, r3
 801d8b8:	9b00      	ldr	r3, [sp, #0]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	f340 80ad 	ble.w	801da1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d8c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8ca:	eeb0 6a62 	vmov.f32	s12, s5
 801d8ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d8d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d8d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8da:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d8de:	eeb0 6a43 	vmov.f32	s12, s6
 801d8e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8e6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d8ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d8f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d8f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d8fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d8fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d902:	ee12 2a90 	vmov	r2, s5
 801d906:	eef0 2a47 	vmov.f32	s5, s14
 801d90a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d90e:	ee13 2a10 	vmov	r2, s6
 801d912:	9311      	str	r3, [sp, #68]	; 0x44
 801d914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d916:	eeb0 3a67 	vmov.f32	s6, s15
 801d91a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d91e:	9312      	str	r3, [sp, #72]	; 0x48
 801d920:	9b00      	ldr	r3, [sp, #0]
 801d922:	9a03      	ldr	r2, [sp, #12]
 801d924:	3b01      	subs	r3, #1
 801d926:	9300      	str	r3, [sp, #0]
 801d928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d92a:	bf08      	it	eq
 801d92c:	4613      	moveq	r3, r2
 801d92e:	e72d      	b.n	801d78c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d930:	1428      	asrs	r0, r5, #16
 801d932:	d45c      	bmi.n	801d9ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d934:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d938:	4282      	cmp	r2, r0
 801d93a:	dd58      	ble.n	801d9ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d93c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801d940:	d455      	bmi.n	801d9ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d942:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d946:	4572      	cmp	r2, lr
 801d948:	dd51      	ble.n	801d9ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d94a:	9a01      	ldr	r2, [sp, #4]
 801d94c:	9902      	ldr	r1, [sp, #8]
 801d94e:	fb0e 0002 	mla	r0, lr, r2, r0
 801d952:	0842      	lsrs	r2, r0, #1
 801d954:	07c0      	lsls	r0, r0, #31
 801d956:	5c8a      	ldrb	r2, [r1, r2]
 801d958:	bf54      	ite	pl
 801d95a:	f002 020f 	andpl.w	r2, r2, #15
 801d95e:	1112      	asrmi	r2, r2, #4
 801d960:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d964:	b2d2      	uxtb	r2, r2
 801d966:	2a00      	cmp	r2, #0
 801d968:	d041      	beq.n	801d9ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d96a:	492d      	ldr	r1, [pc, #180]	; (801da20 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d96c:	2aff      	cmp	r2, #255	; 0xff
 801d96e:	6808      	ldr	r0, [r1, #0]
 801d970:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d974:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d978:	fa5f fe80 	uxtb.w	lr, r0
 801d97c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d980:	d03b      	beq.n	801d9fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d982:	fa1f f982 	uxth.w	r9, r2
 801d986:	4438      	add	r0, r7
 801d988:	43d2      	mvns	r2, r2
 801d98a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d98e:	fb1e fe09 	smulbb	lr, lr, r9
 801d992:	fb1a fa09 	smulbb	sl, sl, r9
 801d996:	b2d2      	uxtb	r2, r2
 801d998:	fb1b f909 	smulbb	r9, fp, r9
 801d99c:	fb08 ee02 	mla	lr, r8, r2, lr
 801d9a0:	fa1f fe8e 	uxth.w	lr, lr
 801d9a4:	f10e 0801 	add.w	r8, lr, #1
 801d9a8:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801d9ac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d9b0:	f806 e000 	strb.w	lr, [r6, r0]
 801d9b4:	4430      	add	r0, r6
 801d9b6:	f890 e001 	ldrb.w	lr, [r0, #1]
 801d9ba:	fb0e aa02 	mla	sl, lr, r2, sl
 801d9be:	fa1f fa8a 	uxth.w	sl, sl
 801d9c2:	f10a 0e01 	add.w	lr, sl, #1
 801d9c6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801d9ca:	f890 e002 	ldrb.w	lr, [r0, #2]
 801d9ce:	fb0e 9902 	mla	r9, lr, r2, r9
 801d9d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d9d6:	fa1f f989 	uxth.w	r9, r9
 801d9da:	f880 a001 	strb.w	sl, [r0, #1]
 801d9de:	f109 0201 	add.w	r2, r9, #1
 801d9e2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d9e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d9ea:	f880 9002 	strb.w	r9, [r0, #2]
 801d9ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d9f0:	3701      	adds	r7, #1
 801d9f2:	4415      	add	r5, r2
 801d9f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d9f6:	4414      	add	r4, r2
 801d9f8:	e756      	b.n	801d8a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d9fa:	4438      	add	r0, r7
 801d9fc:	f806 e000 	strb.w	lr, [r6, r0]
 801da00:	4430      	add	r0, r6
 801da02:	f880 a001 	strb.w	sl, [r0, #1]
 801da06:	f880 b002 	strb.w	fp, [r0, #2]
 801da0a:	e7f0      	b.n	801d9ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801da0c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801da10:	f800 9c02 	strb.w	r9, [r0, #-2]
 801da14:	f800 bc01 	strb.w	fp, [r0, #-1]
 801da18:	e73d      	b.n	801d896 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801da1a:	b005      	add	sp, #20
 801da1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da20:	20056720 	.word	0x20056720

0801da24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801da24:	4770      	bx	lr

0801da26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801da26:	4770      	bx	lr

0801da28 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801da28:	4770      	bx	lr

0801da2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801da2a:	4770      	bx	lr

0801da2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801da2c:	4770      	bx	lr

0801da2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801da2e:	4770      	bx	lr

0801da30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801da30:	4770      	bx	lr

0801da32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801da32:	4770      	bx	lr

0801da34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801da34:	4770      	bx	lr

0801da36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801da36:	4770      	bx	lr

0801da38 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801da38:	4770      	bx	lr

0801da3a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801da3a:	4770      	bx	lr

0801da3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801da3c:	4770      	bx	lr

0801da3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801da3e:	4770      	bx	lr

0801da40 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801da40:	4770      	bx	lr

0801da42 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801da42:	4770      	bx	lr

0801da44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801da44:	4770      	bx	lr

0801da46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801da46:	4770      	bx	lr

0801da48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801da48:	4770      	bx	lr

0801da4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801da4a:	4770      	bx	lr

0801da4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801da4c:	2bff      	cmp	r3, #255	; 0xff
 801da4e:	b508      	push	{r3, lr}
 801da50:	d04f      	beq.n	801daf2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801da52:	2a2c      	cmp	r2, #44	; 0x2c
 801da54:	d032      	beq.n	801dabc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801da56:	d80f      	bhi.n	801da78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801da58:	2a08      	cmp	r2, #8
 801da5a:	d046      	beq.n	801daea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801da5c:	d805      	bhi.n	801da6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801da5e:	2a04      	cmp	r2, #4
 801da60:	d041      	beq.n	801dae6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801da62:	2a05      	cmp	r2, #5
 801da64:	d03d      	beq.n	801dae2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801da66:	2000      	movs	r0, #0
 801da68:	e027      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da6a:	2a0a      	cmp	r2, #10
 801da6c:	d03d      	beq.n	801daea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801da6e:	d301      	bcc.n	801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801da70:	2a0b      	cmp	r2, #11
 801da72:	d1f8      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da74:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801da76:	e020      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da78:	2a30      	cmp	r2, #48	; 0x30
 801da7a:	d038      	beq.n	801daee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801da7c:	d808      	bhi.n	801da90 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801da7e:	2a2e      	cmp	r2, #46	; 0x2e
 801da80:	684b      	ldr	r3, [r1, #4]
 801da82:	d029      	beq.n	801dad8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801da84:	d90b      	bls.n	801da9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801da86:	781b      	ldrb	r3, [r3, #0]
 801da88:	2b00      	cmp	r3, #0
 801da8a:	d1ec      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da8c:	6a00      	ldr	r0, [r0, #32]
 801da8e:	e014      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da90:	2a32      	cmp	r2, #50	; 0x32
 801da92:	d02c      	beq.n	801daee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801da94:	d301      	bcc.n	801da9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801da96:	2a33      	cmp	r2, #51	; 0x33
 801da98:	d1e5      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da9a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801da9c:	e00d      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da9e:	781b      	ldrb	r3, [r3, #0]
 801daa0:	2b01      	cmp	r3, #1
 801daa2:	d009      	beq.n	801dab8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801daa4:	d3f2      	bcc.n	801da8c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801daa6:	2b02      	cmp	r3, #2
 801daa8:	d1dd      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801daaa:	4b39      	ldr	r3, [pc, #228]	; (801db90 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801daac:	f240 4186 	movw	r1, #1158	; 0x486
 801dab0:	4a38      	ldr	r2, [pc, #224]	; (801db94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801dab2:	4839      	ldr	r0, [pc, #228]	; (801db98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801dab4:	f008 fa94 	bl	8025fe0 <__assert_func>
 801dab8:	6900      	ldr	r0, [r0, #16]
 801daba:	bd08      	pop	{r3, pc}
 801dabc:	684b      	ldr	r3, [r1, #4]
 801dabe:	781b      	ldrb	r3, [r3, #0]
 801dac0:	2b01      	cmp	r3, #1
 801dac2:	d007      	beq.n	801dad4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801dac4:	d30b      	bcc.n	801dade <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801dac6:	2b02      	cmp	r3, #2
 801dac8:	d1cd      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801daca:	4b31      	ldr	r3, [pc, #196]	; (801db90 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801dacc:	f240 4192 	movw	r1, #1170	; 0x492
 801dad0:	4a30      	ldr	r2, [pc, #192]	; (801db94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801dad2:	e7ee      	b.n	801dab2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801dad4:	6880      	ldr	r0, [r0, #8]
 801dad6:	e7f0      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dad8:	781b      	ldrb	r3, [r3, #0]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d1c3      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801dade:	6980      	ldr	r0, [r0, #24]
 801dae0:	e7eb      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dae2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801dae4:	e7e9      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dae6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801dae8:	e7e7      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801daea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801daec:	e7e5      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801daee:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801daf0:	e7e3      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801daf2:	2a2c      	cmp	r2, #44	; 0x2c
 801daf4:	d030      	beq.n	801db58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801daf6:	d80f      	bhi.n	801db18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801daf8:	2a08      	cmp	r2, #8
 801dafa:	d044      	beq.n	801db86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801dafc:	d805      	bhi.n	801db0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801dafe:	2a04      	cmp	r2, #4
 801db00:	d03f      	beq.n	801db82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801db02:	2a05      	cmp	r2, #5
 801db04:	d1af      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801db06:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801db08:	e7d7      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db0a:	2a0a      	cmp	r2, #10
 801db0c:	d03b      	beq.n	801db86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801db0e:	d301      	bcc.n	801db14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801db10:	2a0b      	cmp	r2, #11
 801db12:	d1a8      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801db14:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801db16:	e7d0      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db18:	2a30      	cmp	r2, #48	; 0x30
 801db1a:	d036      	beq.n	801db8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801db1c:	d808      	bhi.n	801db30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801db1e:	2a2e      	cmp	r2, #46	; 0x2e
 801db20:	684b      	ldr	r3, [r1, #4]
 801db22:	d028      	beq.n	801db76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801db24:	d90b      	bls.n	801db3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801db26:	781b      	ldrb	r3, [r3, #0]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d19c      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801db2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801db2e:	e7c4      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db30:	2a32      	cmp	r2, #50	; 0x32
 801db32:	d02a      	beq.n	801db8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801db34:	d301      	bcc.n	801db3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801db36:	2a33      	cmp	r2, #51	; 0x33
 801db38:	d195      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801db3a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801db3c:	e7bd      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db3e:	781b      	ldrb	r3, [r3, #0]
 801db40:	2b01      	cmp	r3, #1
 801db42:	d007      	beq.n	801db54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801db44:	d3f2      	bcc.n	801db2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801db46:	2b02      	cmp	r3, #2
 801db48:	d18d      	bne.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801db4a:	4b11      	ldr	r3, [pc, #68]	; (801db90 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801db4c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 801db50:	4a10      	ldr	r2, [pc, #64]	; (801db94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801db52:	e7ae      	b.n	801dab2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801db54:	6940      	ldr	r0, [r0, #20]
 801db56:	e7b0      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db58:	684b      	ldr	r3, [r1, #4]
 801db5a:	781b      	ldrb	r3, [r3, #0]
 801db5c:	2b01      	cmp	r3, #1
 801db5e:	d008      	beq.n	801db72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801db60:	d30d      	bcc.n	801db7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801db62:	2b02      	cmp	r3, #2
 801db64:	f47f af7f 	bne.w	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801db68:	4b09      	ldr	r3, [pc, #36]	; (801db90 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801db6a:	f240 41cf 	movw	r1, #1231	; 0x4cf
 801db6e:	4a09      	ldr	r2, [pc, #36]	; (801db94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801db70:	e79f      	b.n	801dab2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801db72:	68c0      	ldr	r0, [r0, #12]
 801db74:	e7a1      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db76:	781b      	ldrb	r3, [r3, #0]
 801db78:	2b00      	cmp	r3, #0
 801db7a:	f47f af74 	bne.w	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801db7e:	69c0      	ldr	r0, [r0, #28]
 801db80:	e79b      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db82:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801db84:	e799      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db86:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801db88:	e797      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db8a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801db8c:	e795      	b.n	801daba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801db8e:	bf00      	nop
 801db90:	0802de4d 	.word	0x0802de4d
 801db94:	0802e670 	.word	0x0802e670
 801db98:	0802de99 	.word	0x0802de99

0801db9c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801db9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dba0:	b085      	sub	sp, #20
 801dba2:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 801dba6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dba8:	f1be 0f00 	cmp.w	lr, #0
 801dbac:	f000 8114 	beq.w	801ddd8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801dbb0:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 801dbb4:	f1bc 0f00 	cmp.w	ip, #0
 801dbb8:	f340 810e 	ble.w	801ddd8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801dbbc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801dbc0:	2800      	cmp	r0, #0
 801dbc2:	f340 8109 	ble.w	801ddd8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801dbc6:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801dbca:	4350      	muls	r0, r2
 801dbcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dbd0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801dbd4:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 801dbd8:	eba2 060c 	sub.w	r6, r2, ip
 801dbdc:	fb02 3305 	mla	r3, r2, r5, r3
 801dbe0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dbe4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dbe8:	fa5f f88b 	uxtb.w	r8, fp
 801dbec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbf0:	fa5f f78a 	uxtb.w	r7, sl
 801dbf4:	4419      	add	r1, r3
 801dbf6:	fa5f f984 	uxtb.w	r9, r4
 801dbfa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dbfe:	4408      	add	r0, r1
 801dc00:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801dc04:	d03e      	beq.n	801dc84 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 801dc06:	fa1f f58e 	uxth.w	r5, lr
 801dc0a:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801dc0e:	4463      	add	r3, ip
 801dc10:	fb08 f405 	mul.w	r4, r8, r5
 801dc14:	b292      	uxth	r2, r2
 801dc16:	436f      	muls	r7, r5
 801dc18:	fb09 f505 	mul.w	r5, r9, r5
 801dc1c:	4281      	cmp	r1, r0
 801dc1e:	f080 80db 	bcs.w	801ddd8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801dc22:	eb01 0c03 	add.w	ip, r1, r3
 801dc26:	458c      	cmp	ip, r1
 801dc28:	f101 0e03 	add.w	lr, r1, #3
 801dc2c:	d928      	bls.n	801dc80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801dc2e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801dc32:	fb11 f102 	smulbb	r1, r1, r2
 801dc36:	4429      	add	r1, r5
 801dc38:	b289      	uxth	r1, r1
 801dc3a:	f101 0801 	add.w	r8, r1, #1
 801dc3e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dc42:	1209      	asrs	r1, r1, #8
 801dc44:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801dc48:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801dc4c:	fb11 f102 	smulbb	r1, r1, r2
 801dc50:	4439      	add	r1, r7
 801dc52:	b289      	uxth	r1, r1
 801dc54:	f101 0801 	add.w	r8, r1, #1
 801dc58:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dc5c:	1209      	asrs	r1, r1, #8
 801dc5e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801dc62:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801dc66:	fb11 f102 	smulbb	r1, r1, r2
 801dc6a:	4421      	add	r1, r4
 801dc6c:	b289      	uxth	r1, r1
 801dc6e:	f101 0801 	add.w	r8, r1, #1
 801dc72:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dc76:	1209      	asrs	r1, r1, #8
 801dc78:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801dc7c:	4671      	mov	r1, lr
 801dc7e:	e7d2      	b.n	801dc26 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 801dc80:	4431      	add	r1, r6
 801dc82:	e7cb      	b.n	801dc1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 801dc84:	f012 0503 	ands.w	r5, r2, #3
 801dc88:	d00f      	beq.n	801dcaa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801dc8a:	4463      	add	r3, ip
 801dc8c:	4281      	cmp	r1, r0
 801dc8e:	f080 80a3 	bcs.w	801ddd8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801dc92:	18ca      	adds	r2, r1, r3
 801dc94:	4291      	cmp	r1, r2
 801dc96:	f080 809d 	bcs.w	801ddd4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 801dc9a:	f881 9000 	strb.w	r9, [r1]
 801dc9e:	3103      	adds	r1, #3
 801dca0:	f801 7c02 	strb.w	r7, [r1, #-2]
 801dca4:	f801 8c01 	strb.w	r8, [r1, #-1]
 801dca8:	e7f4      	b.n	801dc94 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801dcaa:	f001 0603 	and.w	r6, r1, #3
 801dcae:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 801dcb2:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 801dcb6:	4463      	add	r3, ip
 801dcb8:	2e02      	cmp	r6, #2
 801dcba:	b2bf      	uxth	r7, r7
 801dcbc:	fa1f fa8a 	uxth.w	sl, sl
 801dcc0:	d017      	beq.n	801dcf2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801dcc2:	2e03      	cmp	r6, #3
 801dcc4:	d00c      	beq.n	801dce0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801dcc6:	2e01      	cmp	r6, #1
 801dcc8:	d11f      	bne.n	801dd0a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801dcca:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801dcce:	460d      	mov	r5, r1
 801dcd0:	4285      	cmp	r5, r0
 801dcd2:	d230      	bcs.n	801dd36 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 801dcd4:	f885 9000 	strb.w	r9, [r5]
 801dcd8:	f8a5 7001 	strh.w	r7, [r5, #1]
 801dcdc:	4435      	add	r5, r6
 801dcde:	e7f7      	b.n	801dcd0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 801dce0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801dce4:	460d      	mov	r5, r1
 801dce6:	4285      	cmp	r5, r0
 801dce8:	d20c      	bcs.n	801dd04 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801dcea:	f885 9000 	strb.w	r9, [r5]
 801dcee:	4435      	add	r5, r6
 801dcf0:	e7f9      	b.n	801dce6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801dcf2:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801dcf6:	460d      	mov	r5, r1
 801dcf8:	4285      	cmp	r5, r0
 801dcfa:	d218      	bcs.n	801dd2e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801dcfc:	f8a5 a000 	strh.w	sl, [r5]
 801dd00:	4435      	add	r5, r6
 801dd02:	e7f9      	b.n	801dcf8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 801dd04:	3b01      	subs	r3, #1
 801dd06:	3101      	adds	r1, #1
 801dd08:	2501      	movs	r5, #1
 801dd0a:	f003 0603 	and.w	r6, r3, #3
 801dd0e:	2e02      	cmp	r6, #2
 801dd10:	d021      	beq.n	801dd56 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 801dd12:	2e03      	cmp	r6, #3
 801dd14:	d013      	beq.n	801dd3e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 801dd16:	2e01      	cmp	r6, #1
 801dd18:	d126      	bne.n	801dd68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801dd1a:	3b01      	subs	r3, #1
 801dd1c:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801dd20:	18ce      	adds	r6, r1, r3
 801dd22:	4286      	cmp	r6, r0
 801dd24:	d220      	bcs.n	801dd68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801dd26:	f886 8000 	strb.w	r8, [r6]
 801dd2a:	443e      	add	r6, r7
 801dd2c:	e7f9      	b.n	801dd22 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801dd2e:	3b02      	subs	r3, #2
 801dd30:	3102      	adds	r1, #2
 801dd32:	2502      	movs	r5, #2
 801dd34:	e7e9      	b.n	801dd0a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801dd36:	3b03      	subs	r3, #3
 801dd38:	3103      	adds	r1, #3
 801dd3a:	2500      	movs	r5, #0
 801dd3c:	e7e5      	b.n	801dd0a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801dd3e:	3b03      	subs	r3, #3
 801dd40:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801dd44:	18ce      	adds	r6, r1, r3
 801dd46:	4286      	cmp	r6, r0
 801dd48:	d20e      	bcs.n	801dd68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801dd4a:	f8a6 a000 	strh.w	sl, [r6]
 801dd4e:	f886 8002 	strb.w	r8, [r6, #2]
 801dd52:	443e      	add	r6, r7
 801dd54:	e7f7      	b.n	801dd46 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 801dd56:	3b02      	subs	r3, #2
 801dd58:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801dd5c:	18ce      	adds	r6, r1, r3
 801dd5e:	4286      	cmp	r6, r0
 801dd60:	d202      	bcs.n	801dd68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801dd62:	8037      	strh	r7, [r6, #0]
 801dd64:	4466      	add	r6, ip
 801dd66:	e7fa      	b.n	801dd5e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 801dd68:	079e      	lsls	r6, r3, #30
 801dd6a:	d006      	beq.n	801dd7a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801dd6c:	4b1c      	ldr	r3, [pc, #112]	; (801dde0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801dd6e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 801dd72:	4a1c      	ldr	r2, [pc, #112]	; (801dde4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 801dd74:	481c      	ldr	r0, [pc, #112]	; (801dde8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 801dd76:	f008 f933 	bl	8025fe0 <__assert_func>
 801dd7a:	b36b      	cbz	r3, 801ddd8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801dd7c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 801dd80:	109b      	asrs	r3, r3, #2
 801dd82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dd86:	2703      	movs	r7, #3
 801dd88:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 801dd8c:	9601      	str	r6, [sp, #4]
 801dd8e:	0426      	lsls	r6, r4, #16
 801dd90:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 801dd94:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 801dd98:	9602      	str	r6, [sp, #8]
 801dd9a:	009e      	lsls	r6, r3, #2
 801dd9c:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 801dda0:	9403      	str	r4, [sp, #12]
 801dda2:	009b      	lsls	r3, r3, #2
 801dda4:	4281      	cmp	r1, r0
 801dda6:	d217      	bcs.n	801ddd8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801dda8:	eb01 0c06 	add.w	ip, r1, r6
 801ddac:	462a      	mov	r2, r5
 801ddae:	4561      	cmp	r1, ip
 801ddb0:	d20e      	bcs.n	801ddd0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 801ddb2:	f10d 0e10 	add.w	lr, sp, #16
 801ddb6:	1c54      	adds	r4, r2, #1
 801ddb8:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801ddbc:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801ddc0:	f841 2b04 	str.w	r2, [r1], #4
 801ddc4:	fb94 f2f7 	sdiv	r2, r4, r7
 801ddc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ddcc:	1aa2      	subs	r2, r4, r2
 801ddce:	e7ee      	b.n	801ddae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 801ddd0:	4419      	add	r1, r3
 801ddd2:	e7e7      	b.n	801dda4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 801ddd4:	4431      	add	r1, r6
 801ddd6:	e759      	b.n	801dc8c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 801ddd8:	b005      	add	sp, #20
 801ddda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddde:	bf00      	nop
 801dde0:	0802dd69 	.word	0x0802dd69
 801dde4:	0802e3ba 	.word	0x0802e3ba
 801dde8:	0802de99 	.word	0x0802de99

0801ddec <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801ddec:	b508      	push	{r3, lr}
 801ddee:	4b06      	ldr	r3, [pc, #24]	; (801de08 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801ddf0:	8818      	ldrh	r0, [r3, #0]
 801ddf2:	b928      	cbnz	r0, 801de00 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801ddf4:	4b05      	ldr	r3, [pc, #20]	; (801de0c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801ddf6:	214d      	movs	r1, #77	; 0x4d
 801ddf8:	4a05      	ldr	r2, [pc, #20]	; (801de10 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801ddfa:	4806      	ldr	r0, [pc, #24]	; (801de14 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801ddfc:	f008 f8f0 	bl	8025fe0 <__assert_func>
 801de00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801de04:	b280      	uxth	r0, r0
 801de06:	bd08      	pop	{r3, pc}
 801de08:	200566f2 	.word	0x200566f2
 801de0c:	0802e0e6 	.word	0x0802e0e6
 801de10:	0802e635 	.word	0x0802e635
 801de14:	0802e128 	.word	0x0802e128

0801de18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801de18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de1c:	b08b      	sub	sp, #44	; 0x2c
 801de1e:	460d      	mov	r5, r1
 801de20:	4616      	mov	r6, r2
 801de22:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801de26:	f1b8 0f00 	cmp.w	r8, #0
 801de2a:	d045      	beq.n	801deb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801de2c:	6810      	ldr	r0, [r2, #0]
 801de2e:	ac06      	add	r4, sp, #24
 801de30:	6851      	ldr	r1, [r2, #4]
 801de32:	4f50      	ldr	r7, [pc, #320]	; (801df74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 801de34:	c403      	stmia	r4!, {r0, r1}
 801de36:	6818      	ldr	r0, [r3, #0]
 801de38:	ac08      	add	r4, sp, #32
 801de3a:	6859      	ldr	r1, [r3, #4]
 801de3c:	c403      	stmia	r4!, {r0, r1}
 801de3e:	a806      	add	r0, sp, #24
 801de40:	f7fa fe62 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de44:	4631      	mov	r1, r6
 801de46:	a808      	add	r0, sp, #32
 801de48:	f7fa fe46 	bl	8018ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de4c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801de50:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801de54:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801de58:	6838      	ldr	r0, [r7, #0]
 801de5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801de5e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801de62:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801de66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801de6a:	440d      	add	r5, r1
 801de6c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801de70:	440a      	add	r2, r1
 801de72:	f8ad 2020 	strh.w	r2, [sp, #32]
 801de76:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801de7a:	4413      	add	r3, r2
 801de7c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801de80:	6803      	ldr	r3, [r0, #0]
 801de82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de84:	4798      	blx	r3
 801de86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801de8a:	d018      	beq.n	801debe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801de8c:	f010 0f04 	tst.w	r0, #4
 801de90:	6838      	ldr	r0, [r7, #0]
 801de92:	d017      	beq.n	801dec4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801de94:	2700      	movs	r7, #0
 801de96:	6801      	ldr	r1, [r0, #0]
 801de98:	b2a4      	uxth	r4, r4
 801de9a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801de9e:	b2b6      	uxth	r6, r6
 801dea0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dea4:	9401      	str	r4, [sp, #4]
 801dea6:	9600      	str	r6, [sp, #0]
 801dea8:	e9cd 8703 	strd	r8, r7, [sp, #12]
 801deac:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801deb0:	9702      	str	r7, [sp, #8]
 801deb2:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 801deb4:	4629      	mov	r1, r5
 801deb6:	47a0      	blx	r4
 801deb8:	b00b      	add	sp, #44	; 0x2c
 801deba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801debe:	f010 0f01 	tst.w	r0, #1
 801dec2:	e7e5      	b.n	801de90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801dec4:	6803      	ldr	r3, [r0, #0]
 801dec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dec8:	4798      	blx	r3
 801deca:	4a2b      	ldr	r2, [pc, #172]	; (801df78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801decc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ded0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ded4:	8813      	ldrh	r3, [r2, #0]
 801ded6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801deda:	fb03 f404 	mul.w	r4, r3, r4
 801dede:	fb03 c101 	mla	r1, r3, r1, ip
 801dee2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dee6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801deea:	4408      	add	r0, r1
 801deec:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801def0:	4404      	add	r4, r0
 801def2:	d02e      	beq.n	801df52 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 801def4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801def8:	1b9b      	subs	r3, r3, r6
 801defa:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801defe:	1b96      	subs	r6, r2, r6
 801df00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df04:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801df08:	42a0      	cmp	r0, r4
 801df0a:	d22d      	bcs.n	801df68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801df0c:	eb00 0e01 	add.w	lr, r0, r1
 801df10:	4570      	cmp	r0, lr
 801df12:	d210      	bcs.n	801df36 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801df14:	f890 9000 	ldrb.w	r9, [r0]
 801df18:	f815 2b01 	ldrb.w	r2, [r5], #1
 801df1c:	fb19 f90c 	smulbb	r9, r9, ip
 801df20:	fb02 9208 	mla	r2, r2, r8, r9
 801df24:	b292      	uxth	r2, r2
 801df26:	f102 0901 	add.w	r9, r2, #1
 801df2a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801df2e:	1212      	asrs	r2, r2, #8
 801df30:	f800 2b01 	strb.w	r2, [r0], #1
 801df34:	e7ec      	b.n	801df10 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 801df36:	4418      	add	r0, r3
 801df38:	4435      	add	r5, r6
 801df3a:	e7e5      	b.n	801df08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801df3c:	8813      	ldrh	r3, [r2, #0]
 801df3e:	1b9b      	subs	r3, r3, r6
 801df40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df44:	4418      	add	r0, r3
 801df46:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801df4a:	1b9b      	subs	r3, r3, r6
 801df4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df50:	441d      	add	r5, r3
 801df52:	42a0      	cmp	r0, r4
 801df54:	d208      	bcs.n	801df68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801df56:	eb00 0c01 	add.w	ip, r0, r1
 801df5a:	4560      	cmp	r0, ip
 801df5c:	d2ee      	bcs.n	801df3c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801df5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801df62:	f800 3b01 	strb.w	r3, [r0], #1
 801df66:	e7f8      	b.n	801df5a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 801df68:	6838      	ldr	r0, [r7, #0]
 801df6a:	6803      	ldr	r3, [r0, #0]
 801df6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df6e:	4798      	blx	r3
 801df70:	e7a2      	b.n	801deb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801df72:	bf00      	nop
 801df74:	200566f8 	.word	0x200566f8
 801df78:	200566f2 	.word	0x200566f2

0801df7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801df7c:	b510      	push	{r4, lr}
 801df7e:	4604      	mov	r4, r0
 801df80:	2104      	movs	r1, #4
 801df82:	f007 fef8 	bl	8025d76 <_ZdlPvj>
 801df86:	4620      	mov	r0, r4
 801df88:	bd10      	pop	{r4, pc}

0801df8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801df8a:	b510      	push	{r4, lr}
 801df8c:	4604      	mov	r4, r0
 801df8e:	2104      	movs	r1, #4
 801df90:	f007 fef1 	bl	8025d76 <_ZdlPvj>
 801df94:	4620      	mov	r0, r4
 801df96:	bd10      	pop	{r4, pc}

0801df98 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801df98:	b510      	push	{r4, lr}
 801df9a:	4604      	mov	r4, r0
 801df9c:	2104      	movs	r1, #4
 801df9e:	f007 feea 	bl	8025d76 <_ZdlPvj>
 801dfa2:	4620      	mov	r0, r4
 801dfa4:	bd10      	pop	{r4, pc}

0801dfa6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dfa6:	b510      	push	{r4, lr}
 801dfa8:	4604      	mov	r4, r0
 801dfaa:	2104      	movs	r1, #4
 801dfac:	f007 fee3 	bl	8025d76 <_ZdlPvj>
 801dfb0:	4620      	mov	r0, r4
 801dfb2:	bd10      	pop	{r4, pc}

0801dfb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dfb4:	b510      	push	{r4, lr}
 801dfb6:	4604      	mov	r4, r0
 801dfb8:	2104      	movs	r1, #4
 801dfba:	f007 fedc 	bl	8025d76 <_ZdlPvj>
 801dfbe:	4620      	mov	r0, r4
 801dfc0:	bd10      	pop	{r4, pc}

0801dfc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dfc2:	b510      	push	{r4, lr}
 801dfc4:	4604      	mov	r4, r0
 801dfc6:	2104      	movs	r1, #4
 801dfc8:	f007 fed5 	bl	8025d76 <_ZdlPvj>
 801dfcc:	4620      	mov	r0, r4
 801dfce:	bd10      	pop	{r4, pc}

0801dfd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dfd0:	b510      	push	{r4, lr}
 801dfd2:	4604      	mov	r4, r0
 801dfd4:	2104      	movs	r1, #4
 801dfd6:	f007 fece 	bl	8025d76 <_ZdlPvj>
 801dfda:	4620      	mov	r0, r4
 801dfdc:	bd10      	pop	{r4, pc}

0801dfde <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dfde:	b510      	push	{r4, lr}
 801dfe0:	4604      	mov	r4, r0
 801dfe2:	2104      	movs	r1, #4
 801dfe4:	f007 fec7 	bl	8025d76 <_ZdlPvj>
 801dfe8:	4620      	mov	r0, r4
 801dfea:	bd10      	pop	{r4, pc}

0801dfec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dfec:	b510      	push	{r4, lr}
 801dfee:	4604      	mov	r4, r0
 801dff0:	2104      	movs	r1, #4
 801dff2:	f007 fec0 	bl	8025d76 <_ZdlPvj>
 801dff6:	4620      	mov	r0, r4
 801dff8:	bd10      	pop	{r4, pc}

0801dffa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dffa:	b510      	push	{r4, lr}
 801dffc:	4604      	mov	r4, r0
 801dffe:	2104      	movs	r1, #4
 801e000:	f007 feb9 	bl	8025d76 <_ZdlPvj>
 801e004:	4620      	mov	r0, r4
 801e006:	bd10      	pop	{r4, pc}

0801e008 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e008:	b510      	push	{r4, lr}
 801e00a:	4604      	mov	r4, r0
 801e00c:	2104      	movs	r1, #4
 801e00e:	f007 feb2 	bl	8025d76 <_ZdlPvj>
 801e012:	4620      	mov	r0, r4
 801e014:	bd10      	pop	{r4, pc}

0801e016 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e016:	b510      	push	{r4, lr}
 801e018:	4604      	mov	r4, r0
 801e01a:	2104      	movs	r1, #4
 801e01c:	f007 feab 	bl	8025d76 <_ZdlPvj>
 801e020:	4620      	mov	r0, r4
 801e022:	bd10      	pop	{r4, pc}

0801e024 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e024:	b510      	push	{r4, lr}
 801e026:	4604      	mov	r4, r0
 801e028:	2104      	movs	r1, #4
 801e02a:	f007 fea4 	bl	8025d76 <_ZdlPvj>
 801e02e:	4620      	mov	r0, r4
 801e030:	bd10      	pop	{r4, pc}

0801e032 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e032:	b510      	push	{r4, lr}
 801e034:	4604      	mov	r4, r0
 801e036:	2104      	movs	r1, #4
 801e038:	f007 fe9d 	bl	8025d76 <_ZdlPvj>
 801e03c:	4620      	mov	r0, r4
 801e03e:	bd10      	pop	{r4, pc}

0801e040 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e040:	b510      	push	{r4, lr}
 801e042:	4604      	mov	r4, r0
 801e044:	2104      	movs	r1, #4
 801e046:	f007 fe96 	bl	8025d76 <_ZdlPvj>
 801e04a:	4620      	mov	r0, r4
 801e04c:	bd10      	pop	{r4, pc}

0801e04e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e04e:	b510      	push	{r4, lr}
 801e050:	4604      	mov	r4, r0
 801e052:	2104      	movs	r1, #4
 801e054:	f007 fe8f 	bl	8025d76 <_ZdlPvj>
 801e058:	4620      	mov	r0, r4
 801e05a:	bd10      	pop	{r4, pc}

0801e05c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e05c:	b510      	push	{r4, lr}
 801e05e:	4604      	mov	r4, r0
 801e060:	2104      	movs	r1, #4
 801e062:	f007 fe88 	bl	8025d76 <_ZdlPvj>
 801e066:	4620      	mov	r0, r4
 801e068:	bd10      	pop	{r4, pc}

0801e06a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e06a:	b510      	push	{r4, lr}
 801e06c:	4604      	mov	r4, r0
 801e06e:	2104      	movs	r1, #4
 801e070:	f007 fe81 	bl	8025d76 <_ZdlPvj>
 801e074:	4620      	mov	r0, r4
 801e076:	bd10      	pop	{r4, pc}

0801e078 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e078:	b510      	push	{r4, lr}
 801e07a:	4604      	mov	r4, r0
 801e07c:	2104      	movs	r1, #4
 801e07e:	f007 fe7a 	bl	8025d76 <_ZdlPvj>
 801e082:	4620      	mov	r0, r4
 801e084:	bd10      	pop	{r4, pc}

0801e086 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e086:	b510      	push	{r4, lr}
 801e088:	4604      	mov	r4, r0
 801e08a:	2104      	movs	r1, #4
 801e08c:	f007 fe73 	bl	8025d76 <_ZdlPvj>
 801e090:	4620      	mov	r0, r4
 801e092:	bd10      	pop	{r4, pc}

0801e094 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e094:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e096:	4606      	mov	r6, r0
 801e098:	b087      	sub	sp, #28
 801e09a:	4615      	mov	r5, r2
 801e09c:	461f      	mov	r7, r3
 801e09e:	b343      	cbz	r3, 801e0f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801e0a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	dd24      	ble.n	801e0f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801e0a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	dd20      	ble.n	801e0f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801e0b0:	6808      	ldr	r0, [r1, #0]
 801e0b2:	aa04      	add	r2, sp, #16
 801e0b4:	6849      	ldr	r1, [r1, #4]
 801e0b6:	4c1a      	ldr	r4, [pc, #104]	; (801e120 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801e0b8:	c203      	stmia	r2!, {r0, r1}
 801e0ba:	a804      	add	r0, sp, #16
 801e0bc:	f7fa fd24 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0c0:	6820      	ldr	r0, [r4, #0]
 801e0c2:	6803      	ldr	r3, [r0, #0]
 801e0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0c6:	4798      	blx	r3
 801e0c8:	2fff      	cmp	r7, #255	; 0xff
 801e0ca:	d014      	beq.n	801e0f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801e0cc:	f010 0f08 	tst.w	r0, #8
 801e0d0:	6820      	ldr	r0, [r4, #0]
 801e0d2:	d013      	beq.n	801e0fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801e0d4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801e0d8:	6801      	ldr	r1, [r0, #0]
 801e0da:	9401      	str	r4, [sp, #4]
 801e0dc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801e0e0:	9702      	str	r7, [sp, #8]
 801e0e2:	9400      	str	r4, [sp, #0]
 801e0e4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e0e8:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801e0ea:	4629      	mov	r1, r5
 801e0ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e0f0:	47a0      	blx	r4
 801e0f2:	b007      	add	sp, #28
 801e0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e0f6:	f010 0f02 	tst.w	r0, #2
 801e0fa:	e7e9      	b.n	801e0d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801e0fc:	6803      	ldr	r3, [r0, #0]
 801e0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e100:	4798      	blx	r3
 801e102:	4b08      	ldr	r3, [pc, #32]	; (801e124 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801e104:	4601      	mov	r1, r0
 801e106:	4630      	mov	r0, r6
 801e108:	881a      	ldrh	r2, [r3, #0]
 801e10a:	6833      	ldr	r3, [r6, #0]
 801e10c:	e9cd 5700 	strd	r5, r7, [sp]
 801e110:	69dd      	ldr	r5, [r3, #28]
 801e112:	ab04      	add	r3, sp, #16
 801e114:	47a8      	blx	r5
 801e116:	6820      	ldr	r0, [r4, #0]
 801e118:	6803      	ldr	r3, [r0, #0]
 801e11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e11c:	4798      	blx	r3
 801e11e:	e7e8      	b.n	801e0f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801e120:	200566f8 	.word	0x200566f8
 801e124:	200566f2 	.word	0x200566f2

0801e128 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e12c:	4db4      	ldr	r5, [pc, #720]	; (801e400 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801e12e:	4690      	mov	r8, r2
 801e130:	b08d      	sub	sp, #52	; 0x34
 801e132:	4604      	mov	r4, r0
 801e134:	682a      	ldr	r2, [r5, #0]
 801e136:	4689      	mov	r9, r1
 801e138:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801e13c:	2a02      	cmp	r2, #2
 801e13e:	d106      	bne.n	801e14e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801e140:	4bb0      	ldr	r3, [pc, #704]	; (801e404 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801e142:	f240 11ed 	movw	r1, #493	; 0x1ed
 801e146:	4ab0      	ldr	r2, [pc, #704]	; (801e408 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e148:	48b0      	ldr	r0, [pc, #704]	; (801e40c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801e14a:	f007 ff49 	bl	8025fe0 <__assert_func>
 801e14e:	ae0c      	add	r6, sp, #48	; 0x30
 801e150:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801e154:	4630      	mov	r0, r6
 801e156:	f7fe f815 	bl	801c184 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e15a:	6823      	ldr	r3, [r4, #0]
 801e15c:	4607      	mov	r7, r0
 801e15e:	4620      	mov	r0, r4
 801e160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e162:	4798      	blx	r3
 801e164:	4287      	cmp	r7, r0
 801e166:	d004      	beq.n	801e172 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801e168:	4ba9      	ldr	r3, [pc, #676]	; (801e410 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801e16a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801e16e:	4aa6      	ldr	r2, [pc, #664]	; (801e408 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e170:	e7ea      	b.n	801e148 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e172:	4630      	mov	r0, r6
 801e174:	f7fd ff7c 	bl	801c070 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e178:	4607      	mov	r7, r0
 801e17a:	b920      	cbnz	r0, 801e186 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801e17c:	4ba5      	ldr	r3, [pc, #660]	; (801e414 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801e17e:	f240 11f1 	movw	r1, #497	; 0x1f1
 801e182:	4aa1      	ldr	r2, [pc, #644]	; (801e408 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e184:	e7e0      	b.n	801e148 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e186:	f8d8 0000 	ldr.w	r0, [r8]
 801e18a:	ab06      	add	r3, sp, #24
 801e18c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e190:	f9b8 a000 	ldrsh.w	sl, [r8]
 801e194:	c303      	stmia	r3!, {r0, r1}
 801e196:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e19a:	ab08      	add	r3, sp, #32
 801e19c:	f8d9 0000 	ldr.w	r0, [r9]
 801e1a0:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801e1a4:	c303      	stmia	r3!, {r0, r1}
 801e1a6:	4630      	mov	r0, r6
 801e1a8:	f7fd feee 	bl	801bf88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e1ac:	4680      	mov	r8, r0
 801e1ae:	4630      	mov	r0, r6
 801e1b0:	f7fd ff24 	bl	801bffc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e1b4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801e1b8:	f10d 0920 	add.w	r9, sp, #32
 801e1bc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801e1c0:	a806      	add	r0, sp, #24
 801e1c2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801e1c6:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801e1ca:	f7fa fc9d 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1ce:	4648      	mov	r0, r9
 801e1d0:	f7fa fc9a 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1d4:	a80a      	add	r0, sp, #40	; 0x28
 801e1d6:	f7fa fc97 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1da:	4b8f      	ldr	r3, [pc, #572]	; (801e418 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801e1dc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e1e0:	881e      	ldrh	r6, [r3, #0]
 801e1e2:	4b8e      	ldr	r3, [pc, #568]	; (801e41c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801e1e4:	fa0f fb86 	sxth.w	fp, r6
 801e1e8:	8819      	ldrh	r1, [r3, #0]
 801e1ea:	4593      	cmp	fp, r2
 801e1ec:	dd75      	ble.n	801e2da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e1ee:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801e1f2:	4494      	add	ip, r2
 801e1f4:	fa1f fc8c 	uxth.w	ip, ip
 801e1f8:	fa0f fa8c 	sxth.w	sl, ip
 801e1fc:	f1ba 0f00 	cmp.w	sl, #0
 801e200:	dd6b      	ble.n	801e2da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e202:	fa0f f881 	sxth.w	r8, r1
 801e206:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e20a:	4598      	cmp	r8, r3
 801e20c:	dd65      	ble.n	801e2da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e20e:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801e212:	4418      	add	r0, r3
 801e214:	b280      	uxth	r0, r0
 801e216:	fa0f fe80 	sxth.w	lr, r0
 801e21a:	f1be 0f00 	cmp.w	lr, #0
 801e21e:	dd5c      	ble.n	801e2da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e220:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801e224:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e228:	45d3      	cmp	fp, sl
 801e22a:	bfc8      	it	gt
 801e22c:	4666      	movgt	r6, ip
 801e22e:	45f0      	cmp	r8, lr
 801e230:	bfc8      	it	gt
 801e232:	4601      	movgt	r1, r0
 801e234:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e238:	1ab6      	subs	r6, r6, r2
 801e23a:	1ac9      	subs	r1, r1, r3
 801e23c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e240:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801e244:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801e248:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801e24c:	f1bc 0f00 	cmp.w	ip, #0
 801e250:	f340 80aa 	ble.w	801e3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e254:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801e258:	2e00      	cmp	r6, #0
 801e25a:	f340 80a5 	ble.w	801e3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e25e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801e262:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801e266:	4288      	cmp	r0, r1
 801e268:	db3b      	blt.n	801e2e2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e26a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801e26e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e272:	429a      	cmp	r2, r3
 801e274:	db35      	blt.n	801e2e2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e276:	4460      	add	r0, ip
 801e278:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801e27c:	4461      	add	r1, ip
 801e27e:	b200      	sxth	r0, r0
 801e280:	b209      	sxth	r1, r1
 801e282:	4288      	cmp	r0, r1
 801e284:	dc2d      	bgt.n	801e2e2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e286:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801e28a:	4432      	add	r2, r6
 801e28c:	440b      	add	r3, r1
 801e28e:	b212      	sxth	r2, r2
 801e290:	b21b      	sxth	r3, r3
 801e292:	429a      	cmp	r2, r3
 801e294:	dc25      	bgt.n	801e2e2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e296:	6823      	ldr	r3, [r4, #0]
 801e298:	4620      	mov	r0, r4
 801e29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e29c:	4798      	blx	r3
 801e29e:	4682      	mov	sl, r0
 801e2a0:	6828      	ldr	r0, [r5, #0]
 801e2a2:	6803      	ldr	r3, [r0, #0]
 801e2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e2a6:	4798      	blx	r3
 801e2a8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801e2ac:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e2b0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e2b4:	9303      	str	r3, [sp, #12]
 801e2b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e2ba:	1a9b      	subs	r3, r3, r2
 801e2bc:	b29b      	uxth	r3, r3
 801e2be:	b21c      	sxth	r4, r3
 801e2c0:	2c00      	cmp	r4, #0
 801e2c2:	dc13      	bgt.n	801e2ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 801e2c4:	bf18      	it	ne
 801e2c6:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801e2ca:	463c      	mov	r4, r7
 801e2cc:	bf1e      	ittt	ne
 801e2ce:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801e2d2:	189b      	addne	r3, r3, r2
 801e2d4:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801e2d8:	e00f      	b.n	801e2fa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 801e2da:	2300      	movs	r3, #0
 801e2dc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801e2e0:	e7b2      	b.n	801e248 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801e2e2:	4b4f      	ldr	r3, [pc, #316]	; (801e420 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801e2e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 801e2e8:	4a47      	ldr	r2, [pc, #284]	; (801e408 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e2ea:	e72d      	b.n	801e148 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e2ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e2f0:	ebab 0303 	sub.w	r3, fp, r3
 801e2f4:	443c      	add	r4, r7
 801e2f6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e2fa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e2fe:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e302:	1a9b      	subs	r3, r3, r2
 801e304:	b29b      	uxth	r3, r3
 801e306:	b219      	sxth	r1, r3
 801e308:	2900      	cmp	r1, #0
 801e30a:	dd51      	ble.n	801e3b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801e30c:	9a03      	ldr	r2, [sp, #12]
 801e30e:	fb02 4401 	mla	r4, r2, r1, r4
 801e312:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e316:	1ad3      	subs	r3, r2, r3
 801e318:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e31c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e320:	2b00      	cmp	r3, #0
 801e322:	dd41      	ble.n	801e3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e324:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e328:	2e00      	cmp	r6, #0
 801e32a:	dd3d      	ble.n	801e3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e32c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801e330:	f04f 0803 	mov.w	r8, #3
 801e334:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e338:	fb0a f10c 	mul.w	r1, sl, ip
 801e33c:	fb12 1808 	smlabb	r8, r2, r8, r1
 801e340:	4935      	ldr	r1, [pc, #212]	; (801e418 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801e342:	4480      	add	r8, r0
 801e344:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801e348:	8809      	ldrh	r1, [r1, #0]
 801e34a:	4283      	cmp	r3, r0
 801e34c:	eba1 0202 	sub.w	r2, r1, r2
 801e350:	bfa8      	it	ge
 801e352:	4603      	movge	r3, r0
 801e354:	4293      	cmp	r3, r2
 801e356:	bfa8      	it	ge
 801e358:	4613      	movge	r3, r2
 801e35a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801e35e:	4296      	cmp	r6, r2
 801e360:	bfa8      	it	ge
 801e362:	4616      	movge	r6, r2
 801e364:	4a2d      	ldr	r2, [pc, #180]	; (801e41c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801e366:	8812      	ldrh	r2, [r2, #0]
 801e368:	eba2 0c0c 	sub.w	ip, r2, ip
 801e36c:	4632      	mov	r2, r6
 801e36e:	4566      	cmp	r6, ip
 801e370:	bfa8      	it	ge
 801e372:	4662      	movge	r2, ip
 801e374:	4299      	cmp	r1, r3
 801e376:	9202      	str	r2, [sp, #8]
 801e378:	d12d      	bne.n	801e3d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801e37a:	4559      	cmp	r1, fp
 801e37c:	d12b      	bne.n	801e3d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801e37e:	6828      	ldr	r0, [r5, #0]
 801e380:	6803      	ldr	r3, [r0, #0]
 801e382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e384:	4798      	blx	r3
 801e386:	07c3      	lsls	r3, r0, #31
 801e388:	d51b      	bpl.n	801e3c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 801e38a:	6828      	ldr	r0, [r5, #0]
 801e38c:	9b02      	ldr	r3, [sp, #8]
 801e38e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801e392:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801e396:	6803      	ldr	r3, [r0, #0]
 801e398:	f8cd b000 	str.w	fp, [sp]
 801e39c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 801e39e:	4623      	mov	r3, r4
 801e3a0:	e899 0006 	ldmia.w	r9, {r1, r2}
 801e3a4:	47a8      	blx	r5
 801e3a6:	4607      	mov	r7, r0
 801e3a8:	4638      	mov	r0, r7
 801e3aa:	b00d      	add	sp, #52	; 0x34
 801e3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3b0:	bf1f      	itttt	ne
 801e3b2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801e3b6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801e3ba:	189b      	addne	r3, r3, r2
 801e3bc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e3c0:	e7ac      	b.n	801e31c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 801e3c2:	6828      	ldr	r0, [r5, #0]
 801e3c4:	4642      	mov	r2, r8
 801e3c6:	4621      	mov	r1, r4
 801e3c8:	6803      	ldr	r3, [r0, #0]
 801e3ca:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 801e3cc:	9b02      	ldr	r3, [sp, #8]
 801e3ce:	fb03 f30a 	mul.w	r3, r3, sl
 801e3d2:	47a8      	blx	r5
 801e3d4:	e7e8      	b.n	801e3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e3d6:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801e3da:	f04f 0900 	mov.w	r9, #0
 801e3de:	9b02      	ldr	r3, [sp, #8]
 801e3e0:	454b      	cmp	r3, r9
 801e3e2:	dde1      	ble.n	801e3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e3e4:	6828      	ldr	r0, [r5, #0]
 801e3e6:	4642      	mov	r2, r8
 801e3e8:	4621      	mov	r1, r4
 801e3ea:	44d0      	add	r8, sl
 801e3ec:	6803      	ldr	r3, [r0, #0]
 801e3ee:	f109 0901 	add.w	r9, r9, #1
 801e3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e3f4:	461e      	mov	r6, r3
 801e3f6:	465b      	mov	r3, fp
 801e3f8:	47b0      	blx	r6
 801e3fa:	9b03      	ldr	r3, [sp, #12]
 801e3fc:	441c      	add	r4, r3
 801e3fe:	e7ee      	b.n	801e3de <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 801e400:	200566f8 	.word	0x200566f8
 801e404:	0802decb 	.word	0x0802decb
 801e408:	0802e71a 	.word	0x0802e71a
 801e40c:	0802de99 	.word	0x0802de99
 801e410:	0802df7d 	.word	0x0802df7d
 801e414:	0802dfd2 	.word	0x0802dfd2
 801e418:	200566f2 	.word	0x200566f2
 801e41c:	200566f4 	.word	0x200566f4
 801e420:	0802e010 	.word	0x0802e010

0801e424 <_ZN8touchgfx8LCD24bppC1Ev>:
 801e424:	2200      	movs	r2, #0
 801e426:	490c      	ldr	r1, [pc, #48]	; (801e458 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801e428:	6042      	str	r2, [r0, #4]
 801e42a:	6001      	str	r1, [r0, #0]
 801e42c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e430:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e434:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e438:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e43c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e440:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e444:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e448:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e44c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e450:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e454:	4770      	bx	lr
 801e456:	bf00      	nop
 801e458:	0802e2f4 	.word	0x0802e2f4

0801e45c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e460:	4616      	mov	r6, r2
 801e462:	b091      	sub	sp, #68	; 0x44
 801e464:	880a      	ldrh	r2, [r1, #0]
 801e466:	4607      	mov	r7, r0
 801e468:	4688      	mov	r8, r1
 801e46a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801e46e:	b12a      	cbz	r2, 801e47c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801e470:	4b67      	ldr	r3, [pc, #412]	; (801e610 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801e472:	2160      	movs	r1, #96	; 0x60
 801e474:	4a67      	ldr	r2, [pc, #412]	; (801e614 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 801e476:	4868      	ldr	r0, [pc, #416]	; (801e618 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801e478:	f007 fdb2 	bl	8025fe0 <__assert_func>
 801e47c:	6830      	ldr	r0, [r6, #0]
 801e47e:	ac0c      	add	r4, sp, #48	; 0x30
 801e480:	6871      	ldr	r1, [r6, #4]
 801e482:	4d66      	ldr	r5, [pc, #408]	; (801e61c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801e484:	f8df a198 	ldr.w	sl, [pc, #408]	; 801e620 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 801e488:	c403      	stmia	r4!, {r0, r1}
 801e48a:	6818      	ldr	r0, [r3, #0]
 801e48c:	ac0e      	add	r4, sp, #56	; 0x38
 801e48e:	6859      	ldr	r1, [r3, #4]
 801e490:	c403      	stmia	r4!, {r0, r1}
 801e492:	a80c      	add	r0, sp, #48	; 0x30
 801e494:	f7fa fb38 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e498:	4631      	mov	r1, r6
 801e49a:	a80e      	add	r0, sp, #56	; 0x38
 801e49c:	f7fa fb1c 	bl	8018ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e4a0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e4a4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e4a8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e4ac:	6828      	ldr	r0, [r5, #0]
 801e4ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e4b2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801e4b6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801e4ba:	440f      	add	r7, r1
 801e4bc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e4c0:	440a      	add	r2, r1
 801e4c2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e4c6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e4ca:	4413      	add	r3, r2
 801e4cc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e4d0:	6803      	ldr	r3, [r0, #0]
 801e4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e4d4:	4798      	blx	r3
 801e4d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e4da:	6828      	ldr	r0, [r5, #0]
 801e4dc:	d01d      	beq.n	801e51a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e4de:	2201      	movs	r2, #1
 801e4e0:	250b      	movs	r5, #11
 801e4e2:	6801      	ldr	r1, [r0, #0]
 801e4e4:	b2a4      	uxth	r4, r4
 801e4e6:	b2b6      	uxth	r6, r6
 801e4e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e4ec:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801e4f0:	f8ba 5000 	ldrh.w	r5, [sl]
 801e4f4:	f8cd 9010 	str.w	r9, [sp, #16]
 801e4f8:	9602      	str	r6, [sp, #8]
 801e4fa:	9401      	str	r4, [sp, #4]
 801e4fc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801e500:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e504:	9203      	str	r2, [sp, #12]
 801e506:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e50a:	9200      	str	r2, [sp, #0]
 801e50c:	4642      	mov	r2, r8
 801e50e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801e510:	4639      	mov	r1, r7
 801e512:	47a0      	blx	r4
 801e514:	b011      	add	sp, #68	; 0x44
 801e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e51a:	6803      	ldr	r3, [r0, #0]
 801e51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e51e:	4798      	blx	r3
 801e520:	f8ba 5000 	ldrh.w	r5, [sl]
 801e524:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e528:	f04f 0e04 	mov.w	lr, #4
 801e52c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e530:	436e      	muls	r6, r5
 801e532:	fb05 2303 	mla	r3, r5, r3, r2
 801e536:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e53a:	1b2d      	subs	r5, r5, r4
 801e53c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e544:	4418      	add	r0, r3
 801e546:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e54a:	1982      	adds	r2, r0, r6
 801e54c:	1b1b      	subs	r3, r3, r4
 801e54e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e552:	930b      	str	r3, [sp, #44]	; 0x2c
 801e554:	4290      	cmp	r0, r2
 801e556:	d254      	bcs.n	801e602 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801e558:	eb00 0a04 	add.w	sl, r0, r4
 801e55c:	4550      	cmp	r0, sl
 801e55e:	d24c      	bcs.n	801e5fa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 801e560:	f817 1b01 	ldrb.w	r1, [r7], #1
 801e564:	fb1e e101 	smlabb	r1, lr, r1, lr
 801e568:	eb08 0c01 	add.w	ip, r8, r1
 801e56c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e570:	b173      	cbz	r3, 801e590 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801e572:	2bff      	cmp	r3, #255	; 0xff
 801e574:	f818 b001 	ldrb.w	fp, [r8, r1]
 801e578:	d10c      	bne.n	801e594 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e57a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e57e:	d109      	bne.n	801e594 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e580:	f880 b000 	strb.w	fp, [r0]
 801e584:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e588:	7043      	strb	r3, [r0, #1]
 801e58a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e58e:	7083      	strb	r3, [r0, #2]
 801e590:	3003      	adds	r0, #3
 801e592:	e7e3      	b.n	801e55c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801e594:	fb09 f103 	mul.w	r1, r9, r3
 801e598:	1c4b      	adds	r3, r1, #1
 801e59a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e59e:	7801      	ldrb	r1, [r0, #0]
 801e5a0:	121b      	asrs	r3, r3, #8
 801e5a2:	b29e      	uxth	r6, r3
 801e5a4:	43db      	mvns	r3, r3
 801e5a6:	fb1b fb06 	smulbb	fp, fp, r6
 801e5aa:	b2db      	uxtb	r3, r3
 801e5ac:	fb01 b103 	mla	r1, r1, r3, fp
 801e5b0:	b289      	uxth	r1, r1
 801e5b2:	f101 0b01 	add.w	fp, r1, #1
 801e5b6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e5ba:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e5be:	fb1b fb03 	smulbb	fp, fp, r3
 801e5c2:	1209      	asrs	r1, r1, #8
 801e5c4:	7001      	strb	r1, [r0, #0]
 801e5c6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e5ca:	fb01 b106 	mla	r1, r1, r6, fp
 801e5ce:	b289      	uxth	r1, r1
 801e5d0:	f101 0b01 	add.w	fp, r1, #1
 801e5d4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e5d8:	1209      	asrs	r1, r1, #8
 801e5da:	7041      	strb	r1, [r0, #1]
 801e5dc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801e5e0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e5e4:	fb1c f303 	smulbb	r3, ip, r3
 801e5e8:	fb01 3606 	mla	r6, r1, r6, r3
 801e5ec:	b2b6      	uxth	r6, r6
 801e5ee:	1c73      	adds	r3, r6, #1
 801e5f0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e5f4:	1236      	asrs	r6, r6, #8
 801e5f6:	7086      	strb	r6, [r0, #2]
 801e5f8:	e7ca      	b.n	801e590 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801e5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5fc:	4428      	add	r0, r5
 801e5fe:	441f      	add	r7, r3
 801e600:	e7a8      	b.n	801e554 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801e602:	4b06      	ldr	r3, [pc, #24]	; (801e61c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801e604:	6818      	ldr	r0, [r3, #0]
 801e606:	6803      	ldr	r3, [r0, #0]
 801e608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e60a:	4798      	blx	r3
 801e60c:	e782      	b.n	801e514 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e60e:	bf00      	nop
 801e610:	0802ddfd 	.word	0x0802ddfd
 801e614:	0802e53c 	.word	0x0802e53c
 801e618:	0802de99 	.word	0x0802de99
 801e61c:	200566f8 	.word	0x200566f8
 801e620:	200566f2 	.word	0x200566f2

0801e624 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e628:	f8b1 9000 	ldrh.w	r9, [r1]
 801e62c:	b091      	sub	sp, #68	; 0x44
 801e62e:	4604      	mov	r4, r0
 801e630:	460e      	mov	r6, r1
 801e632:	f1b9 0f01 	cmp.w	r9, #1
 801e636:	4690      	mov	r8, r2
 801e638:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e63c:	d005      	beq.n	801e64a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801e63e:	4b68      	ldr	r3, [pc, #416]	; (801e7e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801e640:	21ae      	movs	r1, #174	; 0xae
 801e642:	4a68      	ldr	r2, [pc, #416]	; (801e7e4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801e644:	4868      	ldr	r0, [pc, #416]	; (801e7e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801e646:	f007 fccb 	bl	8025fe0 <__assert_func>
 801e64a:	6810      	ldr	r0, [r2, #0]
 801e64c:	ad0c      	add	r5, sp, #48	; 0x30
 801e64e:	6851      	ldr	r1, [r2, #4]
 801e650:	f8df a198 	ldr.w	sl, [pc, #408]	; 801e7ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801e654:	f8df b198 	ldr.w	fp, [pc, #408]	; 801e7f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801e658:	c503      	stmia	r5!, {r0, r1}
 801e65a:	6818      	ldr	r0, [r3, #0]
 801e65c:	ad0e      	add	r5, sp, #56	; 0x38
 801e65e:	6859      	ldr	r1, [r3, #4]
 801e660:	c503      	stmia	r5!, {r0, r1}
 801e662:	a80c      	add	r0, sp, #48	; 0x30
 801e664:	f7fa fa50 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e668:	4641      	mov	r1, r8
 801e66a:	a80e      	add	r0, sp, #56	; 0x38
 801e66c:	f7fa fa34 	bl	8018ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e670:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e674:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e678:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e67c:	f8da 0000 	ldr.w	r0, [sl]
 801e680:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e684:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801e688:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801e68c:	440c      	add	r4, r1
 801e68e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e692:	440a      	add	r2, r1
 801e694:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e698:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e69c:	4413      	add	r3, r2
 801e69e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e6a2:	6803      	ldr	r3, [r0, #0]
 801e6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e6a6:	4798      	blx	r3
 801e6a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e6ac:	f8da 0000 	ldr.w	r0, [sl]
 801e6b0:	d01e      	beq.n	801e6f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801e6b2:	220b      	movs	r2, #11
 801e6b4:	6801      	ldr	r1, [r0, #0]
 801e6b6:	f8cd 9020 	str.w	r9, [sp, #32]
 801e6ba:	b2ad      	uxth	r5, r5
 801e6bc:	9207      	str	r2, [sp, #28]
 801e6be:	f8bb 2000 	ldrh.w	r2, [fp]
 801e6c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e6c6:	9206      	str	r2, [sp, #24]
 801e6c8:	2200      	movs	r2, #0
 801e6ca:	9502      	str	r5, [sp, #8]
 801e6cc:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e6d0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e6d4:	9203      	str	r2, [sp, #12]
 801e6d6:	fa1f f288 	uxth.w	r2, r8
 801e6da:	9201      	str	r2, [sp, #4]
 801e6dc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e6e0:	9200      	str	r2, [sp, #0]
 801e6e2:	4632      	mov	r2, r6
 801e6e4:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801e6e6:	4621      	mov	r1, r4
 801e6e8:	47a8      	blx	r5
 801e6ea:	b011      	add	sp, #68	; 0x44
 801e6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6f0:	6803      	ldr	r3, [r0, #0]
 801e6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6f4:	4798      	blx	r3
 801e6f6:	f8bb 2000 	ldrh.w	r2, [fp]
 801e6fa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e6fe:	f04f 0e03 	mov.w	lr, #3
 801e702:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801e706:	4355      	muls	r5, r2
 801e708:	fa1f fc87 	uxth.w	ip, r7
 801e70c:	fb02 1303 	mla	r3, r2, r3, r1
 801e710:	eba2 0208 	sub.w	r2, r2, r8
 801e714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e71c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e720:	4418      	add	r0, r3
 801e722:	920b      	str	r2, [sp, #44]	; 0x2c
 801e724:	1943      	adds	r3, r0, r5
 801e726:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801e72a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801e72e:	eba2 0208 	sub.w	r2, r2, r8
 801e732:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e736:	b2ad      	uxth	r5, r5
 801e738:	4298      	cmp	r0, r3
 801e73a:	d24a      	bcs.n	801e7d2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801e73c:	eb00 0908 	add.w	r9, r0, r8
 801e740:	4621      	mov	r1, r4
 801e742:	4548      	cmp	r0, r9
 801e744:	460c      	mov	r4, r1
 801e746:	d240      	bcs.n	801e7ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801e748:	f04f 0a04 	mov.w	sl, #4
 801e74c:	7824      	ldrb	r4, [r4, #0]
 801e74e:	2fff      	cmp	r7, #255	; 0xff
 801e750:	f101 0101 	add.w	r1, r1, #1
 801e754:	fb1e a404 	smlabb	r4, lr, r4, sl
 801e758:	eb06 0a04 	add.w	sl, r6, r4
 801e75c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801e760:	d02b      	beq.n	801e7ba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801e762:	7804      	ldrb	r4, [r0, #0]
 801e764:	fb14 f405 	smulbb	r4, r4, r5
 801e768:	fb0b 440c 	mla	r4, fp, ip, r4
 801e76c:	b2a4      	uxth	r4, r4
 801e76e:	f104 0b01 	add.w	fp, r4, #1
 801e772:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e776:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e77a:	fb1b fb05 	smulbb	fp, fp, r5
 801e77e:	1224      	asrs	r4, r4, #8
 801e780:	7004      	strb	r4, [r0, #0]
 801e782:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e786:	fb04 b40c 	mla	r4, r4, ip, fp
 801e78a:	b2a4      	uxth	r4, r4
 801e78c:	f104 0b01 	add.w	fp, r4, #1
 801e790:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e794:	1224      	asrs	r4, r4, #8
 801e796:	7044      	strb	r4, [r0, #1]
 801e798:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e79c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801e7a0:	fb1a fa05 	smulbb	sl, sl, r5
 801e7a4:	fb04 a40c 	mla	r4, r4, ip, sl
 801e7a8:	b2a4      	uxth	r4, r4
 801e7aa:	f104 0a01 	add.w	sl, r4, #1
 801e7ae:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e7b2:	1224      	asrs	r4, r4, #8
 801e7b4:	7084      	strb	r4, [r0, #2]
 801e7b6:	3003      	adds	r0, #3
 801e7b8:	e7c3      	b.n	801e742 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 801e7ba:	f880 b000 	strb.w	fp, [r0]
 801e7be:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e7c2:	7044      	strb	r4, [r0, #1]
 801e7c4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e7c8:	e7f4      	b.n	801e7b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 801e7ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e7cc:	4420      	add	r0, r4
 801e7ce:	188c      	adds	r4, r1, r2
 801e7d0:	e7b2      	b.n	801e738 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 801e7d2:	4b06      	ldr	r3, [pc, #24]	; (801e7ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801e7d4:	6818      	ldr	r0, [r3, #0]
 801e7d6:	6803      	ldr	r3, [r0, #0]
 801e7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e7da:	4798      	blx	r3
 801e7dc:	e785      	b.n	801e6ea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801e7de:	bf00      	nop
 801e7e0:	0802dd7c 	.word	0x0802dd7c
 801e7e4:	0802e42f 	.word	0x0802e42f
 801e7e8:	0802de99 	.word	0x0802de99
 801e7ec:	200566f8 	.word	0x200566f8
 801e7f0:	200566f2 	.word	0x200566f2

0801e7f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e7f4:	b570      	push	{r4, r5, r6, lr}
 801e7f6:	780d      	ldrb	r5, [r1, #0]
 801e7f8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e7fc:	2d01      	cmp	r5, #1
 801e7fe:	d00d      	beq.n	801e81c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e800:	d307      	bcc.n	801e812 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e802:	2d02      	cmp	r5, #2
 801e804:	d10f      	bne.n	801e826 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e806:	4b08      	ldr	r3, [pc, #32]	; (801e828 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e808:	2153      	movs	r1, #83	; 0x53
 801e80a:	4a08      	ldr	r2, [pc, #32]	; (801e82c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e80c:	4808      	ldr	r0, [pc, #32]	; (801e830 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e80e:	f007 fbe7 	bl	8025fe0 <__assert_func>
 801e812:	9404      	str	r4, [sp, #16]
 801e814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e818:	f7ff be20 	b.w	801e45c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e81c:	9404      	str	r4, [sp, #16]
 801e81e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e822:	f7ff beff 	b.w	801e624 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e826:	bd70      	pop	{r4, r5, r6, pc}
 801e828:	0802dd1e 	.word	0x0802dd1e
 801e82c:	0802e338 	.word	0x0802e338
 801e830:	0802de99 	.word	0x0802de99

0801e834 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e838:	4605      	mov	r5, r0
 801e83a:	b08d      	sub	sp, #52	; 0x34
 801e83c:	460c      	mov	r4, r1
 801e83e:	461f      	mov	r7, r3
 801e840:	2b00      	cmp	r3, #0
 801e842:	d051      	beq.n	801e8e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801e844:	6808      	ldr	r0, [r1, #0]
 801e846:	ab08      	add	r3, sp, #32
 801e848:	6849      	ldr	r1, [r1, #4]
 801e84a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801ea14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801e84e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801ea18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801e852:	c303      	stmia	r3!, {r0, r1}
 801e854:	6810      	ldr	r0, [r2, #0]
 801e856:	ab0a      	add	r3, sp, #40	; 0x28
 801e858:	6851      	ldr	r1, [r2, #4]
 801e85a:	c303      	stmia	r3!, {r0, r1}
 801e85c:	a808      	add	r0, sp, #32
 801e85e:	f7fa f953 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e862:	4621      	mov	r1, r4
 801e864:	a80a      	add	r0, sp, #40	; 0x28
 801e866:	f7fa f937 	bl	8018ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e86a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e86e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801e872:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801e876:	f8d8 0000 	ldr.w	r0, [r8]
 801e87a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e87e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801e882:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 801e886:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e88a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801e88e:	440a      	add	r2, r1
 801e890:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e894:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801e898:	4413      	add	r3, r2
 801e89a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e89e:	6803      	ldr	r3, [r0, #0]
 801e8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e8a2:	4798      	blx	r3
 801e8a4:	2fff      	cmp	r7, #255	; 0xff
 801e8a6:	d022      	beq.n	801e8ee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801e8a8:	f010 0f04 	tst.w	r0, #4
 801e8ac:	f8d8 0000 	ldr.w	r0, [r8]
 801e8b0:	d020      	beq.n	801e8f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 801e8b2:	2100      	movs	r1, #0
 801e8b4:	f04f 0e01 	mov.w	lr, #1
 801e8b8:	f8d0 c000 	ldr.w	ip, [r0]
 801e8bc:	b2a4      	uxth	r4, r4
 801e8be:	b2b6      	uxth	r6, r6
 801e8c0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e8c4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e8c8:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801e8cc:	f8b9 e000 	ldrh.w	lr, [r9]
 801e8d0:	9703      	str	r7, [sp, #12]
 801e8d2:	9401      	str	r4, [sp, #4]
 801e8d4:	9600      	str	r6, [sp, #0]
 801e8d6:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801e8da:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801e8de:	9102      	str	r1, [sp, #8]
 801e8e0:	4629      	mov	r1, r5
 801e8e2:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801e8e6:	47a0      	blx	r4
 801e8e8:	b00d      	add	sp, #52	; 0x34
 801e8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8ee:	f010 0f01 	tst.w	r0, #1
 801e8f2:	e7db      	b.n	801e8ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801e8f4:	6803      	ldr	r3, [r0, #0]
 801e8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8f8:	4798      	blx	r3
 801e8fa:	f8b9 1000 	ldrh.w	r1, [r9]
 801e8fe:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801e902:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801e906:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e90a:	434c      	muls	r4, r1
 801e90c:	2fff      	cmp	r7, #255	; 0xff
 801e90e:	fb01 2303 	mla	r3, r1, r3, r2
 801e912:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e916:	eba1 0106 	sub.w	r1, r1, r6
 801e91a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e91e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e922:	4418      	add	r0, r3
 801e924:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801e928:	eba3 0606 	sub.w	r6, r3, r6
 801e92c:	4404      	add	r4, r0
 801e92e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801e932:	d04a      	beq.n	801e9ca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 801e934:	43fa      	mvns	r2, r7
 801e936:	b2bb      	uxth	r3, r7
 801e938:	b2d7      	uxtb	r7, r2
 801e93a:	42a0      	cmp	r0, r4
 801e93c:	d263      	bcs.n	801ea06 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801e93e:	eb00 0e0c 	add.w	lr, r0, ip
 801e942:	4586      	cmp	lr, r0
 801e944:	f100 0803 	add.w	r8, r0, #3
 801e948:	d93a      	bls.n	801e9c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 801e94a:	f835 2b02 	ldrh.w	r2, [r5], #2
 801e94e:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801e952:	00d0      	lsls	r0, r2, #3
 801e954:	fb19 f907 	smulbb	r9, r9, r7
 801e958:	b2c0      	uxtb	r0, r0
 801e95a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e95e:	fb00 9003 	mla	r0, r0, r3, r9
 801e962:	b280      	uxth	r0, r0
 801e964:	f100 0901 	add.w	r9, r0, #1
 801e968:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e96c:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801e970:	fb19 f907 	smulbb	r9, r9, r7
 801e974:	1200      	asrs	r0, r0, #8
 801e976:	f808 0c03 	strb.w	r0, [r8, #-3]
 801e97a:	10d0      	asrs	r0, r2, #3
 801e97c:	1212      	asrs	r2, r2, #8
 801e97e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e982:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e986:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801e98a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e98e:	fb00 9003 	mla	r0, r0, r3, r9
 801e992:	b280      	uxth	r0, r0
 801e994:	f100 0901 	add.w	r9, r0, #1
 801e998:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e99c:	1200      	asrs	r0, r0, #8
 801e99e:	f808 0c02 	strb.w	r0, [r8, #-2]
 801e9a2:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801e9a6:	fb10 f007 	smulbb	r0, r0, r7
 801e9aa:	fb02 0203 	mla	r2, r2, r3, r0
 801e9ae:	b292      	uxth	r2, r2
 801e9b0:	1c50      	adds	r0, r2, #1
 801e9b2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e9b6:	4640      	mov	r0, r8
 801e9b8:	1212      	asrs	r2, r2, #8
 801e9ba:	f808 2c01 	strb.w	r2, [r8, #-1]
 801e9be:	e7c0      	b.n	801e942 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 801e9c0:	4408      	add	r0, r1
 801e9c2:	4435      	add	r5, r6
 801e9c4:	e7b9      	b.n	801e93a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 801e9c6:	4408      	add	r0, r1
 801e9c8:	4435      	add	r5, r6
 801e9ca:	42a0      	cmp	r0, r4
 801e9cc:	d21b      	bcs.n	801ea06 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801e9ce:	eb00 070c 	add.w	r7, r0, ip
 801e9d2:	42b8      	cmp	r0, r7
 801e9d4:	d2f7      	bcs.n	801e9c6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 801e9d6:	f835 3b02 	ldrh.w	r3, [r5], #2
 801e9da:	3003      	adds	r0, #3
 801e9dc:	00da      	lsls	r2, r3, #3
 801e9de:	b2d2      	uxtb	r2, r2
 801e9e0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e9e4:	f800 2c03 	strb.w	r2, [r0, #-3]
 801e9e8:	10da      	asrs	r2, r3, #3
 801e9ea:	121b      	asrs	r3, r3, #8
 801e9ec:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e9f0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e9f4:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e9f8:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e9fc:	f800 2c02 	strb.w	r2, [r0, #-2]
 801ea00:	f800 3c01 	strb.w	r3, [r0, #-1]
 801ea04:	e7e5      	b.n	801e9d2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 801ea06:	4b03      	ldr	r3, [pc, #12]	; (801ea14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801ea08:	6818      	ldr	r0, [r3, #0]
 801ea0a:	6803      	ldr	r3, [r0, #0]
 801ea0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea0e:	4798      	blx	r3
 801ea10:	e76a      	b.n	801e8e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801ea12:	bf00      	nop
 801ea14:	200566f8 	.word	0x200566f8
 801ea18:	200566f2 	.word	0x200566f2

0801ea1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801ea1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea20:	b088      	sub	sp, #32
 801ea22:	460d      	mov	r5, r1
 801ea24:	4604      	mov	r4, r0
 801ea26:	461e      	mov	r6, r3
 801ea28:	6808      	ldr	r0, [r1, #0]
 801ea2a:	ab04      	add	r3, sp, #16
 801ea2c:	6849      	ldr	r1, [r1, #4]
 801ea2e:	4f5c      	ldr	r7, [pc, #368]	; (801eba0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 801ea30:	c303      	stmia	r3!, {r0, r1}
 801ea32:	6810      	ldr	r0, [r2, #0]
 801ea34:	ab06      	add	r3, sp, #24
 801ea36:	6851      	ldr	r1, [r2, #4]
 801ea38:	c303      	stmia	r3!, {r0, r1}
 801ea3a:	a804      	add	r0, sp, #16
 801ea3c:	f7fa f864 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ea40:	4629      	mov	r1, r5
 801ea42:	a806      	add	r0, sp, #24
 801ea44:	f7fa f848 	bl	8018ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ea48:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ea4c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801ea50:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ea54:	6838      	ldr	r0, [r7, #0]
 801ea56:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ea5a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801ea5e:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 801ea62:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ea66:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801ea6a:	440a      	add	r2, r1
 801ea6c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ea70:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ea74:	4413      	add	r3, r2
 801ea76:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ea7a:	6803      	ldr	r3, [r0, #0]
 801ea7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ea7e:	4798      	blx	r3
 801ea80:	2eff      	cmp	r6, #255	; 0xff
 801ea82:	d117      	bne.n	801eab4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801ea84:	f010 0f20 	tst.w	r0, #32
 801ea88:	6838      	ldr	r0, [r7, #0]
 801ea8a:	d016      	beq.n	801eaba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801ea8c:	b2ad      	uxth	r5, r5
 801ea8e:	6801      	ldr	r1, [r0, #0]
 801ea90:	9603      	str	r6, [sp, #12]
 801ea92:	9501      	str	r5, [sp, #4]
 801ea94:	fa1f f588 	uxth.w	r5, r8
 801ea98:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 801ea9c:	9500      	str	r5, [sp, #0]
 801ea9e:	9602      	str	r6, [sp, #8]
 801eaa0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801eaa4:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 801eaa6:	4621      	mov	r1, r4
 801eaa8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801eaac:	47a8      	blx	r5
 801eaae:	b008      	add	sp, #32
 801eab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eab4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801eab8:	e7e6      	b.n	801ea88 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801eaba:	6803      	ldr	r3, [r0, #0]
 801eabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eabe:	4798      	blx	r3
 801eac0:	4b38      	ldr	r3, [pc, #224]	; (801eba4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801eac2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801eac6:	f8b3 c000 	ldrh.w	ip, [r3]
 801eaca:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801eace:	fb0c f505 	mul.w	r5, ip, r5
 801ead2:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801ead6:	fb0c 2303 	mla	r3, ip, r3, r2
 801eada:	ebac 0c08 	sub.w	ip, ip, r8
 801eade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eae2:	ebae 0e08 	sub.w	lr, lr, r8
 801eae6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eaea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801eaee:	4418      	add	r0, r3
 801eaf0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801eaf4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801eaf8:	4405      	add	r5, r0
 801eafa:	42a8      	cmp	r0, r5
 801eafc:	d24a      	bcs.n	801eb94 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 801eafe:	eb00 0803 	add.w	r8, r0, r3
 801eb02:	4540      	cmp	r0, r8
 801eb04:	d243      	bcs.n	801eb8e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 801eb06:	78e2      	ldrb	r2, [r4, #3]
 801eb08:	b15a      	cbz	r2, 801eb22 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801eb0a:	2aff      	cmp	r2, #255	; 0xff
 801eb0c:	f894 9000 	ldrb.w	r9, [r4]
 801eb10:	d10a      	bne.n	801eb28 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801eb12:	2eff      	cmp	r6, #255	; 0xff
 801eb14:	d108      	bne.n	801eb28 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801eb16:	f880 9000 	strb.w	r9, [r0]
 801eb1a:	7862      	ldrb	r2, [r4, #1]
 801eb1c:	7042      	strb	r2, [r0, #1]
 801eb1e:	78a2      	ldrb	r2, [r4, #2]
 801eb20:	7082      	strb	r2, [r0, #2]
 801eb22:	3003      	adds	r0, #3
 801eb24:	3404      	adds	r4, #4
 801eb26:	e7ec      	b.n	801eb02 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 801eb28:	4372      	muls	r2, r6
 801eb2a:	1c51      	adds	r1, r2, #1
 801eb2c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801eb30:	1209      	asrs	r1, r1, #8
 801eb32:	fa1f fa81 	uxth.w	sl, r1
 801eb36:	43c9      	mvns	r1, r1
 801eb38:	fb19 f90a 	smulbb	r9, r9, sl
 801eb3c:	b2ca      	uxtb	r2, r1
 801eb3e:	7801      	ldrb	r1, [r0, #0]
 801eb40:	fb01 9902 	mla	r9, r1, r2, r9
 801eb44:	fa1f f989 	uxth.w	r9, r9
 801eb48:	f109 0101 	add.w	r1, r9, #1
 801eb4c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801eb50:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eb54:	f880 9000 	strb.w	r9, [r0]
 801eb58:	f890 9001 	ldrb.w	r9, [r0, #1]
 801eb5c:	7861      	ldrb	r1, [r4, #1]
 801eb5e:	fb19 f902 	smulbb	r9, r9, r2
 801eb62:	fb01 910a 	mla	r1, r1, sl, r9
 801eb66:	b289      	uxth	r1, r1
 801eb68:	f101 0901 	add.w	r9, r1, #1
 801eb6c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801eb70:	1209      	asrs	r1, r1, #8
 801eb72:	7041      	strb	r1, [r0, #1]
 801eb74:	7881      	ldrb	r1, [r0, #2]
 801eb76:	f894 9002 	ldrb.w	r9, [r4, #2]
 801eb7a:	fb11 f202 	smulbb	r2, r1, r2
 801eb7e:	fb09 220a 	mla	r2, r9, sl, r2
 801eb82:	b292      	uxth	r2, r2
 801eb84:	1c51      	adds	r1, r2, #1
 801eb86:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801eb8a:	1212      	asrs	r2, r2, #8
 801eb8c:	e7c8      	b.n	801eb20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 801eb8e:	4460      	add	r0, ip
 801eb90:	4474      	add	r4, lr
 801eb92:	e7b2      	b.n	801eafa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801eb94:	6838      	ldr	r0, [r7, #0]
 801eb96:	6803      	ldr	r3, [r0, #0]
 801eb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb9a:	4798      	blx	r3
 801eb9c:	e787      	b.n	801eaae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 801eb9e:	bf00      	nop
 801eba0:	200566f8 	.word	0x200566f8
 801eba4:	200566f2 	.word	0x200566f2

0801eba8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801eba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ebac:	b085      	sub	sp, #20
 801ebae:	4606      	mov	r6, r0
 801ebb0:	460c      	mov	r4, r1
 801ebb2:	4691      	mov	r9, r2
 801ebb4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801ebb8:	4698      	mov	r8, r3
 801ebba:	b31d      	cbz	r5, 801ec04 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ebbc:	4608      	mov	r0, r1
 801ebbe:	f7fd f9e3 	bl	801bf88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ebc2:	4607      	mov	r7, r0
 801ebc4:	4620      	mov	r0, r4
 801ebc6:	f7fd fa19 	bl	801bffc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ebca:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ebce:	4620      	mov	r0, r4
 801ebd0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801ebd4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ebd8:	f8ad 700c 	strh.w	r7, [sp, #12]
 801ebdc:	f7fd fad2 	bl	801c184 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ebe0:	280b      	cmp	r0, #11
 801ebe2:	d838      	bhi.n	801ec56 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801ebe4:	e8df f000 	tbb	[pc, r0]
 801ebe8:	37062920 	.word	0x37062920
 801ebec:	37373737 	.word	0x37373737
 801ebf0:	11373737 	.word	0x11373737
 801ebf4:	4620      	mov	r0, r4
 801ebf6:	f7fd fa3b 	bl	801c070 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ebfa:	462b      	mov	r3, r5
 801ebfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ebfe:	a902      	add	r1, sp, #8
 801ec00:	f7ff ff0c 	bl	801ea1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ec04:	b005      	add	sp, #20
 801ec06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec0a:	4620      	mov	r0, r4
 801ec0c:	f7fd fa30 	bl	801c070 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ec10:	4606      	mov	r6, r0
 801ec12:	4620      	mov	r0, r4
 801ec14:	f7fd fa5e 	bl	801c0d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ec18:	9500      	str	r5, [sp, #0]
 801ec1a:	4601      	mov	r1, r0
 801ec1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec1e:	aa02      	add	r2, sp, #8
 801ec20:	4630      	mov	r0, r6
 801ec22:	f7ff fde7 	bl	801e7f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ec26:	e7ed      	b.n	801ec04 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ec28:	4620      	mov	r0, r4
 801ec2a:	f7fd fa21 	bl	801c070 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ec2e:	462b      	mov	r3, r5
 801ec30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ec32:	a902      	add	r1, sp, #8
 801ec34:	f7ff fdfe 	bl	801e834 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801ec38:	e7e4      	b.n	801ec04 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ec3a:	6833      	ldr	r3, [r6, #0]
 801ec3c:	4620      	mov	r0, r4
 801ec3e:	68df      	ldr	r7, [r3, #12]
 801ec40:	f7fd fa16 	bl	801c070 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ec44:	2300      	movs	r3, #0
 801ec46:	4601      	mov	r1, r0
 801ec48:	aa02      	add	r2, sp, #8
 801ec4a:	4630      	mov	r0, r6
 801ec4c:	e9cd 5300 	strd	r5, r3, [sp]
 801ec50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec52:	47b8      	blx	r7
 801ec54:	e7d6      	b.n	801ec04 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ec56:	4b03      	ldr	r3, [pc, #12]	; (801ec64 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801ec58:	2147      	movs	r1, #71	; 0x47
 801ec5a:	4a03      	ldr	r2, [pc, #12]	; (801ec68 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801ec5c:	4803      	ldr	r0, [pc, #12]	; (801ec6c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801ec5e:	f007 f9bf 	bl	8025fe0 <__assert_func>
 801ec62:	bf00      	nop
 801ec64:	0802ddca 	.word	0x0802ddca
 801ec68:	0802e4b8 	.word	0x0802e4b8
 801ec6c:	0802de99 	.word	0x0802de99

0801ec70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ec70:	b570      	push	{r4, r5, r6, lr}
 801ec72:	9d04      	ldr	r5, [sp, #16]
 801ec74:	460c      	mov	r4, r1
 801ec76:	4619      	mov	r1, r3
 801ec78:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ec7c:	2a0d      	cmp	r2, #13
 801ec7e:	d826      	bhi.n	801ecce <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801ec80:	e8df f002 	tbb	[pc, r2]
 801ec84:	200e1407 	.word	0x200e1407
 801ec88:	20202020 	.word	0x20202020
 801ec8c:	20202020 	.word	0x20202020
 801ec90:	2020      	.short	0x2020
 801ec92:	4b0f      	ldr	r3, [pc, #60]	; (801ecd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801ec94:	f240 11d3 	movw	r1, #467	; 0x1d3
 801ec98:	4a0e      	ldr	r2, [pc, #56]	; (801ecd4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801ec9a:	480f      	ldr	r0, [pc, #60]	; (801ecd8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801ec9c:	f007 f9a0 	bl	8025fe0 <__assert_func>
 801eca0:	462a      	mov	r2, r5
 801eca2:	4620      	mov	r0, r4
 801eca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eca8:	f7ff beb8 	b.w	801ea1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ecac:	6802      	ldr	r2, [r0, #0]
 801ecae:	2600      	movs	r6, #0
 801ecb0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801ecb4:	68d6      	ldr	r6, [r2, #12]
 801ecb6:	462b      	mov	r3, r5
 801ecb8:	460a      	mov	r2, r1
 801ecba:	4621      	mov	r1, r4
 801ecbc:	46b4      	mov	ip, r6
 801ecbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ecc2:	4760      	bx	ip
 801ecc4:	4b05      	ldr	r3, [pc, #20]	; (801ecdc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801ecc6:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801ecca:	4a02      	ldr	r2, [pc, #8]	; (801ecd4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801eccc:	e7e5      	b.n	801ec9a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801ecce:	bd70      	pop	{r4, r5, r6, pc}
 801ecd0:	0802e070 	.word	0x0802e070
 801ecd4:	0802e7a0 	.word	0x0802e7a0
 801ecd8:	0802de99 	.word	0x0802de99
 801ecdc:	0802e0b1 	.word	0x0802e0b1

0801ece0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801ece0:	b158      	cbz	r0, 801ecfa <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801ece2:	2902      	cmp	r1, #2
 801ece4:	d00f      	beq.n	801ed06 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801ece6:	2903      	cmp	r1, #3
 801ece8:	d010      	beq.n	801ed0c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801ecea:	2901      	cmp	r1, #1
 801ecec:	d101      	bne.n	801ecf2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ecee:	2001      	movs	r0, #1
 801ecf0:	4770      	bx	lr
 801ecf2:	4b08      	ldr	r3, [pc, #32]	; (801ed14 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ecf4:	8819      	ldrh	r1, [r3, #0]
 801ecf6:	4248      	negs	r0, r1
 801ecf8:	4770      	bx	lr
 801ecfa:	2902      	cmp	r1, #2
 801ecfc:	d006      	beq.n	801ed0c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801ecfe:	2903      	cmp	r1, #3
 801ed00:	d0f7      	beq.n	801ecf2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ed02:	2901      	cmp	r1, #1
 801ed04:	d1f3      	bne.n	801ecee <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801ed06:	4b03      	ldr	r3, [pc, #12]	; (801ed14 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ed08:	8818      	ldrh	r0, [r3, #0]
 801ed0a:	4770      	bx	lr
 801ed0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ed10:	4770      	bx	lr
 801ed12:	bf00      	nop
 801ed14:	200566f2 	.word	0x200566f2

0801ed18 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801ed18:	b170      	cbz	r0, 801ed38 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801ed1a:	2902      	cmp	r1, #2
 801ed1c:	d012      	beq.n	801ed44 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801ed1e:	2903      	cmp	r1, #3
 801ed20:	d006      	beq.n	801ed30 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801ed22:	2901      	cmp	r1, #1
 801ed24:	d001      	beq.n	801ed2a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801ed26:	2001      	movs	r0, #1
 801ed28:	4770      	bx	lr
 801ed2a:	4b08      	ldr	r3, [pc, #32]	; (801ed4c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ed2c:	8818      	ldrh	r0, [r3, #0]
 801ed2e:	4770      	bx	lr
 801ed30:	4b06      	ldr	r3, [pc, #24]	; (801ed4c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ed32:	8818      	ldrh	r0, [r3, #0]
 801ed34:	4240      	negs	r0, r0
 801ed36:	4770      	bx	lr
 801ed38:	2902      	cmp	r1, #2
 801ed3a:	d0f9      	beq.n	801ed30 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801ed3c:	2903      	cmp	r1, #3
 801ed3e:	d0f2      	beq.n	801ed26 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801ed40:	2901      	cmp	r1, #1
 801ed42:	d1f2      	bne.n	801ed2a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801ed44:	f04f 30ff 	mov.w	r0, #4294967295
 801ed48:	4770      	bx	lr
 801ed4a:	bf00      	nop
 801ed4c:	200566f2 	.word	0x200566f2

0801ed50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ed50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed54:	b095      	sub	sp, #84	; 0x54
 801ed56:	9109      	str	r1, [sp, #36]	; 0x24
 801ed58:	a910      	add	r1, sp, #64	; 0x40
 801ed5a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801ed5e:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 801ed62:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801ed66:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801ed6a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801ed6e:	e881 000c 	stmia.w	r1, {r2, r3}
 801ed72:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801ed76:	9308      	str	r3, [sp, #32]
 801ed78:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801ed7c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801ed80:	930f      	str	r3, [sp, #60]	; 0x3c
 801ed82:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801ed86:	798d      	ldrb	r5, [r1, #6]
 801ed88:	930a      	str	r3, [sp, #40]	; 0x28
 801ed8a:	7b4b      	ldrb	r3, [r1, #13]
 801ed8c:	0158      	lsls	r0, r3, #5
 801ed8e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ed92:	4328      	orrs	r0, r5
 801ed94:	9007      	str	r0, [sp, #28]
 801ed96:	f000 817a 	beq.w	801f08e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801ed9a:	011b      	lsls	r3, r3, #4
 801ed9c:	79c8      	ldrb	r0, [r1, #7]
 801ed9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eda2:	4303      	orrs	r3, r0
 801eda4:	930c      	str	r3, [sp, #48]	; 0x30
 801eda6:	f000 8172 	beq.w	801f08e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801edaa:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801edae:	b29b      	uxth	r3, r3
 801edb0:	2f00      	cmp	r7, #0
 801edb2:	f000 8117 	beq.w	801efe4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801edb6:	1aff      	subs	r7, r7, r3
 801edb8:	b2bf      	uxth	r7, r7
 801edba:	043b      	lsls	r3, r7, #16
 801edbc:	d502      	bpl.n	801edc4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801edbe:	1bf6      	subs	r6, r6, r7
 801edc0:	2700      	movs	r7, #0
 801edc2:	b236      	sxth	r6, r6
 801edc4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801edc8:	a810      	add	r0, sp, #64	; 0x40
 801edca:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801edce:	428e      	cmp	r6, r1
 801edd0:	b28b      	uxth	r3, r1
 801edd2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801edd6:	bfbf      	itttt	lt
 801edd8:	18ff      	addlt	r7, r7, r3
 801edda:	1bbe      	sublt	r6, r7, r6
 801eddc:	b2b7      	uxthlt	r7, r6
 801edde:	460e      	movlt	r6, r1
 801ede0:	8891      	ldrh	r1, [r2, #4]
 801ede2:	440b      	add	r3, r1
 801ede4:	4631      	mov	r1, r6
 801ede6:	b21b      	sxth	r3, r3
 801ede8:	930e      	str	r3, [sp, #56]	; 0x38
 801edea:	88d3      	ldrh	r3, [r2, #6]
 801edec:	9a08      	ldr	r2, [sp, #32]
 801edee:	449a      	add	sl, r3
 801edf0:	fa0f f38a 	sxth.w	r3, sl
 801edf4:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801edf8:	930d      	str	r3, [sp, #52]	; 0x34
 801edfa:	4bb4      	ldr	r3, [pc, #720]	; (801f0cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801edfc:	f893 b000 	ldrb.w	fp, [r3]
 801ee00:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ee04:	f1dc 0300 	rsbs	r3, ip, #0
 801ee08:	eb43 030c 	adc.w	r3, r3, ip
 801ee0c:	930b      	str	r3, [sp, #44]	; 0x2c
 801ee0e:	464b      	mov	r3, r9
 801ee10:	f7f9 fcd3 	bl	80187ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ee14:	4631      	mov	r1, r6
 801ee16:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801ee1a:	464b      	mov	r3, r9
 801ee1c:	9a08      	ldr	r2, [sp, #32]
 801ee1e:	a810      	add	r0, sp, #64	; 0x40
 801ee20:	f7f9 fce3 	bl	80187ea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ee24:	a914      	add	r1, sp, #80	; 0x50
 801ee26:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ee2a:	a813      	add	r0, sp, #76	; 0x4c
 801ee2c:	f7f9 fe3e 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ee30:	f1b9 0f00 	cmp.w	r9, #0
 801ee34:	f040 80d9 	bne.w	801efea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801ee38:	f1bb 0f01 	cmp.w	fp, #1
 801ee3c:	f040 80dd 	bne.w	801effa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801ee40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ee42:	b153      	cbz	r3, 801ee5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801ee44:	2508      	movs	r5, #8
 801ee46:	9a07      	ldr	r2, [sp, #28]
 801ee48:	fb95 f3f8 	sdiv	r3, r5, r8
 801ee4c:	1e5d      	subs	r5, r3, #1
 801ee4e:	4415      	add	r5, r2
 801ee50:	fb95 f5f3 	sdiv	r5, r5, r3
 801ee54:	fb15 f503 	smulbb	r5, r5, r3
 801ee58:	b2ad      	uxth	r5, r5
 801ee5a:	b907      	cbnz	r7, 801ee5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801ee5c:	b16c      	cbz	r4, 801ee7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801ee5e:	fb04 7305 	mla	r3, r4, r5, r7
 801ee62:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ee64:	ebaa 0a04 	sub.w	sl, sl, r4
 801ee68:	fb08 f303 	mul.w	r3, r8, r3
 801ee6c:	fa1f fa8a 	uxth.w	sl, sl
 801ee70:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ee74:	f003 0407 	and.w	r4, r3, #7
 801ee78:	9224      	str	r2, [sp, #144]	; 0x90
 801ee7a:	4649      	mov	r1, r9
 801ee7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ee7e:	f7ff ff2f 	bl	801ece0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ee82:	4649      	mov	r1, r9
 801ee84:	4683      	mov	fp, r0
 801ee86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ee88:	f7ff ff46 	bl	801ed18 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ee8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee8e:	9a08      	ldr	r2, [sp, #32]
 801ee90:	4681      	mov	r9, r0
 801ee92:	1a9b      	subs	r3, r3, r2
 801ee94:	459a      	cmp	sl, r3
 801ee96:	bfa8      	it	ge
 801ee98:	469a      	movge	sl, r3
 801ee9a:	f1ba 0f00 	cmp.w	sl, #0
 801ee9e:	f340 80f6 	ble.w	801f08e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801eea2:	1bf6      	subs	r6, r6, r7
 801eea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eea6:	1b9e      	subs	r6, r3, r6
 801eea8:	9b07      	ldr	r3, [sp, #28]
 801eeaa:	429e      	cmp	r6, r3
 801eeac:	bfd4      	ite	le
 801eeae:	ebc7 0706 	rsble	r7, r7, r6
 801eeb2:	ebc7 0703 	rsbgt	r7, r7, r3
 801eeb6:	2f00      	cmp	r7, #0
 801eeb8:	f340 80e9 	ble.w	801f08e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801eebc:	1bed      	subs	r5, r5, r7
 801eebe:	fb08 f305 	mul.w	r3, r8, r5
 801eec2:	930b      	str	r3, [sp, #44]	; 0x2c
 801eec4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eec6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801eeca:	930c      	str	r3, [sp, #48]	; 0x30
 801eecc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eece:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eed2:	930d      	str	r3, [sp, #52]	; 0x34
 801eed4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eed6:	b2db      	uxtb	r3, r3
 801eed8:	930e      	str	r3, [sp, #56]	; 0x38
 801eeda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eedc:	2b00      	cmp	r3, #0
 801eede:	f040 80db 	bne.w	801f098 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801eee2:	4b7b      	ldr	r3, [pc, #492]	; (801f0d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801eee4:	6818      	ldr	r0, [r3, #0]
 801eee6:	6803      	ldr	r3, [r0, #0]
 801eee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eeea:	4798      	blx	r3
 801eeec:	2301      	movs	r3, #1
 801eeee:	4a79      	ldr	r2, [pc, #484]	; (801f0d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801eef0:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801eef4:	fb07 9b1b 	mls	fp, r7, fp, r9
 801eef8:	fa03 f308 	lsl.w	r3, r3, r8
 801eefc:	8811      	ldrh	r1, [r2, #0]
 801eefe:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ef02:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801ef06:	3b01      	subs	r3, #1
 801ef08:	fb06 bb07 	mla	fp, r6, r7, fp
 801ef0c:	b2db      	uxtb	r3, r3
 801ef0e:	9308      	str	r3, [sp, #32]
 801ef10:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801ef14:	fb01 2303 	mla	r3, r1, r3, r2
 801ef18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef1c:	18c3      	adds	r3, r0, r3
 801ef1e:	9307      	str	r3, [sp, #28]
 801ef20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef22:	781a      	ldrb	r2, [r3, #0]
 801ef24:	4122      	asrs	r2, r4
 801ef26:	b2d2      	uxtb	r2, r2
 801ef28:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801ef2c:	f0c0 80d4 	bcc.w	801f0d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 801ef30:	46be      	mov	lr, r7
 801ef32:	9907      	ldr	r1, [sp, #28]
 801ef34:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801ef38:	f0c0 80b7 	bcc.w	801f0aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801ef3c:	9b08      	ldr	r3, [sp, #32]
 801ef3e:	4013      	ands	r3, r2
 801ef40:	d041      	beq.n	801efc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801ef42:	20ff      	movs	r0, #255	; 0xff
 801ef44:	9d08      	ldr	r5, [sp, #32]
 801ef46:	fb90 f5f5 	sdiv	r5, r0, r5
 801ef4a:	436b      	muls	r3, r5
 801ef4c:	2bfe      	cmp	r3, #254	; 0xfe
 801ef4e:	dd03      	ble.n	801ef58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801ef50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ef52:	4285      	cmp	r5, r0
 801ef54:	f000 80a2 	beq.w	801f09c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801ef58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ef5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ef5c:	fb15 f303 	smulbb	r3, r5, r3
 801ef60:	b29b      	uxth	r3, r3
 801ef62:	1c5d      	adds	r5, r3, #1
 801ef64:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801ef68:	780d      	ldrb	r5, [r1, #0]
 801ef6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ef6e:	fa1f fc83 	uxth.w	ip, r3
 801ef72:	43db      	mvns	r3, r3
 801ef74:	fb10 f90c 	smulbb	r9, r0, ip
 801ef78:	b2db      	uxtb	r3, r3
 801ef7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ef7c:	fb05 9503 	mla	r5, r5, r3, r9
 801ef80:	b2ad      	uxth	r5, r5
 801ef82:	f105 0901 	add.w	r9, r5, #1
 801ef86:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ef8a:	fb10 f90c 	smulbb	r9, r0, ip
 801ef8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ef90:	122d      	asrs	r5, r5, #8
 801ef92:	fb10 fc0c 	smulbb	ip, r0, ip
 801ef96:	700d      	strb	r5, [r1, #0]
 801ef98:	784d      	ldrb	r5, [r1, #1]
 801ef9a:	fb05 9503 	mla	r5, r5, r3, r9
 801ef9e:	b2ad      	uxth	r5, r5
 801efa0:	f105 0901 	add.w	r9, r5, #1
 801efa4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801efa8:	122d      	asrs	r5, r5, #8
 801efaa:	704d      	strb	r5, [r1, #1]
 801efac:	788d      	ldrb	r5, [r1, #2]
 801efae:	fb05 cc03 	mla	ip, r5, r3, ip
 801efb2:	fa1f fc8c 	uxth.w	ip, ip
 801efb6:	f10c 0301 	add.w	r3, ip, #1
 801efba:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801efbe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801efc2:	f881 c002 	strb.w	ip, [r1, #2]
 801efc6:	4444      	add	r4, r8
 801efc8:	4431      	add	r1, r6
 801efca:	b2a4      	uxth	r4, r4
 801efcc:	2c07      	cmp	r4, #7
 801efce:	bf89      	itett	hi
 801efd0:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801efd2:	fa42 f208 	asrls.w	r2, r2, r8
 801efd6:	2400      	movhi	r4, #0
 801efd8:	785a      	ldrbhi	r2, [r3, #1]
 801efda:	bf8a      	itet	hi
 801efdc:	3301      	addhi	r3, #1
 801efde:	b2d2      	uxtbls	r2, r2
 801efe0:	9324      	strhi	r3, [sp, #144]	; 0x90
 801efe2:	e7a7      	b.n	801ef34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801efe4:	441e      	add	r6, r3
 801efe6:	b236      	sxth	r6, r6
 801efe8:	e6ec      	b.n	801edc4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801efea:	f1b9 0f01 	cmp.w	r9, #1
 801efee:	f47f af27 	bne.w	801ee40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eff2:	f1bb 0f01 	cmp.w	fp, #1
 801eff6:	f47f af23 	bne.w	801ee40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801effa:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801f0d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801effe:	f8db 0000 	ldr.w	r0, [fp]
 801f002:	6803      	ldr	r3, [r0, #0]
 801f004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f006:	4798      	blx	r3
 801f008:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801f00c:	465a      	mov	r2, fp
 801f00e:	d006      	beq.n	801f01e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801f010:	f1b8 0f04 	cmp.w	r8, #4
 801f014:	d13e      	bne.n	801f094 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801f016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f018:	3300      	adds	r3, #0
 801f01a:	bf18      	it	ne
 801f01c:	2301      	movne	r3, #1
 801f01e:	0580      	lsls	r0, r0, #22
 801f020:	d563      	bpl.n	801f0ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801f022:	f1b8 0f08 	cmp.w	r8, #8
 801f026:	d160      	bne.n	801f0ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801f028:	2b00      	cmp	r3, #0
 801f02a:	bf0c      	ite	eq
 801f02c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801f030:	f44f 7180 	movne.w	r1, #256	; 0x100
 801f034:	2f00      	cmp	r7, #0
 801f036:	f47f af03 	bne.w	801ee40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f03a:	2c00      	cmp	r4, #0
 801f03c:	f47f af00 	bne.w	801ee40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f040:	9b07      	ldr	r3, [sp, #28]
 801f042:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f044:	18f3      	adds	r3, r6, r3
 801f046:	4283      	cmp	r3, r0
 801f048:	f73f aefa 	bgt.w	801ee40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f04c:	9808      	ldr	r0, [sp, #32]
 801f04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f050:	4403      	add	r3, r0
 801f052:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f054:	4283      	cmp	r3, r0
 801f056:	f73f aef3 	bgt.w	801ee40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f05a:	f1b8 0f08 	cmp.w	r8, #8
 801f05e:	6810      	ldr	r0, [r2, #0]
 801f060:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801f064:	bf18      	it	ne
 801f066:	3501      	addne	r5, #1
 801f068:	6804      	ldr	r4, [r0, #0]
 801f06a:	9105      	str	r1, [sp, #20]
 801f06c:	bf18      	it	ne
 801f06e:	f025 0501 	bicne.w	r5, r5, #1
 801f072:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f074:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801f078:	bf18      	it	ne
 801f07a:	b2ad      	uxthne	r5, r5
 801f07c:	9104      	str	r1, [sp, #16]
 801f07e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f080:	e9cd 5a00 	strd	r5, sl, [sp]
 801f084:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801f088:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f08a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801f08c:	47a0      	blx	r4
 801f08e:	b015      	add	sp, #84	; 0x54
 801f090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f094:	2300      	movs	r3, #0
 801f096:	e7c2      	b.n	801f01e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801f098:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f09a:	e727      	b.n	801eeec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801f09c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f09e:	700b      	strb	r3, [r1, #0]
 801f0a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f0a2:	704b      	strb	r3, [r1, #1]
 801f0a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f0a6:	708b      	strb	r3, [r1, #2]
 801f0a8:	e78d      	b.n	801efc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801f0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f0ac:	b153      	cbz	r3, 801f0c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801f0ae:	441c      	add	r4, r3
 801f0b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f0b2:	b2a4      	uxth	r4, r4
 801f0b4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801f0b8:	f004 0407 	and.w	r4, r4, #7
 801f0bc:	781a      	ldrb	r2, [r3, #0]
 801f0be:	9324      	str	r3, [sp, #144]	; 0x90
 801f0c0:	4122      	asrs	r2, r4
 801f0c2:	b2d2      	uxtb	r2, r2
 801f0c4:	9b07      	ldr	r3, [sp, #28]
 801f0c6:	445b      	add	r3, fp
 801f0c8:	9307      	str	r3, [sp, #28]
 801f0ca:	e72d      	b.n	801ef28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801f0cc:	200566f0 	.word	0x200566f0
 801f0d0:	200566f8 	.word	0x200566f8
 801f0d4:	200566f2 	.word	0x200566f2
 801f0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d1d7      	bne.n	801f08e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f0de:	4b06      	ldr	r3, [pc, #24]	; (801f0f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801f0e0:	6818      	ldr	r0, [r3, #0]
 801f0e2:	6803      	ldr	r3, [r0, #0]
 801f0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f0e6:	4798      	blx	r3
 801f0e8:	e7d1      	b.n	801f08e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	f43f aea8 	beq.w	801ee40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f0f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801f0f4:	e79e      	b.n	801f034 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801f0f6:	bf00      	nop
 801f0f8:	200566f8 	.word	0x200566f8

0801f0fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801f0fc:	b538      	push	{r3, r4, r5, lr}
 801f0fe:	4c15      	ldr	r4, [pc, #84]	; (801f154 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f100:	4605      	mov	r5, r0
 801f102:	7823      	ldrb	r3, [r4, #0]
 801f104:	f3bf 8f5b 	dmb	ish
 801f108:	07da      	lsls	r2, r3, #31
 801f10a:	d40b      	bmi.n	801f124 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f10c:	4620      	mov	r0, r4
 801f10e:	f006 fe34 	bl	8025d7a <__cxa_guard_acquire>
 801f112:	b138      	cbz	r0, 801f124 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f114:	4620      	mov	r0, r4
 801f116:	f006 fe3c 	bl	8025d92 <__cxa_guard_release>
 801f11a:	4a0f      	ldr	r2, [pc, #60]	; (801f158 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f11c:	490f      	ldr	r1, [pc, #60]	; (801f15c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f11e:	4810      	ldr	r0, [pc, #64]	; (801f160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f120:	f006 fe24 	bl	8025d6c <__aeabi_atexit>
 801f124:	4c0f      	ldr	r4, [pc, #60]	; (801f164 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f126:	7823      	ldrb	r3, [r4, #0]
 801f128:	f3bf 8f5b 	dmb	ish
 801f12c:	07db      	lsls	r3, r3, #31
 801f12e:	d40b      	bmi.n	801f148 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f130:	4620      	mov	r0, r4
 801f132:	f006 fe22 	bl	8025d7a <__cxa_guard_acquire>
 801f136:	b138      	cbz	r0, 801f148 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f138:	4620      	mov	r0, r4
 801f13a:	f006 fe2a 	bl	8025d92 <__cxa_guard_release>
 801f13e:	4a06      	ldr	r2, [pc, #24]	; (801f158 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f140:	4909      	ldr	r1, [pc, #36]	; (801f168 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f142:	480a      	ldr	r0, [pc, #40]	; (801f16c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f144:	f006 fe12 	bl	8025d6c <__aeabi_atexit>
 801f148:	4b05      	ldr	r3, [pc, #20]	; (801f160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f14a:	612b      	str	r3, [r5, #16]
 801f14c:	4b07      	ldr	r3, [pc, #28]	; (801f16c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f14e:	616b      	str	r3, [r5, #20]
 801f150:	bd38      	pop	{r3, r4, r5, pc}
 801f152:	bf00      	nop
 801f154:	200567e4 	.word	0x200567e4
 801f158:	20000000 	.word	0x20000000
 801f15c:	0801da47 	.word	0x0801da47
 801f160:	20000068 	.word	0x20000068
 801f164:	200567e8 	.word	0x200567e8
 801f168:	0801da45 	.word	0x0801da45
 801f16c:	2000006c 	.word	0x2000006c

0801f170 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f170:	b538      	push	{r3, r4, r5, lr}
 801f172:	4c15      	ldr	r4, [pc, #84]	; (801f1c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f174:	4605      	mov	r5, r0
 801f176:	7823      	ldrb	r3, [r4, #0]
 801f178:	f3bf 8f5b 	dmb	ish
 801f17c:	07da      	lsls	r2, r3, #31
 801f17e:	d40b      	bmi.n	801f198 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f180:	4620      	mov	r0, r4
 801f182:	f006 fdfa 	bl	8025d7a <__cxa_guard_acquire>
 801f186:	b138      	cbz	r0, 801f198 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f188:	4620      	mov	r0, r4
 801f18a:	f006 fe02 	bl	8025d92 <__cxa_guard_release>
 801f18e:	4a0f      	ldr	r2, [pc, #60]	; (801f1cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f190:	490f      	ldr	r1, [pc, #60]	; (801f1d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f192:	4810      	ldr	r0, [pc, #64]	; (801f1d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f194:	f006 fdea 	bl	8025d6c <__aeabi_atexit>
 801f198:	4c0f      	ldr	r4, [pc, #60]	; (801f1d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f19a:	7823      	ldrb	r3, [r4, #0]
 801f19c:	f3bf 8f5b 	dmb	ish
 801f1a0:	07db      	lsls	r3, r3, #31
 801f1a2:	d40b      	bmi.n	801f1bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f1a4:	4620      	mov	r0, r4
 801f1a6:	f006 fde8 	bl	8025d7a <__cxa_guard_acquire>
 801f1aa:	b138      	cbz	r0, 801f1bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f1ac:	4620      	mov	r0, r4
 801f1ae:	f006 fdf0 	bl	8025d92 <__cxa_guard_release>
 801f1b2:	4a06      	ldr	r2, [pc, #24]	; (801f1cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f1b4:	4909      	ldr	r1, [pc, #36]	; (801f1dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f1b6:	480a      	ldr	r0, [pc, #40]	; (801f1e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f1b8:	f006 fdd8 	bl	8025d6c <__aeabi_atexit>
 801f1bc:	4b05      	ldr	r3, [pc, #20]	; (801f1d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f1be:	60ab      	str	r3, [r5, #8]
 801f1c0:	4b07      	ldr	r3, [pc, #28]	; (801f1e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f1c2:	60eb      	str	r3, [r5, #12]
 801f1c4:	bd38      	pop	{r3, r4, r5, pc}
 801f1c6:	bf00      	nop
 801f1c8:	200567c4 	.word	0x200567c4
 801f1cc:	20000000 	.word	0x20000000
 801f1d0:	0801da4b 	.word	0x0801da4b
 801f1d4:	20000048 	.word	0x20000048
 801f1d8:	200567c8 	.word	0x200567c8
 801f1dc:	0801da49 	.word	0x0801da49
 801f1e0:	2000004c 	.word	0x2000004c

0801f1e4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801f1e4:	b510      	push	{r4, lr}
 801f1e6:	4604      	mov	r4, r0
 801f1e8:	f7ff ff88 	bl	801f0fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1f2:	f7ff bfbd 	b.w	801f170 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f1f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f1f8:	b538      	push	{r3, r4, r5, lr}
 801f1fa:	4c15      	ldr	r4, [pc, #84]	; (801f250 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f1fc:	4605      	mov	r5, r0
 801f1fe:	7823      	ldrb	r3, [r4, #0]
 801f200:	f3bf 8f5b 	dmb	ish
 801f204:	07da      	lsls	r2, r3, #31
 801f206:	d40b      	bmi.n	801f220 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f208:	4620      	mov	r0, r4
 801f20a:	f006 fdb6 	bl	8025d7a <__cxa_guard_acquire>
 801f20e:	b138      	cbz	r0, 801f220 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f210:	4620      	mov	r0, r4
 801f212:	f006 fdbe 	bl	8025d92 <__cxa_guard_release>
 801f216:	4a0f      	ldr	r2, [pc, #60]	; (801f254 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f218:	490f      	ldr	r1, [pc, #60]	; (801f258 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f21a:	4810      	ldr	r0, [pc, #64]	; (801f25c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f21c:	f006 fda6 	bl	8025d6c <__aeabi_atexit>
 801f220:	4c0f      	ldr	r4, [pc, #60]	; (801f260 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f222:	7823      	ldrb	r3, [r4, #0]
 801f224:	f3bf 8f5b 	dmb	ish
 801f228:	07db      	lsls	r3, r3, #31
 801f22a:	d40b      	bmi.n	801f244 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f22c:	4620      	mov	r0, r4
 801f22e:	f006 fda4 	bl	8025d7a <__cxa_guard_acquire>
 801f232:	b138      	cbz	r0, 801f244 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f234:	4620      	mov	r0, r4
 801f236:	f006 fdac 	bl	8025d92 <__cxa_guard_release>
 801f23a:	4a06      	ldr	r2, [pc, #24]	; (801f254 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f23c:	4909      	ldr	r1, [pc, #36]	; (801f264 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f23e:	480a      	ldr	r0, [pc, #40]	; (801f268 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f240:	f006 fd94 	bl	8025d6c <__aeabi_atexit>
 801f244:	4b05      	ldr	r3, [pc, #20]	; (801f25c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f246:	622b      	str	r3, [r5, #32]
 801f248:	4b07      	ldr	r3, [pc, #28]	; (801f268 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f24a:	626b      	str	r3, [r5, #36]	; 0x24
 801f24c:	bd38      	pop	{r3, r4, r5, pc}
 801f24e:	bf00      	nop
 801f250:	200567ec 	.word	0x200567ec
 801f254:	20000000 	.word	0x20000000
 801f258:	0801da3f 	.word	0x0801da3f
 801f25c:	20000070 	.word	0x20000070
 801f260:	200567f0 	.word	0x200567f0
 801f264:	0801da3d 	.word	0x0801da3d
 801f268:	20000074 	.word	0x20000074

0801f26c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f26c:	b538      	push	{r3, r4, r5, lr}
 801f26e:	4c15      	ldr	r4, [pc, #84]	; (801f2c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f270:	4605      	mov	r5, r0
 801f272:	7823      	ldrb	r3, [r4, #0]
 801f274:	f3bf 8f5b 	dmb	ish
 801f278:	07da      	lsls	r2, r3, #31
 801f27a:	d40b      	bmi.n	801f294 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f27c:	4620      	mov	r0, r4
 801f27e:	f006 fd7c 	bl	8025d7a <__cxa_guard_acquire>
 801f282:	b138      	cbz	r0, 801f294 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f284:	4620      	mov	r0, r4
 801f286:	f006 fd84 	bl	8025d92 <__cxa_guard_release>
 801f28a:	4a0f      	ldr	r2, [pc, #60]	; (801f2c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f28c:	490f      	ldr	r1, [pc, #60]	; (801f2cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f28e:	4810      	ldr	r0, [pc, #64]	; (801f2d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f290:	f006 fd6c 	bl	8025d6c <__aeabi_atexit>
 801f294:	4c0f      	ldr	r4, [pc, #60]	; (801f2d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f296:	7823      	ldrb	r3, [r4, #0]
 801f298:	f3bf 8f5b 	dmb	ish
 801f29c:	07db      	lsls	r3, r3, #31
 801f29e:	d40b      	bmi.n	801f2b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f2a0:	4620      	mov	r0, r4
 801f2a2:	f006 fd6a 	bl	8025d7a <__cxa_guard_acquire>
 801f2a6:	b138      	cbz	r0, 801f2b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f2a8:	4620      	mov	r0, r4
 801f2aa:	f006 fd72 	bl	8025d92 <__cxa_guard_release>
 801f2ae:	4a06      	ldr	r2, [pc, #24]	; (801f2c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f2b0:	4909      	ldr	r1, [pc, #36]	; (801f2d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f2b2:	480a      	ldr	r0, [pc, #40]	; (801f2dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f2b4:	f006 fd5a 	bl	8025d6c <__aeabi_atexit>
 801f2b8:	4b05      	ldr	r3, [pc, #20]	; (801f2d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f2ba:	61ab      	str	r3, [r5, #24]
 801f2bc:	4b07      	ldr	r3, [pc, #28]	; (801f2dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f2be:	61eb      	str	r3, [r5, #28]
 801f2c0:	bd38      	pop	{r3, r4, r5, pc}
 801f2c2:	bf00      	nop
 801f2c4:	200567cc 	.word	0x200567cc
 801f2c8:	20000000 	.word	0x20000000
 801f2cc:	0801da43 	.word	0x0801da43
 801f2d0:	20000050 	.word	0x20000050
 801f2d4:	200567d0 	.word	0x200567d0
 801f2d8:	0801da41 	.word	0x0801da41
 801f2dc:	20000054 	.word	0x20000054

0801f2e0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f2e0:	b510      	push	{r4, lr}
 801f2e2:	4604      	mov	r4, r0
 801f2e4:	f7ff ff88 	bl	801f1f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f2e8:	4620      	mov	r0, r4
 801f2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f2ee:	f7ff bfbd 	b.w	801f26c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f2f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801f2f4:	b538      	push	{r3, r4, r5, lr}
 801f2f6:	4c15      	ldr	r4, [pc, #84]	; (801f34c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801f2f8:	4605      	mov	r5, r0
 801f2fa:	7823      	ldrb	r3, [r4, #0]
 801f2fc:	f3bf 8f5b 	dmb	ish
 801f300:	07da      	lsls	r2, r3, #31
 801f302:	d40b      	bmi.n	801f31c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f304:	4620      	mov	r0, r4
 801f306:	f006 fd38 	bl	8025d7a <__cxa_guard_acquire>
 801f30a:	b138      	cbz	r0, 801f31c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f30c:	4620      	mov	r0, r4
 801f30e:	f006 fd40 	bl	8025d92 <__cxa_guard_release>
 801f312:	4a0f      	ldr	r2, [pc, #60]	; (801f350 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f314:	490f      	ldr	r1, [pc, #60]	; (801f354 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801f316:	4810      	ldr	r0, [pc, #64]	; (801f358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f318:	f006 fd28 	bl	8025d6c <__aeabi_atexit>
 801f31c:	4c0f      	ldr	r4, [pc, #60]	; (801f35c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801f31e:	7823      	ldrb	r3, [r4, #0]
 801f320:	f3bf 8f5b 	dmb	ish
 801f324:	07db      	lsls	r3, r3, #31
 801f326:	d40b      	bmi.n	801f340 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f328:	4620      	mov	r0, r4
 801f32a:	f006 fd26 	bl	8025d7a <__cxa_guard_acquire>
 801f32e:	b138      	cbz	r0, 801f340 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f330:	4620      	mov	r0, r4
 801f332:	f006 fd2e 	bl	8025d92 <__cxa_guard_release>
 801f336:	4a06      	ldr	r2, [pc, #24]	; (801f350 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f338:	4909      	ldr	r1, [pc, #36]	; (801f360 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801f33a:	480a      	ldr	r0, [pc, #40]	; (801f364 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f33c:	f006 fd16 	bl	8025d6c <__aeabi_atexit>
 801f340:	4b05      	ldr	r3, [pc, #20]	; (801f358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f342:	632b      	str	r3, [r5, #48]	; 0x30
 801f344:	4b07      	ldr	r3, [pc, #28]	; (801f364 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f346:	636b      	str	r3, [r5, #52]	; 0x34
 801f348:	bd38      	pop	{r3, r4, r5, pc}
 801f34a:	bf00      	nop
 801f34c:	200567d4 	.word	0x200567d4
 801f350:	20000000 	.word	0x20000000
 801f354:	0801da37 	.word	0x0801da37
 801f358:	20000058 	.word	0x20000058
 801f35c:	200567d8 	.word	0x200567d8
 801f360:	0801da35 	.word	0x0801da35
 801f364:	2000005c 	.word	0x2000005c

0801f368 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801f368:	b538      	push	{r3, r4, r5, lr}
 801f36a:	4c15      	ldr	r4, [pc, #84]	; (801f3c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801f36c:	4605      	mov	r5, r0
 801f36e:	7823      	ldrb	r3, [r4, #0]
 801f370:	f3bf 8f5b 	dmb	ish
 801f374:	07da      	lsls	r2, r3, #31
 801f376:	d40b      	bmi.n	801f390 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f378:	4620      	mov	r0, r4
 801f37a:	f006 fcfe 	bl	8025d7a <__cxa_guard_acquire>
 801f37e:	b138      	cbz	r0, 801f390 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f380:	4620      	mov	r0, r4
 801f382:	f006 fd06 	bl	8025d92 <__cxa_guard_release>
 801f386:	4a0f      	ldr	r2, [pc, #60]	; (801f3c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f388:	490f      	ldr	r1, [pc, #60]	; (801f3c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801f38a:	4810      	ldr	r0, [pc, #64]	; (801f3cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f38c:	f006 fcee 	bl	8025d6c <__aeabi_atexit>
 801f390:	4c0f      	ldr	r4, [pc, #60]	; (801f3d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801f392:	7823      	ldrb	r3, [r4, #0]
 801f394:	f3bf 8f5b 	dmb	ish
 801f398:	07db      	lsls	r3, r3, #31
 801f39a:	d40b      	bmi.n	801f3b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f39c:	4620      	mov	r0, r4
 801f39e:	f006 fcec 	bl	8025d7a <__cxa_guard_acquire>
 801f3a2:	b138      	cbz	r0, 801f3b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f3a4:	4620      	mov	r0, r4
 801f3a6:	f006 fcf4 	bl	8025d92 <__cxa_guard_release>
 801f3aa:	4a06      	ldr	r2, [pc, #24]	; (801f3c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f3ac:	4909      	ldr	r1, [pc, #36]	; (801f3d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801f3ae:	480a      	ldr	r0, [pc, #40]	; (801f3d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f3b0:	f006 fcdc 	bl	8025d6c <__aeabi_atexit>
 801f3b4:	4b05      	ldr	r3, [pc, #20]	; (801f3cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f3b6:	62ab      	str	r3, [r5, #40]	; 0x28
 801f3b8:	4b07      	ldr	r3, [pc, #28]	; (801f3d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f3ba:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f3bc:	bd38      	pop	{r3, r4, r5, pc}
 801f3be:	bf00      	nop
 801f3c0:	200567ac 	.word	0x200567ac
 801f3c4:	20000000 	.word	0x20000000
 801f3c8:	0801da3b 	.word	0x0801da3b
 801f3cc:	20000030 	.word	0x20000030
 801f3d0:	200567b0 	.word	0x200567b0
 801f3d4:	0801da39 	.word	0x0801da39
 801f3d8:	20000034 	.word	0x20000034

0801f3dc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801f3dc:	b510      	push	{r4, lr}
 801f3de:	4604      	mov	r4, r0
 801f3e0:	f7ff ff88 	bl	801f2f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801f3e4:	4620      	mov	r0, r4
 801f3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3ea:	f7ff bfbd 	b.w	801f368 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801f3f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f3f0:	b538      	push	{r3, r4, r5, lr}
 801f3f2:	4c15      	ldr	r4, [pc, #84]	; (801f448 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f3f4:	4605      	mov	r5, r0
 801f3f6:	7823      	ldrb	r3, [r4, #0]
 801f3f8:	f3bf 8f5b 	dmb	ish
 801f3fc:	07da      	lsls	r2, r3, #31
 801f3fe:	d40b      	bmi.n	801f418 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f400:	4620      	mov	r0, r4
 801f402:	f006 fcba 	bl	8025d7a <__cxa_guard_acquire>
 801f406:	b138      	cbz	r0, 801f418 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f408:	4620      	mov	r0, r4
 801f40a:	f006 fcc2 	bl	8025d92 <__cxa_guard_release>
 801f40e:	4a0f      	ldr	r2, [pc, #60]	; (801f44c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f410:	490f      	ldr	r1, [pc, #60]	; (801f450 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f412:	4810      	ldr	r0, [pc, #64]	; (801f454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f414:	f006 fcaa 	bl	8025d6c <__aeabi_atexit>
 801f418:	4c0f      	ldr	r4, [pc, #60]	; (801f458 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f41a:	7823      	ldrb	r3, [r4, #0]
 801f41c:	f3bf 8f5b 	dmb	ish
 801f420:	07db      	lsls	r3, r3, #31
 801f422:	d40b      	bmi.n	801f43c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f424:	4620      	mov	r0, r4
 801f426:	f006 fca8 	bl	8025d7a <__cxa_guard_acquire>
 801f42a:	b138      	cbz	r0, 801f43c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f42c:	4620      	mov	r0, r4
 801f42e:	f006 fcb0 	bl	8025d92 <__cxa_guard_release>
 801f432:	4a06      	ldr	r2, [pc, #24]	; (801f44c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f434:	4909      	ldr	r1, [pc, #36]	; (801f45c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f436:	480a      	ldr	r0, [pc, #40]	; (801f460 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f438:	f006 fc98 	bl	8025d6c <__aeabi_atexit>
 801f43c:	4b05      	ldr	r3, [pc, #20]	; (801f454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f43e:	642b      	str	r3, [r5, #64]	; 0x40
 801f440:	4b07      	ldr	r3, [pc, #28]	; (801f460 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f442:	646b      	str	r3, [r5, #68]	; 0x44
 801f444:	bd38      	pop	{r3, r4, r5, pc}
 801f446:	bf00      	nop
 801f448:	200567dc 	.word	0x200567dc
 801f44c:	20000000 	.word	0x20000000
 801f450:	0801da2f 	.word	0x0801da2f
 801f454:	20000060 	.word	0x20000060
 801f458:	200567e0 	.word	0x200567e0
 801f45c:	0801da2d 	.word	0x0801da2d
 801f460:	20000064 	.word	0x20000064

0801f464 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f464:	b538      	push	{r3, r4, r5, lr}
 801f466:	4c15      	ldr	r4, [pc, #84]	; (801f4bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f468:	4605      	mov	r5, r0
 801f46a:	7823      	ldrb	r3, [r4, #0]
 801f46c:	f3bf 8f5b 	dmb	ish
 801f470:	07da      	lsls	r2, r3, #31
 801f472:	d40b      	bmi.n	801f48c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f474:	4620      	mov	r0, r4
 801f476:	f006 fc80 	bl	8025d7a <__cxa_guard_acquire>
 801f47a:	b138      	cbz	r0, 801f48c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f47c:	4620      	mov	r0, r4
 801f47e:	f006 fc88 	bl	8025d92 <__cxa_guard_release>
 801f482:	4a0f      	ldr	r2, [pc, #60]	; (801f4c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f484:	490f      	ldr	r1, [pc, #60]	; (801f4c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f486:	4810      	ldr	r0, [pc, #64]	; (801f4c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f488:	f006 fc70 	bl	8025d6c <__aeabi_atexit>
 801f48c:	4c0f      	ldr	r4, [pc, #60]	; (801f4cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f48e:	7823      	ldrb	r3, [r4, #0]
 801f490:	f3bf 8f5b 	dmb	ish
 801f494:	07db      	lsls	r3, r3, #31
 801f496:	d40b      	bmi.n	801f4b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f498:	4620      	mov	r0, r4
 801f49a:	f006 fc6e 	bl	8025d7a <__cxa_guard_acquire>
 801f49e:	b138      	cbz	r0, 801f4b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f4a0:	4620      	mov	r0, r4
 801f4a2:	f006 fc76 	bl	8025d92 <__cxa_guard_release>
 801f4a6:	4a06      	ldr	r2, [pc, #24]	; (801f4c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f4a8:	4909      	ldr	r1, [pc, #36]	; (801f4d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f4aa:	480a      	ldr	r0, [pc, #40]	; (801f4d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f4ac:	f006 fc5e 	bl	8025d6c <__aeabi_atexit>
 801f4b0:	4b05      	ldr	r3, [pc, #20]	; (801f4c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f4b2:	63ab      	str	r3, [r5, #56]	; 0x38
 801f4b4:	4b07      	ldr	r3, [pc, #28]	; (801f4d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f4b6:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f4b8:	bd38      	pop	{r3, r4, r5, pc}
 801f4ba:	bf00      	nop
 801f4bc:	200567bc 	.word	0x200567bc
 801f4c0:	20000000 	.word	0x20000000
 801f4c4:	0801da33 	.word	0x0801da33
 801f4c8:	20000040 	.word	0x20000040
 801f4cc:	200567c0 	.word	0x200567c0
 801f4d0:	0801da31 	.word	0x0801da31
 801f4d4:	20000044 	.word	0x20000044

0801f4d8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f4d8:	b510      	push	{r4, lr}
 801f4da:	4604      	mov	r4, r0
 801f4dc:	f7ff ff88 	bl	801f3f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f4e0:	4620      	mov	r0, r4
 801f4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f4e6:	f7ff bfbd 	b.w	801f464 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f4ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f4ec:	b538      	push	{r3, r4, r5, lr}
 801f4ee:	4c15      	ldr	r4, [pc, #84]	; (801f544 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f4f0:	4605      	mov	r5, r0
 801f4f2:	7823      	ldrb	r3, [r4, #0]
 801f4f4:	f3bf 8f5b 	dmb	ish
 801f4f8:	07da      	lsls	r2, r3, #31
 801f4fa:	d40b      	bmi.n	801f514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f4fc:	4620      	mov	r0, r4
 801f4fe:	f006 fc3c 	bl	8025d7a <__cxa_guard_acquire>
 801f502:	b138      	cbz	r0, 801f514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f504:	4620      	mov	r0, r4
 801f506:	f006 fc44 	bl	8025d92 <__cxa_guard_release>
 801f50a:	4a0f      	ldr	r2, [pc, #60]	; (801f548 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f50c:	490f      	ldr	r1, [pc, #60]	; (801f54c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f50e:	4810      	ldr	r0, [pc, #64]	; (801f550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f510:	f006 fc2c 	bl	8025d6c <__aeabi_atexit>
 801f514:	4c0f      	ldr	r4, [pc, #60]	; (801f554 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f516:	7823      	ldrb	r3, [r4, #0]
 801f518:	f3bf 8f5b 	dmb	ish
 801f51c:	07db      	lsls	r3, r3, #31
 801f51e:	d40b      	bmi.n	801f538 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f520:	4620      	mov	r0, r4
 801f522:	f006 fc2a 	bl	8025d7a <__cxa_guard_acquire>
 801f526:	b138      	cbz	r0, 801f538 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f528:	4620      	mov	r0, r4
 801f52a:	f006 fc32 	bl	8025d92 <__cxa_guard_release>
 801f52e:	4a06      	ldr	r2, [pc, #24]	; (801f548 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f530:	4909      	ldr	r1, [pc, #36]	; (801f558 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f532:	480a      	ldr	r0, [pc, #40]	; (801f55c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f534:	f006 fc1a 	bl	8025d6c <__aeabi_atexit>
 801f538:	4b05      	ldr	r3, [pc, #20]	; (801f550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f53a:	652b      	str	r3, [r5, #80]	; 0x50
 801f53c:	4b07      	ldr	r3, [pc, #28]	; (801f55c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f53e:	656b      	str	r3, [r5, #84]	; 0x54
 801f540:	bd38      	pop	{r3, r4, r5, pc}
 801f542:	bf00      	nop
 801f544:	200567b4 	.word	0x200567b4
 801f548:	20000000 	.word	0x20000000
 801f54c:	0801da27 	.word	0x0801da27
 801f550:	20000038 	.word	0x20000038
 801f554:	200567b8 	.word	0x200567b8
 801f558:	0801da25 	.word	0x0801da25
 801f55c:	2000003c 	.word	0x2000003c

0801f560 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f560:	b538      	push	{r3, r4, r5, lr}
 801f562:	4c15      	ldr	r4, [pc, #84]	; (801f5b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f564:	4605      	mov	r5, r0
 801f566:	7823      	ldrb	r3, [r4, #0]
 801f568:	f3bf 8f5b 	dmb	ish
 801f56c:	07da      	lsls	r2, r3, #31
 801f56e:	d40b      	bmi.n	801f588 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f570:	4620      	mov	r0, r4
 801f572:	f006 fc02 	bl	8025d7a <__cxa_guard_acquire>
 801f576:	b138      	cbz	r0, 801f588 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f578:	4620      	mov	r0, r4
 801f57a:	f006 fc0a 	bl	8025d92 <__cxa_guard_release>
 801f57e:	4a0f      	ldr	r2, [pc, #60]	; (801f5bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f580:	490f      	ldr	r1, [pc, #60]	; (801f5c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f582:	4810      	ldr	r0, [pc, #64]	; (801f5c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f584:	f006 fbf2 	bl	8025d6c <__aeabi_atexit>
 801f588:	4c0f      	ldr	r4, [pc, #60]	; (801f5c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f58a:	7823      	ldrb	r3, [r4, #0]
 801f58c:	f3bf 8f5b 	dmb	ish
 801f590:	07db      	lsls	r3, r3, #31
 801f592:	d40b      	bmi.n	801f5ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f594:	4620      	mov	r0, r4
 801f596:	f006 fbf0 	bl	8025d7a <__cxa_guard_acquire>
 801f59a:	b138      	cbz	r0, 801f5ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f59c:	4620      	mov	r0, r4
 801f59e:	f006 fbf8 	bl	8025d92 <__cxa_guard_release>
 801f5a2:	4a06      	ldr	r2, [pc, #24]	; (801f5bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f5a4:	4909      	ldr	r1, [pc, #36]	; (801f5cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f5a6:	480a      	ldr	r0, [pc, #40]	; (801f5d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f5a8:	f006 fbe0 	bl	8025d6c <__aeabi_atexit>
 801f5ac:	4b05      	ldr	r3, [pc, #20]	; (801f5c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f5ae:	64ab      	str	r3, [r5, #72]	; 0x48
 801f5b0:	4b07      	ldr	r3, [pc, #28]	; (801f5d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f5b2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f5b4:	bd38      	pop	{r3, r4, r5, pc}
 801f5b6:	bf00      	nop
 801f5b8:	200567a4 	.word	0x200567a4
 801f5bc:	20000000 	.word	0x20000000
 801f5c0:	0801da2b 	.word	0x0801da2b
 801f5c4:	20000028 	.word	0x20000028
 801f5c8:	200567a8 	.word	0x200567a8
 801f5cc:	0801da29 	.word	0x0801da29
 801f5d0:	2000002c 	.word	0x2000002c

0801f5d4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f5d4:	b510      	push	{r4, lr}
 801f5d6:	4604      	mov	r4, r0
 801f5d8:	f7ff ff88 	bl	801f4ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f5dc:	4620      	mov	r0, r4
 801f5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5e2:	f7ff bfbd 	b.w	801f560 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f5e6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f5e6:	b510      	push	{r4, lr}
 801f5e8:	4604      	mov	r4, r0
 801f5ea:	f7ff fff3 	bl	801f5d4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f5ee:	4620      	mov	r0, r4
 801f5f0:	f7ff ff72 	bl	801f4d8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f5f4:	4620      	mov	r0, r4
 801f5f6:	f7ff fe73 	bl	801f2e0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f5fa:	4620      	mov	r0, r4
 801f5fc:	f7ff fdf2 	bl	801f1e4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f600:	4620      	mov	r0, r4
 801f602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f606:	f7ff bee9 	b.w	801f3dc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f60c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f610:	b087      	sub	sp, #28
 801f612:	7888      	ldrb	r0, [r1, #2]
 801f614:	4616      	mov	r6, r2
 801f616:	9001      	str	r0, [sp, #4]
 801f618:	7848      	ldrb	r0, [r1, #1]
 801f61a:	9100      	str	r1, [sp, #0]
 801f61c:	9002      	str	r0, [sp, #8]
 801f61e:	7808      	ldrb	r0, [r1, #0]
 801f620:	9901      	ldr	r1, [sp, #4]
 801f622:	9003      	str	r0, [sp, #12]
 801f624:	9802      	ldr	r0, [sp, #8]
 801f626:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801f62a:	0200      	lsls	r0, r0, #8
 801f62c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801f630:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f634:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801f638:	9903      	ldr	r1, [sp, #12]
 801f63a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f63e:	4308      	orrs	r0, r1
 801f640:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f644:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801f648:	9005      	str	r0, [sp, #20]
 801f64a:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f64e:	2d00      	cmp	r5, #0
 801f650:	eb06 080a 	add.w	r8, r6, sl
 801f654:	db4a      	blt.n	801f6ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801f656:	45a9      	cmp	r9, r5
 801f658:	dd48      	ble.n	801f6ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801f65a:	f1bc 0f00 	cmp.w	ip, #0
 801f65e:	db43      	blt.n	801f6e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801f660:	45e6      	cmp	lr, ip
 801f662:	dd41      	ble.n	801f6e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801f664:	f816 600a 	ldrb.w	r6, [r6, sl]
 801f668:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f66c:	441e      	add	r6, r3
 801f66e:	f11c 0001 	adds.w	r0, ip, #1
 801f672:	d43e      	bmi.n	801f6f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801f674:	4586      	cmp	lr, r0
 801f676:	dd3c      	ble.n	801f6f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801f678:	2a00      	cmp	r2, #0
 801f67a:	d03a      	beq.n	801f6f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801f67c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f680:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f684:	4418      	add	r0, r3
 801f686:	3501      	adds	r5, #1
 801f688:	d437      	bmi.n	801f6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801f68a:	45a9      	cmp	r9, r5
 801f68c:	dd35      	ble.n	801f6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801f68e:	b3a4      	cbz	r4, 801f6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801f690:	f1bc 0f00 	cmp.w	ip, #0
 801f694:	db2f      	blt.n	801f6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801f696:	45e6      	cmp	lr, ip
 801f698:	dd2d      	ble.n	801f6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801f69a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f69e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f6a2:	441d      	add	r5, r3
 801f6a4:	f11c 0c01 	adds.w	ip, ip, #1
 801f6a8:	d42a      	bmi.n	801f700 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801f6aa:	45e6      	cmp	lr, ip
 801f6ac:	dd28      	ble.n	801f700 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801f6ae:	b33a      	cbz	r2, 801f700 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801f6b0:	44c6      	add	lr, r8
 801f6b2:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f6b6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f6ba:	4463      	add	r3, ip
 801f6bc:	ea6f 0c07 	mvn.w	ip, r7
 801f6c0:	2a0f      	cmp	r2, #15
 801f6c2:	f896 a000 	ldrb.w	sl, [r6]
 801f6c6:	fa5f fc8c 	uxtb.w	ip, ip
 801f6ca:	f890 b000 	ldrb.w	fp, [r0]
 801f6ce:	f895 9000 	ldrb.w	r9, [r5]
 801f6d2:	7819      	ldrb	r1, [r3, #0]
 801f6d4:	d801      	bhi.n	801f6da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 801f6d6:	2c0f      	cmp	r4, #15
 801f6d8:	d914      	bls.n	801f704 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801f6da:	4b40      	ldr	r3, [pc, #256]	; (801f7dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 801f6dc:	f240 1157 	movw	r1, #343	; 0x157
 801f6e0:	4a3f      	ldr	r2, [pc, #252]	; (801f7e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f6e2:	4840      	ldr	r0, [pc, #256]	; (801f7e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f6e4:	f006 fc7c 	bl	8025fe0 <__assert_func>
 801f6e8:	ae05      	add	r6, sp, #20
 801f6ea:	e7c0      	b.n	801f66e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 801f6ec:	a805      	add	r0, sp, #20
 801f6ee:	4606      	mov	r6, r0
 801f6f0:	e7c9      	b.n	801f686 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801f6f2:	a805      	add	r0, sp, #20
 801f6f4:	e7c7      	b.n	801f686 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801f6f6:	ad05      	add	r5, sp, #20
 801f6f8:	e7d4      	b.n	801f6a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 801f6fa:	ab05      	add	r3, sp, #20
 801f6fc:	461d      	mov	r5, r3
 801f6fe:	e7dd      	b.n	801f6bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801f700:	ab05      	add	r3, sp, #20
 801f702:	e7db      	b.n	801f6bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801f704:	b292      	uxth	r2, r2
 801f706:	b2a4      	uxth	r4, r4
 801f708:	fa1f fc8c 	uxth.w	ip, ip
 801f70c:	fb02 f804 	mul.w	r8, r2, r4
 801f710:	0112      	lsls	r2, r2, #4
 801f712:	b2bf      	uxth	r7, r7
 801f714:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f718:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f71c:	eba2 0208 	sub.w	r2, r2, r8
 801f720:	b2a4      	uxth	r4, r4
 801f722:	b292      	uxth	r2, r2
 801f724:	ebae 0e04 	sub.w	lr, lr, r4
 801f728:	fb02 fb0b 	mul.w	fp, r2, fp
 801f72c:	fa1f fe8e 	uxth.w	lr, lr
 801f730:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f734:	fb04 aa09 	mla	sl, r4, r9, sl
 801f738:	fb08 aa01 	mla	sl, r8, r1, sl
 801f73c:	9903      	ldr	r1, [sp, #12]
 801f73e:	fb11 f90c 	smulbb	r9, r1, ip
 801f742:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f746:	9900      	ldr	r1, [sp, #0]
 801f748:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f74c:	fa1f fa8a 	uxth.w	sl, sl
 801f750:	f10a 0901 	add.w	r9, sl, #1
 801f754:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f758:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f75c:	f881 a000 	strb.w	sl, [r1]
 801f760:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f764:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f768:	fb02 fa0a 	mul.w	sl, r2, sl
 801f76c:	9902      	ldr	r1, [sp, #8]
 801f76e:	fb0e aa09 	mla	sl, lr, r9, sl
 801f772:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f776:	fb04 aa09 	mla	sl, r4, r9, sl
 801f77a:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f77e:	fb08 a909 	mla	r9, r8, r9, sl
 801f782:	fb11 fa0c 	smulbb	sl, r1, ip
 801f786:	9900      	ldr	r1, [sp, #0]
 801f788:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f78c:	fb09 a907 	mla	r9, r9, r7, sl
 801f790:	fa1f f989 	uxth.w	r9, r9
 801f794:	f109 0a01 	add.w	sl, r9, #1
 801f798:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f79c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f7a0:	f881 9001 	strb.w	r9, [r1, #1]
 801f7a4:	7880      	ldrb	r0, [r0, #2]
 801f7a6:	78b6      	ldrb	r6, [r6, #2]
 801f7a8:	4342      	muls	r2, r0
 801f7aa:	78a8      	ldrb	r0, [r5, #2]
 801f7ac:	789b      	ldrb	r3, [r3, #2]
 801f7ae:	fb0e 2206 	mla	r2, lr, r6, r2
 801f7b2:	fb04 2400 	mla	r4, r4, r0, r2
 801f7b6:	fb08 4803 	mla	r8, r8, r3, r4
 801f7ba:	9b01      	ldr	r3, [sp, #4]
 801f7bc:	fb13 fc0c 	smulbb	ip, r3, ip
 801f7c0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f7c4:	fb08 c707 	mla	r7, r8, r7, ip
 801f7c8:	b2bf      	uxth	r7, r7
 801f7ca:	f107 0c01 	add.w	ip, r7, #1
 801f7ce:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f7d2:	123f      	asrs	r7, r7, #8
 801f7d4:	708f      	strb	r7, [r1, #2]
 801f7d6:	b007      	add	sp, #28
 801f7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7dc:	0802e05f 	.word	0x0802e05f
 801f7e0:	0802e5c7 	.word	0x0802e5c7
 801f7e4:	0802e128 	.word	0x0802e128

0801f7e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7ec:	ed2d 8b08 	vpush	{d8-d11}
 801f7f0:	b093      	sub	sp, #76	; 0x4c
 801f7f2:	eeb0 aa40 	vmov.f32	s20, s0
 801f7f6:	eef0 9a60 	vmov.f32	s19, s1
 801f7fa:	9210      	str	r2, [sp, #64]	; 0x40
 801f7fc:	eeb0 9a41 	vmov.f32	s18, s2
 801f800:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f802:	eeb0 8a62 	vmov.f32	s16, s5
 801f806:	9309      	str	r3, [sp, #36]	; 0x24
 801f808:	eef0 8a43 	vmov.f32	s17, s6
 801f80c:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801f810:	eef0 ba44 	vmov.f32	s23, s8
 801f814:	9011      	str	r0, [sp, #68]	; 0x44
 801f816:	eeb0 ba64 	vmov.f32	s22, s9
 801f81a:	930e      	str	r3, [sp, #56]	; 0x38
 801f81c:	eef0 aa45 	vmov.f32	s21, s10
 801f820:	6850      	ldr	r0, [r2, #4]
 801f822:	910d      	str	r1, [sp, #52]	; 0x34
 801f824:	6812      	ldr	r2, [r2, #0]
 801f826:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f82a:	fb00 1303 	mla	r3, r0, r3, r1
 801f82e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f832:	18d3      	adds	r3, r2, r3
 801f834:	930a      	str	r3, [sp, #40]	; 0x28
 801f836:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	930c      	str	r3, [sp, #48]	; 0x30
 801f83c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f83e:	685c      	ldr	r4, [r3, #4]
 801f840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f842:	3404      	adds	r4, #4
 801f844:	43db      	mvns	r3, r3
 801f846:	b2db      	uxtb	r3, r3
 801f848:	930b      	str	r3, [sp, #44]	; 0x2c
 801f84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	dc03      	bgt.n	801f858 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f850:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f852:	2b00      	cmp	r3, #0
 801f854:	f340 8250 	ble.w	801fcf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801f858:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f85a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f85e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f862:	1e48      	subs	r0, r1, #1
 801f864:	1e55      	subs	r5, r2, #1
 801f866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f868:	2b00      	cmp	r3, #0
 801f86a:	f340 80ee 	ble.w	801fa4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801f86e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801f870:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f872:	1436      	asrs	r6, r6, #16
 801f874:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f878:	d406      	bmi.n	801f888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f87a:	4286      	cmp	r6, r0
 801f87c:	da04      	bge.n	801f888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f87e:	2b00      	cmp	r3, #0
 801f880:	db02      	blt.n	801f888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f882:	42ab      	cmp	r3, r5
 801f884:	f2c0 80e2 	blt.w	801fa4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801f888:	3601      	adds	r6, #1
 801f88a:	f100 80cf 	bmi.w	801fa2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f88e:	42b1      	cmp	r1, r6
 801f890:	f2c0 80cc 	blt.w	801fa2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f894:	3301      	adds	r3, #1
 801f896:	f100 80c9 	bmi.w	801fa2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f89a:	429a      	cmp	r2, r3
 801f89c:	f2c0 80c6 	blt.w	801fa2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f8a0:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801f8a4:	f1bb 0f00 	cmp.w	fp, #0
 801f8a8:	f340 80f1 	ble.w	801fa8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f8ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f8b0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801f8b2:	141d      	asrs	r5, r3, #16
 801f8b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f8b6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f8ba:	68c7      	ldr	r7, [r0, #12]
 801f8bc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f8be:	1418      	asrs	r0, r3, #16
 801f8c0:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801f8c4:	6892      	ldr	r2, [r2, #8]
 801f8c6:	f100 8137 	bmi.w	801fb38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f8ca:	f102 3cff 	add.w	ip, r2, #4294967295
 801f8ce:	4560      	cmp	r0, ip
 801f8d0:	f280 8132 	bge.w	801fb38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f8d4:	2d00      	cmp	r5, #0
 801f8d6:	f2c0 812f 	blt.w	801fb38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f8da:	f107 3cff 	add.w	ip, r7, #4294967295
 801f8de:	4565      	cmp	r5, ip
 801f8e0:	f280 812a 	bge.w	801fb38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f8e4:	b212      	sxth	r2, r2
 801f8e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f8e8:	fb05 0002 	mla	r0, r5, r2, r0
 801f8ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f8ee:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f8f2:	4405      	add	r5, r0
 801f8f4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f8f8:	eb04 0e0c 	add.w	lr, r4, ip
 801f8fc:	f1b8 0f00 	cmp.w	r8, #0
 801f900:	f000 810c 	beq.w	801fb1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801f904:	786f      	ldrb	r7, [r5, #1]
 801f906:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f90a:	4427      	add	r7, r4
 801f90c:	2900      	cmp	r1, #0
 801f90e:	f000 810d 	beq.w	801fb2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f912:	18a8      	adds	r0, r5, r2
 801f914:	5caa      	ldrb	r2, [r5, r2]
 801f916:	7840      	ldrb	r0, [r0, #1]
 801f918:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f91c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f920:	4422      	add	r2, r4
 801f922:	4420      	add	r0, r4
 801f924:	fa1f f388 	uxth.w	r3, r8
 801f928:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801f92c:	b289      	uxth	r1, r1
 801f92e:	f897 c000 	ldrb.w	ip, [r7]
 801f932:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801f936:	fb03 f901 	mul.w	r9, r3, r1
 801f93a:	011b      	lsls	r3, r3, #4
 801f93c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f940:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f944:	eba3 0309 	sub.w	r3, r3, r9
 801f948:	b289      	uxth	r1, r1
 801f94a:	b29b      	uxth	r3, r3
 801f94c:	eba8 0801 	sub.w	r8, r8, r1
 801f950:	fb03 fc0c 	mul.w	ip, r3, ip
 801f954:	fa1f f888 	uxth.w	r8, r8
 801f958:	930f      	str	r3, [sp, #60]	; 0x3c
 801f95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f95c:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f960:	f892 a000 	ldrb.w	sl, [r2]
 801f964:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f968:	f890 a000 	ldrb.w	sl, [r0]
 801f96c:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f970:	f896 a000 	ldrb.w	sl, [r6]
 801f974:	fb1a fa03 	smulbb	sl, sl, r3
 801f978:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f97c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f97e:	fb0c ac05 	mla	ip, ip, r5, sl
 801f982:	fa1f fc8c 	uxth.w	ip, ip
 801f986:	f10c 0a01 	add.w	sl, ip, #1
 801f98a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f98e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f992:	f886 a000 	strb.w	sl, [r6]
 801f996:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f99a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801f99e:	fb03 fc0c 	mul.w	ip, r3, ip
 801f9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9a4:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f9a8:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f9ac:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f9b0:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f9b4:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f9b8:	f896 a001 	ldrb.w	sl, [r6, #1]
 801f9bc:	fb1a fa03 	smulbb	sl, sl, r3
 801f9c0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f9c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9c6:	fb0c ac05 	mla	ip, ip, r5, sl
 801f9ca:	fa1f fc8c 	uxth.w	ip, ip
 801f9ce:	f10c 0a01 	add.w	sl, ip, #1
 801f9d2:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801f9d6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f9da:	f886 c001 	strb.w	ip, [r6, #1]
 801f9de:	78bf      	ldrb	r7, [r7, #2]
 801f9e0:	f89e c002 	ldrb.w	ip, [lr, #2]
 801f9e4:	437b      	muls	r3, r7
 801f9e6:	fb08 330c 	mla	r3, r8, ip, r3
 801f9ea:	f892 c002 	ldrb.w	ip, [r2, #2]
 801f9ee:	7882      	ldrb	r2, [r0, #2]
 801f9f0:	fb01 310c 	mla	r1, r1, ip, r3
 801f9f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9f6:	fb09 1902 	mla	r9, r9, r2, r1
 801f9fa:	78b1      	ldrb	r1, [r6, #2]
 801f9fc:	fb11 f103 	smulbb	r1, r1, r3
 801fa00:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801fa04:	fb09 1505 	mla	r5, r9, r5, r1
 801fa08:	b2ad      	uxth	r5, r5
 801fa0a:	1c6b      	adds	r3, r5, #1
 801fa0c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fa10:	122d      	asrs	r5, r5, #8
 801fa12:	70b5      	strb	r5, [r6, #2]
 801fa14:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fa16:	3603      	adds	r6, #3
 801fa18:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801fa1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fa1e:	4413      	add	r3, r2
 801fa20:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fa22:	9325      	str	r3, [sp, #148]	; 0x94
 801fa24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa26:	4413      	add	r3, r2
 801fa28:	9326      	str	r3, [sp, #152]	; 0x98
 801fa2a:	e73b      	b.n	801f8a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801fa2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fa2e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801fa30:	4433      	add	r3, r6
 801fa32:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801fa34:	9325      	str	r3, [sp, #148]	; 0x94
 801fa36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa38:	4433      	add	r3, r6
 801fa3a:	9326      	str	r3, [sp, #152]	; 0x98
 801fa3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa3e:	3b01      	subs	r3, #1
 801fa40:	9309      	str	r3, [sp, #36]	; 0x24
 801fa42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa44:	3303      	adds	r3, #3
 801fa46:	930a      	str	r3, [sp, #40]	; 0x28
 801fa48:	e70d      	b.n	801f866 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fa4a:	d028      	beq.n	801fa9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fa4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa4e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fa50:	3b01      	subs	r3, #1
 801fa52:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801fa54:	fb00 5003 	mla	r0, r0, r3, r5
 801fa58:	1400      	asrs	r0, r0, #16
 801fa5a:	f53f af21 	bmi.w	801f8a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fa5e:	3901      	subs	r1, #1
 801fa60:	4288      	cmp	r0, r1
 801fa62:	f6bf af1d 	bge.w	801f8a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fa66:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fa68:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fa6a:	fb01 0303 	mla	r3, r1, r3, r0
 801fa6e:	141b      	asrs	r3, r3, #16
 801fa70:	f53f af16 	bmi.w	801f8a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fa74:	3a01      	subs	r2, #1
 801fa76:	4293      	cmp	r3, r2
 801fa78:	f6bf af12 	bge.w	801f8a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fa7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa7e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801fa82:	1cdf      	adds	r7, r3, #3
 801fa84:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801fa88:	f1b9 0f00 	cmp.w	r9, #0
 801fa8c:	dc73      	bgt.n	801fb76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801fa8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa9a:	441a      	add	r2, r3
 801fa9c:	920a      	str	r2, [sp, #40]	; 0x28
 801fa9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	f340 8129 	ble.w	801fcf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801faa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801faaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801faac:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fab0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fab4:	eef0 6a48 	vmov.f32	s13, s16
 801fab8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fabc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fac0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fac4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801fac8:	eef0 6a68 	vmov.f32	s13, s17
 801facc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fad0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801fad4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fad8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fadc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fae0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fae4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fae8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801faec:	ee18 2a10 	vmov	r2, s16
 801faf0:	eeb0 8a47 	vmov.f32	s16, s14
 801faf4:	fb92 f3f3 	sdiv	r3, r2, r3
 801faf8:	ee18 2a90 	vmov	r2, s17
 801fafc:	9327      	str	r3, [sp, #156]	; 0x9c
 801fafe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb00:	eef0 8a67 	vmov.f32	s17, s15
 801fb04:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb08:	9328      	str	r3, [sp, #160]	; 0xa0
 801fb0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fb0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb0e:	3b01      	subs	r3, #1
 801fb10:	930d      	str	r3, [sp, #52]	; 0x34
 801fb12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb14:	bf08      	it	eq
 801fb16:	4613      	moveq	r3, r2
 801fb18:	9309      	str	r3, [sp, #36]	; 0x24
 801fb1a:	e696      	b.n	801f84a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fb1c:	b149      	cbz	r1, 801fb32 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801fb1e:	5caa      	ldrb	r2, [r5, r2]
 801fb20:	4670      	mov	r0, lr
 801fb22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb26:	4422      	add	r2, r4
 801fb28:	4677      	mov	r7, lr
 801fb2a:	e6fb      	b.n	801f924 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801fb2c:	4670      	mov	r0, lr
 801fb2e:	4672      	mov	r2, lr
 801fb30:	e6f8      	b.n	801f924 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801fb32:	4670      	mov	r0, lr
 801fb34:	4672      	mov	r2, lr
 801fb36:	e7f7      	b.n	801fb28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801fb38:	f110 0c01 	adds.w	ip, r0, #1
 801fb3c:	f53f af6a 	bmi.w	801fa14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fb40:	4562      	cmp	r2, ip
 801fb42:	f6ff af67 	blt.w	801fa14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fb46:	f115 0c01 	adds.w	ip, r5, #1
 801fb4a:	f53f af63 	bmi.w	801fa14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fb4e:	4567      	cmp	r7, ip
 801fb50:	f6ff af60 	blt.w	801fa14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fb54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb56:	b23f      	sxth	r7, r7
 801fb58:	b212      	sxth	r2, r2
 801fb5a:	9002      	str	r0, [sp, #8]
 801fb5c:	9701      	str	r7, [sp, #4]
 801fb5e:	9200      	str	r2, [sp, #0]
 801fb60:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fb62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fb64:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801fb68:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801fb6c:	4623      	mov	r3, r4
 801fb6e:	4631      	mov	r1, r6
 801fb70:	f7ff fd4c 	bl	801f60c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801fb74:	e74e      	b.n	801fa14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fb76:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fb78:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fb7a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fb7e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801fb80:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fb82:	1400      	asrs	r0, r0, #16
 801fb84:	142d      	asrs	r5, r5, #16
 801fb86:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fb88:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fb8c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fb90:	fb02 5000 	mla	r0, r2, r0, r5
 801fb94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fb96:	f815 e000 	ldrb.w	lr, [r5, r0]
 801fb9a:	eb05 0c00 	add.w	ip, r5, r0
 801fb9e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fba2:	eb04 060e 	add.w	r6, r4, lr
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	f000 8097 	beq.w	801fcda <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801fbac:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fbb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fbb4:	4425      	add	r5, r4
 801fbb6:	2900      	cmp	r1, #0
 801fbb8:	f000 8098 	beq.w	801fcec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801fbbc:	eb0c 0002 	add.w	r0, ip, r2
 801fbc0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fbc4:	7840      	ldrb	r0, [r0, #1]
 801fbc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fbca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fbce:	4422      	add	r2, r4
 801fbd0:	4420      	add	r0, r4
 801fbd2:	b29b      	uxth	r3, r3
 801fbd4:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fbd8:	b289      	uxth	r1, r1
 801fbda:	f895 e000 	ldrb.w	lr, [r5]
 801fbde:	3703      	adds	r7, #3
 801fbe0:	f109 39ff 	add.w	r9, r9, #4294967295
 801fbe4:	fb03 f801 	mul.w	r8, r3, r1
 801fbe8:	011b      	lsls	r3, r3, #4
 801fbea:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801fbee:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801fbf2:	eba3 0308 	sub.w	r3, r3, r8
 801fbf6:	b289      	uxth	r1, r1
 801fbf8:	b29b      	uxth	r3, r3
 801fbfa:	ebac 0c01 	sub.w	ip, ip, r1
 801fbfe:	fb03 fe0e 	mul.w	lr, r3, lr
 801fc02:	fa1f fc8c 	uxth.w	ip, ip
 801fc06:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc0a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fc0e:	f892 b000 	ldrb.w	fp, [r2]
 801fc12:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fc16:	f890 b000 	ldrb.w	fp, [r0]
 801fc1a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801fc1e:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801fc22:	fb1b fb03 	smulbb	fp, fp, r3
 801fc26:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fc2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc2c:	fb0e be0a 	mla	lr, lr, sl, fp
 801fc30:	fa1f fe8e 	uxth.w	lr, lr
 801fc34:	f10e 0b01 	add.w	fp, lr, #1
 801fc38:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801fc3c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fc40:	f807 ec06 	strb.w	lr, [r7, #-6]
 801fc44:	f895 e001 	ldrb.w	lr, [r5, #1]
 801fc48:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fc4c:	fb03 fe0e 	mul.w	lr, r3, lr
 801fc50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc52:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fc56:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fc5a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fc5e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fc62:	fb08 ee0b 	mla	lr, r8, fp, lr
 801fc66:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801fc6a:	fb1b fb03 	smulbb	fp, fp, r3
 801fc6e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fc72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc74:	fb0e be0a 	mla	lr, lr, sl, fp
 801fc78:	fa1f fe8e 	uxth.w	lr, lr
 801fc7c:	f10e 0b01 	add.w	fp, lr, #1
 801fc80:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801fc84:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fc88:	f807 ec05 	strb.w	lr, [r7, #-5]
 801fc8c:	78ad      	ldrb	r5, [r5, #2]
 801fc8e:	78b6      	ldrb	r6, [r6, #2]
 801fc90:	436b      	muls	r3, r5
 801fc92:	7895      	ldrb	r5, [r2, #2]
 801fc94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fc96:	fb0c 3306 	mla	r3, ip, r6, r3
 801fc9a:	fb01 3305 	mla	r3, r1, r5, r3
 801fc9e:	7885      	ldrb	r5, [r0, #2]
 801fca0:	fb08 3805 	mla	r8, r8, r5, r3
 801fca4:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801fca8:	fb13 f302 	smulbb	r3, r3, r2
 801fcac:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801fcb0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801fcb2:	fb08 380a 	mla	r8, r8, sl, r3
 801fcb6:	fa1f f888 	uxth.w	r8, r8
 801fcba:	f108 0301 	add.w	r3, r8, #1
 801fcbe:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801fcc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fcc4:	4413      	add	r3, r2
 801fcc6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fcc8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fccc:	9325      	str	r3, [sp, #148]	; 0x94
 801fcce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fcd0:	f807 8c04 	strb.w	r8, [r7, #-4]
 801fcd4:	4413      	add	r3, r2
 801fcd6:	9326      	str	r3, [sp, #152]	; 0x98
 801fcd8:	e6d6      	b.n	801fa88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801fcda:	b151      	cbz	r1, 801fcf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 801fcdc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fce0:	4630      	mov	r0, r6
 801fce2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fce6:	4422      	add	r2, r4
 801fce8:	4635      	mov	r5, r6
 801fcea:	e772      	b.n	801fbd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801fcec:	4630      	mov	r0, r6
 801fcee:	4632      	mov	r2, r6
 801fcf0:	e76f      	b.n	801fbd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801fcf2:	4630      	mov	r0, r6
 801fcf4:	4632      	mov	r2, r6
 801fcf6:	e7f7      	b.n	801fce8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801fcf8:	b013      	add	sp, #76	; 0x4c
 801fcfa:	ecbd 8b08 	vpop	{d8-d11}
 801fcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fd04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801fd04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd08:	784d      	ldrb	r5, [r1, #1]
 801fd0a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801fd0e:	022d      	lsls	r5, r5, #8
 801fd10:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801fd14:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801fd18:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801fd1c:	f891 9000 	ldrb.w	r9, [r1]
 801fd20:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801fd24:	ea45 0509 	orr.w	r5, r5, r9
 801fd28:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801fd2c:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801fd30:	9501      	str	r5, [sp, #4]
 801fd32:	fb06 470c 	mla	r7, r6, ip, r4
 801fd36:	2e00      	cmp	r6, #0
 801fd38:	eb02 0e07 	add.w	lr, r2, r7
 801fd3c:	db46      	blt.n	801fdcc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801fd3e:	45b0      	cmp	r8, r6
 801fd40:	dd44      	ble.n	801fdcc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801fd42:	2c00      	cmp	r4, #0
 801fd44:	db40      	blt.n	801fdc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801fd46:	45a4      	cmp	ip, r4
 801fd48:	dd3e      	ble.n	801fdc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801fd4a:	5dd7      	ldrb	r7, [r2, r7]
 801fd4c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fd50:	441f      	add	r7, r3
 801fd52:	1c62      	adds	r2, r4, #1
 801fd54:	d43d      	bmi.n	801fdd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801fd56:	4594      	cmp	ip, r2
 801fd58:	dd3b      	ble.n	801fdd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801fd5a:	f1ba 0f00 	cmp.w	sl, #0
 801fd5e:	d038      	beq.n	801fdd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801fd60:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801fd64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fd68:	441d      	add	r5, r3
 801fd6a:	3601      	adds	r6, #1
 801fd6c:	d435      	bmi.n	801fdda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801fd6e:	45b0      	cmp	r8, r6
 801fd70:	dd33      	ble.n	801fdda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801fd72:	b390      	cbz	r0, 801fdda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801fd74:	2c00      	cmp	r4, #0
 801fd76:	db2e      	blt.n	801fdd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801fd78:	45a4      	cmp	ip, r4
 801fd7a:	dd2c      	ble.n	801fdd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801fd7c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801fd80:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fd84:	441e      	add	r6, r3
 801fd86:	1c62      	adds	r2, r4, #1
 801fd88:	d42a      	bmi.n	801fde0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801fd8a:	4594      	cmp	ip, r2
 801fd8c:	dd28      	ble.n	801fde0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801fd8e:	f1ba 0f00 	cmp.w	sl, #0
 801fd92:	d025      	beq.n	801fde0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801fd94:	44f4      	add	ip, lr
 801fd96:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fd9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd9e:	4413      	add	r3, r2
 801fda0:	f1ba 0f0f 	cmp.w	sl, #15
 801fda4:	f897 8000 	ldrb.w	r8, [r7]
 801fda8:	f895 9000 	ldrb.w	r9, [r5]
 801fdac:	f896 e000 	ldrb.w	lr, [r6]
 801fdb0:	f893 c000 	ldrb.w	ip, [r3]
 801fdb4:	d801      	bhi.n	801fdba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 801fdb6:	280f      	cmp	r0, #15
 801fdb8:	d914      	bls.n	801fde4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 801fdba:	4b29      	ldr	r3, [pc, #164]	; (801fe60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 801fdbc:	f240 1157 	movw	r1, #343	; 0x157
 801fdc0:	4a28      	ldr	r2, [pc, #160]	; (801fe64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801fdc2:	4829      	ldr	r0, [pc, #164]	; (801fe68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801fdc4:	f006 f90c 	bl	8025fe0 <__assert_func>
 801fdc8:	af01      	add	r7, sp, #4
 801fdca:	e7c2      	b.n	801fd52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 801fdcc:	ad01      	add	r5, sp, #4
 801fdce:	462f      	mov	r7, r5
 801fdd0:	e7cb      	b.n	801fd6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801fdd2:	ad01      	add	r5, sp, #4
 801fdd4:	e7c9      	b.n	801fd6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801fdd6:	ae01      	add	r6, sp, #4
 801fdd8:	e7d5      	b.n	801fd86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 801fdda:	ab01      	add	r3, sp, #4
 801fddc:	461e      	mov	r6, r3
 801fdde:	e7df      	b.n	801fda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801fde0:	ab01      	add	r3, sp, #4
 801fde2:	e7dd      	b.n	801fda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801fde4:	fa1f f48a 	uxth.w	r4, sl
 801fde8:	b280      	uxth	r0, r0
 801fdea:	fb04 fa00 	mul.w	sl, r4, r0
 801fdee:	0124      	lsls	r4, r4, #4
 801fdf0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fdf4:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801fdf8:	b282      	uxth	r2, r0
 801fdfa:	eba4 000a 	sub.w	r0, r4, sl
 801fdfe:	ebab 0b02 	sub.w	fp, fp, r2
 801fe02:	b280      	uxth	r0, r0
 801fe04:	fa1f fb8b 	uxth.w	fp, fp
 801fe08:	fb00 f909 	mul.w	r9, r0, r9
 801fe0c:	fb0b 9808 	mla	r8, fp, r8, r9
 801fe10:	fb02 8e0e 	mla	lr, r2, lr, r8
 801fe14:	fb0a ec0c 	mla	ip, sl, ip, lr
 801fe18:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fe1c:	f881 c000 	strb.w	ip, [r1]
 801fe20:	786c      	ldrb	r4, [r5, #1]
 801fe22:	f897 c001 	ldrb.w	ip, [r7, #1]
 801fe26:	4344      	muls	r4, r0
 801fe28:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801fe2c:	7874      	ldrb	r4, [r6, #1]
 801fe2e:	fb02 cc04 	mla	ip, r2, r4, ip
 801fe32:	785c      	ldrb	r4, [r3, #1]
 801fe34:	fb0a c404 	mla	r4, sl, r4, ip
 801fe38:	1224      	asrs	r4, r4, #8
 801fe3a:	704c      	strb	r4, [r1, #1]
 801fe3c:	78ad      	ldrb	r5, [r5, #2]
 801fe3e:	78bc      	ldrb	r4, [r7, #2]
 801fe40:	4368      	muls	r0, r5
 801fe42:	fb0b 0b04 	mla	fp, fp, r4, r0
 801fe46:	78b0      	ldrb	r0, [r6, #2]
 801fe48:	fb02 b000 	mla	r0, r2, r0, fp
 801fe4c:	789a      	ldrb	r2, [r3, #2]
 801fe4e:	fb0a 0a02 	mla	sl, sl, r2, r0
 801fe52:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fe56:	f881 a002 	strb.w	sl, [r1, #2]
 801fe5a:	b003      	add	sp, #12
 801fe5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe60:	0802e05f 	.word	0x0802e05f
 801fe64:	0802e5c7 	.word	0x0802e5c7
 801fe68:	0802e128 	.word	0x0802e128

0801fe6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe70:	ed2d 8b0a 	vpush	{d8-d12}
 801fe74:	b08d      	sub	sp, #52	; 0x34
 801fe76:	eeb0 aa40 	vmov.f32	s20, s0
 801fe7a:	eef0 9a60 	vmov.f32	s19, s1
 801fe7e:	900b      	str	r0, [sp, #44]	; 0x2c
 801fe80:	eeb0 9a41 	vmov.f32	s18, s2
 801fe84:	9306      	str	r3, [sp, #24]
 801fe86:	eeb0 8a62 	vmov.f32	s16, s5
 801fe8a:	eef0 8a43 	vmov.f32	s17, s6
 801fe8e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801fe90:	eeb0 ca44 	vmov.f32	s24, s8
 801fe94:	eef0 ba64 	vmov.f32	s23, s9
 801fe98:	eeb0 ba45 	vmov.f32	s22, s10
 801fe9c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801fea0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801fea4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fea6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801feaa:	6850      	ldr	r0, [r2, #4]
 801feac:	6812      	ldr	r2, [r2, #0]
 801feae:	fb00 1303 	mla	r3, r0, r3, r1
 801feb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801feb6:	18d3      	adds	r3, r2, r3
 801feb8:	9307      	str	r3, [sp, #28]
 801feba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	9308      	str	r3, [sp, #32]
 801fec0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fec2:	685d      	ldr	r5, [r3, #4]
 801fec4:	3504      	adds	r5, #4
 801fec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fec8:	2b00      	cmp	r3, #0
 801feca:	dc03      	bgt.n	801fed4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fece:	2b00      	cmp	r3, #0
 801fed0:	f340 81e6 	ble.w	80202a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801fed4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fed6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801feda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fede:	1e48      	subs	r0, r1, #1
 801fee0:	1e56      	subs	r6, r2, #1
 801fee2:	9b06      	ldr	r3, [sp, #24]
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	f340 80bd 	ble.w	8020064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801feea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801feec:	1427      	asrs	r7, r4, #16
 801feee:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fef2:	d406      	bmi.n	801ff02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fef4:	4287      	cmp	r7, r0
 801fef6:	da04      	bge.n	801ff02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	db02      	blt.n	801ff02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fefc:	42b3      	cmp	r3, r6
 801fefe:	f2c0 80b2 	blt.w	8020066 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ff02:	3701      	adds	r7, #1
 801ff04:	f100 80a1 	bmi.w	802004a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801ff08:	42b9      	cmp	r1, r7
 801ff0a:	f2c0 809e 	blt.w	802004a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801ff0e:	3301      	adds	r3, #1
 801ff10:	f100 809b 	bmi.w	802004a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801ff14:	429a      	cmp	r2, r3
 801ff16:	f2c0 8098 	blt.w	802004a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801ff1a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801ff1e:	f1bb 0f00 	cmp.w	fp, #0
 801ff22:	f340 80bf 	ble.w	80200a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ff26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ff28:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801ff2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ff2c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ff30:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801ff34:	1420      	asrs	r0, r4, #16
 801ff36:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ff38:	ea4f 4723 	mov.w	r7, r3, asr #16
 801ff3c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ff40:	6892      	ldr	r2, [r2, #8]
 801ff42:	f100 8103 	bmi.w	802014c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ff46:	f102 3eff 	add.w	lr, r2, #4294967295
 801ff4a:	4570      	cmp	r0, lr
 801ff4c:	f280 80fe 	bge.w	802014c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ff50:	2f00      	cmp	r7, #0
 801ff52:	f2c0 80fb 	blt.w	802014c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ff56:	f10c 3eff 	add.w	lr, ip, #4294967295
 801ff5a:	4577      	cmp	r7, lr
 801ff5c:	f280 80f6 	bge.w	802014c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ff60:	b212      	sxth	r2, r2
 801ff62:	fb07 0002 	mla	r0, r7, r2, r0
 801ff66:	9f08      	ldr	r7, [sp, #32]
 801ff68:	f817 8000 	ldrb.w	r8, [r7, r0]
 801ff6c:	eb07 0e00 	add.w	lr, r7, r0
 801ff70:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ff74:	eb05 0c08 	add.w	ip, r5, r8
 801ff78:	2b00      	cmp	r3, #0
 801ff7a:	f000 80d8 	beq.w	802012e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801ff7e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801ff82:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ff86:	442f      	add	r7, r5
 801ff88:	2900      	cmp	r1, #0
 801ff8a:	f000 80d9 	beq.w	8020140 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801ff8e:	eb0e 0002 	add.w	r0, lr, r2
 801ff92:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801ff96:	7840      	ldrb	r0, [r0, #1]
 801ff98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ff9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ffa0:	442a      	add	r2, r5
 801ffa2:	4428      	add	r0, r5
 801ffa4:	b29b      	uxth	r3, r3
 801ffa6:	f815 a008 	ldrb.w	sl, [r5, r8]
 801ffaa:	b289      	uxth	r1, r1
 801ffac:	f897 8000 	ldrb.w	r8, [r7]
 801ffb0:	fb03 f901 	mul.w	r9, r3, r1
 801ffb4:	011b      	lsls	r3, r3, #4
 801ffb6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ffba:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ffbe:	eba3 0309 	sub.w	r3, r3, r9
 801ffc2:	b289      	uxth	r1, r1
 801ffc4:	b29b      	uxth	r3, r3
 801ffc6:	ebae 0e01 	sub.w	lr, lr, r1
 801ffca:	fb03 f808 	mul.w	r8, r3, r8
 801ffce:	fa1f fe8e 	uxth.w	lr, lr
 801ffd2:	fb0e 880a 	mla	r8, lr, sl, r8
 801ffd6:	f892 a000 	ldrb.w	sl, [r2]
 801ffda:	fb01 880a 	mla	r8, r1, sl, r8
 801ffde:	f890 a000 	ldrb.w	sl, [r0]
 801ffe2:	fb09 880a 	mla	r8, r9, sl, r8
 801ffe6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ffea:	f886 8000 	strb.w	r8, [r6]
 801ffee:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fff2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fff6:	fb03 f808 	mul.w	r8, r3, r8
 801fffa:	fb0e 880a 	mla	r8, lr, sl, r8
 801fffe:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020002:	fb01 880a 	mla	r8, r1, sl, r8
 8020006:	f890 a001 	ldrb.w	sl, [r0, #1]
 802000a:	fb09 880a 	mla	r8, r9, sl, r8
 802000e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020012:	f886 8001 	strb.w	r8, [r6, #1]
 8020016:	78bf      	ldrb	r7, [r7, #2]
 8020018:	f89c c002 	ldrb.w	ip, [ip, #2]
 802001c:	437b      	muls	r3, r7
 802001e:	7892      	ldrb	r2, [r2, #2]
 8020020:	fb0e 330c 	mla	r3, lr, ip, r3
 8020024:	fb01 3102 	mla	r1, r1, r2, r3
 8020028:	7882      	ldrb	r2, [r0, #2]
 802002a:	fb09 1902 	mla	r9, r9, r2, r1
 802002e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020032:	f886 9002 	strb.w	r9, [r6, #2]
 8020036:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020038:	3603      	adds	r6, #3
 802003a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802003c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020040:	441c      	add	r4, r3
 8020042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020044:	4413      	add	r3, r2
 8020046:	9322      	str	r3, [sp, #136]	; 0x88
 8020048:	e769      	b.n	801ff1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802004a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802004c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 802004e:	441c      	add	r4, r3
 8020050:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020052:	443b      	add	r3, r7
 8020054:	9322      	str	r3, [sp, #136]	; 0x88
 8020056:	9b06      	ldr	r3, [sp, #24]
 8020058:	3b01      	subs	r3, #1
 802005a:	9306      	str	r3, [sp, #24]
 802005c:	9b07      	ldr	r3, [sp, #28]
 802005e:	3303      	adds	r3, #3
 8020060:	9307      	str	r3, [sp, #28]
 8020062:	e73e      	b.n	801fee2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020064:	d026      	beq.n	80200b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020066:	9b06      	ldr	r3, [sp, #24]
 8020068:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802006a:	3b01      	subs	r3, #1
 802006c:	fb00 4003 	mla	r0, r0, r3, r4
 8020070:	1400      	asrs	r0, r0, #16
 8020072:	f53f af52 	bmi.w	801ff1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020076:	3901      	subs	r1, #1
 8020078:	4288      	cmp	r0, r1
 802007a:	f6bf af4e 	bge.w	801ff1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802007e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020080:	9822      	ldr	r0, [sp, #136]	; 0x88
 8020082:	fb01 0303 	mla	r3, r1, r3, r0
 8020086:	141b      	asrs	r3, r3, #16
 8020088:	f53f af47 	bmi.w	801ff1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802008c:	3a01      	subs	r2, #1
 802008e:	4293      	cmp	r3, r2
 8020090:	f6bf af43 	bge.w	801ff1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020094:	9b07      	ldr	r3, [sp, #28]
 8020096:	f8dd a018 	ldr.w	sl, [sp, #24]
 802009a:	f103 0803 	add.w	r8, r3, #3
 802009e:	f1ba 0f00 	cmp.w	sl, #0
 80200a2:	dc71      	bgt.n	8020188 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80200a4:	9b06      	ldr	r3, [sp, #24]
 80200a6:	9a07      	ldr	r2, [sp, #28]
 80200a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200b0:	441a      	add	r2, r3
 80200b2:	9207      	str	r2, [sp, #28]
 80200b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	f340 80f2 	ble.w	80202a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80200bc:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80200c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80200c2:	ee79 9aab 	vadd.f32	s19, s19, s23
 80200c6:	eef0 6a48 	vmov.f32	s13, s16
 80200ca:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80200ce:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80200d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200d6:	ee16 4a90 	vmov	r4, s13
 80200da:	eef0 6a68 	vmov.f32	s13, s17
 80200de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200e2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80200e6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80200ea:	ee69 7a27 	vmul.f32	s15, s18, s15
 80200ee:	ee37 8a48 	vsub.f32	s16, s14, s16
 80200f2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80200f6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80200fa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80200fe:	ee18 2a10 	vmov	r2, s16
 8020102:	eeb0 8a47 	vmov.f32	s16, s14
 8020106:	fb92 f3f3 	sdiv	r3, r2, r3
 802010a:	ee18 2a90 	vmov	r2, s17
 802010e:	9323      	str	r3, [sp, #140]	; 0x8c
 8020110:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020112:	eef0 8a67 	vmov.f32	s17, s15
 8020116:	fb92 f3f3 	sdiv	r3, r2, r3
 802011a:	9324      	str	r3, [sp, #144]	; 0x90
 802011c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802011e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020120:	3b01      	subs	r3, #1
 8020122:	9309      	str	r3, [sp, #36]	; 0x24
 8020124:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020126:	bf08      	it	eq
 8020128:	4613      	moveq	r3, r2
 802012a:	9306      	str	r3, [sp, #24]
 802012c:	e6cb      	b.n	801fec6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802012e:	b151      	cbz	r1, 8020146 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020130:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020134:	4660      	mov	r0, ip
 8020136:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802013a:	442a      	add	r2, r5
 802013c:	4667      	mov	r7, ip
 802013e:	e731      	b.n	801ffa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020140:	4660      	mov	r0, ip
 8020142:	4662      	mov	r2, ip
 8020144:	e72e      	b.n	801ffa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020146:	4660      	mov	r0, ip
 8020148:	4662      	mov	r2, ip
 802014a:	e7f7      	b.n	802013c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802014c:	f110 0e01 	adds.w	lr, r0, #1
 8020150:	f53f af71 	bmi.w	8020036 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020154:	4572      	cmp	r2, lr
 8020156:	f6ff af6e 	blt.w	8020036 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802015a:	f117 0e01 	adds.w	lr, r7, #1
 802015e:	f53f af6a 	bmi.w	8020036 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020162:	45f4      	cmp	ip, lr
 8020164:	f6ff af67 	blt.w	8020036 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020168:	b212      	sxth	r2, r2
 802016a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802016e:	fa0f f38c 	sxth.w	r3, ip
 8020172:	9200      	str	r2, [sp, #0]
 8020174:	4631      	mov	r1, r6
 8020176:	9a08      	ldr	r2, [sp, #32]
 8020178:	9301      	str	r3, [sp, #4]
 802017a:	462b      	mov	r3, r5
 802017c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020180:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020182:	f7ff fdbf 	bl	801fd04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020186:	e756      	b.n	8020036 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020188:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802018a:	1426      	asrs	r6, r4, #16
 802018c:	9822      	ldr	r0, [sp, #136]	; 0x88
 802018e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020192:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020196:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020198:	1400      	asrs	r0, r0, #16
 802019a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802019e:	fb02 6000 	mla	r0, r2, r0, r6
 80201a2:	9e08      	ldr	r6, [sp, #32]
 80201a4:	f816 e000 	ldrb.w	lr, [r6, r0]
 80201a8:	eb06 0c00 	add.w	ip, r6, r0
 80201ac:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80201b0:	eb05 070e 	add.w	r7, r5, lr
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d064      	beq.n	8020282 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 80201b8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80201bc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80201c0:	442e      	add	r6, r5
 80201c2:	2900      	cmp	r1, #0
 80201c4:	d066      	beq.n	8020294 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80201c6:	eb0c 0002 	add.w	r0, ip, r2
 80201ca:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80201ce:	7840      	ldrb	r0, [r0, #1]
 80201d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80201d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80201d8:	442a      	add	r2, r5
 80201da:	4428      	add	r0, r5
 80201dc:	b29b      	uxth	r3, r3
 80201de:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80201e2:	b289      	uxth	r1, r1
 80201e4:	f896 e000 	ldrb.w	lr, [r6]
 80201e8:	f108 0803 	add.w	r8, r8, #3
 80201ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80201f0:	fb03 f901 	mul.w	r9, r3, r1
 80201f4:	011b      	lsls	r3, r3, #4
 80201f6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80201fa:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80201fe:	eba3 0309 	sub.w	r3, r3, r9
 8020202:	b289      	uxth	r1, r1
 8020204:	b29b      	uxth	r3, r3
 8020206:	ebac 0c01 	sub.w	ip, ip, r1
 802020a:	fb03 fe0e 	mul.w	lr, r3, lr
 802020e:	fa1f fc8c 	uxth.w	ip, ip
 8020212:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020216:	f892 b000 	ldrb.w	fp, [r2]
 802021a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802021e:	f890 b000 	ldrb.w	fp, [r0]
 8020222:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020226:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802022a:	f808 ec06 	strb.w	lr, [r8, #-6]
 802022e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020232:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020236:	fb03 fe0e 	mul.w	lr, r3, lr
 802023a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802023e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020242:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020246:	f890 b001 	ldrb.w	fp, [r0, #1]
 802024a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802024e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020252:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020256:	78b6      	ldrb	r6, [r6, #2]
 8020258:	78bf      	ldrb	r7, [r7, #2]
 802025a:	4373      	muls	r3, r6
 802025c:	7896      	ldrb	r6, [r2, #2]
 802025e:	7882      	ldrb	r2, [r0, #2]
 8020260:	fb0c 3307 	mla	r3, ip, r7, r3
 8020264:	fb01 3306 	mla	r3, r1, r6, r3
 8020268:	fb09 3902 	mla	r9, r9, r2, r3
 802026c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802026e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020270:	441c      	add	r4, r3
 8020272:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020274:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020278:	4413      	add	r3, r2
 802027a:	f808 9c04 	strb.w	r9, [r8, #-4]
 802027e:	9322      	str	r3, [sp, #136]	; 0x88
 8020280:	e70d      	b.n	802009e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020282:	b151      	cbz	r1, 802029a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8020284:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020288:	4638      	mov	r0, r7
 802028a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802028e:	442a      	add	r2, r5
 8020290:	463e      	mov	r6, r7
 8020292:	e7a3      	b.n	80201dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020294:	4638      	mov	r0, r7
 8020296:	463a      	mov	r2, r7
 8020298:	e7a0      	b.n	80201dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802029a:	4638      	mov	r0, r7
 802029c:	463a      	mov	r2, r7
 802029e:	e7f7      	b.n	8020290 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80202a0:	b00d      	add	sp, #52	; 0x34
 80202a2:	ecbd 8b0a 	vpop	{d8-d12}
 80202a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080202ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80202ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202b0:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 80202b4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80202b8:	2d00      	cmp	r5, #0
 80202ba:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80202be:	fb05 040e 	mla	r4, r5, lr, r0
 80202c2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80202c6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80202ca:	eb02 0804 	add.w	r8, r2, r4
 80202ce:	db40      	blt.n	8020352 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80202d0:	45a9      	cmp	r9, r5
 80202d2:	dd3e      	ble.n	8020352 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80202d4:	2800      	cmp	r0, #0
 80202d6:	db3a      	blt.n	802034e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80202d8:	4586      	cmp	lr, r0
 80202da:	dd38      	ble.n	802034e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80202dc:	5d12      	ldrb	r2, [r2, r4]
 80202de:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80202e2:	1c42      	adds	r2, r0, #1
 80202e4:	d438      	bmi.n	8020358 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80202e6:	4596      	cmp	lr, r2
 80202e8:	dd36      	ble.n	8020358 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80202ea:	b3bf      	cbz	r7, 802035c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 80202ec:	f898 2001 	ldrb.w	r2, [r8, #1]
 80202f0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80202f4:	3501      	adds	r5, #1
 80202f6:	d435      	bmi.n	8020364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80202f8:	45a9      	cmp	r9, r5
 80202fa:	dd33      	ble.n	8020364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80202fc:	f1bc 0f00 	cmp.w	ip, #0
 8020300:	d033      	beq.n	802036a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8020302:	2800      	cmp	r0, #0
 8020304:	db2c      	blt.n	8020360 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8020306:	4586      	cmp	lr, r0
 8020308:	dd2a      	ble.n	8020360 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 802030a:	f818 200e 	ldrb.w	r2, [r8, lr]
 802030e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020312:	3001      	adds	r0, #1
 8020314:	d42c      	bmi.n	8020370 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8020316:	4586      	cmp	lr, r0
 8020318:	dd2a      	ble.n	8020370 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 802031a:	b35f      	cbz	r7, 8020374 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 802031c:	44c6      	add	lr, r8
 802031e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020322:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020326:	2f0f      	cmp	r7, #15
 8020328:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802032c:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8020330:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020334:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020338:	d802      	bhi.n	8020340 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 802033a:	f1bc 0f0f 	cmp.w	ip, #15
 802033e:	d91b      	bls.n	8020378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8020340:	4b77      	ldr	r3, [pc, #476]	; (8020520 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8020342:	f240 1157 	movw	r1, #343	; 0x157
 8020346:	4a77      	ldr	r2, [pc, #476]	; (8020524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8020348:	4877      	ldr	r0, [pc, #476]	; (8020528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 802034a:	f005 fe49 	bl	8025fe0 <__assert_func>
 802034e:	2600      	movs	r6, #0
 8020350:	e7c7      	b.n	80202e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8020352:	2400      	movs	r4, #0
 8020354:	4626      	mov	r6, r4
 8020356:	e7cd      	b.n	80202f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020358:	2400      	movs	r4, #0
 802035a:	e7cb      	b.n	80202f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 802035c:	463c      	mov	r4, r7
 802035e:	e7c9      	b.n	80202f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020360:	2500      	movs	r5, #0
 8020362:	e7d6      	b.n	8020312 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8020364:	2200      	movs	r2, #0
 8020366:	4615      	mov	r5, r2
 8020368:	e7dd      	b.n	8020326 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 802036a:	4662      	mov	r2, ip
 802036c:	4665      	mov	r5, ip
 802036e:	e7da      	b.n	8020326 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020370:	2200      	movs	r2, #0
 8020372:	e7d8      	b.n	8020326 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020374:	463a      	mov	r2, r7
 8020376:	e7d6      	b.n	8020326 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020378:	b2bf      	uxth	r7, r7
 802037a:	fa1f f08c 	uxth.w	r0, ip
 802037e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8020382:	fb00 fe07 	mul.w	lr, r0, r7
 8020386:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802038a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802038e:	ebac 070e 	sub.w	r7, ip, lr
 8020392:	b280      	uxth	r0, r0
 8020394:	b2bf      	uxth	r7, r7
 8020396:	1a1b      	subs	r3, r3, r0
 8020398:	fb07 fc0a 	mul.w	ip, r7, sl
 802039c:	b29b      	uxth	r3, r3
 802039e:	fb03 cc0b 	mla	ip, r3, fp, ip
 80203a2:	9300      	str	r3, [sp, #0]
 80203a4:	fb00 cc09 	mla	ip, r0, r9, ip
 80203a8:	fb0e cc08 	mla	ip, lr, r8, ip
 80203ac:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80203b0:	9301      	str	r3, [sp, #4]
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	f000 80b0 	beq.w	8020518 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 80203b8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80203bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80203c0:	fb0b fc0c 	mul.w	ip, fp, ip
 80203c4:	fb0b f606 	mul.w	r6, fp, r6
 80203c8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80203cc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80203d0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80203d4:	44dc      	add	ip, fp
 80203d6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80203da:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80203de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203e2:	fb0a fb0b 	mul.w	fp, sl, fp
 80203e6:	fb0a fa04 	mul.w	sl, sl, r4
 80203ea:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80203ee:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80203f2:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 80203f6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80203fa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80203fe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020402:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8020406:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802040a:	0a36      	lsrs	r6, r6, #8
 802040c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020410:	44dc      	add	ip, fp
 8020412:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020416:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802041a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802041e:	fb09 fb0b 	mul.w	fp, r9, fp
 8020422:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020426:	fb09 f905 	mul.w	r9, r9, r5
 802042a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802042e:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8020432:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020436:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802043a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802043e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020442:	fb0c fc07 	mul.w	ip, ip, r7
 8020446:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802044a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802044e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020452:	445c      	add	r4, fp
 8020454:	fb08 f505 	mul.w	r5, r8, r5
 8020458:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802045c:	fb08 f802 	mul.w	r8, r8, r2
 8020460:	0a24      	lsrs	r4, r4, #8
 8020462:	0a2a      	lsrs	r2, r5, #8
 8020464:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020468:	fb07 f70a 	mul.w	r7, r7, sl
 802046c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020470:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020474:	4415      	add	r5, r2
 8020476:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802047a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802047e:	9a00      	ldr	r2, [sp, #0]
 8020480:	0a2d      	lsrs	r5, r5, #8
 8020482:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020486:	fb03 cc02 	mla	ip, r3, r2, ip
 802048a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802048e:	fb02 7306 	mla	r3, r2, r6, r7
 8020492:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020496:	9a01      	ldr	r2, [sp, #4]
 8020498:	fb05 c50e 	mla	r5, r5, lr, ip
 802049c:	fb0e 3e08 	mla	lr, lr, r8, r3
 80204a0:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 80204a4:	fb04 5400 	mla	r4, r4, r0, r5
 80204a8:	fb00 e303 	mla	r3, r0, r3, lr
 80204ac:	0a24      	lsrs	r4, r4, #8
 80204ae:	0a1b      	lsrs	r3, r3, #8
 80204b0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80204b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204b8:	431c      	orrs	r4, r3
 80204ba:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80204be:	b29b      	uxth	r3, r3
 80204c0:	b2e0      	uxtb	r0, r4
 80204c2:	435a      	muls	r2, r3
 80204c4:	fb10 f003 	smulbb	r0, r0, r3
 80204c8:	1c55      	adds	r5, r2, #1
 80204ca:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 80204ce:	780a      	ldrb	r2, [r1, #0]
 80204d0:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 80204d4:	b2ed      	uxtb	r5, r5
 80204d6:	fb02 0205 	mla	r2, r2, r5, r0
 80204da:	b292      	uxth	r2, r2
 80204dc:	1c50      	adds	r0, r2, #1
 80204de:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80204e2:	7848      	ldrb	r0, [r1, #1]
 80204e4:	fb10 f005 	smulbb	r0, r0, r5
 80204e8:	1212      	asrs	r2, r2, #8
 80204ea:	700a      	strb	r2, [r1, #0]
 80204ec:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80204f0:	0c24      	lsrs	r4, r4, #16
 80204f2:	fb02 0203 	mla	r2, r2, r3, r0
 80204f6:	b292      	uxth	r2, r2
 80204f8:	1c50      	adds	r0, r2, #1
 80204fa:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80204fe:	1212      	asrs	r2, r2, #8
 8020500:	704a      	strb	r2, [r1, #1]
 8020502:	788a      	ldrb	r2, [r1, #2]
 8020504:	fb12 f505 	smulbb	r5, r2, r5
 8020508:	fb04 5303 	mla	r3, r4, r3, r5
 802050c:	b29b      	uxth	r3, r3
 802050e:	1c5a      	adds	r2, r3, #1
 8020510:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020514:	121b      	asrs	r3, r3, #8
 8020516:	708b      	strb	r3, [r1, #2]
 8020518:	b003      	add	sp, #12
 802051a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802051e:	bf00      	nop
 8020520:	0802e05f 	.word	0x0802e05f
 8020524:	0802e5c7 	.word	0x0802e5c7
 8020528:	0802e128 	.word	0x0802e128

0802052c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802052c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020530:	ed2d 8b08 	vpush	{d8-d11}
 8020534:	b09f      	sub	sp, #124	; 0x7c
 8020536:	eeb0 aa40 	vmov.f32	s20, s0
 802053a:	eef0 9a60 	vmov.f32	s19, s1
 802053e:	921b      	str	r2, [sp, #108]	; 0x6c
 8020540:	eeb0 9a41 	vmov.f32	s18, s2
 8020544:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020546:	eeb0 8a62 	vmov.f32	s16, s5
 802054a:	9309      	str	r3, [sp, #36]	; 0x24
 802054c:	eef0 8a43 	vmov.f32	s17, s6
 8020550:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8020554:	eef0 ba44 	vmov.f32	s23, s8
 8020558:	901d      	str	r0, [sp, #116]	; 0x74
 802055a:	eeb0 ba64 	vmov.f32	s22, s9
 802055e:	931c      	str	r3, [sp, #112]	; 0x70
 8020560:	eef0 aa45 	vmov.f32	s21, s10
 8020564:	6850      	ldr	r0, [r2, #4]
 8020566:	9119      	str	r1, [sp, #100]	; 0x64
 8020568:	6812      	ldr	r2, [r2, #0]
 802056a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 802056c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020570:	fb00 1303 	mla	r3, r0, r3, r1
 8020574:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020578:	18d3      	adds	r3, r2, r3
 802057a:	930c      	str	r3, [sp, #48]	; 0x30
 802057c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802057e:	681b      	ldr	r3, [r3, #0]
 8020580:	9312      	str	r3, [sp, #72]	; 0x48
 8020582:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020584:	685e      	ldr	r6, [r3, #4]
 8020586:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802058a:	3604      	adds	r6, #4
 802058c:	930d      	str	r3, [sp, #52]	; 0x34
 802058e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020590:	2b00      	cmp	r3, #0
 8020592:	dc03      	bgt.n	802059c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020596:	2b00      	cmp	r3, #0
 8020598:	f340 8378 	ble.w	8020c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 802059c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802059e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80205a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80205a6:	1e48      	subs	r0, r1, #1
 80205a8:	1e57      	subs	r7, r2, #1
 80205aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	f340 818c 	ble.w	80208ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80205b2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80205b4:	142b      	asrs	r3, r5, #16
 80205b6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80205ba:	d406      	bmi.n	80205ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80205bc:	4584      	cmp	ip, r0
 80205be:	da04      	bge.n	80205ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	db02      	blt.n	80205ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80205c4:	42bb      	cmp	r3, r7
 80205c6:	f2c0 8181 	blt.w	80208cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 80205ca:	f11c 0c01 	adds.w	ip, ip, #1
 80205ce:	f100 816f 	bmi.w	80208b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80205d2:	4561      	cmp	r1, ip
 80205d4:	f2c0 816c 	blt.w	80208b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80205d8:	3301      	adds	r3, #1
 80205da:	f100 8169 	bmi.w	80208b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80205de:	429a      	cmp	r2, r3
 80205e0:	f2c0 8166 	blt.w	80208b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80205e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80205e8:	931a      	str	r3, [sp, #104]	; 0x68
 80205ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	f340 818c 	ble.w	802090a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80205f2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80205f4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80205f8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80205fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020600:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020602:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8020606:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020608:	141b      	asrs	r3, r3, #16
 802060a:	f100 81d0 	bmi.w	80209ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802060e:	f100 38ff 	add.w	r8, r0, #4294967295
 8020612:	4543      	cmp	r3, r8
 8020614:	f280 81cb 	bge.w	80209ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8020618:	f1bc 0f00 	cmp.w	ip, #0
 802061c:	f2c0 81c7 	blt.w	80209ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8020620:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020624:	45c4      	cmp	ip, r8
 8020626:	f280 81c2 	bge.w	80209ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802062a:	b200      	sxth	r0, r0
 802062c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802062e:	fb0c 3300 	mla	r3, ip, r0, r3
 8020632:	eb04 0803 	add.w	r8, r4, r3
 8020636:	5ce3      	ldrb	r3, [r4, r3]
 8020638:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802063c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020640:	2a00      	cmp	r2, #0
 8020642:	f000 81a9 	beq.w	8020998 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8020646:	f898 c001 	ldrb.w	ip, [r8, #1]
 802064a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802064e:	940e      	str	r4, [sp, #56]	; 0x38
 8020650:	0e24      	lsrs	r4, r4, #24
 8020652:	9415      	str	r4, [sp, #84]	; 0x54
 8020654:	b179      	cbz	r1, 8020676 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020656:	eb08 0c00 	add.w	ip, r8, r0
 802065a:	f818 0000 	ldrb.w	r0, [r8, r0]
 802065e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020662:	900a      	str	r0, [sp, #40]	; 0x28
 8020664:	0e00      	lsrs	r0, r0, #24
 8020666:	9013      	str	r0, [sp, #76]	; 0x4c
 8020668:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802066c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020670:	900f      	str	r0, [sp, #60]	; 0x3c
 8020672:	0e00      	lsrs	r0, r0, #24
 8020674:	9016      	str	r0, [sp, #88]	; 0x58
 8020676:	b292      	uxth	r2, r2
 8020678:	9815      	ldr	r0, [sp, #84]	; 0x54
 802067a:	b289      	uxth	r1, r1
 802067c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802067e:	fb02 f901 	mul.w	r9, r2, r1
 8020682:	0112      	lsls	r2, r2, #4
 8020684:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020688:	eba2 0809 	sub.w	r8, r2, r9
 802068c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020690:	b289      	uxth	r1, r1
 8020692:	fa1f f888 	uxth.w	r8, r8
 8020696:	1a52      	subs	r2, r2, r1
 8020698:	fb08 f000 	mul.w	r0, r8, r0
 802069c:	b292      	uxth	r2, r2
 802069e:	fb02 000e 	mla	r0, r2, lr, r0
 80206a2:	fb01 0004 	mla	r0, r1, r4, r0
 80206a6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80206a8:	fb09 0004 	mla	r0, r9, r4, r0
 80206ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80206b0:	2800      	cmp	r0, #0
 80206b2:	f000 80f2 	beq.w	802089a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80206b6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80206ba:	d01b      	beq.n	80206f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80206bc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80206c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206c4:	fb0e fa0a 	mul.w	sl, lr, sl
 80206c8:	fb0e fe03 	mul.w	lr, lr, r3
 80206cc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80206d0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80206d4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80206d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80206dc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80206e0:	4453      	add	r3, sl
 80206e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206e6:	0a1b      	lsrs	r3, r3, #8
 80206e8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80206ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80206f0:	ea43 030c 	orr.w	r3, r3, ip
 80206f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80206f6:	2cff      	cmp	r4, #255	; 0xff
 80206f8:	d021      	beq.n	802073e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80206fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80206fc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020700:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020702:	fb04 fb0b 	mul.w	fp, r4, fp
 8020706:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020708:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802070c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802070e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020712:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020716:	fb04 fa0a 	mul.w	sl, r4, sl
 802071a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802071e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020722:	44de      	add	lr, fp
 8020724:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020728:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802072c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020730:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020734:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020738:	ea4e 040a 	orr.w	r4, lr, sl
 802073c:	940e      	str	r4, [sp, #56]	; 0x38
 802073e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020740:	2cff      	cmp	r4, #255	; 0xff
 8020742:	d021      	beq.n	8020788 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8020744:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020746:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802074a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802074c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020750:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020752:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020756:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020758:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802075c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020760:	fb04 fa0a 	mul.w	sl, r4, sl
 8020764:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020768:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802076c:	44de      	add	lr, fp
 802076e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020772:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020776:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802077a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802077e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020782:	ea4e 040a 	orr.w	r4, lr, sl
 8020786:	940a      	str	r4, [sp, #40]	; 0x28
 8020788:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802078a:	2cff      	cmp	r4, #255	; 0xff
 802078c:	d021      	beq.n	80207d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802078e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020790:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020794:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020796:	fb04 fb0b 	mul.w	fp, r4, fp
 802079a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802079c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80207a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80207a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80207a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80207aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80207ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80207b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80207b6:	44de      	add	lr, fp
 80207b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80207bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80207c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80207c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80207c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80207cc:	ea4e 040a 	orr.w	r4, lr, sl
 80207d0:	940f      	str	r4, [sp, #60]	; 0x3c
 80207d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80207d4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80207d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80207dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80207e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80207e2:	fb08 fc0c 	mul.w	ip, r8, ip
 80207e6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80207ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80207ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80207f0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80207f4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80207f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80207fa:	fb09 cc0e 	mla	ip, r9, lr, ip
 80207fe:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020802:	fb08 f80e 	mul.w	r8, r8, lr
 8020806:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802080a:	fb02 8303 	mla	r3, r2, r3, r8
 802080e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020810:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020814:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802081a:	fb01 330a 	mla	r3, r1, sl, r3
 802081e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8020822:	fb09 3901 	mla	r9, r9, r1, r3
 8020826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020828:	990d      	ldr	r1, [sp, #52]	; 0x34
 802082a:	4343      	muls	r3, r0
 802082c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020830:	1c58      	adds	r0, r3, #1
 8020832:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020836:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802083a:	ea4c 0c09 	orr.w	ip, ip, r9
 802083e:	783b      	ldrb	r3, [r7, #0]
 8020840:	fa5f f28c 	uxtb.w	r2, ip
 8020844:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020848:	fb12 f201 	smulbb	r2, r2, r1
 802084c:	b2c0      	uxtb	r0, r0
 802084e:	fb03 2300 	mla	r3, r3, r0, r2
 8020852:	b29b      	uxth	r3, r3
 8020854:	1c5a      	adds	r2, r3, #1
 8020856:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802085a:	787a      	ldrb	r2, [r7, #1]
 802085c:	fb12 f200 	smulbb	r2, r2, r0
 8020860:	121b      	asrs	r3, r3, #8
 8020862:	703b      	strb	r3, [r7, #0]
 8020864:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020868:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802086c:	fb03 2301 	mla	r3, r3, r1, r2
 8020870:	b29b      	uxth	r3, r3
 8020872:	1c5a      	adds	r2, r3, #1
 8020874:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020878:	121b      	asrs	r3, r3, #8
 802087a:	707b      	strb	r3, [r7, #1]
 802087c:	78bb      	ldrb	r3, [r7, #2]
 802087e:	fb13 f000 	smulbb	r0, r3, r0
 8020882:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020886:	fa1f fc8c 	uxth.w	ip, ip
 802088a:	f10c 0301 	add.w	r3, ip, #1
 802088e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020892:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020896:	f887 c002 	strb.w	ip, [r7, #2]
 802089a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802089c:	3703      	adds	r7, #3
 802089e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80208a0:	441a      	add	r2, r3
 80208a2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80208a4:	441d      	add	r5, r3
 80208a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80208a8:	9231      	str	r2, [sp, #196]	; 0xc4
 80208aa:	3b01      	subs	r3, #1
 80208ac:	931a      	str	r3, [sp, #104]	; 0x68
 80208ae:	e69c      	b.n	80205ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80208b0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80208b2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80208b4:	441c      	add	r4, r3
 80208b6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80208b8:	441d      	add	r5, r3
 80208ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208bc:	9431      	str	r4, [sp, #196]	; 0xc4
 80208be:	3b01      	subs	r3, #1
 80208c0:	9309      	str	r3, [sp, #36]	; 0x24
 80208c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208c4:	3303      	adds	r3, #3
 80208c6:	930c      	str	r3, [sp, #48]	; 0x30
 80208c8:	e66f      	b.n	80205aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80208ca:	d026      	beq.n	802091a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80208cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208ce:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80208d0:	3b01      	subs	r3, #1
 80208d2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80208d4:	fb00 4003 	mla	r0, r0, r3, r4
 80208d8:	1400      	asrs	r0, r0, #16
 80208da:	f53f ae83 	bmi.w	80205e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80208de:	3901      	subs	r1, #1
 80208e0:	4288      	cmp	r0, r1
 80208e2:	f6bf ae7f 	bge.w	80205e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80208e6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80208e8:	fb01 5303 	mla	r3, r1, r3, r5
 80208ec:	141b      	asrs	r3, r3, #16
 80208ee:	f53f ae79 	bmi.w	80205e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80208f2:	3a01      	subs	r2, #1
 80208f4:	4293      	cmp	r3, r2
 80208f6:	f6bf ae75 	bge.w	80205e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80208fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208fc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020900:	f103 0e03 	add.w	lr, r3, #3
 8020904:	f1bb 0f00 	cmp.w	fp, #0
 8020908:	dc71      	bgt.n	80209ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802090a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802090c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020912:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020916:	4423      	add	r3, r4
 8020918:	930c      	str	r3, [sp, #48]	; 0x30
 802091a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802091c:	2b00      	cmp	r3, #0
 802091e:	f340 81b5 	ble.w	8020c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8020922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020926:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020928:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802092c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020930:	eef0 6a48 	vmov.f32	s13, s16
 8020934:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020938:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802093c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020940:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8020944:	eef0 6a68 	vmov.f32	s13, s17
 8020948:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802094c:	ee16 5a90 	vmov	r5, s13
 8020950:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020954:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020958:	ee37 8a48 	vsub.f32	s16, s14, s16
 802095c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020960:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020964:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020968:	ee18 2a10 	vmov	r2, s16
 802096c:	eeb0 8a47 	vmov.f32	s16, s14
 8020970:	fb92 f3f3 	sdiv	r3, r2, r3
 8020974:	ee18 2a90 	vmov	r2, s17
 8020978:	9333      	str	r3, [sp, #204]	; 0xcc
 802097a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802097c:	eef0 8a67 	vmov.f32	s17, s15
 8020980:	fb92 f3f3 	sdiv	r3, r2, r3
 8020984:	9334      	str	r3, [sp, #208]	; 0xd0
 8020986:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020988:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802098a:	3b01      	subs	r3, #1
 802098c:	9319      	str	r3, [sp, #100]	; 0x64
 802098e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020990:	bf08      	it	eq
 8020992:	4613      	moveq	r3, r2
 8020994:	9309      	str	r3, [sp, #36]	; 0x24
 8020996:	e5fa      	b.n	802058e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020998:	2900      	cmp	r1, #0
 802099a:	f43f ae6c 	beq.w	8020676 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802099e:	f818 0000 	ldrb.w	r0, [r8, r0]
 80209a2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80209a6:	900a      	str	r0, [sp, #40]	; 0x28
 80209a8:	0e00      	lsrs	r0, r0, #24
 80209aa:	9013      	str	r0, [sp, #76]	; 0x4c
 80209ac:	e663      	b.n	8020676 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80209ae:	f113 0801 	adds.w	r8, r3, #1
 80209b2:	f53f af72 	bmi.w	802089a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80209b6:	4540      	cmp	r0, r8
 80209b8:	f6ff af6f 	blt.w	802089a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80209bc:	f11c 0801 	adds.w	r8, ip, #1
 80209c0:	f53f af6b 	bmi.w	802089a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80209c4:	45c6      	cmp	lr, r8
 80209c6:	f6ff af68 	blt.w	802089a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80209ca:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80209cc:	b200      	sxth	r0, r0
 80209ce:	9302      	str	r3, [sp, #8]
 80209d0:	fa0f f38e 	sxth.w	r3, lr
 80209d4:	9000      	str	r0, [sp, #0]
 80209d6:	9301      	str	r3, [sp, #4]
 80209d8:	4633      	mov	r3, r6
 80209da:	981d      	ldr	r0, [sp, #116]	; 0x74
 80209dc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80209e0:	e9cd c203 	strd	ip, r2, [sp, #12]
 80209e4:	4639      	mov	r1, r7
 80209e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80209e8:	f7ff fc60 	bl	80202ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80209ec:	e755      	b.n	802089a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80209ee:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80209f0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80209f4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80209f6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80209fa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80209fc:	1427      	asrs	r7, r4, #16
 80209fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020a00:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020a04:	142b      	asrs	r3, r5, #16
 8020a06:	fb01 7303 	mla	r3, r1, r3, r7
 8020a0a:	18e7      	adds	r7, r4, r3
 8020a0c:	5ce3      	ldrb	r3, [r4, r3]
 8020a0e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020a12:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020a16:	2a00      	cmp	r2, #0
 8020a18:	f000 812e 	beq.w	8020c78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8020a1c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020a20:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020a24:	9410      	str	r4, [sp, #64]	; 0x40
 8020a26:	0e24      	lsrs	r4, r4, #24
 8020a28:	9417      	str	r4, [sp, #92]	; 0x5c
 8020a2a:	b170      	cbz	r0, 8020a4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020a2c:	eb07 0801 	add.w	r8, r7, r1
 8020a30:	5c79      	ldrb	r1, [r7, r1]
 8020a32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020a36:	910b      	str	r1, [sp, #44]	; 0x2c
 8020a38:	0e09      	lsrs	r1, r1, #24
 8020a3a:	9114      	str	r1, [sp, #80]	; 0x50
 8020a3c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020a40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020a44:	9111      	str	r1, [sp, #68]	; 0x44
 8020a46:	0e09      	lsrs	r1, r1, #24
 8020a48:	9118      	str	r1, [sp, #96]	; 0x60
 8020a4a:	b292      	uxth	r2, r2
 8020a4c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020a4e:	b280      	uxth	r0, r0
 8020a50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020a52:	fb02 f900 	mul.w	r9, r2, r0
 8020a56:	0112      	lsls	r2, r2, #4
 8020a58:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020a5c:	eba2 0809 	sub.w	r8, r2, r9
 8020a60:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020a64:	b280      	uxth	r0, r0
 8020a66:	fa1f f888 	uxth.w	r8, r8
 8020a6a:	1a12      	subs	r2, r2, r0
 8020a6c:	fb08 f101 	mul.w	r1, r8, r1
 8020a70:	b292      	uxth	r2, r2
 8020a72:	fb02 110c 	mla	r1, r2, ip, r1
 8020a76:	fb00 1104 	mla	r1, r0, r4, r1
 8020a7a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020a7c:	fb09 1104 	mla	r1, r9, r4, r1
 8020a80:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020a84:	2900      	cmp	r1, #0
 8020a86:	f000 80ec 	beq.w	8020c62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8020a8a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020a8e:	d019      	beq.n	8020ac4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8020a90:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020a94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a98:	fb0c fa0a 	mul.w	sl, ip, sl
 8020a9c:	fb0c fc03 	mul.w	ip, ip, r3
 8020aa0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020aa4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020aa8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020aac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ab0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020ab4:	4453      	add	r3, sl
 8020ab6:	0a3f      	lsrs	r7, r7, #8
 8020ab8:	0a1b      	lsrs	r3, r3, #8
 8020aba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020abe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ac2:	433b      	orrs	r3, r7
 8020ac4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020ac6:	2cff      	cmp	r4, #255	; 0xff
 8020ac8:	d020      	beq.n	8020b0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 8020aca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020acc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020ad0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020ad2:	4367      	muls	r7, r4
 8020ad4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020ad6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ada:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020ade:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020ae0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020ae4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ae8:	fb04 fa0a 	mul.w	sl, r4, sl
 8020aec:	44bc      	add	ip, r7
 8020aee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020af2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020af6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020afa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020afe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b06:	ea4c 040a 	orr.w	r4, ip, sl
 8020b0a:	9410      	str	r4, [sp, #64]	; 0x40
 8020b0c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020b0e:	2cff      	cmp	r4, #255	; 0xff
 8020b10:	d020      	beq.n	8020b54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 8020b12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b14:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020b18:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020b1a:	4367      	muls	r7, r4
 8020b1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b1e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020b22:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020b26:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020b28:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020b2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b30:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b34:	44bc      	add	ip, r7
 8020b36:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020b3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b3e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020b42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b4e:	ea4c 040a 	orr.w	r4, ip, sl
 8020b52:	940b      	str	r4, [sp, #44]	; 0x2c
 8020b54:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020b56:	2cff      	cmp	r4, #255	; 0xff
 8020b58:	d020      	beq.n	8020b9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8020b5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020b5c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020b60:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020b62:	4367      	muls	r7, r4
 8020b64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020b66:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020b6a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020b6e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020b70:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020b74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b78:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b7c:	44bc      	add	ip, r7
 8020b7e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020b82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b86:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020b8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b92:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b96:	ea4c 040a 	orr.w	r4, ip, sl
 8020b9a:	9411      	str	r4, [sp, #68]	; 0x44
 8020b9c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020b9e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020ba2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ba6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020baa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020bac:	fb08 f707 	mul.w	r7, r8, r7
 8020bb0:	fb02 770c 	mla	r7, r2, ip, r7
 8020bb4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020bb8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020bba:	fb00 770c 	mla	r7, r0, ip, r7
 8020bbe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020bc2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020bc4:	fb09 770c 	mla	r7, r9, ip, r7
 8020bc8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020bcc:	fb08 f80c 	mul.w	r8, r8, ip
 8020bd0:	0a3f      	lsrs	r7, r7, #8
 8020bd2:	fb02 8303 	mla	r3, r2, r3, r8
 8020bd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020bd8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020bdc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020be0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020be2:	fb00 330a 	mla	r3, r0, sl, r3
 8020be6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020bea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020bec:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020bf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020bf6:	434b      	muls	r3, r1
 8020bf8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020bfc:	1c59      	adds	r1, r3, #1
 8020bfe:	ea47 070c 	orr.w	r7, r7, ip
 8020c02:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020c06:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020c0a:	b2fa      	uxtb	r2, r7
 8020c0c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020c10:	fb12 f200 	smulbb	r2, r2, r0
 8020c14:	b2c9      	uxtb	r1, r1
 8020c16:	fb03 2301 	mla	r3, r3, r1, r2
 8020c1a:	b29b      	uxth	r3, r3
 8020c1c:	1c5a      	adds	r2, r3, #1
 8020c1e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020c22:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020c26:	fb12 f201 	smulbb	r2, r2, r1
 8020c2a:	121b      	asrs	r3, r3, #8
 8020c2c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020c30:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020c34:	0c3f      	lsrs	r7, r7, #16
 8020c36:	fb03 2300 	mla	r3, r3, r0, r2
 8020c3a:	b29b      	uxth	r3, r3
 8020c3c:	1c5a      	adds	r2, r3, #1
 8020c3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020c42:	121b      	asrs	r3, r3, #8
 8020c44:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020c48:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020c4c:	fb13 f101 	smulbb	r1, r3, r1
 8020c50:	fb07 1700 	mla	r7, r7, r0, r1
 8020c54:	b2bf      	uxth	r7, r7
 8020c56:	1c7b      	adds	r3, r7, #1
 8020c58:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020c5c:	123f      	asrs	r7, r7, #8
 8020c5e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020c62:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020c64:	f10e 0e03 	add.w	lr, lr, #3
 8020c68:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020c6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020c6e:	441a      	add	r2, r3
 8020c70:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020c72:	9231      	str	r2, [sp, #196]	; 0xc4
 8020c74:	441d      	add	r5, r3
 8020c76:	e645      	b.n	8020904 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8020c78:	2800      	cmp	r0, #0
 8020c7a:	f43f aee6 	beq.w	8020a4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020c7e:	5c79      	ldrb	r1, [r7, r1]
 8020c80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020c84:	910b      	str	r1, [sp, #44]	; 0x2c
 8020c86:	0e09      	lsrs	r1, r1, #24
 8020c88:	9114      	str	r1, [sp, #80]	; 0x50
 8020c8a:	e6de      	b.n	8020a4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020c8c:	b01f      	add	sp, #124	; 0x7c
 8020c8e:	ecbd 8b08 	vpop	{d8-d11}
 8020c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020c98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c9c:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 8020ca0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020ca4:	2c00      	cmp	r4, #0
 8020ca6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020caa:	fb04 060c 	mla	r6, r4, ip, r0
 8020cae:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8020cb2:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8020cb6:	eb02 0e06 	add.w	lr, r2, r6
 8020cba:	db3d      	blt.n	8020d38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8020cbc:	45a0      	cmp	r8, r4
 8020cbe:	dd3b      	ble.n	8020d38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8020cc0:	2800      	cmp	r0, #0
 8020cc2:	db37      	blt.n	8020d34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020cc4:	4584      	cmp	ip, r0
 8020cc6:	dd35      	ble.n	8020d34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020cc8:	5d92      	ldrb	r2, [r2, r6]
 8020cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020cce:	1c46      	adds	r6, r0, #1
 8020cd0:	d435      	bmi.n	8020d3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8020cd2:	45b4      	cmp	ip, r6
 8020cd4:	dd33      	ble.n	8020d3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8020cd6:	b3a5      	cbz	r5, 8020d42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8020cd8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8020cdc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8020ce0:	3401      	adds	r4, #1
 8020ce2:	d432      	bmi.n	8020d4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020ce4:	45a0      	cmp	r8, r4
 8020ce6:	dd30      	ble.n	8020d4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020ce8:	b397      	cbz	r7, 8020d50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8020cea:	2800      	cmp	r0, #0
 8020cec:	db2b      	blt.n	8020d46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8020cee:	4584      	cmp	ip, r0
 8020cf0:	dd29      	ble.n	8020d46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8020cf2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020cf6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8020cfa:	3001      	adds	r0, #1
 8020cfc:	d42b      	bmi.n	8020d56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8020cfe:	4584      	cmp	ip, r0
 8020d00:	dd29      	ble.n	8020d56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8020d02:	b355      	cbz	r5, 8020d5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8020d04:	44f4      	add	ip, lr
 8020d06:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020d0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8020d0e:	2d0f      	cmp	r5, #15
 8020d10:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020d14:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020d18:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020d1c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020d20:	d801      	bhi.n	8020d26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8020d22:	2f0f      	cmp	r7, #15
 8020d24:	d91b      	bls.n	8020d5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8020d26:	4b7f      	ldr	r3, [pc, #508]	; (8020f24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8020d28:	f240 1157 	movw	r1, #343	; 0x157
 8020d2c:	4a7e      	ldr	r2, [pc, #504]	; (8020f28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8020d2e:	487f      	ldr	r0, [pc, #508]	; (8020f2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8020d30:	f005 f956 	bl	8025fe0 <__assert_func>
 8020d34:	2200      	movs	r2, #0
 8020d36:	e7ca      	b.n	8020cce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8020d38:	2600      	movs	r6, #0
 8020d3a:	4632      	mov	r2, r6
 8020d3c:	e7d0      	b.n	8020ce0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020d3e:	2600      	movs	r6, #0
 8020d40:	e7ce      	b.n	8020ce0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020d42:	462e      	mov	r6, r5
 8020d44:	e7cc      	b.n	8020ce0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020d46:	2400      	movs	r4, #0
 8020d48:	e7d7      	b.n	8020cfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8020d4a:	2300      	movs	r3, #0
 8020d4c:	461c      	mov	r4, r3
 8020d4e:	e7de      	b.n	8020d0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020d50:	463b      	mov	r3, r7
 8020d52:	463c      	mov	r4, r7
 8020d54:	e7db      	b.n	8020d0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020d56:	2300      	movs	r3, #0
 8020d58:	e7d9      	b.n	8020d0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020d5a:	462b      	mov	r3, r5
 8020d5c:	e7d7      	b.n	8020d0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020d5e:	b2a8      	uxth	r0, r5
 8020d60:	b2bf      	uxth	r7, r7
 8020d62:	fb07 fe00 	mul.w	lr, r7, r0
 8020d66:	0100      	lsls	r0, r0, #4
 8020d68:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020d6c:	eba0 0c0e 	sub.w	ip, r0, lr
 8020d70:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8020d74:	b2bf      	uxth	r7, r7
 8020d76:	fa1f fc8c 	uxth.w	ip, ip
 8020d7a:	1bc5      	subs	r5, r0, r7
 8020d7c:	fb0c f00a 	mul.w	r0, ip, sl
 8020d80:	b2ad      	uxth	r5, r5
 8020d82:	fb05 000b 	mla	r0, r5, fp, r0
 8020d86:	fb07 0009 	mla	r0, r7, r9, r0
 8020d8a:	fb0e 0008 	mla	r0, lr, r8, r0
 8020d8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020d92:	9001      	str	r0, [sp, #4]
 8020d94:	2800      	cmp	r0, #0
 8020d96:	f000 80c2 	beq.w	8020f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8020d9a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020d9e:	d018      	beq.n	8020dd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8020da0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8020da4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020da8:	fb0b f000 	mul.w	r0, fp, r0
 8020dac:	fb0b fb02 	mul.w	fp, fp, r2
 8020db0:	0a02      	lsrs	r2, r0, #8
 8020db2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020db6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020dba:	4402      	add	r2, r0
 8020dbc:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8020dc0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020dc4:	0a12      	lsrs	r2, r2, #8
 8020dc6:	0a00      	lsrs	r0, r0, #8
 8020dc8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020dcc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020dd0:	4302      	orrs	r2, r0
 8020dd2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020dd6:	d01a      	beq.n	8020e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8020dd8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020ddc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020de0:	fb0a f000 	mul.w	r0, sl, r0
 8020de4:	fb0a fa06 	mul.w	sl, sl, r6
 8020de8:	0a06      	lsrs	r6, r0, #8
 8020dea:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020dee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020df2:	4406      	add	r6, r0
 8020df4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020df8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020dfc:	0a36      	lsrs	r6, r6, #8
 8020dfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e02:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020e06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e0a:	ea46 060a 	orr.w	r6, r6, sl
 8020e0e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020e12:	d01b      	beq.n	8020e4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8020e14:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020e18:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020e1c:	fb09 fa0a 	mul.w	sl, r9, sl
 8020e20:	fb09 f004 	mul.w	r0, r9, r4
 8020e24:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020e28:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020e2c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8020e30:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e34:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020e38:	4454      	add	r4, sl
 8020e3a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020e3e:	0a24      	lsrs	r4, r4, #8
 8020e40:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020e44:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e48:	ea44 0409 	orr.w	r4, r4, r9
 8020e4c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020e50:	d01b      	beq.n	8020e8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8020e52:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8020e56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e5a:	fb08 f909 	mul.w	r9, r8, r9
 8020e5e:	fb08 f003 	mul.w	r0, r8, r3
 8020e62:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8020e66:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020e6a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8020e6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e72:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8020e76:	444b      	add	r3, r9
 8020e78:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020e7c:	0a1b      	lsrs	r3, r3, #8
 8020e7e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020e82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e86:	ea43 0308 	orr.w	r3, r3, r8
 8020e8a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020e8e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020e92:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8020e96:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020e9a:	fb0c f000 	mul.w	r0, ip, r0
 8020e9e:	fb0c f606 	mul.w	r6, ip, r6
 8020ea2:	fb05 0808 	mla	r8, r5, r8, r0
 8020ea6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8020eaa:	fb05 6502 	mla	r5, r5, r2, r6
 8020eae:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020eb2:	fb07 8800 	mla	r8, r7, r0, r8
 8020eb6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8020eba:	fb07 5704 	mla	r7, r7, r4, r5
 8020ebe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ec2:	fb0e 8000 	mla	r0, lr, r0, r8
 8020ec6:	780a      	ldrb	r2, [r1, #0]
 8020ec8:	fb0e 7e03 	mla	lr, lr, r3, r7
 8020ecc:	9b01      	ldr	r3, [sp, #4]
 8020ece:	0a00      	lsrs	r0, r0, #8
 8020ed0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ed4:	43db      	mvns	r3, r3
 8020ed6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020eda:	b2db      	uxtb	r3, r3
 8020edc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020ee0:	ea40 0e0e 	orr.w	lr, r0, lr
 8020ee4:	fb02 f003 	mul.w	r0, r2, r3
 8020ee8:	1c42      	adds	r2, r0, #1
 8020eea:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020eee:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020ef2:	700a      	strb	r2, [r1, #0]
 8020ef4:	784a      	ldrb	r2, [r1, #1]
 8020ef6:	435a      	muls	r2, r3
 8020ef8:	1c50      	adds	r0, r2, #1
 8020efa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020efe:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8020f02:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020f06:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020f0a:	704a      	strb	r2, [r1, #1]
 8020f0c:	788a      	ldrb	r2, [r1, #2]
 8020f0e:	4353      	muls	r3, r2
 8020f10:	1c5a      	adds	r2, r3, #1
 8020f12:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f16:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8020f1a:	f881 e002 	strb.w	lr, [r1, #2]
 8020f1e:	b003      	add	sp, #12
 8020f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f24:	0802e05f 	.word	0x0802e05f
 8020f28:	0802e5c7 	.word	0x0802e5c7
 8020f2c:	0802e128 	.word	0x0802e128

08020f30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f34:	ed2d 8b0a 	vpush	{d8-d12}
 8020f38:	b09b      	sub	sp, #108	; 0x6c
 8020f3a:	eeb0 aa40 	vmov.f32	s20, s0
 8020f3e:	eef0 9a60 	vmov.f32	s19, s1
 8020f42:	9218      	str	r2, [sp, #96]	; 0x60
 8020f44:	eeb0 9a41 	vmov.f32	s18, s2
 8020f48:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020f4a:	eeb0 8a62 	vmov.f32	s16, s5
 8020f4e:	9019      	str	r0, [sp, #100]	; 0x64
 8020f50:	eef0 8a43 	vmov.f32	s17, s6
 8020f54:	6850      	ldr	r0, [r2, #4]
 8020f56:	eeb0 ca44 	vmov.f32	s24, s8
 8020f5a:	9116      	str	r1, [sp, #88]	; 0x58
 8020f5c:	eef0 ba64 	vmov.f32	s23, s9
 8020f60:	9307      	str	r3, [sp, #28]
 8020f62:	eeb0 ba45 	vmov.f32	s22, s10
 8020f66:	6812      	ldr	r2, [r2, #0]
 8020f68:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020f6c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8020f6e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8020f72:	fb00 1303 	mla	r3, r0, r3, r1
 8020f76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f7a:	18d3      	adds	r3, r2, r3
 8020f7c:	930a      	str	r3, [sp, #40]	; 0x28
 8020f7e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020f80:	681b      	ldr	r3, [r3, #0]
 8020f82:	930f      	str	r3, [sp, #60]	; 0x3c
 8020f84:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020f86:	685e      	ldr	r6, [r3, #4]
 8020f88:	3604      	adds	r6, #4
 8020f8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	dc03      	bgt.n	8020f98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020f90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	f340 834f 	ble.w	8021636 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8020f98:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020f9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020f9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020fa2:	1e48      	subs	r0, r1, #1
 8020fa4:	1e57      	subs	r7, r2, #1
 8020fa6:	9b07      	ldr	r3, [sp, #28]
 8020fa8:	2b00      	cmp	r3, #0
 8020faa:	f340 8178 	ble.w	802129e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020fae:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8020fb0:	142b      	asrs	r3, r5, #16
 8020fb2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020fb6:	d406      	bmi.n	8020fc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020fb8:	4584      	cmp	ip, r0
 8020fba:	da04      	bge.n	8020fc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	db02      	blt.n	8020fc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020fc0:	42bb      	cmp	r3, r7
 8020fc2:	f2c0 816d 	blt.w	80212a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020fc6:	f11c 0c01 	adds.w	ip, ip, #1
 8020fca:	f100 815b 	bmi.w	8021284 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020fce:	4561      	cmp	r1, ip
 8020fd0:	f2c0 8158 	blt.w	8021284 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020fd4:	3301      	adds	r3, #1
 8020fd6:	f100 8155 	bmi.w	8021284 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020fda:	429a      	cmp	r2, r3
 8020fdc:	f2c0 8152 	blt.w	8021284 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020fe0:	9b07      	ldr	r3, [sp, #28]
 8020fe2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020fe4:	9317      	str	r3, [sp, #92]	; 0x5c
 8020fe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	f340 8178 	ble.w	80212de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020fee:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8020ff0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020ff4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020ff8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020ffc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020ffe:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021002:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021004:	141b      	asrs	r3, r3, #16
 8021006:	f100 81ba 	bmi.w	802137e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802100a:	f101 38ff 	add.w	r8, r1, #4294967295
 802100e:	4543      	cmp	r3, r8
 8021010:	f280 81b5 	bge.w	802137e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021014:	f1bc 0f00 	cmp.w	ip, #0
 8021018:	f2c0 81b1 	blt.w	802137e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802101c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021020:	45c4      	cmp	ip, r8
 8021022:	f280 81ac 	bge.w	802137e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021026:	b209      	sxth	r1, r1
 8021028:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802102a:	fb0c 3301 	mla	r3, ip, r1, r3
 802102e:	eb04 0803 	add.w	r8, r4, r3
 8021032:	5ce3      	ldrb	r3, [r4, r3]
 8021034:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021038:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802103c:	2a00      	cmp	r2, #0
 802103e:	f000 8193 	beq.w	8021368 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8021042:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021046:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802104a:	940b      	str	r4, [sp, #44]	; 0x2c
 802104c:	0e24      	lsrs	r4, r4, #24
 802104e:	9412      	str	r4, [sp, #72]	; 0x48
 8021050:	b178      	cbz	r0, 8021072 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021052:	eb08 0c01 	add.w	ip, r8, r1
 8021056:	f818 1001 	ldrb.w	r1, [r8, r1]
 802105a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802105e:	9108      	str	r1, [sp, #32]
 8021060:	0e09      	lsrs	r1, r1, #24
 8021062:	9110      	str	r1, [sp, #64]	; 0x40
 8021064:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021068:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802106c:	910c      	str	r1, [sp, #48]	; 0x30
 802106e:	0e09      	lsrs	r1, r1, #24
 8021070:	9113      	str	r1, [sp, #76]	; 0x4c
 8021072:	b292      	uxth	r2, r2
 8021074:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021076:	b280      	uxth	r0, r0
 8021078:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802107a:	fb02 f900 	mul.w	r9, r2, r0
 802107e:	0112      	lsls	r2, r2, #4
 8021080:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021084:	eba2 0809 	sub.w	r8, r2, r9
 8021088:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802108c:	b280      	uxth	r0, r0
 802108e:	fa1f f888 	uxth.w	r8, r8
 8021092:	1a12      	subs	r2, r2, r0
 8021094:	fb08 f101 	mul.w	r1, r8, r1
 8021098:	b292      	uxth	r2, r2
 802109a:	fb02 110e 	mla	r1, r2, lr, r1
 802109e:	fb00 1104 	mla	r1, r0, r4, r1
 80210a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80210a4:	fb09 1104 	mla	r1, r9, r4, r1
 80210a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80210ac:	2900      	cmp	r1, #0
 80210ae:	f000 80de 	beq.w	802126e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80210b2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80210b6:	d01b      	beq.n	80210f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80210b8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80210bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210c0:	fb0e fa0a 	mul.w	sl, lr, sl
 80210c4:	fb0e fe03 	mul.w	lr, lr, r3
 80210c8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80210cc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80210d0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80210d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80210d8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80210dc:	4453      	add	r3, sl
 80210de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210e2:	0a1b      	lsrs	r3, r3, #8
 80210e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80210e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80210ec:	ea43 030c 	orr.w	r3, r3, ip
 80210f0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80210f2:	2cff      	cmp	r4, #255	; 0xff
 80210f4:	d021      	beq.n	802113a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80210f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80210f8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80210fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80210fe:	fb04 fb0b 	mul.w	fp, r4, fp
 8021102:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021104:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021108:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802110a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802110e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021112:	fb04 fa0a 	mul.w	sl, r4, sl
 8021116:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802111a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802111e:	44de      	add	lr, fp
 8021120:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021124:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021128:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802112c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021130:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021134:	ea4e 040a 	orr.w	r4, lr, sl
 8021138:	940b      	str	r4, [sp, #44]	; 0x2c
 802113a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802113c:	2cff      	cmp	r4, #255	; 0xff
 802113e:	d021      	beq.n	8021184 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8021140:	9c08      	ldr	r4, [sp, #32]
 8021142:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021146:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021148:	fb04 fb0b 	mul.w	fp, r4, fp
 802114c:	9c08      	ldr	r4, [sp, #32]
 802114e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021152:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021154:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021158:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802115c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021160:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021164:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021168:	44de      	add	lr, fp
 802116a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802116e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021172:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021176:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802117a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802117e:	ea4e 040a 	orr.w	r4, lr, sl
 8021182:	9408      	str	r4, [sp, #32]
 8021184:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021186:	2cff      	cmp	r4, #255	; 0xff
 8021188:	d021      	beq.n	80211ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802118a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802118c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021190:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021192:	fb04 fb0b 	mul.w	fp, r4, fp
 8021196:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021198:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802119c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802119e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80211a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80211a6:	fb04 fa0a 	mul.w	sl, r4, sl
 80211aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80211ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80211b2:	44de      	add	lr, fp
 80211b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80211b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80211c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80211c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80211c8:	ea4e 040a 	orr.w	r4, lr, sl
 80211cc:	940c      	str	r4, [sp, #48]	; 0x30
 80211ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80211d0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80211d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80211d8:	43c9      	mvns	r1, r1
 80211da:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80211de:	9c08      	ldr	r4, [sp, #32]
 80211e0:	b2c9      	uxtb	r1, r1
 80211e2:	fb08 fc0c 	mul.w	ip, r8, ip
 80211e6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80211ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80211ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80211f0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80211f4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80211f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80211fa:	fb09 cc0e 	mla	ip, r9, lr, ip
 80211fe:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021202:	fb08 f80e 	mul.w	r8, r8, lr
 8021206:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802120a:	fb02 8303 	mla	r3, r2, r3, r8
 802120e:	9a08      	ldr	r2, [sp, #32]
 8021210:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021214:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802121a:	fb00 330a 	mla	r3, r0, sl, r3
 802121e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021222:	fb09 3900 	mla	r9, r9, r0, r3
 8021226:	783b      	ldrb	r3, [r7, #0]
 8021228:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802122c:	fb03 f201 	mul.w	r2, r3, r1
 8021230:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021234:	1c53      	adds	r3, r2, #1
 8021236:	ea4c 0c09 	orr.w	ip, ip, r9
 802123a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802123e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021242:	703b      	strb	r3, [r7, #0]
 8021244:	787b      	ldrb	r3, [r7, #1]
 8021246:	434b      	muls	r3, r1
 8021248:	1c5a      	adds	r2, r3, #1
 802124a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802124e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021252:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021256:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802125a:	707b      	strb	r3, [r7, #1]
 802125c:	78bb      	ldrb	r3, [r7, #2]
 802125e:	4359      	muls	r1, r3
 8021260:	1c4b      	adds	r3, r1, #1
 8021262:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021266:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802126a:	f887 c002 	strb.w	ip, [r7, #2]
 802126e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021270:	3703      	adds	r7, #3
 8021272:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021274:	441a      	add	r2, r3
 8021276:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021278:	441d      	add	r5, r3
 802127a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802127c:	922f      	str	r2, [sp, #188]	; 0xbc
 802127e:	3b01      	subs	r3, #1
 8021280:	9317      	str	r3, [sp, #92]	; 0x5c
 8021282:	e6b0      	b.n	8020fe6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021284:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021286:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021288:	441c      	add	r4, r3
 802128a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802128c:	441d      	add	r5, r3
 802128e:	9b07      	ldr	r3, [sp, #28]
 8021290:	942f      	str	r4, [sp, #188]	; 0xbc
 8021292:	3b01      	subs	r3, #1
 8021294:	9307      	str	r3, [sp, #28]
 8021296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021298:	3303      	adds	r3, #3
 802129a:	930a      	str	r3, [sp, #40]	; 0x28
 802129c:	e683      	b.n	8020fa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802129e:	d026      	beq.n	80212ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80212a0:	9b07      	ldr	r3, [sp, #28]
 80212a2:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80212a4:	3b01      	subs	r3, #1
 80212a6:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80212a8:	fb00 4003 	mla	r0, r0, r3, r4
 80212ac:	1400      	asrs	r0, r0, #16
 80212ae:	f53f ae97 	bmi.w	8020fe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80212b2:	3901      	subs	r1, #1
 80212b4:	4288      	cmp	r0, r1
 80212b6:	f6bf ae93 	bge.w	8020fe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80212ba:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80212bc:	fb01 5303 	mla	r3, r1, r3, r5
 80212c0:	141b      	asrs	r3, r3, #16
 80212c2:	f53f ae8d 	bmi.w	8020fe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80212c6:	3a01      	subs	r2, #1
 80212c8:	4293      	cmp	r3, r2
 80212ca:	f6bf ae89 	bge.w	8020fe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80212ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212d0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80212d4:	f103 0e03 	add.w	lr, r3, #3
 80212d8:	f1bb 0f00 	cmp.w	fp, #0
 80212dc:	dc6d      	bgt.n	80213ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80212de:	9b07      	ldr	r3, [sp, #28]
 80212e0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80212e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80212ea:	4423      	add	r3, r4
 80212ec:	930a      	str	r3, [sp, #40]	; 0x28
 80212ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80212f0:	2b00      	cmp	r3, #0
 80212f2:	f340 81a0 	ble.w	8021636 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80212f6:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80212fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80212fc:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021300:	eef0 6a48 	vmov.f32	s13, s16
 8021304:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021308:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802130c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021310:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8021314:	eef0 6a68 	vmov.f32	s13, s17
 8021318:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802131c:	ee16 5a90 	vmov	r5, s13
 8021320:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021324:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021328:	ee37 8a48 	vsub.f32	s16, s14, s16
 802132c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021330:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021334:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021338:	ee18 2a10 	vmov	r2, s16
 802133c:	eeb0 8a47 	vmov.f32	s16, s14
 8021340:	fb92 f3f3 	sdiv	r3, r2, r3
 8021344:	ee18 2a90 	vmov	r2, s17
 8021348:	9331      	str	r3, [sp, #196]	; 0xc4
 802134a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802134c:	eef0 8a67 	vmov.f32	s17, s15
 8021350:	fb92 f3f3 	sdiv	r3, r2, r3
 8021354:	9332      	str	r3, [sp, #200]	; 0xc8
 8021356:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021358:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802135a:	3b01      	subs	r3, #1
 802135c:	9316      	str	r3, [sp, #88]	; 0x58
 802135e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021360:	bf08      	it	eq
 8021362:	4613      	moveq	r3, r2
 8021364:	9307      	str	r3, [sp, #28]
 8021366:	e610      	b.n	8020f8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021368:	2800      	cmp	r0, #0
 802136a:	f43f ae82 	beq.w	8021072 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802136e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021372:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021376:	9108      	str	r1, [sp, #32]
 8021378:	0e09      	lsrs	r1, r1, #24
 802137a:	9110      	str	r1, [sp, #64]	; 0x40
 802137c:	e679      	b.n	8021072 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802137e:	f113 0801 	adds.w	r8, r3, #1
 8021382:	f53f af74 	bmi.w	802126e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021386:	4541      	cmp	r1, r8
 8021388:	f6ff af71 	blt.w	802126e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802138c:	f11c 0801 	adds.w	r8, ip, #1
 8021390:	f53f af6d 	bmi.w	802126e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021394:	45c6      	cmp	lr, r8
 8021396:	f6ff af6a 	blt.w	802126e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802139a:	b209      	sxth	r1, r1
 802139c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80213a0:	fa0f f38e 	sxth.w	r3, lr
 80213a4:	9100      	str	r1, [sp, #0]
 80213a6:	4639      	mov	r1, r7
 80213a8:	9301      	str	r3, [sp, #4]
 80213aa:	4633      	mov	r3, r6
 80213ac:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80213b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80213b2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80213b4:	f7ff fc70 	bl	8020c98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80213b8:	e759      	b.n	802126e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80213ba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80213bc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80213c0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80213c2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80213c6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80213c8:	1427      	asrs	r7, r4, #16
 80213ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80213cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80213d0:	142b      	asrs	r3, r5, #16
 80213d2:	fb01 7303 	mla	r3, r1, r3, r7
 80213d6:	18e7      	adds	r7, r4, r3
 80213d8:	5ce3      	ldrb	r3, [r4, r3]
 80213da:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80213de:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80213e2:	2a00      	cmp	r2, #0
 80213e4:	f000 811d 	beq.w	8021622 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80213e8:	f897 8001 	ldrb.w	r8, [r7, #1]
 80213ec:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80213f0:	940d      	str	r4, [sp, #52]	; 0x34
 80213f2:	0e24      	lsrs	r4, r4, #24
 80213f4:	9414      	str	r4, [sp, #80]	; 0x50
 80213f6:	b170      	cbz	r0, 8021416 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80213f8:	eb07 0801 	add.w	r8, r7, r1
 80213fc:	5c79      	ldrb	r1, [r7, r1]
 80213fe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021402:	9109      	str	r1, [sp, #36]	; 0x24
 8021404:	0e09      	lsrs	r1, r1, #24
 8021406:	9111      	str	r1, [sp, #68]	; 0x44
 8021408:	f898 1001 	ldrb.w	r1, [r8, #1]
 802140c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021410:	910e      	str	r1, [sp, #56]	; 0x38
 8021412:	0e09      	lsrs	r1, r1, #24
 8021414:	9115      	str	r1, [sp, #84]	; 0x54
 8021416:	b292      	uxth	r2, r2
 8021418:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802141a:	b280      	uxth	r0, r0
 802141c:	fb02 f900 	mul.w	r9, r2, r0
 8021420:	0112      	lsls	r2, r2, #4
 8021422:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021426:	eba2 0809 	sub.w	r8, r2, r9
 802142a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802142e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021430:	b280      	uxth	r0, r0
 8021432:	fa1f f888 	uxth.w	r8, r8
 8021436:	1a09      	subs	r1, r1, r0
 8021438:	fb08 f202 	mul.w	r2, r8, r2
 802143c:	b289      	uxth	r1, r1
 802143e:	fb01 220c 	mla	r2, r1, ip, r2
 8021442:	fb00 2204 	mla	r2, r0, r4, r2
 8021446:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021448:	fb09 2204 	mla	r2, r9, r4, r2
 802144c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021450:	2a00      	cmp	r2, #0
 8021452:	f000 80db 	beq.w	802160c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021456:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802145a:	d019      	beq.n	8021490 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 802145c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021460:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021464:	fb0c fa0a 	mul.w	sl, ip, sl
 8021468:	fb0c fc03 	mul.w	ip, ip, r3
 802146c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021470:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021474:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021478:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802147c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021480:	4453      	add	r3, sl
 8021482:	0a3f      	lsrs	r7, r7, #8
 8021484:	0a1b      	lsrs	r3, r3, #8
 8021486:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802148a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802148e:	433b      	orrs	r3, r7
 8021490:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021492:	2cff      	cmp	r4, #255	; 0xff
 8021494:	d020      	beq.n	80214d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8021496:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021498:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802149c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802149e:	4367      	muls	r7, r4
 80214a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80214a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80214a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80214ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80214b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80214b8:	44bc      	add	ip, r7
 80214ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80214be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80214c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214d2:	ea4c 040a 	orr.w	r4, ip, sl
 80214d6:	940d      	str	r4, [sp, #52]	; 0x34
 80214d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214da:	2cff      	cmp	r4, #255	; 0xff
 80214dc:	d020      	beq.n	8021520 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 80214de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80214e0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80214e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214e6:	4367      	muls	r7, r4
 80214e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80214ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80214ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214f2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214f4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80214f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8021500:	44bc      	add	ip, r7
 8021502:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021506:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802150a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802150e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021512:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021516:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802151a:	ea4c 040a 	orr.w	r4, ip, sl
 802151e:	9409      	str	r4, [sp, #36]	; 0x24
 8021520:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021522:	2cff      	cmp	r4, #255	; 0xff
 8021524:	d020      	beq.n	8021568 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8021526:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021528:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802152c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802152e:	4367      	muls	r7, r4
 8021530:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021532:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021536:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802153a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802153c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021540:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021544:	fb04 fa0a 	mul.w	sl, r4, sl
 8021548:	44bc      	add	ip, r7
 802154a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802154e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021552:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021556:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802155a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802155e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021562:	ea4c 040a 	orr.w	r4, ip, sl
 8021566:	940e      	str	r4, [sp, #56]	; 0x38
 8021568:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802156a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802156e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021572:	43d2      	mvns	r2, r2
 8021574:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021578:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802157a:	b2d2      	uxtb	r2, r2
 802157c:	fb08 f707 	mul.w	r7, r8, r7
 8021580:	fb01 770c 	mla	r7, r1, ip, r7
 8021584:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021588:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802158a:	fb00 770c 	mla	r7, r0, ip, r7
 802158e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021592:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021594:	fb09 770c 	mla	r7, r9, ip, r7
 8021598:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802159c:	fb08 f80c 	mul.w	r8, r8, ip
 80215a0:	0a3f      	lsrs	r7, r7, #8
 80215a2:	fb01 8303 	mla	r3, r1, r3, r8
 80215a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80215a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80215ac:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80215b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80215b2:	fb00 330a 	mla	r3, r0, sl, r3
 80215b6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80215ba:	fb09 3c0c 	mla	ip, r9, ip, r3
 80215be:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80215c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215c6:	fb03 f102 	mul.w	r1, r3, r2
 80215ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80215ce:	1c4b      	adds	r3, r1, #1
 80215d0:	ea47 070c 	orr.w	r7, r7, ip
 80215d4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80215d8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80215dc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80215e0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80215e4:	4353      	muls	r3, r2
 80215e6:	1c59      	adds	r1, r3, #1
 80215e8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80215ec:	0a3b      	lsrs	r3, r7, #8
 80215ee:	0c3f      	lsrs	r7, r7, #16
 80215f0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80215f4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80215f8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80215fc:	435a      	muls	r2, r3
 80215fe:	1c53      	adds	r3, r2, #1
 8021600:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021604:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021608:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802160c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802160e:	f10e 0e03 	add.w	lr, lr, #3
 8021612:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021614:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021618:	441a      	add	r2, r3
 802161a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802161c:	922f      	str	r2, [sp, #188]	; 0xbc
 802161e:	441d      	add	r5, r3
 8021620:	e65a      	b.n	80212d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8021622:	2800      	cmp	r0, #0
 8021624:	f43f aef7 	beq.w	8021416 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8021628:	5c79      	ldrb	r1, [r7, r1]
 802162a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802162e:	9109      	str	r1, [sp, #36]	; 0x24
 8021630:	0e09      	lsrs	r1, r1, #24
 8021632:	9111      	str	r1, [sp, #68]	; 0x44
 8021634:	e6ef      	b.n	8021416 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8021636:	b01b      	add	sp, #108	; 0x6c
 8021638:	ecbd 8b0a 	vpop	{d8-d12}
 802163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021640 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021644:	b08d      	sub	sp, #52	; 0x34
 8021646:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802164a:	9103      	str	r1, [sp, #12]
 802164c:	fb07 5803 	mla	r8, r7, r3, r5
 8021650:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8021654:	9803      	ldr	r0, [sp, #12]
 8021656:	2f00      	cmp	r7, #0
 8021658:	910b      	str	r1, [sp, #44]	; 0x2c
 802165a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802165e:	9903      	ldr	r1, [sp, #12]
 8021660:	9c03      	ldr	r4, [sp, #12]
 8021662:	eb02 0608 	add.w	r6, r2, r8
 8021666:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802166a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 802166e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8021672:	7809      	ldrb	r1, [r1, #0]
 8021674:	7840      	ldrb	r0, [r0, #1]
 8021676:	78a4      	ldrb	r4, [r4, #2]
 8021678:	db51      	blt.n	802171e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802167a:	45be      	cmp	lr, r7
 802167c:	dd4f      	ble.n	802171e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802167e:	2d00      	cmp	r5, #0
 8021680:	db49      	blt.n	8021716 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021682:	42ab      	cmp	r3, r5
 8021684:	dd47      	ble.n	8021716 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021686:	f812 2008 	ldrb.w	r2, [r2, r8]
 802168a:	9204      	str	r2, [sp, #16]
 802168c:	7872      	ldrb	r2, [r6, #1]
 802168e:	9205      	str	r2, [sp, #20]
 8021690:	78b2      	ldrb	r2, [r6, #2]
 8021692:	9206      	str	r2, [sp, #24]
 8021694:	1c6a      	adds	r2, r5, #1
 8021696:	d449      	bmi.n	802172c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021698:	4293      	cmp	r3, r2
 802169a:	dd47      	ble.n	802172c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802169c:	f1bc 0f00 	cmp.w	ip, #0
 80216a0:	d044      	beq.n	802172c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80216a2:	7972      	ldrb	r2, [r6, #5]
 80216a4:	f896 b003 	ldrb.w	fp, [r6, #3]
 80216a8:	f896 a004 	ldrb.w	sl, [r6, #4]
 80216ac:	9201      	str	r2, [sp, #4]
 80216ae:	3701      	adds	r7, #1
 80216b0:	d444      	bmi.n	802173c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80216b2:	45be      	cmp	lr, r7
 80216b4:	dd42      	ble.n	802173c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80216b6:	f1b9 0f00 	cmp.w	r9, #0
 80216ba:	f000 80c1 	beq.w	8021840 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80216be:	2d00      	cmp	r5, #0
 80216c0:	db38      	blt.n	8021734 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80216c2:	42ab      	cmp	r3, r5
 80216c4:	dd36      	ble.n	8021734 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80216c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80216ca:	f816 8002 	ldrb.w	r8, [r6, r2]
 80216ce:	2203      	movs	r2, #3
 80216d0:	fb03 6702 	mla	r7, r3, r2, r6
 80216d4:	fb03 6202 	mla	r2, r3, r2, r6
 80216d8:	787f      	ldrb	r7, [r7, #1]
 80216da:	f892 e002 	ldrb.w	lr, [r2, #2]
 80216de:	9702      	str	r7, [sp, #8]
 80216e0:	3501      	adds	r5, #1
 80216e2:	d432      	bmi.n	802174a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80216e4:	42ab      	cmp	r3, r5
 80216e6:	dd30      	ble.n	802174a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80216e8:	f1bc 0f00 	cmp.w	ip, #0
 80216ec:	d031      	beq.n	8021752 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80216ee:	2703      	movs	r7, #3
 80216f0:	fb13 7207 	smlabb	r2, r3, r7, r7
 80216f4:	5cb5      	ldrb	r5, [r6, r2]
 80216f6:	fb03 6207 	mla	r2, r3, r7, r6
 80216fa:	fb03 6307 	mla	r3, r3, r7, r6
 80216fe:	7912      	ldrb	r2, [r2, #4]
 8021700:	795e      	ldrb	r6, [r3, #5]
 8021702:	f1bc 0f0f 	cmp.w	ip, #15
 8021706:	d927      	bls.n	8021758 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8021708:	4b53      	ldr	r3, [pc, #332]	; (8021858 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802170a:	f240 1157 	movw	r1, #343	; 0x157
 802170e:	4a53      	ldr	r2, [pc, #332]	; (802185c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8021710:	4853      	ldr	r0, [pc, #332]	; (8021860 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8021712:	f004 fc65 	bl	8025fe0 <__assert_func>
 8021716:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802171a:	9104      	str	r1, [sp, #16]
 802171c:	e7ba      	b.n	8021694 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802171e:	9401      	str	r4, [sp, #4]
 8021720:	4682      	mov	sl, r0
 8021722:	468b      	mov	fp, r1
 8021724:	9104      	str	r1, [sp, #16]
 8021726:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802172a:	e7c0      	b.n	80216ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802172c:	9401      	str	r4, [sp, #4]
 802172e:	4682      	mov	sl, r0
 8021730:	468b      	mov	fp, r1
 8021732:	e7bc      	b.n	80216ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021734:	46a6      	mov	lr, r4
 8021736:	9002      	str	r0, [sp, #8]
 8021738:	4688      	mov	r8, r1
 802173a:	e7d1      	b.n	80216e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 802173c:	4626      	mov	r6, r4
 802173e:	4602      	mov	r2, r0
 8021740:	460d      	mov	r5, r1
 8021742:	46a6      	mov	lr, r4
 8021744:	9002      	str	r0, [sp, #8]
 8021746:	4688      	mov	r8, r1
 8021748:	e7db      	b.n	8021702 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802174a:	4626      	mov	r6, r4
 802174c:	4602      	mov	r2, r0
 802174e:	460d      	mov	r5, r1
 8021750:	e7d7      	b.n	8021702 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021752:	4626      	mov	r6, r4
 8021754:	4602      	mov	r2, r0
 8021756:	460d      	mov	r5, r1
 8021758:	f1b9 0f0f 	cmp.w	r9, #15
 802175c:	d8d4      	bhi.n	8021708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802175e:	fa1f f38c 	uxth.w	r3, ip
 8021762:	fa1f fc89 	uxth.w	ip, r9
 8021766:	fb03 f70c 	mul.w	r7, r3, ip
 802176a:	011b      	lsls	r3, r3, #4
 802176c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021770:	9707      	str	r7, [sp, #28]
 8021772:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021776:	fa1f fc8c 	uxth.w	ip, ip
 802177a:	eba7 070c 	sub.w	r7, r7, ip
 802177e:	b2bf      	uxth	r7, r7
 8021780:	9709      	str	r7, [sp, #36]	; 0x24
 8021782:	9f07      	ldr	r7, [sp, #28]
 8021784:	1bdb      	subs	r3, r3, r7
 8021786:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802178a:	b29b      	uxth	r3, r3
 802178c:	9708      	str	r7, [sp, #32]
 802178e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021790:	930a      	str	r3, [sp, #40]	; 0x28
 8021792:	ea6f 0907 	mvn.w	r9, r7
 8021796:	fb03 fb0b 	mul.w	fp, r3, fp
 802179a:	9f04      	ldr	r7, [sp, #16]
 802179c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802179e:	fa5f f989 	uxtb.w	r9, r9
 80217a2:	fb03 bb07 	mla	fp, r3, r7, fp
 80217a6:	9f07      	ldr	r7, [sp, #28]
 80217a8:	fb11 f109 	smulbb	r1, r1, r9
 80217ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217ae:	fb0c b808 	mla	r8, ip, r8, fp
 80217b2:	fb10 f009 	smulbb	r0, r0, r9
 80217b6:	fb14 f409 	smulbb	r4, r4, r9
 80217ba:	fb07 8805 	mla	r8, r7, r5, r8
 80217be:	9d08      	ldr	r5, [sp, #32]
 80217c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80217c2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80217c6:	fb08 1805 	mla	r8, r8, r5, r1
 80217ca:	9d05      	ldr	r5, [sp, #20]
 80217cc:	fa1f f888 	uxth.w	r8, r8
 80217d0:	f108 0101 	add.w	r1, r8, #1
 80217d4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80217d8:	9903      	ldr	r1, [sp, #12]
 80217da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80217de:	f881 8000 	strb.w	r8, [r1]
 80217e2:	fb03 f10a 	mul.w	r1, r3, sl
 80217e6:	fb07 1105 	mla	r1, r7, r5, r1
 80217ea:	9d02      	ldr	r5, [sp, #8]
 80217ec:	fb0c 1105 	mla	r1, ip, r5, r1
 80217f0:	9d07      	ldr	r5, [sp, #28]
 80217f2:	fb05 1102 	mla	r1, r5, r2, r1
 80217f6:	9a08      	ldr	r2, [sp, #32]
 80217f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80217fc:	fb01 0102 	mla	r1, r1, r2, r0
 8021800:	9a03      	ldr	r2, [sp, #12]
 8021802:	b289      	uxth	r1, r1
 8021804:	1c48      	adds	r0, r1, #1
 8021806:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802180a:	1209      	asrs	r1, r1, #8
 802180c:	7051      	strb	r1, [r2, #1]
 802180e:	9a01      	ldr	r2, [sp, #4]
 8021810:	4353      	muls	r3, r2
 8021812:	9a06      	ldr	r2, [sp, #24]
 8021814:	fb07 3702 	mla	r7, r7, r2, r3
 8021818:	9b08      	ldr	r3, [sp, #32]
 802181a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802181e:	fb05 c606 	mla	r6, r5, r6, ip
 8021822:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021826:	fb06 4603 	mla	r6, r6, r3, r4
 802182a:	9b03      	ldr	r3, [sp, #12]
 802182c:	b2b6      	uxth	r6, r6
 802182e:	f106 0e01 	add.w	lr, r6, #1
 8021832:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021836:	1236      	asrs	r6, r6, #8
 8021838:	709e      	strb	r6, [r3, #2]
 802183a:	b00d      	add	sp, #52	; 0x34
 802183c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021840:	f1bc 0f0f 	cmp.w	ip, #15
 8021844:	f63f af60 	bhi.w	8021708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021848:	4626      	mov	r6, r4
 802184a:	4602      	mov	r2, r0
 802184c:	460d      	mov	r5, r1
 802184e:	46a6      	mov	lr, r4
 8021850:	9002      	str	r0, [sp, #8]
 8021852:	4688      	mov	r8, r1
 8021854:	e783      	b.n	802175e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8021856:	bf00      	nop
 8021858:	0802e05f 	.word	0x0802e05f
 802185c:	0802e5c7 	.word	0x0802e5c7
 8021860:	0802e128 	.word	0x0802e128

08021864 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021868:	ed2d 8b08 	vpush	{d8-d11}
 802186c:	b09f      	sub	sp, #124	; 0x7c
 802186e:	eeb0 aa40 	vmov.f32	s20, s0
 8021872:	eef0 9a60 	vmov.f32	s19, s1
 8021876:	920e      	str	r2, [sp, #56]	; 0x38
 8021878:	eeb0 9a41 	vmov.f32	s18, s2
 802187c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802187e:	eeb0 8a62 	vmov.f32	s16, s5
 8021882:	9307      	str	r3, [sp, #28]
 8021884:	eef0 8a43 	vmov.f32	s17, s6
 8021888:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 802188c:	eef0 ba44 	vmov.f32	s23, s8
 8021890:	901d      	str	r0, [sp, #116]	; 0x74
 8021892:	eeb0 ba64 	vmov.f32	s22, s9
 8021896:	930c      	str	r3, [sp, #48]	; 0x30
 8021898:	eef0 aa45 	vmov.f32	s21, s10
 802189c:	6850      	ldr	r0, [r2, #4]
 802189e:	910b      	str	r1, [sp, #44]	; 0x2c
 80218a0:	6812      	ldr	r2, [r2, #0]
 80218a2:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80218a6:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 80218aa:	fb00 1303 	mla	r3, r0, r3, r1
 80218ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218b2:	18d3      	adds	r3, r2, r3
 80218b4:	9308      	str	r3, [sp, #32]
 80218b6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80218b8:	681b      	ldr	r3, [r3, #0]
 80218ba:	930a      	str	r3, [sp, #40]	; 0x28
 80218bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218be:	43db      	mvns	r3, r3
 80218c0:	b2db      	uxtb	r3, r3
 80218c2:	9309      	str	r3, [sp, #36]	; 0x24
 80218c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	dc03      	bgt.n	80218d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80218ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	f340 81f5 	ble.w	8021cbc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80218d2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80218d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80218d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80218dc:	1e48      	subs	r0, r1, #1
 80218de:	1e54      	subs	r4, r2, #1
 80218e0:	9b07      	ldr	r3, [sp, #28]
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	f340 80d5 	ble.w	8021a92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80218e8:	ea5f 452a 	movs.w	r5, sl, asr #16
 80218ec:	ea4f 4328 	mov.w	r3, r8, asr #16
 80218f0:	d406      	bmi.n	8021900 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80218f2:	4285      	cmp	r5, r0
 80218f4:	da04      	bge.n	8021900 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	db02      	blt.n	8021900 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80218fa:	42a3      	cmp	r3, r4
 80218fc:	f2c0 80ca 	blt.w	8021a94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021900:	3501      	adds	r5, #1
 8021902:	f100 80bb 	bmi.w	8021a7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021906:	42a9      	cmp	r1, r5
 8021908:	f2c0 80b8 	blt.w	8021a7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802190c:	3301      	adds	r3, #1
 802190e:	f100 80b5 	bmi.w	8021a7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021912:	429a      	cmp	r2, r3
 8021914:	f2c0 80b2 	blt.w	8021a7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021918:	9b07      	ldr	r3, [sp, #28]
 802191a:	9d08      	ldr	r5, [sp, #32]
 802191c:	930d      	str	r3, [sp, #52]	; 0x34
 802191e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021920:	2b00      	cmp	r3, #0
 8021922:	f340 80d6 	ble.w	8021ad2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8021926:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8021928:	ea4f 4428 	mov.w	r4, r8, asr #16
 802192c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802192e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8021932:	68c6      	ldr	r6, [r0, #12]
 8021934:	ea5f 402a 	movs.w	r0, sl, asr #16
 8021938:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802193c:	689b      	ldr	r3, [r3, #8]
 802193e:	f100 810f 	bmi.w	8021b60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021942:	1e5f      	subs	r7, r3, #1
 8021944:	42b8      	cmp	r0, r7
 8021946:	f280 810b 	bge.w	8021b60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802194a:	2c00      	cmp	r4, #0
 802194c:	f2c0 8108 	blt.w	8021b60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021950:	1e77      	subs	r7, r6, #1
 8021952:	42bc      	cmp	r4, r7
 8021954:	f280 8104 	bge.w	8021b60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021958:	b21b      	sxth	r3, r3
 802195a:	fb04 0003 	mla	r0, r4, r3, r0
 802195e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021960:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021964:	1826      	adds	r6, r4, r0
 8021966:	5c24      	ldrb	r4, [r4, r0]
 8021968:	78b7      	ldrb	r7, [r6, #2]
 802196a:	7870      	ldrb	r0, [r6, #1]
 802196c:	970f      	str	r7, [sp, #60]	; 0x3c
 802196e:	7977      	ldrb	r7, [r6, #5]
 8021970:	f896 e003 	ldrb.w	lr, [r6, #3]
 8021974:	f896 c004 	ldrb.w	ip, [r6, #4]
 8021978:	9710      	str	r7, [sp, #64]	; 0x40
 802197a:	b1c9      	cbz	r1, 80219b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802197c:	f04f 0b03 	mov.w	fp, #3
 8021980:	f06f 0904 	mvn.w	r9, #4
 8021984:	3605      	adds	r6, #5
 8021986:	fb13 930b 	smlabb	r3, r3, fp, r9
 802198a:	eb06 0b03 	add.w	fp, r6, r3
 802198e:	5cf3      	ldrb	r3, [r6, r3]
 8021990:	9311      	str	r3, [sp, #68]	; 0x44
 8021992:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8021996:	9313      	str	r3, [sp, #76]	; 0x4c
 8021998:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802199c:	9315      	str	r3, [sp, #84]	; 0x54
 802199e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80219a2:	9312      	str	r3, [sp, #72]	; 0x48
 80219a4:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80219a8:	9314      	str	r3, [sp, #80]	; 0x50
 80219aa:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80219ae:	9316      	str	r3, [sp, #88]	; 0x58
 80219b0:	b292      	uxth	r2, r2
 80219b2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80219b4:	b289      	uxth	r1, r1
 80219b6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80219ba:	fb02 f601 	mul.w	r6, r2, r1
 80219be:	0112      	lsls	r2, r2, #4
 80219c0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80219c4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80219c8:	1b92      	subs	r2, r2, r6
 80219ca:	b289      	uxth	r1, r1
 80219cc:	b292      	uxth	r2, r2
 80219ce:	eba9 0901 	sub.w	r9, r9, r1
 80219d2:	fb02 fe0e 	mul.w	lr, r2, lr
 80219d6:	fa1f f989 	uxth.w	r9, r9
 80219da:	fb02 fc0c 	mul.w	ip, r2, ip
 80219de:	fb09 e404 	mla	r4, r9, r4, lr
 80219e2:	f895 e000 	ldrb.w	lr, [r5]
 80219e6:	fb09 c000 	mla	r0, r9, r0, ip
 80219ea:	fb01 4407 	mla	r4, r1, r7, r4
 80219ee:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80219f0:	fb06 4407 	mla	r4, r6, r7, r4
 80219f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80219f6:	fb1e fe07 	smulbb	lr, lr, r7
 80219fa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80219fe:	fb04 e403 	mla	r4, r4, r3, lr
 8021a02:	b2a4      	uxth	r4, r4
 8021a04:	f104 0e01 	add.w	lr, r4, #1
 8021a08:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8021a0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021a0e:	fb01 0004 	mla	r0, r1, r4, r0
 8021a12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021a14:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021a18:	fb06 0004 	mla	r0, r6, r4, r0
 8021a1c:	786c      	ldrb	r4, [r5, #1]
 8021a1e:	f885 e000 	strb.w	lr, [r5]
 8021a22:	fb14 f407 	smulbb	r4, r4, r7
 8021a26:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021a2a:	fb00 4003 	mla	r0, r0, r3, r4
 8021a2e:	b280      	uxth	r0, r0
 8021a30:	1c44      	adds	r4, r0, #1
 8021a32:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021a36:	1200      	asrs	r0, r0, #8
 8021a38:	7068      	strb	r0, [r5, #1]
 8021a3a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021a3c:	4342      	muls	r2, r0
 8021a3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021a40:	fb09 2200 	mla	r2, r9, r0, r2
 8021a44:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021a46:	fb01 2100 	mla	r1, r1, r0, r2
 8021a4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021a4c:	fb06 1602 	mla	r6, r6, r2, r1
 8021a50:	78a9      	ldrb	r1, [r5, #2]
 8021a52:	fb11 f107 	smulbb	r1, r1, r7
 8021a56:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021a5a:	fb06 1303 	mla	r3, r6, r3, r1
 8021a5e:	b29b      	uxth	r3, r3
 8021a60:	1c5e      	adds	r6, r3, #1
 8021a62:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021a66:	121b      	asrs	r3, r3, #8
 8021a68:	70ab      	strb	r3, [r5, #2]
 8021a6a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021a6c:	3503      	adds	r5, #3
 8021a6e:	449a      	add	sl, r3
 8021a70:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021a72:	4498      	add	r8, r3
 8021a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a76:	3b01      	subs	r3, #1
 8021a78:	930d      	str	r3, [sp, #52]	; 0x34
 8021a7a:	e750      	b.n	802191e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8021a7c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021a7e:	449a      	add	sl, r3
 8021a80:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021a82:	4498      	add	r8, r3
 8021a84:	9b07      	ldr	r3, [sp, #28]
 8021a86:	3b01      	subs	r3, #1
 8021a88:	9307      	str	r3, [sp, #28]
 8021a8a:	9b08      	ldr	r3, [sp, #32]
 8021a8c:	3303      	adds	r3, #3
 8021a8e:	9308      	str	r3, [sp, #32]
 8021a90:	e726      	b.n	80218e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021a92:	d026      	beq.n	8021ae2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021a94:	9b07      	ldr	r3, [sp, #28]
 8021a96:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021a98:	3b01      	subs	r3, #1
 8021a9a:	fb00 a003 	mla	r0, r0, r3, sl
 8021a9e:	1400      	asrs	r0, r0, #16
 8021aa0:	f53f af3a 	bmi.w	8021918 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021aa4:	3901      	subs	r1, #1
 8021aa6:	4288      	cmp	r0, r1
 8021aa8:	f6bf af36 	bge.w	8021918 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021aac:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8021aae:	fb01 8303 	mla	r3, r1, r3, r8
 8021ab2:	141b      	asrs	r3, r3, #16
 8021ab4:	f53f af30 	bmi.w	8021918 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021ab8:	3a01      	subs	r2, #1
 8021aba:	4293      	cmp	r3, r2
 8021abc:	f6bf af2c 	bge.w	8021918 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021ac0:	9b08      	ldr	r3, [sp, #32]
 8021ac2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021ac6:	1cdd      	adds	r5, r3, #3
 8021ac8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8021acc:	f1bc 0f00 	cmp.w	ip, #0
 8021ad0:	dc5f      	bgt.n	8021b92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021ad2:	9b07      	ldr	r3, [sp, #28]
 8021ad4:	9a08      	ldr	r2, [sp, #32]
 8021ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021ada:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ade:	441a      	add	r2, r3
 8021ae0:	9208      	str	r2, [sp, #32]
 8021ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	f340 80e9 	ble.w	8021cbc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8021aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021aee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021af0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021af4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021af8:	eef0 6a48 	vmov.f32	s13, s16
 8021afc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021b00:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021b04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b08:	ee16 aa90 	vmov	sl, s13
 8021b0c:	eef0 6a68 	vmov.f32	s13, s17
 8021b10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b14:	ee16 8a90 	vmov	r8, s13
 8021b18:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021b1c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021b20:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021b24:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021b28:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021b2c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021b30:	ee18 2a10 	vmov	r2, s16
 8021b34:	eeb0 8a47 	vmov.f32	s16, s14
 8021b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b3c:	ee18 2a90 	vmov	r2, s17
 8021b40:	9333      	str	r3, [sp, #204]	; 0xcc
 8021b42:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021b44:	eef0 8a67 	vmov.f32	s17, s15
 8021b48:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b4c:	9334      	str	r3, [sp, #208]	; 0xd0
 8021b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021b52:	3b01      	subs	r3, #1
 8021b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8021b56:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021b58:	bf08      	it	eq
 8021b5a:	4613      	moveq	r3, r2
 8021b5c:	9307      	str	r3, [sp, #28]
 8021b5e:	e6b1      	b.n	80218c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021b60:	1c47      	adds	r7, r0, #1
 8021b62:	d482      	bmi.n	8021a6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021b64:	42bb      	cmp	r3, r7
 8021b66:	db80      	blt.n	8021a6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021b68:	1c67      	adds	r7, r4, #1
 8021b6a:	f53f af7e 	bmi.w	8021a6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021b6e:	42be      	cmp	r6, r7
 8021b70:	f6ff af7b 	blt.w	8021a6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021b74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021b76:	b236      	sxth	r6, r6
 8021b78:	9001      	str	r0, [sp, #4]
 8021b7a:	b21b      	sxth	r3, r3
 8021b7c:	9600      	str	r6, [sp, #0]
 8021b7e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021b80:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8021b84:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8021b88:	4629      	mov	r1, r5
 8021b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021b8c:	f7ff fd58 	bl	8021640 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8021b90:	e76b      	b.n	8021a6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021b92:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8021b94:	ea4f 402a 	mov.w	r0, sl, asr #16
 8021b98:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8021b9c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8021ba0:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8021ba4:	ea4f 4128 	mov.w	r1, r8, asr #16
 8021ba8:	fb07 0101 	mla	r1, r7, r1, r0
 8021bac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021bae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021bb2:	1844      	adds	r4, r0, r1
 8021bb4:	5c40      	ldrb	r0, [r0, r1]
 8021bb6:	78a6      	ldrb	r6, [r4, #2]
 8021bb8:	7861      	ldrb	r1, [r4, #1]
 8021bba:	960f      	str	r6, [sp, #60]	; 0x3c
 8021bbc:	78e6      	ldrb	r6, [r4, #3]
 8021bbe:	910d      	str	r1, [sp, #52]	; 0x34
 8021bc0:	9610      	str	r6, [sp, #64]	; 0x40
 8021bc2:	f894 9004 	ldrb.w	r9, [r4, #4]
 8021bc6:	f894 b005 	ldrb.w	fp, [r4, #5]
 8021bca:	b192      	cbz	r2, 8021bf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8021bcc:	f06f 0604 	mvn.w	r6, #4
 8021bd0:	2103      	movs	r1, #3
 8021bd2:	3405      	adds	r4, #5
 8021bd4:	fb17 6701 	smlabb	r7, r7, r1, r6
 8021bd8:	19e6      	adds	r6, r4, r7
 8021bda:	5de4      	ldrb	r4, [r4, r7]
 8021bdc:	9417      	str	r4, [sp, #92]	; 0x5c
 8021bde:	7874      	ldrb	r4, [r6, #1]
 8021be0:	9419      	str	r4, [sp, #100]	; 0x64
 8021be2:	78b4      	ldrb	r4, [r6, #2]
 8021be4:	941b      	str	r4, [sp, #108]	; 0x6c
 8021be6:	78f4      	ldrb	r4, [r6, #3]
 8021be8:	9418      	str	r4, [sp, #96]	; 0x60
 8021bea:	7934      	ldrb	r4, [r6, #4]
 8021bec:	941a      	str	r4, [sp, #104]	; 0x68
 8021bee:	7974      	ldrb	r4, [r6, #5]
 8021bf0:	941c      	str	r4, [sp, #112]	; 0x70
 8021bf2:	b29b      	uxth	r3, r3
 8021bf4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021bf6:	b292      	uxth	r2, r2
 8021bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021bfa:	3503      	adds	r5, #3
 8021bfc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021c00:	fb03 f402 	mul.w	r4, r3, r2
 8021c04:	011b      	lsls	r3, r3, #4
 8021c06:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8021c0a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8021c0e:	1b1b      	subs	r3, r3, r4
 8021c10:	b292      	uxth	r2, r2
 8021c12:	b29b      	uxth	r3, r3
 8021c14:	1ab6      	subs	r6, r6, r2
 8021c16:	435f      	muls	r7, r3
 8021c18:	b2b6      	uxth	r6, r6
 8021c1a:	fb03 f909 	mul.w	r9, r3, r9
 8021c1e:	fb03 fb0b 	mul.w	fp, r3, fp
 8021c22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021c24:	fb06 7000 	mla	r0, r6, r0, r7
 8021c28:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8021c2a:	fb06 bb03 	mla	fp, r6, r3, fp
 8021c2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021c30:	fb02 0007 	mla	r0, r2, r7, r0
 8021c34:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8021c36:	fb02 bb03 	mla	fp, r2, r3, fp
 8021c3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021c3c:	fb04 0007 	mla	r0, r4, r7, r0
 8021c40:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8021c44:	fb17 f701 	smulbb	r7, r7, r1
 8021c48:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021c4c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021c4e:	fb00 700e 	mla	r0, r0, lr, r7
 8021c52:	fb06 9101 	mla	r1, r6, r1, r9
 8021c56:	b280      	uxth	r0, r0
 8021c58:	1c47      	adds	r7, r0, #1
 8021c5a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021c5e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021c60:	1200      	asrs	r0, r0, #8
 8021c62:	f805 0c06 	strb.w	r0, [r5, #-6]
 8021c66:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021c68:	fb02 1100 	mla	r1, r2, r0, r1
 8021c6c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8021c6e:	fb04 1100 	mla	r1, r4, r0, r1
 8021c72:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8021c76:	fb04 b403 	mla	r4, r4, r3, fp
 8021c7a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8021c7e:	fb10 f007 	smulbb	r0, r0, r7
 8021c82:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021c86:	fb13 f307 	smulbb	r3, r3, r7
 8021c8a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021c8e:	fb01 010e 	mla	r1, r1, lr, r0
 8021c92:	fb04 340e 	mla	r4, r4, lr, r3
 8021c96:	b289      	uxth	r1, r1
 8021c98:	b2a4      	uxth	r4, r4
 8021c9a:	1c48      	adds	r0, r1, #1
 8021c9c:	1c63      	adds	r3, r4, #1
 8021c9e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021ca2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021ca6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021ca8:	1209      	asrs	r1, r1, #8
 8021caa:	1224      	asrs	r4, r4, #8
 8021cac:	449a      	add	sl, r3
 8021cae:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021cb0:	f805 1c05 	strb.w	r1, [r5, #-5]
 8021cb4:	f805 4c04 	strb.w	r4, [r5, #-4]
 8021cb8:	4498      	add	r8, r3
 8021cba:	e707      	b.n	8021acc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8021cbc:	b01f      	add	sp, #124	; 0x7c
 8021cbe:	ecbd 8b08 	vpop	{d8-d11}
 8021cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021cc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8021cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ccc:	b085      	sub	sp, #20
 8021cce:	784d      	ldrb	r5, [r1, #1]
 8021cd0:	788e      	ldrb	r6, [r1, #2]
 8021cd2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8021cd6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8021cda:	9403      	str	r4, [sp, #12]
 8021cdc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021ce0:	780c      	ldrb	r4, [r1, #0]
 8021ce2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8021ce6:	fb07 ce03 	mla	lr, r7, r3, ip
 8021cea:	2f00      	cmp	r7, #0
 8021cec:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021cf0:	eb02 0b0e 	add.w	fp, r2, lr
 8021cf4:	db56      	blt.n	8021da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8021cf6:	45b9      	cmp	r9, r7
 8021cf8:	dd54      	ble.n	8021da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8021cfa:	f1bc 0f00 	cmp.w	ip, #0
 8021cfe:	db4d      	blt.n	8021d9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021d00:	4563      	cmp	r3, ip
 8021d02:	dd4b      	ble.n	8021d9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021d04:	f812 200e 	ldrb.w	r2, [r2, lr]
 8021d08:	9200      	str	r2, [sp, #0]
 8021d0a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8021d0e:	9201      	str	r2, [sp, #4]
 8021d10:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021d14:	9202      	str	r2, [sp, #8]
 8021d16:	f11c 0201 	adds.w	r2, ip, #1
 8021d1a:	d44a      	bmi.n	8021db2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021d1c:	4293      	cmp	r3, r2
 8021d1e:	dd48      	ble.n	8021db2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021d20:	2800      	cmp	r0, #0
 8021d22:	d046      	beq.n	8021db2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021d24:	f89b e003 	ldrb.w	lr, [fp, #3]
 8021d28:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8021d2c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021d30:	3701      	adds	r7, #1
 8021d32:	d446      	bmi.n	8021dc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021d34:	45b9      	cmp	r9, r7
 8021d36:	dd44      	ble.n	8021dc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021d38:	9a03      	ldr	r2, [sp, #12]
 8021d3a:	2a00      	cmp	r2, #0
 8021d3c:	d045      	beq.n	8021dca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8021d3e:	f1bc 0f00 	cmp.w	ip, #0
 8021d42:	db3a      	blt.n	8021dba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021d44:	4563      	cmp	r3, ip
 8021d46:	dd38      	ble.n	8021dba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021d48:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021d4c:	f04f 0903 	mov.w	r9, #3
 8021d50:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021d54:	fb03 b209 	mla	r2, r3, r9, fp
 8021d58:	fb03 b909 	mla	r9, r3, r9, fp
 8021d5c:	7852      	ldrb	r2, [r2, #1]
 8021d5e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021d62:	f11c 0c01 	adds.w	ip, ip, #1
 8021d66:	d40d      	bmi.n	8021d84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021d68:	4563      	cmp	r3, ip
 8021d6a:	dd0b      	ble.n	8021d84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021d6c:	b160      	cbz	r0, 8021d88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8021d6e:	2603      	movs	r6, #3
 8021d70:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021d74:	fb03 b506 	mla	r5, r3, r6, fp
 8021d78:	fb03 b306 	mla	r3, r3, r6, fp
 8021d7c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021d80:	792d      	ldrb	r5, [r5, #4]
 8021d82:	795e      	ldrb	r6, [r3, #5]
 8021d84:	280f      	cmp	r0, #15
 8021d86:	d802      	bhi.n	8021d8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021d88:	9b03      	ldr	r3, [sp, #12]
 8021d8a:	2b0f      	cmp	r3, #15
 8021d8c:	d922      	bls.n	8021dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8021d8e:	4b2f      	ldr	r3, [pc, #188]	; (8021e4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8021d90:	f240 1157 	movw	r1, #343	; 0x157
 8021d94:	4a2e      	ldr	r2, [pc, #184]	; (8021e50 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8021d96:	482f      	ldr	r0, [pc, #188]	; (8021e54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8021d98:	f004 f922 	bl	8025fe0 <__assert_func>
 8021d9c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021da0:	9400      	str	r4, [sp, #0]
 8021da2:	e7b8      	b.n	8021d16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8021da4:	46b2      	mov	sl, r6
 8021da6:	46a8      	mov	r8, r5
 8021da8:	46a6      	mov	lr, r4
 8021daa:	9400      	str	r4, [sp, #0]
 8021dac:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021db0:	e7be      	b.n	8021d30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021db2:	46b2      	mov	sl, r6
 8021db4:	46a8      	mov	r8, r5
 8021db6:	46a6      	mov	lr, r4
 8021db8:	e7ba      	b.n	8021d30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021dba:	46b1      	mov	r9, r6
 8021dbc:	462a      	mov	r2, r5
 8021dbe:	4627      	mov	r7, r4
 8021dc0:	e7cf      	b.n	8021d62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8021dc2:	46b1      	mov	r9, r6
 8021dc4:	462a      	mov	r2, r5
 8021dc6:	4627      	mov	r7, r4
 8021dc8:	e7dc      	b.n	8021d84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021dca:	280f      	cmp	r0, #15
 8021dcc:	d8df      	bhi.n	8021d8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021dce:	46b1      	mov	r9, r6
 8021dd0:	462a      	mov	r2, r5
 8021dd2:	4627      	mov	r7, r4
 8021dd4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8021dd8:	b280      	uxth	r0, r0
 8021dda:	fb00 f30b 	mul.w	r3, r0, fp
 8021dde:	0100      	lsls	r0, r0, #4
 8021de0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8021de4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8021de8:	1ac0      	subs	r0, r0, r3
 8021dea:	fa1f fb8b 	uxth.w	fp, fp
 8021dee:	b280      	uxth	r0, r0
 8021df0:	ebac 0c0b 	sub.w	ip, ip, fp
 8021df4:	9003      	str	r0, [sp, #12]
 8021df6:	fa1f fc8c 	uxth.w	ip, ip
 8021dfa:	fb00 fe0e 	mul.w	lr, r0, lr
 8021dfe:	9800      	ldr	r0, [sp, #0]
 8021e00:	fb0c ee00 	mla	lr, ip, r0, lr
 8021e04:	9803      	ldr	r0, [sp, #12]
 8021e06:	fb00 f808 	mul.w	r8, r0, r8
 8021e0a:	9801      	ldr	r0, [sp, #4]
 8021e0c:	fb0b ee07 	mla	lr, fp, r7, lr
 8021e10:	fb0c 8800 	mla	r8, ip, r0, r8
 8021e14:	fb03 ee04 	mla	lr, r3, r4, lr
 8021e18:	fb0b 8202 	mla	r2, fp, r2, r8
 8021e1c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021e20:	fb03 2505 	mla	r5, r3, r5, r2
 8021e24:	9a03      	ldr	r2, [sp, #12]
 8021e26:	f881 e000 	strb.w	lr, [r1]
 8021e2a:	fb02 f00a 	mul.w	r0, r2, sl
 8021e2e:	9a02      	ldr	r2, [sp, #8]
 8021e30:	122d      	asrs	r5, r5, #8
 8021e32:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021e36:	704d      	strb	r5, [r1, #1]
 8021e38:	fb0b c909 	mla	r9, fp, r9, ip
 8021e3c:	fb03 9606 	mla	r6, r3, r6, r9
 8021e40:	1236      	asrs	r6, r6, #8
 8021e42:	708e      	strb	r6, [r1, #2]
 8021e44:	b005      	add	sp, #20
 8021e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e4a:	bf00      	nop
 8021e4c:	0802e05f 	.word	0x0802e05f
 8021e50:	0802e5c7 	.word	0x0802e5c7
 8021e54:	0802e128 	.word	0x0802e128

08021e58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e5c:	ed2d 8b08 	vpush	{d8-d11}
 8021e60:	b09b      	sub	sp, #108	; 0x6c
 8021e62:	eeb0 aa40 	vmov.f32	s20, s0
 8021e66:	eef0 9a60 	vmov.f32	s19, s1
 8021e6a:	920b      	str	r2, [sp, #44]	; 0x2c
 8021e6c:	eeb0 9a41 	vmov.f32	s18, s2
 8021e70:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021e72:	eeb0 8a62 	vmov.f32	s16, s5
 8021e76:	9019      	str	r0, [sp, #100]	; 0x64
 8021e78:	eef0 8a43 	vmov.f32	s17, s6
 8021e7c:	6850      	ldr	r0, [r2, #4]
 8021e7e:	eef0 ba44 	vmov.f32	s23, s8
 8021e82:	9109      	str	r1, [sp, #36]	; 0x24
 8021e84:	eeb0 ba64 	vmov.f32	s22, s9
 8021e88:	9306      	str	r3, [sp, #24]
 8021e8a:	eef0 aa45 	vmov.f32	s21, s10
 8021e8e:	6812      	ldr	r2, [r2, #0]
 8021e90:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8021e94:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8021e98:	fb00 1303 	mla	r3, r0, r3, r1
 8021e9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ea0:	18d3      	adds	r3, r2, r3
 8021ea2:	9307      	str	r3, [sp, #28]
 8021ea4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	9308      	str	r3, [sp, #32]
 8021eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	dc03      	bgt.n	8021eb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	f340 81ab 	ble.w	802220e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8021eb8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021eba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021ebe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021ec2:	1e48      	subs	r0, r1, #1
 8021ec4:	1e55      	subs	r5, r2, #1
 8021ec6:	9b06      	ldr	r3, [sp, #24]
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	f340 80b1 	ble.w	8022030 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021ece:	ea5f 462b 	movs.w	r6, fp, asr #16
 8021ed2:	ea4f 4324 	mov.w	r3, r4, asr #16
 8021ed6:	d406      	bmi.n	8021ee6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021ed8:	4286      	cmp	r6, r0
 8021eda:	da04      	bge.n	8021ee6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021edc:	2b00      	cmp	r3, #0
 8021ede:	db02      	blt.n	8021ee6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021ee0:	42ab      	cmp	r3, r5
 8021ee2:	f2c0 80a6 	blt.w	8022032 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8021ee6:	3601      	adds	r6, #1
 8021ee8:	f100 8097 	bmi.w	802201a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021eec:	42b1      	cmp	r1, r6
 8021eee:	f2c0 8094 	blt.w	802201a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021ef2:	3301      	adds	r3, #1
 8021ef4:	f100 8091 	bmi.w	802201a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021ef8:	429a      	cmp	r2, r3
 8021efa:	f2c0 808e 	blt.w	802201a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021efe:	9b06      	ldr	r3, [sp, #24]
 8021f00:	9e07      	ldr	r6, [sp, #28]
 8021f02:	930a      	str	r3, [sp, #40]	; 0x28
 8021f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	f340 80b0 	ble.w	802206c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021f0c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8021f0e:	1425      	asrs	r5, r4, #16
 8021f10:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021f12:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021f16:	68c7      	ldr	r7, [r0, #12]
 8021f18:	ea5f 402b 	movs.w	r0, fp, asr #16
 8021f1c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021f20:	689b      	ldr	r3, [r3, #8]
 8021f22:	f100 80ea 	bmi.w	80220fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021f26:	f103 3cff 	add.w	ip, r3, #4294967295
 8021f2a:	4560      	cmp	r0, ip
 8021f2c:	f280 80e5 	bge.w	80220fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021f30:	2d00      	cmp	r5, #0
 8021f32:	f2c0 80e2 	blt.w	80220fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021f36:	f107 3cff 	add.w	ip, r7, #4294967295
 8021f3a:	4565      	cmp	r5, ip
 8021f3c:	f280 80dd 	bge.w	80220fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021f40:	b21b      	sxth	r3, r3
 8021f42:	fb05 0003 	mla	r0, r5, r3, r0
 8021f46:	9d08      	ldr	r5, [sp, #32]
 8021f48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021f4c:	182f      	adds	r7, r5, r0
 8021f4e:	5c2d      	ldrb	r5, [r5, r0]
 8021f50:	7878      	ldrb	r0, [r7, #1]
 8021f52:	f897 e002 	ldrb.w	lr, [r7, #2]
 8021f56:	900c      	str	r0, [sp, #48]	; 0x30
 8021f58:	f897 9003 	ldrb.w	r9, [r7, #3]
 8021f5c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8021f60:	f897 a005 	ldrb.w	sl, [r7, #5]
 8021f64:	b1c9      	cbz	r1, 8021f9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021f66:	f04f 0c03 	mov.w	ip, #3
 8021f6a:	f06f 0004 	mvn.w	r0, #4
 8021f6e:	3705      	adds	r7, #5
 8021f70:	fb13 030c 	smlabb	r3, r3, ip, r0
 8021f74:	eb07 0c03 	add.w	ip, r7, r3
 8021f78:	5cfb      	ldrb	r3, [r7, r3]
 8021f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8021f7c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021f80:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f82:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8021f86:	9311      	str	r3, [sp, #68]	; 0x44
 8021f88:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8021f8e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8021f92:	9310      	str	r3, [sp, #64]	; 0x40
 8021f94:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8021f98:	9312      	str	r3, [sp, #72]	; 0x48
 8021f9a:	b292      	uxth	r2, r2
 8021f9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021f9e:	b289      	uxth	r1, r1
 8021fa0:	fb02 f301 	mul.w	r3, r2, r1
 8021fa4:	0112      	lsls	r2, r2, #4
 8021fa6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021faa:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021fae:	1ad2      	subs	r2, r2, r3
 8021fb0:	b289      	uxth	r1, r1
 8021fb2:	b292      	uxth	r2, r2
 8021fb4:	1a7f      	subs	r7, r7, r1
 8021fb6:	fb02 f909 	mul.w	r9, r2, r9
 8021fba:	b2bf      	uxth	r7, r7
 8021fbc:	fb02 f808 	mul.w	r8, r2, r8
 8021fc0:	fb02 fa0a 	mul.w	sl, r2, sl
 8021fc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021fc6:	fb07 9905 	mla	r9, r7, r5, r9
 8021fca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021fcc:	fb07 8800 	mla	r8, r7, r0, r8
 8021fd0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021fd2:	fb07 aa0e 	mla	sl, r7, lr, sl
 8021fd6:	fb01 9905 	mla	r9, r1, r5, r9
 8021fda:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021fdc:	fb01 8800 	mla	r8, r1, r0, r8
 8021fe0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021fe2:	fb01 a102 	mla	r1, r1, r2, sl
 8021fe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021fe8:	fb03 9905 	mla	r9, r3, r5, r9
 8021fec:	fb03 8800 	mla	r8, r3, r0, r8
 8021ff0:	fb03 1302 	mla	r3, r3, r2, r1
 8021ff4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021ff8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021ffc:	121b      	asrs	r3, r3, #8
 8021ffe:	f886 9000 	strb.w	r9, [r6]
 8022002:	f886 8001 	strb.w	r8, [r6, #1]
 8022006:	70b3      	strb	r3, [r6, #2]
 8022008:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802200a:	3603      	adds	r6, #3
 802200c:	449b      	add	fp, r3
 802200e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022010:	441c      	add	r4, r3
 8022012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022014:	3b01      	subs	r3, #1
 8022016:	930a      	str	r3, [sp, #40]	; 0x28
 8022018:	e774      	b.n	8021f04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802201a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802201c:	449b      	add	fp, r3
 802201e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022020:	441c      	add	r4, r3
 8022022:	9b06      	ldr	r3, [sp, #24]
 8022024:	3b01      	subs	r3, #1
 8022026:	9306      	str	r3, [sp, #24]
 8022028:	9b07      	ldr	r3, [sp, #28]
 802202a:	3303      	adds	r3, #3
 802202c:	9307      	str	r3, [sp, #28]
 802202e:	e74a      	b.n	8021ec6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022030:	d024      	beq.n	802207c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022032:	9b06      	ldr	r3, [sp, #24]
 8022034:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8022036:	3b01      	subs	r3, #1
 8022038:	fb00 b003 	mla	r0, r0, r3, fp
 802203c:	1400      	asrs	r0, r0, #16
 802203e:	f53f af5e 	bmi.w	8021efe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022042:	3901      	subs	r1, #1
 8022044:	4288      	cmp	r0, r1
 8022046:	f6bf af5a 	bge.w	8021efe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802204a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802204c:	fb01 4303 	mla	r3, r1, r3, r4
 8022050:	141b      	asrs	r3, r3, #16
 8022052:	f53f af54 	bmi.w	8021efe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022056:	3a01      	subs	r2, #1
 8022058:	4293      	cmp	r3, r2
 802205a:	f6bf af50 	bge.w	8021efe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802205e:	9b07      	ldr	r3, [sp, #28]
 8022060:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022064:	1cde      	adds	r6, r3, #3
 8022066:	f1be 0f00 	cmp.w	lr, #0
 802206a:	dc5f      	bgt.n	802212c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802206c:	9b06      	ldr	r3, [sp, #24]
 802206e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022072:	9b07      	ldr	r3, [sp, #28]
 8022074:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022078:	4423      	add	r3, r4
 802207a:	9307      	str	r3, [sp, #28]
 802207c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802207e:	2b00      	cmp	r3, #0
 8022080:	f340 80c5 	ble.w	802220e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8022084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022088:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802208a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802208e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022092:	eef0 6a48 	vmov.f32	s13, s16
 8022096:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802209a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802209e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80220a2:	ee16 ba90 	vmov	fp, s13
 80220a6:	eef0 6a68 	vmov.f32	s13, s17
 80220aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80220ae:	ee16 4a90 	vmov	r4, s13
 80220b2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80220b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80220ba:	ee37 8a48 	vsub.f32	s16, s14, s16
 80220be:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80220c2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80220c6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80220ca:	ee18 2a10 	vmov	r2, s16
 80220ce:	eeb0 8a47 	vmov.f32	s16, s14
 80220d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80220d6:	ee18 2a90 	vmov	r2, s17
 80220da:	932f      	str	r3, [sp, #188]	; 0xbc
 80220dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80220de:	eef0 8a67 	vmov.f32	s17, s15
 80220e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80220e6:	9330      	str	r3, [sp, #192]	; 0xc0
 80220e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80220ec:	3b01      	subs	r3, #1
 80220ee:	9309      	str	r3, [sp, #36]	; 0x24
 80220f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80220f2:	bf08      	it	eq
 80220f4:	4613      	moveq	r3, r2
 80220f6:	9306      	str	r3, [sp, #24]
 80220f8:	e6d7      	b.n	8021eaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80220fa:	f110 0c01 	adds.w	ip, r0, #1
 80220fe:	d483      	bmi.n	8022008 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022100:	4563      	cmp	r3, ip
 8022102:	db81      	blt.n	8022008 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022104:	f115 0c01 	adds.w	ip, r5, #1
 8022108:	f53f af7e 	bmi.w	8022008 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802210c:	4567      	cmp	r7, ip
 802210e:	f6ff af7b 	blt.w	8022008 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022112:	b23f      	sxth	r7, r7
 8022114:	b21b      	sxth	r3, r3
 8022116:	9700      	str	r7, [sp, #0]
 8022118:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802211c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8022120:	9a08      	ldr	r2, [sp, #32]
 8022122:	4631      	mov	r1, r6
 8022124:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022126:	f7ff fdcf 	bl	8021cc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802212a:	e76d      	b.n	8022008 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802212c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802212e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022132:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022136:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802213a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802213e:	1421      	asrs	r1, r4, #16
 8022140:	930a      	str	r3, [sp, #40]	; 0x28
 8022142:	fb0c 0101 	mla	r1, ip, r1, r0
 8022146:	9808      	ldr	r0, [sp, #32]
 8022148:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802214c:	1845      	adds	r5, r0, r1
 802214e:	5c40      	ldrb	r0, [r0, r1]
 8022150:	796f      	ldrb	r7, [r5, #5]
 8022152:	7869      	ldrb	r1, [r5, #1]
 8022154:	f895 8002 	ldrb.w	r8, [r5, #2]
 8022158:	f895 a003 	ldrb.w	sl, [r5, #3]
 802215c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022160:	970c      	str	r7, [sp, #48]	; 0x30
 8022162:	b1a2      	cbz	r2, 802218e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8022164:	2703      	movs	r7, #3
 8022166:	f06f 0304 	mvn.w	r3, #4
 802216a:	3505      	adds	r5, #5
 802216c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022170:	eb05 070c 	add.w	r7, r5, ip
 8022174:	f815 500c 	ldrb.w	r5, [r5, ip]
 8022178:	9513      	str	r5, [sp, #76]	; 0x4c
 802217a:	787d      	ldrb	r5, [r7, #1]
 802217c:	9515      	str	r5, [sp, #84]	; 0x54
 802217e:	78bd      	ldrb	r5, [r7, #2]
 8022180:	9517      	str	r5, [sp, #92]	; 0x5c
 8022182:	78fd      	ldrb	r5, [r7, #3]
 8022184:	9514      	str	r5, [sp, #80]	; 0x50
 8022186:	793d      	ldrb	r5, [r7, #4]
 8022188:	9516      	str	r5, [sp, #88]	; 0x58
 802218a:	797d      	ldrb	r5, [r7, #5]
 802218c:	9518      	str	r5, [sp, #96]	; 0x60
 802218e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022192:	b292      	uxth	r2, r2
 8022194:	3603      	adds	r6, #3
 8022196:	f10e 3eff 	add.w	lr, lr, #4294967295
 802219a:	fb03 f502 	mul.w	r5, r3, r2
 802219e:	011b      	lsls	r3, r3, #4
 80221a0:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80221a4:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80221a8:	1b5b      	subs	r3, r3, r5
 80221aa:	b292      	uxth	r2, r2
 80221ac:	b29b      	uxth	r3, r3
 80221ae:	1abf      	subs	r7, r7, r2
 80221b0:	fb03 f909 	mul.w	r9, r3, r9
 80221b4:	b2bf      	uxth	r7, r7
 80221b6:	fb03 fa0a 	mul.w	sl, r3, sl
 80221ba:	fb07 9901 	mla	r9, r7, r1, r9
 80221be:	9915      	ldr	r1, [sp, #84]	; 0x54
 80221c0:	fb07 aa00 	mla	sl, r7, r0, sl
 80221c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80221c6:	fb02 9901 	mla	r9, r2, r1, r9
 80221ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80221cc:	fb02 aa00 	mla	sl, r2, r0, sl
 80221d0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80221d2:	fb05 9901 	mla	r9, r5, r1, r9
 80221d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80221d8:	fb05 aa00 	mla	sl, r5, r0, sl
 80221dc:	434b      	muls	r3, r1
 80221de:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80221e0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80221e4:	fb07 3308 	mla	r3, r7, r8, r3
 80221e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80221ec:	f806 ac06 	strb.w	sl, [r6, #-6]
 80221f0:	fb02 3201 	mla	r2, r2, r1, r3
 80221f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80221f6:	f806 9c05 	strb.w	r9, [r6, #-5]
 80221fa:	fb05 2503 	mla	r5, r5, r3, r2
 80221fe:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022200:	122d      	asrs	r5, r5, #8
 8022202:	449b      	add	fp, r3
 8022204:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022206:	f806 5c04 	strb.w	r5, [r6, #-4]
 802220a:	441c      	add	r4, r3
 802220c:	e72b      	b.n	8022066 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802220e:	b01b      	add	sp, #108	; 0x6c
 8022210:	ecbd 8b08 	vpop	{d8-d11}
 8022214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022218 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802221c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8022220:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022224:	fb04 5603 	mla	r6, r4, r3, r5
 8022228:	2c00      	cmp	r4, #0
 802222a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802222e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8022232:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8022236:	db36      	blt.n	80222a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8022238:	45a6      	cmp	lr, r4
 802223a:	dd34      	ble.n	80222a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 802223c:	2d00      	cmp	r5, #0
 802223e:	db30      	blt.n	80222a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022240:	42ab      	cmp	r3, r5
 8022242:	dd2e      	ble.n	80222a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022244:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022248:	1c6e      	adds	r6, r5, #1
 802224a:	d42f      	bmi.n	80222ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 802224c:	42b3      	cmp	r3, r6
 802224e:	dd2d      	ble.n	80222ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8022250:	b370      	cbz	r0, 80222b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8022252:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022256:	3401      	adds	r4, #1
 8022258:	d42e      	bmi.n	80222b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 802225a:	45a6      	cmp	lr, r4
 802225c:	dd2c      	ble.n	80222b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 802225e:	b377      	cbz	r7, 80222be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8022260:	2d00      	cmp	r5, #0
 8022262:	db27      	blt.n	80222b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022264:	42ab      	cmp	r3, r5
 8022266:	dd25      	ble.n	80222b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022268:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802226c:	3501      	adds	r5, #1
 802226e:	d429      	bmi.n	80222c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022270:	42ab      	cmp	r3, r5
 8022272:	dd27      	ble.n	80222c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022274:	b340      	cbz	r0, 80222c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8022276:	3301      	adds	r3, #1
 8022278:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 802227c:	280f      	cmp	r0, #15
 802227e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022282:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022286:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802228a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802228e:	d801      	bhi.n	8022294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8022290:	2f0f      	cmp	r7, #15
 8022292:	d91b      	bls.n	80222cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8022294:	4b89      	ldr	r3, [pc, #548]	; (80224bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8022296:	f240 1157 	movw	r1, #343	; 0x157
 802229a:	4a89      	ldr	r2, [pc, #548]	; (80224c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802229c:	4889      	ldr	r0, [pc, #548]	; (80224c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 802229e:	f003 fe9f 	bl	8025fe0 <__assert_func>
 80222a2:	2200      	movs	r2, #0
 80222a4:	e7d0      	b.n	8022248 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 80222a6:	2600      	movs	r6, #0
 80222a8:	4632      	mov	r2, r6
 80222aa:	e7d4      	b.n	8022256 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80222ac:	2600      	movs	r6, #0
 80222ae:	e7d2      	b.n	8022256 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80222b0:	4606      	mov	r6, r0
 80222b2:	e7d0      	b.n	8022256 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80222b4:	2400      	movs	r4, #0
 80222b6:	e7d9      	b.n	802226c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 80222b8:	2300      	movs	r3, #0
 80222ba:	461c      	mov	r4, r3
 80222bc:	e7de      	b.n	802227c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80222be:	463b      	mov	r3, r7
 80222c0:	463c      	mov	r4, r7
 80222c2:	e7db      	b.n	802227c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80222c4:	2300      	movs	r3, #0
 80222c6:	e7d9      	b.n	802227c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80222c8:	4603      	mov	r3, r0
 80222ca:	e7d7      	b.n	802227c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80222cc:	b280      	uxth	r0, r0
 80222ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80222d2:	b2bf      	uxth	r7, r7
 80222d4:	fb00 fe07 	mul.w	lr, r0, r7
 80222d8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80222dc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80222e0:	eba0 0c0e 	sub.w	ip, r0, lr
 80222e4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80222e8:	b2bf      	uxth	r7, r7
 80222ea:	fa1f fc8c 	uxth.w	ip, ip
 80222ee:	eba5 0507 	sub.w	r5, r5, r7
 80222f2:	fb0c f00a 	mul.w	r0, ip, sl
 80222f6:	b2ad      	uxth	r5, r5
 80222f8:	fb05 000b 	mla	r0, r5, fp, r0
 80222fc:	fb07 0009 	mla	r0, r7, r9, r0
 8022300:	fb0e 0008 	mla	r0, lr, r8, r0
 8022304:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022308:	9001      	str	r0, [sp, #4]
 802230a:	d018      	beq.n	802233e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 802230c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022310:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022314:	fb0b f000 	mul.w	r0, fp, r0
 8022318:	fb0b fb02 	mul.w	fp, fp, r2
 802231c:	0a02      	lsrs	r2, r0, #8
 802231e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022322:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022326:	4402      	add	r2, r0
 8022328:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802232c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022330:	0a12      	lsrs	r2, r2, #8
 8022332:	0a00      	lsrs	r0, r0, #8
 8022334:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022338:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802233c:	4302      	orrs	r2, r0
 802233e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022342:	d01a      	beq.n	802237a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8022344:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022348:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802234c:	fb0a f000 	mul.w	r0, sl, r0
 8022350:	fb0a fa06 	mul.w	sl, sl, r6
 8022354:	0a06      	lsrs	r6, r0, #8
 8022356:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802235a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802235e:	4406      	add	r6, r0
 8022360:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022364:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022368:	0a36      	lsrs	r6, r6, #8
 802236a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802236e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022372:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022376:	ea46 060a 	orr.w	r6, r6, sl
 802237a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802237e:	d01b      	beq.n	80223b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8022380:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022384:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022388:	fb09 fa0a 	mul.w	sl, r9, sl
 802238c:	fb09 f004 	mul.w	r0, r9, r4
 8022390:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022394:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022398:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802239c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80223a0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80223a4:	4454      	add	r4, sl
 80223a6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80223aa:	0a24      	lsrs	r4, r4, #8
 80223ac:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80223b0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80223b4:	ea44 0409 	orr.w	r4, r4, r9
 80223b8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80223bc:	d01b      	beq.n	80223f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 80223be:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80223c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223c6:	fb08 f909 	mul.w	r9, r8, r9
 80223ca:	fb08 f003 	mul.w	r0, r8, r3
 80223ce:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80223d2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80223d6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80223da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80223de:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80223e2:	444b      	add	r3, r9
 80223e4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80223e8:	0a1b      	lsrs	r3, r3, #8
 80223ea:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80223ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80223f2:	ea43 0308 	orr.w	r3, r3, r8
 80223f6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80223fa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80223fe:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8022402:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022406:	fb0c f000 	mul.w	r0, ip, r0
 802240a:	fb0c f606 	mul.w	r6, ip, r6
 802240e:	fb05 0808 	mla	r8, r5, r8, r0
 8022412:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022416:	fb05 6502 	mla	r5, r5, r2, r6
 802241a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802241e:	fb07 8800 	mla	r8, r7, r0, r8
 8022422:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022426:	fb07 5704 	mla	r7, r7, r4, r5
 802242a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802242e:	fb0e 8000 	mla	r0, lr, r0, r8
 8022432:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022436:	9b01      	ldr	r3, [sp, #4]
 8022438:	0a00      	lsrs	r0, r0, #8
 802243a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802243e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022442:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022446:	ea40 0e0e 	orr.w	lr, r0, lr
 802244a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802244e:	b280      	uxth	r0, r0
 8022450:	fa5f f48e 	uxtb.w	r4, lr
 8022454:	4343      	muls	r3, r0
 8022456:	fb14 f400 	smulbb	r4, r4, r0
 802245a:	1c5a      	adds	r2, r3, #1
 802245c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022460:	780b      	ldrb	r3, [r1, #0]
 8022462:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022466:	b2d2      	uxtb	r2, r2
 8022468:	fb03 4302 	mla	r3, r3, r2, r4
 802246c:	b29b      	uxth	r3, r3
 802246e:	1c5c      	adds	r4, r3, #1
 8022470:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022474:	784c      	ldrb	r4, [r1, #1]
 8022476:	fb14 f402 	smulbb	r4, r4, r2
 802247a:	121b      	asrs	r3, r3, #8
 802247c:	700b      	strb	r3, [r1, #0]
 802247e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022482:	fb03 4300 	mla	r3, r3, r0, r4
 8022486:	b29b      	uxth	r3, r3
 8022488:	1c5c      	adds	r4, r3, #1
 802248a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802248e:	121b      	asrs	r3, r3, #8
 8022490:	704b      	strb	r3, [r1, #1]
 8022492:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8022496:	f891 e002 	ldrb.w	lr, [r1, #2]
 802249a:	fb1e fe02 	smulbb	lr, lr, r2
 802249e:	fb03 ee00 	mla	lr, r3, r0, lr
 80224a2:	fa1f fe8e 	uxth.w	lr, lr
 80224a6:	f10e 0301 	add.w	r3, lr, #1
 80224aa:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80224ae:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80224b2:	f881 e002 	strb.w	lr, [r1, #2]
 80224b6:	b003      	add	sp, #12
 80224b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224bc:	0802e05f 	.word	0x0802e05f
 80224c0:	0802e5c7 	.word	0x0802e5c7
 80224c4:	0802e128 	.word	0x0802e128

080224c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224cc:	ed2d 8b08 	vpush	{d8-d11}
 80224d0:	b09d      	sub	sp, #116	; 0x74
 80224d2:	eeb0 aa40 	vmov.f32	s20, s0
 80224d6:	eef0 9a60 	vmov.f32	s19, s1
 80224da:	9219      	str	r2, [sp, #100]	; 0x64
 80224dc:	eeb0 9a41 	vmov.f32	s18, s2
 80224e0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80224e2:	eeb0 8a62 	vmov.f32	s16, s5
 80224e6:	9307      	str	r3, [sp, #28]
 80224e8:	eef0 8a43 	vmov.f32	s17, s6
 80224ec:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80224f0:	eef0 ba44 	vmov.f32	s23, s8
 80224f4:	901b      	str	r0, [sp, #108]	; 0x6c
 80224f6:	eeb0 ba64 	vmov.f32	s22, s9
 80224fa:	931a      	str	r3, [sp, #104]	; 0x68
 80224fc:	eef0 aa45 	vmov.f32	s21, s10
 8022500:	6850      	ldr	r0, [r2, #4]
 8022502:	9117      	str	r1, [sp, #92]	; 0x5c
 8022504:	6812      	ldr	r2, [r2, #0]
 8022506:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 802250a:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 802250e:	fb00 1303 	mla	r3, r0, r3, r1
 8022512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022516:	18d3      	adds	r3, r2, r3
 8022518:	930a      	str	r3, [sp, #40]	; 0x28
 802251a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802251c:	681b      	ldr	r3, [r3, #0]
 802251e:	9310      	str	r3, [sp, #64]	; 0x40
 8022520:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022524:	930b      	str	r3, [sp, #44]	; 0x2c
 8022526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022528:	2b00      	cmp	r3, #0
 802252a:	dc03      	bgt.n	8022534 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802252c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802252e:	2b00      	cmp	r3, #0
 8022530:	f340 8368 	ble.w	8022c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8022534:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022536:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802253a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802253e:	1e48      	subs	r0, r1, #1
 8022540:	1e57      	subs	r7, r2, #1
 8022542:	9b07      	ldr	r3, [sp, #28]
 8022544:	2b00      	cmp	r3, #0
 8022546:	f340 8187 	ble.w	8022858 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802254a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802254e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022552:	d406      	bmi.n	8022562 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022554:	4584      	cmp	ip, r0
 8022556:	da04      	bge.n	8022562 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022558:	2b00      	cmp	r3, #0
 802255a:	db02      	blt.n	8022562 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802255c:	42bb      	cmp	r3, r7
 802255e:	f2c0 817c 	blt.w	802285a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022562:	f11c 0c01 	adds.w	ip, ip, #1
 8022566:	f100 816c 	bmi.w	8022842 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802256a:	4561      	cmp	r1, ip
 802256c:	f2c0 8169 	blt.w	8022842 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022570:	3301      	adds	r3, #1
 8022572:	f100 8166 	bmi.w	8022842 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022576:	429a      	cmp	r2, r3
 8022578:	f2c0 8163 	blt.w	8022842 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802257c:	9b07      	ldr	r3, [sp, #28]
 802257e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022580:	9318      	str	r3, [sp, #96]	; 0x60
 8022582:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022584:	2b00      	cmp	r3, #0
 8022586:	f340 8186 	ble.w	8022896 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802258a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802258c:	142a      	asrs	r2, r5, #16
 802258e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022592:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022596:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802259a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802259e:	f100 81cb 	bmi.w	8022938 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80225a2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80225a6:	4542      	cmp	r2, r8
 80225a8:	f280 81c6 	bge.w	8022938 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80225ac:	2800      	cmp	r0, #0
 80225ae:	f2c0 81c3 	blt.w	8022938 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80225b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80225b6:	4540      	cmp	r0, r8
 80225b8:	f280 81be 	bge.w	8022938 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80225bc:	fa0f f38e 	sxth.w	r3, lr
 80225c0:	fb00 2203 	mla	r2, r0, r3, r2
 80225c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80225c6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80225ca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80225ce:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80225d2:	2900      	cmp	r1, #0
 80225d4:	f000 81a6 	beq.w	8022924 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 80225d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80225dc:	900c      	str	r0, [sp, #48]	; 0x30
 80225de:	0e00      	lsrs	r0, r0, #24
 80225e0:	9013      	str	r0, [sp, #76]	; 0x4c
 80225e2:	f1bc 0f00 	cmp.w	ip, #0
 80225e6:	d00f      	beq.n	8022608 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80225e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80225ec:	3b01      	subs	r3, #1
 80225ee:	009b      	lsls	r3, r3, #2
 80225f0:	3304      	adds	r3, #4
 80225f2:	eb08 0003 	add.w	r0, r8, r3
 80225f6:	f858 3003 	ldr.w	r3, [r8, r3]
 80225fa:	9308      	str	r3, [sp, #32]
 80225fc:	0e1b      	lsrs	r3, r3, #24
 80225fe:	9311      	str	r3, [sp, #68]	; 0x44
 8022600:	6843      	ldr	r3, [r0, #4]
 8022602:	930d      	str	r3, [sp, #52]	; 0x34
 8022604:	0e1b      	lsrs	r3, r3, #24
 8022606:	9314      	str	r3, [sp, #80]	; 0x50
 8022608:	b289      	uxth	r1, r1
 802260a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802260c:	fa1f fc8c 	uxth.w	ip, ip
 8022610:	0108      	lsls	r0, r1, #4
 8022612:	fb01 f90c 	mul.w	r9, r1, ip
 8022616:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802261a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 802261e:	eba0 0809 	sub.w	r8, r0, r9
 8022622:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022624:	fa1f f18c 	uxth.w	r1, ip
 8022628:	fa1f f888 	uxth.w	r8, r8
 802262c:	1a5b      	subs	r3, r3, r1
 802262e:	fb08 f000 	mul.w	r0, r8, r0
 8022632:	b29b      	uxth	r3, r3
 8022634:	fb03 000e 	mla	r0, r3, lr, r0
 8022638:	fb01 0004 	mla	r0, r1, r4, r0
 802263c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802263e:	fb09 0004 	mla	r0, r9, r4, r0
 8022642:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022646:	2800      	cmp	r0, #0
 8022648:	f000 80f2 	beq.w	8022830 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802264c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022650:	d01b      	beq.n	802268a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022652:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022656:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802265a:	fb0e fa0a 	mul.w	sl, lr, sl
 802265e:	fb0e fe02 	mul.w	lr, lr, r2
 8022662:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022666:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802266a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802266e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022672:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022676:	4452      	add	r2, sl
 8022678:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802267c:	0a12      	lsrs	r2, r2, #8
 802267e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022682:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022686:	ea42 020c 	orr.w	r2, r2, ip
 802268a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802268c:	2cff      	cmp	r4, #255	; 0xff
 802268e:	d021      	beq.n	80226d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022690:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022692:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022696:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022698:	fb04 fb0b 	mul.w	fp, r4, fp
 802269c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802269e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80226a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80226a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80226a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80226ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80226b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80226b4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80226b8:	44de      	add	lr, fp
 80226ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80226be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80226c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80226c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80226ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80226ce:	ea4e 040a 	orr.w	r4, lr, sl
 80226d2:	940c      	str	r4, [sp, #48]	; 0x30
 80226d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80226d6:	2cff      	cmp	r4, #255	; 0xff
 80226d8:	d021      	beq.n	802271e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80226da:	9c08      	ldr	r4, [sp, #32]
 80226dc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80226e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80226e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80226e6:	9c08      	ldr	r4, [sp, #32]
 80226e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80226ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80226ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80226f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80226f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80226fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80226fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022702:	44de      	add	lr, fp
 8022704:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022708:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802270c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022710:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022714:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022718:	ea4e 040a 	orr.w	r4, lr, sl
 802271c:	9408      	str	r4, [sp, #32]
 802271e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022720:	2cff      	cmp	r4, #255	; 0xff
 8022722:	d021      	beq.n	8022768 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022724:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022726:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802272a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802272c:	fb04 fb0b 	mul.w	fp, r4, fp
 8022730:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022732:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022736:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022738:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802273c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022740:	fb04 fa0a 	mul.w	sl, r4, sl
 8022744:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022748:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802274c:	44de      	add	lr, fp
 802274e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022752:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022756:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802275a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802275e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022762:	ea4e 040a 	orr.w	r4, lr, sl
 8022766:	940d      	str	r4, [sp, #52]	; 0x34
 8022768:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802276a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802276e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022772:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022776:	9c08      	ldr	r4, [sp, #32]
 8022778:	fb08 fc0c 	mul.w	ip, r8, ip
 802277c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8022780:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022784:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022786:	fb01 cc0e 	mla	ip, r1, lr, ip
 802278a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802278e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022790:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022794:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022798:	fb08 f80e 	mul.w	r8, r8, lr
 802279c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227a0:	fb03 8202 	mla	r2, r3, r2, r8
 80227a4:	9b08      	ldr	r3, [sp, #32]
 80227a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80227aa:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80227ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227b0:	fb01 220a 	mla	r2, r1, sl, r2
 80227b4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80227b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80227ba:	fb09 2901 	mla	r9, r9, r1, r2
 80227be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80227c0:	4343      	muls	r3, r0
 80227c2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80227c6:	1c58      	adds	r0, r3, #1
 80227c8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80227cc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80227d0:	783b      	ldrb	r3, [r7, #0]
 80227d2:	ea4c 0c09 	orr.w	ip, ip, r9
 80227d6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80227da:	fa5f f28c 	uxtb.w	r2, ip
 80227de:	b2c0      	uxtb	r0, r0
 80227e0:	fb12 f201 	smulbb	r2, r2, r1
 80227e4:	fb03 2300 	mla	r3, r3, r0, r2
 80227e8:	b29b      	uxth	r3, r3
 80227ea:	1c5a      	adds	r2, r3, #1
 80227ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80227f0:	787a      	ldrb	r2, [r7, #1]
 80227f2:	fb12 f200 	smulbb	r2, r2, r0
 80227f6:	121b      	asrs	r3, r3, #8
 80227f8:	703b      	strb	r3, [r7, #0]
 80227fa:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80227fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022802:	fb03 2301 	mla	r3, r3, r1, r2
 8022806:	b29b      	uxth	r3, r3
 8022808:	1c5a      	adds	r2, r3, #1
 802280a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802280e:	121b      	asrs	r3, r3, #8
 8022810:	707b      	strb	r3, [r7, #1]
 8022812:	78bb      	ldrb	r3, [r7, #2]
 8022814:	fb13 f000 	smulbb	r0, r3, r0
 8022818:	fb0c 0c01 	mla	ip, ip, r1, r0
 802281c:	fa1f fc8c 	uxth.w	ip, ip
 8022820:	f10c 0301 	add.w	r3, ip, #1
 8022824:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022828:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802282c:	f887 c002 	strb.w	ip, [r7, #2]
 8022830:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022832:	3703      	adds	r7, #3
 8022834:	441d      	add	r5, r3
 8022836:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022838:	441e      	add	r6, r3
 802283a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802283c:	3b01      	subs	r3, #1
 802283e:	9318      	str	r3, [sp, #96]	; 0x60
 8022840:	e69f      	b.n	8022582 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022842:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022844:	441d      	add	r5, r3
 8022846:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022848:	441e      	add	r6, r3
 802284a:	9b07      	ldr	r3, [sp, #28]
 802284c:	3b01      	subs	r3, #1
 802284e:	9307      	str	r3, [sp, #28]
 8022850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022852:	3303      	adds	r3, #3
 8022854:	930a      	str	r3, [sp, #40]	; 0x28
 8022856:	e674      	b.n	8022542 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022858:	d025      	beq.n	80228a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802285a:	9b07      	ldr	r3, [sp, #28]
 802285c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802285e:	3b01      	subs	r3, #1
 8022860:	fb00 5003 	mla	r0, r0, r3, r5
 8022864:	1400      	asrs	r0, r0, #16
 8022866:	f53f ae89 	bmi.w	802257c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802286a:	3901      	subs	r1, #1
 802286c:	4288      	cmp	r0, r1
 802286e:	f6bf ae85 	bge.w	802257c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022872:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8022874:	fb01 6303 	mla	r3, r1, r3, r6
 8022878:	141b      	asrs	r3, r3, #16
 802287a:	f53f ae7f 	bmi.w	802257c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802287e:	3a01      	subs	r2, #1
 8022880:	4293      	cmp	r3, r2
 8022882:	f6bf ae7b 	bge.w	802257c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022888:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802288c:	f103 0e03 	add.w	lr, r3, #3
 8022890:	f1bb 0f00 	cmp.w	fp, #0
 8022894:	dc6e      	bgt.n	8022974 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8022896:	9b07      	ldr	r3, [sp, #28]
 8022898:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802289c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802289e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80228a2:	4423      	add	r3, r4
 80228a4:	930a      	str	r3, [sp, #40]	; 0x28
 80228a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	f340 81ab 	ble.w	8022c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80228ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80228b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80228b4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80228b8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80228bc:	eef0 6a48 	vmov.f32	s13, s16
 80228c0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80228c4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80228c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228cc:	ee16 5a90 	vmov	r5, s13
 80228d0:	eef0 6a68 	vmov.f32	s13, s17
 80228d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228d8:	ee16 6a90 	vmov	r6, s13
 80228dc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80228e0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80228e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80228e8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80228ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80228f0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80228f4:	ee18 2a10 	vmov	r2, s16
 80228f8:	eeb0 8a47 	vmov.f32	s16, s14
 80228fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022900:	ee18 2a90 	vmov	r2, s17
 8022904:	9331      	str	r3, [sp, #196]	; 0xc4
 8022906:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022908:	eef0 8a67 	vmov.f32	s17, s15
 802290c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022910:	9332      	str	r3, [sp, #200]	; 0xc8
 8022912:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022914:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8022916:	3b01      	subs	r3, #1
 8022918:	9317      	str	r3, [sp, #92]	; 0x5c
 802291a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802291c:	bf08      	it	eq
 802291e:	4613      	moveq	r3, r2
 8022920:	9307      	str	r3, [sp, #28]
 8022922:	e600      	b.n	8022526 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022924:	f1bc 0f00 	cmp.w	ip, #0
 8022928:	f43f ae6e 	beq.w	8022608 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802292c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022930:	9308      	str	r3, [sp, #32]
 8022932:	0e1b      	lsrs	r3, r3, #24
 8022934:	9311      	str	r3, [sp, #68]	; 0x44
 8022936:	e667      	b.n	8022608 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022938:	f112 0801 	adds.w	r8, r2, #1
 802293c:	f53f af78 	bmi.w	8022830 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022940:	45c6      	cmp	lr, r8
 8022942:	f6ff af75 	blt.w	8022830 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022946:	f110 0801 	adds.w	r8, r0, #1
 802294a:	f53f af71 	bmi.w	8022830 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802294e:	4543      	cmp	r3, r8
 8022950:	f6ff af6e 	blt.w	8022830 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022954:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022956:	b21b      	sxth	r3, r3
 8022958:	9201      	str	r2, [sp, #4]
 802295a:	9300      	str	r3, [sp, #0]
 802295c:	fa0f f38e 	sxth.w	r3, lr
 8022960:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022966:	e9cd c404 	strd	ip, r4, [sp, #16]
 802296a:	4639      	mov	r1, r7
 802296c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802296e:	f7ff fc53 	bl	8022218 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8022972:	e75d      	b.n	8022830 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022974:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022976:	142f      	asrs	r7, r5, #16
 8022978:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802297a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802297e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8022982:	1433      	asrs	r3, r6, #16
 8022984:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022988:	fb02 7303 	mla	r3, r2, r3, r7
 802298c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8022990:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022994:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022998:	2900      	cmp	r1, #0
 802299a:	f000 812a 	beq.w	8022bf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 802299e:	687c      	ldr	r4, [r7, #4]
 80229a0:	940e      	str	r4, [sp, #56]	; 0x38
 80229a2:	0e24      	lsrs	r4, r4, #24
 80229a4:	9415      	str	r4, [sp, #84]	; 0x54
 80229a6:	b178      	cbz	r0, 80229c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80229a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80229ac:	3a01      	subs	r2, #1
 80229ae:	0092      	lsls	r2, r2, #2
 80229b0:	3204      	adds	r2, #4
 80229b2:	eb07 0802 	add.w	r8, r7, r2
 80229b6:	58ba      	ldr	r2, [r7, r2]
 80229b8:	9209      	str	r2, [sp, #36]	; 0x24
 80229ba:	0e12      	lsrs	r2, r2, #24
 80229bc:	9212      	str	r2, [sp, #72]	; 0x48
 80229be:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80229c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80229c4:	0e12      	lsrs	r2, r2, #24
 80229c6:	9216      	str	r2, [sp, #88]	; 0x58
 80229c8:	b289      	uxth	r1, r1
 80229ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80229cc:	b280      	uxth	r0, r0
 80229ce:	fb01 f900 	mul.w	r9, r1, r0
 80229d2:	0109      	lsls	r1, r1, #4
 80229d4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80229d8:	eba1 0809 	sub.w	r8, r1, r9
 80229dc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80229e0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80229e2:	b280      	uxth	r0, r0
 80229e4:	fa1f f888 	uxth.w	r8, r8
 80229e8:	1a12      	subs	r2, r2, r0
 80229ea:	fb08 f101 	mul.w	r1, r8, r1
 80229ee:	b292      	uxth	r2, r2
 80229f0:	fb02 110c 	mla	r1, r2, ip, r1
 80229f4:	fb00 1104 	mla	r1, r0, r4, r1
 80229f8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80229fa:	fb09 1104 	mla	r1, r9, r4, r1
 80229fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022a02:	2900      	cmp	r1, #0
 8022a04:	f000 80ec 	beq.w	8022be0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8022a08:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022a0c:	d019      	beq.n	8022a42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 8022a0e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022a12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a16:	fb0c fa0a 	mul.w	sl, ip, sl
 8022a1a:	fb0c fc03 	mul.w	ip, ip, r3
 8022a1e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022a22:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022a26:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022a2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a2e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022a32:	4453      	add	r3, sl
 8022a34:	0a3f      	lsrs	r7, r7, #8
 8022a36:	0a1b      	lsrs	r3, r3, #8
 8022a38:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022a3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a40:	433b      	orrs	r3, r7
 8022a42:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022a44:	2cff      	cmp	r4, #255	; 0xff
 8022a46:	d020      	beq.n	8022a8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8022a48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022a4a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022a4e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022a50:	4367      	muls	r7, r4
 8022a52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022a54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022a58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022a5c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022a5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022a62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a66:	fb04 fa0a 	mul.w	sl, r4, sl
 8022a6a:	44bc      	add	ip, r7
 8022a6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022a70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022a78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022a80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022a84:	ea4c 040a 	orr.w	r4, ip, sl
 8022a88:	940e      	str	r4, [sp, #56]	; 0x38
 8022a8a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022a8c:	2cff      	cmp	r4, #255	; 0xff
 8022a8e:	d020      	beq.n	8022ad2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8022a90:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022a92:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022a96:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022a98:	4367      	muls	r7, r4
 8022a9a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022a9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022aa0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022aa4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022aa6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022aaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022aae:	fb04 fa0a 	mul.w	sl, r4, sl
 8022ab2:	44bc      	add	ip, r7
 8022ab4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022ab8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022abc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022ac0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ac4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ac8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022acc:	ea4c 040a 	orr.w	r4, ip, sl
 8022ad0:	9409      	str	r4, [sp, #36]	; 0x24
 8022ad2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022ad4:	2cff      	cmp	r4, #255	; 0xff
 8022ad6:	d020      	beq.n	8022b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8022ad8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022ada:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022ade:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022ae0:	4367      	muls	r7, r4
 8022ae2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022ae4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022ae8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022aec:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022aee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022af2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022af6:	fb04 fa0a 	mul.w	sl, r4, sl
 8022afa:	44bc      	add	ip, r7
 8022afc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022b00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b04:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022b08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b14:	ea4c 040a 	orr.w	r4, ip, sl
 8022b18:	940f      	str	r4, [sp, #60]	; 0x3c
 8022b1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022b1c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022b20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b24:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022b28:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022b2a:	fb08 f707 	mul.w	r7, r8, r7
 8022b2e:	fb02 770c 	mla	r7, r2, ip, r7
 8022b32:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022b36:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022b38:	fb00 770c 	mla	r7, r0, ip, r7
 8022b3c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022b40:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022b42:	fb09 770c 	mla	r7, r9, ip, r7
 8022b46:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022b4a:	fb08 f80c 	mul.w	r8, r8, ip
 8022b4e:	0a3f      	lsrs	r7, r7, #8
 8022b50:	fb02 8303 	mla	r3, r2, r3, r8
 8022b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022b56:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b5a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022b5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022b60:	fb00 330a 	mla	r3, r0, sl, r3
 8022b64:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022b68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022b6a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022b70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b74:	434b      	muls	r3, r1
 8022b76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022b7a:	1c59      	adds	r1, r3, #1
 8022b7c:	ea47 070c 	orr.w	r7, r7, ip
 8022b80:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022b84:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022b88:	b2fa      	uxtb	r2, r7
 8022b8a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022b8e:	fb12 f200 	smulbb	r2, r2, r0
 8022b92:	b2c9      	uxtb	r1, r1
 8022b94:	fb03 2301 	mla	r3, r3, r1, r2
 8022b98:	b29b      	uxth	r3, r3
 8022b9a:	1c5a      	adds	r2, r3, #1
 8022b9c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022ba0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022ba4:	fb12 f201 	smulbb	r2, r2, r1
 8022ba8:	121b      	asrs	r3, r3, #8
 8022baa:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022bae:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8022bb2:	0c3f      	lsrs	r7, r7, #16
 8022bb4:	fb03 2300 	mla	r3, r3, r0, r2
 8022bb8:	b29b      	uxth	r3, r3
 8022bba:	1c5a      	adds	r2, r3, #1
 8022bbc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022bc0:	121b      	asrs	r3, r3, #8
 8022bc2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022bc6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022bca:	fb13 f101 	smulbb	r1, r3, r1
 8022bce:	fb07 1700 	mla	r7, r7, r0, r1
 8022bd2:	b2bf      	uxth	r7, r7
 8022bd4:	1c79      	adds	r1, r7, #1
 8022bd6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022bda:	123f      	asrs	r7, r7, #8
 8022bdc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022be0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022be2:	f10e 0e03 	add.w	lr, lr, #3
 8022be6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022bea:	441d      	add	r5, r3
 8022bec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022bee:	441e      	add	r6, r3
 8022bf0:	e64e      	b.n	8022890 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8022bf2:	2800      	cmp	r0, #0
 8022bf4:	f43f aee8 	beq.w	80229c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8022bf8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8022bfe:	0e12      	lsrs	r2, r2, #24
 8022c00:	9212      	str	r2, [sp, #72]	; 0x48
 8022c02:	e6e1      	b.n	80229c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8022c04:	b01d      	add	sp, #116	; 0x74
 8022c06:	ecbd 8b08 	vpop	{d8-d11}
 8022c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022c10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8022c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c14:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8022c18:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022c1c:	fb04 5603 	mla	r6, r4, r3, r5
 8022c20:	2c00      	cmp	r4, #0
 8022c22:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8022c26:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8022c2a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8022c2e:	db36      	blt.n	8022c9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8022c30:	45a6      	cmp	lr, r4
 8022c32:	dd34      	ble.n	8022c9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8022c34:	2d00      	cmp	r5, #0
 8022c36:	db30      	blt.n	8022c9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8022c38:	42ab      	cmp	r3, r5
 8022c3a:	dd2e      	ble.n	8022c9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8022c3c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022c40:	1c6e      	adds	r6, r5, #1
 8022c42:	d42f      	bmi.n	8022ca4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8022c44:	42b3      	cmp	r3, r6
 8022c46:	dd2d      	ble.n	8022ca4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8022c48:	b370      	cbz	r0, 8022ca8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 8022c4a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022c4e:	3401      	adds	r4, #1
 8022c50:	d42e      	bmi.n	8022cb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8022c52:	45a6      	cmp	lr, r4
 8022c54:	dd2c      	ble.n	8022cb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8022c56:	b377      	cbz	r7, 8022cb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8022c58:	2d00      	cmp	r5, #0
 8022c5a:	db27      	blt.n	8022cac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8022c5c:	42ab      	cmp	r3, r5
 8022c5e:	dd25      	ble.n	8022cac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8022c60:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022c64:	3501      	adds	r5, #1
 8022c66:	d429      	bmi.n	8022cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8022c68:	42ab      	cmp	r3, r5
 8022c6a:	dd27      	ble.n	8022cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8022c6c:	b340      	cbz	r0, 8022cc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 8022c6e:	3301      	adds	r3, #1
 8022c70:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8022c74:	280f      	cmp	r0, #15
 8022c76:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022c7a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022c7e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022c82:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022c86:	d801      	bhi.n	8022c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8022c88:	2f0f      	cmp	r7, #15
 8022c8a:	d91b      	bls.n	8022cc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 8022c8c:	4b7e      	ldr	r3, [pc, #504]	; (8022e88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 8022c8e:	f240 1157 	movw	r1, #343	; 0x157
 8022c92:	4a7e      	ldr	r2, [pc, #504]	; (8022e8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8022c94:	487e      	ldr	r0, [pc, #504]	; (8022e90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8022c96:	f003 f9a3 	bl	8025fe0 <__assert_func>
 8022c9a:	2200      	movs	r2, #0
 8022c9c:	e7d0      	b.n	8022c40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 8022c9e:	2600      	movs	r6, #0
 8022ca0:	4632      	mov	r2, r6
 8022ca2:	e7d4      	b.n	8022c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022ca4:	2600      	movs	r6, #0
 8022ca6:	e7d2      	b.n	8022c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022ca8:	4606      	mov	r6, r0
 8022caa:	e7d0      	b.n	8022c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022cac:	2400      	movs	r4, #0
 8022cae:	e7d9      	b.n	8022c64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8022cb0:	2300      	movs	r3, #0
 8022cb2:	461c      	mov	r4, r3
 8022cb4:	e7de      	b.n	8022c74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022cb6:	463b      	mov	r3, r7
 8022cb8:	463c      	mov	r4, r7
 8022cba:	e7db      	b.n	8022c74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022cbc:	2300      	movs	r3, #0
 8022cbe:	e7d9      	b.n	8022c74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022cc0:	4603      	mov	r3, r0
 8022cc2:	e7d7      	b.n	8022c74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022cc4:	b280      	uxth	r0, r0
 8022cc6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022cca:	b2bf      	uxth	r7, r7
 8022ccc:	fb00 fe07 	mul.w	lr, r0, r7
 8022cd0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8022cd4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022cd8:	eba0 0c0e 	sub.w	ip, r0, lr
 8022cdc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022ce0:	b2bf      	uxth	r7, r7
 8022ce2:	fa1f fc8c 	uxth.w	ip, ip
 8022ce6:	eba0 0507 	sub.w	r5, r0, r7
 8022cea:	fb0c f00a 	mul.w	r0, ip, sl
 8022cee:	b2ad      	uxth	r5, r5
 8022cf0:	fb05 000b 	mla	r0, r5, fp, r0
 8022cf4:	fb07 0009 	mla	r0, r7, r9, r0
 8022cf8:	fb0e 0008 	mla	r0, lr, r8, r0
 8022cfc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022d00:	9001      	str	r0, [sp, #4]
 8022d02:	d018      	beq.n	8022d36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 8022d04:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022d08:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022d0c:	fb0b f000 	mul.w	r0, fp, r0
 8022d10:	fb0b fb02 	mul.w	fp, fp, r2
 8022d14:	0a02      	lsrs	r2, r0, #8
 8022d16:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022d1a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d1e:	4402      	add	r2, r0
 8022d20:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022d24:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022d28:	0a12      	lsrs	r2, r2, #8
 8022d2a:	0a00      	lsrs	r0, r0, #8
 8022d2c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d30:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022d34:	4302      	orrs	r2, r0
 8022d36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022d3a:	d01a      	beq.n	8022d72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8022d3c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022d40:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d44:	fb0a f000 	mul.w	r0, sl, r0
 8022d48:	fb0a fa06 	mul.w	sl, sl, r6
 8022d4c:	0a06      	lsrs	r6, r0, #8
 8022d4e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022d52:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022d56:	4406      	add	r6, r0
 8022d58:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022d5c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022d60:	0a36      	lsrs	r6, r6, #8
 8022d62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022d66:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022d6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022d6e:	ea46 060a 	orr.w	r6, r6, sl
 8022d72:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022d76:	d01b      	beq.n	8022db0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8022d78:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022d7c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022d80:	fb09 fa0a 	mul.w	sl, r9, sl
 8022d84:	fb09 f004 	mul.w	r0, r9, r4
 8022d88:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022d8c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022d90:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8022d94:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022d98:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022d9c:	4454      	add	r4, sl
 8022d9e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022da2:	0a24      	lsrs	r4, r4, #8
 8022da4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022da8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022dac:	ea44 0409 	orr.w	r4, r4, r9
 8022db0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022db4:	d01b      	beq.n	8022dee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8022db6:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022dbe:	fb08 f909 	mul.w	r9, r8, r9
 8022dc2:	fb08 f003 	mul.w	r0, r8, r3
 8022dc6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022dca:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022dce:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8022dd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022dd6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8022dda:	444b      	add	r3, r9
 8022ddc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022de0:	0a1b      	lsrs	r3, r3, #8
 8022de2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022de6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022dea:	ea43 0308 	orr.w	r3, r3, r8
 8022dee:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022df2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022df6:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8022dfa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022dfe:	fb0c f000 	mul.w	r0, ip, r0
 8022e02:	fb0c f606 	mul.w	r6, ip, r6
 8022e06:	fb05 0808 	mla	r8, r5, r8, r0
 8022e0a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022e0e:	fb05 6502 	mla	r5, r5, r2, r6
 8022e12:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022e16:	fb07 8800 	mla	r8, r7, r0, r8
 8022e1a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022e1e:	fb07 5704 	mla	r7, r7, r4, r5
 8022e22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e26:	fb0e 8000 	mla	r0, lr, r0, r8
 8022e2a:	780a      	ldrb	r2, [r1, #0]
 8022e2c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022e30:	9b01      	ldr	r3, [sp, #4]
 8022e32:	0a00      	lsrs	r0, r0, #8
 8022e34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e38:	43db      	mvns	r3, r3
 8022e3a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022e3e:	b2db      	uxtb	r3, r3
 8022e40:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022e44:	ea40 0e0e 	orr.w	lr, r0, lr
 8022e48:	fb02 f003 	mul.w	r0, r2, r3
 8022e4c:	1c42      	adds	r2, r0, #1
 8022e4e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022e52:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022e56:	700a      	strb	r2, [r1, #0]
 8022e58:	784a      	ldrb	r2, [r1, #1]
 8022e5a:	435a      	muls	r2, r3
 8022e5c:	1c50      	adds	r0, r2, #1
 8022e5e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022e62:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022e66:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022e6a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022e6e:	704a      	strb	r2, [r1, #1]
 8022e70:	788a      	ldrb	r2, [r1, #2]
 8022e72:	4353      	muls	r3, r2
 8022e74:	1c5a      	adds	r2, r3, #1
 8022e76:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022e7a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022e7e:	f881 e002 	strb.w	lr, [r1, #2]
 8022e82:	b003      	add	sp, #12
 8022e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e88:	0802e05f 	.word	0x0802e05f
 8022e8c:	0802e5c7 	.word	0x0802e5c7
 8022e90:	0802e128 	.word	0x0802e128

08022e94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e98:	ed2d 8b08 	vpush	{d8-d11}
 8022e9c:	b099      	sub	sp, #100	; 0x64
 8022e9e:	eeb0 aa40 	vmov.f32	s20, s0
 8022ea2:	eef0 9a60 	vmov.f32	s19, s1
 8022ea6:	9017      	str	r0, [sp, #92]	; 0x5c
 8022ea8:	eeb0 9a41 	vmov.f32	s18, s2
 8022eac:	9306      	str	r3, [sp, #24]
 8022eae:	eeb0 8a62 	vmov.f32	s16, s5
 8022eb2:	eef0 8a43 	vmov.f32	s17, s6
 8022eb6:	eef0 ba44 	vmov.f32	s23, s8
 8022eba:	eeb0 ba64 	vmov.f32	s22, s9
 8022ebe:	eef0 aa45 	vmov.f32	s21, s10
 8022ec2:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8022ec6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022ec8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022ecc:	6850      	ldr	r0, [r2, #4]
 8022ece:	6812      	ldr	r2, [r2, #0]
 8022ed0:	fb00 1303 	mla	r3, r0, r3, r1
 8022ed4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ed8:	18d3      	adds	r3, r2, r3
 8022eda:	9309      	str	r3, [sp, #36]	; 0x24
 8022edc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022ede:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 8022ee2:	681b      	ldr	r3, [r3, #0]
 8022ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8022ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	dc03      	bgt.n	8022ef4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022eec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	f340 8360 	ble.w	80235b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8022ef4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022ef6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022efa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022efe:	1e48      	subs	r0, r1, #1
 8022f00:	1e57      	subs	r7, r2, #1
 8022f02:	9b06      	ldr	r3, [sp, #24]
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	f340 817b 	ble.w	8023200 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022f0a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022f0e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022f12:	d406      	bmi.n	8022f22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022f14:	4584      	cmp	ip, r0
 8022f16:	da04      	bge.n	8022f22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	db02      	blt.n	8022f22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022f1c:	42bb      	cmp	r3, r7
 8022f1e:	f2c0 8170 	blt.w	8023202 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022f22:	f11c 0c01 	adds.w	ip, ip, #1
 8022f26:	f100 8160 	bmi.w	80231ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022f2a:	4561      	cmp	r1, ip
 8022f2c:	f2c0 815d 	blt.w	80231ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022f30:	3301      	adds	r3, #1
 8022f32:	f100 815a 	bmi.w	80231ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022f36:	429a      	cmp	r2, r3
 8022f38:	f2c0 8157 	blt.w	80231ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022f3c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022f40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022f42:	f1b8 0f00 	cmp.w	r8, #0
 8022f46:	f340 8179 	ble.w	802323c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8022f4a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8022f4c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022f50:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022f52:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022f56:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022f5a:	142a      	asrs	r2, r5, #16
 8022f5c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022f60:	689b      	ldr	r3, [r3, #8]
 8022f62:	f100 81be 	bmi.w	80232e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022f66:	f103 39ff 	add.w	r9, r3, #4294967295
 8022f6a:	454a      	cmp	r2, r9
 8022f6c:	f280 81b9 	bge.w	80232e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022f70:	f1bc 0f00 	cmp.w	ip, #0
 8022f74:	f2c0 81b5 	blt.w	80232e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022f78:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022f7c:	45cc      	cmp	ip, r9
 8022f7e:	f280 81b0 	bge.w	80232e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022f82:	b21b      	sxth	r3, r3
 8022f84:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022f86:	fb0c 2203 	mla	r2, ip, r3, r2
 8022f8a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8022f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022f92:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022f96:	2900      	cmp	r1, #0
 8022f98:	f000 8197 	beq.w	80232ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8022f9c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8022fa0:	940a      	str	r4, [sp, #40]	; 0x28
 8022fa2:	0e24      	lsrs	r4, r4, #24
 8022fa4:	9411      	str	r4, [sp, #68]	; 0x44
 8022fa6:	b180      	cbz	r0, 8022fca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022fa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022fac:	3b01      	subs	r3, #1
 8022fae:	009b      	lsls	r3, r3, #2
 8022fb0:	3304      	adds	r3, #4
 8022fb2:	eb09 0c03 	add.w	ip, r9, r3
 8022fb6:	f859 3003 	ldr.w	r3, [r9, r3]
 8022fba:	9307      	str	r3, [sp, #28]
 8022fbc:	0e1b      	lsrs	r3, r3, #24
 8022fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8022fc0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8022fc6:	0e1b      	lsrs	r3, r3, #24
 8022fc8:	9312      	str	r3, [sp, #72]	; 0x48
 8022fca:	b289      	uxth	r1, r1
 8022fcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022fce:	b280      	uxth	r0, r0
 8022fd0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022fd2:	fb01 fa00 	mul.w	sl, r1, r0
 8022fd6:	0109      	lsls	r1, r1, #4
 8022fd8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022fdc:	eba1 090a 	sub.w	r9, r1, sl
 8022fe0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8022fe4:	b280      	uxth	r0, r0
 8022fe6:	fa1f f989 	uxth.w	r9, r9
 8022fea:	1a09      	subs	r1, r1, r0
 8022fec:	fb09 f303 	mul.w	r3, r9, r3
 8022ff0:	b289      	uxth	r1, r1
 8022ff2:	fb01 330e 	mla	r3, r1, lr, r3
 8022ff6:	fb00 3304 	mla	r3, r0, r4, r3
 8022ffa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022ffc:	fb0a 3304 	mla	r3, sl, r4, r3
 8023000:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023004:	2b00      	cmp	r3, #0
 8023006:	f000 80e8 	beq.w	80231da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802300a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802300e:	d01b      	beq.n	8023048 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023010:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8023014:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023018:	fb0e fb0b 	mul.w	fp, lr, fp
 802301c:	fb0e fe02 	mul.w	lr, lr, r2
 8023020:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8023024:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023028:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802302c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023030:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023034:	445a      	add	r2, fp
 8023036:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802303a:	0a12      	lsrs	r2, r2, #8
 802303c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023040:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023044:	ea42 020c 	orr.w	r2, r2, ip
 8023048:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802304a:	2cff      	cmp	r4, #255	; 0xff
 802304c:	d021      	beq.n	8023092 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802304e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023050:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023054:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023056:	fb04 fc0c 	mul.w	ip, r4, ip
 802305a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802305c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023060:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023064:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023066:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802306a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802306e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023072:	44e6      	add	lr, ip
 8023074:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023078:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802307c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023080:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023084:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023088:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802308c:	ea4e 040b 	orr.w	r4, lr, fp
 8023090:	940a      	str	r4, [sp, #40]	; 0x28
 8023092:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023094:	2cff      	cmp	r4, #255	; 0xff
 8023096:	d021      	beq.n	80230dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023098:	9c07      	ldr	r4, [sp, #28]
 802309a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802309e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80230a0:	fb04 fc0c 	mul.w	ip, r4, ip
 80230a4:	9c07      	ldr	r4, [sp, #28]
 80230a6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80230aa:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80230ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80230b0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80230b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230b8:	fb04 fb0b 	mul.w	fp, r4, fp
 80230bc:	44e6      	add	lr, ip
 80230be:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80230c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230c6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80230ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230ce:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80230d2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80230d6:	ea4e 040b 	orr.w	r4, lr, fp
 80230da:	9407      	str	r4, [sp, #28]
 80230dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80230de:	2cff      	cmp	r4, #255	; 0xff
 80230e0:	d021      	beq.n	8023126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80230e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80230e4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80230e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80230ea:	fb04 fc0c 	mul.w	ip, r4, ip
 80230ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80230f0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80230f4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80230f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80230fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80230fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023102:	fb04 fb0b 	mul.w	fp, r4, fp
 8023106:	44e6      	add	lr, ip
 8023108:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802310c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023110:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023114:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023118:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802311c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023120:	ea4e 040b 	orr.w	r4, lr, fp
 8023124:	940b      	str	r4, [sp, #44]	; 0x2c
 8023126:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023128:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802312c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023130:	2bff      	cmp	r3, #255	; 0xff
 8023132:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023136:	9c07      	ldr	r4, [sp, #28]
 8023138:	fb09 fc0c 	mul.w	ip, r9, ip
 802313c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023140:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023144:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023146:	fb00 cc0e 	mla	ip, r0, lr, ip
 802314a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802314e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023150:	fb0a cc0e 	mla	ip, sl, lr, ip
 8023154:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023158:	fb09 f90e 	mul.w	r9, r9, lr
 802315c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023160:	fb01 9202 	mla	r2, r1, r2, r9
 8023164:	9907      	ldr	r1, [sp, #28]
 8023166:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802316a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 802316e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023170:	fb00 220b 	mla	r2, r0, fp, r2
 8023174:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023178:	fb0a 2a00 	mla	sl, sl, r0, r2
 802317c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023180:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023184:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023188:	fa5f f08c 	uxtb.w	r0, ip
 802318c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023190:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023194:	f000 80a2 	beq.w	80232dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023198:	43db      	mvns	r3, r3
 802319a:	783a      	ldrb	r2, [r7, #0]
 802319c:	f897 a002 	ldrb.w	sl, [r7, #2]
 80231a0:	b2db      	uxtb	r3, r3
 80231a2:	fb02 fe03 	mul.w	lr, r2, r3
 80231a6:	fb0a fa03 	mul.w	sl, sl, r3
 80231aa:	f10e 0201 	add.w	r2, lr, #1
 80231ae:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80231b2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80231b6:	703a      	strb	r2, [r7, #0]
 80231b8:	787a      	ldrb	r2, [r7, #1]
 80231ba:	fb02 f003 	mul.w	r0, r2, r3
 80231be:	f10a 0301 	add.w	r3, sl, #1
 80231c2:	1c42      	adds	r2, r0, #1
 80231c4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80231c8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80231cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80231d0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80231d4:	707a      	strb	r2, [r7, #1]
 80231d6:	f887 c002 	strb.w	ip, [r7, #2]
 80231da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80231dc:	3703      	adds	r7, #3
 80231de:	f108 38ff 	add.w	r8, r8, #4294967295
 80231e2:	441d      	add	r5, r3
 80231e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80231e6:	441e      	add	r6, r3
 80231e8:	e6ab      	b.n	8022f42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80231ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80231ec:	441d      	add	r5, r3
 80231ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80231f0:	441e      	add	r6, r3
 80231f2:	9b06      	ldr	r3, [sp, #24]
 80231f4:	3b01      	subs	r3, #1
 80231f6:	9306      	str	r3, [sp, #24]
 80231f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231fa:	3303      	adds	r3, #3
 80231fc:	9309      	str	r3, [sp, #36]	; 0x24
 80231fe:	e680      	b.n	8022f02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023200:	d024      	beq.n	802324c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8023202:	9b06      	ldr	r3, [sp, #24]
 8023204:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8023206:	3b01      	subs	r3, #1
 8023208:	fb00 5003 	mla	r0, r0, r3, r5
 802320c:	1400      	asrs	r0, r0, #16
 802320e:	f53f ae95 	bmi.w	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023212:	3901      	subs	r1, #1
 8023214:	4288      	cmp	r0, r1
 8023216:	f6bf ae91 	bge.w	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802321a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 802321c:	fb01 6303 	mla	r3, r1, r3, r6
 8023220:	141b      	asrs	r3, r3, #16
 8023222:	f53f ae8b 	bmi.w	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023226:	3a01      	subs	r2, #1
 8023228:	4293      	cmp	r3, r2
 802322a:	f6bf ae87 	bge.w	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802322e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023230:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023234:	1cdf      	adds	r7, r3, #3
 8023236:	f1bb 0f00 	cmp.w	fp, #0
 802323a:	dc6e      	bgt.n	802331a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802323c:	9b06      	ldr	r3, [sp, #24]
 802323e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023244:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023248:	4423      	add	r3, r4
 802324a:	9309      	str	r3, [sp, #36]	; 0x24
 802324c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802324e:	2b00      	cmp	r3, #0
 8023250:	f340 81b0 	ble.w	80235b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8023254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023258:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802325a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802325e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023262:	eef0 6a48 	vmov.f32	s13, s16
 8023266:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802326a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802326e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023272:	ee16 5a90 	vmov	r5, s13
 8023276:	eef0 6a68 	vmov.f32	s13, s17
 802327a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802327e:	ee16 6a90 	vmov	r6, s13
 8023282:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023286:	ee69 7a27 	vmul.f32	s15, s18, s15
 802328a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802328e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023292:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023296:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802329a:	ee18 2a10 	vmov	r2, s16
 802329e:	eeb0 8a47 	vmov.f32	s16, s14
 80232a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80232a6:	ee18 2a90 	vmov	r2, s17
 80232aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80232ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80232ae:	eef0 8a67 	vmov.f32	s17, s15
 80232b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80232b6:	932e      	str	r3, [sp, #184]	; 0xb8
 80232b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80232ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80232bc:	3b01      	subs	r3, #1
 80232be:	9315      	str	r3, [sp, #84]	; 0x54
 80232c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80232c2:	bf08      	it	eq
 80232c4:	4613      	moveq	r3, r2
 80232c6:	9306      	str	r3, [sp, #24]
 80232c8:	e60d      	b.n	8022ee6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80232ca:	2800      	cmp	r0, #0
 80232cc:	f43f ae7d 	beq.w	8022fca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80232d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80232d4:	9307      	str	r3, [sp, #28]
 80232d6:	0e1b      	lsrs	r3, r3, #24
 80232d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80232da:	e676      	b.n	8022fca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80232dc:	7038      	strb	r0, [r7, #0]
 80232de:	7079      	strb	r1, [r7, #1]
 80232e0:	e779      	b.n	80231d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80232e2:	f112 0901 	adds.w	r9, r2, #1
 80232e6:	f53f af78 	bmi.w	80231da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80232ea:	454b      	cmp	r3, r9
 80232ec:	f6ff af75 	blt.w	80231da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80232f0:	f11c 0901 	adds.w	r9, ip, #1
 80232f4:	f53f af71 	bmi.w	80231da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80232f8:	45ce      	cmp	lr, r9
 80232fa:	f6ff af6e 	blt.w	80231da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80232fe:	b21b      	sxth	r3, r3
 8023300:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023304:	fa0f f28e 	sxth.w	r2, lr
 8023308:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802330c:	9200      	str	r2, [sp, #0]
 802330e:	4639      	mov	r1, r7
 8023310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023312:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023314:	f7ff fc7c 	bl	8022c10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023318:	e75f      	b.n	80231da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802331a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802331c:	1429      	asrs	r1, r5, #16
 802331e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023320:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023324:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8023328:	1433      	asrs	r3, r6, #16
 802332a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802332e:	fb0c 1303 	mla	r3, ip, r3, r1
 8023332:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023334:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023338:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802333c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023340:	2a00      	cmp	r2, #0
 8023342:	f000 8129 	beq.w	8023598 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023346:	684c      	ldr	r4, [r1, #4]
 8023348:	940c      	str	r4, [sp, #48]	; 0x30
 802334a:	0e24      	lsrs	r4, r4, #24
 802334c:	9413      	str	r4, [sp, #76]	; 0x4c
 802334e:	b198      	cbz	r0, 8023378 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023350:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8023354:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023358:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802335c:	f10c 0c04 	add.w	ip, ip, #4
 8023360:	eb01 080c 	add.w	r8, r1, ip
 8023364:	f851 100c 	ldr.w	r1, [r1, ip]
 8023368:	9108      	str	r1, [sp, #32]
 802336a:	0e09      	lsrs	r1, r1, #24
 802336c:	9110      	str	r1, [sp, #64]	; 0x40
 802336e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023372:	910d      	str	r1, [sp, #52]	; 0x34
 8023374:	0e09      	lsrs	r1, r1, #24
 8023376:	9114      	str	r1, [sp, #80]	; 0x50
 8023378:	b292      	uxth	r2, r2
 802337a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802337c:	b280      	uxth	r0, r0
 802337e:	fb02 f900 	mul.w	r9, r2, r0
 8023382:	0112      	lsls	r2, r2, #4
 8023384:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023388:	eba2 0809 	sub.w	r8, r2, r9
 802338c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023390:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023392:	b280      	uxth	r0, r0
 8023394:	fa1f f888 	uxth.w	r8, r8
 8023398:	1a09      	subs	r1, r1, r0
 802339a:	fb08 f202 	mul.w	r2, r8, r2
 802339e:	b289      	uxth	r1, r1
 80233a0:	fb01 220e 	mla	r2, r1, lr, r2
 80233a4:	fb00 2204 	mla	r2, r0, r4, r2
 80233a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80233aa:	fb09 2204 	mla	r2, r9, r4, r2
 80233ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80233b2:	2a00      	cmp	r2, #0
 80233b4:	f000 80e8 	beq.w	8023588 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80233b8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80233bc:	d01b      	beq.n	80233f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 80233be:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80233c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80233c6:	fb0e fa0a 	mul.w	sl, lr, sl
 80233ca:	fb0e fe03 	mul.w	lr, lr, r3
 80233ce:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80233d2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80233d6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80233da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80233de:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80233e2:	4453      	add	r3, sl
 80233e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80233e8:	0a1b      	lsrs	r3, r3, #8
 80233ea:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80233ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80233f2:	ea43 030c 	orr.w	r3, r3, ip
 80233f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80233f8:	2cff      	cmp	r4, #255	; 0xff
 80233fa:	d021      	beq.n	8023440 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 80233fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80233fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023402:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023404:	fb04 fc0c 	mul.w	ip, r4, ip
 8023408:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802340a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802340e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023412:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023414:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023418:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802341c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023420:	44e6      	add	lr, ip
 8023422:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023426:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802342a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802342e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023432:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023436:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802343a:	ea4e 040a 	orr.w	r4, lr, sl
 802343e:	940c      	str	r4, [sp, #48]	; 0x30
 8023440:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023442:	2cff      	cmp	r4, #255	; 0xff
 8023444:	d021      	beq.n	802348a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8023446:	9c08      	ldr	r4, [sp, #32]
 8023448:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802344c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802344e:	fb04 fc0c 	mul.w	ip, r4, ip
 8023452:	9c08      	ldr	r4, [sp, #32]
 8023454:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023458:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802345a:	fb04 fa0e 	mul.w	sl, r4, lr
 802345e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023462:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023466:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802346a:	44e6      	add	lr, ip
 802346c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023470:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023474:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023478:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802347c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023480:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023484:	ea4e 040a 	orr.w	r4, lr, sl
 8023488:	9408      	str	r4, [sp, #32]
 802348a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802348c:	2cff      	cmp	r4, #255	; 0xff
 802348e:	d021      	beq.n	80234d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8023490:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023492:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023496:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023498:	fb04 fc0c 	mul.w	ip, r4, ip
 802349c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802349e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80234a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80234a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80234a8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80234ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80234b0:	fb04 fa0a 	mul.w	sl, r4, sl
 80234b4:	44e6      	add	lr, ip
 80234b6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80234ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80234be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80234c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80234c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234ce:	ea4e 040a 	orr.w	r4, lr, sl
 80234d2:	940d      	str	r4, [sp, #52]	; 0x34
 80234d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80234d6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80234da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234de:	2aff      	cmp	r2, #255	; 0xff
 80234e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80234e4:	9c08      	ldr	r4, [sp, #32]
 80234e6:	fb08 fc0c 	mul.w	ip, r8, ip
 80234ea:	fb01 cc0e 	mla	ip, r1, lr, ip
 80234ee:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80234f2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80234f4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80234f8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80234fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80234fe:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023502:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023506:	fb08 f80e 	mul.w	r8, r8, lr
 802350a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802350e:	fb01 8303 	mla	r3, r1, r3, r8
 8023512:	9908      	ldr	r1, [sp, #32]
 8023514:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023518:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802351c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802351e:	fb00 330a 	mla	r3, r0, sl, r3
 8023522:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023526:	fb09 3e0e 	mla	lr, r9, lr, r3
 802352a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802352e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023532:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023536:	fa5f f08c 	uxtb.w	r0, ip
 802353a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802353e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023542:	d032      	beq.n	80235aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8023544:	43d2      	mvns	r2, r2
 8023546:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802354a:	b2d2      	uxtb	r2, r2
 802354c:	fb0e fe02 	mul.w	lr, lr, r2
 8023550:	f10e 0301 	add.w	r3, lr, #1
 8023554:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023558:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802355c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023560:	4350      	muls	r0, r2
 8023562:	f807 3c03 	strb.w	r3, [r7, #-3]
 8023566:	1c43      	adds	r3, r0, #1
 8023568:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802356c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023570:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023574:	4353      	muls	r3, r2
 8023576:	f807 1c02 	strb.w	r1, [r7, #-2]
 802357a:	1c5a      	adds	r2, r3, #1
 802357c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023580:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023584:	f807 cc01 	strb.w	ip, [r7, #-1]
 8023588:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802358a:	3703      	adds	r7, #3
 802358c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023590:	441d      	add	r5, r3
 8023592:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023594:	441e      	add	r6, r3
 8023596:	e64e      	b.n	8023236 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8023598:	2800      	cmp	r0, #0
 802359a:	f43f aeed 	beq.w	8023378 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802359e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80235a2:	9108      	str	r1, [sp, #32]
 80235a4:	0e09      	lsrs	r1, r1, #24
 80235a6:	9110      	str	r1, [sp, #64]	; 0x40
 80235a8:	e6e6      	b.n	8023378 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80235aa:	f807 0c03 	strb.w	r0, [r7, #-3]
 80235ae:	f807 1c02 	strb.w	r1, [r7, #-2]
 80235b2:	e7e7      	b.n	8023584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 80235b4:	b019      	add	sp, #100	; 0x64
 80235b6:	ecbd 8b08 	vpop	{d8-d11}
 80235ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080235c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80235c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235c4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80235c8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80235cc:	2800      	cmp	r0, #0
 80235ce:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80235d2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80235d6:	fb0c 0e03 	mla	lr, ip, r3, r0
 80235da:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80235de:	db6b      	blt.n	80236b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80235e0:	4580      	cmp	r8, r0
 80235e2:	dd69      	ble.n	80236b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80235e4:	f1bc 0f00 	cmp.w	ip, #0
 80235e8:	db66      	blt.n	80236b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80235ea:	45e1      	cmp	r9, ip
 80235ec:	dd64      	ble.n	80236b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80235ee:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80235f2:	f01e 0f01 	tst.w	lr, #1
 80235f6:	5d16      	ldrb	r6, [r2, r4]
 80235f8:	bf0c      	ite	eq
 80235fa:	f006 060f 	andeq.w	r6, r6, #15
 80235fe:	1136      	asrne	r6, r6, #4
 8023600:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023604:	b2f6      	uxtb	r6, r6
 8023606:	f110 0a01 	adds.w	sl, r0, #1
 802360a:	d457      	bmi.n	80236bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802360c:	45d0      	cmp	r8, sl
 802360e:	dd55      	ble.n	80236bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023610:	f1bc 0f00 	cmp.w	ip, #0
 8023614:	db52      	blt.n	80236bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023616:	45e1      	cmp	r9, ip
 8023618:	dd50      	ble.n	80236bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802361a:	2f00      	cmp	r7, #0
 802361c:	f000 80ac 	beq.w	8023778 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8023620:	f10e 0b01 	add.w	fp, lr, #1
 8023624:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023628:	f01b 0f01 	tst.w	fp, #1
 802362c:	5d14      	ldrb	r4, [r2, r4]
 802362e:	bf0c      	ite	eq
 8023630:	f004 040f 	andeq.w	r4, r4, #15
 8023634:	1124      	asrne	r4, r4, #4
 8023636:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802363a:	b2e4      	uxtb	r4, r4
 802363c:	2d00      	cmp	r5, #0
 802363e:	f000 8096 	beq.w	802376e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8023642:	2800      	cmp	r0, #0
 8023644:	f10c 0c01 	add.w	ip, ip, #1
 8023648:	db3c      	blt.n	80236c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802364a:	4580      	cmp	r8, r0
 802364c:	dd3a      	ble.n	80236c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802364e:	f1bc 0f00 	cmp.w	ip, #0
 8023652:	db37      	blt.n	80236c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023654:	45e1      	cmp	r9, ip
 8023656:	dd35      	ble.n	80236c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023658:	eb03 0b0e 	add.w	fp, r3, lr
 802365c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023660:	f01b 0f01 	tst.w	fp, #1
 8023664:	5c10      	ldrb	r0, [r2, r0]
 8023666:	bf0c      	ite	eq
 8023668:	f000 000f 	andeq.w	r0, r0, #15
 802366c:	1100      	asrne	r0, r0, #4
 802366e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023672:	b2c0      	uxtb	r0, r0
 8023674:	f1ba 0f00 	cmp.w	sl, #0
 8023678:	db26      	blt.n	80236c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802367a:	45d0      	cmp	r8, sl
 802367c:	dd24      	ble.n	80236c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802367e:	f1bc 0f00 	cmp.w	ip, #0
 8023682:	db21      	blt.n	80236c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023684:	45e1      	cmp	r9, ip
 8023686:	dd1f      	ble.n	80236c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023688:	b307      	cbz	r7, 80236cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802368a:	3301      	adds	r3, #1
 802368c:	449e      	add	lr, r3
 802368e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023692:	f01e 0f01 	tst.w	lr, #1
 8023696:	5cd3      	ldrb	r3, [r2, r3]
 8023698:	bf0c      	ite	eq
 802369a:	f003 030f 	andeq.w	r3, r3, #15
 802369e:	111b      	asrne	r3, r3, #4
 80236a0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80236a4:	b2db      	uxtb	r3, r3
 80236a6:	2f0f      	cmp	r7, #15
 80236a8:	d911      	bls.n	80236ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80236aa:	4b35      	ldr	r3, [pc, #212]	; (8023780 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80236ac:	f240 1157 	movw	r1, #343	; 0x157
 80236b0:	4a34      	ldr	r2, [pc, #208]	; (8023784 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80236b2:	4835      	ldr	r0, [pc, #212]	; (8023788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80236b4:	f002 fc94 	bl	8025fe0 <__assert_func>
 80236b8:	2600      	movs	r6, #0
 80236ba:	e7a4      	b.n	8023606 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80236bc:	2400      	movs	r4, #0
 80236be:	e7bd      	b.n	802363c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80236c0:	463c      	mov	r4, r7
 80236c2:	e7be      	b.n	8023642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80236c4:	2000      	movs	r0, #0
 80236c6:	e7d5      	b.n	8023674 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80236c8:	2300      	movs	r3, #0
 80236ca:	e7ec      	b.n	80236a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 80236cc:	463b      	mov	r3, r7
 80236ce:	2d0f      	cmp	r5, #15
 80236d0:	d8eb      	bhi.n	80236aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80236d2:	b2bf      	uxth	r7, r7
 80236d4:	b2ad      	uxth	r5, r5
 80236d6:	fb07 f205 	mul.w	r2, r7, r5
 80236da:	013f      	lsls	r7, r7, #4
 80236dc:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80236e0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80236e4:	1abf      	subs	r7, r7, r2
 80236e6:	b2ad      	uxth	r5, r5
 80236e8:	b2bf      	uxth	r7, r7
 80236ea:	ebac 0c05 	sub.w	ip, ip, r5
 80236ee:	437c      	muls	r4, r7
 80236f0:	fa1f fc8c 	uxth.w	ip, ip
 80236f4:	fb06 440c 	mla	r4, r6, ip, r4
 80236f8:	fb05 4400 	mla	r4, r5, r0, r4
 80236fc:	fb02 4203 	mla	r2, r2, r3, r4
 8023700:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023704:	b38a      	cbz	r2, 802376a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8023706:	4b21      	ldr	r3, [pc, #132]	; (802378c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8023708:	681c      	ldr	r4, [r3, #0]
 802370a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802370e:	b2e5      	uxtb	r5, r4
 8023710:	4353      	muls	r3, r2
 8023712:	1c5a      	adds	r2, r3, #1
 8023714:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023718:	1212      	asrs	r2, r2, #8
 802371a:	b290      	uxth	r0, r2
 802371c:	43d2      	mvns	r2, r2
 802371e:	fb15 f500 	smulbb	r5, r5, r0
 8023722:	b2d3      	uxtb	r3, r2
 8023724:	780a      	ldrb	r2, [r1, #0]
 8023726:	fb02 5203 	mla	r2, r2, r3, r5
 802372a:	b292      	uxth	r2, r2
 802372c:	1c55      	adds	r5, r2, #1
 802372e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023732:	784d      	ldrb	r5, [r1, #1]
 8023734:	fb15 f503 	smulbb	r5, r5, r3
 8023738:	1212      	asrs	r2, r2, #8
 802373a:	700a      	strb	r2, [r1, #0]
 802373c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023740:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023744:	fb02 5200 	mla	r2, r2, r0, r5
 8023748:	b292      	uxth	r2, r2
 802374a:	1c55      	adds	r5, r2, #1
 802374c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023750:	1212      	asrs	r2, r2, #8
 8023752:	704a      	strb	r2, [r1, #1]
 8023754:	788a      	ldrb	r2, [r1, #2]
 8023756:	fb12 f303 	smulbb	r3, r2, r3
 802375a:	fb04 3300 	mla	r3, r4, r0, r3
 802375e:	b29b      	uxth	r3, r3
 8023760:	1c5a      	adds	r2, r3, #1
 8023762:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023766:	121b      	asrs	r3, r3, #8
 8023768:	708b      	strb	r3, [r1, #2]
 802376a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802376e:	2f0f      	cmp	r7, #15
 8023770:	d89b      	bhi.n	80236aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023772:	462b      	mov	r3, r5
 8023774:	4628      	mov	r0, r5
 8023776:	e7ac      	b.n	80236d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8023778:	2d00      	cmp	r5, #0
 802377a:	d1a1      	bne.n	80236c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 802377c:	462c      	mov	r4, r5
 802377e:	e7f8      	b.n	8023772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8023780:	0802e05f 	.word	0x0802e05f
 8023784:	0802e5c7 	.word	0x0802e5c7
 8023788:	0802e128 	.word	0x0802e128
 802378c:	20056720 	.word	0x20056720

08023790 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023794:	ed2d 8b08 	vpush	{d8-d11}
 8023798:	b097      	sub	sp, #92	; 0x5c
 802379a:	eeb0 aa40 	vmov.f32	s20, s0
 802379e:	eef0 9a60 	vmov.f32	s19, s1
 80237a2:	9214      	str	r2, [sp, #80]	; 0x50
 80237a4:	eeb0 9a41 	vmov.f32	s18, s2
 80237a8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80237aa:	eeb0 8a62 	vmov.f32	s16, s5
 80237ae:	9309      	str	r3, [sp, #36]	; 0x24
 80237b0:	eef0 8a43 	vmov.f32	s17, s6
 80237b4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80237b8:	eef0 ba44 	vmov.f32	s23, s8
 80237bc:	9015      	str	r0, [sp, #84]	; 0x54
 80237be:	eeb0 ba64 	vmov.f32	s22, s9
 80237c2:	6850      	ldr	r0, [r2, #4]
 80237c4:	eef0 aa45 	vmov.f32	s21, s10
 80237c8:	910c      	str	r1, [sp, #48]	; 0x30
 80237ca:	930e      	str	r3, [sp, #56]	; 0x38
 80237cc:	6812      	ldr	r2, [r2, #0]
 80237ce:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80237d2:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80237d6:	fb00 1303 	mla	r3, r0, r3, r1
 80237da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80237de:	eb02 0a03 	add.w	sl, r2, r3
 80237e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80237e4:	689b      	ldr	r3, [r3, #8]
 80237e6:	3301      	adds	r3, #1
 80237e8:	f023 0301 	bic.w	r3, r3, #1
 80237ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80237ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80237f0:	681f      	ldr	r7, [r3, #0]
 80237f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80237f4:	2b00      	cmp	r3, #0
 80237f6:	dc03      	bgt.n	8023800 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80237f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80237fa:	2b00      	cmp	r3, #0
 80237fc:	f340 8247 	ble.w	8023c8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023800:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023802:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023806:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802380a:	1e48      	subs	r0, r1, #1
 802380c:	f102 3cff 	add.w	ip, r2, #4294967295
 8023810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023812:	2b00      	cmp	r3, #0
 8023814:	f340 80e5 	ble.w	80239e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8023818:	ea5f 4e25 	movs.w	lr, r5, asr #16
 802381c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023820:	d406      	bmi.n	8023830 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023822:	4586      	cmp	lr, r0
 8023824:	da04      	bge.n	8023830 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023826:	2b00      	cmp	r3, #0
 8023828:	db02      	blt.n	8023830 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802382a:	4563      	cmp	r3, ip
 802382c:	f2c0 80da 	blt.w	80239e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8023830:	f11e 0e01 	adds.w	lr, lr, #1
 8023834:	f100 80cb 	bmi.w	80239ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023838:	4571      	cmp	r1, lr
 802383a:	f2c0 80c8 	blt.w	80239ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802383e:	3301      	adds	r3, #1
 8023840:	f100 80c5 	bmi.w	80239ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023844:	429a      	cmp	r2, r3
 8023846:	f2c0 80c2 	blt.w	80239ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802384a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802384c:	46d0      	mov	r8, sl
 802384e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8023852:	930d      	str	r3, [sp, #52]	; 0x34
 8023854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023856:	2b00      	cmp	r3, #0
 8023858:	f340 80e3 	ble.w	8023a22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802385c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802385e:	1430      	asrs	r0, r6, #16
 8023860:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023864:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023868:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802386c:	142b      	asrs	r3, r5, #16
 802386e:	f100 812e 	bmi.w	8023ace <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023872:	f10c 3bff 	add.w	fp, ip, #4294967295
 8023876:	455b      	cmp	r3, fp
 8023878:	f280 8129 	bge.w	8023ace <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802387c:	2800      	cmp	r0, #0
 802387e:	f2c0 8126 	blt.w	8023ace <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023882:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023886:	4558      	cmp	r0, fp
 8023888:	f280 8121 	bge.w	8023ace <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802388c:	fb00 3309 	mla	r3, r0, r9, r3
 8023890:	0858      	lsrs	r0, r3, #1
 8023892:	07dc      	lsls	r4, r3, #31
 8023894:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023898:	bf54      	ite	pl
 802389a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802389e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80238a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80238a6:	fa5f fc8c 	uxtb.w	ip, ip
 80238aa:	2a00      	cmp	r2, #0
 80238ac:	f000 80fe 	beq.w	8023aac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80238b0:	1c58      	adds	r0, r3, #1
 80238b2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80238b6:	07c0      	lsls	r0, r0, #31
 80238b8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80238bc:	bf54      	ite	pl
 80238be:	f00e 0e0f 	andpl.w	lr, lr, #15
 80238c2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80238c6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80238ca:	fa5f f08e 	uxtb.w	r0, lr
 80238ce:	9010      	str	r0, [sp, #64]	; 0x40
 80238d0:	b1d9      	cbz	r1, 802390a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80238d2:	444b      	add	r3, r9
 80238d4:	0858      	lsrs	r0, r3, #1
 80238d6:	07dc      	lsls	r4, r3, #31
 80238d8:	f103 0301 	add.w	r3, r3, #1
 80238dc:	5c38      	ldrb	r0, [r7, r0]
 80238de:	bf54      	ite	pl
 80238e0:	f000 000f 	andpl.w	r0, r0, #15
 80238e4:	1100      	asrmi	r0, r0, #4
 80238e6:	07dc      	lsls	r4, r3, #31
 80238e8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80238ec:	b2c0      	uxtb	r0, r0
 80238ee:	900a      	str	r0, [sp, #40]	; 0x28
 80238f0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80238f4:	f817 e000 	ldrb.w	lr, [r7, r0]
 80238f8:	bf54      	ite	pl
 80238fa:	f00e 030f 	andpl.w	r3, lr, #15
 80238fe:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8023902:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023906:	b2db      	uxtb	r3, r3
 8023908:	9311      	str	r3, [sp, #68]	; 0x44
 802390a:	b292      	uxth	r2, r2
 802390c:	b289      	uxth	r1, r1
 802390e:	0113      	lsls	r3, r2, #4
 8023910:	fb02 f001 	mul.w	r0, r2, r1
 8023914:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023916:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802391a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802391e:	1a1b      	subs	r3, r3, r0
 8023920:	b289      	uxth	r1, r1
 8023922:	b29b      	uxth	r3, r3
 8023924:	ebae 0e01 	sub.w	lr, lr, r1
 8023928:	4353      	muls	r3, r2
 802392a:	fa1f fe8e 	uxth.w	lr, lr
 802392e:	fb0c 320e 	mla	r2, ip, lr, r3
 8023932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023934:	fb01 2203 	mla	r2, r1, r3, r2
 8023938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802393a:	fb00 2203 	mla	r2, r0, r3, r2
 802393e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023942:	2a00      	cmp	r2, #0
 8023944:	d039      	beq.n	80239ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023946:	4bc7      	ldr	r3, [pc, #796]	; (8023c64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8023948:	6819      	ldr	r1, [r3, #0]
 802394a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802394c:	fa5f fc81 	uxtb.w	ip, r1
 8023950:	435a      	muls	r2, r3
 8023952:	1c53      	adds	r3, r2, #1
 8023954:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023958:	1212      	asrs	r2, r2, #8
 802395a:	b290      	uxth	r0, r2
 802395c:	43d2      	mvns	r2, r2
 802395e:	fb1c fc00 	smulbb	ip, ip, r0
 8023962:	b2d3      	uxtb	r3, r2
 8023964:	f898 2000 	ldrb.w	r2, [r8]
 8023968:	fb02 c203 	mla	r2, r2, r3, ip
 802396c:	b292      	uxth	r2, r2
 802396e:	f102 0c01 	add.w	ip, r2, #1
 8023972:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023976:	f898 c001 	ldrb.w	ip, [r8, #1]
 802397a:	fb1c fc03 	smulbb	ip, ip, r3
 802397e:	1212      	asrs	r2, r2, #8
 8023980:	f888 2000 	strb.w	r2, [r8]
 8023984:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8023988:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802398c:	fb02 c200 	mla	r2, r2, r0, ip
 8023990:	b292      	uxth	r2, r2
 8023992:	f102 0c01 	add.w	ip, r2, #1
 8023996:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802399a:	1212      	asrs	r2, r2, #8
 802399c:	f888 2001 	strb.w	r2, [r8, #1]
 80239a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80239a4:	fb12 f303 	smulbb	r3, r2, r3
 80239a8:	fb01 3300 	mla	r3, r1, r0, r3
 80239ac:	b29b      	uxth	r3, r3
 80239ae:	1c5a      	adds	r2, r3, #1
 80239b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80239b4:	121b      	asrs	r3, r3, #8
 80239b6:	f888 3002 	strb.w	r3, [r8, #2]
 80239ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239bc:	f108 0803 	add.w	r8, r8, #3
 80239c0:	441d      	add	r5, r3
 80239c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80239c4:	441e      	add	r6, r3
 80239c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80239c8:	3b01      	subs	r3, #1
 80239ca:	930d      	str	r3, [sp, #52]	; 0x34
 80239cc:	e742      	b.n	8023854 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80239ce:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239d0:	f10a 0a03 	add.w	sl, sl, #3
 80239d4:	441d      	add	r5, r3
 80239d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80239d8:	441e      	add	r6, r3
 80239da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239dc:	3b01      	subs	r3, #1
 80239de:	9309      	str	r3, [sp, #36]	; 0x24
 80239e0:	e716      	b.n	8023810 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80239e2:	d024      	beq.n	8023a2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80239e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239e6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80239e8:	3b01      	subs	r3, #1
 80239ea:	fb00 5003 	mla	r0, r0, r3, r5
 80239ee:	1400      	asrs	r0, r0, #16
 80239f0:	f53f af2b 	bmi.w	802384a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80239f4:	3901      	subs	r1, #1
 80239f6:	4288      	cmp	r0, r1
 80239f8:	f6bf af27 	bge.w	802384a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80239fc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80239fe:	fb01 6303 	mla	r3, r1, r3, r6
 8023a02:	141b      	asrs	r3, r3, #16
 8023a04:	f53f af21 	bmi.w	802384a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023a08:	3a01      	subs	r2, #1
 8023a0a:	4293      	cmp	r3, r2
 8023a0c:	f6bf af1d 	bge.w	802384a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023a10:	f10a 0e03 	add.w	lr, sl, #3
 8023a14:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8023a18:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8023a1c:	f1b8 0f00 	cmp.w	r8, #0
 8023a20:	dc76      	bgt.n	8023b10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8023a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a24:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023a28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023a2c:	44a2      	add	sl, r4
 8023a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a30:	2b00      	cmp	r3, #0
 8023a32:	f340 812c 	ble.w	8023c8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a3c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023a40:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023a44:	eef0 6a48 	vmov.f32	s13, s16
 8023a48:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023a4c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023a50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a54:	ee16 5a90 	vmov	r5, s13
 8023a58:	eef0 6a68 	vmov.f32	s13, s17
 8023a5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a60:	ee16 6a90 	vmov	r6, s13
 8023a64:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023a68:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023a6c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023a70:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023a74:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023a78:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023a7c:	ee18 2a10 	vmov	r2, s16
 8023a80:	eeb0 8a47 	vmov.f32	s16, s14
 8023a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a88:	ee18 2a90 	vmov	r2, s17
 8023a8c:	932b      	str	r3, [sp, #172]	; 0xac
 8023a8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a90:	eef0 8a67 	vmov.f32	s17, s15
 8023a94:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a98:	932c      	str	r3, [sp, #176]	; 0xb0
 8023a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023a9e:	3b01      	subs	r3, #1
 8023aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8023aa2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023aa4:	bf08      	it	eq
 8023aa6:	4613      	moveq	r3, r2
 8023aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8023aaa:	e6a2      	b.n	80237f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023aac:	2900      	cmp	r1, #0
 8023aae:	f43f af2c 	beq.w	802390a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8023ab2:	eb09 0003 	add.w	r0, r9, r3
 8023ab6:	0843      	lsrs	r3, r0, #1
 8023ab8:	07c0      	lsls	r0, r0, #31
 8023aba:	5cfb      	ldrb	r3, [r7, r3]
 8023abc:	bf54      	ite	pl
 8023abe:	f003 030f 	andpl.w	r3, r3, #15
 8023ac2:	111b      	asrmi	r3, r3, #4
 8023ac4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023ac8:	b2db      	uxtb	r3, r3
 8023aca:	930a      	str	r3, [sp, #40]	; 0x28
 8023acc:	e71d      	b.n	802390a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8023ace:	f113 0b01 	adds.w	fp, r3, #1
 8023ad2:	f53f af72 	bmi.w	80239ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023ad6:	45dc      	cmp	ip, fp
 8023ad8:	f6ff af6f 	blt.w	80239ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023adc:	f110 0b01 	adds.w	fp, r0, #1
 8023ae0:	f53f af6b 	bmi.w	80239ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023ae4:	45de      	cmp	lr, fp
 8023ae6:	f6ff af68 	blt.w	80239ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023aea:	9302      	str	r3, [sp, #8]
 8023aec:	fa0f f38e 	sxth.w	r3, lr
 8023af0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023af2:	9301      	str	r3, [sp, #4]
 8023af4:	fa0f f38c 	sxth.w	r3, ip
 8023af8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023afc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023b00:	9300      	str	r3, [sp, #0]
 8023b02:	463a      	mov	r2, r7
 8023b04:	464b      	mov	r3, r9
 8023b06:	4641      	mov	r1, r8
 8023b08:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023b0a:	f7ff fd59 	bl	80235c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8023b0e:	e754      	b.n	80239ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023b10:	142a      	asrs	r2, r5, #16
 8023b12:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023b16:	1433      	asrs	r3, r6, #16
 8023b18:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023b1c:	fb09 2303 	mla	r3, r9, r3, r2
 8023b20:	085a      	lsrs	r2, r3, #1
 8023b22:	07dc      	lsls	r4, r3, #31
 8023b24:	5cba      	ldrb	r2, [r7, r2]
 8023b26:	bf54      	ite	pl
 8023b28:	f002 020f 	andpl.w	r2, r2, #15
 8023b2c:	1112      	asrmi	r2, r2, #4
 8023b2e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023b32:	b2d2      	uxtb	r2, r2
 8023b34:	2900      	cmp	r1, #0
 8023b36:	f000 8097 	beq.w	8023c68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023b3a:	f103 0b01 	add.w	fp, r3, #1
 8023b3e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8023b42:	f01b 0f01 	tst.w	fp, #1
 8023b46:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023b4a:	bf0c      	ite	eq
 8023b4c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023b50:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023b54:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023b58:	fa5f f48c 	uxtb.w	r4, ip
 8023b5c:	9412      	str	r4, [sp, #72]	; 0x48
 8023b5e:	b300      	cbz	r0, 8023ba2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023b60:	444b      	add	r3, r9
 8023b62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023b66:	07dc      	lsls	r4, r3, #31
 8023b68:	f103 0301 	add.w	r3, r3, #1
 8023b6c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023b70:	bf54      	ite	pl
 8023b72:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023b76:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023b7a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023b7e:	fa5f f48c 	uxtb.w	r4, ip
 8023b82:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023b86:	940b      	str	r4, [sp, #44]	; 0x2c
 8023b88:	07dc      	lsls	r4, r3, #31
 8023b8a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023b8e:	bf54      	ite	pl
 8023b90:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023b94:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023b98:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023b9c:	fa5f f38c 	uxtb.w	r3, ip
 8023ba0:	9313      	str	r3, [sp, #76]	; 0x4c
 8023ba2:	b289      	uxth	r1, r1
 8023ba4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023ba6:	b280      	uxth	r0, r0
 8023ba8:	fb01 f300 	mul.w	r3, r1, r0
 8023bac:	0109      	lsls	r1, r1, #4
 8023bae:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8023bb2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8023bb6:	1ac9      	subs	r1, r1, r3
 8023bb8:	b280      	uxth	r0, r0
 8023bba:	b289      	uxth	r1, r1
 8023bbc:	ebac 0c00 	sub.w	ip, ip, r0
 8023bc0:	4361      	muls	r1, r4
 8023bc2:	fa1f fc8c 	uxth.w	ip, ip
 8023bc6:	fb02 120c 	mla	r2, r2, ip, r1
 8023bca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023bcc:	fb00 2001 	mla	r0, r0, r1, r2
 8023bd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023bd2:	fb03 0302 	mla	r3, r3, r2, r0
 8023bd6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023bda:	2b00      	cmp	r3, #0
 8023bdc:	d039      	beq.n	8023c52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023bde:	4a21      	ldr	r2, [pc, #132]	; (8023c64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8023be0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023be4:	6810      	ldr	r0, [r2, #0]
 8023be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023be8:	fa5f fc80 	uxtb.w	ip, r0
 8023bec:	4353      	muls	r3, r2
 8023bee:	1c5a      	adds	r2, r3, #1
 8023bf0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023bf4:	121b      	asrs	r3, r3, #8
 8023bf6:	b29a      	uxth	r2, r3
 8023bf8:	43db      	mvns	r3, r3
 8023bfa:	fb1c fc02 	smulbb	ip, ip, r2
 8023bfe:	b2db      	uxtb	r3, r3
 8023c00:	fb01 c103 	mla	r1, r1, r3, ip
 8023c04:	b289      	uxth	r1, r1
 8023c06:	f101 0c01 	add.w	ip, r1, #1
 8023c0a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023c0e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8023c12:	fb1c fc03 	smulbb	ip, ip, r3
 8023c16:	1209      	asrs	r1, r1, #8
 8023c18:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023c1c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8023c20:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023c24:	fb01 c102 	mla	r1, r1, r2, ip
 8023c28:	b289      	uxth	r1, r1
 8023c2a:	f101 0c01 	add.w	ip, r1, #1
 8023c2e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023c32:	1209      	asrs	r1, r1, #8
 8023c34:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023c38:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023c3c:	fb11 f303 	smulbb	r3, r1, r3
 8023c40:	fb00 3002 	mla	r0, r0, r2, r3
 8023c44:	b280      	uxth	r0, r0
 8023c46:	1c42      	adds	r2, r0, #1
 8023c48:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023c4c:	1200      	asrs	r0, r0, #8
 8023c4e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8023c52:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023c54:	f10e 0e03 	add.w	lr, lr, #3
 8023c58:	f108 38ff 	add.w	r8, r8, #4294967295
 8023c5c:	441d      	add	r5, r3
 8023c5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c60:	441e      	add	r6, r3
 8023c62:	e6db      	b.n	8023a1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023c64:	20056720 	.word	0x20056720
 8023c68:	2800      	cmp	r0, #0
 8023c6a:	d09a      	beq.n	8023ba2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023c6c:	444b      	add	r3, r9
 8023c6e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023c72:	07db      	lsls	r3, r3, #31
 8023c74:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023c78:	bf54      	ite	pl
 8023c7a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023c7e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023c82:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023c86:	fa5f f38c 	uxtb.w	r3, ip
 8023c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023c8c:	e789      	b.n	8023ba2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023c8e:	b017      	add	sp, #92	; 0x5c
 8023c90:	ecbd 8b08 	vpop	{d8-d11}
 8023c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023c98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c9c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023ca0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023ca4:	2800      	cmp	r0, #0
 8023ca6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023caa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023cae:	fb0c 0e03 	mla	lr, ip, r3, r0
 8023cb2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023cb6:	db6b      	blt.n	8023d90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023cb8:	4580      	cmp	r8, r0
 8023cba:	dd69      	ble.n	8023d90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023cbc:	f1bc 0f00 	cmp.w	ip, #0
 8023cc0:	db66      	blt.n	8023d90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023cc2:	45e1      	cmp	r9, ip
 8023cc4:	dd64      	ble.n	8023d90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023cc6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023cca:	f01e 0f01 	tst.w	lr, #1
 8023cce:	5d16      	ldrb	r6, [r2, r4]
 8023cd0:	bf0c      	ite	eq
 8023cd2:	f006 060f 	andeq.w	r6, r6, #15
 8023cd6:	1136      	asrne	r6, r6, #4
 8023cd8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023cdc:	b2f6      	uxtb	r6, r6
 8023cde:	f110 0a01 	adds.w	sl, r0, #1
 8023ce2:	d457      	bmi.n	8023d94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023ce4:	45d0      	cmp	r8, sl
 8023ce6:	dd55      	ble.n	8023d94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023ce8:	f1bc 0f00 	cmp.w	ip, #0
 8023cec:	db52      	blt.n	8023d94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023cee:	45e1      	cmp	r9, ip
 8023cf0:	dd50      	ble.n	8023d94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023cf2:	2f00      	cmp	r7, #0
 8023cf4:	f000 80a5 	beq.w	8023e42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8023cf8:	f10e 0b01 	add.w	fp, lr, #1
 8023cfc:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023d00:	f01b 0f01 	tst.w	fp, #1
 8023d04:	5d14      	ldrb	r4, [r2, r4]
 8023d06:	bf0c      	ite	eq
 8023d08:	f004 040f 	andeq.w	r4, r4, #15
 8023d0c:	1124      	asrne	r4, r4, #4
 8023d0e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023d12:	b2e4      	uxtb	r4, r4
 8023d14:	2d00      	cmp	r5, #0
 8023d16:	f000 808f 	beq.w	8023e38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023d1a:	2800      	cmp	r0, #0
 8023d1c:	f10c 0c01 	add.w	ip, ip, #1
 8023d20:	db3c      	blt.n	8023d9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023d22:	4580      	cmp	r8, r0
 8023d24:	dd3a      	ble.n	8023d9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023d26:	f1bc 0f00 	cmp.w	ip, #0
 8023d2a:	db37      	blt.n	8023d9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023d2c:	45e1      	cmp	r9, ip
 8023d2e:	dd35      	ble.n	8023d9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023d30:	eb03 0b0e 	add.w	fp, r3, lr
 8023d34:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023d38:	f01b 0f01 	tst.w	fp, #1
 8023d3c:	5c10      	ldrb	r0, [r2, r0]
 8023d3e:	bf0c      	ite	eq
 8023d40:	f000 000f 	andeq.w	r0, r0, #15
 8023d44:	1100      	asrne	r0, r0, #4
 8023d46:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023d4a:	b2c0      	uxtb	r0, r0
 8023d4c:	f1ba 0f00 	cmp.w	sl, #0
 8023d50:	db26      	blt.n	8023da0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023d52:	45d0      	cmp	r8, sl
 8023d54:	dd24      	ble.n	8023da0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023d56:	f1bc 0f00 	cmp.w	ip, #0
 8023d5a:	db21      	blt.n	8023da0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023d5c:	45e1      	cmp	r9, ip
 8023d5e:	dd1f      	ble.n	8023da0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023d60:	b307      	cbz	r7, 8023da4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8023d62:	3301      	adds	r3, #1
 8023d64:	449e      	add	lr, r3
 8023d66:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023d6a:	f01e 0f01 	tst.w	lr, #1
 8023d6e:	5cd3      	ldrb	r3, [r2, r3]
 8023d70:	bf0c      	ite	eq
 8023d72:	f003 030f 	andeq.w	r3, r3, #15
 8023d76:	111b      	asrne	r3, r3, #4
 8023d78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023d7c:	b2db      	uxtb	r3, r3
 8023d7e:	2f0f      	cmp	r7, #15
 8023d80:	d911      	bls.n	8023da6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8023d82:	4b32      	ldr	r3, [pc, #200]	; (8023e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8023d84:	f240 1157 	movw	r1, #343	; 0x157
 8023d88:	4a31      	ldr	r2, [pc, #196]	; (8023e50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8023d8a:	4832      	ldr	r0, [pc, #200]	; (8023e54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8023d8c:	f002 f928 	bl	8025fe0 <__assert_func>
 8023d90:	2600      	movs	r6, #0
 8023d92:	e7a4      	b.n	8023cde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8023d94:	2400      	movs	r4, #0
 8023d96:	e7bd      	b.n	8023d14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023d98:	463c      	mov	r4, r7
 8023d9a:	e7be      	b.n	8023d1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8023d9c:	2000      	movs	r0, #0
 8023d9e:	e7d5      	b.n	8023d4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8023da0:	2300      	movs	r3, #0
 8023da2:	e7ec      	b.n	8023d7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8023da4:	463b      	mov	r3, r7
 8023da6:	2d0f      	cmp	r5, #15
 8023da8:	d8eb      	bhi.n	8023d82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023daa:	b2bf      	uxth	r7, r7
 8023dac:	b2ad      	uxth	r5, r5
 8023dae:	fb07 f205 	mul.w	r2, r7, r5
 8023db2:	013f      	lsls	r7, r7, #4
 8023db4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023db8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023dbc:	1abf      	subs	r7, r7, r2
 8023dbe:	b2ad      	uxth	r5, r5
 8023dc0:	b2bf      	uxth	r7, r7
 8023dc2:	ebac 0c05 	sub.w	ip, ip, r5
 8023dc6:	437c      	muls	r4, r7
 8023dc8:	fa1f fc8c 	uxth.w	ip, ip
 8023dcc:	fb06 440c 	mla	r4, r6, ip, r4
 8023dd0:	fb05 4400 	mla	r4, r5, r0, r4
 8023dd4:	fb02 4303 	mla	r3, r2, r3, r4
 8023dd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023ddc:	b353      	cbz	r3, 8023e34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8023dde:	4a1e      	ldr	r2, [pc, #120]	; (8023e58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8023de0:	7808      	ldrb	r0, [r1, #0]
 8023de2:	6814      	ldr	r4, [r2, #0]
 8023de4:	b29a      	uxth	r2, r3
 8023de6:	43db      	mvns	r3, r3
 8023de8:	b2e5      	uxtb	r5, r4
 8023dea:	b2db      	uxtb	r3, r3
 8023dec:	fb15 f502 	smulbb	r5, r5, r2
 8023df0:	fb00 5003 	mla	r0, r0, r3, r5
 8023df4:	b280      	uxth	r0, r0
 8023df6:	1c45      	adds	r5, r0, #1
 8023df8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023dfc:	784d      	ldrb	r5, [r1, #1]
 8023dfe:	fb15 f503 	smulbb	r5, r5, r3
 8023e02:	1200      	asrs	r0, r0, #8
 8023e04:	7008      	strb	r0, [r1, #0]
 8023e06:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023e0a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023e0e:	fb00 5002 	mla	r0, r0, r2, r5
 8023e12:	b280      	uxth	r0, r0
 8023e14:	1c45      	adds	r5, r0, #1
 8023e16:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023e1a:	1200      	asrs	r0, r0, #8
 8023e1c:	7048      	strb	r0, [r1, #1]
 8023e1e:	7888      	ldrb	r0, [r1, #2]
 8023e20:	fb10 f303 	smulbb	r3, r0, r3
 8023e24:	fb04 3202 	mla	r2, r4, r2, r3
 8023e28:	b292      	uxth	r2, r2
 8023e2a:	1c53      	adds	r3, r2, #1
 8023e2c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023e30:	1212      	asrs	r2, r2, #8
 8023e32:	708a      	strb	r2, [r1, #2]
 8023e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e38:	2f0f      	cmp	r7, #15
 8023e3a:	d8a2      	bhi.n	8023d82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023e3c:	462b      	mov	r3, r5
 8023e3e:	4628      	mov	r0, r5
 8023e40:	e7b3      	b.n	8023daa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8023e42:	2d00      	cmp	r5, #0
 8023e44:	d1a8      	bne.n	8023d98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8023e46:	462c      	mov	r4, r5
 8023e48:	e7f8      	b.n	8023e3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8023e4a:	bf00      	nop
 8023e4c:	0802e05f 	.word	0x0802e05f
 8023e50:	0802e5c7 	.word	0x0802e5c7
 8023e54:	0802e128 	.word	0x0802e128
 8023e58:	20056720 	.word	0x20056720

08023e5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e60:	ed2d 8b08 	vpush	{d8-d11}
 8023e64:	b093      	sub	sp, #76	; 0x4c
 8023e66:	461c      	mov	r4, r3
 8023e68:	eeb0 aa40 	vmov.f32	s20, s0
 8023e6c:	920c      	str	r2, [sp, #48]	; 0x30
 8023e6e:	eef0 9a60 	vmov.f32	s19, s1
 8023e72:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023e74:	eeb0 9a41 	vmov.f32	s18, s2
 8023e78:	9011      	str	r0, [sp, #68]	; 0x44
 8023e7a:	eeb0 8a62 	vmov.f32	s16, s5
 8023e7e:	6850      	ldr	r0, [r2, #4]
 8023e80:	eef0 8a43 	vmov.f32	s17, s6
 8023e84:	9107      	str	r1, [sp, #28]
 8023e86:	eef0 ba44 	vmov.f32	s23, s8
 8023e8a:	6812      	ldr	r2, [r2, #0]
 8023e8c:	eeb0 ba64 	vmov.f32	s22, s9
 8023e90:	eef0 aa45 	vmov.f32	s21, s10
 8023e94:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023e98:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 8023e9c:	fb00 1303 	mla	r3, r0, r3, r1
 8023ea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ea4:	eb02 0b03 	add.w	fp, r2, r3
 8023ea8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023eaa:	689b      	ldr	r3, [r3, #8]
 8023eac:	3301      	adds	r3, #1
 8023eae:	f023 0301 	bic.w	r3, r3, #1
 8023eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8023eb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023eb6:	f8d3 8000 	ldr.w	r8, [r3]
 8023eba:	9b07      	ldr	r3, [sp, #28]
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	dc03      	bgt.n	8023ec8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ec2:	2b00      	cmp	r3, #0
 8023ec4:	f340 822b 	ble.w	802431e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023ec8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023eca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ece:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023ed2:	1e48      	subs	r0, r1, #1
 8023ed4:	1e57      	subs	r7, r2, #1
 8023ed6:	2c00      	cmp	r4, #0
 8023ed8:	f340 80d7 	ble.w	802408a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023edc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023ee0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023ee4:	d406      	bmi.n	8023ef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023ee6:	4584      	cmp	ip, r0
 8023ee8:	da04      	bge.n	8023ef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023eea:	2b00      	cmp	r3, #0
 8023eec:	db02      	blt.n	8023ef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023eee:	42bb      	cmp	r3, r7
 8023ef0:	f2c0 80cc 	blt.w	802408c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023ef4:	f11c 0c01 	adds.w	ip, ip, #1
 8023ef8:	f100 80bf 	bmi.w	802407a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023efc:	4561      	cmp	r1, ip
 8023efe:	f2c0 80bc 	blt.w	802407a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023f02:	3301      	adds	r3, #1
 8023f04:	f100 80b9 	bmi.w	802407a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023f08:	429a      	cmp	r2, r3
 8023f0a:	f2c0 80b6 	blt.w	802407a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023f0e:	46a2      	mov	sl, r4
 8023f10:	465f      	mov	r7, fp
 8023f12:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023f16:	f1ba 0f00 	cmp.w	sl, #0
 8023f1a:	f340 80d4 	ble.w	80240c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8023f1e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8023f22:	1430      	asrs	r0, r6, #16
 8023f24:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023f28:	9308      	str	r3, [sp, #32]
 8023f2a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023f2c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023f30:	142b      	asrs	r3, r5, #16
 8023f32:	f100 8124 	bmi.w	802417e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023f36:	f10c 32ff 	add.w	r2, ip, #4294967295
 8023f3a:	4293      	cmp	r3, r2
 8023f3c:	f280 811f 	bge.w	802417e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023f40:	2800      	cmp	r0, #0
 8023f42:	f2c0 811c 	blt.w	802417e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023f46:	f10e 32ff 	add.w	r2, lr, #4294967295
 8023f4a:	4290      	cmp	r0, r2
 8023f4c:	f280 8117 	bge.w	802417e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023f50:	fb00 3309 	mla	r3, r0, r9, r3
 8023f54:	0858      	lsrs	r0, r3, #1
 8023f56:	07da      	lsls	r2, r3, #31
 8023f58:	9a08      	ldr	r2, [sp, #32]
 8023f5a:	f818 c000 	ldrb.w	ip, [r8, r0]
 8023f5e:	bf54      	ite	pl
 8023f60:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023f64:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023f68:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023f6c:	fa5f fc8c 	uxtb.w	ip, ip
 8023f70:	2a00      	cmp	r2, #0
 8023f72:	f000 80ed 	beq.w	8024150 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f76:	1c58      	adds	r0, r3, #1
 8023f78:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023f7c:	07c0      	lsls	r0, r0, #31
 8023f7e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8023f82:	bf54      	ite	pl
 8023f84:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023f88:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023f8c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023f90:	fa5f fe8e 	uxtb.w	lr, lr
 8023f94:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8023f98:	b1c9      	cbz	r1, 8023fce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8023f9a:	444b      	add	r3, r9
 8023f9c:	0858      	lsrs	r0, r3, #1
 8023f9e:	07da      	lsls	r2, r3, #31
 8023fa0:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023fa4:	bf54      	ite	pl
 8023fa6:	f000 000f 	andpl.w	r0, r0, #15
 8023faa:	1100      	asrmi	r0, r0, #4
 8023fac:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023fb0:	b2c0      	uxtb	r0, r0
 8023fb2:	900a      	str	r0, [sp, #40]	; 0x28
 8023fb4:	1c58      	adds	r0, r3, #1
 8023fb6:	0843      	lsrs	r3, r0, #1
 8023fb8:	07c2      	lsls	r2, r0, #31
 8023fba:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023fbe:	bf54      	ite	pl
 8023fc0:	f003 030f 	andpl.w	r3, r3, #15
 8023fc4:	111b      	asrmi	r3, r3, #4
 8023fc6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023fca:	b2db      	uxtb	r3, r3
 8023fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8023fce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023fd2:	b289      	uxth	r1, r1
 8023fd4:	fb02 f301 	mul.w	r3, r2, r1
 8023fd8:	0112      	lsls	r2, r2, #4
 8023fda:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023fde:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8023fe2:	1ad2      	subs	r2, r2, r3
 8023fe4:	b289      	uxth	r1, r1
 8023fe6:	b292      	uxth	r2, r2
 8023fe8:	1a40      	subs	r0, r0, r1
 8023fea:	fa1f fe80 	uxth.w	lr, r0
 8023fee:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023ff0:	4342      	muls	r2, r0
 8023ff2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023ff8:	fb01 c102 	mla	r1, r1, r2, ip
 8023ffc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ffe:	fb03 1302 	mla	r3, r3, r2, r1
 8024002:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024006:	b383      	cbz	r3, 802406a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024008:	4ac7      	ldr	r2, [pc, #796]	; (8024328 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 802400a:	2bff      	cmp	r3, #255	; 0xff
 802400c:	6812      	ldr	r2, [r2, #0]
 802400e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8024012:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8024016:	b2d2      	uxtb	r2, r2
 8024018:	f000 80ac 	beq.w	8024174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802401c:	b299      	uxth	r1, r3
 802401e:	43db      	mvns	r3, r3
 8024020:	f897 c000 	ldrb.w	ip, [r7]
 8024024:	fb12 f201 	smulbb	r2, r2, r1
 8024028:	b2db      	uxtb	r3, r3
 802402a:	fb10 f001 	smulbb	r0, r0, r1
 802402e:	fb0c 2203 	mla	r2, ip, r3, r2
 8024032:	fb1e f101 	smulbb	r1, lr, r1
 8024036:	b292      	uxth	r2, r2
 8024038:	f102 0c01 	add.w	ip, r2, #1
 802403c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024040:	1212      	asrs	r2, r2, #8
 8024042:	703a      	strb	r2, [r7, #0]
 8024044:	787a      	ldrb	r2, [r7, #1]
 8024046:	fb02 0003 	mla	r0, r2, r3, r0
 802404a:	b280      	uxth	r0, r0
 802404c:	1c42      	adds	r2, r0, #1
 802404e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024052:	78ba      	ldrb	r2, [r7, #2]
 8024054:	fb02 1303 	mla	r3, r2, r3, r1
 8024058:	1200      	asrs	r0, r0, #8
 802405a:	b29b      	uxth	r3, r3
 802405c:	7078      	strb	r0, [r7, #1]
 802405e:	f103 0e01 	add.w	lr, r3, #1
 8024062:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024066:	121b      	asrs	r3, r3, #8
 8024068:	70bb      	strb	r3, [r7, #2]
 802406a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802406c:	3703      	adds	r7, #3
 802406e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024072:	441d      	add	r5, r3
 8024074:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024076:	441e      	add	r6, r3
 8024078:	e74d      	b.n	8023f16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802407a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802407c:	3c01      	subs	r4, #1
 802407e:	f10b 0b03 	add.w	fp, fp, #3
 8024082:	441d      	add	r5, r3
 8024084:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024086:	441e      	add	r6, r3
 8024088:	e725      	b.n	8023ed6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802408a:	d021      	beq.n	80240d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802408c:	1e63      	subs	r3, r4, #1
 802408e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024090:	fb00 5003 	mla	r0, r0, r3, r5
 8024094:	1400      	asrs	r0, r0, #16
 8024096:	f53f af3a 	bmi.w	8023f0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802409a:	3901      	subs	r1, #1
 802409c:	4288      	cmp	r0, r1
 802409e:	f6bf af36 	bge.w	8023f0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80240a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80240a4:	fb01 6303 	mla	r3, r1, r3, r6
 80240a8:	141b      	asrs	r3, r3, #16
 80240aa:	f53f af30 	bmi.w	8023f0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80240ae:	3a01      	subs	r2, #1
 80240b0:	4293      	cmp	r3, r2
 80240b2:	f6bf af2c 	bge.w	8023f0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80240b6:	f10b 0c03 	add.w	ip, fp, #3
 80240ba:	46a6      	mov	lr, r4
 80240bc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80240c0:	f1be 0f00 	cmp.w	lr, #0
 80240c4:	dc79      	bgt.n	80241ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80240c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80240ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80240ce:	44a3      	add	fp, r4
 80240d0:	9b07      	ldr	r3, [sp, #28]
 80240d2:	2b00      	cmp	r3, #0
 80240d4:	f340 8123 	ble.w	802431e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80240d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80240dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80240de:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80240e2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80240e6:	eef0 6a48 	vmov.f32	s13, s16
 80240ea:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80240ee:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80240f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240f6:	ee16 5a90 	vmov	r5, s13
 80240fa:	eef0 6a68 	vmov.f32	s13, s17
 80240fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024102:	ee16 6a90 	vmov	r6, s13
 8024106:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802410a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802410e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024112:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024116:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802411a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802411e:	ee18 2a10 	vmov	r2, s16
 8024122:	eeb0 8a47 	vmov.f32	s16, s14
 8024126:	fb92 f3f3 	sdiv	r3, r2, r3
 802412a:	ee18 2a90 	vmov	r2, s17
 802412e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024130:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024132:	eef0 8a67 	vmov.f32	s17, s15
 8024136:	fb92 f3f3 	sdiv	r3, r2, r3
 802413a:	9328      	str	r3, [sp, #160]	; 0xa0
 802413c:	9b07      	ldr	r3, [sp, #28]
 802413e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024140:	3b01      	subs	r3, #1
 8024142:	9307      	str	r3, [sp, #28]
 8024144:	bf08      	it	eq
 8024146:	4614      	moveq	r4, r2
 8024148:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802414a:	bf18      	it	ne
 802414c:	461c      	movne	r4, r3
 802414e:	e6b4      	b.n	8023eba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024150:	2900      	cmp	r1, #0
 8024152:	f43f af3c 	beq.w	8023fce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024156:	eb09 0003 	add.w	r0, r9, r3
 802415a:	0843      	lsrs	r3, r0, #1
 802415c:	07c0      	lsls	r0, r0, #31
 802415e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024162:	bf54      	ite	pl
 8024164:	f003 030f 	andpl.w	r3, r3, #15
 8024168:	111b      	asrmi	r3, r3, #4
 802416a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802416e:	b2db      	uxtb	r3, r3
 8024170:	930a      	str	r3, [sp, #40]	; 0x28
 8024172:	e72c      	b.n	8023fce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024174:	703a      	strb	r2, [r7, #0]
 8024176:	7078      	strb	r0, [r7, #1]
 8024178:	f887 e002 	strb.w	lr, [r7, #2]
 802417c:	e775      	b.n	802406a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802417e:	1c5a      	adds	r2, r3, #1
 8024180:	f53f af73 	bmi.w	802406a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024184:	4594      	cmp	ip, r2
 8024186:	f6ff af70 	blt.w	802406a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802418a:	1c42      	adds	r2, r0, #1
 802418c:	f53f af6d 	bmi.w	802406a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024190:	4596      	cmp	lr, r2
 8024192:	f6ff af6a 	blt.w	802406a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024196:	9302      	str	r3, [sp, #8]
 8024198:	fa0f f38e 	sxth.w	r3, lr
 802419c:	9a08      	ldr	r2, [sp, #32]
 802419e:	9301      	str	r3, [sp, #4]
 80241a0:	fa0f f38c 	sxth.w	r3, ip
 80241a4:	9105      	str	r1, [sp, #20]
 80241a6:	4639      	mov	r1, r7
 80241a8:	9300      	str	r3, [sp, #0]
 80241aa:	464b      	mov	r3, r9
 80241ac:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80241b0:	4642      	mov	r2, r8
 80241b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80241b4:	f7ff fd70 	bl	8023c98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80241b8:	e757      	b.n	802406a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80241ba:	142a      	asrs	r2, r5, #16
 80241bc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80241c0:	1433      	asrs	r3, r6, #16
 80241c2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80241c6:	fb09 2303 	mla	r3, r9, r3, r2
 80241ca:	085a      	lsrs	r2, r3, #1
 80241cc:	07d9      	lsls	r1, r3, #31
 80241ce:	f818 2002 	ldrb.w	r2, [r8, r2]
 80241d2:	bf54      	ite	pl
 80241d4:	f002 020f 	andpl.w	r2, r2, #15
 80241d8:	1112      	asrmi	r2, r2, #4
 80241da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80241de:	b2d2      	uxtb	r2, r2
 80241e0:	2800      	cmp	r0, #0
 80241e2:	f000 8085 	beq.w	80242f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80241e6:	f103 0a01 	add.w	sl, r3, #1
 80241ea:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80241ee:	f01a 0f01 	tst.w	sl, #1
 80241f2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80241f6:	bf0c      	ite	eq
 80241f8:	f001 010f 	andeq.w	r1, r1, #15
 80241fc:	1109      	asrne	r1, r1, #4
 80241fe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024202:	b2c9      	uxtb	r1, r1
 8024204:	910f      	str	r1, [sp, #60]	; 0x3c
 8024206:	b1df      	cbz	r7, 8024240 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024208:	444b      	add	r3, r9
 802420a:	0859      	lsrs	r1, r3, #1
 802420c:	f013 0f01 	tst.w	r3, #1
 8024210:	f103 0301 	add.w	r3, r3, #1
 8024214:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024218:	bf0c      	ite	eq
 802421a:	f001 010f 	andeq.w	r1, r1, #15
 802421e:	1109      	asrne	r1, r1, #4
 8024220:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024224:	b2c9      	uxtb	r1, r1
 8024226:	910b      	str	r1, [sp, #44]	; 0x2c
 8024228:	0859      	lsrs	r1, r3, #1
 802422a:	07db      	lsls	r3, r3, #31
 802422c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024230:	bf54      	ite	pl
 8024232:	f001 010f 	andpl.w	r1, r1, #15
 8024236:	1109      	asrmi	r1, r1, #4
 8024238:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802423c:	b2c9      	uxtb	r1, r1
 802423e:	9110      	str	r1, [sp, #64]	; 0x40
 8024240:	b280      	uxth	r0, r0
 8024242:	b2bf      	uxth	r7, r7
 8024244:	fb00 f307 	mul.w	r3, r0, r7
 8024248:	0100      	lsls	r0, r0, #4
 802424a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802424e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024252:	1ac0      	subs	r0, r0, r3
 8024254:	b2bf      	uxth	r7, r7
 8024256:	b280      	uxth	r0, r0
 8024258:	1bc9      	subs	r1, r1, r7
 802425a:	fa1f fa81 	uxth.w	sl, r1
 802425e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024260:	4348      	muls	r0, r1
 8024262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024264:	fb02 020a 	mla	r2, r2, sl, r0
 8024268:	fb07 2701 	mla	r7, r7, r1, r2
 802426c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802426e:	fb03 7302 	mla	r3, r3, r2, r7
 8024272:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024276:	b393      	cbz	r3, 80242de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024278:	4a2b      	ldr	r2, [pc, #172]	; (8024328 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 802427a:	2bff      	cmp	r3, #255	; 0xff
 802427c:	6811      	ldr	r1, [r2, #0]
 802427e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024282:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024286:	b2c9      	uxtb	r1, r1
 8024288:	d042      	beq.n	8024310 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802428a:	b298      	uxth	r0, r3
 802428c:	43db      	mvns	r3, r3
 802428e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024292:	fb11 f100 	smulbb	r1, r1, r0
 8024296:	b2db      	uxtb	r3, r3
 8024298:	fb17 f700 	smulbb	r7, r7, r0
 802429c:	fb02 1103 	mla	r1, r2, r3, r1
 80242a0:	fb1a f000 	smulbb	r0, sl, r0
 80242a4:	b289      	uxth	r1, r1
 80242a6:	1c4a      	adds	r2, r1, #1
 80242a8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80242ac:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80242b0:	fb02 7703 	mla	r7, r2, r3, r7
 80242b4:	1209      	asrs	r1, r1, #8
 80242b6:	b2bf      	uxth	r7, r7
 80242b8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80242bc:	1c7a      	adds	r2, r7, #1
 80242be:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80242c2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80242c6:	fb02 0303 	mla	r3, r2, r3, r0
 80242ca:	123f      	asrs	r7, r7, #8
 80242cc:	b29b      	uxth	r3, r3
 80242ce:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80242d2:	1c5a      	adds	r2, r3, #1
 80242d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80242d8:	121b      	asrs	r3, r3, #8
 80242da:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80242de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80242e0:	f10c 0c03 	add.w	ip, ip, #3
 80242e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80242e8:	441d      	add	r5, r3
 80242ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80242ec:	441e      	add	r6, r3
 80242ee:	e6e7      	b.n	80240c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80242f0:	2f00      	cmp	r7, #0
 80242f2:	d0a5      	beq.n	8024240 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80242f4:	444b      	add	r3, r9
 80242f6:	0859      	lsrs	r1, r3, #1
 80242f8:	07db      	lsls	r3, r3, #31
 80242fa:	f818 1001 	ldrb.w	r1, [r8, r1]
 80242fe:	bf54      	ite	pl
 8024300:	f001 010f 	andpl.w	r1, r1, #15
 8024304:	1109      	asrmi	r1, r1, #4
 8024306:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802430a:	b2c9      	uxtb	r1, r1
 802430c:	910b      	str	r1, [sp, #44]	; 0x2c
 802430e:	e797      	b.n	8024240 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024310:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024314:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024318:	f80c ac01 	strb.w	sl, [ip, #-1]
 802431c:	e7df      	b.n	80242de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802431e:	b013      	add	sp, #76	; 0x4c
 8024320:	ecbd 8b08 	vpop	{d8-d11}
 8024324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024328:	20056720 	.word	0x20056720

0802432c <CRC_Lock>:
 802432c:	4a20      	ldr	r2, [pc, #128]	; (80243b0 <CRC_Lock+0x84>)
 802432e:	b530      	push	{r4, r5, lr}
 8024330:	6813      	ldr	r3, [r2, #0]
 8024332:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024336:	f24c 2540 	movw	r5, #49728	; 0xc240
 802433a:	f023 0301 	bic.w	r3, r3, #1
 802433e:	6013      	str	r3, [r2, #0]
 8024340:	4b1c      	ldr	r3, [pc, #112]	; (80243b4 <CRC_Lock+0x88>)
 8024342:	681a      	ldr	r2, [r3, #0]
 8024344:	4022      	ands	r2, r4
 8024346:	42aa      	cmp	r2, r5
 8024348:	d005      	beq.n	8024356 <CRC_Lock+0x2a>
 802434a:	681b      	ldr	r3, [r3, #0]
 802434c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024350:	4023      	ands	r3, r4
 8024352:	4293      	cmp	r3, r2
 8024354:	d124      	bne.n	80243a0 <CRC_Lock+0x74>
 8024356:	4b18      	ldr	r3, [pc, #96]	; (80243b8 <CRC_Lock+0x8c>)
 8024358:	681b      	ldr	r3, [r3, #0]
 802435a:	bb0b      	cbnz	r3, 80243a0 <CRC_Lock+0x74>
 802435c:	4b17      	ldr	r3, [pc, #92]	; (80243bc <CRC_Lock+0x90>)
 802435e:	681a      	ldr	r2, [r3, #0]
 8024360:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024364:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8024368:	d00d      	beq.n	8024386 <CRC_Lock+0x5a>
 802436a:	681a      	ldr	r2, [r3, #0]
 802436c:	f240 4483 	movw	r4, #1155	; 0x483
 8024370:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024374:	42a2      	cmp	r2, r4
 8024376:	d006      	beq.n	8024386 <CRC_Lock+0x5a>
 8024378:	681b      	ldr	r3, [r3, #0]
 802437a:	f240 4285 	movw	r2, #1157	; 0x485
 802437e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024382:	4293      	cmp	r3, r2
 8024384:	d10c      	bne.n	80243a0 <CRC_Lock+0x74>
 8024386:	4b0e      	ldr	r3, [pc, #56]	; (80243c0 <CRC_Lock+0x94>)
 8024388:	2201      	movs	r2, #1
 802438a:	601a      	str	r2, [r3, #0]
 802438c:	681a      	ldr	r2, [r3, #0]
 802438e:	2a00      	cmp	r2, #0
 8024390:	d1fc      	bne.n	802438c <CRC_Lock+0x60>
 8024392:	4b0c      	ldr	r3, [pc, #48]	; (80243c4 <CRC_Lock+0x98>)
 8024394:	6018      	str	r0, [r3, #0]
 8024396:	6818      	ldr	r0, [r3, #0]
 8024398:	1a43      	subs	r3, r0, r1
 802439a:	4258      	negs	r0, r3
 802439c:	4158      	adcs	r0, r3
 802439e:	bd30      	pop	{r4, r5, pc}
 80243a0:	4b09      	ldr	r3, [pc, #36]	; (80243c8 <CRC_Lock+0x9c>)
 80243a2:	2201      	movs	r2, #1
 80243a4:	601a      	str	r2, [r3, #0]
 80243a6:	681a      	ldr	r2, [r3, #0]
 80243a8:	2a00      	cmp	r2, #0
 80243aa:	d1fc      	bne.n	80243a6 <CRC_Lock+0x7a>
 80243ac:	4b07      	ldr	r3, [pc, #28]	; (80243cc <CRC_Lock+0xa0>)
 80243ae:	e7f1      	b.n	8024394 <CRC_Lock+0x68>
 80243b0:	e0002000 	.word	0xe0002000
 80243b4:	e000ed00 	.word	0xe000ed00
 80243b8:	e0042000 	.word	0xe0042000
 80243bc:	5c001000 	.word	0x5c001000
 80243c0:	58024c08 	.word	0x58024c08
 80243c4:	58024c00 	.word	0x58024c00
 80243c8:	40023008 	.word	0x40023008
 80243cc:	40023000 	.word	0x40023000

080243d0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80243d0:	6101      	str	r1, [r0, #16]
 80243d2:	4770      	bx	lr

080243d4 <_ZN8touchgfx8Gestures4tickEv>:
 80243d4:	7b83      	ldrb	r3, [r0, #14]
 80243d6:	b14b      	cbz	r3, 80243ec <_ZN8touchgfx8Gestures4tickEv+0x18>
 80243d8:	8903      	ldrh	r3, [r0, #8]
 80243da:	3301      	adds	r3, #1
 80243dc:	b29b      	uxth	r3, r3
 80243de:	2b07      	cmp	r3, #7
 80243e0:	8103      	strh	r3, [r0, #8]
 80243e2:	bf81      	itttt	hi
 80243e4:	2300      	movhi	r3, #0
 80243e6:	8143      	strhhi	r3, [r0, #10]
 80243e8:	8183      	strhhi	r3, [r0, #12]
 80243ea:	7383      	strbhi	r3, [r0, #14]
 80243ec:	4770      	bx	lr
	...

080243f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80243f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80243f4:	4604      	mov	r4, r0
 80243f6:	4698      	mov	r8, r3
 80243f8:	8880      	ldrh	r0, [r0, #4]
 80243fa:	4617      	mov	r7, r2
 80243fc:	4b1d      	ldr	r3, [pc, #116]	; (8024474 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80243fe:	460e      	mov	r6, r1
 8024400:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024404:	eba8 0000 	sub.w	r0, r8, r0
 8024408:	9300      	str	r3, [sp, #0]
 802440a:	2300      	movs	r3, #0
 802440c:	b280      	uxth	r0, r0
 802440e:	8aa2      	ldrh	r2, [r4, #20]
 8024410:	f88d 3004 	strb.w	r3, [sp, #4]
 8024414:	b203      	sxth	r3, r0
 8024416:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802441a:	88e1      	ldrh	r1, [r4, #6]
 802441c:	2b00      	cmp	r3, #0
 802441e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024422:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024426:	bfb8      	it	lt
 8024428:	4240      	neglt	r0, r0
 802442a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802442e:	bfb8      	it	lt
 8024430:	b203      	sxthlt	r3, r0
 8024432:	4293      	cmp	r3, r2
 8024434:	dc08      	bgt.n	8024448 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024436:	1a69      	subs	r1, r5, r1
 8024438:	b289      	uxth	r1, r1
 802443a:	b20b      	sxth	r3, r1
 802443c:	2b00      	cmp	r3, #0
 802443e:	bfbc      	itt	lt
 8024440:	4249      	neglt	r1, r1
 8024442:	b20b      	sxthlt	r3, r1
 8024444:	429a      	cmp	r2, r3
 8024446:	da13      	bge.n	8024470 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024448:	6920      	ldr	r0, [r4, #16]
 802444a:	4669      	mov	r1, sp
 802444c:	eba8 0606 	sub.w	r6, r8, r6
 8024450:	1bef      	subs	r7, r5, r7
 8024452:	6803      	ldr	r3, [r0, #0]
 8024454:	685b      	ldr	r3, [r3, #4]
 8024456:	4798      	blx	r3
 8024458:	2300      	movs	r3, #0
 802445a:	2001      	movs	r0, #1
 802445c:	8166      	strh	r6, [r4, #10]
 802445e:	8123      	strh	r3, [r4, #8]
 8024460:	81a7      	strh	r7, [r4, #12]
 8024462:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024466:	80e5      	strh	r5, [r4, #6]
 8024468:	73a0      	strb	r0, [r4, #14]
 802446a:	b004      	add	sp, #16
 802446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024470:	2000      	movs	r0, #0
 8024472:	e7fa      	b.n	802446a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024474:	0802d4bc 	.word	0x0802d4bc

08024478 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024478:	b5f0      	push	{r4, r5, r6, r7, lr}
 802447a:	461e      	mov	r6, r3
 802447c:	1e4b      	subs	r3, r1, #1
 802447e:	b085      	sub	sp, #20
 8024480:	4604      	mov	r4, r0
 8024482:	2b01      	cmp	r3, #1
 8024484:	460d      	mov	r5, r1
 8024486:	4617      	mov	r7, r2
 8024488:	d84b      	bhi.n	8024522 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802448a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802448e:	1cd3      	adds	r3, r2, #3
 8024490:	b29b      	uxth	r3, r3
 8024492:	2b06      	cmp	r3, #6
 8024494:	d916      	bls.n	80244c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024496:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024538 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802449a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802449e:	f8cd c004 	str.w	ip, [sp, #4]
 80244a2:	f04f 0c00 	mov.w	ip, #0
 80244a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80244aa:	6900      	ldr	r0, [r0, #16]
 80244ac:	f8ad 100c 	strh.w	r1, [sp, #12]
 80244b0:	a901      	add	r1, sp, #4
 80244b2:	f88d c008 	strb.w	ip, [sp, #8]
 80244b6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80244ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 80244be:	6803      	ldr	r3, [r0, #0]
 80244c0:	689b      	ldr	r3, [r3, #8]
 80244c2:	4798      	blx	r3
 80244c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80244c8:	1cd3      	adds	r3, r2, #3
 80244ca:	b29b      	uxth	r3, r3
 80244cc:	2b06      	cmp	r3, #6
 80244ce:	d916      	bls.n	80244fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80244d0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024538 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80244d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80244d8:	f8cd c004 	str.w	ip, [sp, #4]
 80244dc:	f04f 0c01 	mov.w	ip, #1
 80244e0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80244e4:	6920      	ldr	r0, [r4, #16]
 80244e6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80244ea:	a901      	add	r1, sp, #4
 80244ec:	f88d c008 	strb.w	ip, [sp, #8]
 80244f0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80244f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80244f8:	6803      	ldr	r3, [r0, #0]
 80244fa:	689b      	ldr	r3, [r3, #8]
 80244fc:	4798      	blx	r3
 80244fe:	4b0d      	ldr	r3, [pc, #52]	; (8024534 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024500:	a901      	add	r1, sp, #4
 8024502:	6920      	ldr	r0, [r4, #16]
 8024504:	9301      	str	r3, [sp, #4]
 8024506:	2300      	movs	r3, #0
 8024508:	f88d 5008 	strb.w	r5, [sp, #8]
 802450c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024510:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024514:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024518:	6803      	ldr	r3, [r0, #0]
 802451a:	681b      	ldr	r3, [r3, #0]
 802451c:	4798      	blx	r3
 802451e:	b005      	add	sp, #20
 8024520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024522:	2900      	cmp	r1, #0
 8024524:	d1eb      	bne.n	80244fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024526:	80a2      	strh	r2, [r4, #4]
 8024528:	80c6      	strh	r6, [r0, #6]
 802452a:	60a1      	str	r1, [r4, #8]
 802452c:	81a1      	strh	r1, [r4, #12]
 802452e:	73a1      	strb	r1, [r4, #14]
 8024530:	e7e5      	b.n	80244fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024532:	bf00      	nop
 8024534:	0802d4a8 	.word	0x0802d4a8
 8024538:	0802d4d0 	.word	0x0802d4d0

0802453c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 802453c:	10c9      	asrs	r1, r1, #3
 802453e:	2900      	cmp	r1, #0
 8024540:	bfb8      	it	lt
 8024542:	4249      	neglt	r1, r1
 8024544:	2801      	cmp	r0, #1
 8024546:	d108      	bne.n	802455a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024548:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802454c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8024550:	4601      	mov	r1, r0
 8024552:	dd02      	ble.n	802455a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024554:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8024558:	4770      	bx	lr
 802455a:	29ff      	cmp	r1, #255	; 0xff
 802455c:	bfa8      	it	ge
 802455e:	21ff      	movge	r1, #255	; 0xff
 8024560:	4608      	mov	r0, r1
 8024562:	4770      	bx	lr

08024564 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8024564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024568:	688c      	ldr	r4, [r1, #8]
 802456a:	b087      	sub	sp, #28
 802456c:	4607      	mov	r7, r0
 802456e:	2c00      	cmp	r4, #0
 8024570:	db2b      	blt.n	80245ca <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024572:	6803      	ldr	r3, [r0, #0]
 8024574:	691a      	ldr	r2, [r3, #16]
 8024576:	42a2      	cmp	r2, r4
 8024578:	dd27      	ble.n	80245ca <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802457a:	685a      	ldr	r2, [r3, #4]
 802457c:	695e      	ldr	r6, [r3, #20]
 802457e:	68cd      	ldr	r5, [r1, #12]
 8024580:	fb06 2604 	mla	r6, r6, r4, r2
 8024584:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8024588:	698a      	ldr	r2, [r1, #24]
 802458a:	f893 a008 	ldrb.w	sl, [r3, #8]
 802458e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8024592:	9205      	str	r2, [sp, #20]
 8024594:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8024598:	9b05      	ldr	r3, [sp, #20]
 802459a:	6839      	ldr	r1, [r7, #0]
 802459c:	eb03 0c02 	add.w	ip, r3, r2
 80245a0:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 80245a4:	68c9      	ldr	r1, [r1, #12]
 80245a6:	1898      	adds	r0, r3, r2
 80245a8:	4288      	cmp	r0, r1
 80245aa:	db02      	blt.n	80245b2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 80245ac:	1a8b      	subs	r3, r1, r2
 80245ae:	2b00      	cmp	r3, #0
 80245b0:	dd09      	ble.n	80245c6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 80245b2:	6878      	ldr	r0, [r7, #4]
 80245b4:	6801      	ldr	r1, [r0, #0]
 80245b6:	9400      	str	r4, [sp, #0]
 80245b8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80245bc:	4653      	mov	r3, sl
 80245be:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80245c2:	4631      	mov	r1, r6
 80245c4:	47d8      	blx	fp
 80245c6:	3d01      	subs	r5, #1
 80245c8:	d1e4      	bne.n	8024594 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80245ca:	b007      	add	sp, #28
 80245cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080245d0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80245d0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80245d4:	b90b      	cbnz	r3, 80245da <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 80245d6:	f001 b991 	b.w	80258fc <_ZN8touchgfx7Outline6lineToEii>
 80245da:	4770      	bx	lr

080245dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80245dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245e0:	4604      	mov	r4, r0
 80245e2:	2600      	movs	r6, #0
 80245e4:	4b8f      	ldr	r3, [pc, #572]	; (8024824 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80245e6:	f100 0518 	add.w	r5, r0, #24
 80245ea:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80245ee:	b086      	sub	sp, #24
 80245f0:	4690      	mov	r8, r2
 80245f2:	e9c0 3100 	strd	r3, r1, [r0]
 80245f6:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80245fa:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80245fe:	4628      	mov	r0, r5
 8024600:	f001 fba0 	bl	8025d44 <_ZN8touchgfx15RenderingBufferC1Ev>
 8024604:	4638      	mov	r0, r7
 8024606:	f000 fb45 	bl	8024c94 <_ZN8touchgfx7OutlineC1Ev>
 802460a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802460e:	f001 fb41 	bl	8025c94 <_ZN8touchgfx8ScanlineC1Ev>
 8024612:	2301      	movs	r3, #1
 8024614:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8024618:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 802461c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8024620:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024624:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8024628:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802462c:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8024630:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8024634:	f7f2 ff36 	bl	80174a4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8024638:	b928      	cbnz	r0, 8024646 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802463a:	4b7b      	ldr	r3, [pc, #492]	; (8024828 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802463c:	212d      	movs	r1, #45	; 0x2d
 802463e:	4a7b      	ldr	r2, [pc, #492]	; (802482c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8024640:	487b      	ldr	r0, [pc, #492]	; (8024830 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8024642:	f001 fccd 	bl	8025fe0 <__assert_func>
 8024646:	f9b8 2000 	ldrsh.w	r2, [r8]
 802464a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802464e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8024652:	4410      	add	r0, r2
 8024654:	9602      	str	r6, [sp, #8]
 8024656:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802465a:	b280      	uxth	r0, r0
 802465c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8024660:	fa0f fa80 	sxth.w	sl, r0
 8024664:	f1ba 0f00 	cmp.w	sl, #0
 8024668:	dd70      	ble.n	802474c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802466a:	4591      	cmp	r9, r2
 802466c:	dd6e      	ble.n	802474c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802466e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8024672:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8024676:	440b      	add	r3, r1
 8024678:	b29b      	uxth	r3, r3
 802467a:	b21e      	sxth	r6, r3
 802467c:	2e00      	cmp	r6, #0
 802467e:	dd65      	ble.n	802474c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024680:	458e      	cmp	lr, r1
 8024682:	dd63      	ble.n	802474c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024684:	45d1      	cmp	r9, sl
 8024686:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802468a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802468e:	bfb8      	it	lt
 8024690:	fa1f f089 	uxthlt.w	r0, r9
 8024694:	45b6      	cmp	lr, r6
 8024696:	f8ad 2008 	strh.w	r2, [sp, #8]
 802469a:	bfb8      	it	lt
 802469c:	fa1f f38e 	uxthlt.w	r3, lr
 80246a0:	1a80      	subs	r0, r0, r2
 80246a2:	f8ad 100a 	strh.w	r1, [sp, #10]
 80246a6:	1a5b      	subs	r3, r3, r1
 80246a8:	f8ad 000c 	strh.w	r0, [sp, #12]
 80246ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80246b0:	f10d 0808 	add.w	r8, sp, #8
 80246b4:	ae04      	add	r6, sp, #16
 80246b6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80246ba:	e886 0003 	stmia.w	r6, {r0, r1}
 80246be:	f8dc 3000 	ldr.w	r3, [ip]
 80246c2:	4660      	mov	r0, ip
 80246c4:	4631      	mov	r1, r6
 80246c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80246c8:	4798      	blx	r3
 80246ca:	6861      	ldr	r1, [r4, #4]
 80246cc:	4640      	mov	r0, r8
 80246ce:	3104      	adds	r1, #4
 80246d0:	f7f4 fa02 	bl	8018ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80246d4:	4630      	mov	r0, r6
 80246d6:	f7f4 fa17 	bl	8018b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80246da:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80246de:	f7f2 fe71 	bl	80173c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80246e2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80246e6:	4638      	mov	r0, r7
 80246e8:	f000 fab0 	bl	8024c4c <_ZN8touchgfx7Outline5resetEv>
 80246ec:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80246f0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80246f4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80246f8:	015b      	lsls	r3, r3, #5
 80246fa:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 80246fe:	0152      	lsls	r2, r2, #5
 8024700:	60e3      	str	r3, [r4, #12]
 8024702:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8024706:	60a2      	str	r2, [r4, #8]
 8024708:	015b      	lsls	r3, r3, #5
 802470a:	6123      	str	r3, [r4, #16]
 802470c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8024710:	015b      	lsls	r3, r3, #5
 8024712:	6163      	str	r3, [r4, #20]
 8024714:	4b47      	ldr	r3, [pc, #284]	; (8024834 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8024716:	6818      	ldr	r0, [r3, #0]
 8024718:	6803      	ldr	r3, [r0, #0]
 802471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802471c:	4798      	blx	r3
 802471e:	4606      	mov	r6, r0
 8024720:	f7e1 fb0a 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8024724:	6803      	ldr	r3, [r0, #0]
 8024726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024728:	4798      	blx	r3
 802472a:	4607      	mov	r7, r0
 802472c:	f7e1 fb04 	bl	8005d38 <_ZN8touchgfx3HAL3lcdEv>
 8024730:	6803      	ldr	r3, [r0, #0]
 8024732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024734:	4798      	blx	r3
 8024736:	280d      	cmp	r0, #13
 8024738:	d854      	bhi.n	80247e4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802473a:	e8df f000 	tbb	[pc, r0]
 802473e:	554b      	.short	0x554b
 8024740:	2b6e0a66 	.word	0x2b6e0a66
 8024744:	5f5f5f3b 	.word	0x5f5f5f3b
 8024748:	6e6e5f5f 	.word	0x6e6e5f5f
 802474c:	2300      	movs	r3, #0
 802474e:	9303      	str	r3, [sp, #12]
 8024750:	e7ae      	b.n	80246b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8024752:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024756:	2108      	movs	r1, #8
 8024758:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802475c:	fb92 f1f1 	sdiv	r1, r2, r1
 8024760:	fb07 1303 	mla	r3, r7, r3, r1
 8024764:	441e      	add	r6, r3
 8024766:	4253      	negs	r3, r2
 8024768:	f002 0207 	and.w	r2, r2, #7
 802476c:	f003 0307 	and.w	r3, r3, #7
 8024770:	bf58      	it	pl
 8024772:	425a      	negpl	r2, r3
 8024774:	b2d2      	uxtb	r2, r2
 8024776:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802477a:	4628      	mov	r0, r5
 802477c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024780:	6721      	str	r1, [r4, #112]	; 0x70
 8024782:	e9cd 1700 	strd	r1, r7, [sp]
 8024786:	4631      	mov	r1, r6
 8024788:	f001 fae8 	bl	8025d5c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802478c:	4620      	mov	r0, r4
 802478e:	b006      	add	sp, #24
 8024790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024794:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024798:	2104      	movs	r1, #4
 802479a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802479e:	fb92 f1f1 	sdiv	r1, r2, r1
 80247a2:	fb07 1303 	mla	r3, r7, r3, r1
 80247a6:	441e      	add	r6, r3
 80247a8:	4253      	negs	r3, r2
 80247aa:	f002 0203 	and.w	r2, r2, #3
 80247ae:	f003 0303 	and.w	r3, r3, #3
 80247b2:	e7dd      	b.n	8024770 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 80247b4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80247b8:	2102      	movs	r1, #2
 80247ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80247be:	2a00      	cmp	r2, #0
 80247c0:	fb92 f1f1 	sdiv	r1, r2, r1
 80247c4:	f002 0201 	and.w	r2, r2, #1
 80247c8:	fb07 1303 	mla	r3, r7, r3, r1
 80247cc:	bfb8      	it	lt
 80247ce:	4252      	neglt	r2, r2
 80247d0:	441e      	add	r6, r3
 80247d2:	e7cf      	b.n	8024774 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 80247d4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80247d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80247dc:	437b      	muls	r3, r7
 80247de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80247e2:	441e      	add	r6, r3
 80247e4:	2200      	movs	r2, #0
 80247e6:	e7c6      	b.n	8024776 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 80247e8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80247ec:	2103      	movs	r1, #3
 80247ee:	fb07 f203 	mul.w	r2, r7, r3
 80247f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80247f6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80247fa:	e7f2      	b.n	80247e2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80247fc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024800:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024804:	fb07 2303 	mla	r3, r7, r3, r2
 8024808:	e7eb      	b.n	80247e2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 802480a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802480e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024812:	437b      	muls	r3, r7
 8024814:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024818:	e7e3      	b.n	80247e2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 802481a:	4b07      	ldr	r3, [pc, #28]	; (8024838 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 802481c:	216c      	movs	r1, #108	; 0x6c
 802481e:	4a03      	ldr	r2, [pc, #12]	; (802482c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8024820:	e70e      	b.n	8024640 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8024822:	bf00      	nop
 8024824:	0802e8ec 	.word	0x0802e8ec
 8024828:	0802e837 	.word	0x0802e837
 802482c:	0802e8f4 	.word	0x0802e8f4
 8024830:	0802e893 	.word	0x0802e893
 8024834:	200566f8 	.word	0x200566f8
 8024838:	0802e8c7 	.word	0x0802e8c7

0802483c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802483c:	6812      	ldr	r2, [r2, #0]
 802483e:	2a00      	cmp	r2, #0
 8024840:	db0b      	blt.n	802485a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8024842:	9800      	ldr	r0, [sp, #0]
 8024844:	6800      	ldr	r0, [r0, #0]
 8024846:	4290      	cmp	r0, r2
 8024848:	bfd4      	ite	le
 802484a:	2002      	movle	r0, #2
 802484c:	2000      	movgt	r0, #0
 802484e:	680a      	ldr	r2, [r1, #0]
 8024850:	2a00      	cmp	r2, #0
 8024852:	da04      	bge.n	802485e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8024854:	f040 0004 	orr.w	r0, r0, #4
 8024858:	4770      	bx	lr
 802485a:	2001      	movs	r0, #1
 802485c:	e7f7      	b.n	802484e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802485e:	681b      	ldr	r3, [r3, #0]
 8024860:	4293      	cmp	r3, r2
 8024862:	bfd8      	it	le
 8024864:	f040 0008 	orrle.w	r0, r0, #8
 8024868:	4770      	bx	lr
	...

0802486c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802486c:	4b07      	ldr	r3, [pc, #28]	; (802488c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802486e:	b510      	push	{r4, lr}
 8024870:	781b      	ldrb	r3, [r3, #0]
 8024872:	2b01      	cmp	r3, #1
 8024874:	d108      	bne.n	8024888 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8024876:	6843      	ldr	r3, [r0, #4]
 8024878:	6814      	ldr	r4, [r2, #0]
 802487a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802487e:	680b      	ldr	r3, [r1, #0]
 8024880:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8024884:	6013      	str	r3, [r2, #0]
 8024886:	600c      	str	r4, [r1, #0]
 8024888:	bd10      	pop	{r4, pc}
 802488a:	bf00      	nop
 802488c:	200566f0 	.word	0x200566f0

08024890 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024892:	b085      	sub	sp, #20
 8024894:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024898:	4604      	mov	r4, r0
 802489a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802489e:	b33b      	cbz	r3, 80248f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80248a0:	aa02      	add	r2, sp, #8
 80248a2:	a903      	add	r1, sp, #12
 80248a4:	f7ff ffe2 	bl	802486c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80248a8:	68a3      	ldr	r3, [r4, #8]
 80248aa:	9e03      	ldr	r6, [sp, #12]
 80248ac:	aa02      	add	r2, sp, #8
 80248ae:	9f02      	ldr	r7, [sp, #8]
 80248b0:	a903      	add	r1, sp, #12
 80248b2:	1af6      	subs	r6, r6, r3
 80248b4:	68e3      	ldr	r3, [r4, #12]
 80248b6:	4620      	mov	r0, r4
 80248b8:	1aff      	subs	r7, r7, r3
 80248ba:	f104 0314 	add.w	r3, r4, #20
 80248be:	9603      	str	r6, [sp, #12]
 80248c0:	9300      	str	r3, [sp, #0]
 80248c2:	f104 0310 	add.w	r3, r4, #16
 80248c6:	9702      	str	r7, [sp, #8]
 80248c8:	f7ff ffb8 	bl	802483c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80248cc:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80248d0:	4605      	mov	r5, r0
 80248d2:	b97b      	cbnz	r3, 80248f4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80248d4:	463a      	mov	r2, r7
 80248d6:	4631      	mov	r1, r6
 80248d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80248dc:	f7ff fe78 	bl	80245d0 <_ZN8touchgfx10Rasterizer6lineToEii>
 80248e0:	9b03      	ldr	r3, [sp, #12]
 80248e2:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80248e6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80248ea:	9b02      	ldr	r3, [sp, #8]
 80248ec:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80248f0:	b005      	add	sp, #20
 80248f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248f4:	b110      	cbz	r0, 80248fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80248f6:	ea13 0200 	ands.w	r2, r3, r0
 80248fa:	d11c      	bne.n	8024936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80248fc:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8024900:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8024904:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8024908:	b188      	cbz	r0, 802492e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802490a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802490e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024912:	b913      	cbnz	r3, 802491a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8024914:	4630      	mov	r0, r6
 8024916:	f001 f821 	bl	802595c <_ZN8touchgfx7Outline6moveToEii>
 802491a:	2300      	movs	r3, #0
 802491c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024920:	2301      	movs	r3, #1
 8024922:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8024926:	4630      	mov	r0, r6
 8024928:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802492c:	e7d6      	b.n	80248dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802492e:	4630      	mov	r0, r6
 8024930:	f7ff fe4e 	bl	80245d0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024934:	e7f7      	b.n	8024926 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8024936:	4615      	mov	r5, r2
 8024938:	e7d2      	b.n	80248e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802493a <_ZN8touchgfx6Canvas5closeEv>:
 802493a:	b538      	push	{r3, r4, r5, lr}
 802493c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8024940:	4604      	mov	r4, r0
 8024942:	b993      	cbnz	r3, 802496a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024944:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8024948:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802494c:	4213      	tst	r3, r2
 802494e:	d10c      	bne.n	802496a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024950:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8024954:	b123      	cbz	r3, 8024960 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8024956:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802495a:	4628      	mov	r0, r5
 802495c:	f7ff fe38 	bl	80245d0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024960:	4628      	mov	r0, r5
 8024962:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8024966:	f7ff fe33 	bl	80245d0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802496a:	2300      	movs	r3, #0
 802496c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024970:	bd38      	pop	{r3, r4, r5, pc}

08024972 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024974:	b085      	sub	sp, #20
 8024976:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802497a:	4604      	mov	r4, r0
 802497c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024980:	b353      	cbz	r3, 80249d8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8024982:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8024986:	b90b      	cbnz	r3, 802498c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8024988:	f7ff ffd7 	bl	802493a <_ZN8touchgfx6Canvas5closeEv>
 802498c:	aa02      	add	r2, sp, #8
 802498e:	a903      	add	r1, sp, #12
 8024990:	4620      	mov	r0, r4
 8024992:	f7ff ff6b 	bl	802486c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024996:	68a3      	ldr	r3, [r4, #8]
 8024998:	9d03      	ldr	r5, [sp, #12]
 802499a:	aa02      	add	r2, sp, #8
 802499c:	9e02      	ldr	r6, [sp, #8]
 802499e:	a903      	add	r1, sp, #12
 80249a0:	1aed      	subs	r5, r5, r3
 80249a2:	68e3      	ldr	r3, [r4, #12]
 80249a4:	4620      	mov	r0, r4
 80249a6:	1af6      	subs	r6, r6, r3
 80249a8:	f104 0314 	add.w	r3, r4, #20
 80249ac:	9503      	str	r5, [sp, #12]
 80249ae:	9300      	str	r3, [sp, #0]
 80249b0:	f104 0310 	add.w	r3, r4, #16
 80249b4:	9602      	str	r6, [sp, #8]
 80249b6:	f7ff ff41 	bl	802483c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80249ba:	4607      	mov	r7, r0
 80249bc:	b170      	cbz	r0, 80249dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80249be:	2301      	movs	r3, #1
 80249c0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80249c4:	9a03      	ldr	r2, [sp, #12]
 80249c6:	9b02      	ldr	r3, [sp, #8]
 80249c8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80249cc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80249d0:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80249d4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80249d8:	b005      	add	sp, #20
 80249da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249dc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80249e0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 80249e4:	b92b      	cbnz	r3, 80249f2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80249e6:	4632      	mov	r2, r6
 80249e8:	4629      	mov	r1, r5
 80249ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80249ee:	f000 ffb5 	bl	802595c <_ZN8touchgfx7Outline6moveToEii>
 80249f2:	2300      	movs	r3, #0
 80249f4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80249f8:	2301      	movs	r3, #1
 80249fa:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80249fe:	e7e1      	b.n	80249c4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08024a00 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8024a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a04:	4604      	mov	r4, r0
 8024a06:	b087      	sub	sp, #28
 8024a08:	9105      	str	r1, [sp, #20]
 8024a0a:	f001 f8ec 	bl	8025be6 <_ZN8touchgfx7Outline8getCellsEv>
 8024a0e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024a12:	4605      	mov	r5, r0
 8024a14:	f1b9 0f00 	cmp.w	r9, #0
 8024a18:	d103      	bne.n	8024a22 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8024a1a:	2001      	movs	r0, #1
 8024a1c:	b007      	add	sp, #28
 8024a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a22:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8024a26:	2e00      	cmp	r6, #0
 8024a28:	d139      	bne.n	8024a9e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8024a2a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8024a2e:	f105 0708 	add.w	r7, r5, #8
 8024a32:	4640      	mov	r0, r8
 8024a34:	f001 f919 	bl	8025c6a <_ZN8touchgfx8Scanline5resetEv>
 8024a38:	f109 33ff 	add.w	r3, r9, #4294967295
 8024a3c:	9303      	str	r3, [sp, #12]
 8024a3e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8024a42:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8024a46:	46da      	mov	sl, fp
 8024a48:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8024a4c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8024a50:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8024a54:	9b03      	ldr	r3, [sp, #12]
 8024a56:	4416      	add	r6, r2
 8024a58:	9504      	str	r5, [sp, #16]
 8024a5a:	463d      	mov	r5, r7
 8024a5c:	3b01      	subs	r3, #1
 8024a5e:	9303      	str	r3, [sp, #12]
 8024a60:	3301      	adds	r3, #1
 8024a62:	d01e      	beq.n	8024aa2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8024a64:	3708      	adds	r7, #8
 8024a66:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8024a6a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8024a6e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8024a72:	4290      	cmp	r0, r2
 8024a74:	d11e      	bne.n	8024ab4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8024a76:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8024a7a:	4411      	add	r1, r2
 8024a7c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024a80:	e7e8      	b.n	8024a54 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8024a82:	1c91      	adds	r1, r2, #2
 8024a84:	f04f 0301 	mov.w	r3, #1
 8024a88:	65e1      	str	r1, [r4, #92]	; 0x5c
 8024a8a:	8053      	strh	r3, [r2, #2]
 8024a8c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8024a8e:	1c91      	adds	r1, r2, #2
 8024a90:	65a1      	str	r1, [r4, #88]	; 0x58
 8024a92:	f8a2 b002 	strh.w	fp, [r2, #2]
 8024a96:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024a98:	3201      	adds	r2, #1
 8024a9a:	6562      	str	r2, [r4, #84]	; 0x54
 8024a9c:	e03a      	b.n	8024b14 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8024a9e:	2000      	movs	r0, #0
 8024aa0:	e7bc      	b.n	8024a1c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024aa2:	b951      	cbnz	r1, 8024aba <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024aa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024aa6:	2b00      	cmp	r3, #0
 8024aa8:	d0b7      	beq.n	8024a1a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024aaa:	4641      	mov	r1, r8
 8024aac:	9805      	ldr	r0, [sp, #20]
 8024aae:	f7ff fd59 	bl	8024564 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024ab2:	e7b2      	b.n	8024a1a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024ab4:	2900      	cmp	r1, #0
 8024ab6:	d035      	beq.n	8024b24 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8024ab8:	9504      	str	r5, [sp, #16]
 8024aba:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8024abe:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024ac2:	f7ff fd3b 	bl	802453c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8024ac6:	4605      	mov	r5, r0
 8024ac8:	b330      	cbz	r0, 8024b18 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024aca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024acc:	b182      	cbz	r2, 8024af0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024ace:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024ad0:	4591      	cmp	r9, r2
 8024ad2:	d00d      	beq.n	8024af0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024ad4:	4641      	mov	r1, r8
 8024ad6:	9805      	ldr	r0, [sp, #20]
 8024ad8:	f7ff fd44 	bl	8024564 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024adc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024ae0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024ae2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8024ae6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8024ae8:	2300      	movs	r3, #0
 8024aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024aec:	6563      	str	r3, [r4, #84]	; 0x54
 8024aee:	65a2      	str	r2, [r4, #88]	; 0x58
 8024af0:	f1bb 0f00 	cmp.w	fp, #0
 8024af4:	db10      	blt.n	8024b18 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024af6:	f7f2 fce3 	bl	80174c0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024afa:	4583      	cmp	fp, r0
 8024afc:	da0c      	bge.n	8024b18 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024afe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024b00:	f802 500b 	strb.w	r5, [r2, fp]
 8024b04:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8024b06:	3201      	adds	r2, #1
 8024b08:	4593      	cmp	fp, r2
 8024b0a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024b0c:	d1b9      	bne.n	8024a82 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024b0e:	8811      	ldrh	r1, [r2, #0]
 8024b10:	3101      	adds	r1, #1
 8024b12:	8011      	strh	r1, [r2, #0]
 8024b14:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8024b18:	9b03      	ldr	r3, [sp, #12]
 8024b1a:	3301      	adds	r3, #1
 8024b1c:	d0c2      	beq.n	8024aa4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8024b1e:	f10b 0a01 	add.w	sl, fp, #1
 8024b22:	9d04      	ldr	r5, [sp, #16]
 8024b24:	f9b5 3000 	ldrsh.w	r3, [r5]
 8024b28:	4553      	cmp	r3, sl
 8024b2a:	dd88      	ble.n	8024a3e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024b2c:	01b1      	lsls	r1, r6, #6
 8024b2e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024b32:	f7ff fd03 	bl	802453c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8024b36:	4683      	mov	fp, r0
 8024b38:	2800      	cmp	r0, #0
 8024b3a:	d080      	beq.n	8024a3e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024b3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024b3e:	b183      	cbz	r3, 8024b62 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024b40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024b42:	4599      	cmp	r9, r3
 8024b44:	d00d      	beq.n	8024b62 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024b46:	4641      	mov	r1, r8
 8024b48:	9805      	ldr	r0, [sp, #20]
 8024b4a:	f7ff fd0b 	bl	8024564 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024b4e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024b52:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8024b56:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8024b58:	65e3      	str	r3, [r4, #92]	; 0x5c
 8024b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024b5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8024b5e:	2300      	movs	r3, #0
 8024b60:	6563      	str	r3, [r4, #84]	; 0x54
 8024b62:	f9b5 3000 	ldrsh.w	r3, [r5]
 8024b66:	464a      	mov	r2, r9
 8024b68:	f8cd b000 	str.w	fp, [sp]
 8024b6c:	4651      	mov	r1, sl
 8024b6e:	eba3 030a 	sub.w	r3, r3, sl
 8024b72:	4640      	mov	r0, r8
 8024b74:	f001 f8a4 	bl	8025cc0 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8024b78:	e761      	b.n	8024a3e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08024b7a <_ZN8touchgfx6Canvas6renderEh>:
 8024b7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024b7c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024b80:	4604      	mov	r4, r0
 8024b82:	460d      	mov	r5, r1
 8024b84:	b913      	cbnz	r3, 8024b8c <_ZN8touchgfx6Canvas6renderEh+0x12>
 8024b86:	2001      	movs	r0, #1
 8024b88:	b003      	add	sp, #12
 8024b8a:	bd30      	pop	{r4, r5, pc}
 8024b8c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8024b90:	2b00      	cmp	r3, #0
 8024b92:	d12f      	bne.n	8024bf4 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8024b94:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8024b98:	2b00      	cmp	r3, #0
 8024b9a:	d0f4      	beq.n	8024b86 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8024b9c:	6840      	ldr	r0, [r0, #4]
 8024b9e:	6803      	ldr	r3, [r0, #0]
 8024ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024ba2:	4798      	blx	r3
 8024ba4:	fb10 f105 	smulbb	r1, r0, r5
 8024ba8:	b288      	uxth	r0, r1
 8024baa:	1c41      	adds	r1, r0, #1
 8024bac:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024bb0:	120d      	asrs	r5, r1, #8
 8024bb2:	d0e8      	beq.n	8024b86 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8024bb4:	4620      	mov	r0, r4
 8024bb6:	f7ff fec0 	bl	802493a <_ZN8touchgfx6Canvas5closeEv>
 8024bba:	6860      	ldr	r0, [r4, #4]
 8024bbc:	6803      	ldr	r3, [r0, #0]
 8024bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024bc0:	4798      	blx	r3
 8024bc2:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 8024bc6:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8024bca:	8082      	strh	r2, [r0, #4]
 8024bcc:	80c3      	strh	r3, [r0, #6]
 8024bce:	6860      	ldr	r0, [r4, #4]
 8024bd0:	6803      	ldr	r3, [r0, #0]
 8024bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024bd4:	4798      	blx	r3
 8024bd6:	7205      	strb	r5, [r0, #8]
 8024bd8:	6860      	ldr	r0, [r4, #4]
 8024bda:	6803      	ldr	r3, [r0, #0]
 8024bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024bde:	4798      	blx	r3
 8024be0:	f104 0318 	add.w	r3, r4, #24
 8024be4:	4669      	mov	r1, sp
 8024be6:	e9cd 3000 	strd	r3, r0, [sp]
 8024bea:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024bee:	f7ff ff07 	bl	8024a00 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8024bf2:	e7c9      	b.n	8024b88 <_ZN8touchgfx6Canvas6renderEh+0xe>
 8024bf4:	2000      	movs	r0, #0
 8024bf6:	e7c7      	b.n	8024b88 <_ZN8touchgfx6Canvas6renderEh+0xe>

08024bf8 <_ZN8touchgfx6CanvasD1Ev>:
 8024bf8:	b538      	push	{r3, r4, r5, lr}
 8024bfa:	4605      	mov	r5, r0
 8024bfc:	4b08      	ldr	r3, [pc, #32]	; (8024c20 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8024bfe:	4604      	mov	r4, r0
 8024c00:	f845 3b30 	str.w	r3, [r5], #48
 8024c04:	4b07      	ldr	r3, [pc, #28]	; (8024c24 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8024c06:	6818      	ldr	r0, [r3, #0]
 8024c08:	6803      	ldr	r3, [r0, #0]
 8024c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c0c:	4798      	blx	r3
 8024c0e:	4628      	mov	r0, r5
 8024c10:	f000 f814 	bl	8024c3c <_ZN8touchgfx7OutlineD1Ev>
 8024c14:	f104 0018 	add.w	r0, r4, #24
 8024c18:	f001 f88b 	bl	8025d32 <_ZN8touchgfx15RenderingBufferD1Ev>
 8024c1c:	4620      	mov	r0, r4
 8024c1e:	bd38      	pop	{r3, r4, r5, pc}
 8024c20:	0802e8ec 	.word	0x0802e8ec
 8024c24:	200566f8 	.word	0x200566f8

08024c28 <_ZN8touchgfx6CanvasD0Ev>:
 8024c28:	b510      	push	{r4, lr}
 8024c2a:	4604      	mov	r4, r0
 8024c2c:	f7ff ffe4 	bl	8024bf8 <_ZN8touchgfx6CanvasD1Ev>
 8024c30:	21bc      	movs	r1, #188	; 0xbc
 8024c32:	4620      	mov	r0, r4
 8024c34:	f001 f89f 	bl	8025d76 <_ZdlPvj>
 8024c38:	4620      	mov	r0, r4
 8024c3a:	bd10      	pop	{r4, pc}

08024c3c <_ZN8touchgfx7OutlineD1Ev>:
 8024c3c:	4770      	bx	lr

08024c3e <_ZN8touchgfx7OutlineD0Ev>:
 8024c3e:	b510      	push	{r4, lr}
 8024c40:	4604      	mov	r4, r0
 8024c42:	2148      	movs	r1, #72	; 0x48
 8024c44:	f001 f897 	bl	8025d76 <_ZdlPvj>
 8024c48:	4620      	mov	r0, r4
 8024c4a:	bd10      	pop	{r4, pc}

08024c4c <_ZN8touchgfx7Outline5resetEv>:
 8024c4c:	b510      	push	{r4, lr}
 8024c4e:	4604      	mov	r4, r0
 8024c50:	f7f2 fc4e 	bl	80174f0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8024c54:	60e0      	str	r0, [r4, #12]
 8024c56:	f7f2 fc51 	bl	80174fc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8024c5a:	68e3      	ldr	r3, [r4, #12]
 8024c5c:	2200      	movs	r2, #0
 8024c5e:	08c0      	lsrs	r0, r0, #3
 8024c60:	6123      	str	r3, [r4, #16]
 8024c62:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024c66:	6060      	str	r0, [r4, #4]
 8024c68:	82a3      	strh	r3, [r4, #20]
 8024c6a:	82e3      	strh	r3, [r4, #22]
 8024c6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024c6e:	60a2      	str	r2, [r4, #8]
 8024c70:	f023 0301 	bic.w	r3, r3, #1
 8024c74:	8322      	strh	r2, [r4, #24]
 8024c76:	8362      	strh	r2, [r4, #26]
 8024c78:	f043 0302 	orr.w	r3, r3, #2
 8024c7c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024c80:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024c82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024c86:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8024c8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024c8e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8024c92:	bd10      	pop	{r4, pc}

08024c94 <_ZN8touchgfx7OutlineC1Ev>:
 8024c94:	4b0f      	ldr	r3, [pc, #60]	; (8024cd4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8024c96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024c9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8024c9e:	b510      	push	{r4, lr}
 8024ca0:	6003      	str	r3, [r0, #0]
 8024ca2:	2300      	movs	r3, #0
 8024ca4:	4604      	mov	r4, r0
 8024ca6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8024caa:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024cae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024cb2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8024cb6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8024cba:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8024cbe:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8024cc2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8024cc6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8024cca:	f7ff ffbf 	bl	8024c4c <_ZN8touchgfx7Outline5resetEv>
 8024cce:	4620      	mov	r0, r4
 8024cd0:	bd10      	pop	{r4, pc}
 8024cd2:	bf00      	nop
 8024cd4:	0802e9bc 	.word	0x0802e9bc

08024cd8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8024cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cdc:	b095      	sub	sp, #84	; 0x54
 8024cde:	4604      	mov	r4, r0
 8024ce0:	1155      	asrs	r5, r2, #5
 8024ce2:	f002 061f 	and.w	r6, r2, #31
 8024ce6:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024ce8:	1157      	asrs	r7, r2, #5
 8024cea:	9304      	str	r3, [sp, #16]
 8024cec:	1153      	asrs	r3, r2, #5
 8024cee:	9300      	str	r3, [sp, #0]
 8024cf0:	1143      	asrs	r3, r0, #5
 8024cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8024cf4:	f000 031f 	and.w	r3, r0, #31
 8024cf8:	9303      	str	r3, [sp, #12]
 8024cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024cfc:	42ab      	cmp	r3, r5
 8024cfe:	bfc8      	it	gt
 8024d00:	462b      	movgt	r3, r5
 8024d02:	ea4f 1562 	mov.w	r5, r2, asr #5
 8024d06:	bfc8      	it	gt
 8024d08:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024d0c:	42ab      	cmp	r3, r5
 8024d0e:	bfd8      	it	le
 8024d10:	462b      	movle	r3, r5
 8024d12:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024d16:	bfdc      	itt	le
 8024d18:	3301      	addle	r3, #1
 8024d1a:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024d1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024d1e:	42ab      	cmp	r3, r5
 8024d20:	bfc8      	it	gt
 8024d22:	462b      	movgt	r3, r5
 8024d24:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024d28:	bfc8      	it	gt
 8024d2a:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024d2e:	42ab      	cmp	r3, r5
 8024d30:	bfd8      	it	le
 8024d32:	462b      	movle	r3, r5
 8024d34:	ea4f 1561 	mov.w	r5, r1, asr #5
 8024d38:	bfdc      	itt	le
 8024d3a:	3301      	addle	r3, #1
 8024d3c:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024d3e:	9b04      	ldr	r3, [sp, #16]
 8024d40:	eba3 0a01 	sub.w	sl, r3, r1
 8024d44:	1143      	asrs	r3, r0, #5
 8024d46:	429f      	cmp	r7, r3
 8024d48:	f040 811d 	bne.w	8024f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 8024d4c:	9b04      	ldr	r3, [sp, #16]
 8024d4e:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8024d52:	9b03      	ldr	r3, [sp, #12]
 8024d54:	429e      	cmp	r6, r3
 8024d56:	d131      	bne.n	8024dbc <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8024d58:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024d5c:	fa0f fb8b 	sxth.w	fp, fp
 8024d60:	f9bd 2000 	ldrsh.w	r2, [sp]
 8024d64:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024d68:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 8024d6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024d70:	4281      	cmp	r1, r0
 8024d72:	f000 80e6 	beq.w	8024f42 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024d76:	8b60      	ldrh	r0, [r4, #26]
 8024d78:	8b21      	ldrh	r1, [r4, #24]
 8024d7a:	4301      	orrs	r1, r0
 8024d7c:	d00b      	beq.n	8024d96 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024d7e:	2b00      	cmp	r3, #0
 8024d80:	db09      	blt.n	8024d96 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024d82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d84:	428b      	cmp	r3, r1
 8024d86:	da06      	bge.n	8024d96 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024d88:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024d8c:	4299      	cmp	r1, r3
 8024d8e:	d308      	bcc.n	8024da2 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 8024d90:	2301      	movs	r3, #1
 8024d92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d96:	f8a4 b014 	strh.w	fp, [r4, #20]
 8024d9a:	2300      	movs	r3, #0
 8024d9c:	82e2      	strh	r2, [r4, #22]
 8024d9e:	8323      	strh	r3, [r4, #24]
 8024da0:	e01f      	b.n	8024de2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8024da2:	f104 0314 	add.w	r3, r4, #20
 8024da6:	6925      	ldr	r5, [r4, #16]
 8024da8:	cb03      	ldmia	r3!, {r0, r1}
 8024daa:	6028      	str	r0, [r5, #0]
 8024dac:	6069      	str	r1, [r5, #4]
 8024dae:	6923      	ldr	r3, [r4, #16]
 8024db0:	3308      	adds	r3, #8
 8024db2:	6123      	str	r3, [r4, #16]
 8024db4:	68a3      	ldr	r3, [r4, #8]
 8024db6:	3301      	adds	r3, #1
 8024db8:	60a3      	str	r3, [r4, #8]
 8024dba:	e7ec      	b.n	8024d96 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024dbc:	9b04      	ldr	r3, [sp, #16]
 8024dbe:	45ab      	cmp	fp, r5
 8024dc0:	f001 011f 	and.w	r1, r1, #31
 8024dc4:	8b20      	ldrh	r0, [r4, #24]
 8024dc6:	f003 031f 	and.w	r3, r3, #31
 8024dca:	8b62      	ldrh	r2, [r4, #26]
 8024dcc:	9305      	str	r3, [sp, #20]
 8024dce:	9b03      	ldr	r3, [sp, #12]
 8024dd0:	eba3 0306 	sub.w	r3, r3, r6
 8024dd4:	d107      	bne.n	8024de6 <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 8024dd6:	4418      	add	r0, r3
 8024dd8:	8320      	strh	r0, [r4, #24]
 8024dda:	9805      	ldr	r0, [sp, #20]
 8024ddc:	4401      	add	r1, r0
 8024dde:	fb03 2301 	mla	r3, r3, r1, r2
 8024de2:	8363      	strh	r3, [r4, #26]
 8024de4:	e0ad      	b.n	8024f42 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024de6:	f1ba 0f00 	cmp.w	sl, #0
 8024dea:	db33      	blt.n	8024e54 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 8024dec:	2701      	movs	r7, #1
 8024dee:	f1c1 0c20 	rsb	ip, r1, #32
 8024df2:	9702      	str	r7, [sp, #8]
 8024df4:	2720      	movs	r7, #32
 8024df6:	fb03 f30c 	mul.w	r3, r3, ip
 8024dfa:	9701      	str	r7, [sp, #4]
 8024dfc:	9f01      	ldr	r7, [sp, #4]
 8024dfe:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024e02:	4439      	add	r1, r7
 8024e04:	fb93 fcfa 	sdiv	ip, r3, sl
 8024e08:	fb0a 331c 	mls	r3, sl, ip, r3
 8024e0c:	2b00      	cmp	r3, #0
 8024e0e:	bfbc      	itt	lt
 8024e10:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024e14:	4453      	addlt	r3, sl
 8024e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8024e1a:	9a02      	ldr	r2, [sp, #8]
 8024e1c:	4460      	add	r0, ip
 8024e1e:	4415      	add	r5, r2
 8024e20:	f9bd 2000 	ldrsh.w	r2, [sp]
 8024e24:	b200      	sxth	r0, r0
 8024e26:	0417      	lsls	r7, r2, #16
 8024e28:	9200      	str	r2, [sp, #0]
 8024e2a:	fa0f fe85 	sxth.w	lr, r5
 8024e2e:	8320      	strh	r0, [r4, #24]
 8024e30:	9704      	str	r7, [sp, #16]
 8024e32:	b209      	sxth	r1, r1
 8024e34:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8024e38:	9a04      	ldr	r2, [sp, #16]
 8024e3a:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 8024e3e:	8361      	strh	r1, [r4, #26]
 8024e40:	eb0e 0902 	add.w	r9, lr, r2
 8024e44:	454f      	cmp	r7, r9
 8024e46:	d10d      	bne.n	8024e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8024e48:	4ba0      	ldr	r3, [pc, #640]	; (80250cc <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 8024e4a:	2177      	movs	r1, #119	; 0x77
 8024e4c:	4aa0      	ldr	r2, [pc, #640]	; (80250d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 8024e4e:	48a1      	ldr	r0, [pc, #644]	; (80250d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8024e50:	f001 f8c6 	bl	8025fe0 <__assert_func>
 8024e54:	f04f 37ff 	mov.w	r7, #4294967295
 8024e58:	434b      	muls	r3, r1
 8024e5a:	f1ca 0a00 	rsb	sl, sl, #0
 8024e5e:	9702      	str	r7, [sp, #8]
 8024e60:	2700      	movs	r7, #0
 8024e62:	e7ca      	b.n	8024dfa <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8024e64:	ea50 0201 	orrs.w	r2, r0, r1
 8024e68:	d00c      	beq.n	8024e84 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024e6a:	f1b8 0f00 	cmp.w	r8, #0
 8024e6e:	db09      	blt.n	8024e84 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024e70:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024e72:	4588      	cmp	r8, r1
 8024e74:	da06      	bge.n	8024e84 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024e76:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024e7a:	4288      	cmp	r0, r1
 8024e7c:	d364      	bcc.n	8024f48 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8024e7e:	2101      	movs	r1, #1
 8024e80:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024e84:	2100      	movs	r1, #0
 8024e86:	9a00      	ldr	r2, [sp, #0]
 8024e88:	45ab      	cmp	fp, r5
 8024e8a:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024e8e:	82e2      	strh	r2, [r4, #22]
 8024e90:	4466      	add	r6, ip
 8024e92:	8321      	strh	r1, [r4, #24]
 8024e94:	8361      	strh	r1, [r4, #26]
 8024e96:	d04b      	beq.n	8024f30 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8024e98:	9a03      	ldr	r2, [sp, #12]
 8024e9a:	eba3 030a 	sub.w	r3, r3, sl
 8024e9e:	f04f 0800 	mov.w	r8, #0
 8024ea2:	1b91      	subs	r1, r2, r6
 8024ea4:	448c      	add	ip, r1
 8024ea6:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024eaa:	fb9c f7fa 	sdiv	r7, ip, sl
 8024eae:	fb0a cc17 	mls	ip, sl, r7, ip
 8024eb2:	f1bc 0f00 	cmp.w	ip, #0
 8024eb6:	bfbc      	itt	lt
 8024eb8:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024ebc:	44d4      	addlt	ip, sl
 8024ebe:	1c7a      	adds	r2, r7, #1
 8024ec0:	9207      	str	r2, [sp, #28]
 8024ec2:	eb13 030c 	adds.w	r3, r3, ip
 8024ec6:	9a02      	ldr	r2, [sp, #8]
 8024ec8:	bf54      	ite	pl
 8024eca:	9807      	ldrpl	r0, [sp, #28]
 8024ecc:	4638      	movmi	r0, r7
 8024ece:	4415      	add	r5, r2
 8024ed0:	9a04      	ldr	r2, [sp, #16]
 8024ed2:	fa0f fe80 	sxth.w	lr, r0
 8024ed6:	4406      	add	r6, r0
 8024ed8:	ea4f 1140 	mov.w	r1, r0, lsl #5
 8024edc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024ee0:	fa0f f985 	sxth.w	r9, r5
 8024ee4:	bf58      	it	pl
 8024ee6:	eba3 030a 	subpl.w	r3, r3, sl
 8024eea:	4410      	add	r0, r2
 8024eec:	b209      	sxth	r1, r1
 8024eee:	444a      	add	r2, r9
 8024ef0:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024ef4:	8361      	strh	r1, [r4, #26]
 8024ef6:	4290      	cmp	r0, r2
 8024ef8:	d0a6      	beq.n	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024efa:	ea5e 0201 	orrs.w	r2, lr, r1
 8024efe:	d00d      	beq.n	8024f1c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024f00:	9a00      	ldr	r2, [sp, #0]
 8024f02:	2a00      	cmp	r2, #0
 8024f04:	db0a      	blt.n	8024f1c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024f06:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024f08:	428a      	cmp	r2, r1
 8024f0a:	da07      	bge.n	8024f1c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024f0c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024f10:	4288      	cmp	r0, r1
 8024f12:	d329      	bcc.n	8024f68 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 8024f14:	f04f 0201 	mov.w	r2, #1
 8024f18:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024f1c:	9a00      	ldr	r2, [sp, #0]
 8024f1e:	45ab      	cmp	fp, r5
 8024f20:	f8a4 9014 	strh.w	r9, [r4, #20]
 8024f24:	82e2      	strh	r2, [r4, #22]
 8024f26:	f8a4 8018 	strh.w	r8, [r4, #24]
 8024f2a:	f8a4 801a 	strh.w	r8, [r4, #26]
 8024f2e:	d1c8      	bne.n	8024ec2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8024f30:	9b03      	ldr	r3, [sp, #12]
 8024f32:	9a01      	ldr	r2, [sp, #4]
 8024f34:	1b9e      	subs	r6, r3, r6
 8024f36:	9b05      	ldr	r3, [sp, #20]
 8024f38:	3320      	adds	r3, #32
 8024f3a:	8326      	strh	r6, [r4, #24]
 8024f3c:	1a9b      	subs	r3, r3, r2
 8024f3e:	435e      	muls	r6, r3
 8024f40:	8366      	strh	r6, [r4, #26]
 8024f42:	b015      	add	sp, #84	; 0x54
 8024f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f48:	f104 0714 	add.w	r7, r4, #20
 8024f4c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024f50:	cf03      	ldmia	r7!, {r0, r1}
 8024f52:	f8c8 0000 	str.w	r0, [r8]
 8024f56:	f8c8 1004 	str.w	r1, [r8, #4]
 8024f5a:	6921      	ldr	r1, [r4, #16]
 8024f5c:	3108      	adds	r1, #8
 8024f5e:	6121      	str	r1, [r4, #16]
 8024f60:	68a1      	ldr	r1, [r4, #8]
 8024f62:	3101      	adds	r1, #1
 8024f64:	60a1      	str	r1, [r4, #8]
 8024f66:	e78d      	b.n	8024e84 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024f68:	f104 0e14 	add.w	lr, r4, #20
 8024f6c:	6922      	ldr	r2, [r4, #16]
 8024f6e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024f72:	9206      	str	r2, [sp, #24]
 8024f74:	6010      	str	r0, [r2, #0]
 8024f76:	6051      	str	r1, [r2, #4]
 8024f78:	6921      	ldr	r1, [r4, #16]
 8024f7a:	3108      	adds	r1, #8
 8024f7c:	6121      	str	r1, [r4, #16]
 8024f7e:	68a1      	ldr	r1, [r4, #8]
 8024f80:	3101      	adds	r1, #1
 8024f82:	60a1      	str	r1, [r4, #8]
 8024f84:	e7ca      	b.n	8024f1c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024f86:	eba0 0b02 	sub.w	fp, r0, r2
 8024f8a:	f1ba 0f00 	cmp.w	sl, #0
 8024f8e:	f040 80a3 	bne.w	80250d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8024f92:	f1bb 0f00 	cmp.w	fp, #0
 8024f96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024f9a:	8b62      	ldrh	r2, [r4, #26]
 8024f9c:	b22d      	sxth	r5, r5
 8024f9e:	bfa8      	it	ge
 8024fa0:	f04f 0a20 	movge.w	sl, #32
 8024fa4:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8024fa8:	8b21      	ldrh	r1, [r4, #24]
 8024faa:	bfb8      	it	lt
 8024fac:	f04f 39ff 	movlt.w	r9, #4294967295
 8024fb0:	ebaa 0606 	sub.w	r6, sl, r6
 8024fb4:	bfa8      	it	ge
 8024fb6:	f04f 0901 	movge.w	r9, #1
 8024fba:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8024fbe:	4431      	add	r1, r6
 8024fc0:	fb06 2603 	mla	r6, r6, r3, r2
 8024fc4:	9a00      	ldr	r2, [sp, #0]
 8024fc6:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8024fca:	b209      	sxth	r1, r1
 8024fcc:	444a      	add	r2, r9
 8024fce:	b236      	sxth	r6, r6
 8024fd0:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 8024fd4:	8321      	strh	r1, [r4, #24]
 8024fd6:	b217      	sxth	r7, r2
 8024fd8:	8366      	strh	r6, [r4, #26]
 8024fda:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 8024fde:	45f4      	cmp	ip, lr
 8024fe0:	f43f af32 	beq.w	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024fe4:	4331      	orrs	r1, r6
 8024fe6:	d00b      	beq.n	8025000 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024fe8:	2800      	cmp	r0, #0
 8024fea:	db09      	blt.n	8025000 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024fec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024fee:	4288      	cmp	r0, r1
 8024ff0:	da06      	bge.n	8025000 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024ff2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024ff6:	4288      	cmp	r0, r1
 8024ff8:	d33b      	bcc.n	8025072 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 8024ffa:	2101      	movs	r1, #1
 8024ffc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025000:	f1aa 0610 	sub.w	r6, sl, #16
 8025004:	82e7      	strh	r7, [r4, #22]
 8025006:	2700      	movs	r7, #0
 8025008:	82a5      	strh	r5, [r4, #20]
 802500a:	0076      	lsls	r6, r6, #1
 802500c:	8327      	strh	r7, [r4, #24]
 802500e:	fb06 fc03 	mul.w	ip, r6, r3
 8025012:	b236      	sxth	r6, r6
 8025014:	8367      	strh	r7, [r4, #26]
 8025016:	fa0f fc8c 	sxth.w	ip, ip
 802501a:	ea46 010c 	orr.w	r1, r6, ip
 802501e:	9100      	str	r1, [sp, #0]
 8025020:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025022:	428a      	cmp	r2, r1
 8025024:	d046      	beq.n	80250b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 8025026:	444a      	add	r2, r9
 8025028:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802502c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8025030:	fa0f f882 	sxth.w	r8, r2
 8025034:	8326      	strh	r6, [r4, #24]
 8025036:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802503a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802503e:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 8025042:	4570      	cmp	r0, lr
 8025044:	f43f af00 	beq.w	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025048:	9800      	ldr	r0, [sp, #0]
 802504a:	b160      	cbz	r0, 8025066 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802504c:	2900      	cmp	r1, #0
 802504e:	db0a      	blt.n	8025066 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025050:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8025052:	4281      	cmp	r1, r0
 8025054:	da07      	bge.n	8025066 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025056:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802505a:	4288      	cmp	r0, r1
 802505c:	d319      	bcc.n	8025092 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 802505e:	f04f 0101 	mov.w	r1, #1
 8025062:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025066:	82a5      	strh	r5, [r4, #20]
 8025068:	f8a4 8016 	strh.w	r8, [r4, #22]
 802506c:	8327      	strh	r7, [r4, #24]
 802506e:	8367      	strh	r7, [r4, #26]
 8025070:	e7d6      	b.n	8025020 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 8025072:	f104 0614 	add.w	r6, r4, #20
 8025076:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802507a:	ce03      	ldmia	r6!, {r0, r1}
 802507c:	f8cc 0000 	str.w	r0, [ip]
 8025080:	f8cc 1004 	str.w	r1, [ip, #4]
 8025084:	6921      	ldr	r1, [r4, #16]
 8025086:	3108      	adds	r1, #8
 8025088:	6121      	str	r1, [r4, #16]
 802508a:	68a1      	ldr	r1, [r4, #8]
 802508c:	3101      	adds	r1, #1
 802508e:	60a1      	str	r1, [r4, #8]
 8025090:	e7b6      	b.n	8025000 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8025092:	f104 0e14 	add.w	lr, r4, #20
 8025096:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802509a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802509e:	f8cb 0000 	str.w	r0, [fp]
 80250a2:	f8cb 1004 	str.w	r1, [fp, #4]
 80250a6:	6921      	ldr	r1, [r4, #16]
 80250a8:	3108      	adds	r1, #8
 80250aa:	6121      	str	r1, [r4, #16]
 80250ac:	68a1      	ldr	r1, [r4, #8]
 80250ae:	3101      	adds	r1, #1
 80250b0:	60a1      	str	r1, [r4, #8]
 80250b2:	e7d8      	b.n	8025066 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80250b4:	9a03      	ldr	r2, [sp, #12]
 80250b6:	8b61      	ldrh	r1, [r4, #26]
 80250b8:	f1a2 0e20 	sub.w	lr, r2, #32
 80250bc:	8b22      	ldrh	r2, [r4, #24]
 80250be:	44d6      	add	lr, sl
 80250c0:	4472      	add	r2, lr
 80250c2:	fb0e 1303 	mla	r3, lr, r3, r1
 80250c6:	8322      	strh	r2, [r4, #24]
 80250c8:	e68b      	b.n	8024de2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 80250ca:	bf00      	nop
 80250cc:	0802e943 	.word	0x0802e943
 80250d0:	0802e9c4 	.word	0x0802e9c4
 80250d4:	0802e974 	.word	0x0802e974
 80250d8:	f1bb 0f00 	cmp.w	fp, #0
 80250dc:	f2c0 8124 	blt.w	8025328 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 80250e0:	2201      	movs	r2, #1
 80250e2:	f1c6 0320 	rsb	r3, r6, #32
 80250e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80250e8:	2220      	movs	r2, #32
 80250ea:	fb0a f303 	mul.w	r3, sl, r3
 80250ee:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80250f2:	9202      	str	r2, [sp, #8]
 80250f4:	fb93 fcfb 	sdiv	ip, r3, fp
 80250f8:	fb0b 331c 	mls	r3, fp, ip, r3
 80250fc:	2b00      	cmp	r3, #0
 80250fe:	9308      	str	r3, [sp, #32]
 8025100:	bfbe      	ittt	lt
 8025102:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8025106:	445b      	addlt	r3, fp
 8025108:	9308      	strlt	r3, [sp, #32]
 802510a:	eb0c 0301 	add.w	r3, ip, r1
 802510e:	9301      	str	r3, [sp, #4]
 8025110:	115b      	asrs	r3, r3, #5
 8025112:	9305      	str	r3, [sp, #20]
 8025114:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8025118:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802511c:	461f      	mov	r7, r3
 802511e:	9b02      	ldr	r3, [sp, #8]
 8025120:	42b3      	cmp	r3, r6
 8025122:	f040 8117 	bne.w	8025354 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8025126:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802512a:	f9bd 3000 	ldrsh.w	r3, [sp]
 802512e:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025132:	42b9      	cmp	r1, r7
 8025134:	d016      	beq.n	8025164 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025136:	8b60      	ldrh	r0, [r4, #26]
 8025138:	8b21      	ldrh	r1, [r4, #24]
 802513a:	4301      	orrs	r1, r0
 802513c:	d00d      	beq.n	802515a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802513e:	f1b8 0f00 	cmp.w	r8, #0
 8025142:	db0a      	blt.n	802515a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025144:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025146:	4541      	cmp	r1, r8
 8025148:	dd07      	ble.n	802515a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802514a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802514e:	4288      	cmp	r0, r1
 8025150:	f0c0 80f3 	bcc.w	802533a <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 8025154:	2101      	movs	r1, #1
 8025156:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802515a:	82e3      	strh	r3, [r4, #22]
 802515c:	2300      	movs	r3, #0
 802515e:	82a2      	strh	r2, [r4, #20]
 8025160:	8323      	strh	r3, [r4, #24]
 8025162:	8363      	strh	r3, [r4, #26]
 8025164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025166:	9a00      	ldr	r2, [sp, #0]
 8025168:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802516c:	441a      	add	r2, r3
 802516e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025172:	4691      	mov	r9, r2
 8025174:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8025178:	fa0f f589 	sxth.w	r5, r9
 802517c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8025180:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025184:	4281      	cmp	r1, r0
 8025186:	d015      	beq.n	80251b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8025188:	8b60      	ldrh	r0, [r4, #26]
 802518a:	8b21      	ldrh	r1, [r4, #24]
 802518c:	4301      	orrs	r1, r0
 802518e:	d00c      	beq.n	80251aa <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025190:	2a00      	cmp	r2, #0
 8025192:	db0a      	blt.n	80251aa <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025194:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025196:	428a      	cmp	r2, r1
 8025198:	da07      	bge.n	80251aa <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802519a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802519e:	4291      	cmp	r1, r2
 80251a0:	f0c0 81ae 	bcc.w	8025500 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 80251a4:	2201      	movs	r2, #1
 80251a6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80251aa:	82a3      	strh	r3, [r4, #20]
 80251ac:	2300      	movs	r3, #0
 80251ae:	82e5      	strh	r5, [r4, #22]
 80251b0:	8323      	strh	r3, [r4, #24]
 80251b2:	8363      	strh	r3, [r4, #26]
 80251b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80251b6:	454b      	cmp	r3, r9
 80251b8:	f000 808a 	beq.w	80252d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 80251bc:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80251c0:	fb93 f2fb 	sdiv	r2, r3, fp
 80251c4:	fb0b 3312 	mls	r3, fp, r2, r3
 80251c8:	9205      	str	r2, [sp, #20]
 80251ca:	2b00      	cmp	r3, #0
 80251cc:	9307      	str	r3, [sp, #28]
 80251ce:	da04      	bge.n	80251da <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 80251d0:	1e53      	subs	r3, r2, #1
 80251d2:	9305      	str	r3, [sp, #20]
 80251d4:	9b07      	ldr	r3, [sp, #28]
 80251d6:	445b      	add	r3, fp
 80251d8:	9307      	str	r3, [sp, #28]
 80251da:	9b08      	ldr	r3, [sp, #32]
 80251dc:	f04f 0a00 	mov.w	sl, #0
 80251e0:	eba3 030b 	sub.w	r3, r3, fp
 80251e4:	9308      	str	r3, [sp, #32]
 80251e6:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 80251ea:	f1c3 0320 	rsb	r3, r3, #32
 80251ee:	930a      	str	r3, [sp, #40]	; 0x28
 80251f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80251f2:	9b02      	ldr	r3, [sp, #8]
 80251f4:	1a9b      	subs	r3, r3, r2
 80251f6:	9309      	str	r3, [sp, #36]	; 0x24
 80251f8:	9902      	ldr	r1, [sp, #8]
 80251fa:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80251fe:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8025202:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025206:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802520a:	189b      	adds	r3, r3, r2
 802520c:	9308      	str	r3, [sp, #32]
 802520e:	bf57      	itett	pl
 8025210:	eba3 030b 	subpl.w	r3, r3, fp
 8025214:	9b05      	ldrmi	r3, [sp, #20]
 8025216:	9308      	strpl	r3, [sp, #32]
 8025218:	9b05      	ldrpl	r3, [sp, #20]
 802521a:	bf58      	it	pl
 802521c:	3301      	addpl	r3, #1
 802521e:	9300      	str	r3, [sp, #0]
 8025220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025224:	4413      	add	r3, r2
 8025226:	9301      	str	r3, [sp, #4]
 8025228:	115b      	asrs	r3, r3, #5
 802522a:	9306      	str	r3, [sp, #24]
 802522c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802522e:	428b      	cmp	r3, r1
 8025230:	f040 8180 	bne.w	8025534 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8025234:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8025238:	fa0f f389 	sxth.w	r3, r9
 802523c:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025240:	4541      	cmp	r1, r8
 8025242:	d017      	beq.n	8025274 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025244:	8b60      	ldrh	r0, [r4, #26]
 8025246:	8b21      	ldrh	r1, [r4, #24]
 8025248:	4301      	orrs	r1, r0
 802524a:	d00d      	beq.n	8025268 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802524c:	2e00      	cmp	r6, #0
 802524e:	db0b      	blt.n	8025268 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025250:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025252:	42b1      	cmp	r1, r6
 8025254:	dd08      	ble.n	8025268 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025256:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802525a:	4288      	cmp	r0, r1
 802525c:	f0c0 815d 	bcc.w	802551a <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8025260:	f04f 0101 	mov.w	r1, #1
 8025264:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025268:	82a2      	strh	r2, [r4, #20]
 802526a:	82e3      	strh	r3, [r4, #22]
 802526c:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025270:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025276:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802527a:	4499      	add	r9, r3
 802527c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025280:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8025284:	fa0f f589 	sxth.w	r5, r9
 8025288:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802528c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025290:	4281      	cmp	r1, r0
 8025292:	f43f add9 	beq.w	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025296:	8b60      	ldrh	r0, [r4, #26]
 8025298:	8b21      	ldrh	r1, [r4, #24]
 802529a:	4301      	orrs	r1, r0
 802529c:	d00d      	beq.n	80252ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802529e:	2a00      	cmp	r2, #0
 80252a0:	db0b      	blt.n	80252ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 80252a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80252a4:	428a      	cmp	r2, r1
 80252a6:	da08      	bge.n	80252ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 80252a8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80252ac:	4291      	cmp	r1, r2
 80252ae:	f0c0 8228 	bcc.w	8025702 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 80252b2:	f04f 0201 	mov.w	r2, #1
 80252b6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80252ba:	82a3      	strh	r3, [r4, #20]
 80252bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80252be:	82e5      	strh	r5, [r4, #22]
 80252c0:	454b      	cmp	r3, r9
 80252c2:	f8a4 a018 	strh.w	sl, [r4, #24]
 80252c6:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80252ca:	f8dd c004 	ldr.w	ip, [sp, #4]
 80252ce:	d193      	bne.n	80251f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 80252d0:	9b02      	ldr	r3, [sp, #8]
 80252d2:	f1c3 0e20 	rsb	lr, r3, #32
 80252d6:	9b04      	ldr	r3, [sp, #16]
 80252d8:	ea4f 1b63 	mov.w	fp, r3, asr #5
 80252dc:	9b03      	ldr	r3, [sp, #12]
 80252de:	459e      	cmp	lr, r3
 80252e0:	f040 8229 	bne.w	8025736 <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 80252e4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80252e8:	fa0f f58b 	sxth.w	r5, fp
 80252ec:	fa0f f289 	sxth.w	r2, r9
 80252f0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80252f4:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 80252f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80252fc:	4281      	cmp	r1, r0
 80252fe:	f43f ae20 	beq.w	8024f42 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025302:	8b60      	ldrh	r0, [r4, #26]
 8025304:	8b21      	ldrh	r1, [r4, #24]
 8025306:	4301      	orrs	r1, r0
 8025308:	d00c      	beq.n	8025324 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802530a:	2b00      	cmp	r3, #0
 802530c:	db0a      	blt.n	8025324 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802530e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025310:	428b      	cmp	r3, r1
 8025312:	da07      	bge.n	8025324 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025314:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025318:	4299      	cmp	r1, r3
 802531a:	f0c0 81ff 	bcc.w	802571c <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 802531e:	2301      	movs	r3, #1
 8025320:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025324:	82a5      	strh	r5, [r4, #20]
 8025326:	e538      	b.n	8024d9a <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 8025328:	f04f 32ff 	mov.w	r2, #4294967295
 802532c:	fb0a f306 	mul.w	r3, sl, r6
 8025330:	f1cb 0b00 	rsb	fp, fp, #0
 8025334:	920b      	str	r2, [sp, #44]	; 0x2c
 8025336:	2200      	movs	r2, #0
 8025338:	e6d9      	b.n	80250ee <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 802533a:	f104 0514 	add.w	r5, r4, #20
 802533e:	6926      	ldr	r6, [r4, #16]
 8025340:	cd03      	ldmia	r5!, {r0, r1}
 8025342:	6030      	str	r0, [r6, #0]
 8025344:	6071      	str	r1, [r6, #4]
 8025346:	6921      	ldr	r1, [r4, #16]
 8025348:	3108      	adds	r1, #8
 802534a:	6121      	str	r1, [r4, #16]
 802534c:	68a1      	ldr	r1, [r4, #8]
 802534e:	3101      	adds	r1, #1
 8025350:	60a1      	str	r1, [r4, #8]
 8025352:	e702      	b.n	802515a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025354:	9b01      	ldr	r3, [sp, #4]
 8025356:	f001 011f 	and.w	r1, r1, #31
 802535a:	8b20      	ldrh	r0, [r4, #24]
 802535c:	f003 031f 	and.w	r3, r3, #31
 8025360:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025364:	930d      	str	r3, [sp, #52]	; 0x34
 8025366:	9b02      	ldr	r3, [sp, #8]
 8025368:	1b9a      	subs	r2, r3, r6
 802536a:	9b05      	ldr	r3, [sp, #20]
 802536c:	42ab      	cmp	r3, r5
 802536e:	d107      	bne.n	8025380 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8025370:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025372:	4410      	add	r0, r2
 8025374:	4419      	add	r1, r3
 8025376:	8320      	strh	r0, [r4, #24]
 8025378:	fb02 9201 	mla	r2, r2, r1, r9
 802537c:	8362      	strh	r2, [r4, #26]
 802537e:	e6f1      	b.n	8025164 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025380:	f1bc 0f00 	cmp.w	ip, #0
 8025384:	f2c0 8093 	blt.w	80254ae <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8025388:	f1c1 0320 	rsb	r3, r1, #32
 802538c:	435a      	muls	r2, r3
 802538e:	2301      	movs	r3, #1
 8025390:	9309      	str	r3, [sp, #36]	; 0x24
 8025392:	2320      	movs	r3, #32
 8025394:	9307      	str	r3, [sp, #28]
 8025396:	9b07      	ldr	r3, [sp, #28]
 8025398:	fb92 fefc 	sdiv	lr, r2, ip
 802539c:	fb0c 221e 	mls	r2, ip, lr, r2
 80253a0:	4419      	add	r1, r3
 80253a2:	2a00      	cmp	r2, #0
 80253a4:	bfbc      	itt	lt
 80253a6:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80253aa:	4462      	addlt	r2, ip
 80253ac:	fb0e 9101 	mla	r1, lr, r1, r9
 80253b0:	4470      	add	r0, lr
 80253b2:	b20b      	sxth	r3, r1
 80253b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80253b6:	b200      	sxth	r0, r0
 80253b8:	440d      	add	r5, r1
 80253ba:	f9bd 1000 	ldrsh.w	r1, [sp]
 80253be:	8320      	strh	r0, [r4, #24]
 80253c0:	fa0f f985 	sxth.w	r9, r5
 80253c4:	9106      	str	r1, [sp, #24]
 80253c6:	0409      	lsls	r1, r1, #16
 80253c8:	8363      	strh	r3, [r4, #26]
 80253ca:	910a      	str	r1, [sp, #40]	; 0x28
 80253cc:	4449      	add	r1, r9
 80253ce:	42b9      	cmp	r1, r7
 80253d0:	f43f ad3a 	beq.w	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80253d4:	4303      	orrs	r3, r0
 80253d6:	d00c      	beq.n	80253f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80253d8:	f1b8 0f00 	cmp.w	r8, #0
 80253dc:	db09      	blt.n	80253f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80253de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80253e0:	4543      	cmp	r3, r8
 80253e2:	dd06      	ble.n	80253f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80253e4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80253e8:	4299      	cmp	r1, r3
 80253ea:	d368      	bcc.n	80254be <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 80253ec:	2301      	movs	r3, #1
 80253ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80253f2:	9b06      	ldr	r3, [sp, #24]
 80253f4:	4476      	add	r6, lr
 80253f6:	f8a4 9014 	strh.w	r9, [r4, #20]
 80253fa:	82e3      	strh	r3, [r4, #22]
 80253fc:	2300      	movs	r3, #0
 80253fe:	8323      	strh	r3, [r4, #24]
 8025400:	8363      	strh	r3, [r4, #26]
 8025402:	9b05      	ldr	r3, [sp, #20]
 8025404:	42ab      	cmp	r3, r5
 8025406:	d048      	beq.n	802549a <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 8025408:	9b02      	ldr	r3, [sp, #8]
 802540a:	eba2 020c 	sub.w	r2, r2, ip
 802540e:	1b9b      	subs	r3, r3, r6
 8025410:	4473      	add	r3, lr
 8025412:	015b      	lsls	r3, r3, #5
 8025414:	fb93 f8fc 	sdiv	r8, r3, ip
 8025418:	fb0c 3318 	mls	r3, ip, r8, r3
 802541c:	2b00      	cmp	r3, #0
 802541e:	bfbc      	itt	lt
 8025420:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025424:	4463      	addlt	r3, ip
 8025426:	f108 0101 	add.w	r1, r8, #1
 802542a:	910f      	str	r1, [sp, #60]	; 0x3c
 802542c:	18d2      	adds	r2, r2, r3
 802542e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025430:	bf56      	itet	pl
 8025432:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 8025434:	4640      	movmi	r0, r8
 8025436:	eba2 020c 	subpl.w	r2, r2, ip
 802543a:	fa0f fe80 	sxth.w	lr, r0
 802543e:	4406      	add	r6, r0
 8025440:	0141      	lsls	r1, r0, #5
 8025442:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025444:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025448:	4405      	add	r5, r0
 802544a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802544e:	b209      	sxth	r1, r1
 8025450:	fa0f f985 	sxth.w	r9, r5
 8025454:	4438      	add	r0, r7
 8025456:	8361      	strh	r1, [r4, #26]
 8025458:	444f      	add	r7, r9
 802545a:	42b8      	cmp	r0, r7
 802545c:	f43f acf4 	beq.w	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025460:	ea5e 0101 	orrs.w	r1, lr, r1
 8025464:	d00e      	beq.n	8025484 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025466:	9906      	ldr	r1, [sp, #24]
 8025468:	2900      	cmp	r1, #0
 802546a:	db0b      	blt.n	8025484 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802546c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802546e:	9806      	ldr	r0, [sp, #24]
 8025470:	4288      	cmp	r0, r1
 8025472:	da07      	bge.n	8025484 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025474:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025478:	4288      	cmp	r0, r1
 802547a:	d330      	bcc.n	80254de <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 802547c:	f04f 0101 	mov.w	r1, #1
 8025480:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025484:	9906      	ldr	r1, [sp, #24]
 8025486:	f8a4 9014 	strh.w	r9, [r4, #20]
 802548a:	82e1      	strh	r1, [r4, #22]
 802548c:	f04f 0100 	mov.w	r1, #0
 8025490:	8321      	strh	r1, [r4, #24]
 8025492:	8361      	strh	r1, [r4, #26]
 8025494:	9905      	ldr	r1, [sp, #20]
 8025496:	42a9      	cmp	r1, r5
 8025498:	d1c8      	bne.n	802542c <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 802549a:	9b02      	ldr	r3, [sp, #8]
 802549c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802549e:	1b9e      	subs	r6, r3, r6
 80254a0:	9b07      	ldr	r3, [sp, #28]
 80254a2:	3120      	adds	r1, #32
 80254a4:	8326      	strh	r6, [r4, #24]
 80254a6:	1ac9      	subs	r1, r1, r3
 80254a8:	434e      	muls	r6, r1
 80254aa:	8366      	strh	r6, [r4, #26]
 80254ac:	e65a      	b.n	8025164 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 80254ae:	f04f 33ff 	mov.w	r3, #4294967295
 80254b2:	434a      	muls	r2, r1
 80254b4:	f1cc 0c00 	rsb	ip, ip, #0
 80254b8:	9309      	str	r3, [sp, #36]	; 0x24
 80254ba:	2300      	movs	r3, #0
 80254bc:	e76a      	b.n	8025394 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 80254be:	f104 0314 	add.w	r3, r4, #20
 80254c2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80254c6:	cb03      	ldmia	r3!, {r0, r1}
 80254c8:	f8c8 0000 	str.w	r0, [r8]
 80254cc:	f8c8 1004 	str.w	r1, [r8, #4]
 80254d0:	6923      	ldr	r3, [r4, #16]
 80254d2:	3308      	adds	r3, #8
 80254d4:	6123      	str	r3, [r4, #16]
 80254d6:	68a3      	ldr	r3, [r4, #8]
 80254d8:	3301      	adds	r3, #1
 80254da:	60a3      	str	r3, [r4, #8]
 80254dc:	e789      	b.n	80253f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80254de:	6921      	ldr	r1, [r4, #16]
 80254e0:	f104 0e14 	add.w	lr, r4, #20
 80254e4:	910e      	str	r1, [sp, #56]	; 0x38
 80254e6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80254e8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80254ec:	6038      	str	r0, [r7, #0]
 80254ee:	4638      	mov	r0, r7
 80254f0:	6079      	str	r1, [r7, #4]
 80254f2:	6921      	ldr	r1, [r4, #16]
 80254f4:	3108      	adds	r1, #8
 80254f6:	6121      	str	r1, [r4, #16]
 80254f8:	68a1      	ldr	r1, [r4, #8]
 80254fa:	3101      	adds	r1, #1
 80254fc:	60a1      	str	r1, [r4, #8]
 80254fe:	e7c1      	b.n	8025484 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025500:	f104 0214 	add.w	r2, r4, #20
 8025504:	6926      	ldr	r6, [r4, #16]
 8025506:	ca03      	ldmia	r2!, {r0, r1}
 8025508:	6030      	str	r0, [r6, #0]
 802550a:	6071      	str	r1, [r6, #4]
 802550c:	6922      	ldr	r2, [r4, #16]
 802550e:	3208      	adds	r2, #8
 8025510:	6122      	str	r2, [r4, #16]
 8025512:	68a2      	ldr	r2, [r4, #8]
 8025514:	3201      	adds	r2, #1
 8025516:	60a2      	str	r2, [r4, #8]
 8025518:	e647      	b.n	80251aa <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802551a:	f104 0514 	add.w	r5, r4, #20
 802551e:	6926      	ldr	r6, [r4, #16]
 8025520:	cd03      	ldmia	r5!, {r0, r1}
 8025522:	6030      	str	r0, [r6, #0]
 8025524:	6071      	str	r1, [r6, #4]
 8025526:	6921      	ldr	r1, [r4, #16]
 8025528:	3108      	adds	r1, #8
 802552a:	6121      	str	r1, [r4, #16]
 802552c:	68a1      	ldr	r1, [r4, #8]
 802552e:	3101      	adds	r1, #1
 8025530:	60a1      	str	r1, [r4, #8]
 8025532:	e699      	b.n	8025268 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025534:	9b01      	ldr	r3, [sp, #4]
 8025536:	ea4f 176c 	mov.w	r7, ip, asr #5
 802553a:	8b20      	ldrh	r0, [r4, #24]
 802553c:	f00c 0c1f 	and.w	ip, ip, #31
 8025540:	f003 031f 	and.w	r3, r3, #31
 8025544:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8025548:	9310      	str	r3, [sp, #64]	; 0x40
 802554a:	9b06      	ldr	r3, [sp, #24]
 802554c:	429f      	cmp	r7, r3
 802554e:	d10a      	bne.n	8025566 <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 8025550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025552:	4418      	add	r0, r3
 8025554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025556:	449c      	add	ip, r3
 8025558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802555a:	8320      	strh	r0, [r4, #24]
 802555c:	fb03 ee0c 	mla	lr, r3, ip, lr
 8025560:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025564:	e686      	b.n	8025274 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025566:	9b00      	ldr	r3, [sp, #0]
 8025568:	2b00      	cmp	r3, #0
 802556a:	f2c0 80a0 	blt.w	80256ae <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 802556e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025570:	f1cc 0320 	rsb	r3, ip, #32
 8025574:	434b      	muls	r3, r1
 8025576:	2101      	movs	r1, #1
 8025578:	910e      	str	r1, [sp, #56]	; 0x38
 802557a:	2120      	movs	r1, #32
 802557c:	9a00      	ldr	r2, [sp, #0]
 802557e:	910d      	str	r1, [sp, #52]	; 0x34
 8025580:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025582:	fb93 f5f2 	sdiv	r5, r3, r2
 8025586:	fb02 3315 	mls	r3, r2, r5, r3
 802558a:	448c      	add	ip, r1
 802558c:	2b00      	cmp	r3, #0
 802558e:	bfbc      	itt	lt
 8025590:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8025594:	189b      	addlt	r3, r3, r2
 8025596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025598:	fb05 ec0c 	mla	ip, r5, ip, lr
 802559c:	4428      	add	r0, r5
 802559e:	4417      	add	r7, r2
 80255a0:	fa0f f18c 	sxth.w	r1, ip
 80255a4:	fa0f fc89 	sxth.w	ip, r9
 80255a8:	fa0f fe87 	sxth.w	lr, r7
 80255ac:	8361      	strh	r1, [r4, #26]
 80255ae:	ea4f 420c 	mov.w	r2, ip, lsl #16
 80255b2:	b200      	sxth	r0, r0
 80255b4:	920f      	str	r2, [sp, #60]	; 0x3c
 80255b6:	4472      	add	r2, lr
 80255b8:	8320      	strh	r0, [r4, #24]
 80255ba:	4542      	cmp	r2, r8
 80255bc:	f43f ac44 	beq.w	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80255c0:	ea50 0201 	orrs.w	r2, r0, r1
 80255c4:	d00c      	beq.n	80255e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80255c6:	2e00      	cmp	r6, #0
 80255c8:	db0a      	blt.n	80255e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80255ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80255cc:	42b1      	cmp	r1, r6
 80255ce:	dd07      	ble.n	80255e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80255d0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80255d4:	4288      	cmp	r0, r1
 80255d6:	d375      	bcc.n	80256c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 80255d8:	f04f 0201 	mov.w	r2, #1
 80255dc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80255e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80255e2:	f8a4 e014 	strh.w	lr, [r4, #20]
 80255e6:	1956      	adds	r6, r2, r5
 80255e8:	9a06      	ldr	r2, [sp, #24]
 80255ea:	f8a4 c016 	strh.w	ip, [r4, #22]
 80255ee:	42ba      	cmp	r2, r7
 80255f0:	f8a4 a018 	strh.w	sl, [r4, #24]
 80255f4:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80255f8:	d04c      	beq.n	8025694 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 80255fa:	9a02      	ldr	r2, [sp, #8]
 80255fc:	1b91      	subs	r1, r2, r6
 80255fe:	9a00      	ldr	r2, [sp, #0]
 8025600:	440d      	add	r5, r1
 8025602:	016d      	lsls	r5, r5, #5
 8025604:	fb95 fef2 	sdiv	lr, r5, r2
 8025608:	fb02 551e 	mls	r5, r2, lr, r5
 802560c:	2d00      	cmp	r5, #0
 802560e:	bfbc      	itt	lt
 8025610:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025614:	18ad      	addlt	r5, r5, r2
 8025616:	9a00      	ldr	r2, [sp, #0]
 8025618:	1a9b      	subs	r3, r3, r2
 802561a:	f10e 0201 	add.w	r2, lr, #1
 802561e:	9213      	str	r2, [sp, #76]	; 0x4c
 8025620:	195b      	adds	r3, r3, r5
 8025622:	bf57      	itett	pl
 8025624:	9a00      	ldrpl	r2, [sp, #0]
 8025626:	4670      	movmi	r0, lr
 8025628:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802562a:	1a9b      	subpl	r3, r3, r2
 802562c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802562e:	fa0f f880 	sxth.w	r8, r0
 8025632:	4406      	add	r6, r0
 8025634:	4417      	add	r7, r2
 8025636:	0141      	lsls	r1, r0, #5
 8025638:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802563c:	b23a      	sxth	r2, r7
 802563e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8025642:	b209      	sxth	r1, r1
 8025644:	9211      	str	r2, [sp, #68]	; 0x44
 8025646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025648:	8361      	strh	r1, [r4, #26]
 802564a:	1882      	adds	r2, r0, r2
 802564c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802564e:	9212      	str	r2, [sp, #72]	; 0x48
 8025650:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025652:	4402      	add	r2, r0
 8025654:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025656:	4290      	cmp	r0, r2
 8025658:	f43f abf6 	beq.w	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802565c:	ea58 0201 	orrs.w	r2, r8, r1
 8025660:	d00d      	beq.n	802567e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025662:	f1bc 0f00 	cmp.w	ip, #0
 8025666:	db0a      	blt.n	802567e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025668:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802566a:	458c      	cmp	ip, r1
 802566c:	da07      	bge.n	802567e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802566e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025672:	4288      	cmp	r0, r1
 8025674:	d336      	bcc.n	80256e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 8025676:	f04f 0201 	mov.w	r2, #1
 802567a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802567e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025680:	f8a4 c016 	strh.w	ip, [r4, #22]
 8025684:	82a2      	strh	r2, [r4, #20]
 8025686:	9a06      	ldr	r2, [sp, #24]
 8025688:	f8a4 a018 	strh.w	sl, [r4, #24]
 802568c:	42ba      	cmp	r2, r7
 802568e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025692:	d1c5      	bne.n	8025620 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 8025694:	9b02      	ldr	r3, [sp, #8]
 8025696:	1b9e      	subs	r6, r3, r6
 8025698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802569a:	f103 0c20 	add.w	ip, r3, #32
 802569e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80256a0:	8326      	strh	r6, [r4, #24]
 80256a2:	ebac 0c03 	sub.w	ip, ip, r3
 80256a6:	fb06 f60c 	mul.w	r6, r6, ip
 80256aa:	8366      	strh	r6, [r4, #26]
 80256ac:	e5e2      	b.n	8025274 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 80256ae:	9a00      	ldr	r2, [sp, #0]
 80256b0:	f04f 31ff 	mov.w	r1, #4294967295
 80256b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80256b6:	4252      	negs	r2, r2
 80256b8:	910e      	str	r1, [sp, #56]	; 0x38
 80256ba:	fb03 f30c 	mul.w	r3, r3, ip
 80256be:	2100      	movs	r1, #0
 80256c0:	9200      	str	r2, [sp, #0]
 80256c2:	e75b      	b.n	802557c <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 80256c4:	f104 0614 	add.w	r6, r4, #20
 80256c8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80256cc:	ce03      	ldmia	r6!, {r0, r1}
 80256ce:	f8c8 0000 	str.w	r0, [r8]
 80256d2:	f8c8 1004 	str.w	r1, [r8, #4]
 80256d6:	6921      	ldr	r1, [r4, #16]
 80256d8:	3108      	adds	r1, #8
 80256da:	6121      	str	r1, [r4, #16]
 80256dc:	68a1      	ldr	r1, [r4, #8]
 80256de:	3101      	adds	r1, #1
 80256e0:	60a1      	str	r1, [r4, #8]
 80256e2:	e77d      	b.n	80255e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80256e4:	f104 0814 	add.w	r8, r4, #20
 80256e8:	6922      	ldr	r2, [r4, #16]
 80256ea:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80256ee:	9212      	str	r2, [sp, #72]	; 0x48
 80256f0:	6010      	str	r0, [r2, #0]
 80256f2:	6051      	str	r1, [r2, #4]
 80256f4:	6921      	ldr	r1, [r4, #16]
 80256f6:	3108      	adds	r1, #8
 80256f8:	6121      	str	r1, [r4, #16]
 80256fa:	68a1      	ldr	r1, [r4, #8]
 80256fc:	3101      	adds	r1, #1
 80256fe:	60a1      	str	r1, [r4, #8]
 8025700:	e7bd      	b.n	802567e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025702:	f104 0214 	add.w	r2, r4, #20
 8025706:	6926      	ldr	r6, [r4, #16]
 8025708:	ca03      	ldmia	r2!, {r0, r1}
 802570a:	6030      	str	r0, [r6, #0]
 802570c:	6071      	str	r1, [r6, #4]
 802570e:	6922      	ldr	r2, [r4, #16]
 8025710:	3208      	adds	r2, #8
 8025712:	6122      	str	r2, [r4, #16]
 8025714:	68a2      	ldr	r2, [r4, #8]
 8025716:	3201      	adds	r2, #1
 8025718:	60a2      	str	r2, [r4, #8]
 802571a:	e5ce      	b.n	80252ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802571c:	f104 0314 	add.w	r3, r4, #20
 8025720:	6926      	ldr	r6, [r4, #16]
 8025722:	cb03      	ldmia	r3!, {r0, r1}
 8025724:	6030      	str	r0, [r6, #0]
 8025726:	6071      	str	r1, [r6, #4]
 8025728:	6923      	ldr	r3, [r4, #16]
 802572a:	3308      	adds	r3, #8
 802572c:	6123      	str	r3, [r4, #16]
 802572e:	68a3      	ldr	r3, [r4, #8]
 8025730:	3301      	adds	r3, #1
 8025732:	60a3      	str	r3, [r4, #8]
 8025734:	e5f6      	b.n	8025324 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025736:	9b01      	ldr	r3, [sp, #4]
 8025738:	8b20      	ldrh	r0, [r4, #24]
 802573a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802573e:	f003 021f 	and.w	r2, r3, #31
 8025742:	9b04      	ldr	r3, [sp, #16]
 8025744:	45dc      	cmp	ip, fp
 8025746:	8b66      	ldrh	r6, [r4, #26]
 8025748:	f003 031f 	and.w	r3, r3, #31
 802574c:	9305      	str	r3, [sp, #20]
 802574e:	9b03      	ldr	r3, [sp, #12]
 8025750:	eba3 050e 	sub.w	r5, r3, lr
 8025754:	d108      	bne.n	8025768 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 8025756:	9b05      	ldr	r3, [sp, #20]
 8025758:	4428      	add	r0, r5
 802575a:	441a      	add	r2, r3
 802575c:	8320      	strh	r0, [r4, #24]
 802575e:	fb05 6502 	mla	r5, r5, r2, r6
 8025762:	8365      	strh	r5, [r4, #26]
 8025764:	f7ff bbed 	b.w	8024f42 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025768:	9b04      	ldr	r3, [sp, #16]
 802576a:	9901      	ldr	r1, [sp, #4]
 802576c:	1a5b      	subs	r3, r3, r1
 802576e:	9300      	str	r3, [sp, #0]
 8025770:	f100 809c 	bmi.w	80258ac <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 8025774:	f1c2 0120 	rsb	r1, r2, #32
 8025778:	434d      	muls	r5, r1
 802577a:	2101      	movs	r1, #1
 802577c:	9102      	str	r1, [sp, #8]
 802577e:	2120      	movs	r1, #32
 8025780:	9b00      	ldr	r3, [sp, #0]
 8025782:	9101      	str	r1, [sp, #4]
 8025784:	9901      	ldr	r1, [sp, #4]
 8025786:	fb95 f7f3 	sdiv	r7, r5, r3
 802578a:	fb03 5517 	mls	r5, r3, r7, r5
 802578e:	440a      	add	r2, r1
 8025790:	2d00      	cmp	r5, #0
 8025792:	bfbc      	itt	lt
 8025794:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8025798:	18ed      	addlt	r5, r5, r3
 802579a:	fb07 6202 	mla	r2, r7, r2, r6
 802579e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80257a2:	4438      	add	r0, r7
 80257a4:	b211      	sxth	r1, r2
 80257a6:	9a02      	ldr	r2, [sp, #8]
 80257a8:	b200      	sxth	r0, r0
 80257aa:	4494      	add	ip, r2
 80257ac:	fa0f f289 	sxth.w	r2, r9
 80257b0:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80257b4:	0413      	lsls	r3, r2, #16
 80257b6:	8320      	strh	r0, [r4, #24]
 80257b8:	fa0f f88c 	sxth.w	r8, ip
 80257bc:	8361      	strh	r1, [r4, #26]
 80257be:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 80257c2:	9304      	str	r3, [sp, #16]
 80257c4:	eb08 0a03 	add.w	sl, r8, r3
 80257c8:	45d1      	cmp	r9, sl
 80257ca:	f43f ab3d 	beq.w	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80257ce:	ea50 0301 	orrs.w	r3, r0, r1
 80257d2:	d00b      	beq.n	80257ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80257d4:	2e00      	cmp	r6, #0
 80257d6:	db09      	blt.n	80257ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80257d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80257da:	428e      	cmp	r6, r1
 80257dc:	da06      	bge.n	80257ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80257de:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80257e2:	4288      	cmp	r0, r1
 80257e4:	d36b      	bcc.n	80258be <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 80257e6:	2101      	movs	r1, #1
 80257e8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80257ec:	2100      	movs	r1, #0
 80257ee:	45e3      	cmp	fp, ip
 80257f0:	f8a4 8014 	strh.w	r8, [r4, #20]
 80257f4:	44be      	add	lr, r7
 80257f6:	82e2      	strh	r2, [r4, #22]
 80257f8:	8321      	strh	r1, [r4, #24]
 80257fa:	8361      	strh	r1, [r4, #26]
 80257fc:	d047      	beq.n	802588e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 80257fe:	9b03      	ldr	r3, [sp, #12]
 8025800:	f04f 0900 	mov.w	r9, #0
 8025804:	eba3 060e 	sub.w	r6, r3, lr
 8025808:	9b00      	ldr	r3, [sp, #0]
 802580a:	443e      	add	r6, r7
 802580c:	0176      	lsls	r6, r6, #5
 802580e:	fb96 f7f3 	sdiv	r7, r6, r3
 8025812:	fb03 6617 	mls	r6, r3, r7, r6
 8025816:	428e      	cmp	r6, r1
 8025818:	bfbc      	itt	lt
 802581a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802581e:	18f6      	addlt	r6, r6, r3
 8025820:	9b00      	ldr	r3, [sp, #0]
 8025822:	1aed      	subs	r5, r5, r3
 8025824:	1c7b      	adds	r3, r7, #1
 8025826:	9307      	str	r3, [sp, #28]
 8025828:	19ad      	adds	r5, r5, r6
 802582a:	bf57      	itett	pl
 802582c:	9b00      	ldrpl	r3, [sp, #0]
 802582e:	4638      	movmi	r0, r7
 8025830:	9807      	ldrpl	r0, [sp, #28]
 8025832:	1aed      	subpl	r5, r5, r3
 8025834:	9b02      	ldr	r3, [sp, #8]
 8025836:	fa0f f880 	sxth.w	r8, r0
 802583a:	4486      	add	lr, r0
 802583c:	449c      	add	ip, r3
 802583e:	0141      	lsls	r1, r0, #5
 8025840:	9b04      	ldr	r3, [sp, #16]
 8025842:	fa0f fa8c 	sxth.w	sl, ip
 8025846:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802584a:	b209      	sxth	r1, r1
 802584c:	f8a4 8018 	strh.w	r8, [r4, #24]
 8025850:	4418      	add	r0, r3
 8025852:	4453      	add	r3, sl
 8025854:	8361      	strh	r1, [r4, #26]
 8025856:	4298      	cmp	r0, r3
 8025858:	f43f aaf6 	beq.w	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802585c:	ea58 0301 	orrs.w	r3, r8, r1
 8025860:	d00c      	beq.n	802587c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8025862:	2a00      	cmp	r2, #0
 8025864:	db0a      	blt.n	802587c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8025866:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025868:	428a      	cmp	r2, r1
 802586a:	da07      	bge.n	802587c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802586c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025870:	4288      	cmp	r0, r1
 8025872:	d334      	bcc.n	80258de <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8025874:	f04f 0301 	mov.w	r3, #1
 8025878:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802587c:	45e3      	cmp	fp, ip
 802587e:	f8a4 a014 	strh.w	sl, [r4, #20]
 8025882:	82e2      	strh	r2, [r4, #22]
 8025884:	f8a4 9018 	strh.w	r9, [r4, #24]
 8025888:	f8a4 901a 	strh.w	r9, [r4, #26]
 802588c:	d1cc      	bne.n	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 802588e:	9b03      	ldr	r3, [sp, #12]
 8025890:	9e05      	ldr	r6, [sp, #20]
 8025892:	eba3 0e0e 	sub.w	lr, r3, lr
 8025896:	9b01      	ldr	r3, [sp, #4]
 8025898:	3620      	adds	r6, #32
 802589a:	f8a4 e018 	strh.w	lr, [r4, #24]
 802589e:	1af6      	subs	r6, r6, r3
 80258a0:	fb0e fe06 	mul.w	lr, lr, r6
 80258a4:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80258a8:	f7ff bb4b 	b.w	8024f42 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80258ac:	9b00      	ldr	r3, [sp, #0]
 80258ae:	f04f 31ff 	mov.w	r1, #4294967295
 80258b2:	4355      	muls	r5, r2
 80258b4:	425b      	negs	r3, r3
 80258b6:	9102      	str	r1, [sp, #8]
 80258b8:	2100      	movs	r1, #0
 80258ba:	9300      	str	r3, [sp, #0]
 80258bc:	e760      	b.n	8025780 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 80258be:	f104 0614 	add.w	r6, r4, #20
 80258c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80258c6:	ce03      	ldmia	r6!, {r0, r1}
 80258c8:	f8c9 0000 	str.w	r0, [r9]
 80258cc:	f8c9 1004 	str.w	r1, [r9, #4]
 80258d0:	6921      	ldr	r1, [r4, #16]
 80258d2:	3108      	adds	r1, #8
 80258d4:	6121      	str	r1, [r4, #16]
 80258d6:	68a1      	ldr	r1, [r4, #8]
 80258d8:	3101      	adds	r1, #1
 80258da:	60a1      	str	r1, [r4, #8]
 80258dc:	e786      	b.n	80257ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80258de:	f104 0814 	add.w	r8, r4, #20
 80258e2:	6923      	ldr	r3, [r4, #16]
 80258e4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80258e8:	9306      	str	r3, [sp, #24]
 80258ea:	6018      	str	r0, [r3, #0]
 80258ec:	6059      	str	r1, [r3, #4]
 80258ee:	6921      	ldr	r1, [r4, #16]
 80258f0:	3108      	adds	r1, #8
 80258f2:	6121      	str	r1, [r4, #16]
 80258f4:	68a1      	ldr	r1, [r4, #8]
 80258f6:	3101      	adds	r1, #1
 80258f8:	60a1      	str	r1, [r4, #8]
 80258fa:	e7bf      	b.n	802587c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

080258fc <_ZN8touchgfx7Outline6lineToEii>:
 80258fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80258fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025900:	4604      	mov	r4, r0
 8025902:	460d      	mov	r5, r1
 8025904:	4616      	mov	r6, r2
 8025906:	079b      	lsls	r3, r3, #30
 8025908:	d526      	bpl.n	8025958 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802590a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802590e:	ea85 0001 	eor.w	r0, r5, r1
 8025912:	ea86 0302 	eor.w	r3, r6, r2
 8025916:	4303      	orrs	r3, r0
 8025918:	d01e      	beq.n	8025958 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802591a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802591c:	114b      	asrs	r3, r1, #5
 802591e:	9600      	str	r6, [sp, #0]
 8025920:	4283      	cmp	r3, r0
 8025922:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025924:	bfb8      	it	lt
 8025926:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025928:	3301      	adds	r3, #1
 802592a:	4283      	cmp	r3, r0
 802592c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802592e:	bfc8      	it	gt
 8025930:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025932:	116b      	asrs	r3, r5, #5
 8025934:	4283      	cmp	r3, r0
 8025936:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025938:	bfb8      	it	lt
 802593a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802593c:	3301      	adds	r3, #1
 802593e:	4283      	cmp	r3, r0
 8025940:	4620      	mov	r0, r4
 8025942:	bfc8      	it	gt
 8025944:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025946:	462b      	mov	r3, r5
 8025948:	f7ff f9c6 	bl	8024cd8 <_ZN8touchgfx7Outline10renderLineEiiii>
 802594c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802594e:	f043 0301 	orr.w	r3, r3, #1
 8025952:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8025956:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025958:	b002      	add	sp, #8
 802595a:	bd70      	pop	{r4, r5, r6, pc}

0802595c <_ZN8touchgfx7Outline6moveToEii>:
 802595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802595e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025960:	4615      	mov	r5, r2
 8025962:	4604      	mov	r4, r0
 8025964:	460e      	mov	r6, r1
 8025966:	079a      	lsls	r2, r3, #30
 8025968:	d401      	bmi.n	802596e <_ZN8touchgfx7Outline6moveToEii+0x12>
 802596a:	f7ff f96f 	bl	8024c4c <_ZN8touchgfx7Outline5resetEv>
 802596e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025970:	07db      	lsls	r3, r3, #31
 8025972:	d504      	bpl.n	802597e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8025974:	4620      	mov	r0, r4
 8025976:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802597a:	f7ff ffbf 	bl	80258fc <_ZN8touchgfx7Outline6lineToEii>
 802597e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025982:	f346 1c4f 	sbfx	ip, r6, #5, #16
 8025986:	f345 174f 	sbfx	r7, r5, #5, #16
 802598a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802598e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8025992:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8025996:	428a      	cmp	r2, r1
 8025998:	d015      	beq.n	80259c6 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802599a:	8b61      	ldrh	r1, [r4, #26]
 802599c:	8b22      	ldrh	r2, [r4, #24]
 802599e:	430a      	orrs	r2, r1
 80259a0:	d00b      	beq.n	80259ba <_ZN8touchgfx7Outline6moveToEii+0x5e>
 80259a2:	2b00      	cmp	r3, #0
 80259a4:	db09      	blt.n	80259ba <_ZN8touchgfx7Outline6moveToEii+0x5e>
 80259a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80259a8:	4293      	cmp	r3, r2
 80259aa:	da06      	bge.n	80259ba <_ZN8touchgfx7Outline6moveToEii+0x5e>
 80259ac:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80259b0:	429a      	cmp	r2, r3
 80259b2:	d30d      	bcc.n	80259d0 <_ZN8touchgfx7Outline6moveToEii+0x74>
 80259b4:	2301      	movs	r3, #1
 80259b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80259ba:	2300      	movs	r3, #0
 80259bc:	f8a4 c014 	strh.w	ip, [r4, #20]
 80259c0:	82e7      	strh	r7, [r4, #22]
 80259c2:	8323      	strh	r3, [r4, #24]
 80259c4:	8363      	strh	r3, [r4, #26]
 80259c6:	61e6      	str	r6, [r4, #28]
 80259c8:	62a5      	str	r5, [r4, #40]	; 0x28
 80259ca:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80259ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80259d0:	f104 0314 	add.w	r3, r4, #20
 80259d4:	6922      	ldr	r2, [r4, #16]
 80259d6:	cb03      	ldmia	r3!, {r0, r1}
 80259d8:	6010      	str	r0, [r2, #0]
 80259da:	6051      	str	r1, [r2, #4]
 80259dc:	6923      	ldr	r3, [r4, #16]
 80259de:	3308      	adds	r3, #8
 80259e0:	6123      	str	r3, [r4, #16]
 80259e2:	68a3      	ldr	r3, [r4, #8]
 80259e4:	3301      	adds	r3, #1
 80259e6:	60a3      	str	r3, [r4, #8]
 80259e8:	e7e7      	b.n	80259ba <_ZN8touchgfx7Outline6moveToEii+0x5e>

080259ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80259ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259ee:	b0d1      	sub	sp, #324	; 0x144
 80259f0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80259f4:	466c      	mov	r4, sp
 80259f6:	1a0d      	subs	r5, r1, r0
 80259f8:	f100 0208 	add.w	r2, r0, #8
 80259fc:	2d48      	cmp	r5, #72	; 0x48
 80259fe:	f340 80ba 	ble.w	8025b76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025a02:	112d      	asrs	r5, r5, #4
 8025a04:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8025a08:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8025a0c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8025a10:	f9b0 8000 	ldrsh.w	r8, [r0]
 8025a14:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8025a18:	681e      	ldr	r6, [r3, #0]
 8025a1a:	6006      	str	r6, [r0, #0]
 8025a1c:	685e      	ldr	r6, [r3, #4]
 8025a1e:	6046      	str	r6, [r0, #4]
 8025a20:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025a24:	f8a3 e002 	strh.w	lr, [r3, #2]
 8025a28:	f8a3 c004 	strh.w	ip, [r3, #4]
 8025a2c:	80df      	strh	r7, [r3, #6]
 8025a2e:	f1a1 0308 	sub.w	r3, r1, #8
 8025a32:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8025a36:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8025a3a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8025a3e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025a42:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8025a46:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025a4a:	4565      	cmp	r5, ip
 8025a4c:	da0f      	bge.n	8025a6e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8025a4e:	681d      	ldr	r5, [r3, #0]
 8025a50:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025a54:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8025a58:	6015      	str	r5, [r2, #0]
 8025a5a:	685d      	ldr	r5, [r3, #4]
 8025a5c:	6055      	str	r5, [r2, #4]
 8025a5e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025a62:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025a66:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025a6a:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025a6e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025a72:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025a76:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8025a7a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8025a7e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025a82:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025a86:	45ac      	cmp	ip, r5
 8025a88:	da0d      	bge.n	8025aa6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8025a8a:	6815      	ldr	r5, [r2, #0]
 8025a8c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025a90:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025a94:	6005      	str	r5, [r0, #0]
 8025a96:	6855      	ldr	r5, [r2, #4]
 8025a98:	8107      	strh	r7, [r0, #8]
 8025a9a:	6045      	str	r5, [r0, #4]
 8025a9c:	8146      	strh	r6, [r0, #10]
 8025a9e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8025aa2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8025aa6:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8025aaa:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025aae:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025ab2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025ab6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8025aba:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025abe:	4565      	cmp	r5, ip
 8025ac0:	da0f      	bge.n	8025ae2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025ac2:	681d      	ldr	r5, [r3, #0]
 8025ac4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025ac8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025acc:	6005      	str	r5, [r0, #0]
 8025ace:	685d      	ldr	r5, [r3, #4]
 8025ad0:	6045      	str	r5, [r0, #4]
 8025ad2:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025ad6:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025ada:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025ade:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025ae2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8025ae6:	f102 0508 	add.w	r5, r2, #8
 8025aea:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8025aee:	f9b0 e000 	ldrsh.w	lr, [r0]
 8025af2:	462f      	mov	r7, r5
 8025af4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8025af8:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8025afc:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8025b00:	4556      	cmp	r6, sl
 8025b02:	db18      	blt.n	8025b36 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8025b04:	3b08      	subs	r3, #8
 8025b06:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8025b0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025b0e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8025b12:	45b2      	cmp	sl, r6
 8025b14:	dbf6      	blt.n	8025b04 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8025b16:	42ab      	cmp	r3, r5
 8025b18:	681e      	ldr	r6, [r3, #0]
 8025b1a:	d30e      	bcc.n	8025b3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8025b1c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8025b20:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025b24:	602e      	str	r6, [r5, #0]
 8025b26:	685e      	ldr	r6, [r3, #4]
 8025b28:	606e      	str	r6, [r5, #4]
 8025b2a:	f8a3 9000 	strh.w	r9, [r3]
 8025b2e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8025b32:	809f      	strh	r7, [r3, #4]
 8025b34:	80da      	strh	r2, [r3, #6]
 8025b36:	462a      	mov	r2, r5
 8025b38:	e7d3      	b.n	8025ae2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025b3a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8025b3e:	6006      	str	r6, [r0, #0]
 8025b40:	685e      	ldr	r6, [r3, #4]
 8025b42:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8025b46:	6046      	str	r6, [r0, #4]
 8025b48:	1a1e      	subs	r6, r3, r0
 8025b4a:	80da      	strh	r2, [r3, #6]
 8025b4c:	1b4a      	subs	r2, r1, r5
 8025b4e:	f8a3 e000 	strh.w	lr, [r3]
 8025b52:	10d2      	asrs	r2, r2, #3
 8025b54:	f8a3 c002 	strh.w	ip, [r3, #2]
 8025b58:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025b5c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8025b60:	bfb5      	itete	lt
 8025b62:	e9c4 0300 	strdlt	r0, r3, [r4]
 8025b66:	4607      	movge	r7, r0
 8025b68:	460b      	movlt	r3, r1
 8025b6a:	e9c4 5100 	strdge	r5, r1, [r4]
 8025b6e:	4638      	mov	r0, r7
 8025b70:	3408      	adds	r4, #8
 8025b72:	4619      	mov	r1, r3
 8025b74:	e73f      	b.n	80259f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025b76:	4291      	cmp	r1, r2
 8025b78:	d925      	bls.n	8025bc6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8025b7a:	f1a2 0310 	sub.w	r3, r2, #16
 8025b7e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8025b82:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8025b86:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 8025b8a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8025b8e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8025b92:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025b96:	42ae      	cmp	r6, r5
 8025b98:	da13      	bge.n	8025bc2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8025b9a:	461d      	mov	r5, r3
 8025b9c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8025ba0:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8025ba4:	3b08      	subs	r3, #8
 8025ba6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8025baa:	619e      	str	r6, [r3, #24]
 8025bac:	42a8      	cmp	r0, r5
 8025bae:	686e      	ldr	r6, [r5, #4]
 8025bb0:	f8a3 c010 	strh.w	ip, [r3, #16]
 8025bb4:	61de      	str	r6, [r3, #28]
 8025bb6:	825f      	strh	r7, [r3, #18]
 8025bb8:	f8a3 8014 	strh.w	r8, [r3, #20]
 8025bbc:	f8a3 e016 	strh.w	lr, [r3, #22]
 8025bc0:	d1dd      	bne.n	8025b7e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8025bc2:	3208      	adds	r2, #8
 8025bc4:	e7d7      	b.n	8025b76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025bc6:	466b      	mov	r3, sp
 8025bc8:	429c      	cmp	r4, r3
 8025bca:	d903      	bls.n	8025bd4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8025bcc:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8025bd0:	3c08      	subs	r4, #8
 8025bd2:	e710      	b.n	80259f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025bd4:	b051      	add	sp, #324	; 0x144
 8025bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025bda <_ZN8touchgfx7Outline9sortCellsEv>:
 8025bda:	6881      	ldr	r1, [r0, #8]
 8025bdc:	b111      	cbz	r1, 8025be4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8025bde:	68c0      	ldr	r0, [r0, #12]
 8025be0:	f7ff bf03 	b.w	80259ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8025be4:	4770      	bx	lr

08025be6 <_ZN8touchgfx7Outline8getCellsEv>:
 8025be6:	b510      	push	{r4, lr}
 8025be8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025bea:	4604      	mov	r4, r0
 8025bec:	07da      	lsls	r2, r3, #31
 8025bee:	d507      	bpl.n	8025c00 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8025bf0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025bf4:	f7ff fe82 	bl	80258fc <_ZN8touchgfx7Outline6lineToEii>
 8025bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025bfa:	f023 0301 	bic.w	r3, r3, #1
 8025bfe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025c02:	079b      	lsls	r3, r3, #30
 8025c04:	d51a      	bpl.n	8025c3c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8025c06:	8b62      	ldrh	r2, [r4, #26]
 8025c08:	8b23      	ldrh	r3, [r4, #24]
 8025c0a:	4313      	orrs	r3, r2
 8025c0c:	d00d      	beq.n	8025c2a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025c0e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025c12:	2b00      	cmp	r3, #0
 8025c14:	db09      	blt.n	8025c2a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025c16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025c18:	4293      	cmp	r3, r2
 8025c1a:	da06      	bge.n	8025c2a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025c1c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8025c20:	429a      	cmp	r2, r3
 8025c22:	d80d      	bhi.n	8025c40 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025c24:	2301      	movs	r3, #1
 8025c26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025c2a:	68a0      	ldr	r0, [r4, #8]
 8025c2c:	b138      	cbz	r0, 8025c3e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8025c2e:	4620      	mov	r0, r4
 8025c30:	f7ff ffd3 	bl	8025bda <_ZN8touchgfx7Outline9sortCellsEv>
 8025c34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025c36:	f023 0302 	bic.w	r3, r3, #2
 8025c3a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025c3c:	68e0      	ldr	r0, [r4, #12]
 8025c3e:	bd10      	pop	{r4, pc}
 8025c40:	f104 0314 	add.w	r3, r4, #20
 8025c44:	6922      	ldr	r2, [r4, #16]
 8025c46:	cb03      	ldmia	r3!, {r0, r1}
 8025c48:	6010      	str	r0, [r2, #0]
 8025c4a:	6051      	str	r1, [r2, #4]
 8025c4c:	6923      	ldr	r3, [r4, #16]
 8025c4e:	3308      	adds	r3, #8
 8025c50:	6123      	str	r3, [r4, #16]
 8025c52:	68a3      	ldr	r3, [r4, #8]
 8025c54:	3301      	adds	r3, #1
 8025c56:	60a3      	str	r3, [r4, #8]
 8025c58:	e7e7      	b.n	8025c2a <_ZN8touchgfx7Outline8getCellsEv+0x44>

08025c5a <_ZN8touchgfx8ScanlineD1Ev>:
 8025c5a:	4770      	bx	lr

08025c5c <_ZN8touchgfx8ScanlineD0Ev>:
 8025c5c:	b510      	push	{r4, lr}
 8025c5e:	4604      	mov	r4, r0
 8025c60:	2124      	movs	r1, #36	; 0x24
 8025c62:	f000 f888 	bl	8025d76 <_ZdlPvj>
 8025c66:	4620      	mov	r0, r4
 8025c68:	bd10      	pop	{r4, pc}

08025c6a <_ZN8touchgfx8Scanline5resetEv>:
 8025c6a:	b510      	push	{r4, lr}
 8025c6c:	4604      	mov	r4, r0
 8025c6e:	f7f1 fc2d 	bl	80174cc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8025c72:	61a0      	str	r0, [r4, #24]
 8025c74:	f7f1 fc30 	bl	80174d8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8025c78:	61e0      	str	r0, [r4, #28]
 8025c7a:	f7f1 fc33 	bl	80174e4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8025c7e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025c82:	6220      	str	r0, [r4, #32]
 8025c84:	6160      	str	r0, [r4, #20]
 8025c86:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8025c8a:	69e3      	ldr	r3, [r4, #28]
 8025c8c:	6123      	str	r3, [r4, #16]
 8025c8e:	2300      	movs	r3, #0
 8025c90:	60e3      	str	r3, [r4, #12]
 8025c92:	bd10      	pop	{r4, pc}

08025c94 <_ZN8touchgfx8ScanlineC1Ev>:
 8025c94:	4b09      	ldr	r3, [pc, #36]	; (8025cbc <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 8025c96:	b510      	push	{r4, lr}
 8025c98:	6003      	str	r3, [r0, #0]
 8025c9a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025c9e:	4604      	mov	r4, r0
 8025ca0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8025ca4:	2300      	movs	r3, #0
 8025ca6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025caa:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8025cae:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8025cb2:	f7ff ffda 	bl	8025c6a <_ZN8touchgfx8Scanline5resetEv>
 8025cb6:	4620      	mov	r0, r4
 8025cb8:	bd10      	pop	{r4, pc}
 8025cba:	bf00      	nop
 8025cbc:	0802e9fc 	.word	0x0802e9fc

08025cc0 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8025cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025cc4:	1e0c      	subs	r4, r1, #0
 8025cc6:	4605      	mov	r5, r0
 8025cc8:	4617      	mov	r7, r2
 8025cca:	461e      	mov	r6, r3
 8025ccc:	da03      	bge.n	8025cd6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8025cce:	4426      	add	r6, r4
 8025cd0:	2e01      	cmp	r6, #1
 8025cd2:	d421      	bmi.n	8025d18 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025cd4:	2400      	movs	r4, #0
 8025cd6:	f7f1 fbf3 	bl	80174c0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025cda:	42a0      	cmp	r0, r4
 8025cdc:	dd1c      	ble.n	8025d18 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025cde:	eb04 0806 	add.w	r8, r4, r6
 8025ce2:	f7f1 fbed 	bl	80174c0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025ce6:	4580      	cmp	r8, r0
 8025ce8:	d902      	bls.n	8025cf0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8025cea:	f7f1 fbe9 	bl	80174c0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025cee:	1b06      	subs	r6, r0, r4
 8025cf0:	69a8      	ldr	r0, [r5, #24]
 8025cf2:	4632      	mov	r2, r6
 8025cf4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8025cf8:	4420      	add	r0, r4
 8025cfa:	f7f4 f92f 	bl	8019f5c <_ZN8touchgfx6memsetEPvhm>
 8025cfe:	686b      	ldr	r3, [r5, #4]
 8025d00:	b2b2      	uxth	r2, r6
 8025d02:	3301      	adds	r3, #1
 8025d04:	42a3      	cmp	r3, r4
 8025d06:	696b      	ldr	r3, [r5, #20]
 8025d08:	d108      	bne.n	8025d1c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8025d0a:	8819      	ldrh	r1, [r3, #0]
 8025d0c:	440a      	add	r2, r1
 8025d0e:	801a      	strh	r2, [r3, #0]
 8025d10:	3c01      	subs	r4, #1
 8025d12:	4434      	add	r4, r6
 8025d14:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8025d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d1c:	1c99      	adds	r1, r3, #2
 8025d1e:	6169      	str	r1, [r5, #20]
 8025d20:	805a      	strh	r2, [r3, #2]
 8025d22:	692b      	ldr	r3, [r5, #16]
 8025d24:	1c9a      	adds	r2, r3, #2
 8025d26:	612a      	str	r2, [r5, #16]
 8025d28:	805c      	strh	r4, [r3, #2]
 8025d2a:	68eb      	ldr	r3, [r5, #12]
 8025d2c:	3301      	adds	r3, #1
 8025d2e:	60eb      	str	r3, [r5, #12]
 8025d30:	e7ee      	b.n	8025d10 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08025d32 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8025d32:	4770      	bx	lr

08025d34 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8025d34:	b510      	push	{r4, lr}
 8025d36:	4604      	mov	r4, r0
 8025d38:	2118      	movs	r1, #24
 8025d3a:	f000 f81c 	bl	8025d76 <_ZdlPvj>
 8025d3e:	4620      	mov	r0, r4
 8025d40:	bd10      	pop	{r4, pc}
	...

08025d44 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8025d44:	4a04      	ldr	r2, [pc, #16]	; (8025d58 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8025d46:	6002      	str	r2, [r0, #0]
 8025d48:	2200      	movs	r2, #0
 8025d4a:	6042      	str	r2, [r0, #4]
 8025d4c:	7202      	strb	r2, [r0, #8]
 8025d4e:	6142      	str	r2, [r0, #20]
 8025d50:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8025d54:	4770      	bx	lr
 8025d56:	bf00      	nop
 8025d58:	0802ea0c 	.word	0x0802ea0c

08025d5c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8025d5c:	60c3      	str	r3, [r0, #12]
 8025d5e:	9b00      	ldr	r3, [sp, #0]
 8025d60:	6041      	str	r1, [r0, #4]
 8025d62:	6103      	str	r3, [r0, #16]
 8025d64:	9b01      	ldr	r3, [sp, #4]
 8025d66:	7202      	strb	r2, [r0, #8]
 8025d68:	6143      	str	r3, [r0, #20]
 8025d6a:	4770      	bx	lr

08025d6c <__aeabi_atexit>:
 8025d6c:	460b      	mov	r3, r1
 8025d6e:	4601      	mov	r1, r0
 8025d70:	4618      	mov	r0, r3
 8025d72:	f000 b959 	b.w	8026028 <__cxa_atexit>

08025d76 <_ZdlPvj>:
 8025d76:	f000 b812 	b.w	8025d9e <_ZdlPv>

08025d7a <__cxa_guard_acquire>:
 8025d7a:	6803      	ldr	r3, [r0, #0]
 8025d7c:	07db      	lsls	r3, r3, #31
 8025d7e:	d406      	bmi.n	8025d8e <__cxa_guard_acquire+0x14>
 8025d80:	7843      	ldrb	r3, [r0, #1]
 8025d82:	b103      	cbz	r3, 8025d86 <__cxa_guard_acquire+0xc>
 8025d84:	deff      	udf	#255	; 0xff
 8025d86:	2301      	movs	r3, #1
 8025d88:	7043      	strb	r3, [r0, #1]
 8025d8a:	4618      	mov	r0, r3
 8025d8c:	4770      	bx	lr
 8025d8e:	2000      	movs	r0, #0
 8025d90:	4770      	bx	lr

08025d92 <__cxa_guard_release>:
 8025d92:	2301      	movs	r3, #1
 8025d94:	6003      	str	r3, [r0, #0]
 8025d96:	4770      	bx	lr

08025d98 <__cxa_pure_virtual>:
 8025d98:	b508      	push	{r3, lr}
 8025d9a:	f000 f80f 	bl	8025dbc <_ZSt9terminatev>

08025d9e <_ZdlPv>:
 8025d9e:	f000 b995 	b.w	80260cc <free>

08025da2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025da2:	b508      	push	{r3, lr}
 8025da4:	4780      	blx	r0
 8025da6:	f000 f913 	bl	8025fd0 <abort>
	...

08025dac <_ZSt13get_terminatev>:
 8025dac:	4b02      	ldr	r3, [pc, #8]	; (8025db8 <_ZSt13get_terminatev+0xc>)
 8025dae:	6818      	ldr	r0, [r3, #0]
 8025db0:	f3bf 8f5b 	dmb	ish
 8025db4:	4770      	bx	lr
 8025db6:	bf00      	nop
 8025db8:	20000078 	.word	0x20000078

08025dbc <_ZSt9terminatev>:
 8025dbc:	b508      	push	{r3, lr}
 8025dbe:	f7ff fff5 	bl	8025dac <_ZSt13get_terminatev>
 8025dc2:	f7ff ffee 	bl	8025da2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08025dc8 <ceil>:
 8025dc8:	ee10 1a90 	vmov	r1, s1
 8025dcc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025dd0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8025dd4:	2b13      	cmp	r3, #19
 8025dd6:	b530      	push	{r4, r5, lr}
 8025dd8:	ee10 0a10 	vmov	r0, s0
 8025ddc:	ee10 5a10 	vmov	r5, s0
 8025de0:	dc2f      	bgt.n	8025e42 <ceil+0x7a>
 8025de2:	2b00      	cmp	r3, #0
 8025de4:	da13      	bge.n	8025e0e <ceil+0x46>
 8025de6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8025ea8 <ceil+0xe0>
 8025dea:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025dee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025df6:	dd05      	ble.n	8025e04 <ceil+0x3c>
 8025df8:	2900      	cmp	r1, #0
 8025dfa:	db4c      	blt.n	8025e96 <ceil+0xce>
 8025dfc:	4301      	orrs	r1, r0
 8025dfe:	d04e      	beq.n	8025e9e <ceil+0xd6>
 8025e00:	492b      	ldr	r1, [pc, #172]	; (8025eb0 <ceil+0xe8>)
 8025e02:	2000      	movs	r0, #0
 8025e04:	460b      	mov	r3, r1
 8025e06:	4602      	mov	r2, r0
 8025e08:	ec43 2b10 	vmov	d0, r2, r3
 8025e0c:	e020      	b.n	8025e50 <ceil+0x88>
 8025e0e:	4a29      	ldr	r2, [pc, #164]	; (8025eb4 <ceil+0xec>)
 8025e10:	411a      	asrs	r2, r3
 8025e12:	ea01 0402 	and.w	r4, r1, r2
 8025e16:	4304      	orrs	r4, r0
 8025e18:	d01a      	beq.n	8025e50 <ceil+0x88>
 8025e1a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8025ea8 <ceil+0xe0>
 8025e1e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025e22:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e2a:	ddeb      	ble.n	8025e04 <ceil+0x3c>
 8025e2c:	2900      	cmp	r1, #0
 8025e2e:	bfc2      	ittt	gt
 8025e30:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8025e34:	fa40 f303 	asrgt.w	r3, r0, r3
 8025e38:	18c9      	addgt	r1, r1, r3
 8025e3a:	ea21 0102 	bic.w	r1, r1, r2
 8025e3e:	2000      	movs	r0, #0
 8025e40:	e7e0      	b.n	8025e04 <ceil+0x3c>
 8025e42:	2b33      	cmp	r3, #51	; 0x33
 8025e44:	dd05      	ble.n	8025e52 <ceil+0x8a>
 8025e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025e4a:	d101      	bne.n	8025e50 <ceil+0x88>
 8025e4c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8025e50:	bd30      	pop	{r4, r5, pc}
 8025e52:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8025e56:	f04f 32ff 	mov.w	r2, #4294967295
 8025e5a:	40e2      	lsrs	r2, r4
 8025e5c:	4202      	tst	r2, r0
 8025e5e:	d0f7      	beq.n	8025e50 <ceil+0x88>
 8025e60:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8025ea8 <ceil+0xe0>
 8025e64:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025e68:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e70:	ddc8      	ble.n	8025e04 <ceil+0x3c>
 8025e72:	2900      	cmp	r1, #0
 8025e74:	dd02      	ble.n	8025e7c <ceil+0xb4>
 8025e76:	2b14      	cmp	r3, #20
 8025e78:	d103      	bne.n	8025e82 <ceil+0xba>
 8025e7a:	3101      	adds	r1, #1
 8025e7c:	ea20 0002 	bic.w	r0, r0, r2
 8025e80:	e7c0      	b.n	8025e04 <ceil+0x3c>
 8025e82:	2401      	movs	r4, #1
 8025e84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8025e88:	fa04 f303 	lsl.w	r3, r4, r3
 8025e8c:	4418      	add	r0, r3
 8025e8e:	42a8      	cmp	r0, r5
 8025e90:	bf38      	it	cc
 8025e92:	1909      	addcc	r1, r1, r4
 8025e94:	e7f2      	b.n	8025e7c <ceil+0xb4>
 8025e96:	2000      	movs	r0, #0
 8025e98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8025e9c:	e7b2      	b.n	8025e04 <ceil+0x3c>
 8025e9e:	4608      	mov	r0, r1
 8025ea0:	e7b0      	b.n	8025e04 <ceil+0x3c>
 8025ea2:	bf00      	nop
 8025ea4:	f3af 8000 	nop.w
 8025ea8:	8800759c 	.word	0x8800759c
 8025eac:	7e37e43c 	.word	0x7e37e43c
 8025eb0:	3ff00000 	.word	0x3ff00000
 8025eb4:	000fffff 	.word	0x000fffff

08025eb8 <fmin>:
 8025eb8:	b508      	push	{r3, lr}
 8025eba:	ed2d 8b04 	vpush	{d8-d9}
 8025ebe:	eeb0 8b40 	vmov.f64	d8, d0
 8025ec2:	eeb0 9b41 	vmov.f64	d9, d1
 8025ec6:	f000 f813 	bl	8025ef0 <__fpclassifyd>
 8025eca:	b148      	cbz	r0, 8025ee0 <fmin+0x28>
 8025ecc:	eeb0 0b49 	vmov.f64	d0, d9
 8025ed0:	f000 f80e 	bl	8025ef0 <__fpclassifyd>
 8025ed4:	b130      	cbz	r0, 8025ee4 <fmin+0x2c>
 8025ed6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8025eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ede:	d401      	bmi.n	8025ee4 <fmin+0x2c>
 8025ee0:	eeb0 8b49 	vmov.f64	d8, d9
 8025ee4:	eeb0 0b48 	vmov.f64	d0, d8
 8025ee8:	ecbd 8b04 	vpop	{d8-d9}
 8025eec:	bd08      	pop	{r3, pc}
	...

08025ef0 <__fpclassifyd>:
 8025ef0:	ec51 0b10 	vmov	r0, r1, d0
 8025ef4:	b510      	push	{r4, lr}
 8025ef6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8025efa:	460b      	mov	r3, r1
 8025efc:	d019      	beq.n	8025f32 <__fpclassifyd+0x42>
 8025efe:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8025f02:	490e      	ldr	r1, [pc, #56]	; (8025f3c <__fpclassifyd+0x4c>)
 8025f04:	428a      	cmp	r2, r1
 8025f06:	d90e      	bls.n	8025f26 <__fpclassifyd+0x36>
 8025f08:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8025f0c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8025f10:	428a      	cmp	r2, r1
 8025f12:	d908      	bls.n	8025f26 <__fpclassifyd+0x36>
 8025f14:	4a0a      	ldr	r2, [pc, #40]	; (8025f40 <__fpclassifyd+0x50>)
 8025f16:	4213      	tst	r3, r2
 8025f18:	d007      	beq.n	8025f2a <__fpclassifyd+0x3a>
 8025f1a:	4294      	cmp	r4, r2
 8025f1c:	d107      	bne.n	8025f2e <__fpclassifyd+0x3e>
 8025f1e:	fab0 f080 	clz	r0, r0
 8025f22:	0940      	lsrs	r0, r0, #5
 8025f24:	bd10      	pop	{r4, pc}
 8025f26:	2004      	movs	r0, #4
 8025f28:	e7fc      	b.n	8025f24 <__fpclassifyd+0x34>
 8025f2a:	2003      	movs	r0, #3
 8025f2c:	e7fa      	b.n	8025f24 <__fpclassifyd+0x34>
 8025f2e:	2000      	movs	r0, #0
 8025f30:	e7f8      	b.n	8025f24 <__fpclassifyd+0x34>
 8025f32:	2800      	cmp	r0, #0
 8025f34:	d1ee      	bne.n	8025f14 <__fpclassifyd+0x24>
 8025f36:	2002      	movs	r0, #2
 8025f38:	e7f4      	b.n	8025f24 <__fpclassifyd+0x34>
 8025f3a:	bf00      	nop
 8025f3c:	7fdfffff 	.word	0x7fdfffff
 8025f40:	7ff00000 	.word	0x7ff00000

08025f44 <round>:
 8025f44:	ee10 1a90 	vmov	r1, s1
 8025f48:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8025f4c:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8025f50:	2a13      	cmp	r2, #19
 8025f52:	b510      	push	{r4, lr}
 8025f54:	ee10 3a10 	vmov	r3, s0
 8025f58:	dc19      	bgt.n	8025f8e <round+0x4a>
 8025f5a:	2a00      	cmp	r2, #0
 8025f5c:	da09      	bge.n	8025f72 <round+0x2e>
 8025f5e:	3201      	adds	r2, #1
 8025f60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8025f64:	d103      	bne.n	8025f6e <round+0x2a>
 8025f66:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8025f6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8025f6e:	2000      	movs	r0, #0
 8025f70:	e027      	b.n	8025fc2 <round+0x7e>
 8025f72:	4816      	ldr	r0, [pc, #88]	; (8025fcc <round+0x88>)
 8025f74:	4110      	asrs	r0, r2
 8025f76:	ea01 0400 	and.w	r4, r1, r0
 8025f7a:	4323      	orrs	r3, r4
 8025f7c:	d00e      	beq.n	8025f9c <round+0x58>
 8025f7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8025f82:	fa43 f202 	asr.w	r2, r3, r2
 8025f86:	4411      	add	r1, r2
 8025f88:	ea21 0100 	bic.w	r1, r1, r0
 8025f8c:	e7ef      	b.n	8025f6e <round+0x2a>
 8025f8e:	2a33      	cmp	r2, #51	; 0x33
 8025f90:	dd05      	ble.n	8025f9e <round+0x5a>
 8025f92:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8025f96:	d101      	bne.n	8025f9c <round+0x58>
 8025f98:	ee30 0b00 	vadd.f64	d0, d0, d0
 8025f9c:	bd10      	pop	{r4, pc}
 8025f9e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8025fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8025fa6:	fa20 f404 	lsr.w	r4, r0, r4
 8025faa:	4223      	tst	r3, r4
 8025fac:	d0f6      	beq.n	8025f9c <round+0x58>
 8025fae:	2001      	movs	r0, #1
 8025fb0:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8025fb4:	fa00 f202 	lsl.w	r2, r0, r2
 8025fb8:	189b      	adds	r3, r3, r2
 8025fba:	bf28      	it	cs
 8025fbc:	1809      	addcs	r1, r1, r0
 8025fbe:	ea23 0004 	bic.w	r0, r3, r4
 8025fc2:	460b      	mov	r3, r1
 8025fc4:	4602      	mov	r2, r0
 8025fc6:	ec43 2b10 	vmov	d0, r2, r3
 8025fca:	e7e7      	b.n	8025f9c <round+0x58>
 8025fcc:	000fffff 	.word	0x000fffff

08025fd0 <abort>:
 8025fd0:	b508      	push	{r3, lr}
 8025fd2:	2006      	movs	r0, #6
 8025fd4:	f001 f920 	bl	8027218 <raise>
 8025fd8:	2001      	movs	r0, #1
 8025fda:	f7dc fe21 	bl	8002c20 <_exit>
	...

08025fe0 <__assert_func>:
 8025fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025fe2:	4614      	mov	r4, r2
 8025fe4:	461a      	mov	r2, r3
 8025fe6:	4b09      	ldr	r3, [pc, #36]	; (802600c <__assert_func+0x2c>)
 8025fe8:	681b      	ldr	r3, [r3, #0]
 8025fea:	4605      	mov	r5, r0
 8025fec:	68d8      	ldr	r0, [r3, #12]
 8025fee:	b14c      	cbz	r4, 8026004 <__assert_func+0x24>
 8025ff0:	4b07      	ldr	r3, [pc, #28]	; (8026010 <__assert_func+0x30>)
 8025ff2:	9100      	str	r1, [sp, #0]
 8025ff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025ff8:	4906      	ldr	r1, [pc, #24]	; (8026014 <__assert_func+0x34>)
 8025ffa:	462b      	mov	r3, r5
 8025ffc:	f000 f828 	bl	8026050 <fiprintf>
 8026000:	f7ff ffe6 	bl	8025fd0 <abort>
 8026004:	4b04      	ldr	r3, [pc, #16]	; (8026018 <__assert_func+0x38>)
 8026006:	461c      	mov	r4, r3
 8026008:	e7f3      	b.n	8025ff2 <__assert_func+0x12>
 802600a:	bf00      	nop
 802600c:	2000007c 	.word	0x2000007c
 8026010:	0802ea14 	.word	0x0802ea14
 8026014:	0802ea21 	.word	0x0802ea21
 8026018:	0802ea4f 	.word	0x0802ea4f

0802601c <atexit>:
 802601c:	2300      	movs	r3, #0
 802601e:	4601      	mov	r1, r0
 8026020:	461a      	mov	r2, r3
 8026022:	4618      	mov	r0, r3
 8026024:	f002 b872 	b.w	802810c <__register_exitproc>

08026028 <__cxa_atexit>:
 8026028:	b510      	push	{r4, lr}
 802602a:	4c05      	ldr	r4, [pc, #20]	; (8026040 <__cxa_atexit+0x18>)
 802602c:	4613      	mov	r3, r2
 802602e:	b12c      	cbz	r4, 802603c <__cxa_atexit+0x14>
 8026030:	460a      	mov	r2, r1
 8026032:	4601      	mov	r1, r0
 8026034:	2002      	movs	r0, #2
 8026036:	f002 f869 	bl	802810c <__register_exitproc>
 802603a:	bd10      	pop	{r4, pc}
 802603c:	4620      	mov	r0, r4
 802603e:	e7fc      	b.n	802603a <__cxa_atexit+0x12>
 8026040:	0802810d 	.word	0x0802810d

08026044 <__errno>:
 8026044:	4b01      	ldr	r3, [pc, #4]	; (802604c <__errno+0x8>)
 8026046:	6818      	ldr	r0, [r3, #0]
 8026048:	4770      	bx	lr
 802604a:	bf00      	nop
 802604c:	2000007c 	.word	0x2000007c

08026050 <fiprintf>:
 8026050:	b40e      	push	{r1, r2, r3}
 8026052:	b503      	push	{r0, r1, lr}
 8026054:	4601      	mov	r1, r0
 8026056:	ab03      	add	r3, sp, #12
 8026058:	4805      	ldr	r0, [pc, #20]	; (8026070 <fiprintf+0x20>)
 802605a:	f853 2b04 	ldr.w	r2, [r3], #4
 802605e:	6800      	ldr	r0, [r0, #0]
 8026060:	9301      	str	r3, [sp, #4]
 8026062:	f000 f925 	bl	80262b0 <_vfiprintf_r>
 8026066:	b002      	add	sp, #8
 8026068:	f85d eb04 	ldr.w	lr, [sp], #4
 802606c:	b003      	add	sp, #12
 802606e:	4770      	bx	lr
 8026070:	2000007c 	.word	0x2000007c

08026074 <__libc_init_array>:
 8026074:	b570      	push	{r4, r5, r6, lr}
 8026076:	4d0d      	ldr	r5, [pc, #52]	; (80260ac <__libc_init_array+0x38>)
 8026078:	4c0d      	ldr	r4, [pc, #52]	; (80260b0 <__libc_init_array+0x3c>)
 802607a:	1b64      	subs	r4, r4, r5
 802607c:	10a4      	asrs	r4, r4, #2
 802607e:	2600      	movs	r6, #0
 8026080:	42a6      	cmp	r6, r4
 8026082:	d109      	bne.n	8026098 <__libc_init_array+0x24>
 8026084:	4d0b      	ldr	r5, [pc, #44]	; (80260b4 <__libc_init_array+0x40>)
 8026086:	4c0c      	ldr	r4, [pc, #48]	; (80260b8 <__libc_init_array+0x44>)
 8026088:	f004 fba0 	bl	802a7cc <_init>
 802608c:	1b64      	subs	r4, r4, r5
 802608e:	10a4      	asrs	r4, r4, #2
 8026090:	2600      	movs	r6, #0
 8026092:	42a6      	cmp	r6, r4
 8026094:	d105      	bne.n	80260a2 <__libc_init_array+0x2e>
 8026096:	bd70      	pop	{r4, r5, r6, pc}
 8026098:	f855 3b04 	ldr.w	r3, [r5], #4
 802609c:	4798      	blx	r3
 802609e:	3601      	adds	r6, #1
 80260a0:	e7ee      	b.n	8026080 <__libc_init_array+0xc>
 80260a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80260a6:	4798      	blx	r3
 80260a8:	3601      	adds	r6, #1
 80260aa:	e7f2      	b.n	8026092 <__libc_init_array+0x1e>
 80260ac:	080d8ba0 	.word	0x080d8ba0
 80260b0:	080d8ba0 	.word	0x080d8ba0
 80260b4:	080d8ba0 	.word	0x080d8ba0
 80260b8:	080d8bd0 	.word	0x080d8bd0

080260bc <malloc>:
 80260bc:	4b02      	ldr	r3, [pc, #8]	; (80260c8 <malloc+0xc>)
 80260be:	4601      	mov	r1, r0
 80260c0:	6818      	ldr	r0, [r3, #0]
 80260c2:	f000 b871 	b.w	80261a8 <_malloc_r>
 80260c6:	bf00      	nop
 80260c8:	2000007c 	.word	0x2000007c

080260cc <free>:
 80260cc:	4b02      	ldr	r3, [pc, #8]	; (80260d8 <free+0xc>)
 80260ce:	4601      	mov	r1, r0
 80260d0:	6818      	ldr	r0, [r3, #0]
 80260d2:	f000 b819 	b.w	8026108 <_free_r>
 80260d6:	bf00      	nop
 80260d8:	2000007c 	.word	0x2000007c

080260dc <memcpy>:
 80260dc:	440a      	add	r2, r1
 80260de:	4291      	cmp	r1, r2
 80260e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80260e4:	d100      	bne.n	80260e8 <memcpy+0xc>
 80260e6:	4770      	bx	lr
 80260e8:	b510      	push	{r4, lr}
 80260ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80260ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80260f2:	4291      	cmp	r1, r2
 80260f4:	d1f9      	bne.n	80260ea <memcpy+0xe>
 80260f6:	bd10      	pop	{r4, pc}

080260f8 <memset>:
 80260f8:	4402      	add	r2, r0
 80260fa:	4603      	mov	r3, r0
 80260fc:	4293      	cmp	r3, r2
 80260fe:	d100      	bne.n	8026102 <memset+0xa>
 8026100:	4770      	bx	lr
 8026102:	f803 1b01 	strb.w	r1, [r3], #1
 8026106:	e7f9      	b.n	80260fc <memset+0x4>

08026108 <_free_r>:
 8026108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802610a:	2900      	cmp	r1, #0
 802610c:	d048      	beq.n	80261a0 <_free_r+0x98>
 802610e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026112:	9001      	str	r0, [sp, #4]
 8026114:	2b00      	cmp	r3, #0
 8026116:	f1a1 0404 	sub.w	r4, r1, #4
 802611a:	bfb8      	it	lt
 802611c:	18e4      	addlt	r4, r4, r3
 802611e:	f003 fc23 	bl	8029968 <__malloc_lock>
 8026122:	4a20      	ldr	r2, [pc, #128]	; (80261a4 <_free_r+0x9c>)
 8026124:	9801      	ldr	r0, [sp, #4]
 8026126:	6813      	ldr	r3, [r2, #0]
 8026128:	4615      	mov	r5, r2
 802612a:	b933      	cbnz	r3, 802613a <_free_r+0x32>
 802612c:	6063      	str	r3, [r4, #4]
 802612e:	6014      	str	r4, [r2, #0]
 8026130:	b003      	add	sp, #12
 8026132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026136:	f003 bc1d 	b.w	8029974 <__malloc_unlock>
 802613a:	42a3      	cmp	r3, r4
 802613c:	d90b      	bls.n	8026156 <_free_r+0x4e>
 802613e:	6821      	ldr	r1, [r4, #0]
 8026140:	1862      	adds	r2, r4, r1
 8026142:	4293      	cmp	r3, r2
 8026144:	bf04      	itt	eq
 8026146:	681a      	ldreq	r2, [r3, #0]
 8026148:	685b      	ldreq	r3, [r3, #4]
 802614a:	6063      	str	r3, [r4, #4]
 802614c:	bf04      	itt	eq
 802614e:	1852      	addeq	r2, r2, r1
 8026150:	6022      	streq	r2, [r4, #0]
 8026152:	602c      	str	r4, [r5, #0]
 8026154:	e7ec      	b.n	8026130 <_free_r+0x28>
 8026156:	461a      	mov	r2, r3
 8026158:	685b      	ldr	r3, [r3, #4]
 802615a:	b10b      	cbz	r3, 8026160 <_free_r+0x58>
 802615c:	42a3      	cmp	r3, r4
 802615e:	d9fa      	bls.n	8026156 <_free_r+0x4e>
 8026160:	6811      	ldr	r1, [r2, #0]
 8026162:	1855      	adds	r5, r2, r1
 8026164:	42a5      	cmp	r5, r4
 8026166:	d10b      	bne.n	8026180 <_free_r+0x78>
 8026168:	6824      	ldr	r4, [r4, #0]
 802616a:	4421      	add	r1, r4
 802616c:	1854      	adds	r4, r2, r1
 802616e:	42a3      	cmp	r3, r4
 8026170:	6011      	str	r1, [r2, #0]
 8026172:	d1dd      	bne.n	8026130 <_free_r+0x28>
 8026174:	681c      	ldr	r4, [r3, #0]
 8026176:	685b      	ldr	r3, [r3, #4]
 8026178:	6053      	str	r3, [r2, #4]
 802617a:	4421      	add	r1, r4
 802617c:	6011      	str	r1, [r2, #0]
 802617e:	e7d7      	b.n	8026130 <_free_r+0x28>
 8026180:	d902      	bls.n	8026188 <_free_r+0x80>
 8026182:	230c      	movs	r3, #12
 8026184:	6003      	str	r3, [r0, #0]
 8026186:	e7d3      	b.n	8026130 <_free_r+0x28>
 8026188:	6825      	ldr	r5, [r4, #0]
 802618a:	1961      	adds	r1, r4, r5
 802618c:	428b      	cmp	r3, r1
 802618e:	bf04      	itt	eq
 8026190:	6819      	ldreq	r1, [r3, #0]
 8026192:	685b      	ldreq	r3, [r3, #4]
 8026194:	6063      	str	r3, [r4, #4]
 8026196:	bf04      	itt	eq
 8026198:	1949      	addeq	r1, r1, r5
 802619a:	6021      	streq	r1, [r4, #0]
 802619c:	6054      	str	r4, [r2, #4]
 802619e:	e7c7      	b.n	8026130 <_free_r+0x28>
 80261a0:	b003      	add	sp, #12
 80261a2:	bd30      	pop	{r4, r5, pc}
 80261a4:	200567f4 	.word	0x200567f4

080261a8 <_malloc_r>:
 80261a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80261aa:	1ccd      	adds	r5, r1, #3
 80261ac:	f025 0503 	bic.w	r5, r5, #3
 80261b0:	3508      	adds	r5, #8
 80261b2:	2d0c      	cmp	r5, #12
 80261b4:	bf38      	it	cc
 80261b6:	250c      	movcc	r5, #12
 80261b8:	2d00      	cmp	r5, #0
 80261ba:	4606      	mov	r6, r0
 80261bc:	db01      	blt.n	80261c2 <_malloc_r+0x1a>
 80261be:	42a9      	cmp	r1, r5
 80261c0:	d903      	bls.n	80261ca <_malloc_r+0x22>
 80261c2:	230c      	movs	r3, #12
 80261c4:	6033      	str	r3, [r6, #0]
 80261c6:	2000      	movs	r0, #0
 80261c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80261ca:	f003 fbcd 	bl	8029968 <__malloc_lock>
 80261ce:	4921      	ldr	r1, [pc, #132]	; (8026254 <_malloc_r+0xac>)
 80261d0:	680a      	ldr	r2, [r1, #0]
 80261d2:	4614      	mov	r4, r2
 80261d4:	b99c      	cbnz	r4, 80261fe <_malloc_r+0x56>
 80261d6:	4f20      	ldr	r7, [pc, #128]	; (8026258 <_malloc_r+0xb0>)
 80261d8:	683b      	ldr	r3, [r7, #0]
 80261da:	b923      	cbnz	r3, 80261e6 <_malloc_r+0x3e>
 80261dc:	4621      	mov	r1, r4
 80261de:	4630      	mov	r0, r6
 80261e0:	f000 ffdc 	bl	802719c <_sbrk_r>
 80261e4:	6038      	str	r0, [r7, #0]
 80261e6:	4629      	mov	r1, r5
 80261e8:	4630      	mov	r0, r6
 80261ea:	f000 ffd7 	bl	802719c <_sbrk_r>
 80261ee:	1c43      	adds	r3, r0, #1
 80261f0:	d123      	bne.n	802623a <_malloc_r+0x92>
 80261f2:	230c      	movs	r3, #12
 80261f4:	6033      	str	r3, [r6, #0]
 80261f6:	4630      	mov	r0, r6
 80261f8:	f003 fbbc 	bl	8029974 <__malloc_unlock>
 80261fc:	e7e3      	b.n	80261c6 <_malloc_r+0x1e>
 80261fe:	6823      	ldr	r3, [r4, #0]
 8026200:	1b5b      	subs	r3, r3, r5
 8026202:	d417      	bmi.n	8026234 <_malloc_r+0x8c>
 8026204:	2b0b      	cmp	r3, #11
 8026206:	d903      	bls.n	8026210 <_malloc_r+0x68>
 8026208:	6023      	str	r3, [r4, #0]
 802620a:	441c      	add	r4, r3
 802620c:	6025      	str	r5, [r4, #0]
 802620e:	e004      	b.n	802621a <_malloc_r+0x72>
 8026210:	6863      	ldr	r3, [r4, #4]
 8026212:	42a2      	cmp	r2, r4
 8026214:	bf0c      	ite	eq
 8026216:	600b      	streq	r3, [r1, #0]
 8026218:	6053      	strne	r3, [r2, #4]
 802621a:	4630      	mov	r0, r6
 802621c:	f003 fbaa 	bl	8029974 <__malloc_unlock>
 8026220:	f104 000b 	add.w	r0, r4, #11
 8026224:	1d23      	adds	r3, r4, #4
 8026226:	f020 0007 	bic.w	r0, r0, #7
 802622a:	1ac2      	subs	r2, r0, r3
 802622c:	d0cc      	beq.n	80261c8 <_malloc_r+0x20>
 802622e:	1a1b      	subs	r3, r3, r0
 8026230:	50a3      	str	r3, [r4, r2]
 8026232:	e7c9      	b.n	80261c8 <_malloc_r+0x20>
 8026234:	4622      	mov	r2, r4
 8026236:	6864      	ldr	r4, [r4, #4]
 8026238:	e7cc      	b.n	80261d4 <_malloc_r+0x2c>
 802623a:	1cc4      	adds	r4, r0, #3
 802623c:	f024 0403 	bic.w	r4, r4, #3
 8026240:	42a0      	cmp	r0, r4
 8026242:	d0e3      	beq.n	802620c <_malloc_r+0x64>
 8026244:	1a21      	subs	r1, r4, r0
 8026246:	4630      	mov	r0, r6
 8026248:	f000 ffa8 	bl	802719c <_sbrk_r>
 802624c:	3001      	adds	r0, #1
 802624e:	d1dd      	bne.n	802620c <_malloc_r+0x64>
 8026250:	e7cf      	b.n	80261f2 <_malloc_r+0x4a>
 8026252:	bf00      	nop
 8026254:	200567f4 	.word	0x200567f4
 8026258:	200567f8 	.word	0x200567f8

0802625c <__sfputc_r>:
 802625c:	6893      	ldr	r3, [r2, #8]
 802625e:	3b01      	subs	r3, #1
 8026260:	2b00      	cmp	r3, #0
 8026262:	b410      	push	{r4}
 8026264:	6093      	str	r3, [r2, #8]
 8026266:	da08      	bge.n	802627a <__sfputc_r+0x1e>
 8026268:	6994      	ldr	r4, [r2, #24]
 802626a:	42a3      	cmp	r3, r4
 802626c:	db01      	blt.n	8026272 <__sfputc_r+0x16>
 802626e:	290a      	cmp	r1, #10
 8026270:	d103      	bne.n	802627a <__sfputc_r+0x1e>
 8026272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026276:	f001 be89 	b.w	8027f8c <__swbuf_r>
 802627a:	6813      	ldr	r3, [r2, #0]
 802627c:	1c58      	adds	r0, r3, #1
 802627e:	6010      	str	r0, [r2, #0]
 8026280:	7019      	strb	r1, [r3, #0]
 8026282:	4608      	mov	r0, r1
 8026284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026288:	4770      	bx	lr

0802628a <__sfputs_r>:
 802628a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802628c:	4606      	mov	r6, r0
 802628e:	460f      	mov	r7, r1
 8026290:	4614      	mov	r4, r2
 8026292:	18d5      	adds	r5, r2, r3
 8026294:	42ac      	cmp	r4, r5
 8026296:	d101      	bne.n	802629c <__sfputs_r+0x12>
 8026298:	2000      	movs	r0, #0
 802629a:	e007      	b.n	80262ac <__sfputs_r+0x22>
 802629c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80262a0:	463a      	mov	r2, r7
 80262a2:	4630      	mov	r0, r6
 80262a4:	f7ff ffda 	bl	802625c <__sfputc_r>
 80262a8:	1c43      	adds	r3, r0, #1
 80262aa:	d1f3      	bne.n	8026294 <__sfputs_r+0xa>
 80262ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080262b0 <_vfiprintf_r>:
 80262b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262b4:	460d      	mov	r5, r1
 80262b6:	b09d      	sub	sp, #116	; 0x74
 80262b8:	4614      	mov	r4, r2
 80262ba:	4698      	mov	r8, r3
 80262bc:	4606      	mov	r6, r0
 80262be:	b118      	cbz	r0, 80262c8 <_vfiprintf_r+0x18>
 80262c0:	6983      	ldr	r3, [r0, #24]
 80262c2:	b90b      	cbnz	r3, 80262c8 <_vfiprintf_r+0x18>
 80262c4:	f002 feac 	bl	8029020 <__sinit>
 80262c8:	4b89      	ldr	r3, [pc, #548]	; (80264f0 <_vfiprintf_r+0x240>)
 80262ca:	429d      	cmp	r5, r3
 80262cc:	d11b      	bne.n	8026306 <_vfiprintf_r+0x56>
 80262ce:	6875      	ldr	r5, [r6, #4]
 80262d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80262d2:	07d9      	lsls	r1, r3, #31
 80262d4:	d405      	bmi.n	80262e2 <_vfiprintf_r+0x32>
 80262d6:	89ab      	ldrh	r3, [r5, #12]
 80262d8:	059a      	lsls	r2, r3, #22
 80262da:	d402      	bmi.n	80262e2 <_vfiprintf_r+0x32>
 80262dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80262de:	f003 fab0 	bl	8029842 <__retarget_lock_acquire_recursive>
 80262e2:	89ab      	ldrh	r3, [r5, #12]
 80262e4:	071b      	lsls	r3, r3, #28
 80262e6:	d501      	bpl.n	80262ec <_vfiprintf_r+0x3c>
 80262e8:	692b      	ldr	r3, [r5, #16]
 80262ea:	b9eb      	cbnz	r3, 8026328 <_vfiprintf_r+0x78>
 80262ec:	4629      	mov	r1, r5
 80262ee:	4630      	mov	r0, r6
 80262f0:	f001 fe9e 	bl	8028030 <__swsetup_r>
 80262f4:	b1c0      	cbz	r0, 8026328 <_vfiprintf_r+0x78>
 80262f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80262f8:	07dc      	lsls	r4, r3, #31
 80262fa:	d50e      	bpl.n	802631a <_vfiprintf_r+0x6a>
 80262fc:	f04f 30ff 	mov.w	r0, #4294967295
 8026300:	b01d      	add	sp, #116	; 0x74
 8026302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026306:	4b7b      	ldr	r3, [pc, #492]	; (80264f4 <_vfiprintf_r+0x244>)
 8026308:	429d      	cmp	r5, r3
 802630a:	d101      	bne.n	8026310 <_vfiprintf_r+0x60>
 802630c:	68b5      	ldr	r5, [r6, #8]
 802630e:	e7df      	b.n	80262d0 <_vfiprintf_r+0x20>
 8026310:	4b79      	ldr	r3, [pc, #484]	; (80264f8 <_vfiprintf_r+0x248>)
 8026312:	429d      	cmp	r5, r3
 8026314:	bf08      	it	eq
 8026316:	68f5      	ldreq	r5, [r6, #12]
 8026318:	e7da      	b.n	80262d0 <_vfiprintf_r+0x20>
 802631a:	89ab      	ldrh	r3, [r5, #12]
 802631c:	0598      	lsls	r0, r3, #22
 802631e:	d4ed      	bmi.n	80262fc <_vfiprintf_r+0x4c>
 8026320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026322:	f003 fa90 	bl	8029846 <__retarget_lock_release_recursive>
 8026326:	e7e9      	b.n	80262fc <_vfiprintf_r+0x4c>
 8026328:	2300      	movs	r3, #0
 802632a:	9309      	str	r3, [sp, #36]	; 0x24
 802632c:	2320      	movs	r3, #32
 802632e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026332:	f8cd 800c 	str.w	r8, [sp, #12]
 8026336:	2330      	movs	r3, #48	; 0x30
 8026338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80264fc <_vfiprintf_r+0x24c>
 802633c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026340:	f04f 0901 	mov.w	r9, #1
 8026344:	4623      	mov	r3, r4
 8026346:	469a      	mov	sl, r3
 8026348:	f813 2b01 	ldrb.w	r2, [r3], #1
 802634c:	b10a      	cbz	r2, 8026352 <_vfiprintf_r+0xa2>
 802634e:	2a25      	cmp	r2, #37	; 0x25
 8026350:	d1f9      	bne.n	8026346 <_vfiprintf_r+0x96>
 8026352:	ebba 0b04 	subs.w	fp, sl, r4
 8026356:	d00b      	beq.n	8026370 <_vfiprintf_r+0xc0>
 8026358:	465b      	mov	r3, fp
 802635a:	4622      	mov	r2, r4
 802635c:	4629      	mov	r1, r5
 802635e:	4630      	mov	r0, r6
 8026360:	f7ff ff93 	bl	802628a <__sfputs_r>
 8026364:	3001      	adds	r0, #1
 8026366:	f000 80aa 	beq.w	80264be <_vfiprintf_r+0x20e>
 802636a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802636c:	445a      	add	r2, fp
 802636e:	9209      	str	r2, [sp, #36]	; 0x24
 8026370:	f89a 3000 	ldrb.w	r3, [sl]
 8026374:	2b00      	cmp	r3, #0
 8026376:	f000 80a2 	beq.w	80264be <_vfiprintf_r+0x20e>
 802637a:	2300      	movs	r3, #0
 802637c:	f04f 32ff 	mov.w	r2, #4294967295
 8026380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026384:	f10a 0a01 	add.w	sl, sl, #1
 8026388:	9304      	str	r3, [sp, #16]
 802638a:	9307      	str	r3, [sp, #28]
 802638c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026390:	931a      	str	r3, [sp, #104]	; 0x68
 8026392:	4654      	mov	r4, sl
 8026394:	2205      	movs	r2, #5
 8026396:	f814 1b01 	ldrb.w	r1, [r4], #1
 802639a:	4858      	ldr	r0, [pc, #352]	; (80264fc <_vfiprintf_r+0x24c>)
 802639c:	f7d9 ff58 	bl	8000250 <memchr>
 80263a0:	9a04      	ldr	r2, [sp, #16]
 80263a2:	b9d8      	cbnz	r0, 80263dc <_vfiprintf_r+0x12c>
 80263a4:	06d1      	lsls	r1, r2, #27
 80263a6:	bf44      	itt	mi
 80263a8:	2320      	movmi	r3, #32
 80263aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80263ae:	0713      	lsls	r3, r2, #28
 80263b0:	bf44      	itt	mi
 80263b2:	232b      	movmi	r3, #43	; 0x2b
 80263b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80263b8:	f89a 3000 	ldrb.w	r3, [sl]
 80263bc:	2b2a      	cmp	r3, #42	; 0x2a
 80263be:	d015      	beq.n	80263ec <_vfiprintf_r+0x13c>
 80263c0:	9a07      	ldr	r2, [sp, #28]
 80263c2:	4654      	mov	r4, sl
 80263c4:	2000      	movs	r0, #0
 80263c6:	f04f 0c0a 	mov.w	ip, #10
 80263ca:	4621      	mov	r1, r4
 80263cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80263d0:	3b30      	subs	r3, #48	; 0x30
 80263d2:	2b09      	cmp	r3, #9
 80263d4:	d94e      	bls.n	8026474 <_vfiprintf_r+0x1c4>
 80263d6:	b1b0      	cbz	r0, 8026406 <_vfiprintf_r+0x156>
 80263d8:	9207      	str	r2, [sp, #28]
 80263da:	e014      	b.n	8026406 <_vfiprintf_r+0x156>
 80263dc:	eba0 0308 	sub.w	r3, r0, r8
 80263e0:	fa09 f303 	lsl.w	r3, r9, r3
 80263e4:	4313      	orrs	r3, r2
 80263e6:	9304      	str	r3, [sp, #16]
 80263e8:	46a2      	mov	sl, r4
 80263ea:	e7d2      	b.n	8026392 <_vfiprintf_r+0xe2>
 80263ec:	9b03      	ldr	r3, [sp, #12]
 80263ee:	1d19      	adds	r1, r3, #4
 80263f0:	681b      	ldr	r3, [r3, #0]
 80263f2:	9103      	str	r1, [sp, #12]
 80263f4:	2b00      	cmp	r3, #0
 80263f6:	bfbb      	ittet	lt
 80263f8:	425b      	neglt	r3, r3
 80263fa:	f042 0202 	orrlt.w	r2, r2, #2
 80263fe:	9307      	strge	r3, [sp, #28]
 8026400:	9307      	strlt	r3, [sp, #28]
 8026402:	bfb8      	it	lt
 8026404:	9204      	strlt	r2, [sp, #16]
 8026406:	7823      	ldrb	r3, [r4, #0]
 8026408:	2b2e      	cmp	r3, #46	; 0x2e
 802640a:	d10c      	bne.n	8026426 <_vfiprintf_r+0x176>
 802640c:	7863      	ldrb	r3, [r4, #1]
 802640e:	2b2a      	cmp	r3, #42	; 0x2a
 8026410:	d135      	bne.n	802647e <_vfiprintf_r+0x1ce>
 8026412:	9b03      	ldr	r3, [sp, #12]
 8026414:	1d1a      	adds	r2, r3, #4
 8026416:	681b      	ldr	r3, [r3, #0]
 8026418:	9203      	str	r2, [sp, #12]
 802641a:	2b00      	cmp	r3, #0
 802641c:	bfb8      	it	lt
 802641e:	f04f 33ff 	movlt.w	r3, #4294967295
 8026422:	3402      	adds	r4, #2
 8026424:	9305      	str	r3, [sp, #20]
 8026426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802650c <_vfiprintf_r+0x25c>
 802642a:	7821      	ldrb	r1, [r4, #0]
 802642c:	2203      	movs	r2, #3
 802642e:	4650      	mov	r0, sl
 8026430:	f7d9 ff0e 	bl	8000250 <memchr>
 8026434:	b140      	cbz	r0, 8026448 <_vfiprintf_r+0x198>
 8026436:	2340      	movs	r3, #64	; 0x40
 8026438:	eba0 000a 	sub.w	r0, r0, sl
 802643c:	fa03 f000 	lsl.w	r0, r3, r0
 8026440:	9b04      	ldr	r3, [sp, #16]
 8026442:	4303      	orrs	r3, r0
 8026444:	3401      	adds	r4, #1
 8026446:	9304      	str	r3, [sp, #16]
 8026448:	f814 1b01 	ldrb.w	r1, [r4], #1
 802644c:	482c      	ldr	r0, [pc, #176]	; (8026500 <_vfiprintf_r+0x250>)
 802644e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026452:	2206      	movs	r2, #6
 8026454:	f7d9 fefc 	bl	8000250 <memchr>
 8026458:	2800      	cmp	r0, #0
 802645a:	d03f      	beq.n	80264dc <_vfiprintf_r+0x22c>
 802645c:	4b29      	ldr	r3, [pc, #164]	; (8026504 <_vfiprintf_r+0x254>)
 802645e:	bb1b      	cbnz	r3, 80264a8 <_vfiprintf_r+0x1f8>
 8026460:	9b03      	ldr	r3, [sp, #12]
 8026462:	3307      	adds	r3, #7
 8026464:	f023 0307 	bic.w	r3, r3, #7
 8026468:	3308      	adds	r3, #8
 802646a:	9303      	str	r3, [sp, #12]
 802646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802646e:	443b      	add	r3, r7
 8026470:	9309      	str	r3, [sp, #36]	; 0x24
 8026472:	e767      	b.n	8026344 <_vfiprintf_r+0x94>
 8026474:	fb0c 3202 	mla	r2, ip, r2, r3
 8026478:	460c      	mov	r4, r1
 802647a:	2001      	movs	r0, #1
 802647c:	e7a5      	b.n	80263ca <_vfiprintf_r+0x11a>
 802647e:	2300      	movs	r3, #0
 8026480:	3401      	adds	r4, #1
 8026482:	9305      	str	r3, [sp, #20]
 8026484:	4619      	mov	r1, r3
 8026486:	f04f 0c0a 	mov.w	ip, #10
 802648a:	4620      	mov	r0, r4
 802648c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026490:	3a30      	subs	r2, #48	; 0x30
 8026492:	2a09      	cmp	r2, #9
 8026494:	d903      	bls.n	802649e <_vfiprintf_r+0x1ee>
 8026496:	2b00      	cmp	r3, #0
 8026498:	d0c5      	beq.n	8026426 <_vfiprintf_r+0x176>
 802649a:	9105      	str	r1, [sp, #20]
 802649c:	e7c3      	b.n	8026426 <_vfiprintf_r+0x176>
 802649e:	fb0c 2101 	mla	r1, ip, r1, r2
 80264a2:	4604      	mov	r4, r0
 80264a4:	2301      	movs	r3, #1
 80264a6:	e7f0      	b.n	802648a <_vfiprintf_r+0x1da>
 80264a8:	ab03      	add	r3, sp, #12
 80264aa:	9300      	str	r3, [sp, #0]
 80264ac:	462a      	mov	r2, r5
 80264ae:	4b16      	ldr	r3, [pc, #88]	; (8026508 <_vfiprintf_r+0x258>)
 80264b0:	a904      	add	r1, sp, #16
 80264b2:	4630      	mov	r0, r6
 80264b4:	f000 f8bc 	bl	8026630 <_printf_float>
 80264b8:	4607      	mov	r7, r0
 80264ba:	1c78      	adds	r0, r7, #1
 80264bc:	d1d6      	bne.n	802646c <_vfiprintf_r+0x1bc>
 80264be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80264c0:	07d9      	lsls	r1, r3, #31
 80264c2:	d405      	bmi.n	80264d0 <_vfiprintf_r+0x220>
 80264c4:	89ab      	ldrh	r3, [r5, #12]
 80264c6:	059a      	lsls	r2, r3, #22
 80264c8:	d402      	bmi.n	80264d0 <_vfiprintf_r+0x220>
 80264ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80264cc:	f003 f9bb 	bl	8029846 <__retarget_lock_release_recursive>
 80264d0:	89ab      	ldrh	r3, [r5, #12]
 80264d2:	065b      	lsls	r3, r3, #25
 80264d4:	f53f af12 	bmi.w	80262fc <_vfiprintf_r+0x4c>
 80264d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80264da:	e711      	b.n	8026300 <_vfiprintf_r+0x50>
 80264dc:	ab03      	add	r3, sp, #12
 80264de:	9300      	str	r3, [sp, #0]
 80264e0:	462a      	mov	r2, r5
 80264e2:	4b09      	ldr	r3, [pc, #36]	; (8026508 <_vfiprintf_r+0x258>)
 80264e4:	a904      	add	r1, sp, #16
 80264e6:	4630      	mov	r0, r6
 80264e8:	f000 fb2e 	bl	8026b48 <_printf_i>
 80264ec:	e7e4      	b.n	80264b8 <_vfiprintf_r+0x208>
 80264ee:	bf00      	nop
 80264f0:	0802eca8 	.word	0x0802eca8
 80264f4:	0802ecc8 	.word	0x0802ecc8
 80264f8:	0802ec88 	.word	0x0802ec88
 80264fc:	0802ea54 	.word	0x0802ea54
 8026500:	0802ea5e 	.word	0x0802ea5e
 8026504:	08026631 	.word	0x08026631
 8026508:	0802628b 	.word	0x0802628b
 802650c:	0802ea5a 	.word	0x0802ea5a

08026510 <__cvt>:
 8026510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026512:	ed2d 8b02 	vpush	{d8}
 8026516:	eeb0 8b40 	vmov.f64	d8, d0
 802651a:	b085      	sub	sp, #20
 802651c:	4617      	mov	r7, r2
 802651e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026520:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026522:	ee18 2a90 	vmov	r2, s17
 8026526:	f025 0520 	bic.w	r5, r5, #32
 802652a:	2a00      	cmp	r2, #0
 802652c:	bfb6      	itet	lt
 802652e:	222d      	movlt	r2, #45	; 0x2d
 8026530:	2200      	movge	r2, #0
 8026532:	eeb1 8b40 	vneglt.f64	d8, d0
 8026536:	2d46      	cmp	r5, #70	; 0x46
 8026538:	460c      	mov	r4, r1
 802653a:	701a      	strb	r2, [r3, #0]
 802653c:	d004      	beq.n	8026548 <__cvt+0x38>
 802653e:	2d45      	cmp	r5, #69	; 0x45
 8026540:	d100      	bne.n	8026544 <__cvt+0x34>
 8026542:	3401      	adds	r4, #1
 8026544:	2102      	movs	r1, #2
 8026546:	e000      	b.n	802654a <__cvt+0x3a>
 8026548:	2103      	movs	r1, #3
 802654a:	ab03      	add	r3, sp, #12
 802654c:	9301      	str	r3, [sp, #4]
 802654e:	ab02      	add	r3, sp, #8
 8026550:	9300      	str	r3, [sp, #0]
 8026552:	4622      	mov	r2, r4
 8026554:	4633      	mov	r3, r6
 8026556:	eeb0 0b48 	vmov.f64	d0, d8
 802655a:	f001 fec5 	bl	80282e8 <_dtoa_r>
 802655e:	2d47      	cmp	r5, #71	; 0x47
 8026560:	d109      	bne.n	8026576 <__cvt+0x66>
 8026562:	07fb      	lsls	r3, r7, #31
 8026564:	d407      	bmi.n	8026576 <__cvt+0x66>
 8026566:	9b03      	ldr	r3, [sp, #12]
 8026568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802656a:	1a1b      	subs	r3, r3, r0
 802656c:	6013      	str	r3, [r2, #0]
 802656e:	b005      	add	sp, #20
 8026570:	ecbd 8b02 	vpop	{d8}
 8026574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026576:	2d46      	cmp	r5, #70	; 0x46
 8026578:	eb00 0204 	add.w	r2, r0, r4
 802657c:	d10c      	bne.n	8026598 <__cvt+0x88>
 802657e:	7803      	ldrb	r3, [r0, #0]
 8026580:	2b30      	cmp	r3, #48	; 0x30
 8026582:	d107      	bne.n	8026594 <__cvt+0x84>
 8026584:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802658c:	bf1c      	itt	ne
 802658e:	f1c4 0401 	rsbne	r4, r4, #1
 8026592:	6034      	strne	r4, [r6, #0]
 8026594:	6833      	ldr	r3, [r6, #0]
 8026596:	441a      	add	r2, r3
 8026598:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802659c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265a0:	bf08      	it	eq
 80265a2:	9203      	streq	r2, [sp, #12]
 80265a4:	2130      	movs	r1, #48	; 0x30
 80265a6:	9b03      	ldr	r3, [sp, #12]
 80265a8:	4293      	cmp	r3, r2
 80265aa:	d2dc      	bcs.n	8026566 <__cvt+0x56>
 80265ac:	1c5c      	adds	r4, r3, #1
 80265ae:	9403      	str	r4, [sp, #12]
 80265b0:	7019      	strb	r1, [r3, #0]
 80265b2:	e7f8      	b.n	80265a6 <__cvt+0x96>

080265b4 <__exponent>:
 80265b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80265b6:	4603      	mov	r3, r0
 80265b8:	2900      	cmp	r1, #0
 80265ba:	bfb8      	it	lt
 80265bc:	4249      	neglt	r1, r1
 80265be:	f803 2b02 	strb.w	r2, [r3], #2
 80265c2:	bfb4      	ite	lt
 80265c4:	222d      	movlt	r2, #45	; 0x2d
 80265c6:	222b      	movge	r2, #43	; 0x2b
 80265c8:	2909      	cmp	r1, #9
 80265ca:	7042      	strb	r2, [r0, #1]
 80265cc:	dd2a      	ble.n	8026624 <__exponent+0x70>
 80265ce:	f10d 0407 	add.w	r4, sp, #7
 80265d2:	46a4      	mov	ip, r4
 80265d4:	270a      	movs	r7, #10
 80265d6:	46a6      	mov	lr, r4
 80265d8:	460a      	mov	r2, r1
 80265da:	fb91 f6f7 	sdiv	r6, r1, r7
 80265de:	fb07 1516 	mls	r5, r7, r6, r1
 80265e2:	3530      	adds	r5, #48	; 0x30
 80265e4:	2a63      	cmp	r2, #99	; 0x63
 80265e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80265ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80265ee:	4631      	mov	r1, r6
 80265f0:	dcf1      	bgt.n	80265d6 <__exponent+0x22>
 80265f2:	3130      	adds	r1, #48	; 0x30
 80265f4:	f1ae 0502 	sub.w	r5, lr, #2
 80265f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80265fc:	1c44      	adds	r4, r0, #1
 80265fe:	4629      	mov	r1, r5
 8026600:	4561      	cmp	r1, ip
 8026602:	d30a      	bcc.n	802661a <__exponent+0x66>
 8026604:	f10d 0209 	add.w	r2, sp, #9
 8026608:	eba2 020e 	sub.w	r2, r2, lr
 802660c:	4565      	cmp	r5, ip
 802660e:	bf88      	it	hi
 8026610:	2200      	movhi	r2, #0
 8026612:	4413      	add	r3, r2
 8026614:	1a18      	subs	r0, r3, r0
 8026616:	b003      	add	sp, #12
 8026618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802661a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802661e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8026622:	e7ed      	b.n	8026600 <__exponent+0x4c>
 8026624:	2330      	movs	r3, #48	; 0x30
 8026626:	3130      	adds	r1, #48	; 0x30
 8026628:	7083      	strb	r3, [r0, #2]
 802662a:	70c1      	strb	r1, [r0, #3]
 802662c:	1d03      	adds	r3, r0, #4
 802662e:	e7f1      	b.n	8026614 <__exponent+0x60>

08026630 <_printf_float>:
 8026630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026634:	b08b      	sub	sp, #44	; 0x2c
 8026636:	460c      	mov	r4, r1
 8026638:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802663c:	4616      	mov	r6, r2
 802663e:	461f      	mov	r7, r3
 8026640:	4605      	mov	r5, r0
 8026642:	f003 f8f9 	bl	8029838 <_localeconv_r>
 8026646:	f8d0 b000 	ldr.w	fp, [r0]
 802664a:	4658      	mov	r0, fp
 802664c:	f7d9 fdf8 	bl	8000240 <strlen>
 8026650:	2300      	movs	r3, #0
 8026652:	9308      	str	r3, [sp, #32]
 8026654:	f8d8 3000 	ldr.w	r3, [r8]
 8026658:	f894 9018 	ldrb.w	r9, [r4, #24]
 802665c:	6822      	ldr	r2, [r4, #0]
 802665e:	3307      	adds	r3, #7
 8026660:	f023 0307 	bic.w	r3, r3, #7
 8026664:	f103 0108 	add.w	r1, r3, #8
 8026668:	f8c8 1000 	str.w	r1, [r8]
 802666c:	4682      	mov	sl, r0
 802666e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026672:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8026676:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80268d8 <_printf_float+0x2a8>
 802667a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802667e:	eeb0 6bc0 	vabs.f64	d6, d0
 8026682:	eeb4 6b47 	vcmp.f64	d6, d7
 8026686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802668a:	dd24      	ble.n	80266d6 <_printf_float+0xa6>
 802668c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026694:	d502      	bpl.n	802669c <_printf_float+0x6c>
 8026696:	232d      	movs	r3, #45	; 0x2d
 8026698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802669c:	4b90      	ldr	r3, [pc, #576]	; (80268e0 <_printf_float+0x2b0>)
 802669e:	4891      	ldr	r0, [pc, #580]	; (80268e4 <_printf_float+0x2b4>)
 80266a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80266a4:	bf94      	ite	ls
 80266a6:	4698      	movls	r8, r3
 80266a8:	4680      	movhi	r8, r0
 80266aa:	2303      	movs	r3, #3
 80266ac:	6123      	str	r3, [r4, #16]
 80266ae:	f022 0204 	bic.w	r2, r2, #4
 80266b2:	2300      	movs	r3, #0
 80266b4:	6022      	str	r2, [r4, #0]
 80266b6:	9304      	str	r3, [sp, #16]
 80266b8:	9700      	str	r7, [sp, #0]
 80266ba:	4633      	mov	r3, r6
 80266bc:	aa09      	add	r2, sp, #36	; 0x24
 80266be:	4621      	mov	r1, r4
 80266c0:	4628      	mov	r0, r5
 80266c2:	f000 f9d3 	bl	8026a6c <_printf_common>
 80266c6:	3001      	adds	r0, #1
 80266c8:	f040 808a 	bne.w	80267e0 <_printf_float+0x1b0>
 80266cc:	f04f 30ff 	mov.w	r0, #4294967295
 80266d0:	b00b      	add	sp, #44	; 0x2c
 80266d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80266da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266de:	d709      	bvc.n	80266f4 <_printf_float+0xc4>
 80266e0:	ee10 3a90 	vmov	r3, s1
 80266e4:	2b00      	cmp	r3, #0
 80266e6:	bfbc      	itt	lt
 80266e8:	232d      	movlt	r3, #45	; 0x2d
 80266ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80266ee:	487e      	ldr	r0, [pc, #504]	; (80268e8 <_printf_float+0x2b8>)
 80266f0:	4b7e      	ldr	r3, [pc, #504]	; (80268ec <_printf_float+0x2bc>)
 80266f2:	e7d5      	b.n	80266a0 <_printf_float+0x70>
 80266f4:	6863      	ldr	r3, [r4, #4]
 80266f6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80266fa:	9104      	str	r1, [sp, #16]
 80266fc:	1c59      	adds	r1, r3, #1
 80266fe:	d13c      	bne.n	802677a <_printf_float+0x14a>
 8026700:	2306      	movs	r3, #6
 8026702:	6063      	str	r3, [r4, #4]
 8026704:	2300      	movs	r3, #0
 8026706:	9303      	str	r3, [sp, #12]
 8026708:	ab08      	add	r3, sp, #32
 802670a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802670e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8026712:	ab07      	add	r3, sp, #28
 8026714:	6861      	ldr	r1, [r4, #4]
 8026716:	9300      	str	r3, [sp, #0]
 8026718:	6022      	str	r2, [r4, #0]
 802671a:	f10d 031b 	add.w	r3, sp, #27
 802671e:	4628      	mov	r0, r5
 8026720:	f7ff fef6 	bl	8026510 <__cvt>
 8026724:	9b04      	ldr	r3, [sp, #16]
 8026726:	9907      	ldr	r1, [sp, #28]
 8026728:	2b47      	cmp	r3, #71	; 0x47
 802672a:	4680      	mov	r8, r0
 802672c:	d108      	bne.n	8026740 <_printf_float+0x110>
 802672e:	1cc8      	adds	r0, r1, #3
 8026730:	db02      	blt.n	8026738 <_printf_float+0x108>
 8026732:	6863      	ldr	r3, [r4, #4]
 8026734:	4299      	cmp	r1, r3
 8026736:	dd41      	ble.n	80267bc <_printf_float+0x18c>
 8026738:	f1a9 0902 	sub.w	r9, r9, #2
 802673c:	fa5f f989 	uxtb.w	r9, r9
 8026740:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8026744:	d820      	bhi.n	8026788 <_printf_float+0x158>
 8026746:	3901      	subs	r1, #1
 8026748:	464a      	mov	r2, r9
 802674a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802674e:	9107      	str	r1, [sp, #28]
 8026750:	f7ff ff30 	bl	80265b4 <__exponent>
 8026754:	9a08      	ldr	r2, [sp, #32]
 8026756:	9004      	str	r0, [sp, #16]
 8026758:	1813      	adds	r3, r2, r0
 802675a:	2a01      	cmp	r2, #1
 802675c:	6123      	str	r3, [r4, #16]
 802675e:	dc02      	bgt.n	8026766 <_printf_float+0x136>
 8026760:	6822      	ldr	r2, [r4, #0]
 8026762:	07d2      	lsls	r2, r2, #31
 8026764:	d501      	bpl.n	802676a <_printf_float+0x13a>
 8026766:	3301      	adds	r3, #1
 8026768:	6123      	str	r3, [r4, #16]
 802676a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802676e:	2b00      	cmp	r3, #0
 8026770:	d0a2      	beq.n	80266b8 <_printf_float+0x88>
 8026772:	232d      	movs	r3, #45	; 0x2d
 8026774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026778:	e79e      	b.n	80266b8 <_printf_float+0x88>
 802677a:	9904      	ldr	r1, [sp, #16]
 802677c:	2947      	cmp	r1, #71	; 0x47
 802677e:	d1c1      	bne.n	8026704 <_printf_float+0xd4>
 8026780:	2b00      	cmp	r3, #0
 8026782:	d1bf      	bne.n	8026704 <_printf_float+0xd4>
 8026784:	2301      	movs	r3, #1
 8026786:	e7bc      	b.n	8026702 <_printf_float+0xd2>
 8026788:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802678c:	d118      	bne.n	80267c0 <_printf_float+0x190>
 802678e:	2900      	cmp	r1, #0
 8026790:	6863      	ldr	r3, [r4, #4]
 8026792:	dd0b      	ble.n	80267ac <_printf_float+0x17c>
 8026794:	6121      	str	r1, [r4, #16]
 8026796:	b913      	cbnz	r3, 802679e <_printf_float+0x16e>
 8026798:	6822      	ldr	r2, [r4, #0]
 802679a:	07d0      	lsls	r0, r2, #31
 802679c:	d502      	bpl.n	80267a4 <_printf_float+0x174>
 802679e:	3301      	adds	r3, #1
 80267a0:	440b      	add	r3, r1
 80267a2:	6123      	str	r3, [r4, #16]
 80267a4:	2300      	movs	r3, #0
 80267a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80267a8:	9304      	str	r3, [sp, #16]
 80267aa:	e7de      	b.n	802676a <_printf_float+0x13a>
 80267ac:	b913      	cbnz	r3, 80267b4 <_printf_float+0x184>
 80267ae:	6822      	ldr	r2, [r4, #0]
 80267b0:	07d2      	lsls	r2, r2, #31
 80267b2:	d501      	bpl.n	80267b8 <_printf_float+0x188>
 80267b4:	3302      	adds	r3, #2
 80267b6:	e7f4      	b.n	80267a2 <_printf_float+0x172>
 80267b8:	2301      	movs	r3, #1
 80267ba:	e7f2      	b.n	80267a2 <_printf_float+0x172>
 80267bc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80267c0:	9b08      	ldr	r3, [sp, #32]
 80267c2:	4299      	cmp	r1, r3
 80267c4:	db05      	blt.n	80267d2 <_printf_float+0x1a2>
 80267c6:	6823      	ldr	r3, [r4, #0]
 80267c8:	6121      	str	r1, [r4, #16]
 80267ca:	07d8      	lsls	r0, r3, #31
 80267cc:	d5ea      	bpl.n	80267a4 <_printf_float+0x174>
 80267ce:	1c4b      	adds	r3, r1, #1
 80267d0:	e7e7      	b.n	80267a2 <_printf_float+0x172>
 80267d2:	2900      	cmp	r1, #0
 80267d4:	bfd4      	ite	le
 80267d6:	f1c1 0202 	rsble	r2, r1, #2
 80267da:	2201      	movgt	r2, #1
 80267dc:	4413      	add	r3, r2
 80267de:	e7e0      	b.n	80267a2 <_printf_float+0x172>
 80267e0:	6823      	ldr	r3, [r4, #0]
 80267e2:	055a      	lsls	r2, r3, #21
 80267e4:	d407      	bmi.n	80267f6 <_printf_float+0x1c6>
 80267e6:	6923      	ldr	r3, [r4, #16]
 80267e8:	4642      	mov	r2, r8
 80267ea:	4631      	mov	r1, r6
 80267ec:	4628      	mov	r0, r5
 80267ee:	47b8      	blx	r7
 80267f0:	3001      	adds	r0, #1
 80267f2:	d12a      	bne.n	802684a <_printf_float+0x21a>
 80267f4:	e76a      	b.n	80266cc <_printf_float+0x9c>
 80267f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80267fa:	f240 80e2 	bls.w	80269c2 <_printf_float+0x392>
 80267fe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8026802:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802680a:	d133      	bne.n	8026874 <_printf_float+0x244>
 802680c:	4a38      	ldr	r2, [pc, #224]	; (80268f0 <_printf_float+0x2c0>)
 802680e:	2301      	movs	r3, #1
 8026810:	4631      	mov	r1, r6
 8026812:	4628      	mov	r0, r5
 8026814:	47b8      	blx	r7
 8026816:	3001      	adds	r0, #1
 8026818:	f43f af58 	beq.w	80266cc <_printf_float+0x9c>
 802681c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026820:	429a      	cmp	r2, r3
 8026822:	db02      	blt.n	802682a <_printf_float+0x1fa>
 8026824:	6823      	ldr	r3, [r4, #0]
 8026826:	07d8      	lsls	r0, r3, #31
 8026828:	d50f      	bpl.n	802684a <_printf_float+0x21a>
 802682a:	4653      	mov	r3, sl
 802682c:	465a      	mov	r2, fp
 802682e:	4631      	mov	r1, r6
 8026830:	4628      	mov	r0, r5
 8026832:	47b8      	blx	r7
 8026834:	3001      	adds	r0, #1
 8026836:	f43f af49 	beq.w	80266cc <_printf_float+0x9c>
 802683a:	f04f 0800 	mov.w	r8, #0
 802683e:	f104 091a 	add.w	r9, r4, #26
 8026842:	9b08      	ldr	r3, [sp, #32]
 8026844:	3b01      	subs	r3, #1
 8026846:	4543      	cmp	r3, r8
 8026848:	dc09      	bgt.n	802685e <_printf_float+0x22e>
 802684a:	6823      	ldr	r3, [r4, #0]
 802684c:	079b      	lsls	r3, r3, #30
 802684e:	f100 8108 	bmi.w	8026a62 <_printf_float+0x432>
 8026852:	68e0      	ldr	r0, [r4, #12]
 8026854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026856:	4298      	cmp	r0, r3
 8026858:	bfb8      	it	lt
 802685a:	4618      	movlt	r0, r3
 802685c:	e738      	b.n	80266d0 <_printf_float+0xa0>
 802685e:	2301      	movs	r3, #1
 8026860:	464a      	mov	r2, r9
 8026862:	4631      	mov	r1, r6
 8026864:	4628      	mov	r0, r5
 8026866:	47b8      	blx	r7
 8026868:	3001      	adds	r0, #1
 802686a:	f43f af2f 	beq.w	80266cc <_printf_float+0x9c>
 802686e:	f108 0801 	add.w	r8, r8, #1
 8026872:	e7e6      	b.n	8026842 <_printf_float+0x212>
 8026874:	9b07      	ldr	r3, [sp, #28]
 8026876:	2b00      	cmp	r3, #0
 8026878:	dc3c      	bgt.n	80268f4 <_printf_float+0x2c4>
 802687a:	4a1d      	ldr	r2, [pc, #116]	; (80268f0 <_printf_float+0x2c0>)
 802687c:	2301      	movs	r3, #1
 802687e:	4631      	mov	r1, r6
 8026880:	4628      	mov	r0, r5
 8026882:	47b8      	blx	r7
 8026884:	3001      	adds	r0, #1
 8026886:	f43f af21 	beq.w	80266cc <_printf_float+0x9c>
 802688a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802688e:	4313      	orrs	r3, r2
 8026890:	d102      	bne.n	8026898 <_printf_float+0x268>
 8026892:	6823      	ldr	r3, [r4, #0]
 8026894:	07d9      	lsls	r1, r3, #31
 8026896:	d5d8      	bpl.n	802684a <_printf_float+0x21a>
 8026898:	4653      	mov	r3, sl
 802689a:	465a      	mov	r2, fp
 802689c:	4631      	mov	r1, r6
 802689e:	4628      	mov	r0, r5
 80268a0:	47b8      	blx	r7
 80268a2:	3001      	adds	r0, #1
 80268a4:	f43f af12 	beq.w	80266cc <_printf_float+0x9c>
 80268a8:	f04f 0900 	mov.w	r9, #0
 80268ac:	f104 0a1a 	add.w	sl, r4, #26
 80268b0:	9b07      	ldr	r3, [sp, #28]
 80268b2:	425b      	negs	r3, r3
 80268b4:	454b      	cmp	r3, r9
 80268b6:	dc01      	bgt.n	80268bc <_printf_float+0x28c>
 80268b8:	9b08      	ldr	r3, [sp, #32]
 80268ba:	e795      	b.n	80267e8 <_printf_float+0x1b8>
 80268bc:	2301      	movs	r3, #1
 80268be:	4652      	mov	r2, sl
 80268c0:	4631      	mov	r1, r6
 80268c2:	4628      	mov	r0, r5
 80268c4:	47b8      	blx	r7
 80268c6:	3001      	adds	r0, #1
 80268c8:	f43f af00 	beq.w	80266cc <_printf_float+0x9c>
 80268cc:	f109 0901 	add.w	r9, r9, #1
 80268d0:	e7ee      	b.n	80268b0 <_printf_float+0x280>
 80268d2:	bf00      	nop
 80268d4:	f3af 8000 	nop.w
 80268d8:	ffffffff 	.word	0xffffffff
 80268dc:	7fefffff 	.word	0x7fefffff
 80268e0:	0802ea65 	.word	0x0802ea65
 80268e4:	0802ea69 	.word	0x0802ea69
 80268e8:	0802ea71 	.word	0x0802ea71
 80268ec:	0802ea6d 	.word	0x0802ea6d
 80268f0:	0802dd7a 	.word	0x0802dd7a
 80268f4:	9a08      	ldr	r2, [sp, #32]
 80268f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80268f8:	429a      	cmp	r2, r3
 80268fa:	bfa8      	it	ge
 80268fc:	461a      	movge	r2, r3
 80268fe:	2a00      	cmp	r2, #0
 8026900:	4691      	mov	r9, r2
 8026902:	dc38      	bgt.n	8026976 <_printf_float+0x346>
 8026904:	2300      	movs	r3, #0
 8026906:	9305      	str	r3, [sp, #20]
 8026908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802690c:	f104 021a 	add.w	r2, r4, #26
 8026910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026912:	9905      	ldr	r1, [sp, #20]
 8026914:	9304      	str	r3, [sp, #16]
 8026916:	eba3 0309 	sub.w	r3, r3, r9
 802691a:	428b      	cmp	r3, r1
 802691c:	dc33      	bgt.n	8026986 <_printf_float+0x356>
 802691e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026922:	429a      	cmp	r2, r3
 8026924:	db3c      	blt.n	80269a0 <_printf_float+0x370>
 8026926:	6823      	ldr	r3, [r4, #0]
 8026928:	07da      	lsls	r2, r3, #31
 802692a:	d439      	bmi.n	80269a0 <_printf_float+0x370>
 802692c:	9a08      	ldr	r2, [sp, #32]
 802692e:	9b04      	ldr	r3, [sp, #16]
 8026930:	9907      	ldr	r1, [sp, #28]
 8026932:	1ad3      	subs	r3, r2, r3
 8026934:	eba2 0901 	sub.w	r9, r2, r1
 8026938:	4599      	cmp	r9, r3
 802693a:	bfa8      	it	ge
 802693c:	4699      	movge	r9, r3
 802693e:	f1b9 0f00 	cmp.w	r9, #0
 8026942:	dc35      	bgt.n	80269b0 <_printf_float+0x380>
 8026944:	f04f 0800 	mov.w	r8, #0
 8026948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802694c:	f104 0a1a 	add.w	sl, r4, #26
 8026950:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026954:	1a9b      	subs	r3, r3, r2
 8026956:	eba3 0309 	sub.w	r3, r3, r9
 802695a:	4543      	cmp	r3, r8
 802695c:	f77f af75 	ble.w	802684a <_printf_float+0x21a>
 8026960:	2301      	movs	r3, #1
 8026962:	4652      	mov	r2, sl
 8026964:	4631      	mov	r1, r6
 8026966:	4628      	mov	r0, r5
 8026968:	47b8      	blx	r7
 802696a:	3001      	adds	r0, #1
 802696c:	f43f aeae 	beq.w	80266cc <_printf_float+0x9c>
 8026970:	f108 0801 	add.w	r8, r8, #1
 8026974:	e7ec      	b.n	8026950 <_printf_float+0x320>
 8026976:	4613      	mov	r3, r2
 8026978:	4631      	mov	r1, r6
 802697a:	4642      	mov	r2, r8
 802697c:	4628      	mov	r0, r5
 802697e:	47b8      	blx	r7
 8026980:	3001      	adds	r0, #1
 8026982:	d1bf      	bne.n	8026904 <_printf_float+0x2d4>
 8026984:	e6a2      	b.n	80266cc <_printf_float+0x9c>
 8026986:	2301      	movs	r3, #1
 8026988:	4631      	mov	r1, r6
 802698a:	4628      	mov	r0, r5
 802698c:	9204      	str	r2, [sp, #16]
 802698e:	47b8      	blx	r7
 8026990:	3001      	adds	r0, #1
 8026992:	f43f ae9b 	beq.w	80266cc <_printf_float+0x9c>
 8026996:	9b05      	ldr	r3, [sp, #20]
 8026998:	9a04      	ldr	r2, [sp, #16]
 802699a:	3301      	adds	r3, #1
 802699c:	9305      	str	r3, [sp, #20]
 802699e:	e7b7      	b.n	8026910 <_printf_float+0x2e0>
 80269a0:	4653      	mov	r3, sl
 80269a2:	465a      	mov	r2, fp
 80269a4:	4631      	mov	r1, r6
 80269a6:	4628      	mov	r0, r5
 80269a8:	47b8      	blx	r7
 80269aa:	3001      	adds	r0, #1
 80269ac:	d1be      	bne.n	802692c <_printf_float+0x2fc>
 80269ae:	e68d      	b.n	80266cc <_printf_float+0x9c>
 80269b0:	9a04      	ldr	r2, [sp, #16]
 80269b2:	464b      	mov	r3, r9
 80269b4:	4442      	add	r2, r8
 80269b6:	4631      	mov	r1, r6
 80269b8:	4628      	mov	r0, r5
 80269ba:	47b8      	blx	r7
 80269bc:	3001      	adds	r0, #1
 80269be:	d1c1      	bne.n	8026944 <_printf_float+0x314>
 80269c0:	e684      	b.n	80266cc <_printf_float+0x9c>
 80269c2:	9a08      	ldr	r2, [sp, #32]
 80269c4:	2a01      	cmp	r2, #1
 80269c6:	dc01      	bgt.n	80269cc <_printf_float+0x39c>
 80269c8:	07db      	lsls	r3, r3, #31
 80269ca:	d537      	bpl.n	8026a3c <_printf_float+0x40c>
 80269cc:	2301      	movs	r3, #1
 80269ce:	4642      	mov	r2, r8
 80269d0:	4631      	mov	r1, r6
 80269d2:	4628      	mov	r0, r5
 80269d4:	47b8      	blx	r7
 80269d6:	3001      	adds	r0, #1
 80269d8:	f43f ae78 	beq.w	80266cc <_printf_float+0x9c>
 80269dc:	4653      	mov	r3, sl
 80269de:	465a      	mov	r2, fp
 80269e0:	4631      	mov	r1, r6
 80269e2:	4628      	mov	r0, r5
 80269e4:	47b8      	blx	r7
 80269e6:	3001      	adds	r0, #1
 80269e8:	f43f ae70 	beq.w	80266cc <_printf_float+0x9c>
 80269ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80269f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80269f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269f8:	d01b      	beq.n	8026a32 <_printf_float+0x402>
 80269fa:	9b08      	ldr	r3, [sp, #32]
 80269fc:	f108 0201 	add.w	r2, r8, #1
 8026a00:	3b01      	subs	r3, #1
 8026a02:	4631      	mov	r1, r6
 8026a04:	4628      	mov	r0, r5
 8026a06:	47b8      	blx	r7
 8026a08:	3001      	adds	r0, #1
 8026a0a:	d10e      	bne.n	8026a2a <_printf_float+0x3fa>
 8026a0c:	e65e      	b.n	80266cc <_printf_float+0x9c>
 8026a0e:	2301      	movs	r3, #1
 8026a10:	464a      	mov	r2, r9
 8026a12:	4631      	mov	r1, r6
 8026a14:	4628      	mov	r0, r5
 8026a16:	47b8      	blx	r7
 8026a18:	3001      	adds	r0, #1
 8026a1a:	f43f ae57 	beq.w	80266cc <_printf_float+0x9c>
 8026a1e:	f108 0801 	add.w	r8, r8, #1
 8026a22:	9b08      	ldr	r3, [sp, #32]
 8026a24:	3b01      	subs	r3, #1
 8026a26:	4543      	cmp	r3, r8
 8026a28:	dcf1      	bgt.n	8026a0e <_printf_float+0x3de>
 8026a2a:	9b04      	ldr	r3, [sp, #16]
 8026a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8026a30:	e6db      	b.n	80267ea <_printf_float+0x1ba>
 8026a32:	f04f 0800 	mov.w	r8, #0
 8026a36:	f104 091a 	add.w	r9, r4, #26
 8026a3a:	e7f2      	b.n	8026a22 <_printf_float+0x3f2>
 8026a3c:	2301      	movs	r3, #1
 8026a3e:	4642      	mov	r2, r8
 8026a40:	e7df      	b.n	8026a02 <_printf_float+0x3d2>
 8026a42:	2301      	movs	r3, #1
 8026a44:	464a      	mov	r2, r9
 8026a46:	4631      	mov	r1, r6
 8026a48:	4628      	mov	r0, r5
 8026a4a:	47b8      	blx	r7
 8026a4c:	3001      	adds	r0, #1
 8026a4e:	f43f ae3d 	beq.w	80266cc <_printf_float+0x9c>
 8026a52:	f108 0801 	add.w	r8, r8, #1
 8026a56:	68e3      	ldr	r3, [r4, #12]
 8026a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026a5a:	1a5b      	subs	r3, r3, r1
 8026a5c:	4543      	cmp	r3, r8
 8026a5e:	dcf0      	bgt.n	8026a42 <_printf_float+0x412>
 8026a60:	e6f7      	b.n	8026852 <_printf_float+0x222>
 8026a62:	f04f 0800 	mov.w	r8, #0
 8026a66:	f104 0919 	add.w	r9, r4, #25
 8026a6a:	e7f4      	b.n	8026a56 <_printf_float+0x426>

08026a6c <_printf_common>:
 8026a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026a70:	4616      	mov	r6, r2
 8026a72:	4699      	mov	r9, r3
 8026a74:	688a      	ldr	r2, [r1, #8]
 8026a76:	690b      	ldr	r3, [r1, #16]
 8026a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026a7c:	4293      	cmp	r3, r2
 8026a7e:	bfb8      	it	lt
 8026a80:	4613      	movlt	r3, r2
 8026a82:	6033      	str	r3, [r6, #0]
 8026a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026a88:	4607      	mov	r7, r0
 8026a8a:	460c      	mov	r4, r1
 8026a8c:	b10a      	cbz	r2, 8026a92 <_printf_common+0x26>
 8026a8e:	3301      	adds	r3, #1
 8026a90:	6033      	str	r3, [r6, #0]
 8026a92:	6823      	ldr	r3, [r4, #0]
 8026a94:	0699      	lsls	r1, r3, #26
 8026a96:	bf42      	ittt	mi
 8026a98:	6833      	ldrmi	r3, [r6, #0]
 8026a9a:	3302      	addmi	r3, #2
 8026a9c:	6033      	strmi	r3, [r6, #0]
 8026a9e:	6825      	ldr	r5, [r4, #0]
 8026aa0:	f015 0506 	ands.w	r5, r5, #6
 8026aa4:	d106      	bne.n	8026ab4 <_printf_common+0x48>
 8026aa6:	f104 0a19 	add.w	sl, r4, #25
 8026aaa:	68e3      	ldr	r3, [r4, #12]
 8026aac:	6832      	ldr	r2, [r6, #0]
 8026aae:	1a9b      	subs	r3, r3, r2
 8026ab0:	42ab      	cmp	r3, r5
 8026ab2:	dc26      	bgt.n	8026b02 <_printf_common+0x96>
 8026ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026ab8:	1e13      	subs	r3, r2, #0
 8026aba:	6822      	ldr	r2, [r4, #0]
 8026abc:	bf18      	it	ne
 8026abe:	2301      	movne	r3, #1
 8026ac0:	0692      	lsls	r2, r2, #26
 8026ac2:	d42b      	bmi.n	8026b1c <_printf_common+0xb0>
 8026ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026ac8:	4649      	mov	r1, r9
 8026aca:	4638      	mov	r0, r7
 8026acc:	47c0      	blx	r8
 8026ace:	3001      	adds	r0, #1
 8026ad0:	d01e      	beq.n	8026b10 <_printf_common+0xa4>
 8026ad2:	6823      	ldr	r3, [r4, #0]
 8026ad4:	68e5      	ldr	r5, [r4, #12]
 8026ad6:	6832      	ldr	r2, [r6, #0]
 8026ad8:	f003 0306 	and.w	r3, r3, #6
 8026adc:	2b04      	cmp	r3, #4
 8026ade:	bf08      	it	eq
 8026ae0:	1aad      	subeq	r5, r5, r2
 8026ae2:	68a3      	ldr	r3, [r4, #8]
 8026ae4:	6922      	ldr	r2, [r4, #16]
 8026ae6:	bf0c      	ite	eq
 8026ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026aec:	2500      	movne	r5, #0
 8026aee:	4293      	cmp	r3, r2
 8026af0:	bfc4      	itt	gt
 8026af2:	1a9b      	subgt	r3, r3, r2
 8026af4:	18ed      	addgt	r5, r5, r3
 8026af6:	2600      	movs	r6, #0
 8026af8:	341a      	adds	r4, #26
 8026afa:	42b5      	cmp	r5, r6
 8026afc:	d11a      	bne.n	8026b34 <_printf_common+0xc8>
 8026afe:	2000      	movs	r0, #0
 8026b00:	e008      	b.n	8026b14 <_printf_common+0xa8>
 8026b02:	2301      	movs	r3, #1
 8026b04:	4652      	mov	r2, sl
 8026b06:	4649      	mov	r1, r9
 8026b08:	4638      	mov	r0, r7
 8026b0a:	47c0      	blx	r8
 8026b0c:	3001      	adds	r0, #1
 8026b0e:	d103      	bne.n	8026b18 <_printf_common+0xac>
 8026b10:	f04f 30ff 	mov.w	r0, #4294967295
 8026b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026b18:	3501      	adds	r5, #1
 8026b1a:	e7c6      	b.n	8026aaa <_printf_common+0x3e>
 8026b1c:	18e1      	adds	r1, r4, r3
 8026b1e:	1c5a      	adds	r2, r3, #1
 8026b20:	2030      	movs	r0, #48	; 0x30
 8026b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026b26:	4422      	add	r2, r4
 8026b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026b30:	3302      	adds	r3, #2
 8026b32:	e7c7      	b.n	8026ac4 <_printf_common+0x58>
 8026b34:	2301      	movs	r3, #1
 8026b36:	4622      	mov	r2, r4
 8026b38:	4649      	mov	r1, r9
 8026b3a:	4638      	mov	r0, r7
 8026b3c:	47c0      	blx	r8
 8026b3e:	3001      	adds	r0, #1
 8026b40:	d0e6      	beq.n	8026b10 <_printf_common+0xa4>
 8026b42:	3601      	adds	r6, #1
 8026b44:	e7d9      	b.n	8026afa <_printf_common+0x8e>
	...

08026b48 <_printf_i>:
 8026b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026b4c:	460c      	mov	r4, r1
 8026b4e:	4691      	mov	r9, r2
 8026b50:	7e27      	ldrb	r7, [r4, #24]
 8026b52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026b54:	2f78      	cmp	r7, #120	; 0x78
 8026b56:	4680      	mov	r8, r0
 8026b58:	469a      	mov	sl, r3
 8026b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026b5e:	d807      	bhi.n	8026b70 <_printf_i+0x28>
 8026b60:	2f62      	cmp	r7, #98	; 0x62
 8026b62:	d80a      	bhi.n	8026b7a <_printf_i+0x32>
 8026b64:	2f00      	cmp	r7, #0
 8026b66:	f000 80d8 	beq.w	8026d1a <_printf_i+0x1d2>
 8026b6a:	2f58      	cmp	r7, #88	; 0x58
 8026b6c:	f000 80a3 	beq.w	8026cb6 <_printf_i+0x16e>
 8026b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026b78:	e03a      	b.n	8026bf0 <_printf_i+0xa8>
 8026b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026b7e:	2b15      	cmp	r3, #21
 8026b80:	d8f6      	bhi.n	8026b70 <_printf_i+0x28>
 8026b82:	a001      	add	r0, pc, #4	; (adr r0, 8026b88 <_printf_i+0x40>)
 8026b84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8026b88:	08026be1 	.word	0x08026be1
 8026b8c:	08026bf5 	.word	0x08026bf5
 8026b90:	08026b71 	.word	0x08026b71
 8026b94:	08026b71 	.word	0x08026b71
 8026b98:	08026b71 	.word	0x08026b71
 8026b9c:	08026b71 	.word	0x08026b71
 8026ba0:	08026bf5 	.word	0x08026bf5
 8026ba4:	08026b71 	.word	0x08026b71
 8026ba8:	08026b71 	.word	0x08026b71
 8026bac:	08026b71 	.word	0x08026b71
 8026bb0:	08026b71 	.word	0x08026b71
 8026bb4:	08026d01 	.word	0x08026d01
 8026bb8:	08026c25 	.word	0x08026c25
 8026bbc:	08026ce3 	.word	0x08026ce3
 8026bc0:	08026b71 	.word	0x08026b71
 8026bc4:	08026b71 	.word	0x08026b71
 8026bc8:	08026d23 	.word	0x08026d23
 8026bcc:	08026b71 	.word	0x08026b71
 8026bd0:	08026c25 	.word	0x08026c25
 8026bd4:	08026b71 	.word	0x08026b71
 8026bd8:	08026b71 	.word	0x08026b71
 8026bdc:	08026ceb 	.word	0x08026ceb
 8026be0:	680b      	ldr	r3, [r1, #0]
 8026be2:	1d1a      	adds	r2, r3, #4
 8026be4:	681b      	ldr	r3, [r3, #0]
 8026be6:	600a      	str	r2, [r1, #0]
 8026be8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026bf0:	2301      	movs	r3, #1
 8026bf2:	e0a3      	b.n	8026d3c <_printf_i+0x1f4>
 8026bf4:	6825      	ldr	r5, [r4, #0]
 8026bf6:	6808      	ldr	r0, [r1, #0]
 8026bf8:	062e      	lsls	r6, r5, #24
 8026bfa:	f100 0304 	add.w	r3, r0, #4
 8026bfe:	d50a      	bpl.n	8026c16 <_printf_i+0xce>
 8026c00:	6805      	ldr	r5, [r0, #0]
 8026c02:	600b      	str	r3, [r1, #0]
 8026c04:	2d00      	cmp	r5, #0
 8026c06:	da03      	bge.n	8026c10 <_printf_i+0xc8>
 8026c08:	232d      	movs	r3, #45	; 0x2d
 8026c0a:	426d      	negs	r5, r5
 8026c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026c10:	485e      	ldr	r0, [pc, #376]	; (8026d8c <_printf_i+0x244>)
 8026c12:	230a      	movs	r3, #10
 8026c14:	e019      	b.n	8026c4a <_printf_i+0x102>
 8026c16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026c1a:	6805      	ldr	r5, [r0, #0]
 8026c1c:	600b      	str	r3, [r1, #0]
 8026c1e:	bf18      	it	ne
 8026c20:	b22d      	sxthne	r5, r5
 8026c22:	e7ef      	b.n	8026c04 <_printf_i+0xbc>
 8026c24:	680b      	ldr	r3, [r1, #0]
 8026c26:	6825      	ldr	r5, [r4, #0]
 8026c28:	1d18      	adds	r0, r3, #4
 8026c2a:	6008      	str	r0, [r1, #0]
 8026c2c:	0628      	lsls	r0, r5, #24
 8026c2e:	d501      	bpl.n	8026c34 <_printf_i+0xec>
 8026c30:	681d      	ldr	r5, [r3, #0]
 8026c32:	e002      	b.n	8026c3a <_printf_i+0xf2>
 8026c34:	0669      	lsls	r1, r5, #25
 8026c36:	d5fb      	bpl.n	8026c30 <_printf_i+0xe8>
 8026c38:	881d      	ldrh	r5, [r3, #0]
 8026c3a:	4854      	ldr	r0, [pc, #336]	; (8026d8c <_printf_i+0x244>)
 8026c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8026c3e:	bf0c      	ite	eq
 8026c40:	2308      	moveq	r3, #8
 8026c42:	230a      	movne	r3, #10
 8026c44:	2100      	movs	r1, #0
 8026c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026c4a:	6866      	ldr	r6, [r4, #4]
 8026c4c:	60a6      	str	r6, [r4, #8]
 8026c4e:	2e00      	cmp	r6, #0
 8026c50:	bfa2      	ittt	ge
 8026c52:	6821      	ldrge	r1, [r4, #0]
 8026c54:	f021 0104 	bicge.w	r1, r1, #4
 8026c58:	6021      	strge	r1, [r4, #0]
 8026c5a:	b90d      	cbnz	r5, 8026c60 <_printf_i+0x118>
 8026c5c:	2e00      	cmp	r6, #0
 8026c5e:	d04d      	beq.n	8026cfc <_printf_i+0x1b4>
 8026c60:	4616      	mov	r6, r2
 8026c62:	fbb5 f1f3 	udiv	r1, r5, r3
 8026c66:	fb03 5711 	mls	r7, r3, r1, r5
 8026c6a:	5dc7      	ldrb	r7, [r0, r7]
 8026c6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026c70:	462f      	mov	r7, r5
 8026c72:	42bb      	cmp	r3, r7
 8026c74:	460d      	mov	r5, r1
 8026c76:	d9f4      	bls.n	8026c62 <_printf_i+0x11a>
 8026c78:	2b08      	cmp	r3, #8
 8026c7a:	d10b      	bne.n	8026c94 <_printf_i+0x14c>
 8026c7c:	6823      	ldr	r3, [r4, #0]
 8026c7e:	07df      	lsls	r7, r3, #31
 8026c80:	d508      	bpl.n	8026c94 <_printf_i+0x14c>
 8026c82:	6923      	ldr	r3, [r4, #16]
 8026c84:	6861      	ldr	r1, [r4, #4]
 8026c86:	4299      	cmp	r1, r3
 8026c88:	bfde      	ittt	le
 8026c8a:	2330      	movle	r3, #48	; 0x30
 8026c8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026c90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026c94:	1b92      	subs	r2, r2, r6
 8026c96:	6122      	str	r2, [r4, #16]
 8026c98:	f8cd a000 	str.w	sl, [sp]
 8026c9c:	464b      	mov	r3, r9
 8026c9e:	aa03      	add	r2, sp, #12
 8026ca0:	4621      	mov	r1, r4
 8026ca2:	4640      	mov	r0, r8
 8026ca4:	f7ff fee2 	bl	8026a6c <_printf_common>
 8026ca8:	3001      	adds	r0, #1
 8026caa:	d14c      	bne.n	8026d46 <_printf_i+0x1fe>
 8026cac:	f04f 30ff 	mov.w	r0, #4294967295
 8026cb0:	b004      	add	sp, #16
 8026cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026cb6:	4835      	ldr	r0, [pc, #212]	; (8026d8c <_printf_i+0x244>)
 8026cb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8026cbc:	6823      	ldr	r3, [r4, #0]
 8026cbe:	680e      	ldr	r6, [r1, #0]
 8026cc0:	061f      	lsls	r7, r3, #24
 8026cc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8026cc6:	600e      	str	r6, [r1, #0]
 8026cc8:	d514      	bpl.n	8026cf4 <_printf_i+0x1ac>
 8026cca:	07d9      	lsls	r1, r3, #31
 8026ccc:	bf44      	itt	mi
 8026cce:	f043 0320 	orrmi.w	r3, r3, #32
 8026cd2:	6023      	strmi	r3, [r4, #0]
 8026cd4:	b91d      	cbnz	r5, 8026cde <_printf_i+0x196>
 8026cd6:	6823      	ldr	r3, [r4, #0]
 8026cd8:	f023 0320 	bic.w	r3, r3, #32
 8026cdc:	6023      	str	r3, [r4, #0]
 8026cde:	2310      	movs	r3, #16
 8026ce0:	e7b0      	b.n	8026c44 <_printf_i+0xfc>
 8026ce2:	6823      	ldr	r3, [r4, #0]
 8026ce4:	f043 0320 	orr.w	r3, r3, #32
 8026ce8:	6023      	str	r3, [r4, #0]
 8026cea:	2378      	movs	r3, #120	; 0x78
 8026cec:	4828      	ldr	r0, [pc, #160]	; (8026d90 <_printf_i+0x248>)
 8026cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026cf2:	e7e3      	b.n	8026cbc <_printf_i+0x174>
 8026cf4:	065e      	lsls	r6, r3, #25
 8026cf6:	bf48      	it	mi
 8026cf8:	b2ad      	uxthmi	r5, r5
 8026cfa:	e7e6      	b.n	8026cca <_printf_i+0x182>
 8026cfc:	4616      	mov	r6, r2
 8026cfe:	e7bb      	b.n	8026c78 <_printf_i+0x130>
 8026d00:	680b      	ldr	r3, [r1, #0]
 8026d02:	6826      	ldr	r6, [r4, #0]
 8026d04:	6960      	ldr	r0, [r4, #20]
 8026d06:	1d1d      	adds	r5, r3, #4
 8026d08:	600d      	str	r5, [r1, #0]
 8026d0a:	0635      	lsls	r5, r6, #24
 8026d0c:	681b      	ldr	r3, [r3, #0]
 8026d0e:	d501      	bpl.n	8026d14 <_printf_i+0x1cc>
 8026d10:	6018      	str	r0, [r3, #0]
 8026d12:	e002      	b.n	8026d1a <_printf_i+0x1d2>
 8026d14:	0671      	lsls	r1, r6, #25
 8026d16:	d5fb      	bpl.n	8026d10 <_printf_i+0x1c8>
 8026d18:	8018      	strh	r0, [r3, #0]
 8026d1a:	2300      	movs	r3, #0
 8026d1c:	6123      	str	r3, [r4, #16]
 8026d1e:	4616      	mov	r6, r2
 8026d20:	e7ba      	b.n	8026c98 <_printf_i+0x150>
 8026d22:	680b      	ldr	r3, [r1, #0]
 8026d24:	1d1a      	adds	r2, r3, #4
 8026d26:	600a      	str	r2, [r1, #0]
 8026d28:	681e      	ldr	r6, [r3, #0]
 8026d2a:	6862      	ldr	r2, [r4, #4]
 8026d2c:	2100      	movs	r1, #0
 8026d2e:	4630      	mov	r0, r6
 8026d30:	f7d9 fa8e 	bl	8000250 <memchr>
 8026d34:	b108      	cbz	r0, 8026d3a <_printf_i+0x1f2>
 8026d36:	1b80      	subs	r0, r0, r6
 8026d38:	6060      	str	r0, [r4, #4]
 8026d3a:	6863      	ldr	r3, [r4, #4]
 8026d3c:	6123      	str	r3, [r4, #16]
 8026d3e:	2300      	movs	r3, #0
 8026d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026d44:	e7a8      	b.n	8026c98 <_printf_i+0x150>
 8026d46:	6923      	ldr	r3, [r4, #16]
 8026d48:	4632      	mov	r2, r6
 8026d4a:	4649      	mov	r1, r9
 8026d4c:	4640      	mov	r0, r8
 8026d4e:	47d0      	blx	sl
 8026d50:	3001      	adds	r0, #1
 8026d52:	d0ab      	beq.n	8026cac <_printf_i+0x164>
 8026d54:	6823      	ldr	r3, [r4, #0]
 8026d56:	079b      	lsls	r3, r3, #30
 8026d58:	d413      	bmi.n	8026d82 <_printf_i+0x23a>
 8026d5a:	68e0      	ldr	r0, [r4, #12]
 8026d5c:	9b03      	ldr	r3, [sp, #12]
 8026d5e:	4298      	cmp	r0, r3
 8026d60:	bfb8      	it	lt
 8026d62:	4618      	movlt	r0, r3
 8026d64:	e7a4      	b.n	8026cb0 <_printf_i+0x168>
 8026d66:	2301      	movs	r3, #1
 8026d68:	4632      	mov	r2, r6
 8026d6a:	4649      	mov	r1, r9
 8026d6c:	4640      	mov	r0, r8
 8026d6e:	47d0      	blx	sl
 8026d70:	3001      	adds	r0, #1
 8026d72:	d09b      	beq.n	8026cac <_printf_i+0x164>
 8026d74:	3501      	adds	r5, #1
 8026d76:	68e3      	ldr	r3, [r4, #12]
 8026d78:	9903      	ldr	r1, [sp, #12]
 8026d7a:	1a5b      	subs	r3, r3, r1
 8026d7c:	42ab      	cmp	r3, r5
 8026d7e:	dcf2      	bgt.n	8026d66 <_printf_i+0x21e>
 8026d80:	e7eb      	b.n	8026d5a <_printf_i+0x212>
 8026d82:	2500      	movs	r5, #0
 8026d84:	f104 0619 	add.w	r6, r4, #25
 8026d88:	e7f5      	b.n	8026d76 <_printf_i+0x22e>
 8026d8a:	bf00      	nop
 8026d8c:	0802ea75 	.word	0x0802ea75
 8026d90:	0802ea86 	.word	0x0802ea86

08026d94 <_scanf_float>:
 8026d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d98:	b087      	sub	sp, #28
 8026d9a:	4617      	mov	r7, r2
 8026d9c:	9303      	str	r3, [sp, #12]
 8026d9e:	688b      	ldr	r3, [r1, #8]
 8026da0:	1e5a      	subs	r2, r3, #1
 8026da2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8026da6:	bf83      	ittte	hi
 8026da8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8026dac:	195b      	addhi	r3, r3, r5
 8026dae:	9302      	strhi	r3, [sp, #8]
 8026db0:	2300      	movls	r3, #0
 8026db2:	bf86      	itte	hi
 8026db4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8026db8:	608b      	strhi	r3, [r1, #8]
 8026dba:	9302      	strls	r3, [sp, #8]
 8026dbc:	680b      	ldr	r3, [r1, #0]
 8026dbe:	468b      	mov	fp, r1
 8026dc0:	2500      	movs	r5, #0
 8026dc2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8026dc6:	f84b 3b1c 	str.w	r3, [fp], #28
 8026dca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8026dce:	4680      	mov	r8, r0
 8026dd0:	460c      	mov	r4, r1
 8026dd2:	465e      	mov	r6, fp
 8026dd4:	46aa      	mov	sl, r5
 8026dd6:	46a9      	mov	r9, r5
 8026dd8:	9501      	str	r5, [sp, #4]
 8026dda:	68a2      	ldr	r2, [r4, #8]
 8026ddc:	b152      	cbz	r2, 8026df4 <_scanf_float+0x60>
 8026dde:	683b      	ldr	r3, [r7, #0]
 8026de0:	781b      	ldrb	r3, [r3, #0]
 8026de2:	2b4e      	cmp	r3, #78	; 0x4e
 8026de4:	d864      	bhi.n	8026eb0 <_scanf_float+0x11c>
 8026de6:	2b40      	cmp	r3, #64	; 0x40
 8026de8:	d83c      	bhi.n	8026e64 <_scanf_float+0xd0>
 8026dea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8026dee:	b2c8      	uxtb	r0, r1
 8026df0:	280e      	cmp	r0, #14
 8026df2:	d93a      	bls.n	8026e6a <_scanf_float+0xd6>
 8026df4:	f1b9 0f00 	cmp.w	r9, #0
 8026df8:	d003      	beq.n	8026e02 <_scanf_float+0x6e>
 8026dfa:	6823      	ldr	r3, [r4, #0]
 8026dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8026e00:	6023      	str	r3, [r4, #0]
 8026e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026e06:	f1ba 0f01 	cmp.w	sl, #1
 8026e0a:	f200 8113 	bhi.w	8027034 <_scanf_float+0x2a0>
 8026e0e:	455e      	cmp	r6, fp
 8026e10:	f200 8105 	bhi.w	802701e <_scanf_float+0x28a>
 8026e14:	2501      	movs	r5, #1
 8026e16:	4628      	mov	r0, r5
 8026e18:	b007      	add	sp, #28
 8026e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8026e22:	2a0d      	cmp	r2, #13
 8026e24:	d8e6      	bhi.n	8026df4 <_scanf_float+0x60>
 8026e26:	a101      	add	r1, pc, #4	; (adr r1, 8026e2c <_scanf_float+0x98>)
 8026e28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8026e2c:	08026f6b 	.word	0x08026f6b
 8026e30:	08026df5 	.word	0x08026df5
 8026e34:	08026df5 	.word	0x08026df5
 8026e38:	08026df5 	.word	0x08026df5
 8026e3c:	08026fcb 	.word	0x08026fcb
 8026e40:	08026fa3 	.word	0x08026fa3
 8026e44:	08026df5 	.word	0x08026df5
 8026e48:	08026df5 	.word	0x08026df5
 8026e4c:	08026f79 	.word	0x08026f79
 8026e50:	08026df5 	.word	0x08026df5
 8026e54:	08026df5 	.word	0x08026df5
 8026e58:	08026df5 	.word	0x08026df5
 8026e5c:	08026df5 	.word	0x08026df5
 8026e60:	08026f31 	.word	0x08026f31
 8026e64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8026e68:	e7db      	b.n	8026e22 <_scanf_float+0x8e>
 8026e6a:	290e      	cmp	r1, #14
 8026e6c:	d8c2      	bhi.n	8026df4 <_scanf_float+0x60>
 8026e6e:	a001      	add	r0, pc, #4	; (adr r0, 8026e74 <_scanf_float+0xe0>)
 8026e70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8026e74:	08026f23 	.word	0x08026f23
 8026e78:	08026df5 	.word	0x08026df5
 8026e7c:	08026f23 	.word	0x08026f23
 8026e80:	08026fb7 	.word	0x08026fb7
 8026e84:	08026df5 	.word	0x08026df5
 8026e88:	08026ed1 	.word	0x08026ed1
 8026e8c:	08026f0d 	.word	0x08026f0d
 8026e90:	08026f0d 	.word	0x08026f0d
 8026e94:	08026f0d 	.word	0x08026f0d
 8026e98:	08026f0d 	.word	0x08026f0d
 8026e9c:	08026f0d 	.word	0x08026f0d
 8026ea0:	08026f0d 	.word	0x08026f0d
 8026ea4:	08026f0d 	.word	0x08026f0d
 8026ea8:	08026f0d 	.word	0x08026f0d
 8026eac:	08026f0d 	.word	0x08026f0d
 8026eb0:	2b6e      	cmp	r3, #110	; 0x6e
 8026eb2:	d809      	bhi.n	8026ec8 <_scanf_float+0x134>
 8026eb4:	2b60      	cmp	r3, #96	; 0x60
 8026eb6:	d8b2      	bhi.n	8026e1e <_scanf_float+0x8a>
 8026eb8:	2b54      	cmp	r3, #84	; 0x54
 8026eba:	d077      	beq.n	8026fac <_scanf_float+0x218>
 8026ebc:	2b59      	cmp	r3, #89	; 0x59
 8026ebe:	d199      	bne.n	8026df4 <_scanf_float+0x60>
 8026ec0:	2d07      	cmp	r5, #7
 8026ec2:	d197      	bne.n	8026df4 <_scanf_float+0x60>
 8026ec4:	2508      	movs	r5, #8
 8026ec6:	e029      	b.n	8026f1c <_scanf_float+0x188>
 8026ec8:	2b74      	cmp	r3, #116	; 0x74
 8026eca:	d06f      	beq.n	8026fac <_scanf_float+0x218>
 8026ecc:	2b79      	cmp	r3, #121	; 0x79
 8026ece:	e7f6      	b.n	8026ebe <_scanf_float+0x12a>
 8026ed0:	6821      	ldr	r1, [r4, #0]
 8026ed2:	05c8      	lsls	r0, r1, #23
 8026ed4:	d51a      	bpl.n	8026f0c <_scanf_float+0x178>
 8026ed6:	9b02      	ldr	r3, [sp, #8]
 8026ed8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8026edc:	6021      	str	r1, [r4, #0]
 8026ede:	f109 0901 	add.w	r9, r9, #1
 8026ee2:	b11b      	cbz	r3, 8026eec <_scanf_float+0x158>
 8026ee4:	3b01      	subs	r3, #1
 8026ee6:	3201      	adds	r2, #1
 8026ee8:	9302      	str	r3, [sp, #8]
 8026eea:	60a2      	str	r2, [r4, #8]
 8026eec:	68a3      	ldr	r3, [r4, #8]
 8026eee:	3b01      	subs	r3, #1
 8026ef0:	60a3      	str	r3, [r4, #8]
 8026ef2:	6923      	ldr	r3, [r4, #16]
 8026ef4:	3301      	adds	r3, #1
 8026ef6:	6123      	str	r3, [r4, #16]
 8026ef8:	687b      	ldr	r3, [r7, #4]
 8026efa:	3b01      	subs	r3, #1
 8026efc:	2b00      	cmp	r3, #0
 8026efe:	607b      	str	r3, [r7, #4]
 8026f00:	f340 8084 	ble.w	802700c <_scanf_float+0x278>
 8026f04:	683b      	ldr	r3, [r7, #0]
 8026f06:	3301      	adds	r3, #1
 8026f08:	603b      	str	r3, [r7, #0]
 8026f0a:	e766      	b.n	8026dda <_scanf_float+0x46>
 8026f0c:	eb1a 0f05 	cmn.w	sl, r5
 8026f10:	f47f af70 	bne.w	8026df4 <_scanf_float+0x60>
 8026f14:	6822      	ldr	r2, [r4, #0]
 8026f16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8026f1a:	6022      	str	r2, [r4, #0]
 8026f1c:	f806 3b01 	strb.w	r3, [r6], #1
 8026f20:	e7e4      	b.n	8026eec <_scanf_float+0x158>
 8026f22:	6822      	ldr	r2, [r4, #0]
 8026f24:	0610      	lsls	r0, r2, #24
 8026f26:	f57f af65 	bpl.w	8026df4 <_scanf_float+0x60>
 8026f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8026f2e:	e7f4      	b.n	8026f1a <_scanf_float+0x186>
 8026f30:	f1ba 0f00 	cmp.w	sl, #0
 8026f34:	d10e      	bne.n	8026f54 <_scanf_float+0x1c0>
 8026f36:	f1b9 0f00 	cmp.w	r9, #0
 8026f3a:	d10e      	bne.n	8026f5a <_scanf_float+0x1c6>
 8026f3c:	6822      	ldr	r2, [r4, #0]
 8026f3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8026f42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8026f46:	d108      	bne.n	8026f5a <_scanf_float+0x1c6>
 8026f48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8026f4c:	6022      	str	r2, [r4, #0]
 8026f4e:	f04f 0a01 	mov.w	sl, #1
 8026f52:	e7e3      	b.n	8026f1c <_scanf_float+0x188>
 8026f54:	f1ba 0f02 	cmp.w	sl, #2
 8026f58:	d055      	beq.n	8027006 <_scanf_float+0x272>
 8026f5a:	2d01      	cmp	r5, #1
 8026f5c:	d002      	beq.n	8026f64 <_scanf_float+0x1d0>
 8026f5e:	2d04      	cmp	r5, #4
 8026f60:	f47f af48 	bne.w	8026df4 <_scanf_float+0x60>
 8026f64:	3501      	adds	r5, #1
 8026f66:	b2ed      	uxtb	r5, r5
 8026f68:	e7d8      	b.n	8026f1c <_scanf_float+0x188>
 8026f6a:	f1ba 0f01 	cmp.w	sl, #1
 8026f6e:	f47f af41 	bne.w	8026df4 <_scanf_float+0x60>
 8026f72:	f04f 0a02 	mov.w	sl, #2
 8026f76:	e7d1      	b.n	8026f1c <_scanf_float+0x188>
 8026f78:	b97d      	cbnz	r5, 8026f9a <_scanf_float+0x206>
 8026f7a:	f1b9 0f00 	cmp.w	r9, #0
 8026f7e:	f47f af3c 	bne.w	8026dfa <_scanf_float+0x66>
 8026f82:	6822      	ldr	r2, [r4, #0]
 8026f84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8026f88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8026f8c:	f47f af39 	bne.w	8026e02 <_scanf_float+0x6e>
 8026f90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8026f94:	6022      	str	r2, [r4, #0]
 8026f96:	2501      	movs	r5, #1
 8026f98:	e7c0      	b.n	8026f1c <_scanf_float+0x188>
 8026f9a:	2d03      	cmp	r5, #3
 8026f9c:	d0e2      	beq.n	8026f64 <_scanf_float+0x1d0>
 8026f9e:	2d05      	cmp	r5, #5
 8026fa0:	e7de      	b.n	8026f60 <_scanf_float+0x1cc>
 8026fa2:	2d02      	cmp	r5, #2
 8026fa4:	f47f af26 	bne.w	8026df4 <_scanf_float+0x60>
 8026fa8:	2503      	movs	r5, #3
 8026faa:	e7b7      	b.n	8026f1c <_scanf_float+0x188>
 8026fac:	2d06      	cmp	r5, #6
 8026fae:	f47f af21 	bne.w	8026df4 <_scanf_float+0x60>
 8026fb2:	2507      	movs	r5, #7
 8026fb4:	e7b2      	b.n	8026f1c <_scanf_float+0x188>
 8026fb6:	6822      	ldr	r2, [r4, #0]
 8026fb8:	0591      	lsls	r1, r2, #22
 8026fba:	f57f af1b 	bpl.w	8026df4 <_scanf_float+0x60>
 8026fbe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8026fc2:	6022      	str	r2, [r4, #0]
 8026fc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8026fc8:	e7a8      	b.n	8026f1c <_scanf_float+0x188>
 8026fca:	6822      	ldr	r2, [r4, #0]
 8026fcc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8026fd0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8026fd4:	d006      	beq.n	8026fe4 <_scanf_float+0x250>
 8026fd6:	0550      	lsls	r0, r2, #21
 8026fd8:	f57f af0c 	bpl.w	8026df4 <_scanf_float+0x60>
 8026fdc:	f1b9 0f00 	cmp.w	r9, #0
 8026fe0:	f43f af0f 	beq.w	8026e02 <_scanf_float+0x6e>
 8026fe4:	0591      	lsls	r1, r2, #22
 8026fe6:	bf58      	it	pl
 8026fe8:	9901      	ldrpl	r1, [sp, #4]
 8026fea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8026fee:	bf58      	it	pl
 8026ff0:	eba9 0101 	subpl.w	r1, r9, r1
 8026ff4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8026ff8:	bf58      	it	pl
 8026ffa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8026ffe:	6022      	str	r2, [r4, #0]
 8027000:	f04f 0900 	mov.w	r9, #0
 8027004:	e78a      	b.n	8026f1c <_scanf_float+0x188>
 8027006:	f04f 0a03 	mov.w	sl, #3
 802700a:	e787      	b.n	8026f1c <_scanf_float+0x188>
 802700c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027010:	4639      	mov	r1, r7
 8027012:	4640      	mov	r0, r8
 8027014:	4798      	blx	r3
 8027016:	2800      	cmp	r0, #0
 8027018:	f43f aedf 	beq.w	8026dda <_scanf_float+0x46>
 802701c:	e6ea      	b.n	8026df4 <_scanf_float+0x60>
 802701e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027022:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8027026:	463a      	mov	r2, r7
 8027028:	4640      	mov	r0, r8
 802702a:	4798      	blx	r3
 802702c:	6923      	ldr	r3, [r4, #16]
 802702e:	3b01      	subs	r3, #1
 8027030:	6123      	str	r3, [r4, #16]
 8027032:	e6ec      	b.n	8026e0e <_scanf_float+0x7a>
 8027034:	1e6b      	subs	r3, r5, #1
 8027036:	2b06      	cmp	r3, #6
 8027038:	d825      	bhi.n	8027086 <_scanf_float+0x2f2>
 802703a:	2d02      	cmp	r5, #2
 802703c:	d836      	bhi.n	80270ac <_scanf_float+0x318>
 802703e:	455e      	cmp	r6, fp
 8027040:	f67f aee8 	bls.w	8026e14 <_scanf_float+0x80>
 8027044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027048:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802704c:	463a      	mov	r2, r7
 802704e:	4640      	mov	r0, r8
 8027050:	4798      	blx	r3
 8027052:	6923      	ldr	r3, [r4, #16]
 8027054:	3b01      	subs	r3, #1
 8027056:	6123      	str	r3, [r4, #16]
 8027058:	e7f1      	b.n	802703e <_scanf_float+0x2aa>
 802705a:	9802      	ldr	r0, [sp, #8]
 802705c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027060:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8027064:	9002      	str	r0, [sp, #8]
 8027066:	463a      	mov	r2, r7
 8027068:	4640      	mov	r0, r8
 802706a:	4798      	blx	r3
 802706c:	6923      	ldr	r3, [r4, #16]
 802706e:	3b01      	subs	r3, #1
 8027070:	6123      	str	r3, [r4, #16]
 8027072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027076:	fa5f fa8a 	uxtb.w	sl, sl
 802707a:	f1ba 0f02 	cmp.w	sl, #2
 802707e:	d1ec      	bne.n	802705a <_scanf_float+0x2c6>
 8027080:	3d03      	subs	r5, #3
 8027082:	b2ed      	uxtb	r5, r5
 8027084:	1b76      	subs	r6, r6, r5
 8027086:	6823      	ldr	r3, [r4, #0]
 8027088:	05da      	lsls	r2, r3, #23
 802708a:	d52f      	bpl.n	80270ec <_scanf_float+0x358>
 802708c:	055b      	lsls	r3, r3, #21
 802708e:	d510      	bpl.n	80270b2 <_scanf_float+0x31e>
 8027090:	455e      	cmp	r6, fp
 8027092:	f67f aebf 	bls.w	8026e14 <_scanf_float+0x80>
 8027096:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802709a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802709e:	463a      	mov	r2, r7
 80270a0:	4640      	mov	r0, r8
 80270a2:	4798      	blx	r3
 80270a4:	6923      	ldr	r3, [r4, #16]
 80270a6:	3b01      	subs	r3, #1
 80270a8:	6123      	str	r3, [r4, #16]
 80270aa:	e7f1      	b.n	8027090 <_scanf_float+0x2fc>
 80270ac:	46aa      	mov	sl, r5
 80270ae:	9602      	str	r6, [sp, #8]
 80270b0:	e7df      	b.n	8027072 <_scanf_float+0x2de>
 80270b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80270b6:	6923      	ldr	r3, [r4, #16]
 80270b8:	2965      	cmp	r1, #101	; 0x65
 80270ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80270be:	f106 35ff 	add.w	r5, r6, #4294967295
 80270c2:	6123      	str	r3, [r4, #16]
 80270c4:	d00c      	beq.n	80270e0 <_scanf_float+0x34c>
 80270c6:	2945      	cmp	r1, #69	; 0x45
 80270c8:	d00a      	beq.n	80270e0 <_scanf_float+0x34c>
 80270ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80270ce:	463a      	mov	r2, r7
 80270d0:	4640      	mov	r0, r8
 80270d2:	4798      	blx	r3
 80270d4:	6923      	ldr	r3, [r4, #16]
 80270d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80270da:	3b01      	subs	r3, #1
 80270dc:	1eb5      	subs	r5, r6, #2
 80270de:	6123      	str	r3, [r4, #16]
 80270e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80270e4:	463a      	mov	r2, r7
 80270e6:	4640      	mov	r0, r8
 80270e8:	4798      	blx	r3
 80270ea:	462e      	mov	r6, r5
 80270ec:	6825      	ldr	r5, [r4, #0]
 80270ee:	f015 0510 	ands.w	r5, r5, #16
 80270f2:	d14d      	bne.n	8027190 <_scanf_float+0x3fc>
 80270f4:	7035      	strb	r5, [r6, #0]
 80270f6:	6823      	ldr	r3, [r4, #0]
 80270f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80270fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027100:	d11a      	bne.n	8027138 <_scanf_float+0x3a4>
 8027102:	9b01      	ldr	r3, [sp, #4]
 8027104:	454b      	cmp	r3, r9
 8027106:	eba3 0209 	sub.w	r2, r3, r9
 802710a:	d122      	bne.n	8027152 <_scanf_float+0x3be>
 802710c:	2200      	movs	r2, #0
 802710e:	4659      	mov	r1, fp
 8027110:	4640      	mov	r0, r8
 8027112:	f000 feaf 	bl	8027e74 <_strtod_r>
 8027116:	9b03      	ldr	r3, [sp, #12]
 8027118:	6821      	ldr	r1, [r4, #0]
 802711a:	681b      	ldr	r3, [r3, #0]
 802711c:	f011 0f02 	tst.w	r1, #2
 8027120:	f103 0204 	add.w	r2, r3, #4
 8027124:	d020      	beq.n	8027168 <_scanf_float+0x3d4>
 8027126:	9903      	ldr	r1, [sp, #12]
 8027128:	600a      	str	r2, [r1, #0]
 802712a:	681b      	ldr	r3, [r3, #0]
 802712c:	ed83 0b00 	vstr	d0, [r3]
 8027130:	68e3      	ldr	r3, [r4, #12]
 8027132:	3301      	adds	r3, #1
 8027134:	60e3      	str	r3, [r4, #12]
 8027136:	e66e      	b.n	8026e16 <_scanf_float+0x82>
 8027138:	9b04      	ldr	r3, [sp, #16]
 802713a:	2b00      	cmp	r3, #0
 802713c:	d0e6      	beq.n	802710c <_scanf_float+0x378>
 802713e:	9905      	ldr	r1, [sp, #20]
 8027140:	230a      	movs	r3, #10
 8027142:	462a      	mov	r2, r5
 8027144:	3101      	adds	r1, #1
 8027146:	4640      	mov	r0, r8
 8027148:	f000 ff1e 	bl	8027f88 <_strtol_r>
 802714c:	9b04      	ldr	r3, [sp, #16]
 802714e:	9e05      	ldr	r6, [sp, #20]
 8027150:	1ac2      	subs	r2, r0, r3
 8027152:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8027156:	429e      	cmp	r6, r3
 8027158:	bf28      	it	cs
 802715a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802715e:	490d      	ldr	r1, [pc, #52]	; (8027194 <_scanf_float+0x400>)
 8027160:	4630      	mov	r0, r6
 8027162:	f000 f875 	bl	8027250 <siprintf>
 8027166:	e7d1      	b.n	802710c <_scanf_float+0x378>
 8027168:	f011 0f04 	tst.w	r1, #4
 802716c:	9903      	ldr	r1, [sp, #12]
 802716e:	600a      	str	r2, [r1, #0]
 8027170:	d1db      	bne.n	802712a <_scanf_float+0x396>
 8027172:	eeb4 0b40 	vcmp.f64	d0, d0
 8027176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802717a:	681e      	ldr	r6, [r3, #0]
 802717c:	d705      	bvc.n	802718a <_scanf_float+0x3f6>
 802717e:	4806      	ldr	r0, [pc, #24]	; (8027198 <_scanf_float+0x404>)
 8027180:	f000 f81c 	bl	80271bc <nanf>
 8027184:	ed86 0a00 	vstr	s0, [r6]
 8027188:	e7d2      	b.n	8027130 <_scanf_float+0x39c>
 802718a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802718e:	e7f9      	b.n	8027184 <_scanf_float+0x3f0>
 8027190:	2500      	movs	r5, #0
 8027192:	e640      	b.n	8026e16 <_scanf_float+0x82>
 8027194:	0802ea97 	.word	0x0802ea97
 8027198:	0802ea4f 	.word	0x0802ea4f

0802719c <_sbrk_r>:
 802719c:	b538      	push	{r3, r4, r5, lr}
 802719e:	4d06      	ldr	r5, [pc, #24]	; (80271b8 <_sbrk_r+0x1c>)
 80271a0:	2300      	movs	r3, #0
 80271a2:	4604      	mov	r4, r0
 80271a4:	4608      	mov	r0, r1
 80271a6:	602b      	str	r3, [r5, #0]
 80271a8:	f7db fdb2 	bl	8002d10 <_sbrk>
 80271ac:	1c43      	adds	r3, r0, #1
 80271ae:	d102      	bne.n	80271b6 <_sbrk_r+0x1a>
 80271b0:	682b      	ldr	r3, [r5, #0]
 80271b2:	b103      	cbz	r3, 80271b6 <_sbrk_r+0x1a>
 80271b4:	6023      	str	r3, [r4, #0]
 80271b6:	bd38      	pop	{r3, r4, r5, pc}
 80271b8:	20057100 	.word	0x20057100

080271bc <nanf>:
 80271bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80271c4 <nanf+0x8>
 80271c0:	4770      	bx	lr
 80271c2:	bf00      	nop
 80271c4:	7fc00000 	.word	0x7fc00000

080271c8 <_raise_r>:
 80271c8:	291f      	cmp	r1, #31
 80271ca:	b538      	push	{r3, r4, r5, lr}
 80271cc:	4604      	mov	r4, r0
 80271ce:	460d      	mov	r5, r1
 80271d0:	d904      	bls.n	80271dc <_raise_r+0x14>
 80271d2:	2316      	movs	r3, #22
 80271d4:	6003      	str	r3, [r0, #0]
 80271d6:	f04f 30ff 	mov.w	r0, #4294967295
 80271da:	bd38      	pop	{r3, r4, r5, pc}
 80271dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80271de:	b112      	cbz	r2, 80271e6 <_raise_r+0x1e>
 80271e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80271e4:	b94b      	cbnz	r3, 80271fa <_raise_r+0x32>
 80271e6:	4620      	mov	r0, r4
 80271e8:	f000 f830 	bl	802724c <_getpid_r>
 80271ec:	462a      	mov	r2, r5
 80271ee:	4601      	mov	r1, r0
 80271f0:	4620      	mov	r0, r4
 80271f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80271f6:	f000 b817 	b.w	8027228 <_kill_r>
 80271fa:	2b01      	cmp	r3, #1
 80271fc:	d00a      	beq.n	8027214 <_raise_r+0x4c>
 80271fe:	1c59      	adds	r1, r3, #1
 8027200:	d103      	bne.n	802720a <_raise_r+0x42>
 8027202:	2316      	movs	r3, #22
 8027204:	6003      	str	r3, [r0, #0]
 8027206:	2001      	movs	r0, #1
 8027208:	e7e7      	b.n	80271da <_raise_r+0x12>
 802720a:	2400      	movs	r4, #0
 802720c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027210:	4628      	mov	r0, r5
 8027212:	4798      	blx	r3
 8027214:	2000      	movs	r0, #0
 8027216:	e7e0      	b.n	80271da <_raise_r+0x12>

08027218 <raise>:
 8027218:	4b02      	ldr	r3, [pc, #8]	; (8027224 <raise+0xc>)
 802721a:	4601      	mov	r1, r0
 802721c:	6818      	ldr	r0, [r3, #0]
 802721e:	f7ff bfd3 	b.w	80271c8 <_raise_r>
 8027222:	bf00      	nop
 8027224:	2000007c 	.word	0x2000007c

08027228 <_kill_r>:
 8027228:	b538      	push	{r3, r4, r5, lr}
 802722a:	4d07      	ldr	r5, [pc, #28]	; (8027248 <_kill_r+0x20>)
 802722c:	2300      	movs	r3, #0
 802722e:	4604      	mov	r4, r0
 8027230:	4608      	mov	r0, r1
 8027232:	4611      	mov	r1, r2
 8027234:	602b      	str	r3, [r5, #0]
 8027236:	f7db fce3 	bl	8002c00 <_kill>
 802723a:	1c43      	adds	r3, r0, #1
 802723c:	d102      	bne.n	8027244 <_kill_r+0x1c>
 802723e:	682b      	ldr	r3, [r5, #0]
 8027240:	b103      	cbz	r3, 8027244 <_kill_r+0x1c>
 8027242:	6023      	str	r3, [r4, #0]
 8027244:	bd38      	pop	{r3, r4, r5, pc}
 8027246:	bf00      	nop
 8027248:	20057100 	.word	0x20057100

0802724c <_getpid_r>:
 802724c:	f7db bcd0 	b.w	8002bf0 <_getpid>

08027250 <siprintf>:
 8027250:	b40e      	push	{r1, r2, r3}
 8027252:	b500      	push	{lr}
 8027254:	b09c      	sub	sp, #112	; 0x70
 8027256:	ab1d      	add	r3, sp, #116	; 0x74
 8027258:	9002      	str	r0, [sp, #8]
 802725a:	9006      	str	r0, [sp, #24]
 802725c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8027260:	4809      	ldr	r0, [pc, #36]	; (8027288 <siprintf+0x38>)
 8027262:	9107      	str	r1, [sp, #28]
 8027264:	9104      	str	r1, [sp, #16]
 8027266:	4909      	ldr	r1, [pc, #36]	; (802728c <siprintf+0x3c>)
 8027268:	f853 2b04 	ldr.w	r2, [r3], #4
 802726c:	9105      	str	r1, [sp, #20]
 802726e:	6800      	ldr	r0, [r0, #0]
 8027270:	9301      	str	r3, [sp, #4]
 8027272:	a902      	add	r1, sp, #8
 8027274:	f003 f8d0 	bl	802a418 <_svfiprintf_r>
 8027278:	9b02      	ldr	r3, [sp, #8]
 802727a:	2200      	movs	r2, #0
 802727c:	701a      	strb	r2, [r3, #0]
 802727e:	b01c      	add	sp, #112	; 0x70
 8027280:	f85d eb04 	ldr.w	lr, [sp], #4
 8027284:	b003      	add	sp, #12
 8027286:	4770      	bx	lr
 8027288:	2000007c 	.word	0x2000007c
 802728c:	ffff0208 	.word	0xffff0208

08027290 <sulp>:
 8027290:	b570      	push	{r4, r5, r6, lr}
 8027292:	4604      	mov	r4, r0
 8027294:	460d      	mov	r5, r1
 8027296:	4616      	mov	r6, r2
 8027298:	ec45 4b10 	vmov	d0, r4, r5
 802729c:	f002 fedc 	bl	802a058 <__ulp>
 80272a0:	b17e      	cbz	r6, 80272c2 <sulp+0x32>
 80272a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80272a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80272aa:	2b00      	cmp	r3, #0
 80272ac:	dd09      	ble.n	80272c2 <sulp+0x32>
 80272ae:	051b      	lsls	r3, r3, #20
 80272b0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80272b4:	2000      	movs	r0, #0
 80272b6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80272ba:	ec41 0b17 	vmov	d7, r0, r1
 80272be:	ee20 0b07 	vmul.f64	d0, d0, d7
 80272c2:	bd70      	pop	{r4, r5, r6, pc}
 80272c4:	0000      	movs	r0, r0
	...

080272c8 <_strtod_l>:
 80272c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272cc:	ed2d 8b0c 	vpush	{d8-d13}
 80272d0:	b09d      	sub	sp, #116	; 0x74
 80272d2:	461f      	mov	r7, r3
 80272d4:	2300      	movs	r3, #0
 80272d6:	9318      	str	r3, [sp, #96]	; 0x60
 80272d8:	4ba6      	ldr	r3, [pc, #664]	; (8027574 <_strtod_l+0x2ac>)
 80272da:	9213      	str	r2, [sp, #76]	; 0x4c
 80272dc:	681b      	ldr	r3, [r3, #0]
 80272de:	9308      	str	r3, [sp, #32]
 80272e0:	4604      	mov	r4, r0
 80272e2:	4618      	mov	r0, r3
 80272e4:	468a      	mov	sl, r1
 80272e6:	f7d8 ffab 	bl	8000240 <strlen>
 80272ea:	f04f 0800 	mov.w	r8, #0
 80272ee:	4605      	mov	r5, r0
 80272f0:	f04f 0900 	mov.w	r9, #0
 80272f4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80272f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80272fa:	781a      	ldrb	r2, [r3, #0]
 80272fc:	2a2b      	cmp	r2, #43	; 0x2b
 80272fe:	d04d      	beq.n	802739c <_strtod_l+0xd4>
 8027300:	d83a      	bhi.n	8027378 <_strtod_l+0xb0>
 8027302:	2a0d      	cmp	r2, #13
 8027304:	d833      	bhi.n	802736e <_strtod_l+0xa6>
 8027306:	2a08      	cmp	r2, #8
 8027308:	d833      	bhi.n	8027372 <_strtod_l+0xaa>
 802730a:	2a00      	cmp	r2, #0
 802730c:	d03d      	beq.n	802738a <_strtod_l+0xc2>
 802730e:	2300      	movs	r3, #0
 8027310:	930b      	str	r3, [sp, #44]	; 0x2c
 8027312:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8027314:	7833      	ldrb	r3, [r6, #0]
 8027316:	2b30      	cmp	r3, #48	; 0x30
 8027318:	f040 80b6 	bne.w	8027488 <_strtod_l+0x1c0>
 802731c:	7873      	ldrb	r3, [r6, #1]
 802731e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8027322:	2b58      	cmp	r3, #88	; 0x58
 8027324:	d16d      	bne.n	8027402 <_strtod_l+0x13a>
 8027326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027328:	9301      	str	r3, [sp, #4]
 802732a:	ab18      	add	r3, sp, #96	; 0x60
 802732c:	9702      	str	r7, [sp, #8]
 802732e:	9300      	str	r3, [sp, #0]
 8027330:	4a91      	ldr	r2, [pc, #580]	; (8027578 <_strtod_l+0x2b0>)
 8027332:	ab19      	add	r3, sp, #100	; 0x64
 8027334:	a917      	add	r1, sp, #92	; 0x5c
 8027336:	4620      	mov	r0, r4
 8027338:	f001 ff76 	bl	8029228 <__gethex>
 802733c:	f010 0507 	ands.w	r5, r0, #7
 8027340:	4607      	mov	r7, r0
 8027342:	d005      	beq.n	8027350 <_strtod_l+0x88>
 8027344:	2d06      	cmp	r5, #6
 8027346:	d12b      	bne.n	80273a0 <_strtod_l+0xd8>
 8027348:	3601      	adds	r6, #1
 802734a:	2300      	movs	r3, #0
 802734c:	9617      	str	r6, [sp, #92]	; 0x5c
 802734e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027352:	2b00      	cmp	r3, #0
 8027354:	f040 856e 	bne.w	8027e34 <_strtod_l+0xb6c>
 8027358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802735a:	b1e3      	cbz	r3, 8027396 <_strtod_l+0xce>
 802735c:	ec49 8b17 	vmov	d7, r8, r9
 8027360:	eeb1 0b47 	vneg.f64	d0, d7
 8027364:	b01d      	add	sp, #116	; 0x74
 8027366:	ecbd 8b0c 	vpop	{d8-d13}
 802736a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802736e:	2a20      	cmp	r2, #32
 8027370:	d1cd      	bne.n	802730e <_strtod_l+0x46>
 8027372:	3301      	adds	r3, #1
 8027374:	9317      	str	r3, [sp, #92]	; 0x5c
 8027376:	e7bf      	b.n	80272f8 <_strtod_l+0x30>
 8027378:	2a2d      	cmp	r2, #45	; 0x2d
 802737a:	d1c8      	bne.n	802730e <_strtod_l+0x46>
 802737c:	2201      	movs	r2, #1
 802737e:	920b      	str	r2, [sp, #44]	; 0x2c
 8027380:	1c5a      	adds	r2, r3, #1
 8027382:	9217      	str	r2, [sp, #92]	; 0x5c
 8027384:	785b      	ldrb	r3, [r3, #1]
 8027386:	2b00      	cmp	r3, #0
 8027388:	d1c3      	bne.n	8027312 <_strtod_l+0x4a>
 802738a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802738c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027390:	2b00      	cmp	r3, #0
 8027392:	f040 854d 	bne.w	8027e30 <_strtod_l+0xb68>
 8027396:	ec49 8b10 	vmov	d0, r8, r9
 802739a:	e7e3      	b.n	8027364 <_strtod_l+0x9c>
 802739c:	2200      	movs	r2, #0
 802739e:	e7ee      	b.n	802737e <_strtod_l+0xb6>
 80273a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80273a2:	b13a      	cbz	r2, 80273b4 <_strtod_l+0xec>
 80273a4:	2135      	movs	r1, #53	; 0x35
 80273a6:	a81a      	add	r0, sp, #104	; 0x68
 80273a8:	f002 ff62 	bl	802a270 <__copybits>
 80273ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80273ae:	4620      	mov	r0, r4
 80273b0:	f002 fb26 	bl	8029a00 <_Bfree>
 80273b4:	3d01      	subs	r5, #1
 80273b6:	2d05      	cmp	r5, #5
 80273b8:	d807      	bhi.n	80273ca <_strtod_l+0x102>
 80273ba:	e8df f005 	tbb	[pc, r5]
 80273be:	0b0e      	.short	0x0b0e
 80273c0:	030e1d18 	.word	0x030e1d18
 80273c4:	f04f 0900 	mov.w	r9, #0
 80273c8:	46c8      	mov	r8, r9
 80273ca:	073b      	lsls	r3, r7, #28
 80273cc:	d5c0      	bpl.n	8027350 <_strtod_l+0x88>
 80273ce:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80273d2:	e7bd      	b.n	8027350 <_strtod_l+0x88>
 80273d4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80273d8:	e7f7      	b.n	80273ca <_strtod_l+0x102>
 80273da:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80273de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80273e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80273e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80273e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80273ec:	e7ed      	b.n	80273ca <_strtod_l+0x102>
 80273ee:	f8df 918c 	ldr.w	r9, [pc, #396]	; 802757c <_strtod_l+0x2b4>
 80273f2:	f04f 0800 	mov.w	r8, #0
 80273f6:	e7e8      	b.n	80273ca <_strtod_l+0x102>
 80273f8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80273fc:	f04f 38ff 	mov.w	r8, #4294967295
 8027400:	e7e3      	b.n	80273ca <_strtod_l+0x102>
 8027402:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027404:	1c5a      	adds	r2, r3, #1
 8027406:	9217      	str	r2, [sp, #92]	; 0x5c
 8027408:	785b      	ldrb	r3, [r3, #1]
 802740a:	2b30      	cmp	r3, #48	; 0x30
 802740c:	d0f9      	beq.n	8027402 <_strtod_l+0x13a>
 802740e:	2b00      	cmp	r3, #0
 8027410:	d09e      	beq.n	8027350 <_strtod_l+0x88>
 8027412:	2301      	movs	r3, #1
 8027414:	9306      	str	r3, [sp, #24]
 8027416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027418:	930c      	str	r3, [sp, #48]	; 0x30
 802741a:	2300      	movs	r3, #0
 802741c:	9304      	str	r3, [sp, #16]
 802741e:	930a      	str	r3, [sp, #40]	; 0x28
 8027420:	461e      	mov	r6, r3
 8027422:	220a      	movs	r2, #10
 8027424:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027426:	f890 b000 	ldrb.w	fp, [r0]
 802742a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 802742e:	b2d9      	uxtb	r1, r3
 8027430:	2909      	cmp	r1, #9
 8027432:	d92b      	bls.n	802748c <_strtod_l+0x1c4>
 8027434:	9908      	ldr	r1, [sp, #32]
 8027436:	462a      	mov	r2, r5
 8027438:	f003 f939 	bl	802a6ae <strncmp>
 802743c:	2800      	cmp	r0, #0
 802743e:	d035      	beq.n	80274ac <_strtod_l+0x1e4>
 8027440:	2000      	movs	r0, #0
 8027442:	465a      	mov	r2, fp
 8027444:	4633      	mov	r3, r6
 8027446:	4683      	mov	fp, r0
 8027448:	4601      	mov	r1, r0
 802744a:	2a65      	cmp	r2, #101	; 0x65
 802744c:	d001      	beq.n	8027452 <_strtod_l+0x18a>
 802744e:	2a45      	cmp	r2, #69	; 0x45
 8027450:	d118      	bne.n	8027484 <_strtod_l+0x1bc>
 8027452:	b91b      	cbnz	r3, 802745c <_strtod_l+0x194>
 8027454:	9b06      	ldr	r3, [sp, #24]
 8027456:	4303      	orrs	r3, r0
 8027458:	d097      	beq.n	802738a <_strtod_l+0xc2>
 802745a:	2300      	movs	r3, #0
 802745c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8027460:	f10a 0201 	add.w	r2, sl, #1
 8027464:	9217      	str	r2, [sp, #92]	; 0x5c
 8027466:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802746a:	2a2b      	cmp	r2, #43	; 0x2b
 802746c:	d077      	beq.n	802755e <_strtod_l+0x296>
 802746e:	2a2d      	cmp	r2, #45	; 0x2d
 8027470:	d07d      	beq.n	802756e <_strtod_l+0x2a6>
 8027472:	f04f 0e00 	mov.w	lr, #0
 8027476:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 802747a:	2d09      	cmp	r5, #9
 802747c:	f240 8084 	bls.w	8027588 <_strtod_l+0x2c0>
 8027480:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027484:	2500      	movs	r5, #0
 8027486:	e09f      	b.n	80275c8 <_strtod_l+0x300>
 8027488:	2300      	movs	r3, #0
 802748a:	e7c3      	b.n	8027414 <_strtod_l+0x14c>
 802748c:	2e08      	cmp	r6, #8
 802748e:	bfd5      	itete	le
 8027490:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8027492:	9904      	ldrgt	r1, [sp, #16]
 8027494:	fb02 3301 	mlale	r3, r2, r1, r3
 8027498:	fb02 3301 	mlagt	r3, r2, r1, r3
 802749c:	f100 0001 	add.w	r0, r0, #1
 80274a0:	bfd4      	ite	le
 80274a2:	930a      	strle	r3, [sp, #40]	; 0x28
 80274a4:	9304      	strgt	r3, [sp, #16]
 80274a6:	3601      	adds	r6, #1
 80274a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80274aa:	e7bb      	b.n	8027424 <_strtod_l+0x15c>
 80274ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80274ae:	195a      	adds	r2, r3, r5
 80274b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80274b2:	5d5a      	ldrb	r2, [r3, r5]
 80274b4:	b3ae      	cbz	r6, 8027522 <_strtod_l+0x25a>
 80274b6:	4683      	mov	fp, r0
 80274b8:	4633      	mov	r3, r6
 80274ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80274be:	2909      	cmp	r1, #9
 80274c0:	d912      	bls.n	80274e8 <_strtod_l+0x220>
 80274c2:	2101      	movs	r1, #1
 80274c4:	e7c1      	b.n	802744a <_strtod_l+0x182>
 80274c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80274c8:	1c5a      	adds	r2, r3, #1
 80274ca:	9217      	str	r2, [sp, #92]	; 0x5c
 80274cc:	785a      	ldrb	r2, [r3, #1]
 80274ce:	3001      	adds	r0, #1
 80274d0:	2a30      	cmp	r2, #48	; 0x30
 80274d2:	d0f8      	beq.n	80274c6 <_strtod_l+0x1fe>
 80274d4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80274d8:	2b08      	cmp	r3, #8
 80274da:	f200 84b0 	bhi.w	8027e3e <_strtod_l+0xb76>
 80274de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80274e0:	930c      	str	r3, [sp, #48]	; 0x30
 80274e2:	4683      	mov	fp, r0
 80274e4:	2000      	movs	r0, #0
 80274e6:	4603      	mov	r3, r0
 80274e8:	3a30      	subs	r2, #48	; 0x30
 80274ea:	f100 0101 	add.w	r1, r0, #1
 80274ee:	d012      	beq.n	8027516 <_strtod_l+0x24e>
 80274f0:	448b      	add	fp, r1
 80274f2:	eb00 0c03 	add.w	ip, r0, r3
 80274f6:	4619      	mov	r1, r3
 80274f8:	250a      	movs	r5, #10
 80274fa:	4561      	cmp	r1, ip
 80274fc:	d113      	bne.n	8027526 <_strtod_l+0x25e>
 80274fe:	1819      	adds	r1, r3, r0
 8027500:	2908      	cmp	r1, #8
 8027502:	f103 0301 	add.w	r3, r3, #1
 8027506:	4403      	add	r3, r0
 8027508:	dc1d      	bgt.n	8027546 <_strtod_l+0x27e>
 802750a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802750c:	210a      	movs	r1, #10
 802750e:	fb01 2200 	mla	r2, r1, r0, r2
 8027512:	920a      	str	r2, [sp, #40]	; 0x28
 8027514:	2100      	movs	r1, #0
 8027516:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027518:	1c50      	adds	r0, r2, #1
 802751a:	9017      	str	r0, [sp, #92]	; 0x5c
 802751c:	7852      	ldrb	r2, [r2, #1]
 802751e:	4608      	mov	r0, r1
 8027520:	e7cb      	b.n	80274ba <_strtod_l+0x1f2>
 8027522:	4630      	mov	r0, r6
 8027524:	e7d4      	b.n	80274d0 <_strtod_l+0x208>
 8027526:	2908      	cmp	r1, #8
 8027528:	dc04      	bgt.n	8027534 <_strtod_l+0x26c>
 802752a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802752c:	436f      	muls	r7, r5
 802752e:	970a      	str	r7, [sp, #40]	; 0x28
 8027530:	3101      	adds	r1, #1
 8027532:	e7e2      	b.n	80274fa <_strtod_l+0x232>
 8027534:	f101 0e01 	add.w	lr, r1, #1
 8027538:	f1be 0f10 	cmp.w	lr, #16
 802753c:	bfde      	ittt	le
 802753e:	9f04      	ldrle	r7, [sp, #16]
 8027540:	436f      	mulle	r7, r5
 8027542:	9704      	strle	r7, [sp, #16]
 8027544:	e7f4      	b.n	8027530 <_strtod_l+0x268>
 8027546:	2b10      	cmp	r3, #16
 8027548:	bfdf      	itttt	le
 802754a:	9804      	ldrle	r0, [sp, #16]
 802754c:	210a      	movle	r1, #10
 802754e:	fb01 2200 	mlale	r2, r1, r0, r2
 8027552:	9204      	strle	r2, [sp, #16]
 8027554:	e7de      	b.n	8027514 <_strtod_l+0x24c>
 8027556:	f04f 0b00 	mov.w	fp, #0
 802755a:	2101      	movs	r1, #1
 802755c:	e77a      	b.n	8027454 <_strtod_l+0x18c>
 802755e:	f04f 0e00 	mov.w	lr, #0
 8027562:	f10a 0202 	add.w	r2, sl, #2
 8027566:	9217      	str	r2, [sp, #92]	; 0x5c
 8027568:	f89a 2002 	ldrb.w	r2, [sl, #2]
 802756c:	e783      	b.n	8027476 <_strtod_l+0x1ae>
 802756e:	f04f 0e01 	mov.w	lr, #1
 8027572:	e7f6      	b.n	8027562 <_strtod_l+0x29a>
 8027574:	0802ed54 	.word	0x0802ed54
 8027578:	0802eaa0 	.word	0x0802eaa0
 802757c:	7ff00000 	.word	0x7ff00000
 8027580:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027582:	1c55      	adds	r5, r2, #1
 8027584:	9517      	str	r5, [sp, #92]	; 0x5c
 8027586:	7852      	ldrb	r2, [r2, #1]
 8027588:	2a30      	cmp	r2, #48	; 0x30
 802758a:	d0f9      	beq.n	8027580 <_strtod_l+0x2b8>
 802758c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8027590:	2d08      	cmp	r5, #8
 8027592:	f63f af77 	bhi.w	8027484 <_strtod_l+0x1bc>
 8027596:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 802759a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802759c:	9208      	str	r2, [sp, #32]
 802759e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80275a0:	1c55      	adds	r5, r2, #1
 80275a2:	9517      	str	r5, [sp, #92]	; 0x5c
 80275a4:	7852      	ldrb	r2, [r2, #1]
 80275a6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80275aa:	2f09      	cmp	r7, #9
 80275ac:	d937      	bls.n	802761e <_strtod_l+0x356>
 80275ae:	9f08      	ldr	r7, [sp, #32]
 80275b0:	1bed      	subs	r5, r5, r7
 80275b2:	2d08      	cmp	r5, #8
 80275b4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80275b8:	dc02      	bgt.n	80275c0 <_strtod_l+0x2f8>
 80275ba:	4565      	cmp	r5, ip
 80275bc:	bfa8      	it	ge
 80275be:	4665      	movge	r5, ip
 80275c0:	f1be 0f00 	cmp.w	lr, #0
 80275c4:	d000      	beq.n	80275c8 <_strtod_l+0x300>
 80275c6:	426d      	negs	r5, r5
 80275c8:	2b00      	cmp	r3, #0
 80275ca:	d14f      	bne.n	802766c <_strtod_l+0x3a4>
 80275cc:	9b06      	ldr	r3, [sp, #24]
 80275ce:	4303      	orrs	r3, r0
 80275d0:	f47f aebe 	bne.w	8027350 <_strtod_l+0x88>
 80275d4:	2900      	cmp	r1, #0
 80275d6:	f47f aed8 	bne.w	802738a <_strtod_l+0xc2>
 80275da:	2a69      	cmp	r2, #105	; 0x69
 80275dc:	d027      	beq.n	802762e <_strtod_l+0x366>
 80275de:	dc24      	bgt.n	802762a <_strtod_l+0x362>
 80275e0:	2a49      	cmp	r2, #73	; 0x49
 80275e2:	d024      	beq.n	802762e <_strtod_l+0x366>
 80275e4:	2a4e      	cmp	r2, #78	; 0x4e
 80275e6:	f47f aed0 	bne.w	802738a <_strtod_l+0xc2>
 80275ea:	499b      	ldr	r1, [pc, #620]	; (8027858 <_strtod_l+0x590>)
 80275ec:	a817      	add	r0, sp, #92	; 0x5c
 80275ee:	f002 f873 	bl	80296d8 <__match>
 80275f2:	2800      	cmp	r0, #0
 80275f4:	f43f aec9 	beq.w	802738a <_strtod_l+0xc2>
 80275f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80275fa:	781b      	ldrb	r3, [r3, #0]
 80275fc:	2b28      	cmp	r3, #40	; 0x28
 80275fe:	d12d      	bne.n	802765c <_strtod_l+0x394>
 8027600:	4996      	ldr	r1, [pc, #600]	; (802785c <_strtod_l+0x594>)
 8027602:	aa1a      	add	r2, sp, #104	; 0x68
 8027604:	a817      	add	r0, sp, #92	; 0x5c
 8027606:	f002 f87b 	bl	8029700 <__hexnan>
 802760a:	2805      	cmp	r0, #5
 802760c:	d126      	bne.n	802765c <_strtod_l+0x394>
 802760e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027610:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8027614:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8027618:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802761c:	e698      	b.n	8027350 <_strtod_l+0x88>
 802761e:	250a      	movs	r5, #10
 8027620:	fb05 250c 	mla	r5, r5, ip, r2
 8027624:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8027628:	e7b9      	b.n	802759e <_strtod_l+0x2d6>
 802762a:	2a6e      	cmp	r2, #110	; 0x6e
 802762c:	e7db      	b.n	80275e6 <_strtod_l+0x31e>
 802762e:	498c      	ldr	r1, [pc, #560]	; (8027860 <_strtod_l+0x598>)
 8027630:	a817      	add	r0, sp, #92	; 0x5c
 8027632:	f002 f851 	bl	80296d8 <__match>
 8027636:	2800      	cmp	r0, #0
 8027638:	f43f aea7 	beq.w	802738a <_strtod_l+0xc2>
 802763c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802763e:	4989      	ldr	r1, [pc, #548]	; (8027864 <_strtod_l+0x59c>)
 8027640:	3b01      	subs	r3, #1
 8027642:	a817      	add	r0, sp, #92	; 0x5c
 8027644:	9317      	str	r3, [sp, #92]	; 0x5c
 8027646:	f002 f847 	bl	80296d8 <__match>
 802764a:	b910      	cbnz	r0, 8027652 <_strtod_l+0x38a>
 802764c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802764e:	3301      	adds	r3, #1
 8027650:	9317      	str	r3, [sp, #92]	; 0x5c
 8027652:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8027878 <_strtod_l+0x5b0>
 8027656:	f04f 0800 	mov.w	r8, #0
 802765a:	e679      	b.n	8027350 <_strtod_l+0x88>
 802765c:	4882      	ldr	r0, [pc, #520]	; (8027868 <_strtod_l+0x5a0>)
 802765e:	f002 ffdb 	bl	802a618 <nan>
 8027662:	ed8d 0b04 	vstr	d0, [sp, #16]
 8027666:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802766a:	e671      	b.n	8027350 <_strtod_l+0x88>
 802766c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8027670:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027674:	eba5 020b 	sub.w	r2, r5, fp
 8027678:	2e00      	cmp	r6, #0
 802767a:	bf08      	it	eq
 802767c:	461e      	moveq	r6, r3
 802767e:	2b10      	cmp	r3, #16
 8027680:	ed8d 7b08 	vstr	d7, [sp, #32]
 8027684:	9206      	str	r2, [sp, #24]
 8027686:	461a      	mov	r2, r3
 8027688:	bfa8      	it	ge
 802768a:	2210      	movge	r2, #16
 802768c:	2b09      	cmp	r3, #9
 802768e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8027692:	dd0e      	ble.n	80276b2 <_strtod_l+0x3ea>
 8027694:	4975      	ldr	r1, [pc, #468]	; (802786c <_strtod_l+0x5a4>)
 8027696:	eddd 7a04 	vldr	s15, [sp, #16]
 802769a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802769e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80276a2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80276a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80276aa:	eea5 7b06 	vfma.f64	d7, d5, d6
 80276ae:	ec59 8b17 	vmov	r8, r9, d7
 80276b2:	2b0f      	cmp	r3, #15
 80276b4:	dc37      	bgt.n	8027726 <_strtod_l+0x45e>
 80276b6:	9906      	ldr	r1, [sp, #24]
 80276b8:	2900      	cmp	r1, #0
 80276ba:	f43f ae49 	beq.w	8027350 <_strtod_l+0x88>
 80276be:	dd23      	ble.n	8027708 <_strtod_l+0x440>
 80276c0:	2916      	cmp	r1, #22
 80276c2:	dc0b      	bgt.n	80276dc <_strtod_l+0x414>
 80276c4:	4b69      	ldr	r3, [pc, #420]	; (802786c <_strtod_l+0x5a4>)
 80276c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80276ca:	ed93 7b00 	vldr	d7, [r3]
 80276ce:	ec49 8b16 	vmov	d6, r8, r9
 80276d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80276d6:	ec59 8b17 	vmov	r8, r9, d7
 80276da:	e639      	b.n	8027350 <_strtod_l+0x88>
 80276dc:	9806      	ldr	r0, [sp, #24]
 80276de:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80276e2:	4281      	cmp	r1, r0
 80276e4:	db1f      	blt.n	8027726 <_strtod_l+0x45e>
 80276e6:	4a61      	ldr	r2, [pc, #388]	; (802786c <_strtod_l+0x5a4>)
 80276e8:	f1c3 030f 	rsb	r3, r3, #15
 80276ec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80276f0:	ed91 7b00 	vldr	d7, [r1]
 80276f4:	ec49 8b16 	vmov	d6, r8, r9
 80276f8:	1ac3      	subs	r3, r0, r3
 80276fa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80276fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027702:	ed92 6b00 	vldr	d6, [r2]
 8027706:	e7e4      	b.n	80276d2 <_strtod_l+0x40a>
 8027708:	9906      	ldr	r1, [sp, #24]
 802770a:	3116      	adds	r1, #22
 802770c:	db0b      	blt.n	8027726 <_strtod_l+0x45e>
 802770e:	4b57      	ldr	r3, [pc, #348]	; (802786c <_strtod_l+0x5a4>)
 8027710:	ebab 0505 	sub.w	r5, fp, r5
 8027714:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8027718:	ed95 7b00 	vldr	d7, [r5]
 802771c:	ec49 8b16 	vmov	d6, r8, r9
 8027720:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027724:	e7d7      	b.n	80276d6 <_strtod_l+0x40e>
 8027726:	9906      	ldr	r1, [sp, #24]
 8027728:	1a9a      	subs	r2, r3, r2
 802772a:	440a      	add	r2, r1
 802772c:	2a00      	cmp	r2, #0
 802772e:	dd74      	ble.n	802781a <_strtod_l+0x552>
 8027730:	f012 000f 	ands.w	r0, r2, #15
 8027734:	d00a      	beq.n	802774c <_strtod_l+0x484>
 8027736:	494d      	ldr	r1, [pc, #308]	; (802786c <_strtod_l+0x5a4>)
 8027738:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802773c:	ed91 7b00 	vldr	d7, [r1]
 8027740:	ec49 8b16 	vmov	d6, r8, r9
 8027744:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027748:	ec59 8b17 	vmov	r8, r9, d7
 802774c:	f032 020f 	bics.w	r2, r2, #15
 8027750:	d04f      	beq.n	80277f2 <_strtod_l+0x52a>
 8027752:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8027756:	dd22      	ble.n	802779e <_strtod_l+0x4d6>
 8027758:	2500      	movs	r5, #0
 802775a:	462e      	mov	r6, r5
 802775c:	950a      	str	r5, [sp, #40]	; 0x28
 802775e:	462f      	mov	r7, r5
 8027760:	2322      	movs	r3, #34	; 0x22
 8027762:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8027878 <_strtod_l+0x5b0>
 8027766:	6023      	str	r3, [r4, #0]
 8027768:	f04f 0800 	mov.w	r8, #0
 802776c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802776e:	2b00      	cmp	r3, #0
 8027770:	f43f adee 	beq.w	8027350 <_strtod_l+0x88>
 8027774:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027776:	4620      	mov	r0, r4
 8027778:	f002 f942 	bl	8029a00 <_Bfree>
 802777c:	4639      	mov	r1, r7
 802777e:	4620      	mov	r0, r4
 8027780:	f002 f93e 	bl	8029a00 <_Bfree>
 8027784:	4631      	mov	r1, r6
 8027786:	4620      	mov	r0, r4
 8027788:	f002 f93a 	bl	8029a00 <_Bfree>
 802778c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802778e:	4620      	mov	r0, r4
 8027790:	f002 f936 	bl	8029a00 <_Bfree>
 8027794:	4629      	mov	r1, r5
 8027796:	4620      	mov	r0, r4
 8027798:	f002 f932 	bl	8029a00 <_Bfree>
 802779c:	e5d8      	b.n	8027350 <_strtod_l+0x88>
 802779e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80277a2:	2000      	movs	r0, #0
 80277a4:	4f32      	ldr	r7, [pc, #200]	; (8027870 <_strtod_l+0x5a8>)
 80277a6:	1112      	asrs	r2, r2, #4
 80277a8:	4601      	mov	r1, r0
 80277aa:	2a01      	cmp	r2, #1
 80277ac:	dc24      	bgt.n	80277f8 <_strtod_l+0x530>
 80277ae:	b108      	cbz	r0, 80277b4 <_strtod_l+0x4ec>
 80277b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80277b4:	4a2e      	ldr	r2, [pc, #184]	; (8027870 <_strtod_l+0x5a8>)
 80277b6:	482f      	ldr	r0, [pc, #188]	; (8027874 <_strtod_l+0x5ac>)
 80277b8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80277bc:	ed91 7b00 	vldr	d7, [r1]
 80277c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80277c4:	ec49 8b16 	vmov	d6, r8, r9
 80277c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80277cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80277d0:	9905      	ldr	r1, [sp, #20]
 80277d2:	4a29      	ldr	r2, [pc, #164]	; (8027878 <_strtod_l+0x5b0>)
 80277d4:	400a      	ands	r2, r1
 80277d6:	4282      	cmp	r2, r0
 80277d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80277dc:	d8bc      	bhi.n	8027758 <_strtod_l+0x490>
 80277de:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80277e2:	4282      	cmp	r2, r0
 80277e4:	bf86      	itte	hi
 80277e6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 802787c <_strtod_l+0x5b4>
 80277ea:	f04f 38ff 	movhi.w	r8, #4294967295
 80277ee:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80277f2:	2200      	movs	r2, #0
 80277f4:	9204      	str	r2, [sp, #16]
 80277f6:	e07f      	b.n	80278f8 <_strtod_l+0x630>
 80277f8:	f012 0f01 	tst.w	r2, #1
 80277fc:	d00a      	beq.n	8027814 <_strtod_l+0x54c>
 80277fe:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8027802:	ed90 7b00 	vldr	d7, [r0]
 8027806:	ed9d 6b04 	vldr	d6, [sp, #16]
 802780a:	ee26 7b07 	vmul.f64	d7, d6, d7
 802780e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027812:	2001      	movs	r0, #1
 8027814:	3101      	adds	r1, #1
 8027816:	1052      	asrs	r2, r2, #1
 8027818:	e7c7      	b.n	80277aa <_strtod_l+0x4e2>
 802781a:	d0ea      	beq.n	80277f2 <_strtod_l+0x52a>
 802781c:	4252      	negs	r2, r2
 802781e:	f012 000f 	ands.w	r0, r2, #15
 8027822:	d00a      	beq.n	802783a <_strtod_l+0x572>
 8027824:	4911      	ldr	r1, [pc, #68]	; (802786c <_strtod_l+0x5a4>)
 8027826:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802782a:	ed91 7b00 	vldr	d7, [r1]
 802782e:	ec49 8b16 	vmov	d6, r8, r9
 8027832:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027836:	ec59 8b17 	vmov	r8, r9, d7
 802783a:	1112      	asrs	r2, r2, #4
 802783c:	d0d9      	beq.n	80277f2 <_strtod_l+0x52a>
 802783e:	2a1f      	cmp	r2, #31
 8027840:	dd1e      	ble.n	8027880 <_strtod_l+0x5b8>
 8027842:	2500      	movs	r5, #0
 8027844:	462e      	mov	r6, r5
 8027846:	950a      	str	r5, [sp, #40]	; 0x28
 8027848:	462f      	mov	r7, r5
 802784a:	2322      	movs	r3, #34	; 0x22
 802784c:	f04f 0800 	mov.w	r8, #0
 8027850:	f04f 0900 	mov.w	r9, #0
 8027854:	6023      	str	r3, [r4, #0]
 8027856:	e789      	b.n	802776c <_strtod_l+0x4a4>
 8027858:	0802ea72 	.word	0x0802ea72
 802785c:	0802eab4 	.word	0x0802eab4
 8027860:	0802ea6a 	.word	0x0802ea6a
 8027864:	0802ebf4 	.word	0x0802ebf4
 8027868:	0802ea4f 	.word	0x0802ea4f
 802786c:	0802edf0 	.word	0x0802edf0
 8027870:	0802edc8 	.word	0x0802edc8
 8027874:	7ca00000 	.word	0x7ca00000
 8027878:	7ff00000 	.word	0x7ff00000
 802787c:	7fefffff 	.word	0x7fefffff
 8027880:	f012 0110 	ands.w	r1, r2, #16
 8027884:	bf18      	it	ne
 8027886:	216a      	movne	r1, #106	; 0x6a
 8027888:	e9cd 8908 	strd	r8, r9, [sp, #32]
 802788c:	9104      	str	r1, [sp, #16]
 802788e:	49c0      	ldr	r1, [pc, #768]	; (8027b90 <_strtod_l+0x8c8>)
 8027890:	2000      	movs	r0, #0
 8027892:	07d7      	lsls	r7, r2, #31
 8027894:	d508      	bpl.n	80278a8 <_strtod_l+0x5e0>
 8027896:	ed9d 6b08 	vldr	d6, [sp, #32]
 802789a:	ed91 7b00 	vldr	d7, [r1]
 802789e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80278a2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80278a6:	2001      	movs	r0, #1
 80278a8:	1052      	asrs	r2, r2, #1
 80278aa:	f101 0108 	add.w	r1, r1, #8
 80278ae:	d1f0      	bne.n	8027892 <_strtod_l+0x5ca>
 80278b0:	b108      	cbz	r0, 80278b6 <_strtod_l+0x5ee>
 80278b2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80278b6:	9a04      	ldr	r2, [sp, #16]
 80278b8:	b1ba      	cbz	r2, 80278ea <_strtod_l+0x622>
 80278ba:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80278be:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80278c2:	2a00      	cmp	r2, #0
 80278c4:	4649      	mov	r1, r9
 80278c6:	dd10      	ble.n	80278ea <_strtod_l+0x622>
 80278c8:	2a1f      	cmp	r2, #31
 80278ca:	f340 8132 	ble.w	8027b32 <_strtod_l+0x86a>
 80278ce:	2a34      	cmp	r2, #52	; 0x34
 80278d0:	bfde      	ittt	le
 80278d2:	3a20      	suble	r2, #32
 80278d4:	f04f 30ff 	movle.w	r0, #4294967295
 80278d8:	fa00 f202 	lslle.w	r2, r0, r2
 80278dc:	f04f 0800 	mov.w	r8, #0
 80278e0:	bfcc      	ite	gt
 80278e2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80278e6:	ea02 0901 	andle.w	r9, r2, r1
 80278ea:	ec49 8b17 	vmov	d7, r8, r9
 80278ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80278f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278f6:	d0a4      	beq.n	8027842 <_strtod_l+0x57a>
 80278f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80278fa:	9200      	str	r2, [sp, #0]
 80278fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80278fe:	4632      	mov	r2, r6
 8027900:	4620      	mov	r0, r4
 8027902:	f002 f8e9 	bl	8029ad8 <__s2b>
 8027906:	900a      	str	r0, [sp, #40]	; 0x28
 8027908:	2800      	cmp	r0, #0
 802790a:	f43f af25 	beq.w	8027758 <_strtod_l+0x490>
 802790e:	9b06      	ldr	r3, [sp, #24]
 8027910:	ebab 0505 	sub.w	r5, fp, r5
 8027914:	2b00      	cmp	r3, #0
 8027916:	bfb4      	ite	lt
 8027918:	462b      	movlt	r3, r5
 802791a:	2300      	movge	r3, #0
 802791c:	930c      	str	r3, [sp, #48]	; 0x30
 802791e:	9b06      	ldr	r3, [sp, #24]
 8027920:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8027b78 <_strtod_l+0x8b0>
 8027924:	ed9f ab96 	vldr	d10, [pc, #600]	; 8027b80 <_strtod_l+0x8b8>
 8027928:	ed9f bb97 	vldr	d11, [pc, #604]	; 8027b88 <_strtod_l+0x8c0>
 802792c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027930:	2500      	movs	r5, #0
 8027932:	9312      	str	r3, [sp, #72]	; 0x48
 8027934:	462e      	mov	r6, r5
 8027936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027938:	4620      	mov	r0, r4
 802793a:	6859      	ldr	r1, [r3, #4]
 802793c:	f002 f820 	bl	8029980 <_Balloc>
 8027940:	4607      	mov	r7, r0
 8027942:	2800      	cmp	r0, #0
 8027944:	f43f af0c 	beq.w	8027760 <_strtod_l+0x498>
 8027948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802794a:	691a      	ldr	r2, [r3, #16]
 802794c:	3202      	adds	r2, #2
 802794e:	f103 010c 	add.w	r1, r3, #12
 8027952:	0092      	lsls	r2, r2, #2
 8027954:	300c      	adds	r0, #12
 8027956:	f7fe fbc1 	bl	80260dc <memcpy>
 802795a:	ec49 8b10 	vmov	d0, r8, r9
 802795e:	aa1a      	add	r2, sp, #104	; 0x68
 8027960:	a919      	add	r1, sp, #100	; 0x64
 8027962:	4620      	mov	r0, r4
 8027964:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8027968:	f002 fbf2 	bl	802a150 <__d2b>
 802796c:	9018      	str	r0, [sp, #96]	; 0x60
 802796e:	2800      	cmp	r0, #0
 8027970:	f43f aef6 	beq.w	8027760 <_strtod_l+0x498>
 8027974:	2101      	movs	r1, #1
 8027976:	4620      	mov	r0, r4
 8027978:	f002 f948 	bl	8029c0c <__i2b>
 802797c:	4606      	mov	r6, r0
 802797e:	2800      	cmp	r0, #0
 8027980:	f43f aeee 	beq.w	8027760 <_strtod_l+0x498>
 8027984:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027986:	991a      	ldr	r1, [sp, #104]	; 0x68
 8027988:	2b00      	cmp	r3, #0
 802798a:	bfab      	itete	ge
 802798c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 802798e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8027990:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8027994:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8027998:	bfac      	ite	ge
 802799a:	eb03 0b02 	addge.w	fp, r3, r2
 802799e:	eba2 0a03 	sublt.w	sl, r2, r3
 80279a2:	9a04      	ldr	r2, [sp, #16]
 80279a4:	1a9b      	subs	r3, r3, r2
 80279a6:	440b      	add	r3, r1
 80279a8:	4a7a      	ldr	r2, [pc, #488]	; (8027b94 <_strtod_l+0x8cc>)
 80279aa:	3b01      	subs	r3, #1
 80279ac:	4293      	cmp	r3, r2
 80279ae:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80279b2:	f280 80d1 	bge.w	8027b58 <_strtod_l+0x890>
 80279b6:	1ad2      	subs	r2, r2, r3
 80279b8:	2a1f      	cmp	r2, #31
 80279ba:	eba1 0102 	sub.w	r1, r1, r2
 80279be:	f04f 0001 	mov.w	r0, #1
 80279c2:	f300 80bd 	bgt.w	8027b40 <_strtod_l+0x878>
 80279c6:	fa00 f302 	lsl.w	r3, r0, r2
 80279ca:	930e      	str	r3, [sp, #56]	; 0x38
 80279cc:	2300      	movs	r3, #0
 80279ce:	930d      	str	r3, [sp, #52]	; 0x34
 80279d0:	eb0b 0301 	add.w	r3, fp, r1
 80279d4:	9a04      	ldr	r2, [sp, #16]
 80279d6:	459b      	cmp	fp, r3
 80279d8:	448a      	add	sl, r1
 80279da:	4492      	add	sl, r2
 80279dc:	465a      	mov	r2, fp
 80279de:	bfa8      	it	ge
 80279e0:	461a      	movge	r2, r3
 80279e2:	4552      	cmp	r2, sl
 80279e4:	bfa8      	it	ge
 80279e6:	4652      	movge	r2, sl
 80279e8:	2a00      	cmp	r2, #0
 80279ea:	bfc2      	ittt	gt
 80279ec:	1a9b      	subgt	r3, r3, r2
 80279ee:	ebaa 0a02 	subgt.w	sl, sl, r2
 80279f2:	ebab 0b02 	subgt.w	fp, fp, r2
 80279f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80279f8:	2a00      	cmp	r2, #0
 80279fa:	dd18      	ble.n	8027a2e <_strtod_l+0x766>
 80279fc:	4631      	mov	r1, r6
 80279fe:	4620      	mov	r0, r4
 8027a00:	9315      	str	r3, [sp, #84]	; 0x54
 8027a02:	f002 f9bf 	bl	8029d84 <__pow5mult>
 8027a06:	4606      	mov	r6, r0
 8027a08:	2800      	cmp	r0, #0
 8027a0a:	f43f aea9 	beq.w	8027760 <_strtod_l+0x498>
 8027a0e:	4601      	mov	r1, r0
 8027a10:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027a12:	4620      	mov	r0, r4
 8027a14:	f002 f910 	bl	8029c38 <__multiply>
 8027a18:	9014      	str	r0, [sp, #80]	; 0x50
 8027a1a:	2800      	cmp	r0, #0
 8027a1c:	f43f aea0 	beq.w	8027760 <_strtod_l+0x498>
 8027a20:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027a22:	4620      	mov	r0, r4
 8027a24:	f001 ffec 	bl	8029a00 <_Bfree>
 8027a28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027a2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027a2c:	9218      	str	r2, [sp, #96]	; 0x60
 8027a2e:	2b00      	cmp	r3, #0
 8027a30:	f300 8097 	bgt.w	8027b62 <_strtod_l+0x89a>
 8027a34:	9b06      	ldr	r3, [sp, #24]
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	dd08      	ble.n	8027a4c <_strtod_l+0x784>
 8027a3a:	4639      	mov	r1, r7
 8027a3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027a3e:	4620      	mov	r0, r4
 8027a40:	f002 f9a0 	bl	8029d84 <__pow5mult>
 8027a44:	4607      	mov	r7, r0
 8027a46:	2800      	cmp	r0, #0
 8027a48:	f43f ae8a 	beq.w	8027760 <_strtod_l+0x498>
 8027a4c:	f1ba 0f00 	cmp.w	sl, #0
 8027a50:	dd08      	ble.n	8027a64 <_strtod_l+0x79c>
 8027a52:	4639      	mov	r1, r7
 8027a54:	4652      	mov	r2, sl
 8027a56:	4620      	mov	r0, r4
 8027a58:	f002 f9ee 	bl	8029e38 <__lshift>
 8027a5c:	4607      	mov	r7, r0
 8027a5e:	2800      	cmp	r0, #0
 8027a60:	f43f ae7e 	beq.w	8027760 <_strtod_l+0x498>
 8027a64:	f1bb 0f00 	cmp.w	fp, #0
 8027a68:	dd08      	ble.n	8027a7c <_strtod_l+0x7b4>
 8027a6a:	4631      	mov	r1, r6
 8027a6c:	465a      	mov	r2, fp
 8027a6e:	4620      	mov	r0, r4
 8027a70:	f002 f9e2 	bl	8029e38 <__lshift>
 8027a74:	4606      	mov	r6, r0
 8027a76:	2800      	cmp	r0, #0
 8027a78:	f43f ae72 	beq.w	8027760 <_strtod_l+0x498>
 8027a7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027a7e:	463a      	mov	r2, r7
 8027a80:	4620      	mov	r0, r4
 8027a82:	f002 fa61 	bl	8029f48 <__mdiff>
 8027a86:	4605      	mov	r5, r0
 8027a88:	2800      	cmp	r0, #0
 8027a8a:	f43f ae69 	beq.w	8027760 <_strtod_l+0x498>
 8027a8e:	2300      	movs	r3, #0
 8027a90:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8027a94:	60c3      	str	r3, [r0, #12]
 8027a96:	4631      	mov	r1, r6
 8027a98:	f002 fa3a 	bl	8029f10 <__mcmp>
 8027a9c:	2800      	cmp	r0, #0
 8027a9e:	da7f      	bge.n	8027ba0 <_strtod_l+0x8d8>
 8027aa0:	ea5a 0308 	orrs.w	r3, sl, r8
 8027aa4:	f040 80a5 	bne.w	8027bf2 <_strtod_l+0x92a>
 8027aa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027aac:	2b00      	cmp	r3, #0
 8027aae:	f040 80a0 	bne.w	8027bf2 <_strtod_l+0x92a>
 8027ab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8027ab6:	0d1b      	lsrs	r3, r3, #20
 8027ab8:	051b      	lsls	r3, r3, #20
 8027aba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8027abe:	f240 8098 	bls.w	8027bf2 <_strtod_l+0x92a>
 8027ac2:	696b      	ldr	r3, [r5, #20]
 8027ac4:	b91b      	cbnz	r3, 8027ace <_strtod_l+0x806>
 8027ac6:	692b      	ldr	r3, [r5, #16]
 8027ac8:	2b01      	cmp	r3, #1
 8027aca:	f340 8092 	ble.w	8027bf2 <_strtod_l+0x92a>
 8027ace:	4629      	mov	r1, r5
 8027ad0:	2201      	movs	r2, #1
 8027ad2:	4620      	mov	r0, r4
 8027ad4:	f002 f9b0 	bl	8029e38 <__lshift>
 8027ad8:	4631      	mov	r1, r6
 8027ada:	4605      	mov	r5, r0
 8027adc:	f002 fa18 	bl	8029f10 <__mcmp>
 8027ae0:	2800      	cmp	r0, #0
 8027ae2:	f340 8086 	ble.w	8027bf2 <_strtod_l+0x92a>
 8027ae6:	9904      	ldr	r1, [sp, #16]
 8027ae8:	4a2b      	ldr	r2, [pc, #172]	; (8027b98 <_strtod_l+0x8d0>)
 8027aea:	464b      	mov	r3, r9
 8027aec:	2900      	cmp	r1, #0
 8027aee:	f000 80a1 	beq.w	8027c34 <_strtod_l+0x96c>
 8027af2:	ea02 0109 	and.w	r1, r2, r9
 8027af6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8027afa:	f300 809b 	bgt.w	8027c34 <_strtod_l+0x96c>
 8027afe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8027b02:	f77f aea2 	ble.w	802784a <_strtod_l+0x582>
 8027b06:	4a25      	ldr	r2, [pc, #148]	; (8027b9c <_strtod_l+0x8d4>)
 8027b08:	2300      	movs	r3, #0
 8027b0a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8027b0e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8027b12:	ec49 8b17 	vmov	d7, r8, r9
 8027b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027b1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027b1e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8027b22:	4313      	orrs	r3, r2
 8027b24:	bf08      	it	eq
 8027b26:	2322      	moveq	r3, #34	; 0x22
 8027b28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8027b2c:	bf08      	it	eq
 8027b2e:	6023      	streq	r3, [r4, #0]
 8027b30:	e620      	b.n	8027774 <_strtod_l+0x4ac>
 8027b32:	f04f 31ff 	mov.w	r1, #4294967295
 8027b36:	fa01 f202 	lsl.w	r2, r1, r2
 8027b3a:	ea02 0808 	and.w	r8, r2, r8
 8027b3e:	e6d4      	b.n	80278ea <_strtod_l+0x622>
 8027b40:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8027b44:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8027b48:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8027b4c:	33e2      	adds	r3, #226	; 0xe2
 8027b4e:	fa00 f303 	lsl.w	r3, r0, r3
 8027b52:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8027b56:	e73b      	b.n	80279d0 <_strtod_l+0x708>
 8027b58:	2000      	movs	r0, #0
 8027b5a:	2301      	movs	r3, #1
 8027b5c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8027b60:	e736      	b.n	80279d0 <_strtod_l+0x708>
 8027b62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027b64:	461a      	mov	r2, r3
 8027b66:	4620      	mov	r0, r4
 8027b68:	f002 f966 	bl	8029e38 <__lshift>
 8027b6c:	9018      	str	r0, [sp, #96]	; 0x60
 8027b6e:	2800      	cmp	r0, #0
 8027b70:	f47f af60 	bne.w	8027a34 <_strtod_l+0x76c>
 8027b74:	e5f4      	b.n	8027760 <_strtod_l+0x498>
 8027b76:	bf00      	nop
 8027b78:	94a03595 	.word	0x94a03595
 8027b7c:	3fcfffff 	.word	0x3fcfffff
 8027b80:	94a03595 	.word	0x94a03595
 8027b84:	3fdfffff 	.word	0x3fdfffff
 8027b88:	35afe535 	.word	0x35afe535
 8027b8c:	3fe00000 	.word	0x3fe00000
 8027b90:	0802eac8 	.word	0x0802eac8
 8027b94:	fffffc02 	.word	0xfffffc02
 8027b98:	7ff00000 	.word	0x7ff00000
 8027b9c:	39500000 	.word	0x39500000
 8027ba0:	46cb      	mov	fp, r9
 8027ba2:	d165      	bne.n	8027c70 <_strtod_l+0x9a8>
 8027ba4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027ba8:	f1ba 0f00 	cmp.w	sl, #0
 8027bac:	d02a      	beq.n	8027c04 <_strtod_l+0x93c>
 8027bae:	4aaa      	ldr	r2, [pc, #680]	; (8027e58 <_strtod_l+0xb90>)
 8027bb0:	4293      	cmp	r3, r2
 8027bb2:	d12b      	bne.n	8027c0c <_strtod_l+0x944>
 8027bb4:	9b04      	ldr	r3, [sp, #16]
 8027bb6:	4641      	mov	r1, r8
 8027bb8:	b1fb      	cbz	r3, 8027bfa <_strtod_l+0x932>
 8027bba:	4aa8      	ldr	r2, [pc, #672]	; (8027e5c <_strtod_l+0xb94>)
 8027bbc:	ea09 0202 	and.w	r2, r9, r2
 8027bc0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8027bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8027bc8:	d81a      	bhi.n	8027c00 <_strtod_l+0x938>
 8027bca:	0d12      	lsrs	r2, r2, #20
 8027bcc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8027bd0:	fa00 f303 	lsl.w	r3, r0, r3
 8027bd4:	4299      	cmp	r1, r3
 8027bd6:	d119      	bne.n	8027c0c <_strtod_l+0x944>
 8027bd8:	4ba1      	ldr	r3, [pc, #644]	; (8027e60 <_strtod_l+0xb98>)
 8027bda:	459b      	cmp	fp, r3
 8027bdc:	d102      	bne.n	8027be4 <_strtod_l+0x91c>
 8027bde:	3101      	adds	r1, #1
 8027be0:	f43f adbe 	beq.w	8027760 <_strtod_l+0x498>
 8027be4:	4b9d      	ldr	r3, [pc, #628]	; (8027e5c <_strtod_l+0xb94>)
 8027be6:	ea0b 0303 	and.w	r3, fp, r3
 8027bea:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8027bee:	f04f 0800 	mov.w	r8, #0
 8027bf2:	9b04      	ldr	r3, [sp, #16]
 8027bf4:	2b00      	cmp	r3, #0
 8027bf6:	d186      	bne.n	8027b06 <_strtod_l+0x83e>
 8027bf8:	e5bc      	b.n	8027774 <_strtod_l+0x4ac>
 8027bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8027bfe:	e7e9      	b.n	8027bd4 <_strtod_l+0x90c>
 8027c00:	4603      	mov	r3, r0
 8027c02:	e7e7      	b.n	8027bd4 <_strtod_l+0x90c>
 8027c04:	ea53 0308 	orrs.w	r3, r3, r8
 8027c08:	f43f af6d 	beq.w	8027ae6 <_strtod_l+0x81e>
 8027c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027c0e:	b1db      	cbz	r3, 8027c48 <_strtod_l+0x980>
 8027c10:	ea13 0f0b 	tst.w	r3, fp
 8027c14:	d0ed      	beq.n	8027bf2 <_strtod_l+0x92a>
 8027c16:	9a04      	ldr	r2, [sp, #16]
 8027c18:	4640      	mov	r0, r8
 8027c1a:	4649      	mov	r1, r9
 8027c1c:	f1ba 0f00 	cmp.w	sl, #0
 8027c20:	d016      	beq.n	8027c50 <_strtod_l+0x988>
 8027c22:	f7ff fb35 	bl	8027290 <sulp>
 8027c26:	ed9d 7b08 	vldr	d7, [sp, #32]
 8027c2a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8027c2e:	ec59 8b17 	vmov	r8, r9, d7
 8027c32:	e7de      	b.n	8027bf2 <_strtod_l+0x92a>
 8027c34:	4013      	ands	r3, r2
 8027c36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8027c3a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8027c3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8027c42:	f04f 38ff 	mov.w	r8, #4294967295
 8027c46:	e7d4      	b.n	8027bf2 <_strtod_l+0x92a>
 8027c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027c4a:	ea13 0f08 	tst.w	r3, r8
 8027c4e:	e7e1      	b.n	8027c14 <_strtod_l+0x94c>
 8027c50:	f7ff fb1e 	bl	8027290 <sulp>
 8027c54:	ed9d 7b08 	vldr	d7, [sp, #32]
 8027c58:	ee37 7b40 	vsub.f64	d7, d7, d0
 8027c5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8027c60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c68:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8027c6c:	d1c1      	bne.n	8027bf2 <_strtod_l+0x92a>
 8027c6e:	e5ec      	b.n	802784a <_strtod_l+0x582>
 8027c70:	4631      	mov	r1, r6
 8027c72:	4628      	mov	r0, r5
 8027c74:	f002 fac8 	bl	802a208 <__ratio>
 8027c78:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8027c7c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c84:	d867      	bhi.n	8027d56 <_strtod_l+0xa8e>
 8027c86:	f1ba 0f00 	cmp.w	sl, #0
 8027c8a:	d044      	beq.n	8027d16 <_strtod_l+0xa4e>
 8027c8c:	4b75      	ldr	r3, [pc, #468]	; (8027e64 <_strtod_l+0xb9c>)
 8027c8e:	2200      	movs	r2, #0
 8027c90:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8027c94:	4971      	ldr	r1, [pc, #452]	; (8027e5c <_strtod_l+0xb94>)
 8027c96:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8027e70 <_strtod_l+0xba8>
 8027c9a:	ea0b 0001 	and.w	r0, fp, r1
 8027c9e:	4560      	cmp	r0, ip
 8027ca0:	900d      	str	r0, [sp, #52]	; 0x34
 8027ca2:	f040 808b 	bne.w	8027dbc <_strtod_l+0xaf4>
 8027ca6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8027caa:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8027cae:	ec49 8b10 	vmov	d0, r8, r9
 8027cb2:	ec43 2b1c 	vmov	d12, r2, r3
 8027cb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8027cba:	f002 f9cd 	bl	802a058 <__ulp>
 8027cbe:	ec49 8b1d 	vmov	d13, r8, r9
 8027cc2:	eeac db00 	vfma.f64	d13, d12, d0
 8027cc6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8027cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027ccc:	4963      	ldr	r1, [pc, #396]	; (8027e5c <_strtod_l+0xb94>)
 8027cce:	4a66      	ldr	r2, [pc, #408]	; (8027e68 <_strtod_l+0xba0>)
 8027cd0:	4019      	ands	r1, r3
 8027cd2:	4291      	cmp	r1, r2
 8027cd4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8027cd8:	d947      	bls.n	8027d6a <_strtod_l+0xaa2>
 8027cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027cdc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8027ce0:	4293      	cmp	r3, r2
 8027ce2:	d103      	bne.n	8027cec <_strtod_l+0xa24>
 8027ce4:	9b08      	ldr	r3, [sp, #32]
 8027ce6:	3301      	adds	r3, #1
 8027ce8:	f43f ad3a 	beq.w	8027760 <_strtod_l+0x498>
 8027cec:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8027e60 <_strtod_l+0xb98>
 8027cf0:	f04f 38ff 	mov.w	r8, #4294967295
 8027cf4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027cf6:	4620      	mov	r0, r4
 8027cf8:	f001 fe82 	bl	8029a00 <_Bfree>
 8027cfc:	4639      	mov	r1, r7
 8027cfe:	4620      	mov	r0, r4
 8027d00:	f001 fe7e 	bl	8029a00 <_Bfree>
 8027d04:	4631      	mov	r1, r6
 8027d06:	4620      	mov	r0, r4
 8027d08:	f001 fe7a 	bl	8029a00 <_Bfree>
 8027d0c:	4629      	mov	r1, r5
 8027d0e:	4620      	mov	r0, r4
 8027d10:	f001 fe76 	bl	8029a00 <_Bfree>
 8027d14:	e60f      	b.n	8027936 <_strtod_l+0x66e>
 8027d16:	f1b8 0f00 	cmp.w	r8, #0
 8027d1a:	d112      	bne.n	8027d42 <_strtod_l+0xa7a>
 8027d1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027d20:	b9b3      	cbnz	r3, 8027d50 <_strtod_l+0xa88>
 8027d22:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8027d26:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d2e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8027d32:	d401      	bmi.n	8027d38 <_strtod_l+0xa70>
 8027d34:	ee20 8b08 	vmul.f64	d8, d0, d8
 8027d38:	eeb1 7b48 	vneg.f64	d7, d8
 8027d3c:	ec53 2b17 	vmov	r2, r3, d7
 8027d40:	e7a8      	b.n	8027c94 <_strtod_l+0x9cc>
 8027d42:	f1b8 0f01 	cmp.w	r8, #1
 8027d46:	d103      	bne.n	8027d50 <_strtod_l+0xa88>
 8027d48:	f1b9 0f00 	cmp.w	r9, #0
 8027d4c:	f43f ad7d 	beq.w	802784a <_strtod_l+0x582>
 8027d50:	4b46      	ldr	r3, [pc, #280]	; (8027e6c <_strtod_l+0xba4>)
 8027d52:	2200      	movs	r2, #0
 8027d54:	e79c      	b.n	8027c90 <_strtod_l+0x9c8>
 8027d56:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8027d5a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8027d5e:	f1ba 0f00 	cmp.w	sl, #0
 8027d62:	d0e9      	beq.n	8027d38 <_strtod_l+0xa70>
 8027d64:	ec53 2b18 	vmov	r2, r3, d8
 8027d68:	e794      	b.n	8027c94 <_strtod_l+0x9cc>
 8027d6a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8027d6e:	9b04      	ldr	r3, [sp, #16]
 8027d70:	2b00      	cmp	r3, #0
 8027d72:	d1bf      	bne.n	8027cf4 <_strtod_l+0xa2c>
 8027d74:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8027d78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027d7a:	0d1b      	lsrs	r3, r3, #20
 8027d7c:	051b      	lsls	r3, r3, #20
 8027d7e:	429a      	cmp	r2, r3
 8027d80:	d1b8      	bne.n	8027cf4 <_strtod_l+0xa2c>
 8027d82:	ec51 0b18 	vmov	r0, r1, d8
 8027d86:	f7d8 fc87 	bl	8000698 <__aeabi_d2lz>
 8027d8a:	f7d8 fc3f 	bl	800060c <__aeabi_l2d>
 8027d8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027d92:	ec41 0b17 	vmov	d7, r0, r1
 8027d96:	ea43 0308 	orr.w	r3, r3, r8
 8027d9a:	ea53 030a 	orrs.w	r3, r3, sl
 8027d9e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8027da2:	d03e      	beq.n	8027e22 <_strtod_l+0xb5a>
 8027da4:	eeb4 8bca 	vcmpe.f64	d8, d10
 8027da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dac:	f53f ace2 	bmi.w	8027774 <_strtod_l+0x4ac>
 8027db0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8027db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027db8:	dd9c      	ble.n	8027cf4 <_strtod_l+0xa2c>
 8027dba:	e4db      	b.n	8027774 <_strtod_l+0x4ac>
 8027dbc:	9904      	ldr	r1, [sp, #16]
 8027dbe:	b301      	cbz	r1, 8027e02 <_strtod_l+0xb3a>
 8027dc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8027dc2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8027dc6:	d81c      	bhi.n	8027e02 <_strtod_l+0xb3a>
 8027dc8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8027e50 <_strtod_l+0xb88>
 8027dcc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dd4:	d811      	bhi.n	8027dfa <_strtod_l+0xb32>
 8027dd6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8027dda:	ee18 3a10 	vmov	r3, s16
 8027dde:	2b01      	cmp	r3, #1
 8027de0:	bf38      	it	cc
 8027de2:	2301      	movcc	r3, #1
 8027de4:	ee08 3a10 	vmov	s16, r3
 8027de8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8027dec:	f1ba 0f00 	cmp.w	sl, #0
 8027df0:	d114      	bne.n	8027e1c <_strtod_l+0xb54>
 8027df2:	eeb1 7b48 	vneg.f64	d7, d8
 8027df6:	ec53 2b17 	vmov	r2, r3, d7
 8027dfa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027dfc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8027e00:	1a0b      	subs	r3, r1, r0
 8027e02:	ed9d 0b08 	vldr	d0, [sp, #32]
 8027e06:	ec43 2b1c 	vmov	d12, r2, r3
 8027e0a:	f002 f925 	bl	802a058 <__ulp>
 8027e0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8027e12:	eeac 7b00 	vfma.f64	d7, d12, d0
 8027e16:	ec59 8b17 	vmov	r8, r9, d7
 8027e1a:	e7a8      	b.n	8027d6e <_strtod_l+0xaa6>
 8027e1c:	ec53 2b18 	vmov	r2, r3, d8
 8027e20:	e7eb      	b.n	8027dfa <_strtod_l+0xb32>
 8027e22:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8027e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e2a:	f57f af63 	bpl.w	8027cf4 <_strtod_l+0xa2c>
 8027e2e:	e4a1      	b.n	8027774 <_strtod_l+0x4ac>
 8027e30:	2300      	movs	r3, #0
 8027e32:	930b      	str	r3, [sp, #44]	; 0x2c
 8027e34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027e36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027e38:	6013      	str	r3, [r2, #0]
 8027e3a:	f7ff ba8d 	b.w	8027358 <_strtod_l+0x90>
 8027e3e:	2a65      	cmp	r2, #101	; 0x65
 8027e40:	f43f ab89 	beq.w	8027556 <_strtod_l+0x28e>
 8027e44:	2a45      	cmp	r2, #69	; 0x45
 8027e46:	f43f ab86 	beq.w	8027556 <_strtod_l+0x28e>
 8027e4a:	2101      	movs	r1, #1
 8027e4c:	f7ff bbbe 	b.w	80275cc <_strtod_l+0x304>
 8027e50:	ffc00000 	.word	0xffc00000
 8027e54:	41dfffff 	.word	0x41dfffff
 8027e58:	000fffff 	.word	0x000fffff
 8027e5c:	7ff00000 	.word	0x7ff00000
 8027e60:	7fefffff 	.word	0x7fefffff
 8027e64:	3ff00000 	.word	0x3ff00000
 8027e68:	7c9fffff 	.word	0x7c9fffff
 8027e6c:	bff00000 	.word	0xbff00000
 8027e70:	7fe00000 	.word	0x7fe00000

08027e74 <_strtod_r>:
 8027e74:	4b01      	ldr	r3, [pc, #4]	; (8027e7c <_strtod_r+0x8>)
 8027e76:	f7ff ba27 	b.w	80272c8 <_strtod_l>
 8027e7a:	bf00      	nop
 8027e7c:	200000e8 	.word	0x200000e8

08027e80 <_strtol_l.isra.0>:
 8027e80:	2b01      	cmp	r3, #1
 8027e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027e86:	d001      	beq.n	8027e8c <_strtol_l.isra.0+0xc>
 8027e88:	2b24      	cmp	r3, #36	; 0x24
 8027e8a:	d906      	bls.n	8027e9a <_strtol_l.isra.0+0x1a>
 8027e8c:	f7fe f8da 	bl	8026044 <__errno>
 8027e90:	2316      	movs	r3, #22
 8027e92:	6003      	str	r3, [r0, #0]
 8027e94:	2000      	movs	r0, #0
 8027e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e9a:	4f3a      	ldr	r7, [pc, #232]	; (8027f84 <_strtol_l.isra.0+0x104>)
 8027e9c:	468e      	mov	lr, r1
 8027e9e:	4676      	mov	r6, lr
 8027ea0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8027ea4:	5de5      	ldrb	r5, [r4, r7]
 8027ea6:	f015 0508 	ands.w	r5, r5, #8
 8027eaa:	d1f8      	bne.n	8027e9e <_strtol_l.isra.0+0x1e>
 8027eac:	2c2d      	cmp	r4, #45	; 0x2d
 8027eae:	d134      	bne.n	8027f1a <_strtol_l.isra.0+0x9a>
 8027eb0:	f89e 4000 	ldrb.w	r4, [lr]
 8027eb4:	f04f 0801 	mov.w	r8, #1
 8027eb8:	f106 0e02 	add.w	lr, r6, #2
 8027ebc:	2b00      	cmp	r3, #0
 8027ebe:	d05c      	beq.n	8027f7a <_strtol_l.isra.0+0xfa>
 8027ec0:	2b10      	cmp	r3, #16
 8027ec2:	d10c      	bne.n	8027ede <_strtol_l.isra.0+0x5e>
 8027ec4:	2c30      	cmp	r4, #48	; 0x30
 8027ec6:	d10a      	bne.n	8027ede <_strtol_l.isra.0+0x5e>
 8027ec8:	f89e 4000 	ldrb.w	r4, [lr]
 8027ecc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8027ed0:	2c58      	cmp	r4, #88	; 0x58
 8027ed2:	d14d      	bne.n	8027f70 <_strtol_l.isra.0+0xf0>
 8027ed4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8027ed8:	2310      	movs	r3, #16
 8027eda:	f10e 0e02 	add.w	lr, lr, #2
 8027ede:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8027ee2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027ee6:	2600      	movs	r6, #0
 8027ee8:	fbbc f9f3 	udiv	r9, ip, r3
 8027eec:	4635      	mov	r5, r6
 8027eee:	fb03 ca19 	mls	sl, r3, r9, ip
 8027ef2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8027ef6:	2f09      	cmp	r7, #9
 8027ef8:	d818      	bhi.n	8027f2c <_strtol_l.isra.0+0xac>
 8027efa:	463c      	mov	r4, r7
 8027efc:	42a3      	cmp	r3, r4
 8027efe:	dd24      	ble.n	8027f4a <_strtol_l.isra.0+0xca>
 8027f00:	2e00      	cmp	r6, #0
 8027f02:	db1f      	blt.n	8027f44 <_strtol_l.isra.0+0xc4>
 8027f04:	45a9      	cmp	r9, r5
 8027f06:	d31d      	bcc.n	8027f44 <_strtol_l.isra.0+0xc4>
 8027f08:	d101      	bne.n	8027f0e <_strtol_l.isra.0+0x8e>
 8027f0a:	45a2      	cmp	sl, r4
 8027f0c:	db1a      	blt.n	8027f44 <_strtol_l.isra.0+0xc4>
 8027f0e:	fb05 4503 	mla	r5, r5, r3, r4
 8027f12:	2601      	movs	r6, #1
 8027f14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8027f18:	e7eb      	b.n	8027ef2 <_strtol_l.isra.0+0x72>
 8027f1a:	2c2b      	cmp	r4, #43	; 0x2b
 8027f1c:	bf08      	it	eq
 8027f1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8027f22:	46a8      	mov	r8, r5
 8027f24:	bf08      	it	eq
 8027f26:	f106 0e02 	addeq.w	lr, r6, #2
 8027f2a:	e7c7      	b.n	8027ebc <_strtol_l.isra.0+0x3c>
 8027f2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8027f30:	2f19      	cmp	r7, #25
 8027f32:	d801      	bhi.n	8027f38 <_strtol_l.isra.0+0xb8>
 8027f34:	3c37      	subs	r4, #55	; 0x37
 8027f36:	e7e1      	b.n	8027efc <_strtol_l.isra.0+0x7c>
 8027f38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8027f3c:	2f19      	cmp	r7, #25
 8027f3e:	d804      	bhi.n	8027f4a <_strtol_l.isra.0+0xca>
 8027f40:	3c57      	subs	r4, #87	; 0x57
 8027f42:	e7db      	b.n	8027efc <_strtol_l.isra.0+0x7c>
 8027f44:	f04f 36ff 	mov.w	r6, #4294967295
 8027f48:	e7e4      	b.n	8027f14 <_strtol_l.isra.0+0x94>
 8027f4a:	2e00      	cmp	r6, #0
 8027f4c:	da05      	bge.n	8027f5a <_strtol_l.isra.0+0xda>
 8027f4e:	2322      	movs	r3, #34	; 0x22
 8027f50:	6003      	str	r3, [r0, #0]
 8027f52:	4665      	mov	r5, ip
 8027f54:	b942      	cbnz	r2, 8027f68 <_strtol_l.isra.0+0xe8>
 8027f56:	4628      	mov	r0, r5
 8027f58:	e79d      	b.n	8027e96 <_strtol_l.isra.0+0x16>
 8027f5a:	f1b8 0f00 	cmp.w	r8, #0
 8027f5e:	d000      	beq.n	8027f62 <_strtol_l.isra.0+0xe2>
 8027f60:	426d      	negs	r5, r5
 8027f62:	2a00      	cmp	r2, #0
 8027f64:	d0f7      	beq.n	8027f56 <_strtol_l.isra.0+0xd6>
 8027f66:	b10e      	cbz	r6, 8027f6c <_strtol_l.isra.0+0xec>
 8027f68:	f10e 31ff 	add.w	r1, lr, #4294967295
 8027f6c:	6011      	str	r1, [r2, #0]
 8027f6e:	e7f2      	b.n	8027f56 <_strtol_l.isra.0+0xd6>
 8027f70:	2430      	movs	r4, #48	; 0x30
 8027f72:	2b00      	cmp	r3, #0
 8027f74:	d1b3      	bne.n	8027ede <_strtol_l.isra.0+0x5e>
 8027f76:	2308      	movs	r3, #8
 8027f78:	e7b1      	b.n	8027ede <_strtol_l.isra.0+0x5e>
 8027f7a:	2c30      	cmp	r4, #48	; 0x30
 8027f7c:	d0a4      	beq.n	8027ec8 <_strtol_l.isra.0+0x48>
 8027f7e:	230a      	movs	r3, #10
 8027f80:	e7ad      	b.n	8027ede <_strtol_l.isra.0+0x5e>
 8027f82:	bf00      	nop
 8027f84:	0802eaf1 	.word	0x0802eaf1

08027f88 <_strtol_r>:
 8027f88:	f7ff bf7a 	b.w	8027e80 <_strtol_l.isra.0>

08027f8c <__swbuf_r>:
 8027f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f8e:	460e      	mov	r6, r1
 8027f90:	4614      	mov	r4, r2
 8027f92:	4605      	mov	r5, r0
 8027f94:	b118      	cbz	r0, 8027f9e <__swbuf_r+0x12>
 8027f96:	6983      	ldr	r3, [r0, #24]
 8027f98:	b90b      	cbnz	r3, 8027f9e <__swbuf_r+0x12>
 8027f9a:	f001 f841 	bl	8029020 <__sinit>
 8027f9e:	4b21      	ldr	r3, [pc, #132]	; (8028024 <__swbuf_r+0x98>)
 8027fa0:	429c      	cmp	r4, r3
 8027fa2:	d12b      	bne.n	8027ffc <__swbuf_r+0x70>
 8027fa4:	686c      	ldr	r4, [r5, #4]
 8027fa6:	69a3      	ldr	r3, [r4, #24]
 8027fa8:	60a3      	str	r3, [r4, #8]
 8027faa:	89a3      	ldrh	r3, [r4, #12]
 8027fac:	071a      	lsls	r2, r3, #28
 8027fae:	d52f      	bpl.n	8028010 <__swbuf_r+0x84>
 8027fb0:	6923      	ldr	r3, [r4, #16]
 8027fb2:	b36b      	cbz	r3, 8028010 <__swbuf_r+0x84>
 8027fb4:	6923      	ldr	r3, [r4, #16]
 8027fb6:	6820      	ldr	r0, [r4, #0]
 8027fb8:	1ac0      	subs	r0, r0, r3
 8027fba:	6963      	ldr	r3, [r4, #20]
 8027fbc:	b2f6      	uxtb	r6, r6
 8027fbe:	4283      	cmp	r3, r0
 8027fc0:	4637      	mov	r7, r6
 8027fc2:	dc04      	bgt.n	8027fce <__swbuf_r+0x42>
 8027fc4:	4621      	mov	r1, r4
 8027fc6:	4628      	mov	r0, r5
 8027fc8:	f000 ff96 	bl	8028ef8 <_fflush_r>
 8027fcc:	bb30      	cbnz	r0, 802801c <__swbuf_r+0x90>
 8027fce:	68a3      	ldr	r3, [r4, #8]
 8027fd0:	3b01      	subs	r3, #1
 8027fd2:	60a3      	str	r3, [r4, #8]
 8027fd4:	6823      	ldr	r3, [r4, #0]
 8027fd6:	1c5a      	adds	r2, r3, #1
 8027fd8:	6022      	str	r2, [r4, #0]
 8027fda:	701e      	strb	r6, [r3, #0]
 8027fdc:	6963      	ldr	r3, [r4, #20]
 8027fde:	3001      	adds	r0, #1
 8027fe0:	4283      	cmp	r3, r0
 8027fe2:	d004      	beq.n	8027fee <__swbuf_r+0x62>
 8027fe4:	89a3      	ldrh	r3, [r4, #12]
 8027fe6:	07db      	lsls	r3, r3, #31
 8027fe8:	d506      	bpl.n	8027ff8 <__swbuf_r+0x6c>
 8027fea:	2e0a      	cmp	r6, #10
 8027fec:	d104      	bne.n	8027ff8 <__swbuf_r+0x6c>
 8027fee:	4621      	mov	r1, r4
 8027ff0:	4628      	mov	r0, r5
 8027ff2:	f000 ff81 	bl	8028ef8 <_fflush_r>
 8027ff6:	b988      	cbnz	r0, 802801c <__swbuf_r+0x90>
 8027ff8:	4638      	mov	r0, r7
 8027ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027ffc:	4b0a      	ldr	r3, [pc, #40]	; (8028028 <__swbuf_r+0x9c>)
 8027ffe:	429c      	cmp	r4, r3
 8028000:	d101      	bne.n	8028006 <__swbuf_r+0x7a>
 8028002:	68ac      	ldr	r4, [r5, #8]
 8028004:	e7cf      	b.n	8027fa6 <__swbuf_r+0x1a>
 8028006:	4b09      	ldr	r3, [pc, #36]	; (802802c <__swbuf_r+0xa0>)
 8028008:	429c      	cmp	r4, r3
 802800a:	bf08      	it	eq
 802800c:	68ec      	ldreq	r4, [r5, #12]
 802800e:	e7ca      	b.n	8027fa6 <__swbuf_r+0x1a>
 8028010:	4621      	mov	r1, r4
 8028012:	4628      	mov	r0, r5
 8028014:	f000 f80c 	bl	8028030 <__swsetup_r>
 8028018:	2800      	cmp	r0, #0
 802801a:	d0cb      	beq.n	8027fb4 <__swbuf_r+0x28>
 802801c:	f04f 37ff 	mov.w	r7, #4294967295
 8028020:	e7ea      	b.n	8027ff8 <__swbuf_r+0x6c>
 8028022:	bf00      	nop
 8028024:	0802eca8 	.word	0x0802eca8
 8028028:	0802ecc8 	.word	0x0802ecc8
 802802c:	0802ec88 	.word	0x0802ec88

08028030 <__swsetup_r>:
 8028030:	4b32      	ldr	r3, [pc, #200]	; (80280fc <__swsetup_r+0xcc>)
 8028032:	b570      	push	{r4, r5, r6, lr}
 8028034:	681d      	ldr	r5, [r3, #0]
 8028036:	4606      	mov	r6, r0
 8028038:	460c      	mov	r4, r1
 802803a:	b125      	cbz	r5, 8028046 <__swsetup_r+0x16>
 802803c:	69ab      	ldr	r3, [r5, #24]
 802803e:	b913      	cbnz	r3, 8028046 <__swsetup_r+0x16>
 8028040:	4628      	mov	r0, r5
 8028042:	f000 ffed 	bl	8029020 <__sinit>
 8028046:	4b2e      	ldr	r3, [pc, #184]	; (8028100 <__swsetup_r+0xd0>)
 8028048:	429c      	cmp	r4, r3
 802804a:	d10f      	bne.n	802806c <__swsetup_r+0x3c>
 802804c:	686c      	ldr	r4, [r5, #4]
 802804e:	89a3      	ldrh	r3, [r4, #12]
 8028050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028054:	0719      	lsls	r1, r3, #28
 8028056:	d42c      	bmi.n	80280b2 <__swsetup_r+0x82>
 8028058:	06dd      	lsls	r5, r3, #27
 802805a:	d411      	bmi.n	8028080 <__swsetup_r+0x50>
 802805c:	2309      	movs	r3, #9
 802805e:	6033      	str	r3, [r6, #0]
 8028060:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028064:	81a3      	strh	r3, [r4, #12]
 8028066:	f04f 30ff 	mov.w	r0, #4294967295
 802806a:	e03e      	b.n	80280ea <__swsetup_r+0xba>
 802806c:	4b25      	ldr	r3, [pc, #148]	; (8028104 <__swsetup_r+0xd4>)
 802806e:	429c      	cmp	r4, r3
 8028070:	d101      	bne.n	8028076 <__swsetup_r+0x46>
 8028072:	68ac      	ldr	r4, [r5, #8]
 8028074:	e7eb      	b.n	802804e <__swsetup_r+0x1e>
 8028076:	4b24      	ldr	r3, [pc, #144]	; (8028108 <__swsetup_r+0xd8>)
 8028078:	429c      	cmp	r4, r3
 802807a:	bf08      	it	eq
 802807c:	68ec      	ldreq	r4, [r5, #12]
 802807e:	e7e6      	b.n	802804e <__swsetup_r+0x1e>
 8028080:	0758      	lsls	r0, r3, #29
 8028082:	d512      	bpl.n	80280aa <__swsetup_r+0x7a>
 8028084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028086:	b141      	cbz	r1, 802809a <__swsetup_r+0x6a>
 8028088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802808c:	4299      	cmp	r1, r3
 802808e:	d002      	beq.n	8028096 <__swsetup_r+0x66>
 8028090:	4630      	mov	r0, r6
 8028092:	f7fe f839 	bl	8026108 <_free_r>
 8028096:	2300      	movs	r3, #0
 8028098:	6363      	str	r3, [r4, #52]	; 0x34
 802809a:	89a3      	ldrh	r3, [r4, #12]
 802809c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80280a0:	81a3      	strh	r3, [r4, #12]
 80280a2:	2300      	movs	r3, #0
 80280a4:	6063      	str	r3, [r4, #4]
 80280a6:	6923      	ldr	r3, [r4, #16]
 80280a8:	6023      	str	r3, [r4, #0]
 80280aa:	89a3      	ldrh	r3, [r4, #12]
 80280ac:	f043 0308 	orr.w	r3, r3, #8
 80280b0:	81a3      	strh	r3, [r4, #12]
 80280b2:	6923      	ldr	r3, [r4, #16]
 80280b4:	b94b      	cbnz	r3, 80280ca <__swsetup_r+0x9a>
 80280b6:	89a3      	ldrh	r3, [r4, #12]
 80280b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80280bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80280c0:	d003      	beq.n	80280ca <__swsetup_r+0x9a>
 80280c2:	4621      	mov	r1, r4
 80280c4:	4630      	mov	r0, r6
 80280c6:	f001 fbe3 	bl	8029890 <__smakebuf_r>
 80280ca:	89a0      	ldrh	r0, [r4, #12]
 80280cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80280d0:	f010 0301 	ands.w	r3, r0, #1
 80280d4:	d00a      	beq.n	80280ec <__swsetup_r+0xbc>
 80280d6:	2300      	movs	r3, #0
 80280d8:	60a3      	str	r3, [r4, #8]
 80280da:	6963      	ldr	r3, [r4, #20]
 80280dc:	425b      	negs	r3, r3
 80280de:	61a3      	str	r3, [r4, #24]
 80280e0:	6923      	ldr	r3, [r4, #16]
 80280e2:	b943      	cbnz	r3, 80280f6 <__swsetup_r+0xc6>
 80280e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80280e8:	d1ba      	bne.n	8028060 <__swsetup_r+0x30>
 80280ea:	bd70      	pop	{r4, r5, r6, pc}
 80280ec:	0781      	lsls	r1, r0, #30
 80280ee:	bf58      	it	pl
 80280f0:	6963      	ldrpl	r3, [r4, #20]
 80280f2:	60a3      	str	r3, [r4, #8]
 80280f4:	e7f4      	b.n	80280e0 <__swsetup_r+0xb0>
 80280f6:	2000      	movs	r0, #0
 80280f8:	e7f7      	b.n	80280ea <__swsetup_r+0xba>
 80280fa:	bf00      	nop
 80280fc:	2000007c 	.word	0x2000007c
 8028100:	0802eca8 	.word	0x0802eca8
 8028104:	0802ecc8 	.word	0x0802ecc8
 8028108:	0802ec88 	.word	0x0802ec88

0802810c <__register_exitproc>:
 802810c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028110:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80281cc <__register_exitproc+0xc0>
 8028114:	4606      	mov	r6, r0
 8028116:	f8d8 0000 	ldr.w	r0, [r8]
 802811a:	461f      	mov	r7, r3
 802811c:	460d      	mov	r5, r1
 802811e:	4691      	mov	r9, r2
 8028120:	f001 fb8f 	bl	8029842 <__retarget_lock_acquire_recursive>
 8028124:	4b25      	ldr	r3, [pc, #148]	; (80281bc <__register_exitproc+0xb0>)
 8028126:	681c      	ldr	r4, [r3, #0]
 8028128:	b934      	cbnz	r4, 8028138 <__register_exitproc+0x2c>
 802812a:	4c25      	ldr	r4, [pc, #148]	; (80281c0 <__register_exitproc+0xb4>)
 802812c:	601c      	str	r4, [r3, #0]
 802812e:	4b25      	ldr	r3, [pc, #148]	; (80281c4 <__register_exitproc+0xb8>)
 8028130:	b113      	cbz	r3, 8028138 <__register_exitproc+0x2c>
 8028132:	681b      	ldr	r3, [r3, #0]
 8028134:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028138:	6863      	ldr	r3, [r4, #4]
 802813a:	2b1f      	cmp	r3, #31
 802813c:	dd07      	ble.n	802814e <__register_exitproc+0x42>
 802813e:	f8d8 0000 	ldr.w	r0, [r8]
 8028142:	f001 fb80 	bl	8029846 <__retarget_lock_release_recursive>
 8028146:	f04f 30ff 	mov.w	r0, #4294967295
 802814a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802814e:	b34e      	cbz	r6, 80281a4 <__register_exitproc+0x98>
 8028150:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028154:	b988      	cbnz	r0, 802817a <__register_exitproc+0x6e>
 8028156:	4b1c      	ldr	r3, [pc, #112]	; (80281c8 <__register_exitproc+0xbc>)
 8028158:	b923      	cbnz	r3, 8028164 <__register_exitproc+0x58>
 802815a:	f8d8 0000 	ldr.w	r0, [r8]
 802815e:	f001 fb71 	bl	8029844 <__retarget_lock_release>
 8028162:	e7f0      	b.n	8028146 <__register_exitproc+0x3a>
 8028164:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028168:	f7fd ffa8 	bl	80260bc <malloc>
 802816c:	2800      	cmp	r0, #0
 802816e:	d0f4      	beq.n	802815a <__register_exitproc+0x4e>
 8028170:	2300      	movs	r3, #0
 8028172:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028176:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802817a:	6863      	ldr	r3, [r4, #4]
 802817c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028180:	2201      	movs	r2, #1
 8028182:	409a      	lsls	r2, r3
 8028184:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028188:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802818c:	4313      	orrs	r3, r2
 802818e:	2e02      	cmp	r6, #2
 8028190:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028194:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028198:	bf02      	ittt	eq
 802819a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802819e:	431a      	orreq	r2, r3
 80281a0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80281a4:	6863      	ldr	r3, [r4, #4]
 80281a6:	f8d8 0000 	ldr.w	r0, [r8]
 80281aa:	1c5a      	adds	r2, r3, #1
 80281ac:	3302      	adds	r3, #2
 80281ae:	6062      	str	r2, [r4, #4]
 80281b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80281b4:	f001 fb47 	bl	8029846 <__retarget_lock_release_recursive>
 80281b8:	2000      	movs	r0, #0
 80281ba:	e7c6      	b.n	802814a <__register_exitproc+0x3e>
 80281bc:	20056990 	.word	0x20056990
 80281c0:	20056904 	.word	0x20056904
 80281c4:	0802ea9c 	.word	0x0802ea9c
 80281c8:	080260bd 	.word	0x080260bd
 80281cc:	200000e0 	.word	0x200000e0

080281d0 <quorem>:
 80281d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281d4:	6903      	ldr	r3, [r0, #16]
 80281d6:	690c      	ldr	r4, [r1, #16]
 80281d8:	42a3      	cmp	r3, r4
 80281da:	4607      	mov	r7, r0
 80281dc:	f2c0 8081 	blt.w	80282e2 <quorem+0x112>
 80281e0:	3c01      	subs	r4, #1
 80281e2:	f101 0814 	add.w	r8, r1, #20
 80281e6:	f100 0514 	add.w	r5, r0, #20
 80281ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80281ee:	9301      	str	r3, [sp, #4]
 80281f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80281f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80281f8:	3301      	adds	r3, #1
 80281fa:	429a      	cmp	r2, r3
 80281fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8028200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8028204:	fbb2 f6f3 	udiv	r6, r2, r3
 8028208:	d331      	bcc.n	802826e <quorem+0x9e>
 802820a:	f04f 0e00 	mov.w	lr, #0
 802820e:	4640      	mov	r0, r8
 8028210:	46ac      	mov	ip, r5
 8028212:	46f2      	mov	sl, lr
 8028214:	f850 2b04 	ldr.w	r2, [r0], #4
 8028218:	b293      	uxth	r3, r2
 802821a:	fb06 e303 	mla	r3, r6, r3, lr
 802821e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8028222:	b29b      	uxth	r3, r3
 8028224:	ebaa 0303 	sub.w	r3, sl, r3
 8028228:	0c12      	lsrs	r2, r2, #16
 802822a:	f8dc a000 	ldr.w	sl, [ip]
 802822e:	fb06 e202 	mla	r2, r6, r2, lr
 8028232:	fa13 f38a 	uxtah	r3, r3, sl
 8028236:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802823a:	fa1f fa82 	uxth.w	sl, r2
 802823e:	f8dc 2000 	ldr.w	r2, [ip]
 8028242:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8028246:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802824a:	b29b      	uxth	r3, r3
 802824c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028250:	4581      	cmp	r9, r0
 8028252:	f84c 3b04 	str.w	r3, [ip], #4
 8028256:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802825a:	d2db      	bcs.n	8028214 <quorem+0x44>
 802825c:	f855 300b 	ldr.w	r3, [r5, fp]
 8028260:	b92b      	cbnz	r3, 802826e <quorem+0x9e>
 8028262:	9b01      	ldr	r3, [sp, #4]
 8028264:	3b04      	subs	r3, #4
 8028266:	429d      	cmp	r5, r3
 8028268:	461a      	mov	r2, r3
 802826a:	d32e      	bcc.n	80282ca <quorem+0xfa>
 802826c:	613c      	str	r4, [r7, #16]
 802826e:	4638      	mov	r0, r7
 8028270:	f001 fe4e 	bl	8029f10 <__mcmp>
 8028274:	2800      	cmp	r0, #0
 8028276:	db24      	blt.n	80282c2 <quorem+0xf2>
 8028278:	3601      	adds	r6, #1
 802827a:	4628      	mov	r0, r5
 802827c:	f04f 0c00 	mov.w	ip, #0
 8028280:	f858 2b04 	ldr.w	r2, [r8], #4
 8028284:	f8d0 e000 	ldr.w	lr, [r0]
 8028288:	b293      	uxth	r3, r2
 802828a:	ebac 0303 	sub.w	r3, ip, r3
 802828e:	0c12      	lsrs	r2, r2, #16
 8028290:	fa13 f38e 	uxtah	r3, r3, lr
 8028294:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8028298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802829c:	b29b      	uxth	r3, r3
 802829e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80282a2:	45c1      	cmp	r9, r8
 80282a4:	f840 3b04 	str.w	r3, [r0], #4
 80282a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80282ac:	d2e8      	bcs.n	8028280 <quorem+0xb0>
 80282ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80282b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80282b6:	b922      	cbnz	r2, 80282c2 <quorem+0xf2>
 80282b8:	3b04      	subs	r3, #4
 80282ba:	429d      	cmp	r5, r3
 80282bc:	461a      	mov	r2, r3
 80282be:	d30a      	bcc.n	80282d6 <quorem+0x106>
 80282c0:	613c      	str	r4, [r7, #16]
 80282c2:	4630      	mov	r0, r6
 80282c4:	b003      	add	sp, #12
 80282c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282ca:	6812      	ldr	r2, [r2, #0]
 80282cc:	3b04      	subs	r3, #4
 80282ce:	2a00      	cmp	r2, #0
 80282d0:	d1cc      	bne.n	802826c <quorem+0x9c>
 80282d2:	3c01      	subs	r4, #1
 80282d4:	e7c7      	b.n	8028266 <quorem+0x96>
 80282d6:	6812      	ldr	r2, [r2, #0]
 80282d8:	3b04      	subs	r3, #4
 80282da:	2a00      	cmp	r2, #0
 80282dc:	d1f0      	bne.n	80282c0 <quorem+0xf0>
 80282de:	3c01      	subs	r4, #1
 80282e0:	e7eb      	b.n	80282ba <quorem+0xea>
 80282e2:	2000      	movs	r0, #0
 80282e4:	e7ee      	b.n	80282c4 <quorem+0xf4>
	...

080282e8 <_dtoa_r>:
 80282e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282ec:	ec59 8b10 	vmov	r8, r9, d0
 80282f0:	b095      	sub	sp, #84	; 0x54
 80282f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80282f4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80282f6:	9107      	str	r1, [sp, #28]
 80282f8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80282fc:	4606      	mov	r6, r0
 80282fe:	9209      	str	r2, [sp, #36]	; 0x24
 8028300:	9310      	str	r3, [sp, #64]	; 0x40
 8028302:	b975      	cbnz	r5, 8028322 <_dtoa_r+0x3a>
 8028304:	2010      	movs	r0, #16
 8028306:	f7fd fed9 	bl	80260bc <malloc>
 802830a:	4602      	mov	r2, r0
 802830c:	6270      	str	r0, [r6, #36]	; 0x24
 802830e:	b920      	cbnz	r0, 802831a <_dtoa_r+0x32>
 8028310:	4bab      	ldr	r3, [pc, #684]	; (80285c0 <_dtoa_r+0x2d8>)
 8028312:	21ea      	movs	r1, #234	; 0xea
 8028314:	48ab      	ldr	r0, [pc, #684]	; (80285c4 <_dtoa_r+0x2dc>)
 8028316:	f7fd fe63 	bl	8025fe0 <__assert_func>
 802831a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802831e:	6005      	str	r5, [r0, #0]
 8028320:	60c5      	str	r5, [r0, #12]
 8028322:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8028324:	6819      	ldr	r1, [r3, #0]
 8028326:	b151      	cbz	r1, 802833e <_dtoa_r+0x56>
 8028328:	685a      	ldr	r2, [r3, #4]
 802832a:	604a      	str	r2, [r1, #4]
 802832c:	2301      	movs	r3, #1
 802832e:	4093      	lsls	r3, r2
 8028330:	608b      	str	r3, [r1, #8]
 8028332:	4630      	mov	r0, r6
 8028334:	f001 fb64 	bl	8029a00 <_Bfree>
 8028338:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802833a:	2200      	movs	r2, #0
 802833c:	601a      	str	r2, [r3, #0]
 802833e:	f1b9 0300 	subs.w	r3, r9, #0
 8028342:	bfbb      	ittet	lt
 8028344:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8028348:	9303      	strlt	r3, [sp, #12]
 802834a:	2300      	movge	r3, #0
 802834c:	2201      	movlt	r2, #1
 802834e:	bfac      	ite	ge
 8028350:	6023      	strge	r3, [r4, #0]
 8028352:	6022      	strlt	r2, [r4, #0]
 8028354:	4b9c      	ldr	r3, [pc, #624]	; (80285c8 <_dtoa_r+0x2e0>)
 8028356:	9c03      	ldr	r4, [sp, #12]
 8028358:	43a3      	bics	r3, r4
 802835a:	d11a      	bne.n	8028392 <_dtoa_r+0xaa>
 802835c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802835e:	f242 730f 	movw	r3, #9999	; 0x270f
 8028362:	6013      	str	r3, [r2, #0]
 8028364:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8028368:	ea53 0308 	orrs.w	r3, r3, r8
 802836c:	f000 8512 	beq.w	8028d94 <_dtoa_r+0xaac>
 8028370:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028372:	b953      	cbnz	r3, 802838a <_dtoa_r+0xa2>
 8028374:	4b95      	ldr	r3, [pc, #596]	; (80285cc <_dtoa_r+0x2e4>)
 8028376:	e01f      	b.n	80283b8 <_dtoa_r+0xd0>
 8028378:	4b95      	ldr	r3, [pc, #596]	; (80285d0 <_dtoa_r+0x2e8>)
 802837a:	9300      	str	r3, [sp, #0]
 802837c:	3308      	adds	r3, #8
 802837e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028380:	6013      	str	r3, [r2, #0]
 8028382:	9800      	ldr	r0, [sp, #0]
 8028384:	b015      	add	sp, #84	; 0x54
 8028386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802838a:	4b90      	ldr	r3, [pc, #576]	; (80285cc <_dtoa_r+0x2e4>)
 802838c:	9300      	str	r3, [sp, #0]
 802838e:	3303      	adds	r3, #3
 8028390:	e7f5      	b.n	802837e <_dtoa_r+0x96>
 8028392:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028396:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802839a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802839e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80283a2:	d10b      	bne.n	80283bc <_dtoa_r+0xd4>
 80283a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80283a6:	2301      	movs	r3, #1
 80283a8:	6013      	str	r3, [r2, #0]
 80283aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80283ac:	2b00      	cmp	r3, #0
 80283ae:	f000 84ee 	beq.w	8028d8e <_dtoa_r+0xaa6>
 80283b2:	4888      	ldr	r0, [pc, #544]	; (80285d4 <_dtoa_r+0x2ec>)
 80283b4:	6018      	str	r0, [r3, #0]
 80283b6:	1e43      	subs	r3, r0, #1
 80283b8:	9300      	str	r3, [sp, #0]
 80283ba:	e7e2      	b.n	8028382 <_dtoa_r+0x9a>
 80283bc:	a913      	add	r1, sp, #76	; 0x4c
 80283be:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80283c2:	aa12      	add	r2, sp, #72	; 0x48
 80283c4:	4630      	mov	r0, r6
 80283c6:	f001 fec3 	bl	802a150 <__d2b>
 80283ca:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80283ce:	4605      	mov	r5, r0
 80283d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80283d2:	2900      	cmp	r1, #0
 80283d4:	d047      	beq.n	8028466 <_dtoa_r+0x17e>
 80283d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80283d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80283dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80283e0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80283e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80283e8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80283ec:	2400      	movs	r4, #0
 80283ee:	ec43 2b16 	vmov	d6, r2, r3
 80283f2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80283f6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80285a8 <_dtoa_r+0x2c0>
 80283fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80283fe:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80285b0 <_dtoa_r+0x2c8>
 8028402:	eea7 6b05 	vfma.f64	d6, d7, d5
 8028406:	eeb0 7b46 	vmov.f64	d7, d6
 802840a:	ee06 1a90 	vmov	s13, r1
 802840e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8028412:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80285b8 <_dtoa_r+0x2d0>
 8028416:	eea5 7b06 	vfma.f64	d7, d5, d6
 802841a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802841e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8028422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028426:	ee16 ba90 	vmov	fp, s13
 802842a:	9411      	str	r4, [sp, #68]	; 0x44
 802842c:	d508      	bpl.n	8028440 <_dtoa_r+0x158>
 802842e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8028432:	eeb4 6b47 	vcmp.f64	d6, d7
 8028436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802843a:	bf18      	it	ne
 802843c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8028440:	f1bb 0f16 	cmp.w	fp, #22
 8028444:	d832      	bhi.n	80284ac <_dtoa_r+0x1c4>
 8028446:	4b64      	ldr	r3, [pc, #400]	; (80285d8 <_dtoa_r+0x2f0>)
 8028448:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802844c:	ed93 7b00 	vldr	d7, [r3]
 8028450:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8028454:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802845c:	d501      	bpl.n	8028462 <_dtoa_r+0x17a>
 802845e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028462:	2300      	movs	r3, #0
 8028464:	e023      	b.n	80284ae <_dtoa_r+0x1c6>
 8028466:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028468:	4401      	add	r1, r0
 802846a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 802846e:	2b20      	cmp	r3, #32
 8028470:	bfc3      	ittte	gt
 8028472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8028476:	fa04 f303 	lslgt.w	r3, r4, r3
 802847a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 802847e:	f1c3 0320 	rsble	r3, r3, #32
 8028482:	bfc6      	itte	gt
 8028484:	fa28 f804 	lsrgt.w	r8, r8, r4
 8028488:	ea43 0308 	orrgt.w	r3, r3, r8
 802848c:	fa08 f303 	lslle.w	r3, r8, r3
 8028490:	ee07 3a90 	vmov	s15, r3
 8028494:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8028498:	3901      	subs	r1, #1
 802849a:	ed8d 7b00 	vstr	d7, [sp]
 802849e:	9c01      	ldr	r4, [sp, #4]
 80284a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80284a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80284a8:	2401      	movs	r4, #1
 80284aa:	e7a0      	b.n	80283ee <_dtoa_r+0x106>
 80284ac:	2301      	movs	r3, #1
 80284ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80284b0:	1a43      	subs	r3, r0, r1
 80284b2:	1e5a      	subs	r2, r3, #1
 80284b4:	bf45      	ittet	mi
 80284b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80284ba:	9305      	strmi	r3, [sp, #20]
 80284bc:	2300      	movpl	r3, #0
 80284be:	2300      	movmi	r3, #0
 80284c0:	9206      	str	r2, [sp, #24]
 80284c2:	bf54      	ite	pl
 80284c4:	9305      	strpl	r3, [sp, #20]
 80284c6:	9306      	strmi	r3, [sp, #24]
 80284c8:	f1bb 0f00 	cmp.w	fp, #0
 80284cc:	db18      	blt.n	8028500 <_dtoa_r+0x218>
 80284ce:	9b06      	ldr	r3, [sp, #24]
 80284d0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80284d4:	445b      	add	r3, fp
 80284d6:	9306      	str	r3, [sp, #24]
 80284d8:	2300      	movs	r3, #0
 80284da:	9a07      	ldr	r2, [sp, #28]
 80284dc:	2a09      	cmp	r2, #9
 80284de:	d849      	bhi.n	8028574 <_dtoa_r+0x28c>
 80284e0:	2a05      	cmp	r2, #5
 80284e2:	bfc4      	itt	gt
 80284e4:	3a04      	subgt	r2, #4
 80284e6:	9207      	strgt	r2, [sp, #28]
 80284e8:	9a07      	ldr	r2, [sp, #28]
 80284ea:	f1a2 0202 	sub.w	r2, r2, #2
 80284ee:	bfcc      	ite	gt
 80284f0:	2400      	movgt	r4, #0
 80284f2:	2401      	movle	r4, #1
 80284f4:	2a03      	cmp	r2, #3
 80284f6:	d848      	bhi.n	802858a <_dtoa_r+0x2a2>
 80284f8:	e8df f002 	tbb	[pc, r2]
 80284fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8028500:	9b05      	ldr	r3, [sp, #20]
 8028502:	2200      	movs	r2, #0
 8028504:	eba3 030b 	sub.w	r3, r3, fp
 8028508:	9305      	str	r3, [sp, #20]
 802850a:	920e      	str	r2, [sp, #56]	; 0x38
 802850c:	f1cb 0300 	rsb	r3, fp, #0
 8028510:	e7e3      	b.n	80284da <_dtoa_r+0x1f2>
 8028512:	2200      	movs	r2, #0
 8028514:	9208      	str	r2, [sp, #32]
 8028516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028518:	2a00      	cmp	r2, #0
 802851a:	dc39      	bgt.n	8028590 <_dtoa_r+0x2a8>
 802851c:	f04f 0a01 	mov.w	sl, #1
 8028520:	46d1      	mov	r9, sl
 8028522:	4652      	mov	r2, sl
 8028524:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8028528:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802852a:	2100      	movs	r1, #0
 802852c:	6079      	str	r1, [r7, #4]
 802852e:	2004      	movs	r0, #4
 8028530:	f100 0c14 	add.w	ip, r0, #20
 8028534:	4594      	cmp	ip, r2
 8028536:	6879      	ldr	r1, [r7, #4]
 8028538:	d92f      	bls.n	802859a <_dtoa_r+0x2b2>
 802853a:	4630      	mov	r0, r6
 802853c:	930c      	str	r3, [sp, #48]	; 0x30
 802853e:	f001 fa1f 	bl	8029980 <_Balloc>
 8028542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028544:	9000      	str	r0, [sp, #0]
 8028546:	4602      	mov	r2, r0
 8028548:	2800      	cmp	r0, #0
 802854a:	d149      	bne.n	80285e0 <_dtoa_r+0x2f8>
 802854c:	4b23      	ldr	r3, [pc, #140]	; (80285dc <_dtoa_r+0x2f4>)
 802854e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8028552:	e6df      	b.n	8028314 <_dtoa_r+0x2c>
 8028554:	2201      	movs	r2, #1
 8028556:	e7dd      	b.n	8028514 <_dtoa_r+0x22c>
 8028558:	2200      	movs	r2, #0
 802855a:	9208      	str	r2, [sp, #32]
 802855c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802855e:	eb0b 0a02 	add.w	sl, fp, r2
 8028562:	f10a 0901 	add.w	r9, sl, #1
 8028566:	464a      	mov	r2, r9
 8028568:	2a01      	cmp	r2, #1
 802856a:	bfb8      	it	lt
 802856c:	2201      	movlt	r2, #1
 802856e:	e7db      	b.n	8028528 <_dtoa_r+0x240>
 8028570:	2201      	movs	r2, #1
 8028572:	e7f2      	b.n	802855a <_dtoa_r+0x272>
 8028574:	2401      	movs	r4, #1
 8028576:	2200      	movs	r2, #0
 8028578:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802857c:	f04f 3aff 	mov.w	sl, #4294967295
 8028580:	2100      	movs	r1, #0
 8028582:	46d1      	mov	r9, sl
 8028584:	2212      	movs	r2, #18
 8028586:	9109      	str	r1, [sp, #36]	; 0x24
 8028588:	e7ce      	b.n	8028528 <_dtoa_r+0x240>
 802858a:	2201      	movs	r2, #1
 802858c:	9208      	str	r2, [sp, #32]
 802858e:	e7f5      	b.n	802857c <_dtoa_r+0x294>
 8028590:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8028594:	46d1      	mov	r9, sl
 8028596:	4652      	mov	r2, sl
 8028598:	e7c6      	b.n	8028528 <_dtoa_r+0x240>
 802859a:	3101      	adds	r1, #1
 802859c:	6079      	str	r1, [r7, #4]
 802859e:	0040      	lsls	r0, r0, #1
 80285a0:	e7c6      	b.n	8028530 <_dtoa_r+0x248>
 80285a2:	bf00      	nop
 80285a4:	f3af 8000 	nop.w
 80285a8:	636f4361 	.word	0x636f4361
 80285ac:	3fd287a7 	.word	0x3fd287a7
 80285b0:	8b60c8b3 	.word	0x8b60c8b3
 80285b4:	3fc68a28 	.word	0x3fc68a28
 80285b8:	509f79fb 	.word	0x509f79fb
 80285bc:	3fd34413 	.word	0x3fd34413
 80285c0:	0802ebfe 	.word	0x0802ebfe
 80285c4:	0802ec15 	.word	0x0802ec15
 80285c8:	7ff00000 	.word	0x7ff00000
 80285cc:	0802ebfa 	.word	0x0802ebfa
 80285d0:	0802ebf1 	.word	0x0802ebf1
 80285d4:	0802dd7b 	.word	0x0802dd7b
 80285d8:	0802edf0 	.word	0x0802edf0
 80285dc:	0802ec74 	.word	0x0802ec74
 80285e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80285e2:	9900      	ldr	r1, [sp, #0]
 80285e4:	6011      	str	r1, [r2, #0]
 80285e6:	f1b9 0f0e 	cmp.w	r9, #14
 80285ea:	d872      	bhi.n	80286d2 <_dtoa_r+0x3ea>
 80285ec:	2c00      	cmp	r4, #0
 80285ee:	d070      	beq.n	80286d2 <_dtoa_r+0x3ea>
 80285f0:	f1bb 0f00 	cmp.w	fp, #0
 80285f4:	f340 80a6 	ble.w	8028744 <_dtoa_r+0x45c>
 80285f8:	49ca      	ldr	r1, [pc, #808]	; (8028924 <_dtoa_r+0x63c>)
 80285fa:	f00b 020f 	and.w	r2, fp, #15
 80285fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8028602:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8028606:	ed92 7b00 	vldr	d7, [r2]
 802860a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802860e:	f000 808d 	beq.w	802872c <_dtoa_r+0x444>
 8028612:	4ac5      	ldr	r2, [pc, #788]	; (8028928 <_dtoa_r+0x640>)
 8028614:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8028618:	ed92 6b08 	vldr	d6, [r2, #32]
 802861c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8028620:	ed8d 6b02 	vstr	d6, [sp, #8]
 8028624:	f001 010f 	and.w	r1, r1, #15
 8028628:	2203      	movs	r2, #3
 802862a:	48bf      	ldr	r0, [pc, #764]	; (8028928 <_dtoa_r+0x640>)
 802862c:	2900      	cmp	r1, #0
 802862e:	d17f      	bne.n	8028730 <_dtoa_r+0x448>
 8028630:	ed9d 6b02 	vldr	d6, [sp, #8]
 8028634:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8028638:	ed8d 7b02 	vstr	d7, [sp, #8]
 802863c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802863e:	2900      	cmp	r1, #0
 8028640:	f000 80b2 	beq.w	80287a8 <_dtoa_r+0x4c0>
 8028644:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8028648:	ed9d 7b02 	vldr	d7, [sp, #8]
 802864c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028654:	f140 80a8 	bpl.w	80287a8 <_dtoa_r+0x4c0>
 8028658:	f1b9 0f00 	cmp.w	r9, #0
 802865c:	f000 80a4 	beq.w	80287a8 <_dtoa_r+0x4c0>
 8028660:	f1ba 0f00 	cmp.w	sl, #0
 8028664:	dd31      	ble.n	80286ca <_dtoa_r+0x3e2>
 8028666:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802866a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802866e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028672:	f10b 37ff 	add.w	r7, fp, #4294967295
 8028676:	3201      	adds	r2, #1
 8028678:	4650      	mov	r0, sl
 802867a:	ed9d 6b02 	vldr	d6, [sp, #8]
 802867e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8028682:	ee07 2a90 	vmov	s15, r2
 8028686:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802868a:	eea7 5b06 	vfma.f64	d5, d7, d6
 802868e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8028692:	9c03      	ldr	r4, [sp, #12]
 8028694:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8028698:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802869c:	2800      	cmp	r0, #0
 802869e:	f040 8086 	bne.w	80287ae <_dtoa_r+0x4c6>
 80286a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80286a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80286aa:	ec42 1b17 	vmov	d7, r1, r2
 80286ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80286b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286b6:	f300 8272 	bgt.w	8028b9e <_dtoa_r+0x8b6>
 80286ba:	eeb1 7b47 	vneg.f64	d7, d7
 80286be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80286c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286c6:	f100 8267 	bmi.w	8028b98 <_dtoa_r+0x8b0>
 80286ca:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80286ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80286d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80286d4:	2a00      	cmp	r2, #0
 80286d6:	f2c0 8129 	blt.w	802892c <_dtoa_r+0x644>
 80286da:	f1bb 0f0e 	cmp.w	fp, #14
 80286de:	f300 8125 	bgt.w	802892c <_dtoa_r+0x644>
 80286e2:	4b90      	ldr	r3, [pc, #576]	; (8028924 <_dtoa_r+0x63c>)
 80286e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80286e8:	ed93 6b00 	vldr	d6, [r3]
 80286ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286ee:	2b00      	cmp	r3, #0
 80286f0:	f280 80c3 	bge.w	802887a <_dtoa_r+0x592>
 80286f4:	f1b9 0f00 	cmp.w	r9, #0
 80286f8:	f300 80bf 	bgt.w	802887a <_dtoa_r+0x592>
 80286fc:	f040 824c 	bne.w	8028b98 <_dtoa_r+0x8b0>
 8028700:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8028704:	ee26 6b07 	vmul.f64	d6, d6, d7
 8028708:	ed9d 7b02 	vldr	d7, [sp, #8]
 802870c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028714:	464c      	mov	r4, r9
 8028716:	464f      	mov	r7, r9
 8028718:	f280 8222 	bge.w	8028b60 <_dtoa_r+0x878>
 802871c:	f8dd 8000 	ldr.w	r8, [sp]
 8028720:	2331      	movs	r3, #49	; 0x31
 8028722:	f808 3b01 	strb.w	r3, [r8], #1
 8028726:	f10b 0b01 	add.w	fp, fp, #1
 802872a:	e21e      	b.n	8028b6a <_dtoa_r+0x882>
 802872c:	2202      	movs	r2, #2
 802872e:	e77c      	b.n	802862a <_dtoa_r+0x342>
 8028730:	07cc      	lsls	r4, r1, #31
 8028732:	d504      	bpl.n	802873e <_dtoa_r+0x456>
 8028734:	ed90 6b00 	vldr	d6, [r0]
 8028738:	3201      	adds	r2, #1
 802873a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802873e:	1049      	asrs	r1, r1, #1
 8028740:	3008      	adds	r0, #8
 8028742:	e773      	b.n	802862c <_dtoa_r+0x344>
 8028744:	d02e      	beq.n	80287a4 <_dtoa_r+0x4bc>
 8028746:	f1cb 0100 	rsb	r1, fp, #0
 802874a:	4a76      	ldr	r2, [pc, #472]	; (8028924 <_dtoa_r+0x63c>)
 802874c:	f001 000f 	and.w	r0, r1, #15
 8028750:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028754:	ed92 7b00 	vldr	d7, [r2]
 8028758:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802875c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028760:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8028764:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8028768:	e9cd 7802 	strd	r7, r8, [sp, #8]
 802876c:	486e      	ldr	r0, [pc, #440]	; (8028928 <_dtoa_r+0x640>)
 802876e:	1109      	asrs	r1, r1, #4
 8028770:	2400      	movs	r4, #0
 8028772:	2202      	movs	r2, #2
 8028774:	b939      	cbnz	r1, 8028786 <_dtoa_r+0x49e>
 8028776:	2c00      	cmp	r4, #0
 8028778:	f43f af60 	beq.w	802863c <_dtoa_r+0x354>
 802877c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028784:	e75a      	b.n	802863c <_dtoa_r+0x354>
 8028786:	07cf      	lsls	r7, r1, #31
 8028788:	d509      	bpl.n	802879e <_dtoa_r+0x4b6>
 802878a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 802878e:	ed90 7b00 	vldr	d7, [r0]
 8028792:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028796:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802879a:	3201      	adds	r2, #1
 802879c:	2401      	movs	r4, #1
 802879e:	1049      	asrs	r1, r1, #1
 80287a0:	3008      	adds	r0, #8
 80287a2:	e7e7      	b.n	8028774 <_dtoa_r+0x48c>
 80287a4:	2202      	movs	r2, #2
 80287a6:	e749      	b.n	802863c <_dtoa_r+0x354>
 80287a8:	465f      	mov	r7, fp
 80287aa:	4648      	mov	r0, r9
 80287ac:	e765      	b.n	802867a <_dtoa_r+0x392>
 80287ae:	ec42 1b17 	vmov	d7, r1, r2
 80287b2:	4a5c      	ldr	r2, [pc, #368]	; (8028924 <_dtoa_r+0x63c>)
 80287b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80287b8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80287bc:	9a00      	ldr	r2, [sp, #0]
 80287be:	1814      	adds	r4, r2, r0
 80287c0:	9a08      	ldr	r2, [sp, #32]
 80287c2:	b352      	cbz	r2, 802881a <_dtoa_r+0x532>
 80287c4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80287c8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80287cc:	f8dd 8000 	ldr.w	r8, [sp]
 80287d0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80287d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80287d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80287dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80287e0:	ee14 2a90 	vmov	r2, s9
 80287e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80287e8:	3230      	adds	r2, #48	; 0x30
 80287ea:	ee36 6b45 	vsub.f64	d6, d6, d5
 80287ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80287f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287f6:	f808 2b01 	strb.w	r2, [r8], #1
 80287fa:	d439      	bmi.n	8028870 <_dtoa_r+0x588>
 80287fc:	ee32 5b46 	vsub.f64	d5, d2, d6
 8028800:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8028804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028808:	d472      	bmi.n	80288f0 <_dtoa_r+0x608>
 802880a:	45a0      	cmp	r8, r4
 802880c:	f43f af5d 	beq.w	80286ca <_dtoa_r+0x3e2>
 8028810:	ee27 7b03 	vmul.f64	d7, d7, d3
 8028814:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028818:	e7e0      	b.n	80287dc <_dtoa_r+0x4f4>
 802881a:	f8dd 8000 	ldr.w	r8, [sp]
 802881e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028822:	4621      	mov	r1, r4
 8028824:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028828:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802882c:	ee14 2a90 	vmov	r2, s9
 8028830:	3230      	adds	r2, #48	; 0x30
 8028832:	f808 2b01 	strb.w	r2, [r8], #1
 8028836:	45a0      	cmp	r8, r4
 8028838:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802883c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028840:	d118      	bne.n	8028874 <_dtoa_r+0x58c>
 8028842:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8028846:	ee37 4b05 	vadd.f64	d4, d7, d5
 802884a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802884e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028852:	dc4d      	bgt.n	80288f0 <_dtoa_r+0x608>
 8028854:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028858:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802885c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028860:	f57f af33 	bpl.w	80286ca <_dtoa_r+0x3e2>
 8028864:	4688      	mov	r8, r1
 8028866:	3901      	subs	r1, #1
 8028868:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802886c:	2b30      	cmp	r3, #48	; 0x30
 802886e:	d0f9      	beq.n	8028864 <_dtoa_r+0x57c>
 8028870:	46bb      	mov	fp, r7
 8028872:	e02a      	b.n	80288ca <_dtoa_r+0x5e2>
 8028874:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028878:	e7d6      	b.n	8028828 <_dtoa_r+0x540>
 802887a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802887e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8028882:	f8dd 8000 	ldr.w	r8, [sp]
 8028886:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802888a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802888e:	ee15 3a10 	vmov	r3, s10
 8028892:	3330      	adds	r3, #48	; 0x30
 8028894:	f808 3b01 	strb.w	r3, [r8], #1
 8028898:	9b00      	ldr	r3, [sp, #0]
 802889a:	eba8 0303 	sub.w	r3, r8, r3
 802889e:	4599      	cmp	r9, r3
 80288a0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80288a4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80288a8:	d133      	bne.n	8028912 <_dtoa_r+0x62a>
 80288aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80288ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80288b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80288b6:	dc1a      	bgt.n	80288ee <_dtoa_r+0x606>
 80288b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80288bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80288c0:	d103      	bne.n	80288ca <_dtoa_r+0x5e2>
 80288c2:	ee15 3a10 	vmov	r3, s10
 80288c6:	07d9      	lsls	r1, r3, #31
 80288c8:	d411      	bmi.n	80288ee <_dtoa_r+0x606>
 80288ca:	4629      	mov	r1, r5
 80288cc:	4630      	mov	r0, r6
 80288ce:	f001 f897 	bl	8029a00 <_Bfree>
 80288d2:	2300      	movs	r3, #0
 80288d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80288d6:	f888 3000 	strb.w	r3, [r8]
 80288da:	f10b 0301 	add.w	r3, fp, #1
 80288de:	6013      	str	r3, [r2, #0]
 80288e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80288e2:	2b00      	cmp	r3, #0
 80288e4:	f43f ad4d 	beq.w	8028382 <_dtoa_r+0x9a>
 80288e8:	f8c3 8000 	str.w	r8, [r3]
 80288ec:	e549      	b.n	8028382 <_dtoa_r+0x9a>
 80288ee:	465f      	mov	r7, fp
 80288f0:	4643      	mov	r3, r8
 80288f2:	4698      	mov	r8, r3
 80288f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80288f8:	2a39      	cmp	r2, #57	; 0x39
 80288fa:	d106      	bne.n	802890a <_dtoa_r+0x622>
 80288fc:	9a00      	ldr	r2, [sp, #0]
 80288fe:	429a      	cmp	r2, r3
 8028900:	d1f7      	bne.n	80288f2 <_dtoa_r+0x60a>
 8028902:	9900      	ldr	r1, [sp, #0]
 8028904:	2230      	movs	r2, #48	; 0x30
 8028906:	3701      	adds	r7, #1
 8028908:	700a      	strb	r2, [r1, #0]
 802890a:	781a      	ldrb	r2, [r3, #0]
 802890c:	3201      	adds	r2, #1
 802890e:	701a      	strb	r2, [r3, #0]
 8028910:	e7ae      	b.n	8028870 <_dtoa_r+0x588>
 8028912:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028916:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802891a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802891e:	d1b2      	bne.n	8028886 <_dtoa_r+0x59e>
 8028920:	e7d3      	b.n	80288ca <_dtoa_r+0x5e2>
 8028922:	bf00      	nop
 8028924:	0802edf0 	.word	0x0802edf0
 8028928:	0802edc8 	.word	0x0802edc8
 802892c:	9908      	ldr	r1, [sp, #32]
 802892e:	2900      	cmp	r1, #0
 8028930:	f000 80d1 	beq.w	8028ad6 <_dtoa_r+0x7ee>
 8028934:	9907      	ldr	r1, [sp, #28]
 8028936:	2901      	cmp	r1, #1
 8028938:	f300 80b4 	bgt.w	8028aa4 <_dtoa_r+0x7bc>
 802893c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802893e:	2900      	cmp	r1, #0
 8028940:	f000 80ac 	beq.w	8028a9c <_dtoa_r+0x7b4>
 8028944:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8028948:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802894c:	461c      	mov	r4, r3
 802894e:	930a      	str	r3, [sp, #40]	; 0x28
 8028950:	9b05      	ldr	r3, [sp, #20]
 8028952:	4413      	add	r3, r2
 8028954:	9305      	str	r3, [sp, #20]
 8028956:	9b06      	ldr	r3, [sp, #24]
 8028958:	2101      	movs	r1, #1
 802895a:	4413      	add	r3, r2
 802895c:	4630      	mov	r0, r6
 802895e:	9306      	str	r3, [sp, #24]
 8028960:	f001 f954 	bl	8029c0c <__i2b>
 8028964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028966:	4607      	mov	r7, r0
 8028968:	f1b8 0f00 	cmp.w	r8, #0
 802896c:	dd0d      	ble.n	802898a <_dtoa_r+0x6a2>
 802896e:	9a06      	ldr	r2, [sp, #24]
 8028970:	2a00      	cmp	r2, #0
 8028972:	dd0a      	ble.n	802898a <_dtoa_r+0x6a2>
 8028974:	4542      	cmp	r2, r8
 8028976:	9905      	ldr	r1, [sp, #20]
 8028978:	bfa8      	it	ge
 802897a:	4642      	movge	r2, r8
 802897c:	1a89      	subs	r1, r1, r2
 802897e:	9105      	str	r1, [sp, #20]
 8028980:	9906      	ldr	r1, [sp, #24]
 8028982:	eba8 0802 	sub.w	r8, r8, r2
 8028986:	1a8a      	subs	r2, r1, r2
 8028988:	9206      	str	r2, [sp, #24]
 802898a:	b303      	cbz	r3, 80289ce <_dtoa_r+0x6e6>
 802898c:	9a08      	ldr	r2, [sp, #32]
 802898e:	2a00      	cmp	r2, #0
 8028990:	f000 80a6 	beq.w	8028ae0 <_dtoa_r+0x7f8>
 8028994:	2c00      	cmp	r4, #0
 8028996:	dd13      	ble.n	80289c0 <_dtoa_r+0x6d8>
 8028998:	4639      	mov	r1, r7
 802899a:	4622      	mov	r2, r4
 802899c:	4630      	mov	r0, r6
 802899e:	930c      	str	r3, [sp, #48]	; 0x30
 80289a0:	f001 f9f0 	bl	8029d84 <__pow5mult>
 80289a4:	462a      	mov	r2, r5
 80289a6:	4601      	mov	r1, r0
 80289a8:	4607      	mov	r7, r0
 80289aa:	4630      	mov	r0, r6
 80289ac:	f001 f944 	bl	8029c38 <__multiply>
 80289b0:	4629      	mov	r1, r5
 80289b2:	900a      	str	r0, [sp, #40]	; 0x28
 80289b4:	4630      	mov	r0, r6
 80289b6:	f001 f823 	bl	8029a00 <_Bfree>
 80289ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80289bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80289be:	4615      	mov	r5, r2
 80289c0:	1b1a      	subs	r2, r3, r4
 80289c2:	d004      	beq.n	80289ce <_dtoa_r+0x6e6>
 80289c4:	4629      	mov	r1, r5
 80289c6:	4630      	mov	r0, r6
 80289c8:	f001 f9dc 	bl	8029d84 <__pow5mult>
 80289cc:	4605      	mov	r5, r0
 80289ce:	2101      	movs	r1, #1
 80289d0:	4630      	mov	r0, r6
 80289d2:	f001 f91b 	bl	8029c0c <__i2b>
 80289d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80289d8:	2b00      	cmp	r3, #0
 80289da:	4604      	mov	r4, r0
 80289dc:	f340 8082 	ble.w	8028ae4 <_dtoa_r+0x7fc>
 80289e0:	461a      	mov	r2, r3
 80289e2:	4601      	mov	r1, r0
 80289e4:	4630      	mov	r0, r6
 80289e6:	f001 f9cd 	bl	8029d84 <__pow5mult>
 80289ea:	9b07      	ldr	r3, [sp, #28]
 80289ec:	2b01      	cmp	r3, #1
 80289ee:	4604      	mov	r4, r0
 80289f0:	dd7b      	ble.n	8028aea <_dtoa_r+0x802>
 80289f2:	2300      	movs	r3, #0
 80289f4:	930a      	str	r3, [sp, #40]	; 0x28
 80289f6:	6922      	ldr	r2, [r4, #16]
 80289f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80289fc:	6910      	ldr	r0, [r2, #16]
 80289fe:	f001 f8b5 	bl	8029b6c <__hi0bits>
 8028a02:	f1c0 0020 	rsb	r0, r0, #32
 8028a06:	9b06      	ldr	r3, [sp, #24]
 8028a08:	4418      	add	r0, r3
 8028a0a:	f010 001f 	ands.w	r0, r0, #31
 8028a0e:	f000 808d 	beq.w	8028b2c <_dtoa_r+0x844>
 8028a12:	f1c0 0220 	rsb	r2, r0, #32
 8028a16:	2a04      	cmp	r2, #4
 8028a18:	f340 8086 	ble.w	8028b28 <_dtoa_r+0x840>
 8028a1c:	f1c0 001c 	rsb	r0, r0, #28
 8028a20:	9b05      	ldr	r3, [sp, #20]
 8028a22:	4403      	add	r3, r0
 8028a24:	9305      	str	r3, [sp, #20]
 8028a26:	9b06      	ldr	r3, [sp, #24]
 8028a28:	4403      	add	r3, r0
 8028a2a:	4480      	add	r8, r0
 8028a2c:	9306      	str	r3, [sp, #24]
 8028a2e:	9b05      	ldr	r3, [sp, #20]
 8028a30:	2b00      	cmp	r3, #0
 8028a32:	dd05      	ble.n	8028a40 <_dtoa_r+0x758>
 8028a34:	4629      	mov	r1, r5
 8028a36:	461a      	mov	r2, r3
 8028a38:	4630      	mov	r0, r6
 8028a3a:	f001 f9fd 	bl	8029e38 <__lshift>
 8028a3e:	4605      	mov	r5, r0
 8028a40:	9b06      	ldr	r3, [sp, #24]
 8028a42:	2b00      	cmp	r3, #0
 8028a44:	dd05      	ble.n	8028a52 <_dtoa_r+0x76a>
 8028a46:	4621      	mov	r1, r4
 8028a48:	461a      	mov	r2, r3
 8028a4a:	4630      	mov	r0, r6
 8028a4c:	f001 f9f4 	bl	8029e38 <__lshift>
 8028a50:	4604      	mov	r4, r0
 8028a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028a54:	2b00      	cmp	r3, #0
 8028a56:	d06b      	beq.n	8028b30 <_dtoa_r+0x848>
 8028a58:	4621      	mov	r1, r4
 8028a5a:	4628      	mov	r0, r5
 8028a5c:	f001 fa58 	bl	8029f10 <__mcmp>
 8028a60:	2800      	cmp	r0, #0
 8028a62:	da65      	bge.n	8028b30 <_dtoa_r+0x848>
 8028a64:	2300      	movs	r3, #0
 8028a66:	4629      	mov	r1, r5
 8028a68:	220a      	movs	r2, #10
 8028a6a:	4630      	mov	r0, r6
 8028a6c:	f000 ffea 	bl	8029a44 <__multadd>
 8028a70:	9b08      	ldr	r3, [sp, #32]
 8028a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028a76:	4605      	mov	r5, r0
 8028a78:	2b00      	cmp	r3, #0
 8028a7a:	f000 8192 	beq.w	8028da2 <_dtoa_r+0xaba>
 8028a7e:	4639      	mov	r1, r7
 8028a80:	2300      	movs	r3, #0
 8028a82:	220a      	movs	r2, #10
 8028a84:	4630      	mov	r0, r6
 8028a86:	f000 ffdd 	bl	8029a44 <__multadd>
 8028a8a:	f1ba 0f00 	cmp.w	sl, #0
 8028a8e:	4607      	mov	r7, r0
 8028a90:	f300 808e 	bgt.w	8028bb0 <_dtoa_r+0x8c8>
 8028a94:	9b07      	ldr	r3, [sp, #28]
 8028a96:	2b02      	cmp	r3, #2
 8028a98:	dc51      	bgt.n	8028b3e <_dtoa_r+0x856>
 8028a9a:	e089      	b.n	8028bb0 <_dtoa_r+0x8c8>
 8028a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028a9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8028aa2:	e751      	b.n	8028948 <_dtoa_r+0x660>
 8028aa4:	f109 34ff 	add.w	r4, r9, #4294967295
 8028aa8:	42a3      	cmp	r3, r4
 8028aaa:	bfbf      	itttt	lt
 8028aac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8028aae:	1ae3      	sublt	r3, r4, r3
 8028ab0:	18d2      	addlt	r2, r2, r3
 8028ab2:	4613      	movlt	r3, r2
 8028ab4:	bfb7      	itett	lt
 8028ab6:	930e      	strlt	r3, [sp, #56]	; 0x38
 8028ab8:	1b1c      	subge	r4, r3, r4
 8028aba:	4623      	movlt	r3, r4
 8028abc:	2400      	movlt	r4, #0
 8028abe:	f1b9 0f00 	cmp.w	r9, #0
 8028ac2:	bfb5      	itete	lt
 8028ac4:	9a05      	ldrlt	r2, [sp, #20]
 8028ac6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8028aca:	eba2 0809 	sublt.w	r8, r2, r9
 8028ace:	464a      	movge	r2, r9
 8028ad0:	bfb8      	it	lt
 8028ad2:	2200      	movlt	r2, #0
 8028ad4:	e73b      	b.n	802894e <_dtoa_r+0x666>
 8028ad6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8028ada:	9f08      	ldr	r7, [sp, #32]
 8028adc:	461c      	mov	r4, r3
 8028ade:	e743      	b.n	8028968 <_dtoa_r+0x680>
 8028ae0:	461a      	mov	r2, r3
 8028ae2:	e76f      	b.n	80289c4 <_dtoa_r+0x6dc>
 8028ae4:	9b07      	ldr	r3, [sp, #28]
 8028ae6:	2b01      	cmp	r3, #1
 8028ae8:	dc18      	bgt.n	8028b1c <_dtoa_r+0x834>
 8028aea:	9b02      	ldr	r3, [sp, #8]
 8028aec:	b9b3      	cbnz	r3, 8028b1c <_dtoa_r+0x834>
 8028aee:	9b03      	ldr	r3, [sp, #12]
 8028af0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8028af4:	b9a2      	cbnz	r2, 8028b20 <_dtoa_r+0x838>
 8028af6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8028afa:	0d12      	lsrs	r2, r2, #20
 8028afc:	0512      	lsls	r2, r2, #20
 8028afe:	b18a      	cbz	r2, 8028b24 <_dtoa_r+0x83c>
 8028b00:	9b05      	ldr	r3, [sp, #20]
 8028b02:	3301      	adds	r3, #1
 8028b04:	9305      	str	r3, [sp, #20]
 8028b06:	9b06      	ldr	r3, [sp, #24]
 8028b08:	3301      	adds	r3, #1
 8028b0a:	9306      	str	r3, [sp, #24]
 8028b0c:	2301      	movs	r3, #1
 8028b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8028b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028b12:	2b00      	cmp	r3, #0
 8028b14:	f47f af6f 	bne.w	80289f6 <_dtoa_r+0x70e>
 8028b18:	2001      	movs	r0, #1
 8028b1a:	e774      	b.n	8028a06 <_dtoa_r+0x71e>
 8028b1c:	2300      	movs	r3, #0
 8028b1e:	e7f6      	b.n	8028b0e <_dtoa_r+0x826>
 8028b20:	9b02      	ldr	r3, [sp, #8]
 8028b22:	e7f4      	b.n	8028b0e <_dtoa_r+0x826>
 8028b24:	920a      	str	r2, [sp, #40]	; 0x28
 8028b26:	e7f3      	b.n	8028b10 <_dtoa_r+0x828>
 8028b28:	d081      	beq.n	8028a2e <_dtoa_r+0x746>
 8028b2a:	4610      	mov	r0, r2
 8028b2c:	301c      	adds	r0, #28
 8028b2e:	e777      	b.n	8028a20 <_dtoa_r+0x738>
 8028b30:	f1b9 0f00 	cmp.w	r9, #0
 8028b34:	dc37      	bgt.n	8028ba6 <_dtoa_r+0x8be>
 8028b36:	9b07      	ldr	r3, [sp, #28]
 8028b38:	2b02      	cmp	r3, #2
 8028b3a:	dd34      	ble.n	8028ba6 <_dtoa_r+0x8be>
 8028b3c:	46ca      	mov	sl, r9
 8028b3e:	f1ba 0f00 	cmp.w	sl, #0
 8028b42:	d10d      	bne.n	8028b60 <_dtoa_r+0x878>
 8028b44:	4621      	mov	r1, r4
 8028b46:	4653      	mov	r3, sl
 8028b48:	2205      	movs	r2, #5
 8028b4a:	4630      	mov	r0, r6
 8028b4c:	f000 ff7a 	bl	8029a44 <__multadd>
 8028b50:	4601      	mov	r1, r0
 8028b52:	4604      	mov	r4, r0
 8028b54:	4628      	mov	r0, r5
 8028b56:	f001 f9db 	bl	8029f10 <__mcmp>
 8028b5a:	2800      	cmp	r0, #0
 8028b5c:	f73f adde 	bgt.w	802871c <_dtoa_r+0x434>
 8028b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b62:	f8dd 8000 	ldr.w	r8, [sp]
 8028b66:	ea6f 0b03 	mvn.w	fp, r3
 8028b6a:	f04f 0900 	mov.w	r9, #0
 8028b6e:	4621      	mov	r1, r4
 8028b70:	4630      	mov	r0, r6
 8028b72:	f000 ff45 	bl	8029a00 <_Bfree>
 8028b76:	2f00      	cmp	r7, #0
 8028b78:	f43f aea7 	beq.w	80288ca <_dtoa_r+0x5e2>
 8028b7c:	f1b9 0f00 	cmp.w	r9, #0
 8028b80:	d005      	beq.n	8028b8e <_dtoa_r+0x8a6>
 8028b82:	45b9      	cmp	r9, r7
 8028b84:	d003      	beq.n	8028b8e <_dtoa_r+0x8a6>
 8028b86:	4649      	mov	r1, r9
 8028b88:	4630      	mov	r0, r6
 8028b8a:	f000 ff39 	bl	8029a00 <_Bfree>
 8028b8e:	4639      	mov	r1, r7
 8028b90:	4630      	mov	r0, r6
 8028b92:	f000 ff35 	bl	8029a00 <_Bfree>
 8028b96:	e698      	b.n	80288ca <_dtoa_r+0x5e2>
 8028b98:	2400      	movs	r4, #0
 8028b9a:	4627      	mov	r7, r4
 8028b9c:	e7e0      	b.n	8028b60 <_dtoa_r+0x878>
 8028b9e:	46bb      	mov	fp, r7
 8028ba0:	4604      	mov	r4, r0
 8028ba2:	4607      	mov	r7, r0
 8028ba4:	e5ba      	b.n	802871c <_dtoa_r+0x434>
 8028ba6:	9b08      	ldr	r3, [sp, #32]
 8028ba8:	46ca      	mov	sl, r9
 8028baa:	2b00      	cmp	r3, #0
 8028bac:	f000 8100 	beq.w	8028db0 <_dtoa_r+0xac8>
 8028bb0:	f1b8 0f00 	cmp.w	r8, #0
 8028bb4:	dd05      	ble.n	8028bc2 <_dtoa_r+0x8da>
 8028bb6:	4639      	mov	r1, r7
 8028bb8:	4642      	mov	r2, r8
 8028bba:	4630      	mov	r0, r6
 8028bbc:	f001 f93c 	bl	8029e38 <__lshift>
 8028bc0:	4607      	mov	r7, r0
 8028bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028bc4:	2b00      	cmp	r3, #0
 8028bc6:	d05d      	beq.n	8028c84 <_dtoa_r+0x99c>
 8028bc8:	6879      	ldr	r1, [r7, #4]
 8028bca:	4630      	mov	r0, r6
 8028bcc:	f000 fed8 	bl	8029980 <_Balloc>
 8028bd0:	4680      	mov	r8, r0
 8028bd2:	b928      	cbnz	r0, 8028be0 <_dtoa_r+0x8f8>
 8028bd4:	4b82      	ldr	r3, [pc, #520]	; (8028de0 <_dtoa_r+0xaf8>)
 8028bd6:	4602      	mov	r2, r0
 8028bd8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8028bdc:	f7ff bb9a 	b.w	8028314 <_dtoa_r+0x2c>
 8028be0:	693a      	ldr	r2, [r7, #16]
 8028be2:	3202      	adds	r2, #2
 8028be4:	0092      	lsls	r2, r2, #2
 8028be6:	f107 010c 	add.w	r1, r7, #12
 8028bea:	300c      	adds	r0, #12
 8028bec:	f7fd fa76 	bl	80260dc <memcpy>
 8028bf0:	2201      	movs	r2, #1
 8028bf2:	4641      	mov	r1, r8
 8028bf4:	4630      	mov	r0, r6
 8028bf6:	f001 f91f 	bl	8029e38 <__lshift>
 8028bfa:	9b00      	ldr	r3, [sp, #0]
 8028bfc:	3301      	adds	r3, #1
 8028bfe:	9305      	str	r3, [sp, #20]
 8028c00:	9b00      	ldr	r3, [sp, #0]
 8028c02:	4453      	add	r3, sl
 8028c04:	9309      	str	r3, [sp, #36]	; 0x24
 8028c06:	9b02      	ldr	r3, [sp, #8]
 8028c08:	f003 0301 	and.w	r3, r3, #1
 8028c0c:	46b9      	mov	r9, r7
 8028c0e:	9308      	str	r3, [sp, #32]
 8028c10:	4607      	mov	r7, r0
 8028c12:	9b05      	ldr	r3, [sp, #20]
 8028c14:	4621      	mov	r1, r4
 8028c16:	3b01      	subs	r3, #1
 8028c18:	4628      	mov	r0, r5
 8028c1a:	9302      	str	r3, [sp, #8]
 8028c1c:	f7ff fad8 	bl	80281d0 <quorem>
 8028c20:	4603      	mov	r3, r0
 8028c22:	3330      	adds	r3, #48	; 0x30
 8028c24:	9006      	str	r0, [sp, #24]
 8028c26:	4649      	mov	r1, r9
 8028c28:	4628      	mov	r0, r5
 8028c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8028c2c:	f001 f970 	bl	8029f10 <__mcmp>
 8028c30:	463a      	mov	r2, r7
 8028c32:	4682      	mov	sl, r0
 8028c34:	4621      	mov	r1, r4
 8028c36:	4630      	mov	r0, r6
 8028c38:	f001 f986 	bl	8029f48 <__mdiff>
 8028c3c:	68c2      	ldr	r2, [r0, #12]
 8028c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028c40:	4680      	mov	r8, r0
 8028c42:	bb0a      	cbnz	r2, 8028c88 <_dtoa_r+0x9a0>
 8028c44:	4601      	mov	r1, r0
 8028c46:	4628      	mov	r0, r5
 8028c48:	f001 f962 	bl	8029f10 <__mcmp>
 8028c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028c4e:	4602      	mov	r2, r0
 8028c50:	4641      	mov	r1, r8
 8028c52:	4630      	mov	r0, r6
 8028c54:	920e      	str	r2, [sp, #56]	; 0x38
 8028c56:	930a      	str	r3, [sp, #40]	; 0x28
 8028c58:	f000 fed2 	bl	8029a00 <_Bfree>
 8028c5c:	9b07      	ldr	r3, [sp, #28]
 8028c5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028c60:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8028c64:	ea43 0102 	orr.w	r1, r3, r2
 8028c68:	9b08      	ldr	r3, [sp, #32]
 8028c6a:	430b      	orrs	r3, r1
 8028c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028c6e:	d10d      	bne.n	8028c8c <_dtoa_r+0x9a4>
 8028c70:	2b39      	cmp	r3, #57	; 0x39
 8028c72:	d029      	beq.n	8028cc8 <_dtoa_r+0x9e0>
 8028c74:	f1ba 0f00 	cmp.w	sl, #0
 8028c78:	dd01      	ble.n	8028c7e <_dtoa_r+0x996>
 8028c7a:	9b06      	ldr	r3, [sp, #24]
 8028c7c:	3331      	adds	r3, #49	; 0x31
 8028c7e:	9a02      	ldr	r2, [sp, #8]
 8028c80:	7013      	strb	r3, [r2, #0]
 8028c82:	e774      	b.n	8028b6e <_dtoa_r+0x886>
 8028c84:	4638      	mov	r0, r7
 8028c86:	e7b8      	b.n	8028bfa <_dtoa_r+0x912>
 8028c88:	2201      	movs	r2, #1
 8028c8a:	e7e1      	b.n	8028c50 <_dtoa_r+0x968>
 8028c8c:	f1ba 0f00 	cmp.w	sl, #0
 8028c90:	db06      	blt.n	8028ca0 <_dtoa_r+0x9b8>
 8028c92:	9907      	ldr	r1, [sp, #28]
 8028c94:	ea41 0a0a 	orr.w	sl, r1, sl
 8028c98:	9908      	ldr	r1, [sp, #32]
 8028c9a:	ea5a 0101 	orrs.w	r1, sl, r1
 8028c9e:	d120      	bne.n	8028ce2 <_dtoa_r+0x9fa>
 8028ca0:	2a00      	cmp	r2, #0
 8028ca2:	ddec      	ble.n	8028c7e <_dtoa_r+0x996>
 8028ca4:	4629      	mov	r1, r5
 8028ca6:	2201      	movs	r2, #1
 8028ca8:	4630      	mov	r0, r6
 8028caa:	9305      	str	r3, [sp, #20]
 8028cac:	f001 f8c4 	bl	8029e38 <__lshift>
 8028cb0:	4621      	mov	r1, r4
 8028cb2:	4605      	mov	r5, r0
 8028cb4:	f001 f92c 	bl	8029f10 <__mcmp>
 8028cb8:	2800      	cmp	r0, #0
 8028cba:	9b05      	ldr	r3, [sp, #20]
 8028cbc:	dc02      	bgt.n	8028cc4 <_dtoa_r+0x9dc>
 8028cbe:	d1de      	bne.n	8028c7e <_dtoa_r+0x996>
 8028cc0:	07da      	lsls	r2, r3, #31
 8028cc2:	d5dc      	bpl.n	8028c7e <_dtoa_r+0x996>
 8028cc4:	2b39      	cmp	r3, #57	; 0x39
 8028cc6:	d1d8      	bne.n	8028c7a <_dtoa_r+0x992>
 8028cc8:	9a02      	ldr	r2, [sp, #8]
 8028cca:	2339      	movs	r3, #57	; 0x39
 8028ccc:	7013      	strb	r3, [r2, #0]
 8028cce:	4643      	mov	r3, r8
 8028cd0:	4698      	mov	r8, r3
 8028cd2:	3b01      	subs	r3, #1
 8028cd4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8028cd8:	2a39      	cmp	r2, #57	; 0x39
 8028cda:	d051      	beq.n	8028d80 <_dtoa_r+0xa98>
 8028cdc:	3201      	adds	r2, #1
 8028cde:	701a      	strb	r2, [r3, #0]
 8028ce0:	e745      	b.n	8028b6e <_dtoa_r+0x886>
 8028ce2:	2a00      	cmp	r2, #0
 8028ce4:	dd03      	ble.n	8028cee <_dtoa_r+0xa06>
 8028ce6:	2b39      	cmp	r3, #57	; 0x39
 8028ce8:	d0ee      	beq.n	8028cc8 <_dtoa_r+0x9e0>
 8028cea:	3301      	adds	r3, #1
 8028cec:	e7c7      	b.n	8028c7e <_dtoa_r+0x996>
 8028cee:	9a05      	ldr	r2, [sp, #20]
 8028cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028cf2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8028cf6:	428a      	cmp	r2, r1
 8028cf8:	d02b      	beq.n	8028d52 <_dtoa_r+0xa6a>
 8028cfa:	4629      	mov	r1, r5
 8028cfc:	2300      	movs	r3, #0
 8028cfe:	220a      	movs	r2, #10
 8028d00:	4630      	mov	r0, r6
 8028d02:	f000 fe9f 	bl	8029a44 <__multadd>
 8028d06:	45b9      	cmp	r9, r7
 8028d08:	4605      	mov	r5, r0
 8028d0a:	f04f 0300 	mov.w	r3, #0
 8028d0e:	f04f 020a 	mov.w	r2, #10
 8028d12:	4649      	mov	r1, r9
 8028d14:	4630      	mov	r0, r6
 8028d16:	d107      	bne.n	8028d28 <_dtoa_r+0xa40>
 8028d18:	f000 fe94 	bl	8029a44 <__multadd>
 8028d1c:	4681      	mov	r9, r0
 8028d1e:	4607      	mov	r7, r0
 8028d20:	9b05      	ldr	r3, [sp, #20]
 8028d22:	3301      	adds	r3, #1
 8028d24:	9305      	str	r3, [sp, #20]
 8028d26:	e774      	b.n	8028c12 <_dtoa_r+0x92a>
 8028d28:	f000 fe8c 	bl	8029a44 <__multadd>
 8028d2c:	4639      	mov	r1, r7
 8028d2e:	4681      	mov	r9, r0
 8028d30:	2300      	movs	r3, #0
 8028d32:	220a      	movs	r2, #10
 8028d34:	4630      	mov	r0, r6
 8028d36:	f000 fe85 	bl	8029a44 <__multadd>
 8028d3a:	4607      	mov	r7, r0
 8028d3c:	e7f0      	b.n	8028d20 <_dtoa_r+0xa38>
 8028d3e:	f1ba 0f00 	cmp.w	sl, #0
 8028d42:	9a00      	ldr	r2, [sp, #0]
 8028d44:	bfcc      	ite	gt
 8028d46:	46d0      	movgt	r8, sl
 8028d48:	f04f 0801 	movle.w	r8, #1
 8028d4c:	4490      	add	r8, r2
 8028d4e:	f04f 0900 	mov.w	r9, #0
 8028d52:	4629      	mov	r1, r5
 8028d54:	2201      	movs	r2, #1
 8028d56:	4630      	mov	r0, r6
 8028d58:	9302      	str	r3, [sp, #8]
 8028d5a:	f001 f86d 	bl	8029e38 <__lshift>
 8028d5e:	4621      	mov	r1, r4
 8028d60:	4605      	mov	r5, r0
 8028d62:	f001 f8d5 	bl	8029f10 <__mcmp>
 8028d66:	2800      	cmp	r0, #0
 8028d68:	dcb1      	bgt.n	8028cce <_dtoa_r+0x9e6>
 8028d6a:	d102      	bne.n	8028d72 <_dtoa_r+0xa8a>
 8028d6c:	9b02      	ldr	r3, [sp, #8]
 8028d6e:	07db      	lsls	r3, r3, #31
 8028d70:	d4ad      	bmi.n	8028cce <_dtoa_r+0x9e6>
 8028d72:	4643      	mov	r3, r8
 8028d74:	4698      	mov	r8, r3
 8028d76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028d7a:	2a30      	cmp	r2, #48	; 0x30
 8028d7c:	d0fa      	beq.n	8028d74 <_dtoa_r+0xa8c>
 8028d7e:	e6f6      	b.n	8028b6e <_dtoa_r+0x886>
 8028d80:	9a00      	ldr	r2, [sp, #0]
 8028d82:	429a      	cmp	r2, r3
 8028d84:	d1a4      	bne.n	8028cd0 <_dtoa_r+0x9e8>
 8028d86:	f10b 0b01 	add.w	fp, fp, #1
 8028d8a:	2331      	movs	r3, #49	; 0x31
 8028d8c:	e778      	b.n	8028c80 <_dtoa_r+0x998>
 8028d8e:	4b15      	ldr	r3, [pc, #84]	; (8028de4 <_dtoa_r+0xafc>)
 8028d90:	f7ff bb12 	b.w	80283b8 <_dtoa_r+0xd0>
 8028d94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028d96:	2b00      	cmp	r3, #0
 8028d98:	f47f aaee 	bne.w	8028378 <_dtoa_r+0x90>
 8028d9c:	4b12      	ldr	r3, [pc, #72]	; (8028de8 <_dtoa_r+0xb00>)
 8028d9e:	f7ff bb0b 	b.w	80283b8 <_dtoa_r+0xd0>
 8028da2:	f1ba 0f00 	cmp.w	sl, #0
 8028da6:	dc03      	bgt.n	8028db0 <_dtoa_r+0xac8>
 8028da8:	9b07      	ldr	r3, [sp, #28]
 8028daa:	2b02      	cmp	r3, #2
 8028dac:	f73f aec7 	bgt.w	8028b3e <_dtoa_r+0x856>
 8028db0:	f8dd 8000 	ldr.w	r8, [sp]
 8028db4:	4621      	mov	r1, r4
 8028db6:	4628      	mov	r0, r5
 8028db8:	f7ff fa0a 	bl	80281d0 <quorem>
 8028dbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8028dc0:	f808 3b01 	strb.w	r3, [r8], #1
 8028dc4:	9a00      	ldr	r2, [sp, #0]
 8028dc6:	eba8 0202 	sub.w	r2, r8, r2
 8028dca:	4592      	cmp	sl, r2
 8028dcc:	ddb7      	ble.n	8028d3e <_dtoa_r+0xa56>
 8028dce:	4629      	mov	r1, r5
 8028dd0:	2300      	movs	r3, #0
 8028dd2:	220a      	movs	r2, #10
 8028dd4:	4630      	mov	r0, r6
 8028dd6:	f000 fe35 	bl	8029a44 <__multadd>
 8028dda:	4605      	mov	r5, r0
 8028ddc:	e7ea      	b.n	8028db4 <_dtoa_r+0xacc>
 8028dde:	bf00      	nop
 8028de0:	0802ec74 	.word	0x0802ec74
 8028de4:	0802dd7a 	.word	0x0802dd7a
 8028de8:	0802ebf1 	.word	0x0802ebf1

08028dec <__sflush_r>:
 8028dec:	898a      	ldrh	r2, [r1, #12]
 8028dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028df2:	4605      	mov	r5, r0
 8028df4:	0710      	lsls	r0, r2, #28
 8028df6:	460c      	mov	r4, r1
 8028df8:	d458      	bmi.n	8028eac <__sflush_r+0xc0>
 8028dfa:	684b      	ldr	r3, [r1, #4]
 8028dfc:	2b00      	cmp	r3, #0
 8028dfe:	dc05      	bgt.n	8028e0c <__sflush_r+0x20>
 8028e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028e02:	2b00      	cmp	r3, #0
 8028e04:	dc02      	bgt.n	8028e0c <__sflush_r+0x20>
 8028e06:	2000      	movs	r0, #0
 8028e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028e0e:	2e00      	cmp	r6, #0
 8028e10:	d0f9      	beq.n	8028e06 <__sflush_r+0x1a>
 8028e12:	2300      	movs	r3, #0
 8028e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028e18:	682f      	ldr	r7, [r5, #0]
 8028e1a:	602b      	str	r3, [r5, #0]
 8028e1c:	d032      	beq.n	8028e84 <__sflush_r+0x98>
 8028e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028e20:	89a3      	ldrh	r3, [r4, #12]
 8028e22:	075a      	lsls	r2, r3, #29
 8028e24:	d505      	bpl.n	8028e32 <__sflush_r+0x46>
 8028e26:	6863      	ldr	r3, [r4, #4]
 8028e28:	1ac0      	subs	r0, r0, r3
 8028e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028e2c:	b10b      	cbz	r3, 8028e32 <__sflush_r+0x46>
 8028e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028e30:	1ac0      	subs	r0, r0, r3
 8028e32:	2300      	movs	r3, #0
 8028e34:	4602      	mov	r2, r0
 8028e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028e38:	6a21      	ldr	r1, [r4, #32]
 8028e3a:	4628      	mov	r0, r5
 8028e3c:	47b0      	blx	r6
 8028e3e:	1c43      	adds	r3, r0, #1
 8028e40:	89a3      	ldrh	r3, [r4, #12]
 8028e42:	d106      	bne.n	8028e52 <__sflush_r+0x66>
 8028e44:	6829      	ldr	r1, [r5, #0]
 8028e46:	291d      	cmp	r1, #29
 8028e48:	d82c      	bhi.n	8028ea4 <__sflush_r+0xb8>
 8028e4a:	4a2a      	ldr	r2, [pc, #168]	; (8028ef4 <__sflush_r+0x108>)
 8028e4c:	40ca      	lsrs	r2, r1
 8028e4e:	07d6      	lsls	r6, r2, #31
 8028e50:	d528      	bpl.n	8028ea4 <__sflush_r+0xb8>
 8028e52:	2200      	movs	r2, #0
 8028e54:	6062      	str	r2, [r4, #4]
 8028e56:	04d9      	lsls	r1, r3, #19
 8028e58:	6922      	ldr	r2, [r4, #16]
 8028e5a:	6022      	str	r2, [r4, #0]
 8028e5c:	d504      	bpl.n	8028e68 <__sflush_r+0x7c>
 8028e5e:	1c42      	adds	r2, r0, #1
 8028e60:	d101      	bne.n	8028e66 <__sflush_r+0x7a>
 8028e62:	682b      	ldr	r3, [r5, #0]
 8028e64:	b903      	cbnz	r3, 8028e68 <__sflush_r+0x7c>
 8028e66:	6560      	str	r0, [r4, #84]	; 0x54
 8028e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028e6a:	602f      	str	r7, [r5, #0]
 8028e6c:	2900      	cmp	r1, #0
 8028e6e:	d0ca      	beq.n	8028e06 <__sflush_r+0x1a>
 8028e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028e74:	4299      	cmp	r1, r3
 8028e76:	d002      	beq.n	8028e7e <__sflush_r+0x92>
 8028e78:	4628      	mov	r0, r5
 8028e7a:	f7fd f945 	bl	8026108 <_free_r>
 8028e7e:	2000      	movs	r0, #0
 8028e80:	6360      	str	r0, [r4, #52]	; 0x34
 8028e82:	e7c1      	b.n	8028e08 <__sflush_r+0x1c>
 8028e84:	6a21      	ldr	r1, [r4, #32]
 8028e86:	2301      	movs	r3, #1
 8028e88:	4628      	mov	r0, r5
 8028e8a:	47b0      	blx	r6
 8028e8c:	1c41      	adds	r1, r0, #1
 8028e8e:	d1c7      	bne.n	8028e20 <__sflush_r+0x34>
 8028e90:	682b      	ldr	r3, [r5, #0]
 8028e92:	2b00      	cmp	r3, #0
 8028e94:	d0c4      	beq.n	8028e20 <__sflush_r+0x34>
 8028e96:	2b1d      	cmp	r3, #29
 8028e98:	d001      	beq.n	8028e9e <__sflush_r+0xb2>
 8028e9a:	2b16      	cmp	r3, #22
 8028e9c:	d101      	bne.n	8028ea2 <__sflush_r+0xb6>
 8028e9e:	602f      	str	r7, [r5, #0]
 8028ea0:	e7b1      	b.n	8028e06 <__sflush_r+0x1a>
 8028ea2:	89a3      	ldrh	r3, [r4, #12]
 8028ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028ea8:	81a3      	strh	r3, [r4, #12]
 8028eaa:	e7ad      	b.n	8028e08 <__sflush_r+0x1c>
 8028eac:	690f      	ldr	r7, [r1, #16]
 8028eae:	2f00      	cmp	r7, #0
 8028eb0:	d0a9      	beq.n	8028e06 <__sflush_r+0x1a>
 8028eb2:	0793      	lsls	r3, r2, #30
 8028eb4:	680e      	ldr	r6, [r1, #0]
 8028eb6:	bf08      	it	eq
 8028eb8:	694b      	ldreq	r3, [r1, #20]
 8028eba:	600f      	str	r7, [r1, #0]
 8028ebc:	bf18      	it	ne
 8028ebe:	2300      	movne	r3, #0
 8028ec0:	eba6 0807 	sub.w	r8, r6, r7
 8028ec4:	608b      	str	r3, [r1, #8]
 8028ec6:	f1b8 0f00 	cmp.w	r8, #0
 8028eca:	dd9c      	ble.n	8028e06 <__sflush_r+0x1a>
 8028ecc:	6a21      	ldr	r1, [r4, #32]
 8028ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028ed0:	4643      	mov	r3, r8
 8028ed2:	463a      	mov	r2, r7
 8028ed4:	4628      	mov	r0, r5
 8028ed6:	47b0      	blx	r6
 8028ed8:	2800      	cmp	r0, #0
 8028eda:	dc06      	bgt.n	8028eea <__sflush_r+0xfe>
 8028edc:	89a3      	ldrh	r3, [r4, #12]
 8028ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028ee2:	81a3      	strh	r3, [r4, #12]
 8028ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8028ee8:	e78e      	b.n	8028e08 <__sflush_r+0x1c>
 8028eea:	4407      	add	r7, r0
 8028eec:	eba8 0800 	sub.w	r8, r8, r0
 8028ef0:	e7e9      	b.n	8028ec6 <__sflush_r+0xda>
 8028ef2:	bf00      	nop
 8028ef4:	20400001 	.word	0x20400001

08028ef8 <_fflush_r>:
 8028ef8:	b538      	push	{r3, r4, r5, lr}
 8028efa:	690b      	ldr	r3, [r1, #16]
 8028efc:	4605      	mov	r5, r0
 8028efe:	460c      	mov	r4, r1
 8028f00:	b913      	cbnz	r3, 8028f08 <_fflush_r+0x10>
 8028f02:	2500      	movs	r5, #0
 8028f04:	4628      	mov	r0, r5
 8028f06:	bd38      	pop	{r3, r4, r5, pc}
 8028f08:	b118      	cbz	r0, 8028f12 <_fflush_r+0x1a>
 8028f0a:	6983      	ldr	r3, [r0, #24]
 8028f0c:	b90b      	cbnz	r3, 8028f12 <_fflush_r+0x1a>
 8028f0e:	f000 f887 	bl	8029020 <__sinit>
 8028f12:	4b14      	ldr	r3, [pc, #80]	; (8028f64 <_fflush_r+0x6c>)
 8028f14:	429c      	cmp	r4, r3
 8028f16:	d11b      	bne.n	8028f50 <_fflush_r+0x58>
 8028f18:	686c      	ldr	r4, [r5, #4]
 8028f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f1e:	2b00      	cmp	r3, #0
 8028f20:	d0ef      	beq.n	8028f02 <_fflush_r+0xa>
 8028f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028f24:	07d0      	lsls	r0, r2, #31
 8028f26:	d404      	bmi.n	8028f32 <_fflush_r+0x3a>
 8028f28:	0599      	lsls	r1, r3, #22
 8028f2a:	d402      	bmi.n	8028f32 <_fflush_r+0x3a>
 8028f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f2e:	f000 fc88 	bl	8029842 <__retarget_lock_acquire_recursive>
 8028f32:	4628      	mov	r0, r5
 8028f34:	4621      	mov	r1, r4
 8028f36:	f7ff ff59 	bl	8028dec <__sflush_r>
 8028f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028f3c:	07da      	lsls	r2, r3, #31
 8028f3e:	4605      	mov	r5, r0
 8028f40:	d4e0      	bmi.n	8028f04 <_fflush_r+0xc>
 8028f42:	89a3      	ldrh	r3, [r4, #12]
 8028f44:	059b      	lsls	r3, r3, #22
 8028f46:	d4dd      	bmi.n	8028f04 <_fflush_r+0xc>
 8028f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f4a:	f000 fc7c 	bl	8029846 <__retarget_lock_release_recursive>
 8028f4e:	e7d9      	b.n	8028f04 <_fflush_r+0xc>
 8028f50:	4b05      	ldr	r3, [pc, #20]	; (8028f68 <_fflush_r+0x70>)
 8028f52:	429c      	cmp	r4, r3
 8028f54:	d101      	bne.n	8028f5a <_fflush_r+0x62>
 8028f56:	68ac      	ldr	r4, [r5, #8]
 8028f58:	e7df      	b.n	8028f1a <_fflush_r+0x22>
 8028f5a:	4b04      	ldr	r3, [pc, #16]	; (8028f6c <_fflush_r+0x74>)
 8028f5c:	429c      	cmp	r4, r3
 8028f5e:	bf08      	it	eq
 8028f60:	68ec      	ldreq	r4, [r5, #12]
 8028f62:	e7da      	b.n	8028f1a <_fflush_r+0x22>
 8028f64:	0802eca8 	.word	0x0802eca8
 8028f68:	0802ecc8 	.word	0x0802ecc8
 8028f6c:	0802ec88 	.word	0x0802ec88

08028f70 <std>:
 8028f70:	2300      	movs	r3, #0
 8028f72:	b510      	push	{r4, lr}
 8028f74:	4604      	mov	r4, r0
 8028f76:	e9c0 3300 	strd	r3, r3, [r0]
 8028f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028f7e:	6083      	str	r3, [r0, #8]
 8028f80:	8181      	strh	r1, [r0, #12]
 8028f82:	6643      	str	r3, [r0, #100]	; 0x64
 8028f84:	81c2      	strh	r2, [r0, #14]
 8028f86:	6183      	str	r3, [r0, #24]
 8028f88:	4619      	mov	r1, r3
 8028f8a:	2208      	movs	r2, #8
 8028f8c:	305c      	adds	r0, #92	; 0x5c
 8028f8e:	f7fd f8b3 	bl	80260f8 <memset>
 8028f92:	4b05      	ldr	r3, [pc, #20]	; (8028fa8 <std+0x38>)
 8028f94:	6263      	str	r3, [r4, #36]	; 0x24
 8028f96:	4b05      	ldr	r3, [pc, #20]	; (8028fac <std+0x3c>)
 8028f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8028f9a:	4b05      	ldr	r3, [pc, #20]	; (8028fb0 <std+0x40>)
 8028f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028f9e:	4b05      	ldr	r3, [pc, #20]	; (8028fb4 <std+0x44>)
 8028fa0:	6224      	str	r4, [r4, #32]
 8028fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8028fa4:	bd10      	pop	{r4, pc}
 8028fa6:	bf00      	nop
 8028fa8:	0802a629 	.word	0x0802a629
 8028fac:	0802a64b 	.word	0x0802a64b
 8028fb0:	0802a683 	.word	0x0802a683
 8028fb4:	0802a6a7 	.word	0x0802a6a7

08028fb8 <_cleanup_r>:
 8028fb8:	4901      	ldr	r1, [pc, #4]	; (8028fc0 <_cleanup_r+0x8>)
 8028fba:	f000 b8af 	b.w	802911c <_fwalk_reent>
 8028fbe:	bf00      	nop
 8028fc0:	08028ef9 	.word	0x08028ef9

08028fc4 <__sfmoreglue>:
 8028fc4:	b570      	push	{r4, r5, r6, lr}
 8028fc6:	1e4a      	subs	r2, r1, #1
 8028fc8:	2568      	movs	r5, #104	; 0x68
 8028fca:	4355      	muls	r5, r2
 8028fcc:	460e      	mov	r6, r1
 8028fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028fd2:	f7fd f8e9 	bl	80261a8 <_malloc_r>
 8028fd6:	4604      	mov	r4, r0
 8028fd8:	b140      	cbz	r0, 8028fec <__sfmoreglue+0x28>
 8028fda:	2100      	movs	r1, #0
 8028fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8028fe0:	300c      	adds	r0, #12
 8028fe2:	60a0      	str	r0, [r4, #8]
 8028fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028fe8:	f7fd f886 	bl	80260f8 <memset>
 8028fec:	4620      	mov	r0, r4
 8028fee:	bd70      	pop	{r4, r5, r6, pc}

08028ff0 <__sfp_lock_acquire>:
 8028ff0:	4801      	ldr	r0, [pc, #4]	; (8028ff8 <__sfp_lock_acquire+0x8>)
 8028ff2:	f000 bc26 	b.w	8029842 <__retarget_lock_acquire_recursive>
 8028ff6:	bf00      	nop
 8028ff8:	200570fc 	.word	0x200570fc

08028ffc <__sfp_lock_release>:
 8028ffc:	4801      	ldr	r0, [pc, #4]	; (8029004 <__sfp_lock_release+0x8>)
 8028ffe:	f000 bc22 	b.w	8029846 <__retarget_lock_release_recursive>
 8029002:	bf00      	nop
 8029004:	200570fc 	.word	0x200570fc

08029008 <__sinit_lock_acquire>:
 8029008:	4801      	ldr	r0, [pc, #4]	; (8029010 <__sinit_lock_acquire+0x8>)
 802900a:	f000 bc1a 	b.w	8029842 <__retarget_lock_acquire_recursive>
 802900e:	bf00      	nop
 8029010:	200570f7 	.word	0x200570f7

08029014 <__sinit_lock_release>:
 8029014:	4801      	ldr	r0, [pc, #4]	; (802901c <__sinit_lock_release+0x8>)
 8029016:	f000 bc16 	b.w	8029846 <__retarget_lock_release_recursive>
 802901a:	bf00      	nop
 802901c:	200570f7 	.word	0x200570f7

08029020 <__sinit>:
 8029020:	b510      	push	{r4, lr}
 8029022:	4604      	mov	r4, r0
 8029024:	f7ff fff0 	bl	8029008 <__sinit_lock_acquire>
 8029028:	69a3      	ldr	r3, [r4, #24]
 802902a:	b11b      	cbz	r3, 8029034 <__sinit+0x14>
 802902c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029030:	f7ff bff0 	b.w	8029014 <__sinit_lock_release>
 8029034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029038:	6523      	str	r3, [r4, #80]	; 0x50
 802903a:	4b13      	ldr	r3, [pc, #76]	; (8029088 <__sinit+0x68>)
 802903c:	4a13      	ldr	r2, [pc, #76]	; (802908c <__sinit+0x6c>)
 802903e:	681b      	ldr	r3, [r3, #0]
 8029040:	62a2      	str	r2, [r4, #40]	; 0x28
 8029042:	42a3      	cmp	r3, r4
 8029044:	bf04      	itt	eq
 8029046:	2301      	moveq	r3, #1
 8029048:	61a3      	streq	r3, [r4, #24]
 802904a:	4620      	mov	r0, r4
 802904c:	f000 f820 	bl	8029090 <__sfp>
 8029050:	6060      	str	r0, [r4, #4]
 8029052:	4620      	mov	r0, r4
 8029054:	f000 f81c 	bl	8029090 <__sfp>
 8029058:	60a0      	str	r0, [r4, #8]
 802905a:	4620      	mov	r0, r4
 802905c:	f000 f818 	bl	8029090 <__sfp>
 8029060:	2200      	movs	r2, #0
 8029062:	60e0      	str	r0, [r4, #12]
 8029064:	2104      	movs	r1, #4
 8029066:	6860      	ldr	r0, [r4, #4]
 8029068:	f7ff ff82 	bl	8028f70 <std>
 802906c:	68a0      	ldr	r0, [r4, #8]
 802906e:	2201      	movs	r2, #1
 8029070:	2109      	movs	r1, #9
 8029072:	f7ff ff7d 	bl	8028f70 <std>
 8029076:	68e0      	ldr	r0, [r4, #12]
 8029078:	2202      	movs	r2, #2
 802907a:	2112      	movs	r1, #18
 802907c:	f7ff ff78 	bl	8028f70 <std>
 8029080:	2301      	movs	r3, #1
 8029082:	61a3      	str	r3, [r4, #24]
 8029084:	e7d2      	b.n	802902c <__sinit+0xc>
 8029086:	bf00      	nop
 8029088:	0802ea50 	.word	0x0802ea50
 802908c:	08028fb9 	.word	0x08028fb9

08029090 <__sfp>:
 8029090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029092:	4607      	mov	r7, r0
 8029094:	f7ff ffac 	bl	8028ff0 <__sfp_lock_acquire>
 8029098:	4b1e      	ldr	r3, [pc, #120]	; (8029114 <__sfp+0x84>)
 802909a:	681e      	ldr	r6, [r3, #0]
 802909c:	69b3      	ldr	r3, [r6, #24]
 802909e:	b913      	cbnz	r3, 80290a6 <__sfp+0x16>
 80290a0:	4630      	mov	r0, r6
 80290a2:	f7ff ffbd 	bl	8029020 <__sinit>
 80290a6:	3648      	adds	r6, #72	; 0x48
 80290a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80290ac:	3b01      	subs	r3, #1
 80290ae:	d503      	bpl.n	80290b8 <__sfp+0x28>
 80290b0:	6833      	ldr	r3, [r6, #0]
 80290b2:	b30b      	cbz	r3, 80290f8 <__sfp+0x68>
 80290b4:	6836      	ldr	r6, [r6, #0]
 80290b6:	e7f7      	b.n	80290a8 <__sfp+0x18>
 80290b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80290bc:	b9d5      	cbnz	r5, 80290f4 <__sfp+0x64>
 80290be:	4b16      	ldr	r3, [pc, #88]	; (8029118 <__sfp+0x88>)
 80290c0:	60e3      	str	r3, [r4, #12]
 80290c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80290c6:	6665      	str	r5, [r4, #100]	; 0x64
 80290c8:	f000 fbba 	bl	8029840 <__retarget_lock_init_recursive>
 80290cc:	f7ff ff96 	bl	8028ffc <__sfp_lock_release>
 80290d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80290d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80290d8:	6025      	str	r5, [r4, #0]
 80290da:	61a5      	str	r5, [r4, #24]
 80290dc:	2208      	movs	r2, #8
 80290de:	4629      	mov	r1, r5
 80290e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80290e4:	f7fd f808 	bl	80260f8 <memset>
 80290e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80290ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80290f0:	4620      	mov	r0, r4
 80290f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80290f4:	3468      	adds	r4, #104	; 0x68
 80290f6:	e7d9      	b.n	80290ac <__sfp+0x1c>
 80290f8:	2104      	movs	r1, #4
 80290fa:	4638      	mov	r0, r7
 80290fc:	f7ff ff62 	bl	8028fc4 <__sfmoreglue>
 8029100:	4604      	mov	r4, r0
 8029102:	6030      	str	r0, [r6, #0]
 8029104:	2800      	cmp	r0, #0
 8029106:	d1d5      	bne.n	80290b4 <__sfp+0x24>
 8029108:	f7ff ff78 	bl	8028ffc <__sfp_lock_release>
 802910c:	230c      	movs	r3, #12
 802910e:	603b      	str	r3, [r7, #0]
 8029110:	e7ee      	b.n	80290f0 <__sfp+0x60>
 8029112:	bf00      	nop
 8029114:	0802ea50 	.word	0x0802ea50
 8029118:	ffff0001 	.word	0xffff0001

0802911c <_fwalk_reent>:
 802911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029120:	4606      	mov	r6, r0
 8029122:	4688      	mov	r8, r1
 8029124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029128:	2700      	movs	r7, #0
 802912a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802912e:	f1b9 0901 	subs.w	r9, r9, #1
 8029132:	d505      	bpl.n	8029140 <_fwalk_reent+0x24>
 8029134:	6824      	ldr	r4, [r4, #0]
 8029136:	2c00      	cmp	r4, #0
 8029138:	d1f7      	bne.n	802912a <_fwalk_reent+0xe>
 802913a:	4638      	mov	r0, r7
 802913c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029140:	89ab      	ldrh	r3, [r5, #12]
 8029142:	2b01      	cmp	r3, #1
 8029144:	d907      	bls.n	8029156 <_fwalk_reent+0x3a>
 8029146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802914a:	3301      	adds	r3, #1
 802914c:	d003      	beq.n	8029156 <_fwalk_reent+0x3a>
 802914e:	4629      	mov	r1, r5
 8029150:	4630      	mov	r0, r6
 8029152:	47c0      	blx	r8
 8029154:	4307      	orrs	r7, r0
 8029156:	3568      	adds	r5, #104	; 0x68
 8029158:	e7e9      	b.n	802912e <_fwalk_reent+0x12>

0802915a <rshift>:
 802915a:	6903      	ldr	r3, [r0, #16]
 802915c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8029160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029164:	ea4f 1261 	mov.w	r2, r1, asr #5
 8029168:	f100 0414 	add.w	r4, r0, #20
 802916c:	dd45      	ble.n	80291fa <rshift+0xa0>
 802916e:	f011 011f 	ands.w	r1, r1, #31
 8029172:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8029176:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802917a:	d10c      	bne.n	8029196 <rshift+0x3c>
 802917c:	f100 0710 	add.w	r7, r0, #16
 8029180:	4629      	mov	r1, r5
 8029182:	42b1      	cmp	r1, r6
 8029184:	d334      	bcc.n	80291f0 <rshift+0x96>
 8029186:	1a9b      	subs	r3, r3, r2
 8029188:	009b      	lsls	r3, r3, #2
 802918a:	1eea      	subs	r2, r5, #3
 802918c:	4296      	cmp	r6, r2
 802918e:	bf38      	it	cc
 8029190:	2300      	movcc	r3, #0
 8029192:	4423      	add	r3, r4
 8029194:	e015      	b.n	80291c2 <rshift+0x68>
 8029196:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802919a:	f1c1 0820 	rsb	r8, r1, #32
 802919e:	40cf      	lsrs	r7, r1
 80291a0:	f105 0e04 	add.w	lr, r5, #4
 80291a4:	46a1      	mov	r9, r4
 80291a6:	4576      	cmp	r6, lr
 80291a8:	46f4      	mov	ip, lr
 80291aa:	d815      	bhi.n	80291d8 <rshift+0x7e>
 80291ac:	1a9b      	subs	r3, r3, r2
 80291ae:	009a      	lsls	r2, r3, #2
 80291b0:	3a04      	subs	r2, #4
 80291b2:	3501      	adds	r5, #1
 80291b4:	42ae      	cmp	r6, r5
 80291b6:	bf38      	it	cc
 80291b8:	2200      	movcc	r2, #0
 80291ba:	18a3      	adds	r3, r4, r2
 80291bc:	50a7      	str	r7, [r4, r2]
 80291be:	b107      	cbz	r7, 80291c2 <rshift+0x68>
 80291c0:	3304      	adds	r3, #4
 80291c2:	1b1a      	subs	r2, r3, r4
 80291c4:	42a3      	cmp	r3, r4
 80291c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80291ca:	bf08      	it	eq
 80291cc:	2300      	moveq	r3, #0
 80291ce:	6102      	str	r2, [r0, #16]
 80291d0:	bf08      	it	eq
 80291d2:	6143      	streq	r3, [r0, #20]
 80291d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80291d8:	f8dc c000 	ldr.w	ip, [ip]
 80291dc:	fa0c fc08 	lsl.w	ip, ip, r8
 80291e0:	ea4c 0707 	orr.w	r7, ip, r7
 80291e4:	f849 7b04 	str.w	r7, [r9], #4
 80291e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80291ec:	40cf      	lsrs	r7, r1
 80291ee:	e7da      	b.n	80291a6 <rshift+0x4c>
 80291f0:	f851 cb04 	ldr.w	ip, [r1], #4
 80291f4:	f847 cf04 	str.w	ip, [r7, #4]!
 80291f8:	e7c3      	b.n	8029182 <rshift+0x28>
 80291fa:	4623      	mov	r3, r4
 80291fc:	e7e1      	b.n	80291c2 <rshift+0x68>

080291fe <__hexdig_fun>:
 80291fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8029202:	2b09      	cmp	r3, #9
 8029204:	d802      	bhi.n	802920c <__hexdig_fun+0xe>
 8029206:	3820      	subs	r0, #32
 8029208:	b2c0      	uxtb	r0, r0
 802920a:	4770      	bx	lr
 802920c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8029210:	2b05      	cmp	r3, #5
 8029212:	d801      	bhi.n	8029218 <__hexdig_fun+0x1a>
 8029214:	3847      	subs	r0, #71	; 0x47
 8029216:	e7f7      	b.n	8029208 <__hexdig_fun+0xa>
 8029218:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802921c:	2b05      	cmp	r3, #5
 802921e:	d801      	bhi.n	8029224 <__hexdig_fun+0x26>
 8029220:	3827      	subs	r0, #39	; 0x27
 8029222:	e7f1      	b.n	8029208 <__hexdig_fun+0xa>
 8029224:	2000      	movs	r0, #0
 8029226:	4770      	bx	lr

08029228 <__gethex>:
 8029228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802922c:	ed2d 8b02 	vpush	{d8}
 8029230:	b089      	sub	sp, #36	; 0x24
 8029232:	ee08 0a10 	vmov	s16, r0
 8029236:	9304      	str	r3, [sp, #16]
 8029238:	4bbc      	ldr	r3, [pc, #752]	; (802952c <__gethex+0x304>)
 802923a:	681b      	ldr	r3, [r3, #0]
 802923c:	9301      	str	r3, [sp, #4]
 802923e:	4618      	mov	r0, r3
 8029240:	468b      	mov	fp, r1
 8029242:	4690      	mov	r8, r2
 8029244:	f7d6 fffc 	bl	8000240 <strlen>
 8029248:	9b01      	ldr	r3, [sp, #4]
 802924a:	f8db 2000 	ldr.w	r2, [fp]
 802924e:	4403      	add	r3, r0
 8029250:	4682      	mov	sl, r0
 8029252:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8029256:	9305      	str	r3, [sp, #20]
 8029258:	1c93      	adds	r3, r2, #2
 802925a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802925e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8029262:	32fe      	adds	r2, #254	; 0xfe
 8029264:	18d1      	adds	r1, r2, r3
 8029266:	461f      	mov	r7, r3
 8029268:	f813 0b01 	ldrb.w	r0, [r3], #1
 802926c:	9100      	str	r1, [sp, #0]
 802926e:	2830      	cmp	r0, #48	; 0x30
 8029270:	d0f8      	beq.n	8029264 <__gethex+0x3c>
 8029272:	f7ff ffc4 	bl	80291fe <__hexdig_fun>
 8029276:	4604      	mov	r4, r0
 8029278:	2800      	cmp	r0, #0
 802927a:	d13a      	bne.n	80292f2 <__gethex+0xca>
 802927c:	9901      	ldr	r1, [sp, #4]
 802927e:	4652      	mov	r2, sl
 8029280:	4638      	mov	r0, r7
 8029282:	f001 fa14 	bl	802a6ae <strncmp>
 8029286:	4605      	mov	r5, r0
 8029288:	2800      	cmp	r0, #0
 802928a:	d168      	bne.n	802935e <__gethex+0x136>
 802928c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8029290:	eb07 060a 	add.w	r6, r7, sl
 8029294:	f7ff ffb3 	bl	80291fe <__hexdig_fun>
 8029298:	2800      	cmp	r0, #0
 802929a:	d062      	beq.n	8029362 <__gethex+0x13a>
 802929c:	4633      	mov	r3, r6
 802929e:	7818      	ldrb	r0, [r3, #0]
 80292a0:	2830      	cmp	r0, #48	; 0x30
 80292a2:	461f      	mov	r7, r3
 80292a4:	f103 0301 	add.w	r3, r3, #1
 80292a8:	d0f9      	beq.n	802929e <__gethex+0x76>
 80292aa:	f7ff ffa8 	bl	80291fe <__hexdig_fun>
 80292ae:	2301      	movs	r3, #1
 80292b0:	fab0 f480 	clz	r4, r0
 80292b4:	0964      	lsrs	r4, r4, #5
 80292b6:	4635      	mov	r5, r6
 80292b8:	9300      	str	r3, [sp, #0]
 80292ba:	463a      	mov	r2, r7
 80292bc:	4616      	mov	r6, r2
 80292be:	3201      	adds	r2, #1
 80292c0:	7830      	ldrb	r0, [r6, #0]
 80292c2:	f7ff ff9c 	bl	80291fe <__hexdig_fun>
 80292c6:	2800      	cmp	r0, #0
 80292c8:	d1f8      	bne.n	80292bc <__gethex+0x94>
 80292ca:	9901      	ldr	r1, [sp, #4]
 80292cc:	4652      	mov	r2, sl
 80292ce:	4630      	mov	r0, r6
 80292d0:	f001 f9ed 	bl	802a6ae <strncmp>
 80292d4:	b980      	cbnz	r0, 80292f8 <__gethex+0xd0>
 80292d6:	b94d      	cbnz	r5, 80292ec <__gethex+0xc4>
 80292d8:	eb06 050a 	add.w	r5, r6, sl
 80292dc:	462a      	mov	r2, r5
 80292de:	4616      	mov	r6, r2
 80292e0:	3201      	adds	r2, #1
 80292e2:	7830      	ldrb	r0, [r6, #0]
 80292e4:	f7ff ff8b 	bl	80291fe <__hexdig_fun>
 80292e8:	2800      	cmp	r0, #0
 80292ea:	d1f8      	bne.n	80292de <__gethex+0xb6>
 80292ec:	1bad      	subs	r5, r5, r6
 80292ee:	00ad      	lsls	r5, r5, #2
 80292f0:	e004      	b.n	80292fc <__gethex+0xd4>
 80292f2:	2400      	movs	r4, #0
 80292f4:	4625      	mov	r5, r4
 80292f6:	e7e0      	b.n	80292ba <__gethex+0x92>
 80292f8:	2d00      	cmp	r5, #0
 80292fa:	d1f7      	bne.n	80292ec <__gethex+0xc4>
 80292fc:	7833      	ldrb	r3, [r6, #0]
 80292fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029302:	2b50      	cmp	r3, #80	; 0x50
 8029304:	d13b      	bne.n	802937e <__gethex+0x156>
 8029306:	7873      	ldrb	r3, [r6, #1]
 8029308:	2b2b      	cmp	r3, #43	; 0x2b
 802930a:	d02c      	beq.n	8029366 <__gethex+0x13e>
 802930c:	2b2d      	cmp	r3, #45	; 0x2d
 802930e:	d02e      	beq.n	802936e <__gethex+0x146>
 8029310:	1c71      	adds	r1, r6, #1
 8029312:	f04f 0900 	mov.w	r9, #0
 8029316:	7808      	ldrb	r0, [r1, #0]
 8029318:	f7ff ff71 	bl	80291fe <__hexdig_fun>
 802931c:	1e43      	subs	r3, r0, #1
 802931e:	b2db      	uxtb	r3, r3
 8029320:	2b18      	cmp	r3, #24
 8029322:	d82c      	bhi.n	802937e <__gethex+0x156>
 8029324:	f1a0 0210 	sub.w	r2, r0, #16
 8029328:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802932c:	f7ff ff67 	bl	80291fe <__hexdig_fun>
 8029330:	1e43      	subs	r3, r0, #1
 8029332:	b2db      	uxtb	r3, r3
 8029334:	2b18      	cmp	r3, #24
 8029336:	d91d      	bls.n	8029374 <__gethex+0x14c>
 8029338:	f1b9 0f00 	cmp.w	r9, #0
 802933c:	d000      	beq.n	8029340 <__gethex+0x118>
 802933e:	4252      	negs	r2, r2
 8029340:	4415      	add	r5, r2
 8029342:	f8cb 1000 	str.w	r1, [fp]
 8029346:	b1e4      	cbz	r4, 8029382 <__gethex+0x15a>
 8029348:	9b00      	ldr	r3, [sp, #0]
 802934a:	2b00      	cmp	r3, #0
 802934c:	bf14      	ite	ne
 802934e:	2700      	movne	r7, #0
 8029350:	2706      	moveq	r7, #6
 8029352:	4638      	mov	r0, r7
 8029354:	b009      	add	sp, #36	; 0x24
 8029356:	ecbd 8b02 	vpop	{d8}
 802935a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802935e:	463e      	mov	r6, r7
 8029360:	4625      	mov	r5, r4
 8029362:	2401      	movs	r4, #1
 8029364:	e7ca      	b.n	80292fc <__gethex+0xd4>
 8029366:	f04f 0900 	mov.w	r9, #0
 802936a:	1cb1      	adds	r1, r6, #2
 802936c:	e7d3      	b.n	8029316 <__gethex+0xee>
 802936e:	f04f 0901 	mov.w	r9, #1
 8029372:	e7fa      	b.n	802936a <__gethex+0x142>
 8029374:	230a      	movs	r3, #10
 8029376:	fb03 0202 	mla	r2, r3, r2, r0
 802937a:	3a10      	subs	r2, #16
 802937c:	e7d4      	b.n	8029328 <__gethex+0x100>
 802937e:	4631      	mov	r1, r6
 8029380:	e7df      	b.n	8029342 <__gethex+0x11a>
 8029382:	1bf3      	subs	r3, r6, r7
 8029384:	3b01      	subs	r3, #1
 8029386:	4621      	mov	r1, r4
 8029388:	2b07      	cmp	r3, #7
 802938a:	dc0b      	bgt.n	80293a4 <__gethex+0x17c>
 802938c:	ee18 0a10 	vmov	r0, s16
 8029390:	f000 faf6 	bl	8029980 <_Balloc>
 8029394:	4604      	mov	r4, r0
 8029396:	b940      	cbnz	r0, 80293aa <__gethex+0x182>
 8029398:	4b65      	ldr	r3, [pc, #404]	; (8029530 <__gethex+0x308>)
 802939a:	4602      	mov	r2, r0
 802939c:	21de      	movs	r1, #222	; 0xde
 802939e:	4865      	ldr	r0, [pc, #404]	; (8029534 <__gethex+0x30c>)
 80293a0:	f7fc fe1e 	bl	8025fe0 <__assert_func>
 80293a4:	3101      	adds	r1, #1
 80293a6:	105b      	asrs	r3, r3, #1
 80293a8:	e7ee      	b.n	8029388 <__gethex+0x160>
 80293aa:	f100 0914 	add.w	r9, r0, #20
 80293ae:	f04f 0b00 	mov.w	fp, #0
 80293b2:	f1ca 0301 	rsb	r3, sl, #1
 80293b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80293ba:	f8cd b000 	str.w	fp, [sp]
 80293be:	9306      	str	r3, [sp, #24]
 80293c0:	42b7      	cmp	r7, r6
 80293c2:	d340      	bcc.n	8029446 <__gethex+0x21e>
 80293c4:	9802      	ldr	r0, [sp, #8]
 80293c6:	9b00      	ldr	r3, [sp, #0]
 80293c8:	f840 3b04 	str.w	r3, [r0], #4
 80293cc:	eba0 0009 	sub.w	r0, r0, r9
 80293d0:	1080      	asrs	r0, r0, #2
 80293d2:	0146      	lsls	r6, r0, #5
 80293d4:	6120      	str	r0, [r4, #16]
 80293d6:	4618      	mov	r0, r3
 80293d8:	f000 fbc8 	bl	8029b6c <__hi0bits>
 80293dc:	1a30      	subs	r0, r6, r0
 80293de:	f8d8 6000 	ldr.w	r6, [r8]
 80293e2:	42b0      	cmp	r0, r6
 80293e4:	dd63      	ble.n	80294ae <__gethex+0x286>
 80293e6:	1b87      	subs	r7, r0, r6
 80293e8:	4639      	mov	r1, r7
 80293ea:	4620      	mov	r0, r4
 80293ec:	f000 ff63 	bl	802a2b6 <__any_on>
 80293f0:	4682      	mov	sl, r0
 80293f2:	b1a8      	cbz	r0, 8029420 <__gethex+0x1f8>
 80293f4:	1e7b      	subs	r3, r7, #1
 80293f6:	1159      	asrs	r1, r3, #5
 80293f8:	f003 021f 	and.w	r2, r3, #31
 80293fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8029400:	f04f 0a01 	mov.w	sl, #1
 8029404:	fa0a f202 	lsl.w	r2, sl, r2
 8029408:	420a      	tst	r2, r1
 802940a:	d009      	beq.n	8029420 <__gethex+0x1f8>
 802940c:	4553      	cmp	r3, sl
 802940e:	dd05      	ble.n	802941c <__gethex+0x1f4>
 8029410:	1eb9      	subs	r1, r7, #2
 8029412:	4620      	mov	r0, r4
 8029414:	f000 ff4f 	bl	802a2b6 <__any_on>
 8029418:	2800      	cmp	r0, #0
 802941a:	d145      	bne.n	80294a8 <__gethex+0x280>
 802941c:	f04f 0a02 	mov.w	sl, #2
 8029420:	4639      	mov	r1, r7
 8029422:	4620      	mov	r0, r4
 8029424:	f7ff fe99 	bl	802915a <rshift>
 8029428:	443d      	add	r5, r7
 802942a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802942e:	42ab      	cmp	r3, r5
 8029430:	da4c      	bge.n	80294cc <__gethex+0x2a4>
 8029432:	ee18 0a10 	vmov	r0, s16
 8029436:	4621      	mov	r1, r4
 8029438:	f000 fae2 	bl	8029a00 <_Bfree>
 802943c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802943e:	2300      	movs	r3, #0
 8029440:	6013      	str	r3, [r2, #0]
 8029442:	27a3      	movs	r7, #163	; 0xa3
 8029444:	e785      	b.n	8029352 <__gethex+0x12a>
 8029446:	1e73      	subs	r3, r6, #1
 8029448:	9a05      	ldr	r2, [sp, #20]
 802944a:	9303      	str	r3, [sp, #12]
 802944c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029450:	4293      	cmp	r3, r2
 8029452:	d019      	beq.n	8029488 <__gethex+0x260>
 8029454:	f1bb 0f20 	cmp.w	fp, #32
 8029458:	d107      	bne.n	802946a <__gethex+0x242>
 802945a:	9b02      	ldr	r3, [sp, #8]
 802945c:	9a00      	ldr	r2, [sp, #0]
 802945e:	f843 2b04 	str.w	r2, [r3], #4
 8029462:	9302      	str	r3, [sp, #8]
 8029464:	2300      	movs	r3, #0
 8029466:	9300      	str	r3, [sp, #0]
 8029468:	469b      	mov	fp, r3
 802946a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802946e:	f7ff fec6 	bl	80291fe <__hexdig_fun>
 8029472:	9b00      	ldr	r3, [sp, #0]
 8029474:	f000 000f 	and.w	r0, r0, #15
 8029478:	fa00 f00b 	lsl.w	r0, r0, fp
 802947c:	4303      	orrs	r3, r0
 802947e:	9300      	str	r3, [sp, #0]
 8029480:	f10b 0b04 	add.w	fp, fp, #4
 8029484:	9b03      	ldr	r3, [sp, #12]
 8029486:	e00d      	b.n	80294a4 <__gethex+0x27c>
 8029488:	9b03      	ldr	r3, [sp, #12]
 802948a:	9a06      	ldr	r2, [sp, #24]
 802948c:	4413      	add	r3, r2
 802948e:	42bb      	cmp	r3, r7
 8029490:	d3e0      	bcc.n	8029454 <__gethex+0x22c>
 8029492:	4618      	mov	r0, r3
 8029494:	9901      	ldr	r1, [sp, #4]
 8029496:	9307      	str	r3, [sp, #28]
 8029498:	4652      	mov	r2, sl
 802949a:	f001 f908 	bl	802a6ae <strncmp>
 802949e:	9b07      	ldr	r3, [sp, #28]
 80294a0:	2800      	cmp	r0, #0
 80294a2:	d1d7      	bne.n	8029454 <__gethex+0x22c>
 80294a4:	461e      	mov	r6, r3
 80294a6:	e78b      	b.n	80293c0 <__gethex+0x198>
 80294a8:	f04f 0a03 	mov.w	sl, #3
 80294ac:	e7b8      	b.n	8029420 <__gethex+0x1f8>
 80294ae:	da0a      	bge.n	80294c6 <__gethex+0x29e>
 80294b0:	1a37      	subs	r7, r6, r0
 80294b2:	4621      	mov	r1, r4
 80294b4:	ee18 0a10 	vmov	r0, s16
 80294b8:	463a      	mov	r2, r7
 80294ba:	f000 fcbd 	bl	8029e38 <__lshift>
 80294be:	1bed      	subs	r5, r5, r7
 80294c0:	4604      	mov	r4, r0
 80294c2:	f100 0914 	add.w	r9, r0, #20
 80294c6:	f04f 0a00 	mov.w	sl, #0
 80294ca:	e7ae      	b.n	802942a <__gethex+0x202>
 80294cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80294d0:	42a8      	cmp	r0, r5
 80294d2:	dd72      	ble.n	80295ba <__gethex+0x392>
 80294d4:	1b45      	subs	r5, r0, r5
 80294d6:	42ae      	cmp	r6, r5
 80294d8:	dc36      	bgt.n	8029548 <__gethex+0x320>
 80294da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80294de:	2b02      	cmp	r3, #2
 80294e0:	d02a      	beq.n	8029538 <__gethex+0x310>
 80294e2:	2b03      	cmp	r3, #3
 80294e4:	d02c      	beq.n	8029540 <__gethex+0x318>
 80294e6:	2b01      	cmp	r3, #1
 80294e8:	d115      	bne.n	8029516 <__gethex+0x2ee>
 80294ea:	42ae      	cmp	r6, r5
 80294ec:	d113      	bne.n	8029516 <__gethex+0x2ee>
 80294ee:	2e01      	cmp	r6, #1
 80294f0:	d10b      	bne.n	802950a <__gethex+0x2e2>
 80294f2:	9a04      	ldr	r2, [sp, #16]
 80294f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80294f8:	6013      	str	r3, [r2, #0]
 80294fa:	2301      	movs	r3, #1
 80294fc:	6123      	str	r3, [r4, #16]
 80294fe:	f8c9 3000 	str.w	r3, [r9]
 8029502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029504:	2762      	movs	r7, #98	; 0x62
 8029506:	601c      	str	r4, [r3, #0]
 8029508:	e723      	b.n	8029352 <__gethex+0x12a>
 802950a:	1e71      	subs	r1, r6, #1
 802950c:	4620      	mov	r0, r4
 802950e:	f000 fed2 	bl	802a2b6 <__any_on>
 8029512:	2800      	cmp	r0, #0
 8029514:	d1ed      	bne.n	80294f2 <__gethex+0x2ca>
 8029516:	ee18 0a10 	vmov	r0, s16
 802951a:	4621      	mov	r1, r4
 802951c:	f000 fa70 	bl	8029a00 <_Bfree>
 8029520:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029522:	2300      	movs	r3, #0
 8029524:	6013      	str	r3, [r2, #0]
 8029526:	2750      	movs	r7, #80	; 0x50
 8029528:	e713      	b.n	8029352 <__gethex+0x12a>
 802952a:	bf00      	nop
 802952c:	0802ed54 	.word	0x0802ed54
 8029530:	0802ec74 	.word	0x0802ec74
 8029534:	0802ece8 	.word	0x0802ece8
 8029538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802953a:	2b00      	cmp	r3, #0
 802953c:	d1eb      	bne.n	8029516 <__gethex+0x2ee>
 802953e:	e7d8      	b.n	80294f2 <__gethex+0x2ca>
 8029540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029542:	2b00      	cmp	r3, #0
 8029544:	d1d5      	bne.n	80294f2 <__gethex+0x2ca>
 8029546:	e7e6      	b.n	8029516 <__gethex+0x2ee>
 8029548:	1e6f      	subs	r7, r5, #1
 802954a:	f1ba 0f00 	cmp.w	sl, #0
 802954e:	d131      	bne.n	80295b4 <__gethex+0x38c>
 8029550:	b127      	cbz	r7, 802955c <__gethex+0x334>
 8029552:	4639      	mov	r1, r7
 8029554:	4620      	mov	r0, r4
 8029556:	f000 feae 	bl	802a2b6 <__any_on>
 802955a:	4682      	mov	sl, r0
 802955c:	117b      	asrs	r3, r7, #5
 802955e:	2101      	movs	r1, #1
 8029560:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029564:	f007 071f 	and.w	r7, r7, #31
 8029568:	fa01 f707 	lsl.w	r7, r1, r7
 802956c:	421f      	tst	r7, r3
 802956e:	4629      	mov	r1, r5
 8029570:	4620      	mov	r0, r4
 8029572:	bf18      	it	ne
 8029574:	f04a 0a02 	orrne.w	sl, sl, #2
 8029578:	1b76      	subs	r6, r6, r5
 802957a:	f7ff fdee 	bl	802915a <rshift>
 802957e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029582:	2702      	movs	r7, #2
 8029584:	f1ba 0f00 	cmp.w	sl, #0
 8029588:	d048      	beq.n	802961c <__gethex+0x3f4>
 802958a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802958e:	2b02      	cmp	r3, #2
 8029590:	d015      	beq.n	80295be <__gethex+0x396>
 8029592:	2b03      	cmp	r3, #3
 8029594:	d017      	beq.n	80295c6 <__gethex+0x39e>
 8029596:	2b01      	cmp	r3, #1
 8029598:	d109      	bne.n	80295ae <__gethex+0x386>
 802959a:	f01a 0f02 	tst.w	sl, #2
 802959e:	d006      	beq.n	80295ae <__gethex+0x386>
 80295a0:	f8d9 0000 	ldr.w	r0, [r9]
 80295a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80295a8:	f01a 0f01 	tst.w	sl, #1
 80295ac:	d10e      	bne.n	80295cc <__gethex+0x3a4>
 80295ae:	f047 0710 	orr.w	r7, r7, #16
 80295b2:	e033      	b.n	802961c <__gethex+0x3f4>
 80295b4:	f04f 0a01 	mov.w	sl, #1
 80295b8:	e7d0      	b.n	802955c <__gethex+0x334>
 80295ba:	2701      	movs	r7, #1
 80295bc:	e7e2      	b.n	8029584 <__gethex+0x35c>
 80295be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80295c0:	f1c3 0301 	rsb	r3, r3, #1
 80295c4:	9315      	str	r3, [sp, #84]	; 0x54
 80295c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80295c8:	2b00      	cmp	r3, #0
 80295ca:	d0f0      	beq.n	80295ae <__gethex+0x386>
 80295cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80295d0:	f104 0314 	add.w	r3, r4, #20
 80295d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80295d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80295dc:	f04f 0c00 	mov.w	ip, #0
 80295e0:	4618      	mov	r0, r3
 80295e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80295e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80295ea:	d01c      	beq.n	8029626 <__gethex+0x3fe>
 80295ec:	3201      	adds	r2, #1
 80295ee:	6002      	str	r2, [r0, #0]
 80295f0:	2f02      	cmp	r7, #2
 80295f2:	f104 0314 	add.w	r3, r4, #20
 80295f6:	d13f      	bne.n	8029678 <__gethex+0x450>
 80295f8:	f8d8 2000 	ldr.w	r2, [r8]
 80295fc:	3a01      	subs	r2, #1
 80295fe:	42b2      	cmp	r2, r6
 8029600:	d10a      	bne.n	8029618 <__gethex+0x3f0>
 8029602:	1171      	asrs	r1, r6, #5
 8029604:	2201      	movs	r2, #1
 8029606:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802960a:	f006 061f 	and.w	r6, r6, #31
 802960e:	fa02 f606 	lsl.w	r6, r2, r6
 8029612:	421e      	tst	r6, r3
 8029614:	bf18      	it	ne
 8029616:	4617      	movne	r7, r2
 8029618:	f047 0720 	orr.w	r7, r7, #32
 802961c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802961e:	601c      	str	r4, [r3, #0]
 8029620:	9b04      	ldr	r3, [sp, #16]
 8029622:	601d      	str	r5, [r3, #0]
 8029624:	e695      	b.n	8029352 <__gethex+0x12a>
 8029626:	4299      	cmp	r1, r3
 8029628:	f843 cc04 	str.w	ip, [r3, #-4]
 802962c:	d8d8      	bhi.n	80295e0 <__gethex+0x3b8>
 802962e:	68a3      	ldr	r3, [r4, #8]
 8029630:	459b      	cmp	fp, r3
 8029632:	db19      	blt.n	8029668 <__gethex+0x440>
 8029634:	6861      	ldr	r1, [r4, #4]
 8029636:	ee18 0a10 	vmov	r0, s16
 802963a:	3101      	adds	r1, #1
 802963c:	f000 f9a0 	bl	8029980 <_Balloc>
 8029640:	4681      	mov	r9, r0
 8029642:	b918      	cbnz	r0, 802964c <__gethex+0x424>
 8029644:	4b1a      	ldr	r3, [pc, #104]	; (80296b0 <__gethex+0x488>)
 8029646:	4602      	mov	r2, r0
 8029648:	2184      	movs	r1, #132	; 0x84
 802964a:	e6a8      	b.n	802939e <__gethex+0x176>
 802964c:	6922      	ldr	r2, [r4, #16]
 802964e:	3202      	adds	r2, #2
 8029650:	f104 010c 	add.w	r1, r4, #12
 8029654:	0092      	lsls	r2, r2, #2
 8029656:	300c      	adds	r0, #12
 8029658:	f7fc fd40 	bl	80260dc <memcpy>
 802965c:	4621      	mov	r1, r4
 802965e:	ee18 0a10 	vmov	r0, s16
 8029662:	f000 f9cd 	bl	8029a00 <_Bfree>
 8029666:	464c      	mov	r4, r9
 8029668:	6923      	ldr	r3, [r4, #16]
 802966a:	1c5a      	adds	r2, r3, #1
 802966c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8029670:	6122      	str	r2, [r4, #16]
 8029672:	2201      	movs	r2, #1
 8029674:	615a      	str	r2, [r3, #20]
 8029676:	e7bb      	b.n	80295f0 <__gethex+0x3c8>
 8029678:	6922      	ldr	r2, [r4, #16]
 802967a:	455a      	cmp	r2, fp
 802967c:	dd0b      	ble.n	8029696 <__gethex+0x46e>
 802967e:	2101      	movs	r1, #1
 8029680:	4620      	mov	r0, r4
 8029682:	f7ff fd6a 	bl	802915a <rshift>
 8029686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802968a:	3501      	adds	r5, #1
 802968c:	42ab      	cmp	r3, r5
 802968e:	f6ff aed0 	blt.w	8029432 <__gethex+0x20a>
 8029692:	2701      	movs	r7, #1
 8029694:	e7c0      	b.n	8029618 <__gethex+0x3f0>
 8029696:	f016 061f 	ands.w	r6, r6, #31
 802969a:	d0fa      	beq.n	8029692 <__gethex+0x46a>
 802969c:	449a      	add	sl, r3
 802969e:	f1c6 0620 	rsb	r6, r6, #32
 80296a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80296a6:	f000 fa61 	bl	8029b6c <__hi0bits>
 80296aa:	42b0      	cmp	r0, r6
 80296ac:	dbe7      	blt.n	802967e <__gethex+0x456>
 80296ae:	e7f0      	b.n	8029692 <__gethex+0x46a>
 80296b0:	0802ec74 	.word	0x0802ec74

080296b4 <L_shift>:
 80296b4:	f1c2 0208 	rsb	r2, r2, #8
 80296b8:	0092      	lsls	r2, r2, #2
 80296ba:	b570      	push	{r4, r5, r6, lr}
 80296bc:	f1c2 0620 	rsb	r6, r2, #32
 80296c0:	6843      	ldr	r3, [r0, #4]
 80296c2:	6804      	ldr	r4, [r0, #0]
 80296c4:	fa03 f506 	lsl.w	r5, r3, r6
 80296c8:	432c      	orrs	r4, r5
 80296ca:	40d3      	lsrs	r3, r2
 80296cc:	6004      	str	r4, [r0, #0]
 80296ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80296d2:	4288      	cmp	r0, r1
 80296d4:	d3f4      	bcc.n	80296c0 <L_shift+0xc>
 80296d6:	bd70      	pop	{r4, r5, r6, pc}

080296d8 <__match>:
 80296d8:	b530      	push	{r4, r5, lr}
 80296da:	6803      	ldr	r3, [r0, #0]
 80296dc:	3301      	adds	r3, #1
 80296de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80296e2:	b914      	cbnz	r4, 80296ea <__match+0x12>
 80296e4:	6003      	str	r3, [r0, #0]
 80296e6:	2001      	movs	r0, #1
 80296e8:	bd30      	pop	{r4, r5, pc}
 80296ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80296ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80296f2:	2d19      	cmp	r5, #25
 80296f4:	bf98      	it	ls
 80296f6:	3220      	addls	r2, #32
 80296f8:	42a2      	cmp	r2, r4
 80296fa:	d0f0      	beq.n	80296de <__match+0x6>
 80296fc:	2000      	movs	r0, #0
 80296fe:	e7f3      	b.n	80296e8 <__match+0x10>

08029700 <__hexnan>:
 8029700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029704:	680b      	ldr	r3, [r1, #0]
 8029706:	6801      	ldr	r1, [r0, #0]
 8029708:	115e      	asrs	r6, r3, #5
 802970a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802970e:	f013 031f 	ands.w	r3, r3, #31
 8029712:	b087      	sub	sp, #28
 8029714:	bf18      	it	ne
 8029716:	3604      	addne	r6, #4
 8029718:	2500      	movs	r5, #0
 802971a:	1f37      	subs	r7, r6, #4
 802971c:	4682      	mov	sl, r0
 802971e:	4690      	mov	r8, r2
 8029720:	9301      	str	r3, [sp, #4]
 8029722:	f846 5c04 	str.w	r5, [r6, #-4]
 8029726:	46b9      	mov	r9, r7
 8029728:	463c      	mov	r4, r7
 802972a:	9502      	str	r5, [sp, #8]
 802972c:	46ab      	mov	fp, r5
 802972e:	784a      	ldrb	r2, [r1, #1]
 8029730:	1c4b      	adds	r3, r1, #1
 8029732:	9303      	str	r3, [sp, #12]
 8029734:	b342      	cbz	r2, 8029788 <__hexnan+0x88>
 8029736:	4610      	mov	r0, r2
 8029738:	9105      	str	r1, [sp, #20]
 802973a:	9204      	str	r2, [sp, #16]
 802973c:	f7ff fd5f 	bl	80291fe <__hexdig_fun>
 8029740:	2800      	cmp	r0, #0
 8029742:	d14f      	bne.n	80297e4 <__hexnan+0xe4>
 8029744:	9a04      	ldr	r2, [sp, #16]
 8029746:	9905      	ldr	r1, [sp, #20]
 8029748:	2a20      	cmp	r2, #32
 802974a:	d818      	bhi.n	802977e <__hexnan+0x7e>
 802974c:	9b02      	ldr	r3, [sp, #8]
 802974e:	459b      	cmp	fp, r3
 8029750:	dd13      	ble.n	802977a <__hexnan+0x7a>
 8029752:	454c      	cmp	r4, r9
 8029754:	d206      	bcs.n	8029764 <__hexnan+0x64>
 8029756:	2d07      	cmp	r5, #7
 8029758:	dc04      	bgt.n	8029764 <__hexnan+0x64>
 802975a:	462a      	mov	r2, r5
 802975c:	4649      	mov	r1, r9
 802975e:	4620      	mov	r0, r4
 8029760:	f7ff ffa8 	bl	80296b4 <L_shift>
 8029764:	4544      	cmp	r4, r8
 8029766:	d950      	bls.n	802980a <__hexnan+0x10a>
 8029768:	2300      	movs	r3, #0
 802976a:	f1a4 0904 	sub.w	r9, r4, #4
 802976e:	f844 3c04 	str.w	r3, [r4, #-4]
 8029772:	f8cd b008 	str.w	fp, [sp, #8]
 8029776:	464c      	mov	r4, r9
 8029778:	461d      	mov	r5, r3
 802977a:	9903      	ldr	r1, [sp, #12]
 802977c:	e7d7      	b.n	802972e <__hexnan+0x2e>
 802977e:	2a29      	cmp	r2, #41	; 0x29
 8029780:	d156      	bne.n	8029830 <__hexnan+0x130>
 8029782:	3102      	adds	r1, #2
 8029784:	f8ca 1000 	str.w	r1, [sl]
 8029788:	f1bb 0f00 	cmp.w	fp, #0
 802978c:	d050      	beq.n	8029830 <__hexnan+0x130>
 802978e:	454c      	cmp	r4, r9
 8029790:	d206      	bcs.n	80297a0 <__hexnan+0xa0>
 8029792:	2d07      	cmp	r5, #7
 8029794:	dc04      	bgt.n	80297a0 <__hexnan+0xa0>
 8029796:	462a      	mov	r2, r5
 8029798:	4649      	mov	r1, r9
 802979a:	4620      	mov	r0, r4
 802979c:	f7ff ff8a 	bl	80296b4 <L_shift>
 80297a0:	4544      	cmp	r4, r8
 80297a2:	d934      	bls.n	802980e <__hexnan+0x10e>
 80297a4:	f1a8 0204 	sub.w	r2, r8, #4
 80297a8:	4623      	mov	r3, r4
 80297aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80297ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80297b2:	429f      	cmp	r7, r3
 80297b4:	d2f9      	bcs.n	80297aa <__hexnan+0xaa>
 80297b6:	1b3b      	subs	r3, r7, r4
 80297b8:	f023 0303 	bic.w	r3, r3, #3
 80297bc:	3304      	adds	r3, #4
 80297be:	3401      	adds	r4, #1
 80297c0:	3e03      	subs	r6, #3
 80297c2:	42b4      	cmp	r4, r6
 80297c4:	bf88      	it	hi
 80297c6:	2304      	movhi	r3, #4
 80297c8:	4443      	add	r3, r8
 80297ca:	2200      	movs	r2, #0
 80297cc:	f843 2b04 	str.w	r2, [r3], #4
 80297d0:	429f      	cmp	r7, r3
 80297d2:	d2fb      	bcs.n	80297cc <__hexnan+0xcc>
 80297d4:	683b      	ldr	r3, [r7, #0]
 80297d6:	b91b      	cbnz	r3, 80297e0 <__hexnan+0xe0>
 80297d8:	4547      	cmp	r7, r8
 80297da:	d127      	bne.n	802982c <__hexnan+0x12c>
 80297dc:	2301      	movs	r3, #1
 80297de:	603b      	str	r3, [r7, #0]
 80297e0:	2005      	movs	r0, #5
 80297e2:	e026      	b.n	8029832 <__hexnan+0x132>
 80297e4:	3501      	adds	r5, #1
 80297e6:	2d08      	cmp	r5, #8
 80297e8:	f10b 0b01 	add.w	fp, fp, #1
 80297ec:	dd06      	ble.n	80297fc <__hexnan+0xfc>
 80297ee:	4544      	cmp	r4, r8
 80297f0:	d9c3      	bls.n	802977a <__hexnan+0x7a>
 80297f2:	2300      	movs	r3, #0
 80297f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80297f8:	2501      	movs	r5, #1
 80297fa:	3c04      	subs	r4, #4
 80297fc:	6822      	ldr	r2, [r4, #0]
 80297fe:	f000 000f 	and.w	r0, r0, #15
 8029802:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8029806:	6022      	str	r2, [r4, #0]
 8029808:	e7b7      	b.n	802977a <__hexnan+0x7a>
 802980a:	2508      	movs	r5, #8
 802980c:	e7b5      	b.n	802977a <__hexnan+0x7a>
 802980e:	9b01      	ldr	r3, [sp, #4]
 8029810:	2b00      	cmp	r3, #0
 8029812:	d0df      	beq.n	80297d4 <__hexnan+0xd4>
 8029814:	f04f 32ff 	mov.w	r2, #4294967295
 8029818:	f1c3 0320 	rsb	r3, r3, #32
 802981c:	fa22 f303 	lsr.w	r3, r2, r3
 8029820:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8029824:	401a      	ands	r2, r3
 8029826:	f846 2c04 	str.w	r2, [r6, #-4]
 802982a:	e7d3      	b.n	80297d4 <__hexnan+0xd4>
 802982c:	3f04      	subs	r7, #4
 802982e:	e7d1      	b.n	80297d4 <__hexnan+0xd4>
 8029830:	2004      	movs	r0, #4
 8029832:	b007      	add	sp, #28
 8029834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029838 <_localeconv_r>:
 8029838:	4800      	ldr	r0, [pc, #0]	; (802983c <_localeconv_r+0x4>)
 802983a:	4770      	bx	lr
 802983c:	200001d8 	.word	0x200001d8

08029840 <__retarget_lock_init_recursive>:
 8029840:	4770      	bx	lr

08029842 <__retarget_lock_acquire_recursive>:
 8029842:	4770      	bx	lr

08029844 <__retarget_lock_release>:
 8029844:	4770      	bx	lr

08029846 <__retarget_lock_release_recursive>:
 8029846:	4770      	bx	lr

08029848 <__swhatbuf_r>:
 8029848:	b570      	push	{r4, r5, r6, lr}
 802984a:	460e      	mov	r6, r1
 802984c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029850:	2900      	cmp	r1, #0
 8029852:	b096      	sub	sp, #88	; 0x58
 8029854:	4614      	mov	r4, r2
 8029856:	461d      	mov	r5, r3
 8029858:	da07      	bge.n	802986a <__swhatbuf_r+0x22>
 802985a:	2300      	movs	r3, #0
 802985c:	602b      	str	r3, [r5, #0]
 802985e:	89b3      	ldrh	r3, [r6, #12]
 8029860:	061a      	lsls	r2, r3, #24
 8029862:	d410      	bmi.n	8029886 <__swhatbuf_r+0x3e>
 8029864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029868:	e00e      	b.n	8029888 <__swhatbuf_r+0x40>
 802986a:	466a      	mov	r2, sp
 802986c:	f000 ff60 	bl	802a730 <_fstat_r>
 8029870:	2800      	cmp	r0, #0
 8029872:	dbf2      	blt.n	802985a <__swhatbuf_r+0x12>
 8029874:	9a01      	ldr	r2, [sp, #4]
 8029876:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802987a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802987e:	425a      	negs	r2, r3
 8029880:	415a      	adcs	r2, r3
 8029882:	602a      	str	r2, [r5, #0]
 8029884:	e7ee      	b.n	8029864 <__swhatbuf_r+0x1c>
 8029886:	2340      	movs	r3, #64	; 0x40
 8029888:	2000      	movs	r0, #0
 802988a:	6023      	str	r3, [r4, #0]
 802988c:	b016      	add	sp, #88	; 0x58
 802988e:	bd70      	pop	{r4, r5, r6, pc}

08029890 <__smakebuf_r>:
 8029890:	898b      	ldrh	r3, [r1, #12]
 8029892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029894:	079d      	lsls	r5, r3, #30
 8029896:	4606      	mov	r6, r0
 8029898:	460c      	mov	r4, r1
 802989a:	d507      	bpl.n	80298ac <__smakebuf_r+0x1c>
 802989c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80298a0:	6023      	str	r3, [r4, #0]
 80298a2:	6123      	str	r3, [r4, #16]
 80298a4:	2301      	movs	r3, #1
 80298a6:	6163      	str	r3, [r4, #20]
 80298a8:	b002      	add	sp, #8
 80298aa:	bd70      	pop	{r4, r5, r6, pc}
 80298ac:	ab01      	add	r3, sp, #4
 80298ae:	466a      	mov	r2, sp
 80298b0:	f7ff ffca 	bl	8029848 <__swhatbuf_r>
 80298b4:	9900      	ldr	r1, [sp, #0]
 80298b6:	4605      	mov	r5, r0
 80298b8:	4630      	mov	r0, r6
 80298ba:	f7fc fc75 	bl	80261a8 <_malloc_r>
 80298be:	b948      	cbnz	r0, 80298d4 <__smakebuf_r+0x44>
 80298c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80298c4:	059a      	lsls	r2, r3, #22
 80298c6:	d4ef      	bmi.n	80298a8 <__smakebuf_r+0x18>
 80298c8:	f023 0303 	bic.w	r3, r3, #3
 80298cc:	f043 0302 	orr.w	r3, r3, #2
 80298d0:	81a3      	strh	r3, [r4, #12]
 80298d2:	e7e3      	b.n	802989c <__smakebuf_r+0xc>
 80298d4:	4b0d      	ldr	r3, [pc, #52]	; (802990c <__smakebuf_r+0x7c>)
 80298d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80298d8:	89a3      	ldrh	r3, [r4, #12]
 80298da:	6020      	str	r0, [r4, #0]
 80298dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80298e0:	81a3      	strh	r3, [r4, #12]
 80298e2:	9b00      	ldr	r3, [sp, #0]
 80298e4:	6163      	str	r3, [r4, #20]
 80298e6:	9b01      	ldr	r3, [sp, #4]
 80298e8:	6120      	str	r0, [r4, #16]
 80298ea:	b15b      	cbz	r3, 8029904 <__smakebuf_r+0x74>
 80298ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80298f0:	4630      	mov	r0, r6
 80298f2:	f000 ff2f 	bl	802a754 <_isatty_r>
 80298f6:	b128      	cbz	r0, 8029904 <__smakebuf_r+0x74>
 80298f8:	89a3      	ldrh	r3, [r4, #12]
 80298fa:	f023 0303 	bic.w	r3, r3, #3
 80298fe:	f043 0301 	orr.w	r3, r3, #1
 8029902:	81a3      	strh	r3, [r4, #12]
 8029904:	89a0      	ldrh	r0, [r4, #12]
 8029906:	4305      	orrs	r5, r0
 8029908:	81a5      	strh	r5, [r4, #12]
 802990a:	e7cd      	b.n	80298a8 <__smakebuf_r+0x18>
 802990c:	08028fb9 	.word	0x08028fb9

08029910 <__ascii_mbtowc>:
 8029910:	b082      	sub	sp, #8
 8029912:	b901      	cbnz	r1, 8029916 <__ascii_mbtowc+0x6>
 8029914:	a901      	add	r1, sp, #4
 8029916:	b142      	cbz	r2, 802992a <__ascii_mbtowc+0x1a>
 8029918:	b14b      	cbz	r3, 802992e <__ascii_mbtowc+0x1e>
 802991a:	7813      	ldrb	r3, [r2, #0]
 802991c:	600b      	str	r3, [r1, #0]
 802991e:	7812      	ldrb	r2, [r2, #0]
 8029920:	1e10      	subs	r0, r2, #0
 8029922:	bf18      	it	ne
 8029924:	2001      	movne	r0, #1
 8029926:	b002      	add	sp, #8
 8029928:	4770      	bx	lr
 802992a:	4610      	mov	r0, r2
 802992c:	e7fb      	b.n	8029926 <__ascii_mbtowc+0x16>
 802992e:	f06f 0001 	mvn.w	r0, #1
 8029932:	e7f8      	b.n	8029926 <__ascii_mbtowc+0x16>

08029934 <memmove>:
 8029934:	4288      	cmp	r0, r1
 8029936:	b510      	push	{r4, lr}
 8029938:	eb01 0402 	add.w	r4, r1, r2
 802993c:	d902      	bls.n	8029944 <memmove+0x10>
 802993e:	4284      	cmp	r4, r0
 8029940:	4623      	mov	r3, r4
 8029942:	d807      	bhi.n	8029954 <memmove+0x20>
 8029944:	1e43      	subs	r3, r0, #1
 8029946:	42a1      	cmp	r1, r4
 8029948:	d008      	beq.n	802995c <memmove+0x28>
 802994a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802994e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029952:	e7f8      	b.n	8029946 <memmove+0x12>
 8029954:	4402      	add	r2, r0
 8029956:	4601      	mov	r1, r0
 8029958:	428a      	cmp	r2, r1
 802995a:	d100      	bne.n	802995e <memmove+0x2a>
 802995c:	bd10      	pop	{r4, pc}
 802995e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029966:	e7f7      	b.n	8029958 <memmove+0x24>

08029968 <__malloc_lock>:
 8029968:	4801      	ldr	r0, [pc, #4]	; (8029970 <__malloc_lock+0x8>)
 802996a:	f7ff bf6a 	b.w	8029842 <__retarget_lock_acquire_recursive>
 802996e:	bf00      	nop
 8029970:	200570f8 	.word	0x200570f8

08029974 <__malloc_unlock>:
 8029974:	4801      	ldr	r0, [pc, #4]	; (802997c <__malloc_unlock+0x8>)
 8029976:	f7ff bf66 	b.w	8029846 <__retarget_lock_release_recursive>
 802997a:	bf00      	nop
 802997c:	200570f8 	.word	0x200570f8

08029980 <_Balloc>:
 8029980:	b570      	push	{r4, r5, r6, lr}
 8029982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029984:	4604      	mov	r4, r0
 8029986:	460d      	mov	r5, r1
 8029988:	b976      	cbnz	r6, 80299a8 <_Balloc+0x28>
 802998a:	2010      	movs	r0, #16
 802998c:	f7fc fb96 	bl	80260bc <malloc>
 8029990:	4602      	mov	r2, r0
 8029992:	6260      	str	r0, [r4, #36]	; 0x24
 8029994:	b920      	cbnz	r0, 80299a0 <_Balloc+0x20>
 8029996:	4b18      	ldr	r3, [pc, #96]	; (80299f8 <_Balloc+0x78>)
 8029998:	4818      	ldr	r0, [pc, #96]	; (80299fc <_Balloc+0x7c>)
 802999a:	2166      	movs	r1, #102	; 0x66
 802999c:	f7fc fb20 	bl	8025fe0 <__assert_func>
 80299a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80299a4:	6006      	str	r6, [r0, #0]
 80299a6:	60c6      	str	r6, [r0, #12]
 80299a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80299aa:	68f3      	ldr	r3, [r6, #12]
 80299ac:	b183      	cbz	r3, 80299d0 <_Balloc+0x50>
 80299ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80299b0:	68db      	ldr	r3, [r3, #12]
 80299b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80299b6:	b9b8      	cbnz	r0, 80299e8 <_Balloc+0x68>
 80299b8:	2101      	movs	r1, #1
 80299ba:	fa01 f605 	lsl.w	r6, r1, r5
 80299be:	1d72      	adds	r2, r6, #5
 80299c0:	0092      	lsls	r2, r2, #2
 80299c2:	4620      	mov	r0, r4
 80299c4:	f000 fc98 	bl	802a2f8 <_calloc_r>
 80299c8:	b160      	cbz	r0, 80299e4 <_Balloc+0x64>
 80299ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80299ce:	e00e      	b.n	80299ee <_Balloc+0x6e>
 80299d0:	2221      	movs	r2, #33	; 0x21
 80299d2:	2104      	movs	r1, #4
 80299d4:	4620      	mov	r0, r4
 80299d6:	f000 fc8f 	bl	802a2f8 <_calloc_r>
 80299da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80299dc:	60f0      	str	r0, [r6, #12]
 80299de:	68db      	ldr	r3, [r3, #12]
 80299e0:	2b00      	cmp	r3, #0
 80299e2:	d1e4      	bne.n	80299ae <_Balloc+0x2e>
 80299e4:	2000      	movs	r0, #0
 80299e6:	bd70      	pop	{r4, r5, r6, pc}
 80299e8:	6802      	ldr	r2, [r0, #0]
 80299ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80299ee:	2300      	movs	r3, #0
 80299f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80299f4:	e7f7      	b.n	80299e6 <_Balloc+0x66>
 80299f6:	bf00      	nop
 80299f8:	0802ebfe 	.word	0x0802ebfe
 80299fc:	0802ed68 	.word	0x0802ed68

08029a00 <_Bfree>:
 8029a00:	b570      	push	{r4, r5, r6, lr}
 8029a02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029a04:	4605      	mov	r5, r0
 8029a06:	460c      	mov	r4, r1
 8029a08:	b976      	cbnz	r6, 8029a28 <_Bfree+0x28>
 8029a0a:	2010      	movs	r0, #16
 8029a0c:	f7fc fb56 	bl	80260bc <malloc>
 8029a10:	4602      	mov	r2, r0
 8029a12:	6268      	str	r0, [r5, #36]	; 0x24
 8029a14:	b920      	cbnz	r0, 8029a20 <_Bfree+0x20>
 8029a16:	4b09      	ldr	r3, [pc, #36]	; (8029a3c <_Bfree+0x3c>)
 8029a18:	4809      	ldr	r0, [pc, #36]	; (8029a40 <_Bfree+0x40>)
 8029a1a:	218a      	movs	r1, #138	; 0x8a
 8029a1c:	f7fc fae0 	bl	8025fe0 <__assert_func>
 8029a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029a24:	6006      	str	r6, [r0, #0]
 8029a26:	60c6      	str	r6, [r0, #12]
 8029a28:	b13c      	cbz	r4, 8029a3a <_Bfree+0x3a>
 8029a2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8029a2c:	6862      	ldr	r2, [r4, #4]
 8029a2e:	68db      	ldr	r3, [r3, #12]
 8029a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029a34:	6021      	str	r1, [r4, #0]
 8029a36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8029a3a:	bd70      	pop	{r4, r5, r6, pc}
 8029a3c:	0802ebfe 	.word	0x0802ebfe
 8029a40:	0802ed68 	.word	0x0802ed68

08029a44 <__multadd>:
 8029a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029a48:	690e      	ldr	r6, [r1, #16]
 8029a4a:	4607      	mov	r7, r0
 8029a4c:	4698      	mov	r8, r3
 8029a4e:	460c      	mov	r4, r1
 8029a50:	f101 0014 	add.w	r0, r1, #20
 8029a54:	2300      	movs	r3, #0
 8029a56:	6805      	ldr	r5, [r0, #0]
 8029a58:	b2a9      	uxth	r1, r5
 8029a5a:	fb02 8101 	mla	r1, r2, r1, r8
 8029a5e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8029a62:	0c2d      	lsrs	r5, r5, #16
 8029a64:	fb02 c505 	mla	r5, r2, r5, ip
 8029a68:	b289      	uxth	r1, r1
 8029a6a:	3301      	adds	r3, #1
 8029a6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8029a70:	429e      	cmp	r6, r3
 8029a72:	f840 1b04 	str.w	r1, [r0], #4
 8029a76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8029a7a:	dcec      	bgt.n	8029a56 <__multadd+0x12>
 8029a7c:	f1b8 0f00 	cmp.w	r8, #0
 8029a80:	d022      	beq.n	8029ac8 <__multadd+0x84>
 8029a82:	68a3      	ldr	r3, [r4, #8]
 8029a84:	42b3      	cmp	r3, r6
 8029a86:	dc19      	bgt.n	8029abc <__multadd+0x78>
 8029a88:	6861      	ldr	r1, [r4, #4]
 8029a8a:	4638      	mov	r0, r7
 8029a8c:	3101      	adds	r1, #1
 8029a8e:	f7ff ff77 	bl	8029980 <_Balloc>
 8029a92:	4605      	mov	r5, r0
 8029a94:	b928      	cbnz	r0, 8029aa2 <__multadd+0x5e>
 8029a96:	4602      	mov	r2, r0
 8029a98:	4b0d      	ldr	r3, [pc, #52]	; (8029ad0 <__multadd+0x8c>)
 8029a9a:	480e      	ldr	r0, [pc, #56]	; (8029ad4 <__multadd+0x90>)
 8029a9c:	21b5      	movs	r1, #181	; 0xb5
 8029a9e:	f7fc fa9f 	bl	8025fe0 <__assert_func>
 8029aa2:	6922      	ldr	r2, [r4, #16]
 8029aa4:	3202      	adds	r2, #2
 8029aa6:	f104 010c 	add.w	r1, r4, #12
 8029aaa:	0092      	lsls	r2, r2, #2
 8029aac:	300c      	adds	r0, #12
 8029aae:	f7fc fb15 	bl	80260dc <memcpy>
 8029ab2:	4621      	mov	r1, r4
 8029ab4:	4638      	mov	r0, r7
 8029ab6:	f7ff ffa3 	bl	8029a00 <_Bfree>
 8029aba:	462c      	mov	r4, r5
 8029abc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8029ac0:	3601      	adds	r6, #1
 8029ac2:	f8c3 8014 	str.w	r8, [r3, #20]
 8029ac6:	6126      	str	r6, [r4, #16]
 8029ac8:	4620      	mov	r0, r4
 8029aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029ace:	bf00      	nop
 8029ad0:	0802ec74 	.word	0x0802ec74
 8029ad4:	0802ed68 	.word	0x0802ed68

08029ad8 <__s2b>:
 8029ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029adc:	460c      	mov	r4, r1
 8029ade:	4615      	mov	r5, r2
 8029ae0:	461f      	mov	r7, r3
 8029ae2:	2209      	movs	r2, #9
 8029ae4:	3308      	adds	r3, #8
 8029ae6:	4606      	mov	r6, r0
 8029ae8:	fb93 f3f2 	sdiv	r3, r3, r2
 8029aec:	2100      	movs	r1, #0
 8029aee:	2201      	movs	r2, #1
 8029af0:	429a      	cmp	r2, r3
 8029af2:	db09      	blt.n	8029b08 <__s2b+0x30>
 8029af4:	4630      	mov	r0, r6
 8029af6:	f7ff ff43 	bl	8029980 <_Balloc>
 8029afa:	b940      	cbnz	r0, 8029b0e <__s2b+0x36>
 8029afc:	4602      	mov	r2, r0
 8029afe:	4b19      	ldr	r3, [pc, #100]	; (8029b64 <__s2b+0x8c>)
 8029b00:	4819      	ldr	r0, [pc, #100]	; (8029b68 <__s2b+0x90>)
 8029b02:	21ce      	movs	r1, #206	; 0xce
 8029b04:	f7fc fa6c 	bl	8025fe0 <__assert_func>
 8029b08:	0052      	lsls	r2, r2, #1
 8029b0a:	3101      	adds	r1, #1
 8029b0c:	e7f0      	b.n	8029af0 <__s2b+0x18>
 8029b0e:	9b08      	ldr	r3, [sp, #32]
 8029b10:	6143      	str	r3, [r0, #20]
 8029b12:	2d09      	cmp	r5, #9
 8029b14:	f04f 0301 	mov.w	r3, #1
 8029b18:	6103      	str	r3, [r0, #16]
 8029b1a:	dd16      	ble.n	8029b4a <__s2b+0x72>
 8029b1c:	f104 0909 	add.w	r9, r4, #9
 8029b20:	46c8      	mov	r8, r9
 8029b22:	442c      	add	r4, r5
 8029b24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8029b28:	4601      	mov	r1, r0
 8029b2a:	3b30      	subs	r3, #48	; 0x30
 8029b2c:	220a      	movs	r2, #10
 8029b2e:	4630      	mov	r0, r6
 8029b30:	f7ff ff88 	bl	8029a44 <__multadd>
 8029b34:	45a0      	cmp	r8, r4
 8029b36:	d1f5      	bne.n	8029b24 <__s2b+0x4c>
 8029b38:	f1a5 0408 	sub.w	r4, r5, #8
 8029b3c:	444c      	add	r4, r9
 8029b3e:	1b2d      	subs	r5, r5, r4
 8029b40:	1963      	adds	r3, r4, r5
 8029b42:	42bb      	cmp	r3, r7
 8029b44:	db04      	blt.n	8029b50 <__s2b+0x78>
 8029b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029b4a:	340a      	adds	r4, #10
 8029b4c:	2509      	movs	r5, #9
 8029b4e:	e7f6      	b.n	8029b3e <__s2b+0x66>
 8029b50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8029b54:	4601      	mov	r1, r0
 8029b56:	3b30      	subs	r3, #48	; 0x30
 8029b58:	220a      	movs	r2, #10
 8029b5a:	4630      	mov	r0, r6
 8029b5c:	f7ff ff72 	bl	8029a44 <__multadd>
 8029b60:	e7ee      	b.n	8029b40 <__s2b+0x68>
 8029b62:	bf00      	nop
 8029b64:	0802ec74 	.word	0x0802ec74
 8029b68:	0802ed68 	.word	0x0802ed68

08029b6c <__hi0bits>:
 8029b6c:	0c03      	lsrs	r3, r0, #16
 8029b6e:	041b      	lsls	r3, r3, #16
 8029b70:	b9d3      	cbnz	r3, 8029ba8 <__hi0bits+0x3c>
 8029b72:	0400      	lsls	r0, r0, #16
 8029b74:	2310      	movs	r3, #16
 8029b76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8029b7a:	bf04      	itt	eq
 8029b7c:	0200      	lsleq	r0, r0, #8
 8029b7e:	3308      	addeq	r3, #8
 8029b80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8029b84:	bf04      	itt	eq
 8029b86:	0100      	lsleq	r0, r0, #4
 8029b88:	3304      	addeq	r3, #4
 8029b8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8029b8e:	bf04      	itt	eq
 8029b90:	0080      	lsleq	r0, r0, #2
 8029b92:	3302      	addeq	r3, #2
 8029b94:	2800      	cmp	r0, #0
 8029b96:	db05      	blt.n	8029ba4 <__hi0bits+0x38>
 8029b98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8029b9c:	f103 0301 	add.w	r3, r3, #1
 8029ba0:	bf08      	it	eq
 8029ba2:	2320      	moveq	r3, #32
 8029ba4:	4618      	mov	r0, r3
 8029ba6:	4770      	bx	lr
 8029ba8:	2300      	movs	r3, #0
 8029baa:	e7e4      	b.n	8029b76 <__hi0bits+0xa>

08029bac <__lo0bits>:
 8029bac:	6803      	ldr	r3, [r0, #0]
 8029bae:	f013 0207 	ands.w	r2, r3, #7
 8029bb2:	4601      	mov	r1, r0
 8029bb4:	d00b      	beq.n	8029bce <__lo0bits+0x22>
 8029bb6:	07da      	lsls	r2, r3, #31
 8029bb8:	d424      	bmi.n	8029c04 <__lo0bits+0x58>
 8029bba:	0798      	lsls	r0, r3, #30
 8029bbc:	bf49      	itett	mi
 8029bbe:	085b      	lsrmi	r3, r3, #1
 8029bc0:	089b      	lsrpl	r3, r3, #2
 8029bc2:	2001      	movmi	r0, #1
 8029bc4:	600b      	strmi	r3, [r1, #0]
 8029bc6:	bf5c      	itt	pl
 8029bc8:	600b      	strpl	r3, [r1, #0]
 8029bca:	2002      	movpl	r0, #2
 8029bcc:	4770      	bx	lr
 8029bce:	b298      	uxth	r0, r3
 8029bd0:	b9b0      	cbnz	r0, 8029c00 <__lo0bits+0x54>
 8029bd2:	0c1b      	lsrs	r3, r3, #16
 8029bd4:	2010      	movs	r0, #16
 8029bd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8029bda:	bf04      	itt	eq
 8029bdc:	0a1b      	lsreq	r3, r3, #8
 8029bde:	3008      	addeq	r0, #8
 8029be0:	071a      	lsls	r2, r3, #28
 8029be2:	bf04      	itt	eq
 8029be4:	091b      	lsreq	r3, r3, #4
 8029be6:	3004      	addeq	r0, #4
 8029be8:	079a      	lsls	r2, r3, #30
 8029bea:	bf04      	itt	eq
 8029bec:	089b      	lsreq	r3, r3, #2
 8029bee:	3002      	addeq	r0, #2
 8029bf0:	07da      	lsls	r2, r3, #31
 8029bf2:	d403      	bmi.n	8029bfc <__lo0bits+0x50>
 8029bf4:	085b      	lsrs	r3, r3, #1
 8029bf6:	f100 0001 	add.w	r0, r0, #1
 8029bfa:	d005      	beq.n	8029c08 <__lo0bits+0x5c>
 8029bfc:	600b      	str	r3, [r1, #0]
 8029bfe:	4770      	bx	lr
 8029c00:	4610      	mov	r0, r2
 8029c02:	e7e8      	b.n	8029bd6 <__lo0bits+0x2a>
 8029c04:	2000      	movs	r0, #0
 8029c06:	4770      	bx	lr
 8029c08:	2020      	movs	r0, #32
 8029c0a:	4770      	bx	lr

08029c0c <__i2b>:
 8029c0c:	b510      	push	{r4, lr}
 8029c0e:	460c      	mov	r4, r1
 8029c10:	2101      	movs	r1, #1
 8029c12:	f7ff feb5 	bl	8029980 <_Balloc>
 8029c16:	4602      	mov	r2, r0
 8029c18:	b928      	cbnz	r0, 8029c26 <__i2b+0x1a>
 8029c1a:	4b05      	ldr	r3, [pc, #20]	; (8029c30 <__i2b+0x24>)
 8029c1c:	4805      	ldr	r0, [pc, #20]	; (8029c34 <__i2b+0x28>)
 8029c1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8029c22:	f7fc f9dd 	bl	8025fe0 <__assert_func>
 8029c26:	2301      	movs	r3, #1
 8029c28:	6144      	str	r4, [r0, #20]
 8029c2a:	6103      	str	r3, [r0, #16]
 8029c2c:	bd10      	pop	{r4, pc}
 8029c2e:	bf00      	nop
 8029c30:	0802ec74 	.word	0x0802ec74
 8029c34:	0802ed68 	.word	0x0802ed68

08029c38 <__multiply>:
 8029c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c3c:	4614      	mov	r4, r2
 8029c3e:	690a      	ldr	r2, [r1, #16]
 8029c40:	6923      	ldr	r3, [r4, #16]
 8029c42:	429a      	cmp	r2, r3
 8029c44:	bfb8      	it	lt
 8029c46:	460b      	movlt	r3, r1
 8029c48:	460d      	mov	r5, r1
 8029c4a:	bfbc      	itt	lt
 8029c4c:	4625      	movlt	r5, r4
 8029c4e:	461c      	movlt	r4, r3
 8029c50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8029c54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029c58:	68ab      	ldr	r3, [r5, #8]
 8029c5a:	6869      	ldr	r1, [r5, #4]
 8029c5c:	eb0a 0709 	add.w	r7, sl, r9
 8029c60:	42bb      	cmp	r3, r7
 8029c62:	b085      	sub	sp, #20
 8029c64:	bfb8      	it	lt
 8029c66:	3101      	addlt	r1, #1
 8029c68:	f7ff fe8a 	bl	8029980 <_Balloc>
 8029c6c:	b930      	cbnz	r0, 8029c7c <__multiply+0x44>
 8029c6e:	4602      	mov	r2, r0
 8029c70:	4b42      	ldr	r3, [pc, #264]	; (8029d7c <__multiply+0x144>)
 8029c72:	4843      	ldr	r0, [pc, #268]	; (8029d80 <__multiply+0x148>)
 8029c74:	f240 115d 	movw	r1, #349	; 0x15d
 8029c78:	f7fc f9b2 	bl	8025fe0 <__assert_func>
 8029c7c:	f100 0614 	add.w	r6, r0, #20
 8029c80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8029c84:	4633      	mov	r3, r6
 8029c86:	2200      	movs	r2, #0
 8029c88:	4543      	cmp	r3, r8
 8029c8a:	d31e      	bcc.n	8029cca <__multiply+0x92>
 8029c8c:	f105 0c14 	add.w	ip, r5, #20
 8029c90:	f104 0314 	add.w	r3, r4, #20
 8029c94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8029c98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8029c9c:	9202      	str	r2, [sp, #8]
 8029c9e:	ebac 0205 	sub.w	r2, ip, r5
 8029ca2:	3a15      	subs	r2, #21
 8029ca4:	f022 0203 	bic.w	r2, r2, #3
 8029ca8:	3204      	adds	r2, #4
 8029caa:	f105 0115 	add.w	r1, r5, #21
 8029cae:	458c      	cmp	ip, r1
 8029cb0:	bf38      	it	cc
 8029cb2:	2204      	movcc	r2, #4
 8029cb4:	9201      	str	r2, [sp, #4]
 8029cb6:	9a02      	ldr	r2, [sp, #8]
 8029cb8:	9303      	str	r3, [sp, #12]
 8029cba:	429a      	cmp	r2, r3
 8029cbc:	d808      	bhi.n	8029cd0 <__multiply+0x98>
 8029cbe:	2f00      	cmp	r7, #0
 8029cc0:	dc55      	bgt.n	8029d6e <__multiply+0x136>
 8029cc2:	6107      	str	r7, [r0, #16]
 8029cc4:	b005      	add	sp, #20
 8029cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029cca:	f843 2b04 	str.w	r2, [r3], #4
 8029cce:	e7db      	b.n	8029c88 <__multiply+0x50>
 8029cd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8029cd4:	f1ba 0f00 	cmp.w	sl, #0
 8029cd8:	d020      	beq.n	8029d1c <__multiply+0xe4>
 8029cda:	f105 0e14 	add.w	lr, r5, #20
 8029cde:	46b1      	mov	r9, r6
 8029ce0:	2200      	movs	r2, #0
 8029ce2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8029ce6:	f8d9 b000 	ldr.w	fp, [r9]
 8029cea:	b2a1      	uxth	r1, r4
 8029cec:	fa1f fb8b 	uxth.w	fp, fp
 8029cf0:	fb0a b101 	mla	r1, sl, r1, fp
 8029cf4:	4411      	add	r1, r2
 8029cf6:	f8d9 2000 	ldr.w	r2, [r9]
 8029cfa:	0c24      	lsrs	r4, r4, #16
 8029cfc:	0c12      	lsrs	r2, r2, #16
 8029cfe:	fb0a 2404 	mla	r4, sl, r4, r2
 8029d02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8029d06:	b289      	uxth	r1, r1
 8029d08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8029d0c:	45f4      	cmp	ip, lr
 8029d0e:	f849 1b04 	str.w	r1, [r9], #4
 8029d12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8029d16:	d8e4      	bhi.n	8029ce2 <__multiply+0xaa>
 8029d18:	9901      	ldr	r1, [sp, #4]
 8029d1a:	5072      	str	r2, [r6, r1]
 8029d1c:	9a03      	ldr	r2, [sp, #12]
 8029d1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8029d22:	3304      	adds	r3, #4
 8029d24:	f1b9 0f00 	cmp.w	r9, #0
 8029d28:	d01f      	beq.n	8029d6a <__multiply+0x132>
 8029d2a:	6834      	ldr	r4, [r6, #0]
 8029d2c:	f105 0114 	add.w	r1, r5, #20
 8029d30:	46b6      	mov	lr, r6
 8029d32:	f04f 0a00 	mov.w	sl, #0
 8029d36:	880a      	ldrh	r2, [r1, #0]
 8029d38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8029d3c:	fb09 b202 	mla	r2, r9, r2, fp
 8029d40:	4492      	add	sl, r2
 8029d42:	b2a4      	uxth	r4, r4
 8029d44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8029d48:	f84e 4b04 	str.w	r4, [lr], #4
 8029d4c:	f851 4b04 	ldr.w	r4, [r1], #4
 8029d50:	f8be 2000 	ldrh.w	r2, [lr]
 8029d54:	0c24      	lsrs	r4, r4, #16
 8029d56:	fb09 2404 	mla	r4, r9, r4, r2
 8029d5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8029d5e:	458c      	cmp	ip, r1
 8029d60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8029d64:	d8e7      	bhi.n	8029d36 <__multiply+0xfe>
 8029d66:	9a01      	ldr	r2, [sp, #4]
 8029d68:	50b4      	str	r4, [r6, r2]
 8029d6a:	3604      	adds	r6, #4
 8029d6c:	e7a3      	b.n	8029cb6 <__multiply+0x7e>
 8029d6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8029d72:	2b00      	cmp	r3, #0
 8029d74:	d1a5      	bne.n	8029cc2 <__multiply+0x8a>
 8029d76:	3f01      	subs	r7, #1
 8029d78:	e7a1      	b.n	8029cbe <__multiply+0x86>
 8029d7a:	bf00      	nop
 8029d7c:	0802ec74 	.word	0x0802ec74
 8029d80:	0802ed68 	.word	0x0802ed68

08029d84 <__pow5mult>:
 8029d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029d88:	4615      	mov	r5, r2
 8029d8a:	f012 0203 	ands.w	r2, r2, #3
 8029d8e:	4606      	mov	r6, r0
 8029d90:	460f      	mov	r7, r1
 8029d92:	d007      	beq.n	8029da4 <__pow5mult+0x20>
 8029d94:	4c25      	ldr	r4, [pc, #148]	; (8029e2c <__pow5mult+0xa8>)
 8029d96:	3a01      	subs	r2, #1
 8029d98:	2300      	movs	r3, #0
 8029d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8029d9e:	f7ff fe51 	bl	8029a44 <__multadd>
 8029da2:	4607      	mov	r7, r0
 8029da4:	10ad      	asrs	r5, r5, #2
 8029da6:	d03d      	beq.n	8029e24 <__pow5mult+0xa0>
 8029da8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8029daa:	b97c      	cbnz	r4, 8029dcc <__pow5mult+0x48>
 8029dac:	2010      	movs	r0, #16
 8029dae:	f7fc f985 	bl	80260bc <malloc>
 8029db2:	4602      	mov	r2, r0
 8029db4:	6270      	str	r0, [r6, #36]	; 0x24
 8029db6:	b928      	cbnz	r0, 8029dc4 <__pow5mult+0x40>
 8029db8:	4b1d      	ldr	r3, [pc, #116]	; (8029e30 <__pow5mult+0xac>)
 8029dba:	481e      	ldr	r0, [pc, #120]	; (8029e34 <__pow5mult+0xb0>)
 8029dbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8029dc0:	f7fc f90e 	bl	8025fe0 <__assert_func>
 8029dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8029dc8:	6004      	str	r4, [r0, #0]
 8029dca:	60c4      	str	r4, [r0, #12]
 8029dcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8029dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8029dd4:	b94c      	cbnz	r4, 8029dea <__pow5mult+0x66>
 8029dd6:	f240 2171 	movw	r1, #625	; 0x271
 8029dda:	4630      	mov	r0, r6
 8029ddc:	f7ff ff16 	bl	8029c0c <__i2b>
 8029de0:	2300      	movs	r3, #0
 8029de2:	f8c8 0008 	str.w	r0, [r8, #8]
 8029de6:	4604      	mov	r4, r0
 8029de8:	6003      	str	r3, [r0, #0]
 8029dea:	f04f 0900 	mov.w	r9, #0
 8029dee:	07eb      	lsls	r3, r5, #31
 8029df0:	d50a      	bpl.n	8029e08 <__pow5mult+0x84>
 8029df2:	4639      	mov	r1, r7
 8029df4:	4622      	mov	r2, r4
 8029df6:	4630      	mov	r0, r6
 8029df8:	f7ff ff1e 	bl	8029c38 <__multiply>
 8029dfc:	4639      	mov	r1, r7
 8029dfe:	4680      	mov	r8, r0
 8029e00:	4630      	mov	r0, r6
 8029e02:	f7ff fdfd 	bl	8029a00 <_Bfree>
 8029e06:	4647      	mov	r7, r8
 8029e08:	106d      	asrs	r5, r5, #1
 8029e0a:	d00b      	beq.n	8029e24 <__pow5mult+0xa0>
 8029e0c:	6820      	ldr	r0, [r4, #0]
 8029e0e:	b938      	cbnz	r0, 8029e20 <__pow5mult+0x9c>
 8029e10:	4622      	mov	r2, r4
 8029e12:	4621      	mov	r1, r4
 8029e14:	4630      	mov	r0, r6
 8029e16:	f7ff ff0f 	bl	8029c38 <__multiply>
 8029e1a:	6020      	str	r0, [r4, #0]
 8029e1c:	f8c0 9000 	str.w	r9, [r0]
 8029e20:	4604      	mov	r4, r0
 8029e22:	e7e4      	b.n	8029dee <__pow5mult+0x6a>
 8029e24:	4638      	mov	r0, r7
 8029e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029e2a:	bf00      	nop
 8029e2c:	0802eeb8 	.word	0x0802eeb8
 8029e30:	0802ebfe 	.word	0x0802ebfe
 8029e34:	0802ed68 	.word	0x0802ed68

08029e38 <__lshift>:
 8029e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029e3c:	460c      	mov	r4, r1
 8029e3e:	6849      	ldr	r1, [r1, #4]
 8029e40:	6923      	ldr	r3, [r4, #16]
 8029e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8029e46:	68a3      	ldr	r3, [r4, #8]
 8029e48:	4607      	mov	r7, r0
 8029e4a:	4691      	mov	r9, r2
 8029e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8029e50:	f108 0601 	add.w	r6, r8, #1
 8029e54:	42b3      	cmp	r3, r6
 8029e56:	db0b      	blt.n	8029e70 <__lshift+0x38>
 8029e58:	4638      	mov	r0, r7
 8029e5a:	f7ff fd91 	bl	8029980 <_Balloc>
 8029e5e:	4605      	mov	r5, r0
 8029e60:	b948      	cbnz	r0, 8029e76 <__lshift+0x3e>
 8029e62:	4602      	mov	r2, r0
 8029e64:	4b28      	ldr	r3, [pc, #160]	; (8029f08 <__lshift+0xd0>)
 8029e66:	4829      	ldr	r0, [pc, #164]	; (8029f0c <__lshift+0xd4>)
 8029e68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8029e6c:	f7fc f8b8 	bl	8025fe0 <__assert_func>
 8029e70:	3101      	adds	r1, #1
 8029e72:	005b      	lsls	r3, r3, #1
 8029e74:	e7ee      	b.n	8029e54 <__lshift+0x1c>
 8029e76:	2300      	movs	r3, #0
 8029e78:	f100 0114 	add.w	r1, r0, #20
 8029e7c:	f100 0210 	add.w	r2, r0, #16
 8029e80:	4618      	mov	r0, r3
 8029e82:	4553      	cmp	r3, sl
 8029e84:	db33      	blt.n	8029eee <__lshift+0xb6>
 8029e86:	6920      	ldr	r0, [r4, #16]
 8029e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8029e8c:	f104 0314 	add.w	r3, r4, #20
 8029e90:	f019 091f 	ands.w	r9, r9, #31
 8029e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8029e98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8029e9c:	d02b      	beq.n	8029ef6 <__lshift+0xbe>
 8029e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8029ea2:	468a      	mov	sl, r1
 8029ea4:	2200      	movs	r2, #0
 8029ea6:	6818      	ldr	r0, [r3, #0]
 8029ea8:	fa00 f009 	lsl.w	r0, r0, r9
 8029eac:	4302      	orrs	r2, r0
 8029eae:	f84a 2b04 	str.w	r2, [sl], #4
 8029eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8029eb6:	459c      	cmp	ip, r3
 8029eb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8029ebc:	d8f3      	bhi.n	8029ea6 <__lshift+0x6e>
 8029ebe:	ebac 0304 	sub.w	r3, ip, r4
 8029ec2:	3b15      	subs	r3, #21
 8029ec4:	f023 0303 	bic.w	r3, r3, #3
 8029ec8:	3304      	adds	r3, #4
 8029eca:	f104 0015 	add.w	r0, r4, #21
 8029ece:	4584      	cmp	ip, r0
 8029ed0:	bf38      	it	cc
 8029ed2:	2304      	movcc	r3, #4
 8029ed4:	50ca      	str	r2, [r1, r3]
 8029ed6:	b10a      	cbz	r2, 8029edc <__lshift+0xa4>
 8029ed8:	f108 0602 	add.w	r6, r8, #2
 8029edc:	3e01      	subs	r6, #1
 8029ede:	4638      	mov	r0, r7
 8029ee0:	612e      	str	r6, [r5, #16]
 8029ee2:	4621      	mov	r1, r4
 8029ee4:	f7ff fd8c 	bl	8029a00 <_Bfree>
 8029ee8:	4628      	mov	r0, r5
 8029eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029eee:	f842 0f04 	str.w	r0, [r2, #4]!
 8029ef2:	3301      	adds	r3, #1
 8029ef4:	e7c5      	b.n	8029e82 <__lshift+0x4a>
 8029ef6:	3904      	subs	r1, #4
 8029ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8029efc:	f841 2f04 	str.w	r2, [r1, #4]!
 8029f00:	459c      	cmp	ip, r3
 8029f02:	d8f9      	bhi.n	8029ef8 <__lshift+0xc0>
 8029f04:	e7ea      	b.n	8029edc <__lshift+0xa4>
 8029f06:	bf00      	nop
 8029f08:	0802ec74 	.word	0x0802ec74
 8029f0c:	0802ed68 	.word	0x0802ed68

08029f10 <__mcmp>:
 8029f10:	b530      	push	{r4, r5, lr}
 8029f12:	6902      	ldr	r2, [r0, #16]
 8029f14:	690c      	ldr	r4, [r1, #16]
 8029f16:	1b12      	subs	r2, r2, r4
 8029f18:	d10e      	bne.n	8029f38 <__mcmp+0x28>
 8029f1a:	f100 0314 	add.w	r3, r0, #20
 8029f1e:	3114      	adds	r1, #20
 8029f20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8029f24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8029f28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8029f2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8029f30:	42a5      	cmp	r5, r4
 8029f32:	d003      	beq.n	8029f3c <__mcmp+0x2c>
 8029f34:	d305      	bcc.n	8029f42 <__mcmp+0x32>
 8029f36:	2201      	movs	r2, #1
 8029f38:	4610      	mov	r0, r2
 8029f3a:	bd30      	pop	{r4, r5, pc}
 8029f3c:	4283      	cmp	r3, r0
 8029f3e:	d3f3      	bcc.n	8029f28 <__mcmp+0x18>
 8029f40:	e7fa      	b.n	8029f38 <__mcmp+0x28>
 8029f42:	f04f 32ff 	mov.w	r2, #4294967295
 8029f46:	e7f7      	b.n	8029f38 <__mcmp+0x28>

08029f48 <__mdiff>:
 8029f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f4c:	460c      	mov	r4, r1
 8029f4e:	4606      	mov	r6, r0
 8029f50:	4611      	mov	r1, r2
 8029f52:	4620      	mov	r0, r4
 8029f54:	4617      	mov	r7, r2
 8029f56:	f7ff ffdb 	bl	8029f10 <__mcmp>
 8029f5a:	1e05      	subs	r5, r0, #0
 8029f5c:	d110      	bne.n	8029f80 <__mdiff+0x38>
 8029f5e:	4629      	mov	r1, r5
 8029f60:	4630      	mov	r0, r6
 8029f62:	f7ff fd0d 	bl	8029980 <_Balloc>
 8029f66:	b930      	cbnz	r0, 8029f76 <__mdiff+0x2e>
 8029f68:	4b39      	ldr	r3, [pc, #228]	; (802a050 <__mdiff+0x108>)
 8029f6a:	4602      	mov	r2, r0
 8029f6c:	f240 2132 	movw	r1, #562	; 0x232
 8029f70:	4838      	ldr	r0, [pc, #224]	; (802a054 <__mdiff+0x10c>)
 8029f72:	f7fc f835 	bl	8025fe0 <__assert_func>
 8029f76:	2301      	movs	r3, #1
 8029f78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8029f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f80:	bfa4      	itt	ge
 8029f82:	463b      	movge	r3, r7
 8029f84:	4627      	movge	r7, r4
 8029f86:	4630      	mov	r0, r6
 8029f88:	6879      	ldr	r1, [r7, #4]
 8029f8a:	bfa6      	itte	ge
 8029f8c:	461c      	movge	r4, r3
 8029f8e:	2500      	movge	r5, #0
 8029f90:	2501      	movlt	r5, #1
 8029f92:	f7ff fcf5 	bl	8029980 <_Balloc>
 8029f96:	b920      	cbnz	r0, 8029fa2 <__mdiff+0x5a>
 8029f98:	4b2d      	ldr	r3, [pc, #180]	; (802a050 <__mdiff+0x108>)
 8029f9a:	4602      	mov	r2, r0
 8029f9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8029fa0:	e7e6      	b.n	8029f70 <__mdiff+0x28>
 8029fa2:	693e      	ldr	r6, [r7, #16]
 8029fa4:	60c5      	str	r5, [r0, #12]
 8029fa6:	6925      	ldr	r5, [r4, #16]
 8029fa8:	f107 0114 	add.w	r1, r7, #20
 8029fac:	f104 0914 	add.w	r9, r4, #20
 8029fb0:	f100 0e14 	add.w	lr, r0, #20
 8029fb4:	f107 0210 	add.w	r2, r7, #16
 8029fb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8029fbc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8029fc0:	46f2      	mov	sl, lr
 8029fc2:	2700      	movs	r7, #0
 8029fc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8029fc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8029fcc:	fa1f f883 	uxth.w	r8, r3
 8029fd0:	fa17 f78b 	uxtah	r7, r7, fp
 8029fd4:	0c1b      	lsrs	r3, r3, #16
 8029fd6:	eba7 0808 	sub.w	r8, r7, r8
 8029fda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8029fde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8029fe2:	fa1f f888 	uxth.w	r8, r8
 8029fe6:	141f      	asrs	r7, r3, #16
 8029fe8:	454d      	cmp	r5, r9
 8029fea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8029fee:	f84a 3b04 	str.w	r3, [sl], #4
 8029ff2:	d8e7      	bhi.n	8029fc4 <__mdiff+0x7c>
 8029ff4:	1b2b      	subs	r3, r5, r4
 8029ff6:	3b15      	subs	r3, #21
 8029ff8:	f023 0303 	bic.w	r3, r3, #3
 8029ffc:	3304      	adds	r3, #4
 8029ffe:	3415      	adds	r4, #21
 802a000:	42a5      	cmp	r5, r4
 802a002:	bf38      	it	cc
 802a004:	2304      	movcc	r3, #4
 802a006:	4419      	add	r1, r3
 802a008:	4473      	add	r3, lr
 802a00a:	469e      	mov	lr, r3
 802a00c:	460d      	mov	r5, r1
 802a00e:	4565      	cmp	r5, ip
 802a010:	d30e      	bcc.n	802a030 <__mdiff+0xe8>
 802a012:	f10c 0203 	add.w	r2, ip, #3
 802a016:	1a52      	subs	r2, r2, r1
 802a018:	f022 0203 	bic.w	r2, r2, #3
 802a01c:	3903      	subs	r1, #3
 802a01e:	458c      	cmp	ip, r1
 802a020:	bf38      	it	cc
 802a022:	2200      	movcc	r2, #0
 802a024:	441a      	add	r2, r3
 802a026:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802a02a:	b17b      	cbz	r3, 802a04c <__mdiff+0x104>
 802a02c:	6106      	str	r6, [r0, #16]
 802a02e:	e7a5      	b.n	8029f7c <__mdiff+0x34>
 802a030:	f855 8b04 	ldr.w	r8, [r5], #4
 802a034:	fa17 f488 	uxtah	r4, r7, r8
 802a038:	1422      	asrs	r2, r4, #16
 802a03a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802a03e:	b2a4      	uxth	r4, r4
 802a040:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802a044:	f84e 4b04 	str.w	r4, [lr], #4
 802a048:	1417      	asrs	r7, r2, #16
 802a04a:	e7e0      	b.n	802a00e <__mdiff+0xc6>
 802a04c:	3e01      	subs	r6, #1
 802a04e:	e7ea      	b.n	802a026 <__mdiff+0xde>
 802a050:	0802ec74 	.word	0x0802ec74
 802a054:	0802ed68 	.word	0x0802ed68

0802a058 <__ulp>:
 802a058:	b082      	sub	sp, #8
 802a05a:	ed8d 0b00 	vstr	d0, [sp]
 802a05e:	9b01      	ldr	r3, [sp, #4]
 802a060:	4912      	ldr	r1, [pc, #72]	; (802a0ac <__ulp+0x54>)
 802a062:	4019      	ands	r1, r3
 802a064:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802a068:	2900      	cmp	r1, #0
 802a06a:	dd05      	ble.n	802a078 <__ulp+0x20>
 802a06c:	2200      	movs	r2, #0
 802a06e:	460b      	mov	r3, r1
 802a070:	ec43 2b10 	vmov	d0, r2, r3
 802a074:	b002      	add	sp, #8
 802a076:	4770      	bx	lr
 802a078:	4249      	negs	r1, r1
 802a07a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802a07e:	ea4f 5021 	mov.w	r0, r1, asr #20
 802a082:	f04f 0200 	mov.w	r2, #0
 802a086:	f04f 0300 	mov.w	r3, #0
 802a08a:	da04      	bge.n	802a096 <__ulp+0x3e>
 802a08c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802a090:	fa41 f300 	asr.w	r3, r1, r0
 802a094:	e7ec      	b.n	802a070 <__ulp+0x18>
 802a096:	f1a0 0114 	sub.w	r1, r0, #20
 802a09a:	291e      	cmp	r1, #30
 802a09c:	bfda      	itte	le
 802a09e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802a0a2:	fa20 f101 	lsrle.w	r1, r0, r1
 802a0a6:	2101      	movgt	r1, #1
 802a0a8:	460a      	mov	r2, r1
 802a0aa:	e7e1      	b.n	802a070 <__ulp+0x18>
 802a0ac:	7ff00000 	.word	0x7ff00000

0802a0b0 <__b2d>:
 802a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a0b2:	6905      	ldr	r5, [r0, #16]
 802a0b4:	f100 0714 	add.w	r7, r0, #20
 802a0b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802a0bc:	1f2e      	subs	r6, r5, #4
 802a0be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802a0c2:	4620      	mov	r0, r4
 802a0c4:	f7ff fd52 	bl	8029b6c <__hi0bits>
 802a0c8:	f1c0 0320 	rsb	r3, r0, #32
 802a0cc:	280a      	cmp	r0, #10
 802a0ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802a14c <__b2d+0x9c>
 802a0d2:	600b      	str	r3, [r1, #0]
 802a0d4:	dc14      	bgt.n	802a100 <__b2d+0x50>
 802a0d6:	f1c0 0e0b 	rsb	lr, r0, #11
 802a0da:	fa24 f10e 	lsr.w	r1, r4, lr
 802a0de:	42b7      	cmp	r7, r6
 802a0e0:	ea41 030c 	orr.w	r3, r1, ip
 802a0e4:	bf34      	ite	cc
 802a0e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a0ea:	2100      	movcs	r1, #0
 802a0ec:	3015      	adds	r0, #21
 802a0ee:	fa04 f000 	lsl.w	r0, r4, r0
 802a0f2:	fa21 f10e 	lsr.w	r1, r1, lr
 802a0f6:	ea40 0201 	orr.w	r2, r0, r1
 802a0fa:	ec43 2b10 	vmov	d0, r2, r3
 802a0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a100:	42b7      	cmp	r7, r6
 802a102:	bf3a      	itte	cc
 802a104:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a108:	f1a5 0608 	subcc.w	r6, r5, #8
 802a10c:	2100      	movcs	r1, #0
 802a10e:	380b      	subs	r0, #11
 802a110:	d017      	beq.n	802a142 <__b2d+0x92>
 802a112:	f1c0 0c20 	rsb	ip, r0, #32
 802a116:	fa04 f500 	lsl.w	r5, r4, r0
 802a11a:	42be      	cmp	r6, r7
 802a11c:	fa21 f40c 	lsr.w	r4, r1, ip
 802a120:	ea45 0504 	orr.w	r5, r5, r4
 802a124:	bf8c      	ite	hi
 802a126:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802a12a:	2400      	movls	r4, #0
 802a12c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802a130:	fa01 f000 	lsl.w	r0, r1, r0
 802a134:	fa24 f40c 	lsr.w	r4, r4, ip
 802a138:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802a13c:	ea40 0204 	orr.w	r2, r0, r4
 802a140:	e7db      	b.n	802a0fa <__b2d+0x4a>
 802a142:	ea44 030c 	orr.w	r3, r4, ip
 802a146:	460a      	mov	r2, r1
 802a148:	e7d7      	b.n	802a0fa <__b2d+0x4a>
 802a14a:	bf00      	nop
 802a14c:	3ff00000 	.word	0x3ff00000

0802a150 <__d2b>:
 802a150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802a154:	4689      	mov	r9, r1
 802a156:	2101      	movs	r1, #1
 802a158:	ec57 6b10 	vmov	r6, r7, d0
 802a15c:	4690      	mov	r8, r2
 802a15e:	f7ff fc0f 	bl	8029980 <_Balloc>
 802a162:	4604      	mov	r4, r0
 802a164:	b930      	cbnz	r0, 802a174 <__d2b+0x24>
 802a166:	4602      	mov	r2, r0
 802a168:	4b25      	ldr	r3, [pc, #148]	; (802a200 <__d2b+0xb0>)
 802a16a:	4826      	ldr	r0, [pc, #152]	; (802a204 <__d2b+0xb4>)
 802a16c:	f240 310a 	movw	r1, #778	; 0x30a
 802a170:	f7fb ff36 	bl	8025fe0 <__assert_func>
 802a174:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802a178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802a17c:	bb35      	cbnz	r5, 802a1cc <__d2b+0x7c>
 802a17e:	2e00      	cmp	r6, #0
 802a180:	9301      	str	r3, [sp, #4]
 802a182:	d028      	beq.n	802a1d6 <__d2b+0x86>
 802a184:	4668      	mov	r0, sp
 802a186:	9600      	str	r6, [sp, #0]
 802a188:	f7ff fd10 	bl	8029bac <__lo0bits>
 802a18c:	9900      	ldr	r1, [sp, #0]
 802a18e:	b300      	cbz	r0, 802a1d2 <__d2b+0x82>
 802a190:	9a01      	ldr	r2, [sp, #4]
 802a192:	f1c0 0320 	rsb	r3, r0, #32
 802a196:	fa02 f303 	lsl.w	r3, r2, r3
 802a19a:	430b      	orrs	r3, r1
 802a19c:	40c2      	lsrs	r2, r0
 802a19e:	6163      	str	r3, [r4, #20]
 802a1a0:	9201      	str	r2, [sp, #4]
 802a1a2:	9b01      	ldr	r3, [sp, #4]
 802a1a4:	61a3      	str	r3, [r4, #24]
 802a1a6:	2b00      	cmp	r3, #0
 802a1a8:	bf14      	ite	ne
 802a1aa:	2202      	movne	r2, #2
 802a1ac:	2201      	moveq	r2, #1
 802a1ae:	6122      	str	r2, [r4, #16]
 802a1b0:	b1d5      	cbz	r5, 802a1e8 <__d2b+0x98>
 802a1b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802a1b6:	4405      	add	r5, r0
 802a1b8:	f8c9 5000 	str.w	r5, [r9]
 802a1bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802a1c0:	f8c8 0000 	str.w	r0, [r8]
 802a1c4:	4620      	mov	r0, r4
 802a1c6:	b003      	add	sp, #12
 802a1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a1cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802a1d0:	e7d5      	b.n	802a17e <__d2b+0x2e>
 802a1d2:	6161      	str	r1, [r4, #20]
 802a1d4:	e7e5      	b.n	802a1a2 <__d2b+0x52>
 802a1d6:	a801      	add	r0, sp, #4
 802a1d8:	f7ff fce8 	bl	8029bac <__lo0bits>
 802a1dc:	9b01      	ldr	r3, [sp, #4]
 802a1de:	6163      	str	r3, [r4, #20]
 802a1e0:	2201      	movs	r2, #1
 802a1e2:	6122      	str	r2, [r4, #16]
 802a1e4:	3020      	adds	r0, #32
 802a1e6:	e7e3      	b.n	802a1b0 <__d2b+0x60>
 802a1e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802a1ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802a1f0:	f8c9 0000 	str.w	r0, [r9]
 802a1f4:	6918      	ldr	r0, [r3, #16]
 802a1f6:	f7ff fcb9 	bl	8029b6c <__hi0bits>
 802a1fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802a1fe:	e7df      	b.n	802a1c0 <__d2b+0x70>
 802a200:	0802ec74 	.word	0x0802ec74
 802a204:	0802ed68 	.word	0x0802ed68

0802a208 <__ratio>:
 802a208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a20c:	468a      	mov	sl, r1
 802a20e:	4669      	mov	r1, sp
 802a210:	4683      	mov	fp, r0
 802a212:	f7ff ff4d 	bl	802a0b0 <__b2d>
 802a216:	a901      	add	r1, sp, #4
 802a218:	4650      	mov	r0, sl
 802a21a:	ec59 8b10 	vmov	r8, r9, d0
 802a21e:	ee10 6a10 	vmov	r6, s0
 802a222:	f7ff ff45 	bl	802a0b0 <__b2d>
 802a226:	f8db 3010 	ldr.w	r3, [fp, #16]
 802a22a:	f8da 2010 	ldr.w	r2, [sl, #16]
 802a22e:	eba3 0c02 	sub.w	ip, r3, r2
 802a232:	e9dd 3200 	ldrd	r3, r2, [sp]
 802a236:	1a9b      	subs	r3, r3, r2
 802a238:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802a23c:	ec55 4b10 	vmov	r4, r5, d0
 802a240:	2b00      	cmp	r3, #0
 802a242:	ee10 0a10 	vmov	r0, s0
 802a246:	bfce      	itee	gt
 802a248:	464a      	movgt	r2, r9
 802a24a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802a24e:	462a      	movle	r2, r5
 802a250:	464f      	mov	r7, r9
 802a252:	4629      	mov	r1, r5
 802a254:	bfcc      	ite	gt
 802a256:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802a25a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 802a25e:	ec47 6b17 	vmov	d7, r6, r7
 802a262:	ec41 0b16 	vmov	d6, r0, r1
 802a266:	ee87 0b06 	vdiv.f64	d0, d7, d6
 802a26a:	b003      	add	sp, #12
 802a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a270 <__copybits>:
 802a270:	3901      	subs	r1, #1
 802a272:	b570      	push	{r4, r5, r6, lr}
 802a274:	1149      	asrs	r1, r1, #5
 802a276:	6914      	ldr	r4, [r2, #16]
 802a278:	3101      	adds	r1, #1
 802a27a:	f102 0314 	add.w	r3, r2, #20
 802a27e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802a282:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802a286:	1f05      	subs	r5, r0, #4
 802a288:	42a3      	cmp	r3, r4
 802a28a:	d30c      	bcc.n	802a2a6 <__copybits+0x36>
 802a28c:	1aa3      	subs	r3, r4, r2
 802a28e:	3b11      	subs	r3, #17
 802a290:	f023 0303 	bic.w	r3, r3, #3
 802a294:	3211      	adds	r2, #17
 802a296:	42a2      	cmp	r2, r4
 802a298:	bf88      	it	hi
 802a29a:	2300      	movhi	r3, #0
 802a29c:	4418      	add	r0, r3
 802a29e:	2300      	movs	r3, #0
 802a2a0:	4288      	cmp	r0, r1
 802a2a2:	d305      	bcc.n	802a2b0 <__copybits+0x40>
 802a2a4:	bd70      	pop	{r4, r5, r6, pc}
 802a2a6:	f853 6b04 	ldr.w	r6, [r3], #4
 802a2aa:	f845 6f04 	str.w	r6, [r5, #4]!
 802a2ae:	e7eb      	b.n	802a288 <__copybits+0x18>
 802a2b0:	f840 3b04 	str.w	r3, [r0], #4
 802a2b4:	e7f4      	b.n	802a2a0 <__copybits+0x30>

0802a2b6 <__any_on>:
 802a2b6:	f100 0214 	add.w	r2, r0, #20
 802a2ba:	6900      	ldr	r0, [r0, #16]
 802a2bc:	114b      	asrs	r3, r1, #5
 802a2be:	4298      	cmp	r0, r3
 802a2c0:	b510      	push	{r4, lr}
 802a2c2:	db11      	blt.n	802a2e8 <__any_on+0x32>
 802a2c4:	dd0a      	ble.n	802a2dc <__any_on+0x26>
 802a2c6:	f011 011f 	ands.w	r1, r1, #31
 802a2ca:	d007      	beq.n	802a2dc <__any_on+0x26>
 802a2cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802a2d0:	fa24 f001 	lsr.w	r0, r4, r1
 802a2d4:	fa00 f101 	lsl.w	r1, r0, r1
 802a2d8:	428c      	cmp	r4, r1
 802a2da:	d10b      	bne.n	802a2f4 <__any_on+0x3e>
 802a2dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a2e0:	4293      	cmp	r3, r2
 802a2e2:	d803      	bhi.n	802a2ec <__any_on+0x36>
 802a2e4:	2000      	movs	r0, #0
 802a2e6:	bd10      	pop	{r4, pc}
 802a2e8:	4603      	mov	r3, r0
 802a2ea:	e7f7      	b.n	802a2dc <__any_on+0x26>
 802a2ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802a2f0:	2900      	cmp	r1, #0
 802a2f2:	d0f5      	beq.n	802a2e0 <__any_on+0x2a>
 802a2f4:	2001      	movs	r0, #1
 802a2f6:	e7f6      	b.n	802a2e6 <__any_on+0x30>

0802a2f8 <_calloc_r>:
 802a2f8:	b513      	push	{r0, r1, r4, lr}
 802a2fa:	434a      	muls	r2, r1
 802a2fc:	4611      	mov	r1, r2
 802a2fe:	9201      	str	r2, [sp, #4]
 802a300:	f7fb ff52 	bl	80261a8 <_malloc_r>
 802a304:	4604      	mov	r4, r0
 802a306:	b118      	cbz	r0, 802a310 <_calloc_r+0x18>
 802a308:	9a01      	ldr	r2, [sp, #4]
 802a30a:	2100      	movs	r1, #0
 802a30c:	f7fb fef4 	bl	80260f8 <memset>
 802a310:	4620      	mov	r0, r4
 802a312:	b002      	add	sp, #8
 802a314:	bd10      	pop	{r4, pc}

0802a316 <_realloc_r>:
 802a316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a318:	4607      	mov	r7, r0
 802a31a:	4614      	mov	r4, r2
 802a31c:	460e      	mov	r6, r1
 802a31e:	b921      	cbnz	r1, 802a32a <_realloc_r+0x14>
 802a320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802a324:	4611      	mov	r1, r2
 802a326:	f7fb bf3f 	b.w	80261a8 <_malloc_r>
 802a32a:	b922      	cbnz	r2, 802a336 <_realloc_r+0x20>
 802a32c:	f7fb feec 	bl	8026108 <_free_r>
 802a330:	4625      	mov	r5, r4
 802a332:	4628      	mov	r0, r5
 802a334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a336:	f000 fa2f 	bl	802a798 <_malloc_usable_size_r>
 802a33a:	42a0      	cmp	r0, r4
 802a33c:	d20f      	bcs.n	802a35e <_realloc_r+0x48>
 802a33e:	4621      	mov	r1, r4
 802a340:	4638      	mov	r0, r7
 802a342:	f7fb ff31 	bl	80261a8 <_malloc_r>
 802a346:	4605      	mov	r5, r0
 802a348:	2800      	cmp	r0, #0
 802a34a:	d0f2      	beq.n	802a332 <_realloc_r+0x1c>
 802a34c:	4631      	mov	r1, r6
 802a34e:	4622      	mov	r2, r4
 802a350:	f7fb fec4 	bl	80260dc <memcpy>
 802a354:	4631      	mov	r1, r6
 802a356:	4638      	mov	r0, r7
 802a358:	f7fb fed6 	bl	8026108 <_free_r>
 802a35c:	e7e9      	b.n	802a332 <_realloc_r+0x1c>
 802a35e:	4635      	mov	r5, r6
 802a360:	e7e7      	b.n	802a332 <_realloc_r+0x1c>

0802a362 <__ssputs_r>:
 802a362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a366:	688e      	ldr	r6, [r1, #8]
 802a368:	429e      	cmp	r6, r3
 802a36a:	4682      	mov	sl, r0
 802a36c:	460c      	mov	r4, r1
 802a36e:	4690      	mov	r8, r2
 802a370:	461f      	mov	r7, r3
 802a372:	d838      	bhi.n	802a3e6 <__ssputs_r+0x84>
 802a374:	898a      	ldrh	r2, [r1, #12]
 802a376:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802a37a:	d032      	beq.n	802a3e2 <__ssputs_r+0x80>
 802a37c:	6825      	ldr	r5, [r4, #0]
 802a37e:	6909      	ldr	r1, [r1, #16]
 802a380:	eba5 0901 	sub.w	r9, r5, r1
 802a384:	6965      	ldr	r5, [r4, #20]
 802a386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a38a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802a38e:	3301      	adds	r3, #1
 802a390:	444b      	add	r3, r9
 802a392:	106d      	asrs	r5, r5, #1
 802a394:	429d      	cmp	r5, r3
 802a396:	bf38      	it	cc
 802a398:	461d      	movcc	r5, r3
 802a39a:	0553      	lsls	r3, r2, #21
 802a39c:	d531      	bpl.n	802a402 <__ssputs_r+0xa0>
 802a39e:	4629      	mov	r1, r5
 802a3a0:	f7fb ff02 	bl	80261a8 <_malloc_r>
 802a3a4:	4606      	mov	r6, r0
 802a3a6:	b950      	cbnz	r0, 802a3be <__ssputs_r+0x5c>
 802a3a8:	230c      	movs	r3, #12
 802a3aa:	f8ca 3000 	str.w	r3, [sl]
 802a3ae:	89a3      	ldrh	r3, [r4, #12]
 802a3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a3b4:	81a3      	strh	r3, [r4, #12]
 802a3b6:	f04f 30ff 	mov.w	r0, #4294967295
 802a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a3be:	6921      	ldr	r1, [r4, #16]
 802a3c0:	464a      	mov	r2, r9
 802a3c2:	f7fb fe8b 	bl	80260dc <memcpy>
 802a3c6:	89a3      	ldrh	r3, [r4, #12]
 802a3c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802a3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a3d0:	81a3      	strh	r3, [r4, #12]
 802a3d2:	6126      	str	r6, [r4, #16]
 802a3d4:	6165      	str	r5, [r4, #20]
 802a3d6:	444e      	add	r6, r9
 802a3d8:	eba5 0509 	sub.w	r5, r5, r9
 802a3dc:	6026      	str	r6, [r4, #0]
 802a3de:	60a5      	str	r5, [r4, #8]
 802a3e0:	463e      	mov	r6, r7
 802a3e2:	42be      	cmp	r6, r7
 802a3e4:	d900      	bls.n	802a3e8 <__ssputs_r+0x86>
 802a3e6:	463e      	mov	r6, r7
 802a3e8:	4632      	mov	r2, r6
 802a3ea:	6820      	ldr	r0, [r4, #0]
 802a3ec:	4641      	mov	r1, r8
 802a3ee:	f7ff faa1 	bl	8029934 <memmove>
 802a3f2:	68a3      	ldr	r3, [r4, #8]
 802a3f4:	6822      	ldr	r2, [r4, #0]
 802a3f6:	1b9b      	subs	r3, r3, r6
 802a3f8:	4432      	add	r2, r6
 802a3fa:	60a3      	str	r3, [r4, #8]
 802a3fc:	6022      	str	r2, [r4, #0]
 802a3fe:	2000      	movs	r0, #0
 802a400:	e7db      	b.n	802a3ba <__ssputs_r+0x58>
 802a402:	462a      	mov	r2, r5
 802a404:	f7ff ff87 	bl	802a316 <_realloc_r>
 802a408:	4606      	mov	r6, r0
 802a40a:	2800      	cmp	r0, #0
 802a40c:	d1e1      	bne.n	802a3d2 <__ssputs_r+0x70>
 802a40e:	6921      	ldr	r1, [r4, #16]
 802a410:	4650      	mov	r0, sl
 802a412:	f7fb fe79 	bl	8026108 <_free_r>
 802a416:	e7c7      	b.n	802a3a8 <__ssputs_r+0x46>

0802a418 <_svfiprintf_r>:
 802a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a41c:	4698      	mov	r8, r3
 802a41e:	898b      	ldrh	r3, [r1, #12]
 802a420:	061b      	lsls	r3, r3, #24
 802a422:	b09d      	sub	sp, #116	; 0x74
 802a424:	4607      	mov	r7, r0
 802a426:	460d      	mov	r5, r1
 802a428:	4614      	mov	r4, r2
 802a42a:	d50e      	bpl.n	802a44a <_svfiprintf_r+0x32>
 802a42c:	690b      	ldr	r3, [r1, #16]
 802a42e:	b963      	cbnz	r3, 802a44a <_svfiprintf_r+0x32>
 802a430:	2140      	movs	r1, #64	; 0x40
 802a432:	f7fb feb9 	bl	80261a8 <_malloc_r>
 802a436:	6028      	str	r0, [r5, #0]
 802a438:	6128      	str	r0, [r5, #16]
 802a43a:	b920      	cbnz	r0, 802a446 <_svfiprintf_r+0x2e>
 802a43c:	230c      	movs	r3, #12
 802a43e:	603b      	str	r3, [r7, #0]
 802a440:	f04f 30ff 	mov.w	r0, #4294967295
 802a444:	e0d1      	b.n	802a5ea <_svfiprintf_r+0x1d2>
 802a446:	2340      	movs	r3, #64	; 0x40
 802a448:	616b      	str	r3, [r5, #20]
 802a44a:	2300      	movs	r3, #0
 802a44c:	9309      	str	r3, [sp, #36]	; 0x24
 802a44e:	2320      	movs	r3, #32
 802a450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a454:	f8cd 800c 	str.w	r8, [sp, #12]
 802a458:	2330      	movs	r3, #48	; 0x30
 802a45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802a604 <_svfiprintf_r+0x1ec>
 802a45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a462:	f04f 0901 	mov.w	r9, #1
 802a466:	4623      	mov	r3, r4
 802a468:	469a      	mov	sl, r3
 802a46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a46e:	b10a      	cbz	r2, 802a474 <_svfiprintf_r+0x5c>
 802a470:	2a25      	cmp	r2, #37	; 0x25
 802a472:	d1f9      	bne.n	802a468 <_svfiprintf_r+0x50>
 802a474:	ebba 0b04 	subs.w	fp, sl, r4
 802a478:	d00b      	beq.n	802a492 <_svfiprintf_r+0x7a>
 802a47a:	465b      	mov	r3, fp
 802a47c:	4622      	mov	r2, r4
 802a47e:	4629      	mov	r1, r5
 802a480:	4638      	mov	r0, r7
 802a482:	f7ff ff6e 	bl	802a362 <__ssputs_r>
 802a486:	3001      	adds	r0, #1
 802a488:	f000 80aa 	beq.w	802a5e0 <_svfiprintf_r+0x1c8>
 802a48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a48e:	445a      	add	r2, fp
 802a490:	9209      	str	r2, [sp, #36]	; 0x24
 802a492:	f89a 3000 	ldrb.w	r3, [sl]
 802a496:	2b00      	cmp	r3, #0
 802a498:	f000 80a2 	beq.w	802a5e0 <_svfiprintf_r+0x1c8>
 802a49c:	2300      	movs	r3, #0
 802a49e:	f04f 32ff 	mov.w	r2, #4294967295
 802a4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a4a6:	f10a 0a01 	add.w	sl, sl, #1
 802a4aa:	9304      	str	r3, [sp, #16]
 802a4ac:	9307      	str	r3, [sp, #28]
 802a4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a4b2:	931a      	str	r3, [sp, #104]	; 0x68
 802a4b4:	4654      	mov	r4, sl
 802a4b6:	2205      	movs	r2, #5
 802a4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a4bc:	4851      	ldr	r0, [pc, #324]	; (802a604 <_svfiprintf_r+0x1ec>)
 802a4be:	f7d5 fec7 	bl	8000250 <memchr>
 802a4c2:	9a04      	ldr	r2, [sp, #16]
 802a4c4:	b9d8      	cbnz	r0, 802a4fe <_svfiprintf_r+0xe6>
 802a4c6:	06d0      	lsls	r0, r2, #27
 802a4c8:	bf44      	itt	mi
 802a4ca:	2320      	movmi	r3, #32
 802a4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a4d0:	0711      	lsls	r1, r2, #28
 802a4d2:	bf44      	itt	mi
 802a4d4:	232b      	movmi	r3, #43	; 0x2b
 802a4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a4da:	f89a 3000 	ldrb.w	r3, [sl]
 802a4de:	2b2a      	cmp	r3, #42	; 0x2a
 802a4e0:	d015      	beq.n	802a50e <_svfiprintf_r+0xf6>
 802a4e2:	9a07      	ldr	r2, [sp, #28]
 802a4e4:	4654      	mov	r4, sl
 802a4e6:	2000      	movs	r0, #0
 802a4e8:	f04f 0c0a 	mov.w	ip, #10
 802a4ec:	4621      	mov	r1, r4
 802a4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a4f2:	3b30      	subs	r3, #48	; 0x30
 802a4f4:	2b09      	cmp	r3, #9
 802a4f6:	d94e      	bls.n	802a596 <_svfiprintf_r+0x17e>
 802a4f8:	b1b0      	cbz	r0, 802a528 <_svfiprintf_r+0x110>
 802a4fa:	9207      	str	r2, [sp, #28]
 802a4fc:	e014      	b.n	802a528 <_svfiprintf_r+0x110>
 802a4fe:	eba0 0308 	sub.w	r3, r0, r8
 802a502:	fa09 f303 	lsl.w	r3, r9, r3
 802a506:	4313      	orrs	r3, r2
 802a508:	9304      	str	r3, [sp, #16]
 802a50a:	46a2      	mov	sl, r4
 802a50c:	e7d2      	b.n	802a4b4 <_svfiprintf_r+0x9c>
 802a50e:	9b03      	ldr	r3, [sp, #12]
 802a510:	1d19      	adds	r1, r3, #4
 802a512:	681b      	ldr	r3, [r3, #0]
 802a514:	9103      	str	r1, [sp, #12]
 802a516:	2b00      	cmp	r3, #0
 802a518:	bfbb      	ittet	lt
 802a51a:	425b      	neglt	r3, r3
 802a51c:	f042 0202 	orrlt.w	r2, r2, #2
 802a520:	9307      	strge	r3, [sp, #28]
 802a522:	9307      	strlt	r3, [sp, #28]
 802a524:	bfb8      	it	lt
 802a526:	9204      	strlt	r2, [sp, #16]
 802a528:	7823      	ldrb	r3, [r4, #0]
 802a52a:	2b2e      	cmp	r3, #46	; 0x2e
 802a52c:	d10c      	bne.n	802a548 <_svfiprintf_r+0x130>
 802a52e:	7863      	ldrb	r3, [r4, #1]
 802a530:	2b2a      	cmp	r3, #42	; 0x2a
 802a532:	d135      	bne.n	802a5a0 <_svfiprintf_r+0x188>
 802a534:	9b03      	ldr	r3, [sp, #12]
 802a536:	1d1a      	adds	r2, r3, #4
 802a538:	681b      	ldr	r3, [r3, #0]
 802a53a:	9203      	str	r2, [sp, #12]
 802a53c:	2b00      	cmp	r3, #0
 802a53e:	bfb8      	it	lt
 802a540:	f04f 33ff 	movlt.w	r3, #4294967295
 802a544:	3402      	adds	r4, #2
 802a546:	9305      	str	r3, [sp, #20]
 802a548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802a614 <_svfiprintf_r+0x1fc>
 802a54c:	7821      	ldrb	r1, [r4, #0]
 802a54e:	2203      	movs	r2, #3
 802a550:	4650      	mov	r0, sl
 802a552:	f7d5 fe7d 	bl	8000250 <memchr>
 802a556:	b140      	cbz	r0, 802a56a <_svfiprintf_r+0x152>
 802a558:	2340      	movs	r3, #64	; 0x40
 802a55a:	eba0 000a 	sub.w	r0, r0, sl
 802a55e:	fa03 f000 	lsl.w	r0, r3, r0
 802a562:	9b04      	ldr	r3, [sp, #16]
 802a564:	4303      	orrs	r3, r0
 802a566:	3401      	adds	r4, #1
 802a568:	9304      	str	r3, [sp, #16]
 802a56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a56e:	4826      	ldr	r0, [pc, #152]	; (802a608 <_svfiprintf_r+0x1f0>)
 802a570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a574:	2206      	movs	r2, #6
 802a576:	f7d5 fe6b 	bl	8000250 <memchr>
 802a57a:	2800      	cmp	r0, #0
 802a57c:	d038      	beq.n	802a5f0 <_svfiprintf_r+0x1d8>
 802a57e:	4b23      	ldr	r3, [pc, #140]	; (802a60c <_svfiprintf_r+0x1f4>)
 802a580:	bb1b      	cbnz	r3, 802a5ca <_svfiprintf_r+0x1b2>
 802a582:	9b03      	ldr	r3, [sp, #12]
 802a584:	3307      	adds	r3, #7
 802a586:	f023 0307 	bic.w	r3, r3, #7
 802a58a:	3308      	adds	r3, #8
 802a58c:	9303      	str	r3, [sp, #12]
 802a58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a590:	4433      	add	r3, r6
 802a592:	9309      	str	r3, [sp, #36]	; 0x24
 802a594:	e767      	b.n	802a466 <_svfiprintf_r+0x4e>
 802a596:	fb0c 3202 	mla	r2, ip, r2, r3
 802a59a:	460c      	mov	r4, r1
 802a59c:	2001      	movs	r0, #1
 802a59e:	e7a5      	b.n	802a4ec <_svfiprintf_r+0xd4>
 802a5a0:	2300      	movs	r3, #0
 802a5a2:	3401      	adds	r4, #1
 802a5a4:	9305      	str	r3, [sp, #20]
 802a5a6:	4619      	mov	r1, r3
 802a5a8:	f04f 0c0a 	mov.w	ip, #10
 802a5ac:	4620      	mov	r0, r4
 802a5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a5b2:	3a30      	subs	r2, #48	; 0x30
 802a5b4:	2a09      	cmp	r2, #9
 802a5b6:	d903      	bls.n	802a5c0 <_svfiprintf_r+0x1a8>
 802a5b8:	2b00      	cmp	r3, #0
 802a5ba:	d0c5      	beq.n	802a548 <_svfiprintf_r+0x130>
 802a5bc:	9105      	str	r1, [sp, #20]
 802a5be:	e7c3      	b.n	802a548 <_svfiprintf_r+0x130>
 802a5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 802a5c4:	4604      	mov	r4, r0
 802a5c6:	2301      	movs	r3, #1
 802a5c8:	e7f0      	b.n	802a5ac <_svfiprintf_r+0x194>
 802a5ca:	ab03      	add	r3, sp, #12
 802a5cc:	9300      	str	r3, [sp, #0]
 802a5ce:	462a      	mov	r2, r5
 802a5d0:	4b0f      	ldr	r3, [pc, #60]	; (802a610 <_svfiprintf_r+0x1f8>)
 802a5d2:	a904      	add	r1, sp, #16
 802a5d4:	4638      	mov	r0, r7
 802a5d6:	f7fc f82b 	bl	8026630 <_printf_float>
 802a5da:	1c42      	adds	r2, r0, #1
 802a5dc:	4606      	mov	r6, r0
 802a5de:	d1d6      	bne.n	802a58e <_svfiprintf_r+0x176>
 802a5e0:	89ab      	ldrh	r3, [r5, #12]
 802a5e2:	065b      	lsls	r3, r3, #25
 802a5e4:	f53f af2c 	bmi.w	802a440 <_svfiprintf_r+0x28>
 802a5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a5ea:	b01d      	add	sp, #116	; 0x74
 802a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a5f0:	ab03      	add	r3, sp, #12
 802a5f2:	9300      	str	r3, [sp, #0]
 802a5f4:	462a      	mov	r2, r5
 802a5f6:	4b06      	ldr	r3, [pc, #24]	; (802a610 <_svfiprintf_r+0x1f8>)
 802a5f8:	a904      	add	r1, sp, #16
 802a5fa:	4638      	mov	r0, r7
 802a5fc:	f7fc faa4 	bl	8026b48 <_printf_i>
 802a600:	e7eb      	b.n	802a5da <_svfiprintf_r+0x1c2>
 802a602:	bf00      	nop
 802a604:	0802ea54 	.word	0x0802ea54
 802a608:	0802ea5e 	.word	0x0802ea5e
 802a60c:	08026631 	.word	0x08026631
 802a610:	0802a363 	.word	0x0802a363
 802a614:	0802ea5a 	.word	0x0802ea5a

0802a618 <nan>:
 802a618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802a620 <nan+0x8>
 802a61c:	4770      	bx	lr
 802a61e:	bf00      	nop
 802a620:	00000000 	.word	0x00000000
 802a624:	7ff80000 	.word	0x7ff80000

0802a628 <__sread>:
 802a628:	b510      	push	{r4, lr}
 802a62a:	460c      	mov	r4, r1
 802a62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a630:	f000 f8ba 	bl	802a7a8 <_read_r>
 802a634:	2800      	cmp	r0, #0
 802a636:	bfab      	itete	ge
 802a638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a63a:	89a3      	ldrhlt	r3, [r4, #12]
 802a63c:	181b      	addge	r3, r3, r0
 802a63e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a642:	bfac      	ite	ge
 802a644:	6563      	strge	r3, [r4, #84]	; 0x54
 802a646:	81a3      	strhlt	r3, [r4, #12]
 802a648:	bd10      	pop	{r4, pc}

0802a64a <__swrite>:
 802a64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a64e:	461f      	mov	r7, r3
 802a650:	898b      	ldrh	r3, [r1, #12]
 802a652:	05db      	lsls	r3, r3, #23
 802a654:	4605      	mov	r5, r0
 802a656:	460c      	mov	r4, r1
 802a658:	4616      	mov	r6, r2
 802a65a:	d505      	bpl.n	802a668 <__swrite+0x1e>
 802a65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a660:	2302      	movs	r3, #2
 802a662:	2200      	movs	r2, #0
 802a664:	f000 f886 	bl	802a774 <_lseek_r>
 802a668:	89a3      	ldrh	r3, [r4, #12]
 802a66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a66e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a672:	81a3      	strh	r3, [r4, #12]
 802a674:	4632      	mov	r2, r6
 802a676:	463b      	mov	r3, r7
 802a678:	4628      	mov	r0, r5
 802a67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a67e:	f000 b835 	b.w	802a6ec <_write_r>

0802a682 <__sseek>:
 802a682:	b510      	push	{r4, lr}
 802a684:	460c      	mov	r4, r1
 802a686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a68a:	f000 f873 	bl	802a774 <_lseek_r>
 802a68e:	1c43      	adds	r3, r0, #1
 802a690:	89a3      	ldrh	r3, [r4, #12]
 802a692:	bf15      	itete	ne
 802a694:	6560      	strne	r0, [r4, #84]	; 0x54
 802a696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a69a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a69e:	81a3      	strheq	r3, [r4, #12]
 802a6a0:	bf18      	it	ne
 802a6a2:	81a3      	strhne	r3, [r4, #12]
 802a6a4:	bd10      	pop	{r4, pc}

0802a6a6 <__sclose>:
 802a6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a6aa:	f000 b831 	b.w	802a710 <_close_r>

0802a6ae <strncmp>:
 802a6ae:	b510      	push	{r4, lr}
 802a6b0:	b16a      	cbz	r2, 802a6ce <strncmp+0x20>
 802a6b2:	3901      	subs	r1, #1
 802a6b4:	1884      	adds	r4, r0, r2
 802a6b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a6ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802a6be:	4293      	cmp	r3, r2
 802a6c0:	d103      	bne.n	802a6ca <strncmp+0x1c>
 802a6c2:	42a0      	cmp	r0, r4
 802a6c4:	d001      	beq.n	802a6ca <strncmp+0x1c>
 802a6c6:	2b00      	cmp	r3, #0
 802a6c8:	d1f5      	bne.n	802a6b6 <strncmp+0x8>
 802a6ca:	1a98      	subs	r0, r3, r2
 802a6cc:	bd10      	pop	{r4, pc}
 802a6ce:	4610      	mov	r0, r2
 802a6d0:	e7fc      	b.n	802a6cc <strncmp+0x1e>

0802a6d2 <__ascii_wctomb>:
 802a6d2:	b149      	cbz	r1, 802a6e8 <__ascii_wctomb+0x16>
 802a6d4:	2aff      	cmp	r2, #255	; 0xff
 802a6d6:	bf85      	ittet	hi
 802a6d8:	238a      	movhi	r3, #138	; 0x8a
 802a6da:	6003      	strhi	r3, [r0, #0]
 802a6dc:	700a      	strbls	r2, [r1, #0]
 802a6de:	f04f 30ff 	movhi.w	r0, #4294967295
 802a6e2:	bf98      	it	ls
 802a6e4:	2001      	movls	r0, #1
 802a6e6:	4770      	bx	lr
 802a6e8:	4608      	mov	r0, r1
 802a6ea:	4770      	bx	lr

0802a6ec <_write_r>:
 802a6ec:	b538      	push	{r3, r4, r5, lr}
 802a6ee:	4d07      	ldr	r5, [pc, #28]	; (802a70c <_write_r+0x20>)
 802a6f0:	4604      	mov	r4, r0
 802a6f2:	4608      	mov	r0, r1
 802a6f4:	4611      	mov	r1, r2
 802a6f6:	2200      	movs	r2, #0
 802a6f8:	602a      	str	r2, [r5, #0]
 802a6fa:	461a      	mov	r2, r3
 802a6fc:	f7d8 fab7 	bl	8002c6e <_write>
 802a700:	1c43      	adds	r3, r0, #1
 802a702:	d102      	bne.n	802a70a <_write_r+0x1e>
 802a704:	682b      	ldr	r3, [r5, #0]
 802a706:	b103      	cbz	r3, 802a70a <_write_r+0x1e>
 802a708:	6023      	str	r3, [r4, #0]
 802a70a:	bd38      	pop	{r3, r4, r5, pc}
 802a70c:	20057100 	.word	0x20057100

0802a710 <_close_r>:
 802a710:	b538      	push	{r3, r4, r5, lr}
 802a712:	4d06      	ldr	r5, [pc, #24]	; (802a72c <_close_r+0x1c>)
 802a714:	2300      	movs	r3, #0
 802a716:	4604      	mov	r4, r0
 802a718:	4608      	mov	r0, r1
 802a71a:	602b      	str	r3, [r5, #0]
 802a71c:	f7d8 fac3 	bl	8002ca6 <_close>
 802a720:	1c43      	adds	r3, r0, #1
 802a722:	d102      	bne.n	802a72a <_close_r+0x1a>
 802a724:	682b      	ldr	r3, [r5, #0]
 802a726:	b103      	cbz	r3, 802a72a <_close_r+0x1a>
 802a728:	6023      	str	r3, [r4, #0]
 802a72a:	bd38      	pop	{r3, r4, r5, pc}
 802a72c:	20057100 	.word	0x20057100

0802a730 <_fstat_r>:
 802a730:	b538      	push	{r3, r4, r5, lr}
 802a732:	4d07      	ldr	r5, [pc, #28]	; (802a750 <_fstat_r+0x20>)
 802a734:	2300      	movs	r3, #0
 802a736:	4604      	mov	r4, r0
 802a738:	4608      	mov	r0, r1
 802a73a:	4611      	mov	r1, r2
 802a73c:	602b      	str	r3, [r5, #0]
 802a73e:	f7d8 fabe 	bl	8002cbe <_fstat>
 802a742:	1c43      	adds	r3, r0, #1
 802a744:	d102      	bne.n	802a74c <_fstat_r+0x1c>
 802a746:	682b      	ldr	r3, [r5, #0]
 802a748:	b103      	cbz	r3, 802a74c <_fstat_r+0x1c>
 802a74a:	6023      	str	r3, [r4, #0]
 802a74c:	bd38      	pop	{r3, r4, r5, pc}
 802a74e:	bf00      	nop
 802a750:	20057100 	.word	0x20057100

0802a754 <_isatty_r>:
 802a754:	b538      	push	{r3, r4, r5, lr}
 802a756:	4d06      	ldr	r5, [pc, #24]	; (802a770 <_isatty_r+0x1c>)
 802a758:	2300      	movs	r3, #0
 802a75a:	4604      	mov	r4, r0
 802a75c:	4608      	mov	r0, r1
 802a75e:	602b      	str	r3, [r5, #0]
 802a760:	f7d8 fabd 	bl	8002cde <_isatty>
 802a764:	1c43      	adds	r3, r0, #1
 802a766:	d102      	bne.n	802a76e <_isatty_r+0x1a>
 802a768:	682b      	ldr	r3, [r5, #0]
 802a76a:	b103      	cbz	r3, 802a76e <_isatty_r+0x1a>
 802a76c:	6023      	str	r3, [r4, #0]
 802a76e:	bd38      	pop	{r3, r4, r5, pc}
 802a770:	20057100 	.word	0x20057100

0802a774 <_lseek_r>:
 802a774:	b538      	push	{r3, r4, r5, lr}
 802a776:	4d07      	ldr	r5, [pc, #28]	; (802a794 <_lseek_r+0x20>)
 802a778:	4604      	mov	r4, r0
 802a77a:	4608      	mov	r0, r1
 802a77c:	4611      	mov	r1, r2
 802a77e:	2200      	movs	r2, #0
 802a780:	602a      	str	r2, [r5, #0]
 802a782:	461a      	mov	r2, r3
 802a784:	f7d8 fab6 	bl	8002cf4 <_lseek>
 802a788:	1c43      	adds	r3, r0, #1
 802a78a:	d102      	bne.n	802a792 <_lseek_r+0x1e>
 802a78c:	682b      	ldr	r3, [r5, #0]
 802a78e:	b103      	cbz	r3, 802a792 <_lseek_r+0x1e>
 802a790:	6023      	str	r3, [r4, #0]
 802a792:	bd38      	pop	{r3, r4, r5, pc}
 802a794:	20057100 	.word	0x20057100

0802a798 <_malloc_usable_size_r>:
 802a798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a79c:	1f18      	subs	r0, r3, #4
 802a79e:	2b00      	cmp	r3, #0
 802a7a0:	bfbc      	itt	lt
 802a7a2:	580b      	ldrlt	r3, [r1, r0]
 802a7a4:	18c0      	addlt	r0, r0, r3
 802a7a6:	4770      	bx	lr

0802a7a8 <_read_r>:
 802a7a8:	b538      	push	{r3, r4, r5, lr}
 802a7aa:	4d07      	ldr	r5, [pc, #28]	; (802a7c8 <_read_r+0x20>)
 802a7ac:	4604      	mov	r4, r0
 802a7ae:	4608      	mov	r0, r1
 802a7b0:	4611      	mov	r1, r2
 802a7b2:	2200      	movs	r2, #0
 802a7b4:	602a      	str	r2, [r5, #0]
 802a7b6:	461a      	mov	r2, r3
 802a7b8:	f7d8 fa3c 	bl	8002c34 <_read>
 802a7bc:	1c43      	adds	r3, r0, #1
 802a7be:	d102      	bne.n	802a7c6 <_read_r+0x1e>
 802a7c0:	682b      	ldr	r3, [r5, #0]
 802a7c2:	b103      	cbz	r3, 802a7c6 <_read_r+0x1e>
 802a7c4:	6023      	str	r3, [r4, #0]
 802a7c6:	bd38      	pop	{r3, r4, r5, pc}
 802a7c8:	20057100 	.word	0x20057100

0802a7cc <_init>:
 802a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7ce:	bf00      	nop
 802a7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7d2:	bc08      	pop	{r3}
 802a7d4:	469e      	mov	lr, r3
 802a7d6:	4770      	bx	lr

0802a7d8 <_fini>:
 802a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7da:	bf00      	nop
 802a7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7de:	bc08      	pop	{r3}
 802a7e0:	469e      	mov	lr, r3
 802a7e2:	4770      	bx	lr
