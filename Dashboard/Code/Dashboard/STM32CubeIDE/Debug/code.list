
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ecc0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003988  0801eec0  0801eec0  0002eec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000e1a0  08022848  08022848  00032848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  080309e8  080309e8  000409e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000005c  080309f4  080309f4  000409f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08030a50  08030a50  000fd788  2**0
                  CONTENTS
  7 .ARM          00000008  08030a50  08030a50  00040a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08030a58  08030a58  000fd788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08030a58  08030a58  00040a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08030a6c  08030a6c  00040a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000dc  20000000  08030a74  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000e4f0  200000dc  08030b50  000500dc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000e5cc  08030b50  0005e5cc  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000fd788  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 0009d788  90400000  90400000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   00093998  00000000  00000000  000fd7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00011c06  00000000  00000000  0019114e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003900  00000000  00000000  001a2d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003410  00000000  00000000  001a6658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003693b  00000000  00000000  001a9a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000440e9  00000000  00000000  001e03a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012be8a  00000000  00000000  0022448c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  00350316  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000f674  00000000  00000000  003503e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000dc 	.word	0x200000dc
 800021c:	00000000 	.word	0x00000000
 8000220:	0801eea8 	.word	0x0801eea8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000e0 	.word	0x200000e0
 800023c:	0801eea8 	.word	0x0801eea8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <FLASH_QSPI_Init+0x70>)
 80005de:	4a1b      	ldr	r2, [pc, #108]	; (800064c <FLASH_QSPI_Init+0x74>)
 80005e0:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 80005e2:	4819      	ldr	r0, [pc, #100]	; (8000648 <FLASH_QSPI_Init+0x70>)
 80005e4:	f008 f8fe 	bl	80087e4 <HAL_QSPI_DeInit>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e028      	b.n	8000644 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 80005f2:	f001 fa8d 	bl	8001b10 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 80005f6:	f000 f82b 	bl	8000650 <FLASH_QSPI_ResetChip>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8000600:	2301      	movs	r3, #1
 8000602:	e01f      	b.n	8000644 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f006 f817 	bl	8006638 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 800060a:	f000 f87f 	bl	800070c <FLASH_QSPI_AutoPollingMemReady>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	e015      	b.n	8000644 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000618:	f000 f8b0 	bl	800077c <FLASH_QSPI_WriteEnable>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	e00e      	b.n	8000644 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 8000626:	f000 f8f3 	bl	8000810 <FLASH_QSPI_Configuration>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	e007      	b.n	8000644 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000634:	f000 f962 	bl	80008fc <FLASH_QSPI_EnableMemoryMappedMode>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e000      	b.n	8000644 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000e410 	.word	0x2000e410
 800064c:	a0001000 	.word	0xa0001000

08000650 <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 8000650:	b580      	push	{r7, lr}
 8000652:	b090      	sub	sp, #64	; 0x40
 8000654:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 800065a:	2366      	movs	r3, #102	; 0x66
 800065c:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800065e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000662:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000672:	2300      	movs	r3, #0
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000676:	2300      	movs	r3, #0
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000682:	2300      	movs	r3, #0
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000690:	4619      	mov	r1, r3
 8000692:	481d      	ldr	r0, [pc, #116]	; (8000708 <FLASH_QSPI_ResetChip+0xb8>)
 8000694:	f008 f8ca 	bl	800882c <HAL_QSPI_Command>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e02e      	b.n	8000700 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006a6:	e003      	b.n	80006b0 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 80006a8:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 80006aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ac:	3301      	adds	r3, #1
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2b2e      	cmp	r3, #46	; 0x2e
 80006b4:	d9f8      	bls.n	80006a8 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 80006b6:	2399      	movs	r3, #153	; 0x99
 80006b8:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80006ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006be:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80006c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c4:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80006ce:	2300      	movs	r3, #0
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80006ec:	4619      	mov	r1, r3
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <FLASH_QSPI_ResetChip+0xb8>)
 80006f0:	f008 f89c 	bl	800882c <HAL_QSPI_Command>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3740      	adds	r7, #64	; 0x40
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000e410 	.word	0x2000e410

0800070c <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000712:	2305      	movs	r3, #5
 8000714:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000728:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000732:	2300      	movs	r3, #0
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000736:	2300      	movs	r3, #0
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 800073e:	2301      	movs	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 800074a:	2310      	movs	r3, #16
 800074c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000752:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000754:	463a      	mov	r2, r7
 8000756:	f107 0118 	add.w	r1, r7, #24
 800075a:	f241 3388 	movw	r3, #5000	; 0x1388
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 8000760:	f008 f9f1 	bl	8008b46 <HAL_QSPI_AutoPolling>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e000      	b.n	8000770 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	3750      	adds	r7, #80	; 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000e410 	.word	0x2000e410

0800077c <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000782:	2306      	movs	r3, #6
 8000784:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8000794:	2300      	movs	r3, #0
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80007a0:	2300      	movs	r3, #0
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80007a4:	2300      	movs	r3, #0
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80007b0:	4619      	mov	r1, r3
 80007b2:	4816      	ldr	r0, [pc, #88]	; (800080c <FLASH_QSPI_WriteEnable+0x90>)
 80007b4:	f008 f83a 	bl	800882c <HAL_QSPI_Command>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e01f      	b.n	8000802 <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 80007c2:	2302      	movs	r3, #2
 80007c4:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 80007c6:	2302      	movs	r3, #2
 80007c8:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80007d2:	2310      	movs	r3, #16
 80007d4:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80007d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007da:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 80007dc:	2305      	movs	r3, #5
 80007de:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80007e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007e4:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80007e6:	463a      	mov	r2, r7
 80007e8:	f107 0118 	add.w	r1, r7, #24
 80007ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <FLASH_QSPI_WriteEnable+0x90>)
 80007f2:	f008 f9a8 	bl	8008b46 <HAL_QSPI_AutoPolling>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80007fc:	2301      	movs	r3, #1
 80007fe:	e000      	b.n	8000802 <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3750      	adds	r7, #80	; 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000e410 	.word	0x2000e410

08000810 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b090      	sub	sp, #64	; 0x40
 8000814:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8000816:	2335      	movs	r3, #53	; 0x35
 8000818:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800081a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081e:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000836:	2300      	movs	r3, #0
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800083a:	2300      	movs	r3, #0
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	f241 3288 	movw	r2, #5000	; 0x1388
 800084a:	4619      	mov	r1, r3
 800084c:	482a      	ldr	r0, [pc, #168]	; (80008f8 <FLASH_QSPI_Configuration+0xe8>)
 800084e:	f007 ffed 	bl	800882c <HAL_QSPI_Command>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e049      	b.n	80008f0 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000862:	4619      	mov	r1, r3
 8000864:	4824      	ldr	r0, [pc, #144]	; (80008f8 <FLASH_QSPI_Configuration+0xe8>)
 8000866:	f008 f8d1 	bl	8008a0c <HAL_QSPI_Receive>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	e03d      	b.n	80008f0 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000874:	f7ff ff82 	bl	800077c <FLASH_QSPI_WriteEnable>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e036      	b.n	80008f0 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	b2db      	uxtb	r3, r3
 800088a:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 800088c:	2331      	movs	r3, #49	; 0x31
 800088e:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000894:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800089e:	2300      	movs	r3, #0
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80008a2:	2300      	movs	r3, #0
 80008a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80008aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <FLASH_QSPI_Configuration+0xe8>)
 80008c4:	f007 ffb2 	bl	800882c <HAL_QSPI_Command>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80008d8:	4619      	mov	r1, r3
 80008da:	4807      	ldr	r0, [pc, #28]	; (80008f8 <FLASH_QSPI_Configuration+0xe8>)
 80008dc:	f008 f804 	bl	80088e8 <HAL_QSPI_Transmit>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 80008e6:	f001 f90d 	bl	8001b04 <Error_Handler>
		return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3740      	adds	r7, #64	; 0x40
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000e410 	.word	0x2000e410

080008fc <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b090      	sub	sp, #64	; 0x40
 8000900:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8000902:	23eb      	movs	r3, #235	; 0xeb
 8000904:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090a:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000912:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 800092c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000932:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 8000940:	2304      	movs	r3, #4
 8000942:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 8000948:	463a      	mov	r2, r7
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4619      	mov	r1, r3
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 8000952:	f008 f96f 	bl	8008c34 <HAL_QSPI_MemoryMapped>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3740      	adds	r7, #64	; 0x40
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000e410 	.word	0x2000e410

08000970 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_CAN1_Init+0x68>)
 8000976:	4a19      	ldr	r2, [pc, #100]	; (80009dc <MX_CAN1_Init+0x6c>)
 8000978:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_CAN1_Init+0x68>)
 800097c:	2210      	movs	r2, #16
 800097e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_CAN1_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_CAN1_Init+0x68>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_CAN1_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_CAN1_Init+0x68>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_CAN1_Init+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_CAN1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_CAN1_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_CAN1_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_CAN1_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_CAN1_Init+0x68>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_CAN1_Init+0x68>)
 80009be:	f005 fe5f 	bl	8006680 <HAL_CAN_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_CAN1_Init+0x5c>
		Error_Handler();
 80009c8:	f001 f89c 	bl	8001b04 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	HAL_CAN_Start(&hcan1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <MX_CAN1_Init+0x68>)
 80009ce:	f005 ff52 	bl	8006876 <HAL_CAN_Start>

	/* USER CODE END CAN1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000e23c 	.word	0x2000e23c
 80009dc:	40006400 	.word	0x40006400

080009e0 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_CAN2_Init+0x6c>)
 80009e6:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <MX_CAN2_Init+0x70>)
 80009e8:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 10;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_CAN2_Init+0x6c>)
 80009ec:	220a      	movs	r2, #10
 80009ee:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_CAN2_Init+0x6c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_CAN2_Init+0x6c>)
 80009f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009fc:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a04:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a0c:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a34:	f005 fe24 	bl	8006680 <HAL_CAN_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_CAN2_Init+0x62>
		Error_Handler();
 8000a3e:	f001 f861 	bl	8001b04 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	HAL_CAN_Start(&hcan2);
 8000a42:	4802      	ldr	r0, [pc, #8]	; (8000a4c <MX_CAN2_Init+0x6c>)
 8000a44:	f005 ff17 	bl	8006876 <HAL_CAN_Start>

	/* USER CODE END CAN2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000e1ec 	.word	0x2000e1ec
 8000a50:	40006800 	.word	0x40006800

08000a54 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
	if (canHandle->Instance == CAN1) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a4c      	ldr	r2, [pc, #304]	; (8000ba4 <HAL_CAN_MspInit+0x150>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d13a      	bne.n	8000aec <HAL_CAN_MspInit+0x98>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 8000a76:	4b4c      	ldr	r3, [pc, #304]	; (8000ba8 <HAL_CAN_MspInit+0x154>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a4a      	ldr	r2, [pc, #296]	; (8000ba8 <HAL_CAN_MspInit+0x154>)
 8000a7e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8000a80:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <HAL_CAN_MspInit+0x154>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d10b      	bne.n	8000aa0 <HAL_CAN_MspInit+0x4c>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8000a88:	4b48      	ldr	r3, [pc, #288]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a47      	ldr	r2, [pc, #284]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b45      	ldr	r3, [pc, #276]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b42      	ldr	r3, [pc, #264]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a41      	ldr	r2, [pc, #260]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b3f      	ldr	r3, [pc, #252]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	69fb      	ldr	r3, [r7, #28]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000ab8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000aca:	2309      	movs	r3, #9
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4836      	ldr	r0, [pc, #216]	; (8000bb0 <HAL_CAN_MspInit+0x15c>)
 8000ad6:	f006 fe27 	bl	8007728 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2105      	movs	r1, #5
 8000ade:	2014      	movs	r0, #20
 8000ae0:	f006 fb06 	bl	80070f0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ae4:	2014      	movs	r0, #20
 8000ae6:	f006 fb1f 	bl	8007128 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8000aea:	e056      	b.n	8000b9a <HAL_CAN_MspInit+0x146>
	} else if (canHandle->Instance == CAN2) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a30      	ldr	r2, [pc, #192]	; (8000bb4 <HAL_CAN_MspInit+0x160>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d151      	bne.n	8000b9a <HAL_CAN_MspInit+0x146>
		__HAL_RCC_CAN3_CLK_ENABLE();
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a2c      	ldr	r2, [pc, #176]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN2_CLK_ENABLE();
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a26      	ldr	r2, [pc, #152]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b24      	ldr	r3, [pc, #144]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
		HAL_RCC_CAN1_CLK_ENABLED++;
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <HAL_CAN_MspInit+0x154>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <HAL_CAN_MspInit+0x154>)
 8000b2e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <HAL_CAN_MspInit+0x154>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10b      	bne.n	8000b50 <HAL_CAN_MspInit+0xfc>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a15      	ldr	r2, [pc, #84]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_CAN_MspInit+0x158>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8000b68:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b7a:	2309      	movs	r3, #9
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <HAL_CAN_MspInit+0x164>)
 8000b86:	f006 fdcf 	bl	8007728 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	2040      	movs	r0, #64	; 0x40
 8000b90:	f006 faae 	bl	80070f0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000b94:	2040      	movs	r0, #64	; 0x40
 8000b96:	f006 fac7 	bl	8007128 <HAL_NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3738      	adds	r7, #56	; 0x38
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40006400 	.word	0x40006400
 8000ba8:	200000f8 	.word	0x200000f8
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40006800 	.word	0x40006800
 8000bb8:	40020400 	.word	0x40020400

08000bbc <HAL_CAN_RxFifo0MsgPendingCallback>:
		/* USER CODE END CAN2_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b091      	sub	sp, #68	; 0x44
 8000bc0:	af04      	add	r7, sp, #16
 8000bc2:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	f107 0214 	add.w	r2, r7, #20
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f005 fe95 	bl	80068fe <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d10f      	bne.n	8000bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		ComputeEcumasterFrame(RxHeader, RxData);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	9303      	str	r3, [sp, #12]
 8000be4:	466c      	mov	r4, sp
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf8:	f000 f816 	bl	8000c28 <ComputeEcumasterFrame>
	} else {
		ComputeInternalFrame(RxHeader, RxData);
	}
}
 8000bfc:	e00e      	b.n	8000c1c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeInternalFrame(RxHeader, RxData);
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	9303      	str	r3, [sp, #12]
 8000c04:	466c      	mov	r4, sp
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c18:	f000 f8d4 	bl	8000dc4 <ComputeInternalFrame>
}
 8000c1c:	bf00      	nop
 8000c1e:	3734      	adds	r7, #52	; 0x34
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	40006400 	.word	0x40006400

08000c28 <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 8000c28:	b084      	sub	sp, #16
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	f107 0c08 	add.w	ip, r7, #8
 8000c32:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == Frame1) {
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000c3c:	d121      	bne.n	8000c82 <ComputeEcumasterFrame+0x5a>
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 8000c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c40:	f000 f8cc 	bl	8000ddc <LittleToBigEndian>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b5d      	ldr	r3, [pc, #372]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000c4a:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	789a      	ldrb	r2, [r3, #2]
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000c52:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	78da      	ldrb	r2, [r3, #3]
 8000c58:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000c5a:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	3304      	adds	r3, #4
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f8bb 	bl	8000ddc <LittleToBigEndian>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b55      	ldr	r3, [pc, #340]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000c6c:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	3306      	adds	r3, #6
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f8b2 	bl	8000ddc <LittleToBigEndian>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b50      	ldr	r3, [pc, #320]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000c7e:	80da      	strh	r2, [r3, #6]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
		EcuData.TCTorqueReduction = RxData[6];
		EcuData.PitLimitTorqueReduction = RxData[7];
	}
}
 8000c80:	e097      	b.n	8000db2 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame3) {
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	f240 6202 	movw	r2, #1538	; 0x602
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d118      	bne.n	8000cbe <ComputeEcumasterFrame+0x96>
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 8000c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c8e:	f000 f8a5 	bl	8000ddc <LittleToBigEndian>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000c98:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	78da      	ldrb	r2, [r3, #3]
 8000c9e:	4b48      	ldr	r3, [pc, #288]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000ca0:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4];
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	791a      	ldrb	r2, [r3, #4]
 8000ca6:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000ca8:	731a      	strb	r2, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	3306      	adds	r3, #6
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f894 	bl	8000ddc <LittleToBigEndian>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	4b41      	ldr	r3, [pc, #260]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000cba:	81da      	strh	r2, [r3, #14]
}
 8000cbc:	e079      	b.n	8000db2 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame4) {
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	f240 6203 	movw	r2, #1539	; 0x603
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d123      	bne.n	8000d10 <ComputeEcumasterFrame+0xe8>
		EcuData.ignAngle = RxData[0];
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000cd0:	741a      	strb	r2, [r3, #16]
		EcuData.ignDwell = RxData[1];
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	785a      	ldrb	r2, [r3, #1]
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000cd8:	745a      	strb	r2, [r3, #17]
		EcuData.lambda = RxData[2];
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	789a      	ldrb	r2, [r3, #2]
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000ce0:	749a      	strb	r2, [r3, #18]
		EcuData.lambdaCorrection = RxData[3];
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	78da      	ldrb	r2, [r3, #3]
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000ce8:	74da      	strb	r2, [r3, #19]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	3304      	adds	r3, #4
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f874 	bl	8000ddc <LittleToBigEndian>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000cfa:	829a      	strh	r2, [r3, #20]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	3306      	adds	r3, #6
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f86b 	bl	8000ddc <LittleToBigEndian>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d0c:	82da      	strh	r2, [r3, #22]
}
 8000d0e:	e050      	b.n	8000db2 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame5) {
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	f240 6204 	movw	r2, #1540	; 0x604
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d120      	bne.n	8000d5c <ComputeEcumasterFrame+0x134>
		EcuData.gear = RxData[0];
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d20:	761a      	strb	r2, [r3, #24]
		EcuData.ecuTemp = RxData[1];
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	3301      	adds	r3, #1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d2c:	765a      	strb	r2, [r3, #25]
		EcuData.batt = LittleToBigEndian(&RxData[4]);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3304      	adds	r3, #4
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f852 	bl	8000ddc <LittleToBigEndian>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d3e:	835a      	strh	r2, [r3, #26]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	3305      	adds	r3, #5
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f849 	bl	8000ddc <LittleToBigEndian>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d50:	839a      	strh	r2, [r3, #28]
		EcuData.flags1 = RxData[7];
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	79da      	ldrb	r2, [r3, #7]
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d58:	779a      	strb	r2, [r3, #30]
}
 8000d5a:	e02a      	b.n	8000db2 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame6) {
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	f240 6205 	movw	r2, #1541	; 0x605
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d125      	bne.n	8000db2 <ComputeEcumasterFrame+0x18a>
		EcuData.DBWPosition = RxData[0];
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d6c:	77da      	strb	r2, [r3, #31]
		EcuData.DBWTrigger = RxData[1];
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	785a      	ldrb	r2, [r3, #1]
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d74:	f883 2020 	strb.w	r2, [r3, #32]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f82d 	bl	8000ddc <LittleToBigEndian>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d88:	845a      	strh	r2, [r3, #34]	; 0x22
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f824 	bl	8000ddc <LittleToBigEndian>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCTorqueReduction = RxData[6];
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	799a      	ldrb	r2, [r3, #6]
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		EcuData.PitLimitTorqueReduction = RxData[7];
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	79da      	ldrb	r2, [r3, #7]
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <ComputeEcumasterFrame+0x198>)
 8000dae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dba:	b004      	add	sp, #16
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000e214 	.word	0x2000e214

08000dc4 <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	b490      	push	{r4, r7}
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	f107 0408 	add.w	r4, r7, #8
 8000dce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc90      	pop	{r4, r7}
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] * 0xFFFF + data[1];
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3301      	adds	r3, #1
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	81fb      	strh	r3, [r7, #14]
	return returnData;
 8000df6:	89fb      	ldrh	r3, [r7, #14]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <MX_CRC_Init+0x3c>)
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <MX_CRC_Init+0x40>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_CRC_Init+0x3c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_CRC_Init+0x3c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_CRC_Init+0x3c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_CRC_Init+0x3c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_CRC_Init+0x3c>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_CRC_Init+0x3c>)
 8000e2e:	f006 f989 	bl	8007144 <HAL_CRC_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e38:	f000 fe64 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	2000e264 	.word	0x2000e264
 8000e44:	40023000 	.word	0x40023000

08000e48 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_CRC_MspInit+0x38>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10b      	bne.n	8000e72 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_CRC_MspInit+0x3c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_CRC_MspInit+0x3c>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_CRC_MspInit+0x3c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023000 	.word	0x40023000
 8000e84:	40023800 	.word	0x40023800

08000e88 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000e8e:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <MX_DMA2D_Init+0x6c>)
 8000e90:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000eca:	f006 fa25 	bl	8007318 <HAL_DMA2D_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000ed4:	f000 fe16 	bl	8001b04 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_DMA2D_Init+0x68>)
 8000edc:	f006 fb86 	bl	80075ec <HAL_DMA2D_ConfigLayer>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000ee6:	f000 fe0d 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000e288 	.word	0x2000e288
 8000ef4:	4002b000 	.word	0x4002b000

08000ef8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_DMA2D_MspInit+0x44>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d113      	bne.n	8000f32 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_DMA2D_MspInit+0x48>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <HAL_DMA2D_MspInit+0x48>)
 8000f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_DMA2D_MspInit+0x48>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2105      	movs	r1, #5
 8000f26:	205a      	movs	r0, #90	; 0x5a
 8000f28:	f006 f8e2 	bl	80070f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f2c:	205a      	movs	r0, #90	; 0x5a
 8000f2e:	f006 f8fb 	bl	8007128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	4002b000 	.word	0x4002b000
 8000f40:	40023800 	.word	0x40023800

08000f44 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]
 8000f5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f5c:	4b49      	ldr	r3, [pc, #292]	; (8001084 <MX_FMC_Init+0x140>)
 8000f5e:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <MX_FMC_Init+0x144>)
 8000f60:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f62:	4b48      	ldr	r3, [pc, #288]	; (8001084 <MX_FMC_Init+0x140>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f68:	4b46      	ldr	r3, [pc, #280]	; (8001084 <MX_FMC_Init+0x140>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000f6e:	4b45      	ldr	r3, [pc, #276]	; (8001084 <MX_FMC_Init+0x140>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f74:	4b43      	ldr	r3, [pc, #268]	; (8001084 <MX_FMC_Init+0x140>)
 8000f76:	2210      	movs	r2, #16
 8000f78:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000f7a:	4b42      	ldr	r3, [pc, #264]	; (8001084 <MX_FMC_Init+0x140>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000f80:	4b40      	ldr	r3, [pc, #256]	; (8001084 <MX_FMC_Init+0x140>)
 8000f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f86:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f88:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <MX_FMC_Init+0x140>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <MX_FMC_Init+0x140>)
 8000f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f94:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <MX_FMC_Init+0x140>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <MX_FMC_Init+0x140>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000faa:	2304      	movs	r3, #4
 8000fac:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4830      	ldr	r0, [pc, #192]	; (8001084 <MX_FMC_Init+0x140>)
 8000fc4:	f009 f942 	bl	800a24c <HAL_SDRAM_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8000fce:	f000 fd99 	bl	8001b04 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <MX_FMC_Init+0x148>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_FMC_Init+0x148>)
 8000fde:	2210      	movs	r2, #16
 8000fe0:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <MX_FMC_Init+0x148>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <MX_FMC_Init+0x148>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8000fee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff2:	4926      	ldr	r1, [pc, #152]	; (800108c <MX_FMC_Init+0x148>)
 8000ff4:	4823      	ldr	r0, [pc, #140]	; (8001084 <MX_FMC_Init+0x140>)
 8000ff6:	f009 f95d 	bl	800a2b4 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f005 fb1c 	bl	8006638 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_FMC_Init+0x148>)
 8001002:	2202      	movs	r2, #2
 8001004:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_FMC_Init+0x148>)
 8001008:	2210      	movs	r2, #16
 800100a:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_FMC_Init+0x148>)
 800100e:	2201      	movs	r2, #1
 8001010:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <MX_FMC_Init+0x148>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	491b      	ldr	r1, [pc, #108]	; (800108c <MX_FMC_Init+0x148>)
 800101e:	4819      	ldr	r0, [pc, #100]	; (8001084 <MX_FMC_Init+0x140>)
 8001020:	f009 f948 	bl	800a2b4 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_FMC_Init+0x148>)
 8001026:	2203      	movs	r2, #3
 8001028:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_FMC_Init+0x148>)
 800102c:	2210      	movs	r2, #16
 800102e:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_FMC_Init+0x148>)
 8001032:	2208      	movs	r2, #8
 8001034:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_FMC_Init+0x148>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	4912      	ldr	r1, [pc, #72]	; (800108c <MX_FMC_Init+0x148>)
 8001042:	4810      	ldr	r0, [pc, #64]	; (8001084 <MX_FMC_Init+0x140>)
 8001044:	f009 f936 	bl	800a2b4 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8001048:	f44f 7308 	mov.w	r3, #544	; 0x220
 800104c:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_FMC_Init+0x148>)
 8001050:	2204      	movs	r2, #4
 8001052:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <MX_FMC_Init+0x148>)
 8001056:	2210      	movs	r2, #16
 8001058:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_FMC_Init+0x148>)
 800105c:	2201      	movs	r2, #1
 800105e:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <MX_FMC_Init+0x148>)
 8001064:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001066:	f04f 32ff 	mov.w	r2, #4294967295
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <MX_FMC_Init+0x148>)
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_FMC_Init+0x140>)
 800106e:	f009 f921 	bl	800a2b4 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);
 8001072:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_FMC_Init+0x140>)
 8001078:	f009 f947 	bl	800a30a <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000e2e0 	.word	0x2000e2e0
 8001088:	a0000140 	.word	0xa0000140
 800108c:	20000100 	.word	0x20000100

08001090 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80010a4:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <HAL_FMC_MspInit+0x100>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d16d      	bne.n	8001188 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80010ac:	4b38      	ldr	r3, [pc, #224]	; (8001190 <HAL_FMC_MspInit+0x100>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <HAL_FMC_MspInit+0x104>)
 80010b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b6:	4a37      	ldr	r2, [pc, #220]	; (8001194 <HAL_FMC_MspInit+0x104>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6393      	str	r3, [r2, #56]	; 0x38
 80010be:	4b35      	ldr	r3, [pc, #212]	; (8001194 <HAL_FMC_MspInit+0x104>)
 80010c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80010ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010dc:	230c      	movs	r3, #12
 80010de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	; (8001198 <HAL_FMC_MspInit+0x108>)
 80010e6:	f006 fb1f 	bl	8007728 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ea:	230c      	movs	r3, #12
 80010ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010fa:	230c      	movs	r3, #12
 80010fc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4826      	ldr	r0, [pc, #152]	; (800119c <HAL_FMC_MspInit+0x10c>)
 8001104:	f006 fb10 	bl	8007728 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001118:	230c      	movs	r3, #12
 800111a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	481f      	ldr	r0, [pc, #124]	; (80011a0 <HAL_FMC_MspInit+0x110>)
 8001122:	f006 fb01 	bl	8007728 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001126:	f248 1311 	movw	r3, #33041	; 0x8111
 800112a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001138:	230c      	movs	r3, #12
 800113a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4619      	mov	r1, r3
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <HAL_FMC_MspInit+0x114>)
 8001142:	f006 faf1 	bl	8007728 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001146:	f64f 7383 	movw	r3, #65411	; 0xff83
 800114a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001158:	230c      	movs	r3, #12
 800115a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <HAL_FMC_MspInit+0x118>)
 8001162:	f006 fae1 	bl	8007728 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001166:	f24c 7303 	movw	r3, #50947	; 0xc703
 800116a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001178:	230c      	movs	r3, #12
 800117a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	480a      	ldr	r0, [pc, #40]	; (80011ac <HAL_FMC_MspInit+0x11c>)
 8001182:	f006 fad1 	bl	8007728 <HAL_GPIO_Init>
 8001186:	e000      	b.n	800118a <HAL_FMC_MspInit+0xfa>
    return;
 8001188:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000fc 	.word	0x200000fc
 8001194:	40023800 	.word	0x40023800
 8001198:	40021400 	.word	0x40021400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40020c00 	.word	0x40020c00

080011b0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80011b8:	f7ff ff6a 	bl	8001090 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of hardwareTASK */
	hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL,
 80011c8:	4a08      	ldr	r2, [pc, #32]	; (80011ec <MX_FREERTOS_Init+0x28>)
 80011ca:	2100      	movs	r1, #0
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <MX_FREERTOS_Init+0x2c>)
 80011ce:	f00a fd9f 	bl	800bd10 <osThreadNew>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <MX_FREERTOS_Init+0x30>)
 80011d6:	6013      	str	r3, [r2, #0]
			&hardwareTASK_attributes);

	/* creation of touchGFXTask */
	touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL,
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <MX_FREERTOS_Init+0x34>)
 80011da:	2100      	movs	r1, #0
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_FREERTOS_Init+0x38>)
 80011de:	f00a fd97 	bl	800bd10 <osThreadNew>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <MX_FREERTOS_Init+0x3c>)
 80011e6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	0801f9b0 	.word	0x0801f9b0
 80011f0:	08001205 	.word	0x08001205
 80011f4:	2000e318 	.word	0x2000e318
 80011f8:	0801f9d4 	.word	0x0801f9d4
 80011fc:	08001215 	.word	0x08001215
 8001200:	2000e314 	.word	0x2000e314

08001204 <StartHardwareTask>:
 * @brief  Function implementing the hardwareTASK thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartHardwareTask */

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f00a fe57 	bl	800bec0 <osDelay>
 8001212:	e7fb      	b.n	800120c <StartHardwareTask+0x8>

08001214 <StartTouchGFXTask>:
 * @brief Function implementing the touchGFXTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 800121c:	f001 f86b 	bl	80022f6 <MX_TouchGFX_Process>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f00a fe4d 	bl	800bec0 <osDelay>
 8001226:	e7fb      	b.n	8001220 <StartTouchGFXTask+0xc>

08001228 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123e:	4b46      	ldr	r3, [pc, #280]	; (8001358 <MX_GPIO_Init+0x130>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a45      	ldr	r2, [pc, #276]	; (8001358 <MX_GPIO_Init+0x130>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b43      	ldr	r3, [pc, #268]	; (8001358 <MX_GPIO_Init+0x130>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001256:	4b40      	ldr	r3, [pc, #256]	; (8001358 <MX_GPIO_Init+0x130>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a3f      	ldr	r2, [pc, #252]	; (8001358 <MX_GPIO_Init+0x130>)
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <MX_GPIO_Init+0x130>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <MX_GPIO_Init+0x130>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a39      	ldr	r2, [pc, #228]	; (8001358 <MX_GPIO_Init+0x130>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <MX_GPIO_Init+0x130>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	4b34      	ldr	r3, [pc, #208]	; (8001358 <MX_GPIO_Init+0x130>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a33      	ldr	r2, [pc, #204]	; (8001358 <MX_GPIO_Init+0x130>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <MX_GPIO_Init+0x130>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <MX_GPIO_Init+0x130>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a2d      	ldr	r2, [pc, #180]	; (8001358 <MX_GPIO_Init+0x130>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <MX_GPIO_Init+0x130>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <MX_GPIO_Init+0x130>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a27      	ldr	r2, [pc, #156]	; (8001358 <MX_GPIO_Init+0x130>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <MX_GPIO_Init+0x130>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <MX_GPIO_Init+0x130>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a21      	ldr	r2, [pc, #132]	; (8001358 <MX_GPIO_Init+0x130>)
 80012d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_GPIO_Init+0x130>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_GPIO_Init+0x130>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <MX_GPIO_Init+0x130>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_GPIO_Init+0x130>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2104      	movs	r1, #4
 8001302:	4816      	ldr	r0, [pc, #88]	; (800135c <MX_GPIO_Init+0x134>)
 8001304:	f006 fcc8 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ESP_RESET_Pin|ESP_PD_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800130e:	4814      	ldr	r0, [pc, #80]	; (8001360 <MX_GPIO_Init+0x138>)
 8001310:	f006 fcc2 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_LED_Pin;
 8001314:	2304      	movs	r3, #4
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIGNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_GPIO_Init+0x134>)
 800132c:	f006 f9fc 	bl	8007728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ESP_RESET_Pin|ESP_PD_Pin;
 8001330:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_GPIO_Init+0x138>)
 800134a:	f006 f9ed 	bl	8007728 <HAL_GPIO_Init>

}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	; 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40021000 	.word	0x40021000
 8001360:	40020800 	.word	0x40020800

08001364 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_I2C3_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <MX_I2C3_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_I2C3_Init+0x74>)
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <MX_I2C3_Init+0x7c>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_I2C3_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_I2C3_Init+0x74>)
 800137c:	2201      	movs	r2, #1
 800137e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_I2C3_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_I2C3_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_I2C3_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_I2C3_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_I2C3_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <MX_I2C3_Init+0x74>)
 80013a0:	f006 fc94 	bl	8007ccc <HAL_I2C_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80013aa:	f000 fbab 	bl	8001b04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <MX_I2C3_Init+0x74>)
 80013b2:	f006 fd1b 	bl	8007dec <HAL_I2CEx_ConfigAnalogFilter>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013bc:	f000 fba2 	bl	8001b04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_I2C3_Init+0x74>)
 80013c4:	f006 fd5d 	bl	8007e82 <HAL_I2CEx_ConfigDigitalFilter>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013ce:	f000 fb99 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000e31c 	.word	0x2000e31c
 80013dc:	40005c00 	.word	0x40005c00
 80013e0:	00c0eaff 	.word	0x00c0eaff

080013e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0ae      	sub	sp, #184	; 0xb8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2290      	movs	r2, #144	; 0x90
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f01c fd61 	bl	801decc <memset>
  if(i2cHandle->Instance==I2C3)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a33      	ldr	r2, [pc, #204]	; (80014dc <HAL_I2C_MspInit+0xf8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d15f      	bne.n	80014d4 <HAL_I2C_MspInit+0xf0>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001418:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4618      	mov	r0, r3
 8001426:	f008 fae9 	bl	80099fc <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001430:	f000 fb68 	bl	8001b04 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_I2C_MspInit+0xfc>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <HAL_I2C_MspInit+0xfc>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_I2C_MspInit+0xfc>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_I2C_MspInit+0xfc>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <HAL_I2C_MspInit+0xfc>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_I2C_MspInit+0xfc>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146c:	2312      	movs	r3, #18
 800146e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800147e:	2304      	movs	r3, #4
 8001480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001488:	4619      	mov	r1, r3
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <HAL_I2C_MspInit+0x100>)
 800148c:	f006 f94c 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014aa:	2304      	movs	r3, #4
 80014ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014b4:	4619      	mov	r1, r3
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <HAL_I2C_MspInit+0x104>)
 80014b8:	f006 f936 	bl	8007728 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_I2C_MspInit+0xfc>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_I2C_MspInit+0xfc>)
 80014c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_I2C_MspInit+0xfc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014d4:	bf00      	nop
 80014d6:	37b8      	adds	r7, #184	; 0xb8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40005c00 	.word	0x40005c00
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000

080014ec <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	; 0x38
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2234      	movs	r2, #52	; 0x34
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f01c fce7 	bl	801decc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001500:	4a3a      	ldr	r2, [pc, #232]	; (80015ec <MX_LTDC_Init+0x100>)
 8001502:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001504:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <MX_LTDC_Init+0xfc>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001510:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <MX_LTDC_Init+0xfc>)
 800151e:	2203      	movs	r2, #3
 8001520:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001524:	2203      	movs	r2, #3
 8001526:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <MX_LTDC_Init+0xfc>)
 800152a:	220b      	movs	r2, #11
 800152c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001530:	220b      	movs	r2, #11
 8001532:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001536:	f240 322b 	movw	r2, #811	; 0x32b
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <MX_LTDC_Init+0xfc>)
 800153e:	f240 12eb 	movw	r2, #491	; 0x1eb
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001546:	f240 3233 	movw	r2, #819	; 0x333
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 499;
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <MX_LTDC_Init+0xfc>)
 800154e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <MX_LTDC_Init+0xfc>)
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800156c:	481e      	ldr	r0, [pc, #120]	; (80015e8 <MX_LTDC_Init+0xfc>)
 800156e:	f006 fcd5 	bl	8007f1c <HAL_LTDC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001578:	f000 fac4 	bl	8001b04 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001580:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001584:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800158a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800158e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001590:	2301      	movs	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001594:	23ff      	movs	r3, #255	; 0xff
 8001596:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800159c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015a2:	2305      	movs	r3, #5
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80015a6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 80015ac:	f44f 7348 	mov.w	r3, #800	; 0x320
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 80015b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_LTDC_Init+0xfc>)
 80015d2:	f006 fe2b 	bl	800822c <HAL_LTDC_ConfigLayer>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80015dc:	f000 fa92 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3738      	adds	r7, #56	; 0x38
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000e368 	.word	0x2000e368
 80015ec:	40016800 	.word	0x40016800

080015f0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0b4      	sub	sp, #208	; 0xd0
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160c:	2290      	movs	r2, #144	; 0x90
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f01c fc5b 	bl	801decc <memset>
  if(ltdcHandle->Instance==LTDC)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4aa5      	ldr	r2, [pc, #660]	; (80018b0 <HAL_LTDC_MspInit+0x2c0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	f040 8143 	bne.w	80018a8 <HAL_LTDC_MspInit+0x2b8>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001622:	2308      	movs	r3, #8
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001626:	2364      	movs	r3, #100	; 0x64
 8001628:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800162a:	2302      	movs	r3, #2
 800162c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800162e:	2302      	movs	r3, #2
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001632:	2300      	movs	r3, #0
 8001634:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800163a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001644:	4618      	mov	r0, r3
 8001646:	f008 f9d9 	bl	80099fc <HAL_RCCEx_PeriphCLKConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8001650:	f000 fa58 	bl	8001b04 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001654:	4b97      	ldr	r3, [pc, #604]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	4a96      	ldr	r2, [pc, #600]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 800165a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800165e:	6453      	str	r3, [r2, #68]	; 0x44
 8001660:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800166c:	4b91      	ldr	r3, [pc, #580]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	4a90      	ldr	r2, [pc, #576]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6313      	str	r3, [r2, #48]	; 0x30
 8001678:	4b8e      	ldr	r3, [pc, #568]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001684:	4b8b      	ldr	r3, [pc, #556]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a8a      	ldr	r2, [pc, #552]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 800168a:	f043 0320 	orr.w	r3, r3, #32
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169c:	4b85      	ldr	r3, [pc, #532]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a84      	ldr	r2, [pc, #528]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b82      	ldr	r3, [pc, #520]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b7f      	ldr	r3, [pc, #508]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a7e      	ldr	r2, [pc, #504]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b7c      	ldr	r3, [pc, #496]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b79      	ldr	r3, [pc, #484]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a78      	ldr	r2, [pc, #480]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e4:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	4a72      	ldr	r2, [pc, #456]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ee:	6313      	str	r3, [r2, #48]	; 0x30
 80016f0:	4b70      	ldr	r3, [pc, #448]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fc:	4b6d      	ldr	r3, [pc, #436]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	4a6c      	ldr	r2, [pc, #432]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	6313      	str	r3, [r2, #48]	; 0x30
 8001708:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_LTDC_MspInit+0x2c4>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001714:	2370      	movs	r3, #112	; 0x70
 8001716:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800172c:	230e      	movs	r3, #14
 800172e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001732:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001736:	4619      	mov	r1, r3
 8001738:	485f      	ldr	r0, [pc, #380]	; (80018b8 <HAL_LTDC_MspInit+0x2c8>)
 800173a:	f005 fff5 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800173e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001758:	230e      	movs	r3, #14
 800175a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800175e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001762:	4619      	mov	r1, r3
 8001764:	4855      	ldr	r0, [pc, #340]	; (80018bc <HAL_LTDC_MspInit+0x2cc>)
 8001766:	f005 ffdf 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 800176a:	23c1      	movs	r3, #193	; 0xc1
 800176c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001782:	230e      	movs	r3, #14
 8001784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800178c:	4619      	mov	r1, r3
 800178e:	484c      	ldr	r0, [pc, #304]	; (80018c0 <HAL_LTDC_MspInit+0x2d0>)
 8001790:	f005 ffca 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001794:	f240 437e 	movw	r3, #1150	; 0x47e
 8001798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017ae:	230e      	movs	r3, #14
 80017b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017b8:	4619      	mov	r1, r3
 80017ba:	4842      	ldr	r0, [pc, #264]	; (80018c4 <HAL_LTDC_MspInit+0x2d4>)
 80017bc:	f005 ffb4 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c0:	2303      	movs	r3, #3
 80017c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017d8:	2309      	movs	r3, #9
 80017da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017e2:	4619      	mov	r1, r3
 80017e4:	4838      	ldr	r0, [pc, #224]	; (80018c8 <HAL_LTDC_MspInit+0x2d8>)
 80017e6:	f005 ff9f 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80017ea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001804:	230e      	movs	r3, #14
 8001806:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800180e:	4619      	mov	r1, r3
 8001810:	482d      	ldr	r0, [pc, #180]	; (80018c8 <HAL_LTDC_MspInit+0x2d8>)
 8001812:	f005 ff89 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8001816:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 800181a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001830:	230e      	movs	r3, #14
 8001832:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001836:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800183a:	4619      	mov	r1, r3
 800183c:	4823      	ldr	r0, [pc, #140]	; (80018cc <HAL_LTDC_MspInit+0x2dc>)
 800183e:	f005 ff73 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001842:	2348      	movs	r3, #72	; 0x48
 8001844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800185a:	230e      	movs	r3, #14
 800185c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001860:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001864:	4619      	mov	r1, r3
 8001866:	481a      	ldr	r0, [pc, #104]	; (80018d0 <HAL_LTDC_MspInit+0x2e0>)
 8001868:	f005 ff5e 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800186c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001886:	2309      	movs	r3, #9
 8001888:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001890:	4619      	mov	r1, r3
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <HAL_LTDC_MspInit+0x2dc>)
 8001894:	f005 ff48 	bl	8007728 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2105      	movs	r1, #5
 800189c:	2058      	movs	r0, #88	; 0x58
 800189e:	f005 fc27 	bl	80070f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80018a2:	2058      	movs	r0, #88	; 0x58
 80018a4:	f005 fc40 	bl	8007128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80018a8:	bf00      	nop
 80018aa:	37d0      	adds	r7, #208	; 0xd0
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40016800 	.word	0x40016800
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40021400 	.word	0x40021400
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40021800 	.word	0x40021800
 80018d0:	40020c00 	.word	0x40020c00

080018d4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018d8:	f3bf 8f4f 	dsb	sy
}
 80018dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018de:	f3bf 8f6f 	isb	sy
}
 80018e2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <SCB_EnableICache+0x48>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018ec:	f3bf 8f4f 	dsb	sy
}
 80018f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018f2:	f3bf 8f6f 	isb	sy
}
 80018f6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <SCB_EnableICache+0x48>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <SCB_EnableICache+0x48>)
 80018fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001902:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001904:	f3bf 8f4f 	dsb	sy
}
 8001908:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800190a:	f3bf 8f6f 	isb	sy
}
 800190e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <SCB_EnableDCache+0x84>)
 8001928:	2200      	movs	r2, #0
 800192a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800192e:	f3bf 8f4f 	dsb	sy
}
 8001932:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <SCB_EnableDCache+0x84>)
 8001936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800193a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	0b5b      	lsrs	r3, r3, #13
 8001940:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001944:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800194e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001958:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800195e:	4911      	ldr	r1, [pc, #68]	; (80019a4 <SCB_EnableDCache+0x84>)
 8001960:	4313      	orrs	r3, r2
 8001962:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1e5a      	subs	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ef      	bne.n	8001950 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	60fa      	str	r2, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e5      	bne.n	8001946 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800197a:	f3bf 8f4f 	dsb	sy
}
 800197e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <SCB_EnableDCache+0x84>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <SCB_EnableDCache+0x84>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800198c:	f3bf 8f4f 	dsb	sy
}
 8001990:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001992:	f3bf 8f6f 	isb	sy
}
 8001996:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80019ac:	f7ff ff92 	bl	80018d4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80019b0:	f7ff ffb6 	bl	8001920 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b4:	f004 fe12 	bl	80065dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b8:	f000 f822 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019bc:	f7ff fc34 	bl	8001228 <MX_GPIO_Init>
  MX_CRC_Init();
 80019c0:	f7ff fa20 	bl	8000e04 <MX_CRC_Init>
  MX_FMC_Init();
 80019c4:	f7ff fabe 	bl	8000f44 <MX_FMC_Init>
  MX_QUADSPI_Init();
 80019c8:	f000 f8a2 	bl	8001b10 <MX_QUADSPI_Init>
  MX_LTDC_Init();
 80019cc:	f7ff fd8e 	bl	80014ec <MX_LTDC_Init>
  MX_UART5_Init();
 80019d0:	f000 fbb0 	bl	8002134 <MX_UART5_Init>
  MX_I2C3_Init();
 80019d4:	f7ff fcc6 	bl	8001364 <MX_I2C3_Init>
  MX_DMA2D_Init();
 80019d8:	f7ff fa56 	bl	8000e88 <MX_DMA2D_Init>
  MX_TIM3_Init();
 80019dc:	f000 faf8 	bl	8001fd0 <MX_TIM3_Init>
  MX_CAN2_Init();
 80019e0:	f7fe fffe 	bl	80009e0 <MX_CAN2_Init>
  MX_CAN1_Init();
 80019e4:	f7fe ffc4 	bl	8000970 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 80019e8:	f000 fc7f 	bl	80022ea <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 80019ec:	f7fe fdf4 	bl	80005d8 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80019f0:	f00a f924 	bl	800bc3c <osKernelInitialize>
  MX_FREERTOS_Init();
 80019f4:	f7ff fbe6 	bl	80011c4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80019f8:	f00a f954 	bl	800bca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <main+0x54>
	...

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	; 0x50
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	2234      	movs	r2, #52	; 0x34
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f01c fa5c 	bl	801decc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <SystemClock_Config+0xd8>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	4a2b      	ldr	r2, [pc, #172]	; (8001ad8 <SystemClock_Config+0xd8>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <SystemClock_Config+0xd8>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <SystemClock_Config+0xdc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a44:	4a25      	ldr	r2, [pc, #148]	; (8001adc <SystemClock_Config+0xdc>)
 8001a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <SystemClock_Config+0xdc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a60:	2310      	movs	r3, #16
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a64:	2302      	movs	r3, #2
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4618      	mov	r0, r3
 8001a86:	f007 fb03 	bl	8009090 <HAL_RCC_OscConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a90:	f000 f838 	bl	8001b04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a94:	f006 fdda 	bl	800864c <HAL_PWREx_EnableOverDrive>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001a9e:	f000 f831 	bl	8001b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	2103      	movs	r1, #3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f007 fd93 	bl	80095ec <HAL_RCC_ClockConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001acc:	f000 f81a 	bl	8001b04 <Error_Handler>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3750      	adds	r7, #80	; 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001af2:	f004 fd81 	bl	80065f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40001000 	.word	0x40001000

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <Error_Handler+0x8>
	...

08001b10 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_QUADSPI_Init+0x54>)
 8001b18:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 7;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b28:	2210      	movs	r2, #16
 8001b2a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b2e:	2217      	movs	r2, #23
 8001b30:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b34:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001b38:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_QUADSPI_Init+0x50>)
 8001b4e:	f006 fdcd 	bl	80086ec <HAL_QSPI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f7ff ffd4 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000e410 	.word	0x2000e410
 8001b64:	a0001000 	.word	0xa0001000

08001b68 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a35      	ldr	r2, [pc, #212]	; (8001c5c <HAL_QSPI_MspInit+0xf4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d164      	bne.n	8001c54 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_QSPI_MspInit+0xf8>)
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8e:	4a34      	ldr	r2, [pc, #208]	; (8001c60 <HAL_QSPI_MspInit+0xf8>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6393      	str	r3, [r2, #56]	; 0x38
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <HAL_QSPI_MspInit+0xf8>)
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_QSPI_MspInit+0xf8>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	; (8001c60 <HAL_QSPI_MspInit+0xf8>)
 8001ba8:	f043 0320 	orr.w	r3, r3, #32
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <HAL_QSPI_MspInit+0xf8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_QSPI_MspInit+0xf8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <HAL_QSPI_MspInit+0xf8>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_QSPI_MspInit+0xf8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd2:	23c0      	movs	r3, #192	; 0xc0
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001be2:	2309      	movs	r3, #9
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	481d      	ldr	r0, [pc, #116]	; (8001c64 <HAL_QSPI_MspInit+0xfc>)
 8001bee:	f005 fd9b 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c04:	230a      	movs	r3, #10
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4815      	ldr	r0, [pc, #84]	; (8001c64 <HAL_QSPI_MspInit+0xfc>)
 8001c10:	f005 fd8a 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c14:	2304      	movs	r3, #4
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c24:	2309      	movs	r3, #9
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <HAL_QSPI_MspInit+0x100>)
 8001c30:	f005 fd7a 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c34:	2340      	movs	r3, #64	; 0x40
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c44:	230a      	movs	r3, #10
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_QSPI_MspInit+0x100>)
 8001c50:	f005 fd6a 	bl	8007728 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	a0001000 	.word	0xa0001000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40021400 	.word	0x40021400
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_QSPI_MspDeInit+0x38>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10e      	bne.n	8001c9c <HAL_QSPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_QSPI_MspDeInit+0x3c>)
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_QSPI_MspDeInit+0x3c>)
 8001c84:	f023 0302 	bic.w	r3, r3, #2
 8001c88:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001c8a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c8e:	4807      	ldr	r0, [pc, #28]	; (8001cac <HAL_QSPI_MspDeInit+0x40>)
 8001c90:	f005 fef6 	bl	8007a80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8001c94:	2144      	movs	r1, #68	; 0x44
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <HAL_QSPI_MspDeInit+0x44>)
 8001c98:	f005 fef2 	bl	8007a80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	a0001000 	.word	0xa0001000
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40021400 	.word	0x40021400
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_MspInit+0x4c>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	210f      	movs	r1, #15
 8001cee:	f06f 0001 	mvn.w	r0, #1
 8001cf2:	f005 f9fd 	bl	80070f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	2036      	movs	r0, #54	; 0x36
 8001d1a:	f005 f9e9 	bl	80070f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d1e:	2036      	movs	r0, #54	; 0x36
 8001d20:	f005 fa02 	bl	8007128 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <HAL_InitTick+0xa0>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <HAL_InitTick+0xa0>)
 8001d2a:	f043 0310 	orr.w	r3, r3, #16
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_InitTick+0xa0>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d3c:	f107 0210 	add.w	r2, r7, #16
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f007 fe26 	bl	8009998 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d4c:	f007 fdfc 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 8001d50:	4603      	mov	r3, r0
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <HAL_InitTick+0xa4>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9b      	lsrs	r3, r3, #18
 8001d60:	3b01      	subs	r3, #1
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_InitTick+0xa8>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <HAL_InitTick+0xac>)
 8001d68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_InitTick+0xa8>)
 8001d6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_InitTick+0xa8>)
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_InitTick+0xa8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_InitTick+0xa8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <HAL_InitTick+0xa8>)
 8001d86:	f008 fae0 	bl	800a34a <HAL_TIM_Base_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d104      	bne.n	8001d9a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d90:	4806      	ldr	r0, [pc, #24]	; (8001dac <HAL_InitTick+0xa8>)
 8001d92:	f008 fb3b 	bl	800a40c <HAL_TIM_Base_Start_IT>
 8001d96:	4603      	mov	r3, r0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3730      	adds	r7, #48	; 0x30
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	431bde83 	.word	0x431bde83
 8001dac:	2000e45c 	.word	0x2000e45c
 8001db0:	40001000 	.word	0x40001000

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <NMI_Handler+0x4>

08001dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <BusFault_Handler+0x4>

08001dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <UsageFault_Handler+0x4>

08001dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <CAN1_RX0_IRQHandler+0x10>)
 8001de6:	f004 fe9c 	bl	8006b22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000e23c 	.word	0x2000e23c

08001df4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <TIM6_DAC_IRQHandler+0x10>)
 8001dfa:	f008 fbd6 	bl	800a5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000e45c 	.word	0x2000e45c

08001e08 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <CAN2_RX0_IRQHandler+0x10>)
 8001e0e:	f004 fe88 	bl	8006b22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000e1ec 	.word	0x2000e1ec

08001e1c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <LTDC_IRQHandler+0x10>)
 8001e22:	f006 f94b 	bl	80080bc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000e368 	.word	0x2000e368

08001e30 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA2D_IRQHandler+0x10>)
 8001e36:	f005 fac9 	bl	80073cc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000e288 	.word	0x2000e288

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_kill>:

int _kill(int pid, int sig)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e5e:	f01b ffdb 	bl	801de18 <__errno>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2216      	movs	r2, #22
 8001e66:	601a      	str	r2, [r3, #0]
	return -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_exit>:

void _exit (int status)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe7 	bl	8001e54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e86:	e7fe      	b.n	8001e86 <_exit+0x12>

08001e88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e00a      	b.n	8001eb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e9a:	f3af 8000 	nop.w
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	60ba      	str	r2, [r7, #8]
 8001ea6:	b2ca      	uxtb	r2, r1
 8001ea8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	dbf0      	blt.n	8001e9a <_read+0x12>
	}

return len;
 8001eb8:	687b      	ldr	r3, [r7, #4]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e009      	b.n	8001ee8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbf1      	blt.n	8001ed4 <_write+0x12>
	}
	return len;
 8001ef0:	687b      	ldr	r3, [r7, #4]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_close>:

int _close(int file)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
	return -1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f22:	605a      	str	r2, [r3, #4]
	return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_isatty>:

int _isatty(int file)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
	return 1;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	return 0;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f01b ff40 	bl	801de18 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20080000 	.word	0x20080000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	20000110 	.word	0x20000110
 8001fcc:	2000e5d0 	.word	0x2000e5d0

08001fd0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
 8001ff0:	615a      	str	r2, [r3, #20]
 8001ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <MX_TIM3_Init+0xac>)
 8001ff6:	4a22      	ldr	r2, [pc, #136]	; (8002080 <MX_TIM3_Init+0xb0>)
 8001ff8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <MX_TIM3_Init+0xac>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <MX_TIM3_Init+0xac>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <MX_TIM3_Init+0xac>)
 8002008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800200c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <MX_TIM3_Init+0xac>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <MX_TIM3_Init+0xac>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800201a:	4818      	ldr	r0, [pc, #96]	; (800207c <MX_TIM3_Init+0xac>)
 800201c:	f008 fa6e 	bl	800a4fc <HAL_TIM_PWM_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002026:	f7ff fd6d 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4810      	ldr	r0, [pc, #64]	; (800207c <MX_TIM3_Init+0xac>)
 800203a:	f009 f80b 	bl	800b054 <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002044:	f7ff fd5e 	bl	8001b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002048:	2360      	movs	r3, #96	; 0x60
 800204a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	; (800207c <MX_TIM3_Init+0xac>)
 8002060:	f008 fbc2 	bl	800a7e8 <HAL_TIM_PWM_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800206a:	f7ff fd4b 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800206e:	4803      	ldr	r0, [pc, #12]	; (800207c <MX_TIM3_Init+0xac>)
 8002070:	f000 f828 	bl	80020c4 <HAL_TIM_MspPostInit>

}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	; 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000e4a8 	.word	0x2000e4a8
 8002080:	40000400 	.word	0x40000400

08002084 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_TIM_PWM_MspInit+0x38>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10b      	bne.n	80020ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40023800 	.word	0x40023800

080020c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a11      	ldr	r2, [pc, #68]	; (8002128 <HAL_TIM_MspPostInit+0x64>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d11b      	bne.n	800211e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_TIM_MspPostInit+0x68>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a10      	ldr	r2, [pc, #64]	; (800212c <HAL_TIM_MspPostInit+0x68>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_TIM_MspPostInit+0x68>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020fe:	2310      	movs	r3, #16
 8002100:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800210e:	2302      	movs	r3, #2
 8002110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <HAL_TIM_MspPostInit+0x6c>)
 800211a:	f005 fb05 	bl	8007728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800211e:	bf00      	nop
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40000400 	.word	0x40000400
 800212c:	40023800 	.word	0x40023800
 8002130:	40020400 	.word	0x40020400

08002134 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_UART5_Init+0x58>)
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <MX_UART5_Init+0x5c>)
 800213c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <MX_UART5_Init+0x58>)
 8002140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002144:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_UART5_Init+0x58>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_UART5_Init+0x58>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_UART5_Init+0x58>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_UART5_Init+0x58>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_UART5_Init+0x58>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_UART5_Init+0x58>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_UART5_Init+0x58>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_UART5_Init+0x58>)
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_UART5_Init+0x58>)
 8002178:	f009 f818 	bl	800b1ac <HAL_UART_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002182:	f7ff fcbf 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000e4f4 	.word	0x2000e4f4
 8002190:	40005000 	.word	0x40005000

08002194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0ae      	sub	sp, #184	; 0xb8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2290      	movs	r2, #144	; 0x90
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f01b fe89 	bl	801decc <memset>
  if(uartHandle->Instance==UART5)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a32      	ldr	r2, [pc, #200]	; (8002288 <HAL_UART_MspInit+0xf4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d15d      	bne.n	8002280 <HAL_UART_MspInit+0xec>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80021c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80021ca:	2300      	movs	r3, #0
 80021cc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4618      	mov	r0, r3
 80021d4:	f007 fc12 	bl	80099fc <HAL_RCCEx_PeriphCLKConfig>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021de:	f7ff fc91 	bl	8001b04 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_UART_MspInit+0xf8>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a29      	ldr	r2, [pc, #164]	; (800228c <HAL_UART_MspInit+0xf8>)
 80021e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_UART_MspInit+0xf8>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_UART_MspInit+0xf8>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_UART_MspInit+0xf8>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_UART_MspInit+0xf8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_UART_MspInit+0xf8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_UART_MspInit+0xf8>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_UART_MspInit+0xf8>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 800222a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002244:	2308      	movs	r3, #8
 8002246:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800224e:	4619      	mov	r1, r3
 8002250:	480f      	ldr	r0, [pc, #60]	; (8002290 <HAL_UART_MspInit+0xfc>)
 8002252:	f005 fa69 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8002256:	2304      	movs	r3, #4
 8002258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800226e:	2308      	movs	r3, #8
 8002270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8002274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002278:	4619      	mov	r1, r3
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <HAL_UART_MspInit+0x100>)
 800227c:	f005 fa54 	bl	8007728 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8002280:	bf00      	nop
 8002282:	37b8      	adds	r7, #184	; 0xb8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40005000 	.word	0x40005000
 800228c:	40023800 	.word	0x40023800
 8002290:	40020800 	.word	0x40020800
 8002294:	40020c00 	.word	0x40020c00

08002298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800229c:	480d      	ldr	r0, [pc, #52]	; (80022d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800229e:	490e      	ldr	r1, [pc, #56]	; (80022d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b4:	4c0b      	ldr	r4, [pc, #44]	; (80022e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022c2:	f004 f979 	bl	80065b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c6:	f01b fdbf 	bl	801de48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ca:	f7ff fb6d 	bl	80019a8 <main>
  bx  lr    
 80022ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80022dc:	08030a74 	.word	0x08030a74
  ldr r2, =_sbss
 80022e0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80022e4:	2000e5cc 	.word	0x2000e5cc

080022e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC_IRQHandler>

080022ea <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80022ee:	f001 fbaf 	bl	8003a50 <touchgfx_init>
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80022fa:	f001 fbd3 	bl	8003aa4 <touchgfx_taskEntry>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
    {
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	601a      	str	r2, [r3, #0]
    }
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	0801fa18 	.word	0x0801fa18

08002324 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    }
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ffe9 	bl	8002304 <_ZN8touchgfx15TouchControllerD1Ev>
 8002332:	2104      	movs	r1, #4
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f01b fd0e 	bl	801dd56 <_ZdlPvj>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	4a05      	ldr	r2, [pc, #20]	; (8002394 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ffbd 	bl	8002304 <_ZN8touchgfx15TouchControllerD1Ev>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	0801fa00 	.word	0x0801fa00

08002398 <_ZN20STM32TouchControllerD0Ev>:
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffe7 	bl	8002374 <_ZN20STM32TouchControllerD1Ev>
 80023a6:	2104      	movs	r1, #4
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f01b fcd4 	bl	801dd56 <_ZdlPvj>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]

}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	71fb      	strb	r3, [r7, #7]

}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]

}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    {
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	601a      	str	r2, [r3, #0]
    }
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	080206ec 	.word	0x080206ec

0800241c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    }
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ffe9 	bl	80023fc <_ZN8touchgfx3HALD1Ev>
 800242a:	217c      	movs	r1, #124	; 0x7c
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f01b fc92 	bl	801dd56 <_ZdlPvj>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4610      	mov	r0, r2
 8002484:	4798      	blx	r3
 8002486:	4603      	mov	r3, r0
 8002488:	e000      	b.n	800248c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 800248a:	2300      	movs	r3, #0
        }
    }
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f00e f97b 	bl	8010798 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	33a0      	adds	r3, #160	; 0xa0
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
    }
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
    {
        return false;
 80024c0:	2300      	movs	r3, #0
    }
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80024e8:	f44f 7125 	mov.w	r1, #660	; 0x294
 80024ec:	4811      	ldr	r0, [pc, #68]	; (8002534 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80024ee:	f01b fc61 	bl	801ddb4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8002512:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8002522:	701a      	strb	r2, [r3, #0]
    }
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	0801eee0 	.word	0x0801eee0
 8002530:	0801ef18 	.word	0x0801ef18
 8002534:	0801ef68 	.word	0x0801ef68
 8002538:	2000df6e 	.word	0x2000df6e
 800253c:	2000df6f 	.word	0x2000df6f

08002540 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8002548:	2300      	movs	r3, #0
    }
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	4610      	mov	r0, r2
 8002572:	4798      	blx	r3
        }
    }
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3318      	adds	r3, #24
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4610      	mov	r0, r2
 8002594:	4798      	blx	r3
 8002596:	4603      	mov	r3, r0
    }
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d017      	beq.n	80025e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d12a      	bne.n	8002616 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80025c6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80025ca:	881a      	ldrh	r2, [r3, #0]
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80025ce:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80025d2:	881a      	ldrh	r2, [r3, #0]
 80025d4:	4b16      	ldr	r3, [pc, #88]	; (8002630 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80025d6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80025da:	881a      	ldrh	r2, [r3, #0]
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80025de:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80025e6:	e016      	b.n	8002616 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80025f6:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80025fa:	881a      	ldrh	r2, [r3, #0]
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80025fe:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002606:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800260a:	881a      	ldrh	r2, [r3, #0]
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800260e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
    }
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	2000df68 	.word	0x2000df68
 8002628:	2000df64 	.word	0x2000df64
 800262c:	2000df6a 	.word	0x2000df6a
 8002630:	2000df66 	.word	0x2000df66
 8002634:	2000df6c 	.word	0x2000df6c

08002638 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4618      	mov	r0, r3
 8002644:	f00d fa79 	bl	800fb3a <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fecb 	bl	80023fc <_ZN8touchgfx3HALD1Ev>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	0801fd7c 	.word	0x0801fd7c

08002674 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ffe7 	bl	8002650 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002682:	217c      	movs	r1, #124	; 0x7c
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f01b fb66 	bl	801dd56 <_ZdlPvj>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ffca 	bl	8002638 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 fd8a 	bl	80041d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 fe24 	bl	800431c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6839      	ldr	r1, [r7, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 fe23 	bl	8004338 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6839      	ldr	r1, [r7, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f001 fe2b 	bl	8004364 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	f001 fe38 	bl	80043a0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f001 fd75 	bl	8004234 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4618      	mov	r0, r3
 800275e:	f001 fd79 	bl	8004254 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	f001 fd7b 	bl	8004270 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f001 fd7d 	bl	800428c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	4a05      	ldr	r2, [pc, #20]	; (80027bc <_ZN11TouchGFXHALD1Ev+0x20>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff4f 	bl	8002650 <_ZN20TouchGFXGeneratedHALD1Ev>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	0801fa30 	.word	0x0801fa30

080027c0 <_ZN11TouchGFXHALD0Ev>:
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ffe7 	bl	800279c <_ZN11TouchGFXHALD1Ev>
 80027ce:	217c      	movs	r1, #124	; 0x7c
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f01b fac0 	bl	801dd56 <_ZdlPvj>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80027e4:	2200      	movs	r2, #0
 80027e6:	2101      	movs	r1, #1
 80027e8:	2001      	movs	r0, #1
 80027ea:	f009 fb97 	bl	800bf1c <osSemaphoreNew>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80027f2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80027fe:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002800:	2126      	movs	r1, #38	; 0x26
 8002802:	480e      	ldr	r0, [pc, #56]	; (800283c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002804:	f01b fad6 	bl	801ddb4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002808:	2200      	movs	r2, #0
 800280a:	2104      	movs	r1, #4
 800280c:	2001      	movs	r0, #1
 800280e:	f009 fcdf 	bl	800c1d0 <osMessageQueueNew>
 8002812:	4603      	mov	r3, r0
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002816:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8002822:	4a05      	ldr	r2, [pc, #20]	; (8002838 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002824:	212a      	movs	r1, #42	; 0x2a
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002828:	f01b fac4 	bl	801ddb4 <__assert_func>
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000114 	.word	0x20000114
 8002834:	0801efb0 	.word	0x0801efb0
 8002838:	0801effc 	.word	0x0801effc
 800283c:	0801f02c 	.word	0x0801f02c
 8002840:	20000118 	.word	0x20000118
 8002844:	0801f0a8 	.word	0x0801f0a8

08002848 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	4618      	mov	r0, r3
 8002856:	f009 fbfd 	bl	800c054 <osSemaphoreAcquire>
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000114 	.word	0x20000114

08002864 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f009 fc57 	bl	800c120 <osSemaphoreRelease>
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000114 	.word	0x20000114

0800287c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f009 fbe4 	bl	800c054 <osSemaphoreAcquire>
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000114 	.word	0x20000114

08002894 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f009 fc3f 	bl	800c120 <osSemaphoreRelease>
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000114 	.word	0x20000114

080028ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	2300      	movs	r3, #0
 80028b6:	2200      	movs	r2, #0
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80028ba:	f009 fd0f 	bl	800c2dc <osMessageQueuePut>
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000118 	.word	0x20000118
 80028c8:	20000004 	.word	0x20000004

080028cc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	1d39      	adds	r1, r7, #4
 80028d8:	2300      	movs	r3, #0
 80028da:	2200      	movs	r2, #0
 80028dc:	f009 fd72 	bl	800c3c4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	1d39      	adds	r1, r7, #4
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	2200      	movs	r2, #0
 80028ec:	f009 fd6a 	bl	800c3c4 <osMessageQueueGet>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000118 	.word	0x20000118

080028fc <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	4618      	mov	r0, r3
 800290a:	f009 fad9 	bl	800bec0 <osDelay>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0
    osThreadYield();
 800291a:	f009 fa9f 	bl	800be5c <osThreadYield>
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <__NVIC_EnableIRQ>:
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	2b00      	cmp	r3, #0
 8002934:	db0b      	blt.n	800294e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <__NVIC_EnableIRQ+0x38>)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2001      	movs	r0, #1
 8002946:	fa00 f202 	lsl.w	r2, r0, r2
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000e100 	.word	0xe000e100

08002960 <__NVIC_DisableIRQ>:
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	db12      	blt.n	8002998 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	490a      	ldr	r1, [pc, #40]	; (80029a4 <__NVIC_DisableIRQ+0x44>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2001      	movs	r0, #1
 8002982:	fa00 f202 	lsl.w	r2, r0, r2
 8002986:	3320      	adds	r3, #32
 8002988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800298c:	f3bf 8f4f 	dsb	sy
}
 8002990:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002992:	f3bf 8f6f 	isb	sy
}
 8002996:	bf00      	nop
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100

080029a8 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
        : color(0)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    {
    }
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
    {
        return color;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
    }
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
    {
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	601a      	str	r2, [r3, #0]
    }
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	0801fb4c 	.word	0x0801fb4c

080029fc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
    }
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ffe9 	bl	80029dc <_ZN8touchgfx9DMA_QueueD1Ev>
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f01b f9a2 	bl	801dd56 <_ZdlPvj>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3344      	adds	r3, #68	; 0x44
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
    }
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    {
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
    }
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	08020c2c 	.word	0x08020c2c

08002a58 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    }
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ffe9 	bl	8002a38 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002a66:	210c      	movs	r1, #12
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f01b f974 	bl	801dd56 <_ZdlPvj>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	721a      	strb	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	725a      	strb	r2, [r3, #9]
    {
    }
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	08020c2c 	.word	0x08020c2c

08002aac <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002ab4:	2301      	movs	r3, #1
    }
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3328      	adds	r3, #40	; 0x28
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4798      	blx	r3
    }
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
        return instance;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
    }
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	2000df70 	.word	0x2000df70

08002af8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3314      	adds	r3, #20
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4798      	blx	r3
    }
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002b22:	f7ff ffdd 	bl	8002ae0 <_ZN8touchgfx3HAL11getInstanceEv>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ffe5 	bl	8002af8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	330c      	adds	r3, #12
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff30 	bl	80029a8 <_ZN8touchgfx9colortypeC1Ev>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	330c      	adds	r3, #12
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7ff ff87 	bl	8002a78 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002b6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <_ZN10STM32F7DMAC1Ev+0x50>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f103 000c 	add.w	r0, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3320      	adds	r3, #32
 8002b7a:	2260      	movs	r2, #96	; 0x60
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f00d ff75 	bl	8010a6c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3320      	adds	r3, #32
 8002b86:	245f      	movs	r4, #95	; 0x5f
 8002b88:	461d      	mov	r5, r3
 8002b8a:	2c00      	cmp	r4, #0
 8002b8c:	db05      	blt.n	8002b9a <_ZN10STM32F7DMAC1Ev+0x46>
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f7ff ffd1 	bl	8002b36 <_ZN8touchgfx6BlitOpC1Ev>
 8002b94:	3520      	adds	r5, #32
 8002b96:	3c01      	subs	r4, #1
 8002b98:	e7f7      	b.n	8002b8a <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba4:	0801fafc 	.word	0x0801fafc

08002ba8 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <_ZN10STM32F7DMAD1Ev+0x30>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002bb6:	205a      	movs	r0, #90	; 0x5a
 8002bb8:	f7ff fed2 	bl	8002960 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 faad 	bl	8003120 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff35 	bl	8002a38 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	0801fafc 	.word	0x0801fafc

08002bdc <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
}
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ffdf 	bl	8002ba8 <_ZN10STM32F7DMAD1Ev>
 8002bea:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f01b f8b1 	bl	801dd56 <_ZdlPvj>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002c0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c12:	6313      	str	r3, [r2, #48]	; 0x30
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002c26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c2a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002c2c:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4a06      	ldr	r2, [pc, #24]	; (8002c4c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002c32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c36:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8002c3a:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <_ZN10STM32F7DMA10initializeEv+0x54>)
 8002c3c:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002c3e:	205a      	movs	r0, #90	; 0x5a
 8002c40:	f7ff fe70 	bl	8002924 <__NVIC_EnableIRQ>
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	2000e288 	.word	0x2000e288
 8002c54:	08002b1b 	.word	0x08002b1b

08002c58 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	2b0b      	cmp	r3, #11
 8002c6c:	d826      	bhi.n	8002cbc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002cb1 	.word	0x08002cb1
 8002c78:	08002cab 	.word	0x08002cab
 8002c7c:	08002ca5 	.word	0x08002ca5
 8002c80:	08002cbd 	.word	0x08002cbd
 8002c84:	08002cbd 	.word	0x08002cbd
 8002c88:	08002cbd 	.word	0x08002cbd
 8002c8c:	08002cbd 	.word	0x08002cbd
 8002c90:	08002cb7 	.word	0x08002cb7
 8002c94:	08002cb7 	.word	0x08002cb7
 8002c98:	08002cb7 	.word	0x08002cb7
 8002c9c:	08002cb7 	.word	0x08002cb7
 8002ca0:	08002cb7 	.word	0x08002cb7
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
        break;
 8002ca8:	e00e      	b.n	8002cc8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002caa:	2301      	movs	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
        break;
 8002cae:	e00b      	b.n	8002cc8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	60fb      	str	r3, [r7, #12]
        break;
 8002cb4:	e008      	b.n	8002cc8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002cb6:	2305      	movs	r3, #5
 8002cb8:	60fb      	str	r3, [r7, #12]
        break;
 8002cba:	e005      	b.n	8002cc8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8002cbe:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002cc0:	2164      	movs	r1, #100	; 0x64
 8002cc2:	4806      	ldr	r0, [pc, #24]	; (8002cdc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002cc4:	f01b f876 	bl	801ddb4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	0801f0ec 	.word	0x0801f0ec
 8002cd8:	0801f108 	.word	0x0801f108
 8002cdc:	0801f154 	.word	0x0801f154

08002ce0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	2b0a      	cmp	r3, #10
 8002cf4:	d821      	bhi.n	8002d3a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002cf6:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d35 	.word	0x08002d35
 8002d00:	08002d2f 	.word	0x08002d2f
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d3b 	.word	0x08002d3b
 8002d0c:	08002d3b 	.word	0x08002d3b
 8002d10:	08002d3b 	.word	0x08002d3b
 8002d14:	08002d3b 	.word	0x08002d3b
 8002d18:	08002d2f 	.word	0x08002d2f
 8002d1c:	08002d2f 	.word	0x08002d2f
 8002d20:	08002d2f 	.word	0x08002d2f
 8002d24:	08002d2f 	.word	0x08002d2f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
        break;
 8002d2c:	e00b      	b.n	8002d46 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
        break;
 8002d32:	e008      	b.n	8002d46 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002d34:	2302      	movs	r3, #2
 8002d36:	60fb      	str	r3, [r7, #12]
        break;
 8002d38:	e005      	b.n	8002d46 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8002d3e:	2185      	movs	r1, #133	; 0x85
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8002d42:	f01b f837 	bl	801ddb4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	0801f0ec 	.word	0x0801f0ec
 8002d54:	0801f1cc 	.word	0x0801f1cc
 8002d58:	0801f154 	.word	0x0801f154

08002d5c <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002d64:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	7f5b      	ldrb	r3, [r3, #29]
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff67 	bl	8002c58 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002d8a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	7f9b      	ldrb	r3, [r3, #30]
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ff60 	bl	8002c58 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002d98:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	7f9b      	ldrb	r3, [r3, #30]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff9d 	bl	8002ce0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002da6:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	8b5b      	ldrh	r3, [r3, #26]
 8002dac:	461a      	mov	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	8a9b      	ldrh	r3, [r3, #20]
 8002db2:	1ad2      	subs	r2, r2, r3
 8002db4:	4b97      	ldr	r3, [pc, #604]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	8b5b      	ldrh	r3, [r3, #26]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	8a9b      	ldrh	r3, [r3, #20]
 8002dc2:	1ad2      	subs	r2, r2, r3
 8002dc4:	4b93      	ldr	r3, [pc, #588]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002dc6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	8b1b      	ldrh	r3, [r3, #24]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	8a9b      	ldrh	r3, [r3, #20]
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	4b8f      	ldr	r3, [pc, #572]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002dd6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002dd8:	4a8e      	ldr	r2, [pc, #568]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	8adb      	ldrh	r3, [r3, #22]
 8002de2:	461a      	mov	r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	8a9b      	ldrh	r3, [r3, #20]
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	431a      	orrs	r2, r3
 8002dec:	4b89      	ldr	r3, [pc, #548]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	4b87      	ldr	r3, [pc, #540]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002df6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	4b85      	ldr	r3, [pc, #532]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002dfe:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d037      	beq.n	8002e7a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0e:	f200 80e4 	bhi.w	8002fda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e16:	d015      	beq.n	8002e44 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1c:	f200 80dd 	bhi.w	8002fda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d045      	beq.n	8002eb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	f200 80d8 	bhi.w	8002fda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	f000 80c0 	beq.w	8002fb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	f200 80d2 	bhi.w	8002fda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	f000 80a5 	beq.w	8002f86 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	f000 80b7 	beq.w	8002fb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8002e42:	e0ca      	b.n	8002fda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	7f1b      	ldrb	r3, [r3, #28]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4a71      	ldr	r2, [pc, #452]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002e4e:	4b72      	ldr	r3, [pc, #456]	; (8003018 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002e50:	430b      	orrs	r3, r1
 8002e52:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	4c6e      	ldr	r4, [pc, #440]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fdb2 	bl	80029c4 <_ZNK8touchgfx9colortypecvmEv>
 8002e60:	4603      	mov	r3, r0
 8002e62:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e64:	4a6b      	ldr	r2, [pc, #428]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	4b69      	ldr	r3, [pc, #420]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002e70:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002e72:	4b68      	ldr	r3, [pc, #416]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002e74:	4a69      	ldr	r2, [pc, #420]	; (800301c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002e76:	601a      	str	r2, [r3, #0]
        break;
 8002e78:	e0c8      	b.n	800300c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	7f1b      	ldrb	r3, [r3, #28]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	4619      	mov	r1, r3
 8002e82:	4a64      	ldr	r2, [pc, #400]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002e84:	4b66      	ldr	r3, [pc, #408]	; (8003020 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002e86:	430b      	orrs	r3, r1
 8002e88:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	4c61      	ldr	r4, [pc, #388]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fd97 	bl	80029c4 <_ZNK8touchgfx9colortypecvmEv>
 8002e96:	4603      	mov	r3, r0
 8002e98:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e9a:	4a5e      	ldr	r2, [pc, #376]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ea6:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ea8:	4b5a      	ldr	r3, [pc, #360]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002eaa:	4a5c      	ldr	r2, [pc, #368]	; (800301c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002eac:	601a      	str	r2, [r3, #0]
        break;
 8002eae:	e0ad      	b.n	800300c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	7f1b      	ldrb	r3, [r3, #28]
 8002ebe:	061b      	lsls	r3, r3, #24
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	4a53      	ldr	r2, [pc, #332]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ecc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ece:	4a51      	ldr	r2, [pc, #324]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	4b4e      	ldr	r3, [pc, #312]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002eda:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1d1a      	adds	r2, r3, #4
 8002ee0:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d00d      	beq.n	8002f0e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002ef2:	e020      	b.n	8002f36 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002ef4:	4b47      	ldr	r3, [pc, #284]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	8852      	ldrh	r2, [r2, #2]
 8002f00:	3a01      	subs	r2, #1
 8002f02:	0212      	lsls	r2, r2, #8
 8002f04:	4611      	mov	r1, r2
 8002f06:	4a43      	ldr	r2, [pc, #268]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	61d3      	str	r3, [r2, #28]
            break;
 8002f0c:	e019      	b.n	8002f42 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	7f1b      	ldrb	r3, [r3, #28]
 8002f12:	2bff      	cmp	r3, #255	; 0xff
 8002f14:	d101      	bne.n	8002f1a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 8002f16:	2300      	movs	r3, #0
 8002f18:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	8852      	ldrh	r2, [r2, #2]
 8002f26:	3a01      	subs	r2, #1
 8002f28:	0212      	lsls	r2, r2, #8
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	4a39      	ldr	r2, [pc, #228]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f2e:	f043 0310 	orr.w	r3, r3, #16
 8002f32:	61d3      	str	r3, [r2, #28]
            break;
 8002f34:	e005      	b.n	8002f42 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 8002f36:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8002f38:	4a3c      	ldr	r2, [pc, #240]	; (800302c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8002f3a:	21ff      	movs	r1, #255	; 0xff
 8002f3c:	483c      	ldr	r0, [pc, #240]	; (8003030 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8002f3e:	f01a ff39 	bl	801ddb4 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a33      	ldr	r2, [pc, #204]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f48:	f043 0320 	orr.w	r3, r3, #32
 8002f4c:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 8002f64:	f7ff fcd7 	bl	8002916 <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002f68:	e7f1      	b.n	8002f4e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 8002f70:	7ffb      	ldrb	r3, [r7, #31]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002f76:	4b27      	ldr	r3, [pc, #156]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f78:	4a28      	ldr	r2, [pc, #160]	; (800301c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002f7a:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 8002f7c:	e046      	b.n	800300c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002f7e:	4b25      	ldr	r3, [pc, #148]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f80:	4a2c      	ldr	r2, [pc, #176]	; (8003034 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8002f82:	601a      	str	r2, [r3, #0]
      break;
 8002f84:	e042      	b.n	800300c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	7f1b      	ldrb	r3, [r3, #28]
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	4a20      	ldr	r2, [pc, #128]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f98:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002fa6:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002faa:	4a1c      	ldr	r2, [pc, #112]	; (800301c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002fac:	601a      	str	r2, [r3, #0]
        break;
 8002fae:	e02d      	b.n	800300c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	7f1b      	ldrb	r3, [r3, #28]
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002fc4:	4a13      	ldr	r2, [pc, #76]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002fd0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002fd4:	4a11      	ldr	r2, [pc, #68]	; (800301c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002fd6:	601a      	str	r2, [r3, #0]
        break;
 8002fd8:	e018      	b.n	800300c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	7f1b      	ldrb	r3, [r3, #28]
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	7f5a      	ldrb	r2, [r3, #29]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	7f9b      	ldrb	r3, [r3, #30]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d003      	beq.n	8003002 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8002ffe:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8003000:	e003      	b.n	800300a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003004:	f240 2201 	movw	r2, #513	; 0x201
 8003008:	601a      	str	r2, [r3, #0]
        break;
 800300a:	bf00      	nop
    }
}
 800300c:	bf00      	nop
 800300e:	3724      	adds	r7, #36	; 0x24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	4002b000 	.word	0x4002b000
 8003018:	0002000a 	.word	0x0002000a
 800301c:	00020201 	.word	0x00020201
 8003020:	00020009 	.word	0x00020009
 8003024:	ffff00ef 	.word	0xffff00ef
 8003028:	0801f21c 	.word	0x0801f21c
 800302c:	0801f238 	.word	0x0801f238
 8003030:	0801f154 	.word	0x0801f154
 8003034:	00010201 	.word	0x00010201

08003038 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	7f9b      	ldrb	r3, [r3, #30]
 8003046:	4619      	mov	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fe49 	bl	8002ce0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800304e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003050:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	8adb      	ldrh	r3, [r3, #22]
 800305a:	461a      	mov	r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	8a9b      	ldrh	r3, [r3, #20]
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800306e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	8b5b      	ldrh	r3, [r3, #26]
 8003074:	461a      	mov	r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	8a9b      	ldrh	r3, [r3, #20]
 800307a:	1ad2      	subs	r2, r2, r3
 800307c:	4b24      	ldr	r3, [pc, #144]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d12e      	bne.n	80030e6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	8b5b      	ldrh	r3, [r3, #26]
 800308c:	461a      	mov	r2, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	8a9b      	ldrh	r3, [r3, #20]
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003096:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	8b5b      	ldrh	r3, [r3, #26]
 800309c:	461a      	mov	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	8a9b      	ldrh	r3, [r3, #20]
 80030a2:	1ad2      	subs	r2, r2, r3
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030a6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	7f1b      	ldrb	r3, [r3, #28]
 80030b2:	061b      	lsls	r3, r3, #24
 80030b4:	4619      	mov	r1, r3
 80030b6:	4a16      	ldr	r2, [pc, #88]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030b8:	4b16      	ldr	r3, [pc, #88]	; (8003114 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80030ba:	430b      	orrs	r3, r1
 80030bc:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	4c13      	ldr	r4, [pc, #76]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fc7d 	bl	80029c4 <_ZNK8touchgfx9colortypecvmEv>
 80030ca:	4603      	mov	r3, r0
 80030cc:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030d4:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030dc:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 80030e2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80030e4:	e010      	b.n	8003108 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	4c06      	ldr	r4, [pc, #24]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fc63 	bl	80029c4 <_ZNK8touchgfx9colortypecvmEv>
 80030fe:	4603      	mov	r3, r0
 8003100:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8003102:	4b03      	ldr	r3, [pc, #12]	; (8003110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003104:	4a05      	ldr	r2, [pc, #20]	; (800311c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8003106:	601a      	str	r2, [r3, #0]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bd90      	pop	{r4, r7, pc}
 8003110:	4002b000 	.word	0x4002b000
 8003114:	00010009 	.word	0x00010009
 8003118:	00020201 	.word	0x00020201
 800311c:	00030201 	.word	0x00030201

08003120 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	4a05      	ldr	r2, [pc, #20]	; (8003140 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fc53 	bl	80029dc <_ZN8touchgfx9DMA_QueueD1Ev>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	08020c7c 	.word	0x08020c7c

08003144 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ffe7 	bl	8003120 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003152:	2114      	movs	r1, #20
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f01a fdfe 	bl	801dd56 <_ZdlPvj>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	801a      	strh	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	805a      	strh	r2, [r3, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	809a      	strh	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	80da      	strh	r2, [r3, #6]
    {
    }
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800319c:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6013      	str	r3, [r2, #0]
    }
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	2000dfcc 	.word	0x2000dfcc

080031b4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
    {
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
    }
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	0801fd68 	.word	0x0801fd68

080031d4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
    }
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ffe9 	bl	80031b4 <_ZN8touchgfx12FontProviderD1Ev>
 80031e2:	2104      	movs	r1, #4
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f01a fdb6 	bl	801dd56 <_ZdlPvj>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	611a      	str	r2, [r3, #16]
    {
    }
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	0801fd58 	.word	0x0801fd58

08003234 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    {
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	601a      	str	r2, [r3, #0]
    }
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	0801fd58 	.word	0x0801fd58

08003254 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
    }
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ffe9 	bl	8003234 <_ZN8touchgfx7MVPHeapD1Ev>
 8003262:	2114      	movs	r1, #20
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f01a fd76 	bl	801dd56 <_ZdlPvj>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
    {
    }
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
    {
    }
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
    {
    }
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
    {
    }
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
    {
    }
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
    {
    }
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    {
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	601a      	str	r2, [r3, #0]
    }
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	0801fd30 	.word	0x0801fd30

08003318 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
    }
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ffe9 	bl	80032f8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8003326:	2104      	movs	r1, #4
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f01a fd14 	bl	801dd56 <_ZdlPvj>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
    {
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
    }
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	08021160 	.word	0x08021160

08003358 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    }
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ffe9 	bl	8003338 <_ZN8touchgfx3LCDD1Ev>
 8003366:	2108      	movs	r1, #8
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f01a fcf4 	bl	801dd56 <_ZdlPvj>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
    {
    }
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80033a2:	6810      	ldr	r0, [r2, #0]
 80033a4:	6851      	ldr	r1, [r2, #4]
 80033a6:	c303      	stmia	r3!, {r0, r1}
    }
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    {
 80033bc:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
    }
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	0801fd18 	.word	0x0801fd18

080033d4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
    }
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ffe9 	bl	80033b4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80033e2:	2104      	movs	r1, #4
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f01a fcb6 	bl	801dd56 <_ZdlPvj>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	4a05      	ldr	r2, [pc, #20]	; (8003414 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff77 	bl	80032f8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	08021238 	.word	0x08021238

08003418 <_ZN8touchgfx11ApplicationD0Ev>:
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ffe7 	bl	80033f4 <_ZN8touchgfx11ApplicationD1Ev>
 8003426:	f44f 719c 	mov.w	r1, #312	; 0x138
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f01a fc93 	bl	801dd56 <_ZdlPvj>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f804 	bl	8003450 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00f      	beq.n	8003482 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4610      	mov	r0, r2
 8003476:	4798      	blx	r3
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3308      	adds	r3, #8
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4610      	mov	r0, r2
 800349c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff97 	bl	80033f4 <_ZN8touchgfx11ApplicationD1Ev>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	0801fcd4 	.word	0x0801fcd4

080034d4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ffe7 	bl	80034b0 <_ZN8touchgfx14MVPApplicationD1Ev>
 80034e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f01a fc35 	bl	801dd56 <_ZdlPvj>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	4a08      	ldr	r2, [pc, #32]	; (8003524 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fbdf 	bl	8003cd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ffcb 	bl	80034b0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	0801fc78 	.word	0x0801fc78

08003528 <_ZN23FrontendApplicationBaseD0Ev>:
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ffe1 	bl	80034f8 <_ZN23FrontendApplicationBaseD1Ev>
 8003536:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f01a fc0b 	bl	801dd56 <_ZdlPvj>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	4a05      	ldr	r2, [pc, #20]	; (800356c <_ZN19FrontendApplicationD1Ev+0x20>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ffcb 	bl	80034f8 <_ZN23FrontendApplicationBaseD1Ev>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	0801fc34 	.word	0x0801fc34

08003570 <_ZN19FrontendApplicationD0Ev>:
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ffe7 	bl	800354c <_ZN19FrontendApplicationD1Ev>
 800357e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f01a fbe7 	bl	801dd56 <_ZdlPvj>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80035a0:	4618      	mov	r0, r3
 80035a2:	f002 fed1 	bl	8006348 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f00f fa79 	bl	8012aa0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
    {
        app.gotostartScreenNoTransition();
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 f9fe 	bl	80049c4 <_ZN23FrontendApplicationBase27gotostartScreenNoTransitionEv>
    }
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	f7ff fe03 	bl	80031f4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80035ee:	4a04      	ldr	r2, [pc, #16]	; (8003600 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]
    {

    }
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	0801fc20 	.word	0x0801fc20

08003604 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
 8003608:	4801      	ldr	r0, [pc, #4]	; (8003610 <__tcf_0+0xc>)
 800360a:	f000 fa55 	bl	8003ab8 <_ZN12FrontendHeapD1Ev>
 800360e:	bd80      	pop	{r7, pc}
 8003610:	2000011c 	.word	0x2000011c

08003614 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8003618:	4b12      	ldr	r3, [pc, #72]	; (8003664 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f3bf 8f5b 	dmb	ish
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003634:	480b      	ldr	r0, [pc, #44]	; (8003664 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003636:	f01a fb90 	bl	801dd5a <__cxa_guard_acquire>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <_ZN12FrontendHeap11getInstanceEv+0x48>
 800364a:	4807      	ldr	r0, [pc, #28]	; (8003668 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800364c:	f000 f868 	bl	8003720 <_ZN12FrontendHeapC1Ev>
 8003650:	4804      	ldr	r0, [pc, #16]	; (8003664 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003652:	f01a fb8e 	bl	801dd72 <__cxa_guard_release>
 8003656:	4805      	ldr	r0, [pc, #20]	; (800366c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8003658:	f01a fbca 	bl	801ddf0 <atexit>
        return instance;
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 800365e:	4618      	mov	r0, r3
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200004b8 	.word	0x200004b8
 8003668:	2000011c 	.word	0x2000011c
 800366c:	08003605 	.word	0x08003605

08003670 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	4a05      	ldr	r2, [pc, #20]	; (8003690 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fdd7 	bl	8003234 <_ZN8touchgfx7MVPHeapD1Ev>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	0801fc20 	.word	0x0801fc20

08003694 <_ZN16FrontendHeapBaseD0Ev>:
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ffe7 	bl	8003670 <_ZN16FrontendHeapBaseD1Ev>
 80036a2:	2114      	movs	r1, #20
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f01a fb56 	bl	801dd56 <_ZdlPvj>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	f00c f854 	bl	800f76c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80036c4:	4a03      	ldr	r2, [pc, #12]	; (80036d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	0801fbec 	.word	0x0801fbec

080036d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f00c f842 	bl	800f76c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80036e8:	4a03      	ldr	r2, [pc, #12]	; (80036f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	0801fbb8 	.word	0x0801fbb8

080036fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4618      	mov	r0, r3
 8003708:	f00c f830 	bl	800f76c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800370c:	4a03      	ldr	r2, [pc, #12]	; (800371c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	0801fb84 	.word	0x0801fb84

08003720 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b085      	sub	sp, #20
 8003724:	af02      	add	r7, sp, #8
 8003726:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f103 0114 	add.w	r1, r3, #20
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 740b 	add.w	r4, r3, #556	; 0x22c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 7311 	add.w	r3, r3, #580	; 0x244
                     app(model, *this)
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	4623      	mov	r3, r4
 8003746:	f7ff ff43 	bl	80035d0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <_ZN12FrontendHeapC1Ev+0x8c>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3314      	adds	r3, #20
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ffad 	bl	80036b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	332c      	adds	r3, #44	; 0x2c
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ffba 	bl	80036d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff ffc6 	bl	80036fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003776:	4618      	mov	r0, r3
 8003778:	f002 fdd8 	bl	800632c <_ZN5ModelC1Ev>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f503 7011 	add.w	r0, r3, #580	; 0x244
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4619      	mov	r1, r3
 800378c:	f002 fdb8 	bl	8006300 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f7ff ff0b 	bl	80035b6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd90      	pop	{r4, r7, pc}
 80037aa:	bf00      	nop
 80037ac:	0801fb70 	.word	0x0801fb70

080037b0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	801a      	strh	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	805a      	strh	r2, [r3, #2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	809a      	strh	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	80da      	strh	r2, [r3, #6]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	811a      	strh	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	815a      	strh	r2, [r3, #10]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	819a      	strh	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	739a      	strb	r2, [r3, #14]
        {
        }
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ffd5 	bl	80037b0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	611a      	str	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	829a      	strh	r2, [r3, #20]
    {
    }
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800382a:	4a55      	ldr	r2, [pc, #340]	; (8003980 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	615a      	str	r2, [r3, #20]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	619a      	str	r2, [r3, #24]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	331c      	adds	r3, #28
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ffcc 	bl	80037f6 <_ZN8touchgfx8GesturesC1Ev>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3350      	adds	r3, #80	; 0x50
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fc5b 	bl	8003164 <_ZN8touchgfx4RectC1Ev>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	659a      	str	r2, [r3, #88]	; 0x58
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	661a      	str	r2, [r3, #96]	; 0x60
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	671a      	str	r2, [r3, #112]	; 0x70
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8003936:	4a13      	ldr	r2, [pc, #76]	; (8003984 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800393c:	4a12      	ldr	r2, [pc, #72]	; (8003988 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800393e:	8b3b      	ldrh	r3, [r7, #24]
 8003940:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8003942:	4a12      	ldr	r2, [pc, #72]	; (800398c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003944:	8bbb      	ldrh	r3, [r7, #28]
 8003946:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003950:	881a      	ldrh	r2, [r3, #0]
 8003952:	4b10      	ldr	r3, [pc, #64]	; (8003994 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8003954:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003958:	881a      	ldrh	r2, [r3, #0]
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800395c:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800395e:	8b3a      	ldrh	r2, [r7, #24]
 8003960:	8bbb      	ldrh	r3, [r7, #28]
 8003962:	429a      	cmp	r2, r3
 8003964:	bf34      	ite	cc
 8003966:	2301      	movcc	r3, #1
 8003968:	2300      	movcs	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	080206ec 	.word	0x080206ec
 8003984:	2000df70 	.word	0x2000df70
 8003988:	2000df64 	.word	0x2000df64
 800398c:	2000df66 	.word	0x2000df66
 8003990:	2000df68 	.word	0x2000df68
 8003994:	2000df6a 	.word	0x2000df6a
 8003998:	2000df6c 	.word	0x2000df6c

0800399c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	8bbb      	ldrh	r3, [r7, #28]
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	8b3b      	ldrh	r3, [r7, #24]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	f7ff ff2f 	bl	800381c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80039be:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]
    }
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	0801fd7c 	.word	0x0801fd7c

080039d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	8bbb      	ldrh	r3, [r7, #28]
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	8b3b      	ldrh	r3, [r7, #24]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	f7ff ffd3 	bl	800399c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80039f6:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]
    }
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	0801fa30 	.word	0x0801fa30

08003a0c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	0801fa18 	.word	0x0801fa18

08003a2c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ffe8 	bl	8003a0c <_ZN8touchgfx15TouchControllerC1Ev>
 8003a3c:	4a03      	ldr	r2, [pc, #12]	; (8003a4c <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	0801fa00 	.word	0x0801fa00

08003a50 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003a56:	f000 fd6b 	bl	8004530 <_ZN14BitmapDatabase11getInstanceEv>
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	f000 fd72 	bl	8004544 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4619      	mov	r1, r3
 8003a64:	2300      	movs	r3, #0
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f011 fdeb 	bl	8015648 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003a72:	4809      	ldr	r0, [pc, #36]	; (8003a98 <touchgfx_init+0x48>)
 8003a74:	f7ff fb8e 	bl	8003194 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f001 fcbf 	bl	80053fc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003a7e:	4807      	ldr	r0, [pc, #28]	; (8003a9c <touchgfx_init+0x4c>)
 8003a80:	f011 fd24 	bl	80154cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003a84:	f7ff fdc6 	bl	8003614 <_ZN12FrontendHeap11getInstanceEv>
 8003a88:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <touchgfx_init+0x50>)
 8003a8c:	f7fe fe0e 	bl	80026ac <_ZN11TouchGFXHAL10initializeEv>
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}
 8003a98:	20001138 	.word	0x20001138
 8003a9c:	20000008 	.word	0x20000008
 8003aa0:	2000113c 	.word	0x2000113c

08003aa4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <touchgfx_taskEntry+0x10>)
 8003aaa:	f00c f8aa 	bl	800fc02 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	2000113c 	.word	0x2000113c

08003ab8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <_ZN12FrontendHeapD1Ev+0x4c>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fd3d 	bl	800354c <_ZN19FrontendApplicationD1Ev>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 f827 	bl	8003b2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	332c      	adds	r3, #44	; 0x2c
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f844 	bl	8003b70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3314      	adds	r3, #20
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f863 	bl	8003bb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fdbb 	bl	8003670 <_ZN16FrontendHeapBaseD1Ev>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	0801fb70 	.word	0x0801fb70

08003b08 <_ZN12FrontendHeapD0Ev>:
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ffd1 	bl	8003ab8 <_ZN12FrontendHeapD1Ev>
 8003b16:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f01a f91b 	bl	801dd56 <_ZdlPvj>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f00b fe13 	bl	800f768 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	0801fb84 	.word	0x0801fb84

08003b50 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ffe7 	bl	8003b2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003b5e:	2114      	movs	r1, #20
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f01a f8f8 	bl	801dd56 <_ZdlPvj>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	4a05      	ldr	r2, [pc, #20]	; (8003b90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f00b fdf1 	bl	800f768 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	0801fbb8 	.word	0x0801fbb8

08003b94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ffe7 	bl	8003b70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f01a f8d5 	bl	801dd56 <_ZdlPvj>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f00b fdcd 	bl	800f768 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	0801fbec 	.word	0x0801fbec

08003bdc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ffe7 	bl	8003bb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003bea:	2118      	movs	r1, #24
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f01a f8b2 	bl	801dd56 <_ZdlPvj>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fb93 	bl	8003338 <_ZN8touchgfx3LCDD1Ev>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	0802222c 	.word	0x0802222c

08003c20 <_ZN8touchgfx8LCD24bppD0Ev>:
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ffe7 	bl	8003bfc <_ZN8touchgfx8LCD24bppD1Ev>
 8003c2e:	2158      	movs	r1, #88	; 0x58
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f01a f890 	bl	801dd56 <_ZdlPvj>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <_Z41__static_initialization_and_destruction_0ii>:
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d119      	bne.n	8003c84 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d114      	bne.n	8003c84 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003c5a:	4818      	ldr	r0, [pc, #96]	; (8003cbc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003c5c:	f7ff fee6 	bl	8003a2c <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8003c60:	4817      	ldr	r0, [pc, #92]	; (8003cc0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003c62:	f7fe ff77 	bl	8002b54 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8003c66:	4817      	ldr	r0, [pc, #92]	; (8003cc4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003c68:	f013 ffe4 	bl	8017c34 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003c6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003c7c:	4910      	ldr	r1, [pc, #64]	; (8003cc0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003c7e:	4812      	ldr	r0, [pc, #72]	; (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003c80:	f7ff fea8 	bl	80039d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d113      	bne.n	8003cb2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10e      	bne.n	8003cb2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003c94:	480c      	ldr	r0, [pc, #48]	; (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003c96:	f7fe fd81 	bl	800279c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003c9a:	480c      	ldr	r0, [pc, #48]	; (8003ccc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003c9c:	f000 f83a 	bl	8003d14 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8003ca0:	4808      	ldr	r0, [pc, #32]	; (8003cc4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003ca2:	f7ff ffab 	bl	8003bfc <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8003ca6:	4806      	ldr	r0, [pc, #24]	; (8003cc0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003ca8:	f7fe ff7e 	bl	8002ba8 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8003cac:	4803      	ldr	r0, [pc, #12]	; (8003cbc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003cae:	f7fe fb61 	bl	8002374 <_ZN20STM32TouchControllerD1Ev>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200004bc 	.word	0x200004bc
 8003cc0:	200004c0 	.word	0x200004c0
 8003cc4:	200010e0 	.word	0x200010e0
 8003cc8:	2000113c 	.word	0x2000113c
 8003ccc:	20000008 	.word	0x20000008

08003cd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fb67 	bl	80033b4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	0801fcbc 	.word	0x0801fcbc

08003cf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff ffe7 	bl	8003cd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003d02:	2110      	movs	r1, #16
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f01a f826 	bl	801dd56 <_ZdlPvj>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 1; // digital_7_400_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 2; // digital_7_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fa45 	bl	80031b4 <_ZN8touchgfx12FontProviderD1Ev>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	0801fe48 	.word	0x0801fe48

08003d38 <_ZN23ApplicationFontProviderD0Ev>:
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ffe7 	bl	8003d14 <_ZN23ApplicationFontProviderD1Ev>
 8003d46:	2104      	movs	r1, #4
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f01a f804 	bl	801dd56 <_ZdlPvj>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003d60:	2301      	movs	r3, #1
    }
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003d76:	230c      	movs	r3, #12
    }
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003d90:	887a      	ldrh	r2, [r7, #2]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4413      	add	r3, r2
    }
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003db8:	887a      	ldrh	r2, [r7, #2]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4413      	add	r3, r2
    }
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003ddc:	2301      	movs	r3, #1
    }
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003df2:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    }
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	019b      	lsls	r3, r3, #6
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	3308      	adds	r3, #8
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
    }
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	019b      	lsls	r3, r3, #6
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	3308      	adds	r3, #8
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
    }
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003e5a:	2301      	movs	r3, #1
    }
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003e70:	2310      	movs	r3, #16
    }
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	3308      	adds	r3, #8
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4413      	add	r3, r2
    }
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4413      	add	r3, r2
    }
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68d2      	ldr	r2, [r2, #12]
 8003ed2:	1052      	asrs	r2, r2, #1
 8003ed4:	1899      	adds	r1, r3, r2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	e00a      	b.n	8003efe <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68d2      	ldr	r2, [r2, #12]
 8003ef0:	1052      	asrs	r2, r2, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6892      	ldr	r2, [r2, #8]
 8003efa:	4413      	add	r3, r2
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4608      	mov	r0, r1
 8003f00:	4798      	blx	r3
    }
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d107      	bne.n	8003f32 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d001      	beq.n	8003f3c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003f3c:	2300      	movs	r3, #0
    }
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <_GLOBAL__sub_I_touchgfx_init>:
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f52:	2001      	movs	r0, #1
 8003f54:	f7ff fe74 	bl	8003c40 <_Z41__static_initialization_and_destruction_0ii>
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_GLOBAL__sub_D_touchgfx_init>:
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7ff fe6c 	bl	8003c40 <_Z41__static_initialization_and_destruction_0ii>
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	331c      	adds	r3, #28
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
    }
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d105      	bne.n	8003ff0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e027      	b.n	8004040 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d123      	bne.n	800403e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d014      	beq.n	8004028 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3390      	adds	r3, #144	; 0x90
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004012:	429a      	cmp	r2, r3
 8004014:	d008      	beq.n	8004028 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	f083 0301 	eor.w	r3, r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8004028:	2300      	movs	r3, #0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8004036:	2301      	movs	r3, #1
 8004038:	e002      	b.n	8004040 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800403e:	2300      	movs	r3, #0
    }
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	2000df6e 	.word	0x2000df6e

0800404c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <__NVIC_EnableIRQ>:
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	2b00      	cmp	r3, #0
 8004078:	db0b      	blt.n	8004092 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	f003 021f 	and.w	r2, r3, #31
 8004080:	4907      	ldr	r1, [pc, #28]	; (80040a0 <__NVIC_EnableIRQ+0x38>)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2001      	movs	r0, #1
 800408a:	fa00 f202 	lsl.w	r2, r0, r2
 800408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e100 	.word	0xe000e100

080040a4 <__NVIC_DisableIRQ>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	db12      	blt.n	80040dc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	490a      	ldr	r1, [pc, #40]	; (80040e8 <__NVIC_DisableIRQ+0x44>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2001      	movs	r0, #1
 80040c6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ca:	3320      	adds	r3, #32
 80040cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040d0:	f3bf 8f4f 	dsb	sy
}
 80040d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040d6:	f3bf 8f6f 	isb	sy
}
 80040da:	bf00      	nop
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000e100 	.word	0xe000e100

080040ec <__NVIC_SetPriority>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	db0a      	blt.n	8004116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	490c      	ldr	r1, [pc, #48]	; (8004138 <__NVIC_SetPriority+0x4c>)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	0112      	lsls	r2, r2, #4
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	440b      	add	r3, r1
 8004110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004114:	e00a      	b.n	800412c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4908      	ldr	r1, [pc, #32]	; (800413c <__NVIC_SetPriority+0x50>)
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	3b04      	subs	r3, #4
 8004124:	0112      	lsls	r2, r2, #4
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	440b      	add	r3, r1
 800412a:	761a      	strb	r2, [r3, #24]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000e100 	.word	0xe000e100
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004146:	4b21      	ldr	r3, [pc, #132]	; (80041cc <SCB_CleanInvalidateDCache+0x8c>)
 8004148:	2200      	movs	r2, #0
 800414a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800414e:	f3bf 8f4f 	dsb	sy
}
 8004152:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <SCB_CleanInvalidateDCache+0x8c>)
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415a:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	0b5b      	lsrs	r3, r3, #13
 8004160:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004164:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	08db      	lsrs	r3, r3, #3
 800416a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004178:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800417e:	4913      	ldr	r1, [pc, #76]	; (80041cc <SCB_CleanInvalidateDCache+0x8c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	1e5a      	subs	r2, r3, #1
 800418a:	60ba      	str	r2, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d000      	beq.n	800419c <SCB_CleanInvalidateDCache+0x5c>
      do {
 800419a:	e7e9      	b.n	8004170 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1e5a      	subs	r2, r3, #1
 80041a0:	60fa      	str	r2, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf14      	ite	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	2300      	moveq	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d000      	beq.n	80041b2 <SCB_CleanInvalidateDCache+0x72>
    do {
 80041b0:	e7d9      	b.n	8004166 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80041b2:	f3bf 8f4f 	dsb	sy
}
 80041b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041b8:	f3bf 8f6f 	isb	sy
}
 80041bc:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80041d0:	b5b0      	push	{r4, r5, r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4618      	mov	r0, r3
 80041dc:	f00b fcff 	bl	800fbde <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80041e0:	687d      	ldr	r5, [r7, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	335c      	adds	r3, #92	; 0x5c
 80041e8:	681c      	ldr	r4, [r3, #0]
 80041ea:	f00e fd77 	bl	8012cdc <_ZN8touchgfx11Application11getInstanceEv>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4619      	mov	r1, r3
 80041f2:	4628      	mov	r0, r5
 80041f4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	490d      	ldr	r1, [pc, #52]	; (8004230 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff26 	bl	800404c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2101      	movs	r1, #1
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fee1 	bl	8003fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3380      	adds	r3, #128	; 0x80
 8004212:	681c      	ldr	r4, [r3, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	2200      	movs	r2, #0
 8004218:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800421c:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff feaf 	bl	8003f86 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8004228:	bf00      	nop
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bdb0      	pop	{r4, r5, r7, pc}
 8004230:	080028fd 	.word	0x080028fd

08004234 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800423c:	2109      	movs	r1, #9
 800423e:	205a      	movs	r0, #90	; 0x5a
 8004240:	f7ff ff54 	bl	80040ec <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8004244:	2109      	movs	r1, #9
 8004246:	2058      	movs	r0, #88	; 0x58
 8004248:	f7ff ff50 	bl	80040ec <__NVIC_SetPriority>
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800425c:	205a      	movs	r0, #90	; 0x5a
 800425e:	f7ff ff03 	bl	8004068 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8004262:	2058      	movs	r0, #88	; 0x58
 8004264:	f7ff ff00 	bl	8004068 <__NVIC_EnableIRQ>
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004278:	205a      	movs	r0, #90	; 0x5a
 800427a:	f7ff ff13 	bl	80040a4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800427e:	2058      	movs	r0, #88	; 0x58
 8004280:	f7ff ff10 	bl	80040a4 <__NVIC_DisableIRQ>
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	b29b      	uxth	r3, r3
 800429a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80042a6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80042ba:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80042be:	881a      	ldrh	r2, [r3, #0]
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	6353      	str	r3, [r2, #52]	; 0x34
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40016800 	.word	0x40016800
 80042e0:	200011b8 	.word	0x200011b8
 80042e4:	200011ba 	.word	0x200011ba

080042e8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f00b fc5a 	bl	800fbac <_ZN8touchgfx3HAL10beginFrameEv>
 80042f8:	4603      	mov	r3, r0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4618      	mov	r0, r3
 800430e:	f00b fc59 	bl	800fbc4 <_ZN8touchgfx3HAL8endFrameEv>
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40016884 	.word	0x40016884

08004338 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004342:	4a06      	ldr	r2, [pc, #24]	; (800435c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800434a:	2201      	movs	r2, #1
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40016884 	.word	0x40016884
 8004360:	40016800 	.word	0x40016800

08004364 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6839      	ldr	r1, [r7, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f00b fbe7 	bl	800fb46 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 800438e:	f7ff fed7 	bl	8004140 <SCB_CleanInvalidateDCache>
    }
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	f00b fd2e 	bl	800fe16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80043ba:	4603      	mov	r3, r0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 80043e2:	89fa      	ldrh	r2, [r7, #14]
 80043e4:	89bb      	ldrh	r3, [r7, #12]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d304      	bcc.n	80043f4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 80043ea:	89fa      	ldrh	r2, [r7, #14]
 80043ec:	89bb      	ldrh	r3, [r7, #12]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	e000      	b.n	80043f6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40016800 	.word	0x40016800

08004408 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004410:	4b08      	ldr	r3, [pc, #32]	; (8004434 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8004426:	f7ff fe8b 	bl	8004140 <SCB_CleanInvalidateDCache>
    }
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8004456:	f7ff fe73 	bl	8004140 <SCB_CleanInvalidateDCache>
    }
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_LTDC_LineEventCallback+0x74>)
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	4a1a      	ldr	r2, [pc, #104]	; (80044e0 <HAL_LTDC_LineEventCallback+0x78>)
 8004476:	8812      	ldrh	r2, [r2, #0]
 8004478:	4293      	cmp	r3, r2
 800447a:	bf0c      	ite	eq
 800447c:	2301      	moveq	r3, #1
 800447e:	2300      	movne	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d017      	beq.n	80044b6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <HAL_LTDC_LineEventCallback+0x7c>)
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f003 ff0b 	bl	80082a8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8004492:	f7fe fb25 	bl	8002ae0 <_ZN8touchgfx3HAL11getInstanceEv>
 8004496:	4603      	mov	r3, r0
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fd84 	bl	8003fa6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800449e:	f7fe fa05 	bl	80028ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80044a2:	f7fe fb1d 	bl	8002ae0 <_ZN8touchgfx3HAL11getInstanceEv>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f00c f975 	bl	8010798 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7fd ff82 	bl	80023b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80044b4:	e00e      	b.n	80044d4 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_LTDC_LineEventCallback+0x78>)
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	4619      	mov	r1, r3
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f003 fef3 	bl	80082a8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80044c2:	2000      	movs	r0, #0
 80044c4:	f7fd ff83 	bl	80023ce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80044c8:	f7fe fb0a 	bl	8002ae0 <_ZN8touchgfx3HAL11getInstanceEv>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fd4b 	bl	8003f6a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40016800 	.word	0x40016800
 80044e0:	200011b8 	.word	0x200011b8
 80044e4:	200011ba 	.word	0x200011ba

080044e8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d010      	beq.n	800451c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	dc13      	bgt.n	8004526 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8004502:	2b01      	cmp	r3, #1
 8004504:	d005      	beq.n	8004512 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8004506:	e00e      	b.n	8004526 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::TYPOGRAPHY_00:
        // digital_7_200_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8004508:	f000 fff0 	bl	80054ec <_ZN17TypedTextDatabase8getFontsEv>
 800450c:	4603      	mov	r3, r0
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	e00a      	b.n	8004528 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::TYPOGRAPHY_01:
        // digital_7_400_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8004512:	f000 ffeb 	bl	80054ec <_ZN17TypedTextDatabase8getFontsEv>
 8004516:	4603      	mov	r3, r0
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	e005      	b.n	8004528 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::TYPOGRAPHY_02:
        // digital_7_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800451c:	f000 ffe6 	bl	80054ec <_ZN17TypedTextDatabase8getFontsEv>
 8004520:	4603      	mov	r3, r0
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	e000      	b.n	8004528 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8004526:	2300      	movs	r3, #0
    }
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
    return bitmap_database;
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	0801fe54 	.word	0x0801fe54

08004544 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8004548:	2303      	movs	r3, #3
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
    {
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
    }
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	0801ff54 	.word	0x0801ff54

08004574 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    }
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ffe9 	bl	8004554 <_ZN8touchgfx4FontD1Ev>
 8004582:	2110      	movs	r1, #16
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f019 fbe6 	bl	801dd56 <_ZdlPvj>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80045a0:	887b      	ldrh	r3, [r7, #2]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e010      	b.n	80045cc <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3308      	adds	r3, #8
 80045b8:	681c      	ldr	r4, [r3, #0]
 80045ba:	f107 030f 	add.w	r3, r7, #15
 80045be:	f107 0210 	add.w	r2, r7, #16
 80045c2:	8879      	ldrh	r1, [r7, #2]
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	47a0      	blx	r4
 80045c8:	6178      	str	r0, [r7, #20]
        return glyph;
 80045ca:	697b      	ldr	r3, [r7, #20]
    }
 80045cc:	4618      	mov	r0, r3
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd90      	pop	{r4, r7, pc}

080045d4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	895b      	ldrh	r3, [r3, #10]
    }
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	899b      	ldrh	r3, [r3, #12]
    }
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	889b      	ldrh	r3, [r3, #4]
    }
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	889a      	ldrh	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	799b      	ldrb	r3, [r3, #6]
 800462c:	b29b      	uxth	r3, r3
 800462e:	4413      	add	r3, r2
 8004630:	b29b      	uxth	r3, r3
    }
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	79db      	ldrb	r3, [r3, #7]
 800464a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800464e:	b2db      	uxtb	r3, r3
    }
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	79db      	ldrb	r3, [r3, #7]
 8004668:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800466c:	b2db      	uxtb	r3, r3
    }
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	4a05      	ldr	r2, [pc, #20]	; (800469c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff ff61 	bl	8004554 <_ZN8touchgfx4FontD1Ev>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	0802138c 	.word	0x0802138c

080046a0 <_ZN8touchgfx9ConstFontD0Ev>:
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ffe7 	bl	800467c <_ZN8touchgfx9ConstFontD1Ev>
 80046ae:	2118      	movs	r1, #24
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f019 fb50 	bl	801dd56 <_ZdlPvj>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ffd3 	bl	800467c <_ZN8touchgfx9ConstFontD1Ev>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	0801fef0 	.word	0x0801fef0

080046e4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ffe7 	bl	80046c0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80046f2:	2128      	movs	r1, #40	; 0x28
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f019 fb2e 	bl	801dd56 <_ZdlPvj>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
    {
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
    }
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	0801fe98 	.word	0x0801fe98

08004724 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
    }
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ffe9 	bl	8004704 <_ZN8touchgfx9TypedTextD1Ev>
 8004732:	2108      	movs	r1, #8
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f019 fb0e 	bl	801dd56 <_ZdlPvj>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8004764:	4a07      	ldr	r2, [pc, #28]	; (8004784 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	721a      	strb	r2, [r3, #8]
    {
    }
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	0801fecc 	.word	0x0801fecc

08004788 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
    {
 8004790:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]
    }
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	0801fecc 	.word	0x0801fecc

080047a8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
    }
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ffe9 	bl	8004788 <_ZN8touchgfx10TransitionD1Ev>
 80047b6:	210c      	movs	r1, #12
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f019 facc 	bl	801dd56 <_ZdlPvj>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
    {
    }
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
    {
    }
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
    {
    }
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800480c:	f00e fa66 	bl	8012cdc <_ZN8touchgfx11Application11getInstanceEv>
 8004810:	4603      	mov	r3, r0
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	3230      	adds	r2, #48	; 0x30
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	4790      	blx	r2
    }
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	605a      	str	r2, [r3, #4]
    }
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4618      	mov	r0, r3
 800484c:	f00e fa68 	bl	8012d20 <_ZN8touchgfx11ApplicationC1Ev>
 8004850:	4a09      	ldr	r2, [pc, #36]	; (8004878 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a04      	ldr	r2, [pc, #16]	; (800487c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800486a:	6013      	str	r3, [r2, #0]
    }
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	0801fcd4 	.word	0x0801fcd4
 800487c:	2000dfbc 	.word	0x2000dfbc

08004880 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	601a      	str	r2, [r3, #0]
    }
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	721a      	strb	r2, [r3, #8]
    }
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	605a      	str	r2, [r3, #4]
    }
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f4:	e002      	b.n	80048fc <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 80048f6:	4b04      	ldr	r3, [pc, #16]	; (8004908 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
    }
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	2000df70 	.word	0x2000df70

0800490c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/mainView.hpp>
#include <gui/main_screen/mainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ff90 	bl	8004840 <_ZN8touchgfx14MVPApplicationC1Ev>
 8004920:	4a13      	ldr	r2, [pc, #76]	; (8004970 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800492c:	4618      	mov	r0, r3
 800492e:	f000 f89f 	bl	8004a70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004942:	f7fe f8cd 	bl	8002ae0 <_ZN8touchgfx3HAL11getInstanceEv>
 8004946:	4603      	mov	r3, r0
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	3208      	adds	r2, #8
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004954:	2000      	movs	r0, #0
 8004956:	f000 fd51 	bl	80053fc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800495a:	f7ff ffbb 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 800495e:	4603      	mov	r3, r0
 8004960:	4618      	mov	r0, r3
 8004962:	f014 fa48 	bl	8018df6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	0801fc78 	.word	0x0801fc78

08004974 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff ffe9 	bl	8004974 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	3308      	adds	r3, #8
 80049b0:	3208      	adds	r2, #8
 80049b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <_ZN23FrontendApplicationBase27gotostartScreenNoTransitionEv>:
 */

// start

void FrontendApplicationBase::gotostartScreenNoTransition()
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotostartScreenNoTransitionImpl);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <_ZN23FrontendApplicationBase27gotostartScreenNoTransitionEv+0x50>)
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	f107 0008 	add.w	r0, r7, #8
 80049de:	f107 0318 	add.w	r3, r7, #24
 80049e2:	cb0c      	ldmia	r3, {r2, r3}
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	f000 f85f 	bl	8004aa8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80049ea:	f107 0308 	add.w	r3, r7, #8
 80049ee:	4619      	mov	r1, r3
 80049f0:	4620      	mov	r0, r4
 80049f2:	f7ff ffcb 	bl	800498c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80049f6:	f107 0308 	add.w	r3, r7, #8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff f968 	bl	8003cd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004a0c:	bf00      	nop
 8004a0e:	3724      	adds	r7, #36	; 0x24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	08004a19 	.word	0x08004a19

08004a18 <_ZN23FrontendApplicationBase31gotostartScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotostartScreenNoTransitionImpl()
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<startView, startPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <_ZN23FrontendApplicationBase31gotostartScreenNoTransitionImplEv+0x30>)
 8004a38:	4804      	ldr	r0, [pc, #16]	; (8004a4c <_ZN23FrontendApplicationBase31gotostartScreenNoTransitionImplEv+0x34>)
 8004a3a:	f000 f867 	bl	8004b0c <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	2000dfb0 	.word	0x2000dfb0
 8004a4c:	2000dfac 	.word	0x2000dfac

08004a50 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	0801fd18 	.word	0x0801fd18

08004a70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff ffe8 	bl	8004a50 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004a80:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	605a      	str	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	60da      	str	r2, [r3, #12]
    }
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	0801fcbc 	.word	0x0801fcbc

08004aa8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ffc8 	bl	8004a50 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004ac0:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	605a      	str	r2, [r3, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	463a      	mov	r2, r7
 8004ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ad6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	0801fcbc 	.word	0x0801fcbc

08004ae8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fe32 	bl	800475c <_ZN8touchgfx10TransitionC1Ev>
 8004af8:	4a03      	ldr	r2, [pc, #12]	; (8004b08 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	0801fea8 	.word	0x0801fea8

08004b0c <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b08f      	sub	sp, #60	; 0x3c
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3320      	adds	r3, #32
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4610      	mov	r0, r2
 8004b2a:	4798      	blx	r3
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b32:	d205      	bcs.n	8004b40 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004b34:	4b7e      	ldr	r3, [pc, #504]	; (8004d30 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004b36:	4a7f      	ldr	r2, [pc, #508]	; (8004d34 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b38:	21a3      	movs	r1, #163	; 0xa3
 8004b3a:	487f      	ldr	r0, [pc, #508]	; (8004d38 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004b3c:	f019 f93a 	bl	801ddb4 <__assert_func>
 8004b40:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3320      	adds	r3, #32
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4610      	mov	r0, r2
 8004b52:	4798      	blx	r3
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	d805      	bhi.n	8004b66 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004b5a:	4b78      	ldr	r3, [pc, #480]	; (8004d3c <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004b5c:	4a75      	ldr	r2, [pc, #468]	; (8004d34 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b5e:	21a4      	movs	r1, #164	; 0xa4
 8004b60:	4875      	ldr	r0, [pc, #468]	; (8004d38 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004b62:	f019 f927 	bl	801ddb4 <__assert_func>
 8004b66:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3320      	adds	r3, #32
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4610      	mov	r0, r2
 8004b78:	4798      	blx	r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b0b      	cmp	r3, #11
 8004b7e:	d805      	bhi.n	8004b8c <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004b80:	4b6f      	ldr	r3, [pc, #444]	; (8004d40 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004b82:	4a6c      	ldr	r2, [pc, #432]	; (8004d34 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b84:	21a5      	movs	r1, #165	; 0xa5
 8004b86:	486c      	ldr	r0, [pc, #432]	; (8004d38 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004b88:	f019 f914 	bl	801ddb4 <__assert_func>
 8004b8c:	bf00      	nop
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004b9a:	f00e f89f 	bl	8012cdc <_ZN8touchgfx11Application11getInstanceEv>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f00e f8a1 	bl	8012ce8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4798      	blx	r3
    if (*currentTrans)
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4798      	blx	r3
    if (*currentScreen)
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3314      	adds	r3, #20
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4798      	blx	r3
    if (*currentPresenter)
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3304      	adds	r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4798      	blx	r3
    if (*currentScreen)
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4610      	mov	r0, r2
 8004c22:	4798      	blx	r3
    if (*currentPresenter)
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4798      	blx	r3
}
 8004c3e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f87c 	bl	8004d44 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4619      	mov	r1, r3
 8004c50:	200c      	movs	r0, #12
 8004c52:	f7ff fd77 	bl	8004744 <_ZnwjPv>
 8004c56:	4604      	mov	r4, r0
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f7ff ff45 	bl	8004ae8 <_ZN8touchgfx12NoTransitionC1Ev>
 8004c5e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2100      	movs	r1, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f87f 	bl	8004d6a <_ZN8touchgfx17AbstractPartition2atI9startViewEERT_t>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8004c74:	f7ff fd66 	bl	8004744 <_ZnwjPv>
 8004c78:	4604      	mov	r4, r0
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f001 fc72 	bl	8006564 <_ZN9startViewC1Ev>
 8004c80:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f881 	bl	8004d90 <_ZN8touchgfx17AbstractPartition2atI14startPresenterEERT_t>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4619      	mov	r1, r3
 8004c92:	2010      	movs	r0, #16
 8004c94:	f7ff fd56 	bl	8004744 <_ZnwjPv>
 8004c98:	4604      	mov	r4, r0
 8004c9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f001 fc09 	bl	80064b4 <_ZN14startPresenterC1ER9startView>
 8004ca2:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cae:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	e000      	b.n	8004cc4 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004cc8:	f7ff fdda 	bl	8004880 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	3304      	adds	r3, #4
 8004cd0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fdef 	bl	80048b6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f86a 	bl	8004db6 <_ZN8touchgfx4ViewI14startPresenterE4bindERS1_>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cec:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69f8      	ldr	r0, [r7, #28]
 8004cf8:	4798      	blx	r3
    newPresenter->activate();
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69b8      	ldr	r0, [r7, #24]
 8004d02:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	69f8      	ldr	r0, [r7, #28]
 8004d08:	f00f fc37 	bl	801457a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3310      	adds	r3, #16
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	4798      	blx	r3
    newTransition->invalidate();
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6978      	ldr	r0, [r7, #20]
 8004d22:	4798      	blx	r3
}
 8004d24:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	373c      	adds	r7, #60	; 0x3c
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd90      	pop	{r4, r7, pc}
 8004d30:	0801f278 	.word	0x0801f278
 8004d34:	0801f308 	.word	0x0801f308
 8004d38:	0801f408 	.word	0x0801f408
 8004d3c:	0801f450 	.word	0x0801f450
 8004d40:	0801f4f4 	.word	0x0801f4f4

08004d44 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3324      	adds	r3, #36	; 0x24
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	887a      	ldrh	r2, [r7, #2]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
 8004d60:	4603      	mov	r3, r0
    }
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <_ZN8touchgfx17AbstractPartition2atI9startViewEERT_t>:
    T& at(const uint16_t index)
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3324      	adds	r3, #36	; 0x24
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	4611      	mov	r1, r2
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
 8004d86:	4603      	mov	r3, r0
    }
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <_ZN8touchgfx17AbstractPartition2atI14startPresenterEERT_t>:
    T& at(const uint16_t index)
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3324      	adds	r3, #36	; 0x24
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	887a      	ldrh	r2, [r7, #2]
 8004da6:	4611      	mov	r1, r2
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
 8004dac:	4603      	mov	r3, r0
    }
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <_ZN8touchgfx4ViewI14startPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <_ZN8touchgfx12NoTransitionD1Ev>:
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	4a05      	ldr	r2, [pc, #20]	; (8004df4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fccf 	bl	8004788 <_ZN8touchgfx10TransitionD1Ev>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	0801fea8 	.word	0x0801fea8

08004df8 <_ZN8touchgfx12NoTransitionD0Ev>:
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ffe7 	bl	8004dd4 <_ZN8touchgfx12NoTransitionD1Ev>
 8004e06:	210c      	movs	r1, #12
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f018 ffa4 	bl	801dd56 <_ZdlPvj>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4618      	mov	r0, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
    }
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08c      	sub	sp, #48	; 0x30
 8004e4c:	af08      	add	r7, sp, #32
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4611      	mov	r1, r2
 8004e54:	461a      	mov	r2, r3
 8004e56:	460b      	mov	r3, r1
 8004e58:	80fb      	strh	r3, [r7, #6]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	88b9      	ldrh	r1, [r7, #4]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e66:	9306      	str	r3, [sp, #24]
 8004e68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e6a:	9305      	str	r3, [sp, #20]
 8004e6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e70:	9304      	str	r3, [sp, #16]
 8004e72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e76:	9303      	str	r3, [sp, #12]
 8004e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e7c:	9302      	str	r3, [sp, #8]
 8004e7e:	7f3b      	ldrb	r3, [r7, #28]
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	7e3b      	ldrb	r3, [r7, #24]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	460b      	mov	r3, r1
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	f00e ff5d 	bl	8013d48 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e98:	619a      	str	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9e:	61da      	str	r2, [r3, #28]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ea4:	621a      	str	r2, [r3, #32]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	0801fef0 	.word	0x0801fef0

08004ebc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	889b      	ldrh	r3, [r3, #4]
 8004ed0:	0adb      	lsrs	r3, r3, #11
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4413      	add	r3, r2
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b089      	sub	sp, #36	; 0x24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7b1b      	ldrb	r3, [r3, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e030      	b.n	8004f70 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	7b5b      	ldrb	r3, [r3, #13]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	b21b      	sxth	r3, r3
 8004f1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f22:	b219      	sxth	r1, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	7adb      	ldrb	r3, [r3, #11]
 8004f28:	b21b      	sxth	r3, r3
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	7b1b      	ldrb	r3, [r3, #12]
 8004f3a:	837b      	strh	r3, [r7, #26]
 8004f3c:	8b7b      	ldrh	r3, [r7, #26]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d015      	beq.n	8004f6e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	897a      	ldrh	r2, [r7, #10]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d103      	bne.n	8004f54 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004f52:	e00d      	b.n	8004f70 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	897a      	ldrh	r2, [r7, #10]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d306      	bcc.n	8004f6c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004f5e:	8b7b      	ldrh	r3, [r7, #26]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	837b      	strh	r3, [r7, #26]
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3304      	adds	r3, #4
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	e7e7      	b.n	8004f3c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8004f6c:	bf00      	nop
        }
    }
    return 0;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3724      	adds	r7, #36	; 0x24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <__tcf_0>:

touchgfx::GeneratedFont& getFont_digital_7_200_4bpp();

touchgfx::GeneratedFont& getFont_digital_7_200_4bpp()
{
    static touchgfx::GeneratedFont digital_7_200_4bpp(glyphs_digital_7_200_4bpp, 4, 200, 0, 4, 1, 0, 0, unicodes_digital_7_200_4bpp, kerning_digital_7_200_4bpp, 63, 0, 0, 0);
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <__tcf_0+0xc>)
 8004f82:	f7ff fb9d 	bl	80046c0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	200011bc 	.word	0x200011bc

08004f8c <_Z26getFont_digital_7_200_4bppv>:
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont digital_7_200_4bpp(glyphs_digital_7_200_4bpp, 4, 200, 0, 4, 1, 0, 0, unicodes_digital_7_200_4bpp, kerning_digital_7_200_4bpp, 63, 0, 0, 0);
 8004f92:	4b1f      	ldr	r3, [pc, #124]	; (8005010 <_Z26getFont_digital_7_200_4bppv+0x84>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	f3bf 8f5b 	dmb	ish
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02c      	beq.n	8005008 <_Z26getFont_digital_7_200_4bppv+0x7c>
 8004fae:	4818      	ldr	r0, [pc, #96]	; (8005010 <_Z26getFont_digital_7_200_4bppv+0x84>)
 8004fb0:	f018 fed3 	bl	801dd5a <__cxa_guard_acquire>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf14      	ite	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	2300      	moveq	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d021      	beq.n	8005008 <_Z26getFont_digital_7_200_4bppv+0x7c>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9309      	str	r3, [sp, #36]	; 0x24
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9308      	str	r3, [sp, #32]
 8004fd0:	233f      	movs	r3, #63	; 0x3f
 8004fd2:	9307      	str	r3, [sp, #28]
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <_Z26getFont_digital_7_200_4bppv+0x88>)
 8004fd6:	9306      	str	r3, [sp, #24]
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <_Z26getFont_digital_7_200_4bppv+0x8c>)
 8004fda:	9305      	str	r3, [sp, #20]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9303      	str	r3, [sp, #12]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	9302      	str	r3, [sp, #8]
 8004fe8:	2304      	movs	r3, #4
 8004fea:	9301      	str	r3, [sp, #4]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	23c8      	movs	r3, #200	; 0xc8
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	4909      	ldr	r1, [pc, #36]	; (800501c <_Z26getFont_digital_7_200_4bppv+0x90>)
 8004ff6:	480a      	ldr	r0, [pc, #40]	; (8005020 <_Z26getFont_digital_7_200_4bppv+0x94>)
 8004ff8:	f7ff ff26 	bl	8004e48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004ffc:	4804      	ldr	r0, [pc, #16]	; (8005010 <_Z26getFont_digital_7_200_4bppv+0x84>)
 8004ffe:	f018 feb8 	bl	801dd72 <__cxa_guard_release>
 8005002:	4808      	ldr	r0, [pc, #32]	; (8005024 <_Z26getFont_digital_7_200_4bppv+0x98>)
 8005004:	f018 fef4 	bl	801ddf0 <atexit>
    return digital_7_200_4bpp;
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <_Z26getFont_digital_7_200_4bppv+0x94>)
}
 800500a:	4618      	mov	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	200011e4 	.word	0x200011e4
 8005014:	080309e8 	.word	0x080309e8
 8005018:	0801ff40 	.word	0x0801ff40
 800501c:	080308d0 	.word	0x080308d0
 8005020:	200011bc 	.word	0x200011bc
 8005024:	08004f7d 	.word	0x08004f7d

08005028 <__tcf_0>:

touchgfx::GeneratedFont& getFont_digital_7_20_4bpp();

touchgfx::GeneratedFont& getFont_digital_7_20_4bpp()
{
    static touchgfx::GeneratedFont digital_7_20_4bpp(glyphs_digital_7_20_4bpp, 14, 20, 0, 4, 1, 0, 0, unicodes_digital_7_20_4bpp, kerning_digital_7_20_4bpp, 63, 0, 0, 0);
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
 800502c:	4801      	ldr	r0, [pc, #4]	; (8005034 <__tcf_0+0xc>)
 800502e:	f7ff fb47 	bl	80046c0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005032:	bd80      	pop	{r7, pc}
 8005034:	200011e8 	.word	0x200011e8

08005038 <_Z25getFont_digital_7_20_4bppv>:
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08c      	sub	sp, #48	; 0x30
 800503c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont digital_7_20_4bpp(glyphs_digital_7_20_4bpp, 14, 20, 0, 4, 1, 0, 0, unicodes_digital_7_20_4bpp, kerning_digital_7_20_4bpp, 63, 0, 0, 0);
 800503e:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <_Z25getFont_digital_7_20_4bppv+0x84>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	f3bf 8f5b 	dmb	ish
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d02c      	beq.n	80050b4 <_Z25getFont_digital_7_20_4bppv+0x7c>
 800505a:	4818      	ldr	r0, [pc, #96]	; (80050bc <_Z25getFont_digital_7_20_4bppv+0x84>)
 800505c:	f018 fe7d 	bl	801dd5a <__cxa_guard_acquire>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d021      	beq.n	80050b4 <_Z25getFont_digital_7_20_4bppv+0x7c>
 8005070:	2300      	movs	r3, #0
 8005072:	930a      	str	r3, [sp, #40]	; 0x28
 8005074:	2300      	movs	r3, #0
 8005076:	9309      	str	r3, [sp, #36]	; 0x24
 8005078:	2300      	movs	r3, #0
 800507a:	9308      	str	r3, [sp, #32]
 800507c:	233f      	movs	r3, #63	; 0x3f
 800507e:	9307      	str	r3, [sp, #28]
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <_Z25getFont_digital_7_20_4bppv+0x88>)
 8005082:	9306      	str	r3, [sp, #24]
 8005084:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <_Z25getFont_digital_7_20_4bppv+0x8c>)
 8005086:	9305      	str	r3, [sp, #20]
 8005088:	2300      	movs	r3, #0
 800508a:	9304      	str	r3, [sp, #16]
 800508c:	2300      	movs	r3, #0
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	2301      	movs	r3, #1
 8005092:	9302      	str	r3, [sp, #8]
 8005094:	2304      	movs	r3, #4
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	2300      	movs	r3, #0
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2314      	movs	r3, #20
 800509e:	220e      	movs	r2, #14
 80050a0:	4909      	ldr	r1, [pc, #36]	; (80050c8 <_Z25getFont_digital_7_20_4bppv+0x90>)
 80050a2:	480a      	ldr	r0, [pc, #40]	; (80050cc <_Z25getFont_digital_7_20_4bppv+0x94>)
 80050a4:	f7ff fed0 	bl	8004e48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80050a8:	4804      	ldr	r0, [pc, #16]	; (80050bc <_Z25getFont_digital_7_20_4bppv+0x84>)
 80050aa:	f018 fe62 	bl	801dd72 <__cxa_guard_release>
 80050ae:	4808      	ldr	r0, [pc, #32]	; (80050d0 <_Z25getFont_digital_7_20_4bppv+0x98>)
 80050b0:	f018 fe9e 	bl	801ddf0 <atexit>
    return digital_7_20_4bpp;
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <_Z25getFont_digital_7_20_4bppv+0x94>)
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20001210 	.word	0x20001210
 80050c0:	080309ec 	.word	0x080309ec
 80050c4:	0801ff44 	.word	0x0801ff44
 80050c8:	08030908 	.word	0x08030908
 80050cc:	200011e8 	.word	0x200011e8
 80050d0:	08005029 	.word	0x08005029

080050d4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_digital_7_400_4bpp();

touchgfx::GeneratedFont& getFont_digital_7_400_4bpp()
{
    static touchgfx::GeneratedFont digital_7_400_4bpp(glyphs_digital_7_400_4bpp, 2, 400, 0, 4, 1, 0, 0, unicodes_digital_7_400_4bpp, kerning_digital_7_400_4bpp, 63, 0, 0, 0);
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	4801      	ldr	r0, [pc, #4]	; (80050e0 <__tcf_0+0xc>)
 80050da:	f7ff faf1 	bl	80046c0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20001214 	.word	0x20001214

080050e4 <_Z26getFont_digital_7_400_4bppv>:
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08c      	sub	sp, #48	; 0x30
 80050e8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont digital_7_400_4bpp(glyphs_digital_7_400_4bpp, 2, 400, 0, 4, 1, 0, 0, unicodes_digital_7_400_4bpp, kerning_digital_7_400_4bpp, 63, 0, 0, 0);
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <_Z26getFont_digital_7_400_4bppv+0x88>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	f3bf 8f5b 	dmb	ish
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02d      	beq.n	8005162 <_Z26getFont_digital_7_400_4bppv+0x7e>
 8005106:	4819      	ldr	r0, [pc, #100]	; (800516c <_Z26getFont_digital_7_400_4bppv+0x88>)
 8005108:	f018 fe27 	bl	801dd5a <__cxa_guard_acquire>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d022      	beq.n	8005162 <_Z26getFont_digital_7_400_4bppv+0x7e>
 800511c:	2300      	movs	r3, #0
 800511e:	930a      	str	r3, [sp, #40]	; 0x28
 8005120:	2300      	movs	r3, #0
 8005122:	9309      	str	r3, [sp, #36]	; 0x24
 8005124:	2300      	movs	r3, #0
 8005126:	9308      	str	r3, [sp, #32]
 8005128:	233f      	movs	r3, #63	; 0x3f
 800512a:	9307      	str	r3, [sp, #28]
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <_Z26getFont_digital_7_400_4bppv+0x8c>)
 800512e:	9306      	str	r3, [sp, #24]
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <_Z26getFont_digital_7_400_4bppv+0x90>)
 8005132:	9305      	str	r3, [sp, #20]
 8005134:	2300      	movs	r3, #0
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	2300      	movs	r3, #0
 800513a:	9303      	str	r3, [sp, #12]
 800513c:	2301      	movs	r3, #1
 800513e:	9302      	str	r3, [sp, #8]
 8005140:	2304      	movs	r3, #4
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	2300      	movs	r3, #0
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800514c:	2202      	movs	r2, #2
 800514e:	490a      	ldr	r1, [pc, #40]	; (8005178 <_Z26getFont_digital_7_400_4bppv+0x94>)
 8005150:	480a      	ldr	r0, [pc, #40]	; (800517c <_Z26getFont_digital_7_400_4bppv+0x98>)
 8005152:	f7ff fe79 	bl	8004e48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005156:	4805      	ldr	r0, [pc, #20]	; (800516c <_Z26getFont_digital_7_400_4bppv+0x88>)
 8005158:	f018 fe0b 	bl	801dd72 <__cxa_guard_release>
 800515c:	4808      	ldr	r0, [pc, #32]	; (8005180 <_Z26getFont_digital_7_400_4bppv+0x9c>)
 800515e:	f018 fe47 	bl	801ddf0 <atexit>
    return digital_7_400_4bpp;
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <_Z26getFont_digital_7_400_4bppv+0x98>)
}
 8005164:	4618      	mov	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	2000123c 	.word	0x2000123c
 8005170:	080309f0 	.word	0x080309f0
 8005174:	0801ff48 	.word	0x0801ff48
 8005178:	080309cc 	.word	0x080309cc
 800517c:	20001214 	.word	0x20001214
 8005180:	080050d5 	.word	0x080050d5

08005184 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	460b      	mov	r3, r1
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8005192:	2300      	movs	r3, #0
    }
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80051a8:	2300      	movs	r3, #0
    }
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80051be:	2300      	movs	r3, #0
    }
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80051da:	4a07      	ldr	r2, [pc, #28]	; (80051f8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6013      	str	r3, [r2, #0]
        fonts = f;
 80051e0:	4a06      	ldr	r2, [pc, #24]	; (80051fc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80051e6:	4a06      	ldr	r2, [pc, #24]	; (8005200 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	8013      	strh	r3, [r2, #0]
    }
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	2000dfc0 	.word	0x2000dfc0
 80051fc:	2000dfc8 	.word	0x2000dfc8
 8005200:	2000dfc4 	.word	0x2000dfc4

08005204 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005204:	b40e      	push	{r1, r2, r3}
 8005206:	b580      	push	{r7, lr}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800520e:	f107 0320 	add.w	r3, r7, #32
 8005212:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	2100      	movs	r1, #0
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f00e fbb2 	bl	8013984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005220:	4603      	mov	r3, r0
 8005222:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005224:	89fb      	ldrh	r3, [r7, #14]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005230:	b003      	add	sp, #12
 8005232:	4770      	bx	lr

08005234 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005234:	b40c      	push	{r2, r3}
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8005242:	f107 031c 	add.w	r3, r7, #28
 8005246:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005248:	78f9      	ldrb	r1, [r7, #3]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f00e fb98 	bl	8013984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005254:	4603      	mov	r3, r0
 8005256:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005258:	89fb      	ldrh	r3, [r7, #14]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005264:	b002      	add	sp, #8
 8005266:	4770      	bx	lr

08005268 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d016      	beq.n	80052aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	331a      	adds	r3, #26
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	8adb      	ldrh	r3, [r3, #22]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d105      	bne.n	8005296 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800528a:	4b43      	ldr	r3, [pc, #268]	; (8005398 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800528c:	4a43      	ldr	r2, [pc, #268]	; (800539c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800528e:	21bf      	movs	r1, #191	; 0xbf
 8005290:	4843      	ldr	r0, [pc, #268]	; (80053a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005292:	f018 fd8f 	bl	801ddb4 <__assert_func>
            return buffer[pos];
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	8a9b      	ldrh	r3, [r3, #20]
 800529a:	461a      	mov	r2, r3
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d06a      	beq.n	8005386 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f00f fec5 	bl	8015040 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	331a      	adds	r3, #26
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	2301      	movs	r3, #1
 80052be:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	8adb      	ldrh	r3, [r3, #22]
 80052c4:	8bfa      	ldrh	r2, [r7, #30]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d305      	bcc.n	80052d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80052ca:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80052cc:	4a36      	ldr	r2, [pc, #216]	; (80053a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80052ce:	21c4      	movs	r1, #196	; 0xc4
 80052d0:	4833      	ldr	r0, [pc, #204]	; (80053a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80052d2:	f018 fd6f 	bl	801ddb4 <__assert_func>
            const uint16_t index = pos + offset;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	8a9a      	ldrh	r2, [r3, #20]
 80052da:	8bfb      	ldrh	r3, [r7, #30]
 80052dc:	4413      	add	r3, r2
 80052de:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80052e0:	8bbb      	ldrh	r3, [r7, #28]
 80052e2:	2b09      	cmp	r3, #9
 80052e4:	d801      	bhi.n	80052ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80052e6:	8bbb      	ldrh	r3, [r7, #28]
 80052e8:	e001      	b.n	80052ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80052ea:	8bbb      	ldrh	r3, [r7, #28]
 80052ec:	3b0a      	subs	r3, #10
 80052ee:	6a3a      	ldr	r2, [r7, #32]
 80052f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052f4:	f640 123f 	movw	r2, #2367	; 0x93f
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bf0c      	ite	eq
 80052fc:	2301      	moveq	r3, #1
 80052fe:	2300      	movne	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d03f      	beq.n	8005386 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	331a      	adds	r3, #26
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	321a      	adds	r2, #26
 800530e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	8ad2      	ldrh	r2, [r2, #22]
 8005314:	2a00      	cmp	r2, #0
 8005316:	d105      	bne.n	8005324 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8005318:	4b1f      	ldr	r3, [pc, #124]	; (8005398 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800531a:	4a20      	ldr	r2, [pc, #128]	; (800539c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800531c:	21bf      	movs	r1, #191	; 0xbf
 800531e:	4820      	ldr	r0, [pc, #128]	; (80053a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005320:	f018 fd48 	bl	801ddb4 <__assert_func>
            return buffer[pos];
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	8a92      	ldrh	r2, [r2, #20]
 8005328:	4611      	mov	r1, r2
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	4613      	mov	r3, r2
 8005334:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	8adb      	ldrh	r3, [r3, #22]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d806      	bhi.n	800534c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800533e:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8005340:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8005342:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8005346:	4816      	ldr	r0, [pc, #88]	; (80053a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005348:	f018 fd34 	bl	801ddb4 <__assert_func>
            const uint16_t index = pos + 1;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	8a9b      	ldrh	r3, [r3, #20]
 8005350:	3301      	adds	r3, #1
 8005352:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8005354:	89bb      	ldrh	r3, [r7, #12]
 8005356:	2b09      	cmp	r3, #9
 8005358:	d801      	bhi.n	800535e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800535a:	89bb      	ldrh	r3, [r7, #12]
 800535c:	e000      	b.n	8005360 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800535e:	2300      	movs	r3, #0
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	89f9      	ldrh	r1, [r7, #14]
 8005364:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8005368:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	331a      	adds	r3, #26
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	f640 133f 	movw	r3, #2367	; 0x93f
 8005374:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	8a9b      	ldrh	r3, [r3, #20]
 800537a:	4619      	mov	r1, r3
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	8afa      	ldrh	r2, [r7, #22]
 8005380:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8005384:	bf00      	nop
        }
    }
    return getNextChar();
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f00f fd3e 	bl	8014e08 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800538c:	4603      	mov	r3, r0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3728      	adds	r7, #40	; 0x28
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	0801f598 	.word	0x0801f598
 800539c:	0801f5a4 	.word	0x0801f5a4
 80053a0:	0801f650 	.word	0x0801f650
 80053a4:	0801f69c 	.word	0x0801f69c
 80053a8:	0801f6ac 	.word	0x0801f6ac
 80053ac:	0801f780 	.word	0x0801f780
 80053b0:	0801f78c 	.word	0x0801f78c

080053b4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f00f fcdd 	bl	8014d7c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b088      	sub	sp, #32
 80053ce:	af02      	add	r7, sp, #8
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	1d38      	adds	r0, r7, #4
 80053d4:	e880 0006 	stmia.w	r0, {r1, r2}
 80053d8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80053da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053de:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80053e0:	1d39      	adds	r1, r7, #4
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f00c ffe5 	bl	80123be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d127      	bne.n	8005460 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	4a1e      	ldr	r2, [pc, #120]	; (800548c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8005414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d016      	beq.n	800544a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	4a1b      	ldr	r2, [pc, #108]	; (800548c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8005420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005424:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	4a18      	ldr	r2, [pc, #96]	; (8005490 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8005430:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	4413      	add	r3, r2
 800543a:	4a16      	ldr	r2, [pc, #88]	; (8005494 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800543c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4413      	add	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	e00a      	b.n	8005460 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800544a:	4b11      	ldr	r3, [pc, #68]	; (8005490 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800544c:	4a12      	ldr	r2, [pc, #72]	; (8005498 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800544e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8005450:	4a12      	ldr	r2, [pc, #72]	; (800549c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8005454:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	4a11      	ldr	r2, [pc, #68]	; (80054a0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800545a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00d      	beq.n	8005482 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8005466:	4a0f      	ldr	r2, [pc, #60]	; (80054a4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800546c:	f000 f83e 	bl	80054ec <_ZN17TypedTextDatabase8getFontsEv>
 8005470:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8005472:	f000 f833 	bl	80054dc <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8005476:	4603      	mov	r3, r0
 8005478:	461a      	mov	r2, r3
 800547a:	4621      	mov	r1, r4
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff fea5 	bl	80051cc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}
 800548a:	bf00      	nop
 800548c:	20001240 	.word	0x20001240
 8005490:	20001248 	.word	0x20001248
 8005494:	2000124c 	.word	0x2000124c
 8005498:	08030a0c 	.word	0x08030a0c
 800549c:	080309f4 	.word	0x080309f4
 80054a0:	08030a4c 	.word	0x08030a4c
 80054a4:	20001244 	.word	0x20001244

080054a8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80054b4:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80054ba:	6819      	ldr	r1, [r3, #0]
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20001248 	.word	0x20001248
 80054d8:	2000124c 	.word	0x2000124c

080054dc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80054e0:	2306      	movs	r3, #6
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80054f0:	4b02      	ldr	r3, [pc, #8]	; (80054fc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20001250 	.word	0x20001250

08005500 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_digital_7_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d113      	bne.n	8005538 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005516:	4293      	cmp	r3, r2
 8005518:	d10e      	bne.n	8005538 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_digital_7_200_4bpp()),
 800551a:	f7ff fd37 	bl	8004f8c <_Z26getFont_digital_7_200_4bppv>
 800551e:	4603      	mov	r3, r0
};
 8005520:	4a07      	ldr	r2, [pc, #28]	; (8005540 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005522:	6013      	str	r3, [r2, #0]
    &(getFont_digital_7_400_4bpp()),
 8005524:	f7ff fdde 	bl	80050e4 <_Z26getFont_digital_7_400_4bppv>
 8005528:	4603      	mov	r3, r0
};
 800552a:	4a05      	ldr	r2, [pc, #20]	; (8005540 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800552c:	6053      	str	r3, [r2, #4]
    &(getFont_digital_7_20_4bpp())
 800552e:	f7ff fd83 	bl	8005038 <_Z25getFont_digital_7_20_4bppv>
 8005532:	4603      	mov	r3, r0
};
 8005534:	4a02      	ldr	r2, [pc, #8]	; (8005540 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005536:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20001250 	.word	0x20001250

08005544 <_GLOBAL__sub_I_touchgfx_fonts>:
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
 8005548:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800554c:	2001      	movs	r0, #1
 800554e:	f7ff ffd7 	bl	8005500 <_Z41__static_initialization_and_destruction_0ii>
 8005552:	bd80      	pop	{r7, pc}

08005554 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
        : color(col)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	601a      	str	r2, [r3, #0]
    }
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800557c:	4a14      	ldr	r2, [pc, #80]	; (80055d0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3304      	adds	r3, #4
 8005586:	4618      	mov	r0, r3
 8005588:	f7fd fdec 	bl	8003164 <_ZN8touchgfx4RectC1Ev>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	330c      	adds	r3, #12
 8005590:	4618      	mov	r0, r3
 8005592:	f7fd fde7 	bl	8003164 <_ZN8touchgfx4RectC1Ev>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	615a      	str	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	619a      	str	r2, [r3, #24]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	61da      	str	r2, [r3, #28]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	841a      	strh	r2, [r3, #32]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	845a      	strh	r2, [r3, #34]	; 0x22
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	08021328 	.word	0x08021328

080055d4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
    {
 80055dc:	4a04      	ldr	r2, [pc, #16]	; (80055f0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	601a      	str	r2, [r3, #0]
    }
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	08021328 	.word	0x08021328

080055f4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
    }
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ffe9 	bl	80055d4 <_ZN8touchgfx8DrawableD1Ev>
 8005602:	2128      	movs	r1, #40	; 0x28
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f018 fba6 	bl	801dd56 <_ZdlPvj>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4618      	mov	r0, r3
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800561c:	2300      	movs	r3, #0
    }
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	4608      	mov	r0, r1
 8005634:	4611      	mov	r1, r2
 8005636:	461a      	mov	r2, r3
 8005638:	4603      	mov	r3, r0
 800563a:	817b      	strh	r3, [r7, #10]
 800563c:	460b      	mov	r3, r1
 800563e:	813b      	strh	r3, [r7, #8]
 8005640:	4613      	mov	r3, r2
 8005642:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8005644:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005648:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800564c:	4619      	mov	r1, r3
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f82a 	bl	80056a8 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8005654:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800565c:	4619      	mov	r1, r3
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f87e 	bl	8005760 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	887a      	ldrh	r2, [r7, #2]
 800567c:	809a      	strh	r2, [r3, #4]
    }
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	887a      	ldrh	r2, [r7, #2]
 800569a:	80da      	strh	r2, [r3, #6]
    }
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	807b      	strh	r3, [r7, #2]
 80056b4:	4613      	mov	r3, r2
 80056b6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	332c      	adds	r3, #44	; 0x2c
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056c4:	4611      	mov	r1, r2
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	4798      	blx	r3
        setY(y);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3330      	adds	r3, #48	; 0x30
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80056d6:	4611      	mov	r1, r2
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
    }
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	887a      	ldrh	r2, [r7, #2]
 80056f4:	811a      	strh	r2, [r3, #8]
    }
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	460b      	mov	r3, r1
 800570c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	887a      	ldrh	r2, [r7, #2]
 8005712:	815a      	strh	r2, [r3, #10]
    }
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
    {
    }
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
    {
    }
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
    {
    }
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	807b      	strh	r3, [r7, #2]
 800576c:	4613      	mov	r3, r2
 800576e:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3334      	adds	r3, #52	; 0x34
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800577c:	4611      	mov	r1, r2
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
        setHeight(height);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3338      	adds	r3, #56	; 0x38
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800578e:	4611      	mov	r1, r2
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
    }
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
    {
    }
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
    {
    }
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	807b      	strh	r3, [r7, #2]
 8005806:	4613      	mov	r3, r2
 8005808:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3350      	adds	r3, #80	; 0x50
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	8879      	ldrh	r1, [r7, #2]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800581a:	b292      	uxth	r2, r2
 800581c:	1a8a      	subs	r2, r1, r2
 800581e:	b292      	uxth	r2, r2
 8005820:	b210      	sxth	r0, r2
 8005822:	8839      	ldrh	r1, [r7, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800582a:	b292      	uxth	r2, r2
 800582c:	1a8a      	subs	r2, r1, r2
 800582e:	b292      	uxth	r2, r2
 8005830:	b212      	sxth	r2, r2
 8005832:	4601      	mov	r1, r0
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
    }
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800584e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005856:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7ff ffe1 	bl	8005840 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	601a      	str	r2, [r3, #0]
    }
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
    {
 800589c:	4a06      	ldr	r2, [pc, #24]	; (80058b8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3304      	adds	r3, #4
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f91c 	bl	8005ae4 <_ZN8touchgfx9ContainerD1Ev>
    }
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	08021420 	.word	0x08021420

080058bc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    }
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff ffe5 	bl	8005894 <_ZN8touchgfx6ScreenD1Ev>
 80058ca:	213c      	movs	r1, #60	; 0x3c
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f018 fa42 	bl	801dd56 <_ZdlPvj>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    {
    }
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
    {
    }
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
    {
    }
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
    {
    }
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
    {
    }
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3304      	adds	r3, #4
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f009 ffab 	bl	800f8b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	817b      	strh	r3, [r7, #10]
 8005970:	4613      	mov	r3, r2
 8005972:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff ff25 	bl	80057c6 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff ff2b 	bl	80057e0 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8005994:	2300      	movs	r3, #0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	601a      	str	r2, [r3, #0]
        }
    }
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fdde 	bl	8005574 <_ZN8touchgfx8DrawableC1Ev>
 80059b8:	4a03      	ldr	r2, [pc, #12]	; (80059c8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	0801ffa8 	.word	0x0801ffa8

080059cc <_ZN8touchgfx6WidgetD1Ev>:
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	4a05      	ldr	r2, [pc, #20]	; (80059ec <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fdf9 	bl	80055d4 <_ZN8touchgfx8DrawableD1Ev>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	0801ffa8 	.word	0x0801ffa8

080059f0 <_ZN8touchgfx6WidgetD0Ev>:
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff ffe7 	bl	80059cc <_ZN8touchgfx6WidgetD1Ev>
 80059fe:	2128      	movs	r1, #40	; 0x28
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f018 f9a8 	bl	801dd56 <_ZdlPvj>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	2326      	movs	r3, #38	; 0x26
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2100      	movs	r1, #0
 8005a22:	f018 fa53 	bl	801decc <memset>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ffbd 	bl	80059a8 <_ZN8touchgfx6WidgetC1Ev>
 8005a2e:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3328      	adds	r3, #40	; 0x28
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fd86 	bl	8005554 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	08020e2c 	.word	0x08020e2c

08005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	4a05      	ldr	r2, [pc, #20]	; (8005a94 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ffa1 	bl	80059cc <_ZN8touchgfx6WidgetD1Ev>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	08020e2c 	.word	0x08020e2c

08005a98 <_ZN8touchgfx3BoxD0Ev>:
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff ffe7 	bl	8005a74 <_ZN8touchgfx3BoxD1Ev>
 8005aa6:	212c      	movs	r1, #44	; 0x2c
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f018 f954 	bl	801dd56 <_ZdlPvj>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005ac4:	4a06      	ldr	r2, [pc, #24]	; (8005ae0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	887a      	ldrh	r2, [r7, #2]
 8005ace:	809a      	strh	r2, [r3, #4]
    }
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	0801fe98 	.word	0x0801fe98

08005ae4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	4a05      	ldr	r2, [pc, #20]	; (8005b04 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fd6d 	bl	80055d4 <_ZN8touchgfx8DrawableD1Ev>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	080203c8 	.word	0x080203c8

08005b08 <_ZN8touchgfx9ContainerD0Ev>:
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ffe7 	bl	8005ae4 <_ZN8touchgfx9ContainerD1Ev>
 8005b16:	212c      	movs	r1, #44	; 0x2c
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f018 f91c 	bl	801dd56 <_ZdlPvj>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	887a      	ldrh	r2, [r7, #2]
 8005b38:	801a      	strh	r2, [r3, #0]
    {
    }
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	2326      	movs	r3, #38	; 0x26
 8005b76:	461a      	mov	r2, r3
 8005b78:	2100      	movs	r1, #0
 8005b7a:	f018 f9a7 	bl	801decc <memset>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff ff11 	bl	80059a8 <_ZN8touchgfx6WidgetC1Ev>
 8005b86:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff ffd2 	bl	8005b48 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	08020d50 	.word	0x08020d50

08005bb4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	4a05      	ldr	r2, [pc, #20]	; (8005bd4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff ff01 	bl	80059cc <_ZN8touchgfx6WidgetD1Ev>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	08020d50 	.word	0x08020d50

08005bd8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff ffe7 	bl	8005bb4 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005be6:	2130      	movs	r1, #48	; 0x30
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f018 f8b4 	bl	801dd56 <_ZdlPvj>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff ffb0 	bl	8005b68 <_ZN8touchgfx14AbstractButtonC1Ev>
 8005c08:	4a0c      	ldr	r2, [pc, #48]	; (8005c3c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	332e      	adds	r3, #46	; 0x2e
 8005c12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff ff86 	bl	8005b28 <_ZN8touchgfx6BitmapC1Et>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3330      	adds	r3, #48	; 0x30
 8005c20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ff7f 	bl	8005b28 <_ZN8touchgfx6BitmapC1Et>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	22ff      	movs	r2, #255	; 0xff
 8005c2e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	08020ef4 	.word	0x08020ef4

08005c40 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	889a      	ldrh	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	809a      	strh	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3334      	adds	r3, #52	; 0x34
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ffe5 	bl	8005c40 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f820 	bl	8005cbc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8005cbc:	b590      	push	{r4, r7, lr}
 8005cbe:	b08b      	sub	sp, #44	; 0x2c
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3334      	adds	r3, #52	; 0x34
 8005cc8:	61fb      	str	r3, [r7, #28]
        return typedTextId != TYPED_TEXT_INVALID;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	889b      	ldrh	r3, [r3, #4]
 8005cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	bf14      	ite	ne
 8005cd6:	2301      	movne	r3, #1
 8005cd8:	2300      	moveq	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d072      	beq.n	8005dc6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10a>
        {
            const Font* f = typedText.getFont();
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3334      	adds	r3, #52	; 0x34
 8005ce4:	613b      	str	r3, [r7, #16]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	60fb      	str	r3, [r7, #12]

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005cea:	4b3b      	ldr	r3, [pc, #236]	; (8005dd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d105      	bne.n	8005cfe <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 8005cf2:	4b3a      	ldr	r3, [pc, #232]	; (8005ddc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8005cf4:	4a3a      	ldr	r2, [pc, #232]	; (8005de0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005cf6:	21ae      	movs	r1, #174	; 0xae
 8005cf8:	483a      	ldr	r0, [pc, #232]	; (8005de4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8005cfa:	f018 f85b 	bl	801ddb4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	889a      	ldrh	r2, [r3, #4]
 8005d02:	4b39      	ldr	r3, [pc, #228]	; (8005de8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d305      	bcc.n	8005d16 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 8005d0a:	4b38      	ldr	r3, [pc, #224]	; (8005dec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8005d0c:	4a34      	ldr	r2, [pc, #208]	; (8005de0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005d0e:	21af      	movs	r1, #175	; 0xaf
 8005d10:	4834      	ldr	r0, [pc, #208]	; (8005de4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8005d12:	f018 f84f 	bl	801ddb4 <__assert_func>
    }
 8005d16:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 8005d18:	4b35      	ldr	r3, [pc, #212]	; (8005df0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	889b      	ldrh	r3, [r3, #4]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	440b      	add	r3, r1
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3334      	adds	r3, #52	; 0x34
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005d3c:	4b26      	ldr	r3, [pc, #152]	; (8005dd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>
 8005d44:	4b25      	ldr	r3, [pc, #148]	; (8005ddc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8005d46:	4a26      	ldr	r2, [pc, #152]	; (8005de0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005d48:	21ae      	movs	r1, #174	; 0xae
 8005d4a:	4826      	ldr	r0, [pc, #152]	; (8005de4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8005d4c:	f018 f832 	bl	801ddb4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	889a      	ldrh	r2, [r3, #4]
 8005d54:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d305      	bcc.n	8005d68 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xac>
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8005d5e:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005d60:	21af      	movs	r1, #175	; 0xaf
 8005d62:	4820      	ldr	r0, [pc, #128]	; (8005de4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8005d64:	f018 f826 	bl	801ddb4 <__assert_func>
    }
 8005d68:	bf00      	nop
        return texts->getText(typedTextId);
 8005d6a:	4b22      	ldr	r3, [pc, #136]	; (8005df4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	889b      	ldrh	r3, [r3, #4]
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7ff fb97 	bl	80054a8 <_ZNK8touchgfx5Texts7getTextEt>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	bf00      	nop
 8005d7e:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3328      	adds	r3, #40	; 0x28
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6a39      	ldr	r1, [r7, #32]
 8005d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d8c:	4798      	blx	r3
 8005d8e:	4603      	mov	r3, r0
 8005d90:	b2dc      	uxtb	r4, r3
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3340      	adds	r3, #64	; 0x40
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6a39      	ldr	r1, [r7, #32]
 8005d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d9e:	4798      	blx	r3
 8005da0:	4603      	mov	r3, r0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	fb14 f303 	smulbb	r3, r4, r3
 8005da8:	b2dc      	uxtb	r4, r3
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3324      	adds	r3, #36	; 0x24
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a39      	ldr	r1, [r7, #32]
 8005db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005db6:	4798      	blx	r3
 8005db8:	4603      	mov	r3, r0
 8005dba:	4423      	add	r3, r4
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8005dc4:	e003      	b.n	8005dce <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x112>
            textHeightIncludingSpacing = 0;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8005dce:	bf00      	nop
 8005dd0:	372c      	adds	r7, #44	; 0x2c
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd90      	pop	{r4, r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	2000dfc0 	.word	0x2000dfc0
 8005ddc:	0801f840 	.word	0x0801f840
 8005de0:	0801f884 	.word	0x0801f884
 8005de4:	0801f8b4 	.word	0x0801f8b4
 8005de8:	2000dfc4 	.word	0x2000dfc4
 8005dec:	0801f8fc 	.word	0x0801f8fc
 8005df0:	2000dfc8 	.word	0x2000dfc8
 8005df4:	2000dfcc 	.word	0x2000dfcc

08005df8 <_ZN8touchgfx4ViewI14startPresenterED1Ev>:
class View : public Screen
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	4a05      	ldr	r2, [pc, #20]	; (8005e18 <_ZN8touchgfx4ViewI14startPresenterED1Ev+0x20>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fd43 	bl	8005894 <_ZN8touchgfx6ScreenD1Ev>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	08020040 	.word	0x08020040

08005e1c <_ZN8touchgfx4ViewI14startPresenterED0Ev>:
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ffe7 	bl	8005df8 <_ZN8touchgfx4ViewI14startPresenterED1Ev>
 8005e2a:	2140      	movs	r1, #64	; 0x40
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f017 ff92 	bl	801dd56 <_ZdlPvj>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <_ZN13startViewBaseD1Ev>:

class startViewBase : public touchgfx::View<startPresenter>
{
public:
    startViewBase();
    virtual ~startViewBase() {}
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <_ZN13startViewBaseD1Ev+0x54>)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fa33 	bl	80062bc <_ZN8touchgfx13ScalableImageD1Ev>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	33cc      	adds	r3, #204	; 0xcc
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 f9e4 	bl	8006228 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3398      	adds	r3, #152	; 0x98
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 f9bd 	bl	80061e4 <_ZN8touchgfx6ButtonD1Ev>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	336c      	adds	r3, #108	; 0x6c
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fe00 	bl	8005a74 <_ZN8touchgfx3BoxD1Ev>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3340      	adds	r3, #64	; 0x40
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff fdfb 	bl	8005a74 <_ZN8touchgfx3BoxD1Ev>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff ffb9 	bl	8005df8 <_ZN8touchgfx4ViewI14startPresenterED1Ev>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	0802000c 	.word	0x0802000c

08005e94 <_ZN13startViewBaseD0Ev>:
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff ffcd 	bl	8005e3c <_ZN13startViewBaseD1Ev>
 8005ea2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f017 ff55 	bl	801dd56 <_ZdlPvj>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <_ZN13startViewBaseC1Ev>:
#include <gui_generated/start_screen/startViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

startViewBase::startViewBase()
 8005eb8:	b590      	push	{r4, r7, lr}
 8005eba:	b095      	sub	sp, #84	; 0x54
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f978 	bl	80061b8 <_ZN8touchgfx4ViewI14startPresenterEC1Ev>
 8005ec8:	4ab5      	ldr	r2, [pc, #724]	; (80061a0 <_ZN13startViewBaseC1Ev+0x2e8>)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3340      	adds	r3, #64	; 0x40
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff fd9c 	bl	8005a10 <_ZN8touchgfx3BoxC1Ev>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	336c      	adds	r3, #108	; 0x6c
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fd97 	bl	8005a10 <_ZN8touchgfx3BoxC1Ev>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3398      	adds	r3, #152	; 0x98
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff fe86 	bl	8005bf8 <_ZN8touchgfx6ButtonC1Ev>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	33cc      	adds	r3, #204	; 0xcc
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f00b fa43 	bl	801137c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f503 748a 	add.w	r4, r3, #276	; 0x114
 8005efc:	f107 030c 	add.w	r3, r7, #12
 8005f00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fe0f 	bl	8005b28 <_ZN8touchgfx6BitmapC1Et>
 8005f0a:	f107 030c 	add.w	r3, r7, #12
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4620      	mov	r0, r4
 8005f12:	f00a fe1f 	bl	8010b54 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
{

    __background.setPosition(0, 0, 800, 480);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005f1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005f26:	2200      	movs	r2, #0
 8005f28:	2100      	movs	r1, #0
 8005f2a:	f7ff fb7e 	bl	800562a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005f34:	2300      	movs	r3, #0
 8005f36:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005f46:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	431a      	orrs	r2, r3
 8005f56:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005f60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f64:	4611      	mov	r1, r2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff faf4 	bl	8005554 <_ZN8touchgfx9colortypeC1Em>
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4620      	mov	r0, r4
 8005f72:	f7ff fd71 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 800, 480);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8005f7c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	f7ff fb4e 	bl	800562a <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005f94:	23ff      	movs	r3, #255	; 0xff
 8005f96:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005fa6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005faa:	041b      	lsls	r3, r3, #16
 8005fac:	461a      	mov	r2, r3
 8005fae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005fc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fac4 	bl	8005554 <_ZN8touchgfx9colortypeC1Em>
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff fd41 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(315, 215);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3398      	adds	r3, #152	; 0x98
 8005fda:	22d7      	movs	r2, #215	; 0xd7
 8005fdc:	f240 113b 	movw	r1, #315	; 0x13b
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fb61 	bl	80056a8 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005fec:	f107 0310 	add.w	r3, r7, #16
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fd98 	bl	8005b28 <_ZN8touchgfx6BitmapC1Et>
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fd92 	bl	8005b28 <_ZN8touchgfx6BitmapC1Et>
 8006004:	f107 0214 	add.w	r2, r7, #20
 8006008:	f107 0310 	add.w	r3, r7, #16
 800600c:	4619      	mov	r1, r3
 800600e:	4620      	mov	r0, r4
 8006010:	f00a ffbe 	bl	8010f90 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    buttonWithLabel1.setXY(387, 96);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	33cc      	adds	r3, #204	; 0xcc
 8006018:	2260      	movs	r2, #96	; 0x60
 800601a:	f240 1183 	movw	r1, #387	; 0x183
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fb42 	bl	80056a8 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800602a:	f107 0318 	add.w	r3, r7, #24
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fd79 	bl	8005b28 <_ZN8touchgfx6BitmapC1Et>
 8006036:	f107 031c 	add.w	r3, r7, #28
 800603a:	2101      	movs	r1, #1
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fd73 	bl	8005b28 <_ZN8touchgfx6BitmapC1Et>
 8006042:	f107 021c 	add.w	r2, r7, #28
 8006046:	f107 0318 	add.w	r3, r7, #24
 800604a:	4619      	mov	r1, r3
 800604c:	4620      	mov	r0, r4
 800604e:	f00a ff9f 	bl	8010f90 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID6));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8006058:	f107 0320 	add.w	r3, r7, #32
 800605c:	2105      	movs	r1, #5
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fd2a 	bl	8005ab8 <_ZN8touchgfx9TypedTextC1Et>
 8006064:	f107 0320 	add.w	r3, r7, #32
 8006068:	4619      	mov	r1, r3
 800606a:	4620      	mov	r0, r4
 800606c:	f7ff fdf8 	bl	8005c60 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8006070:	f107 0320 	add.w	r3, r7, #32
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe fb45 	bl	8004704 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8006080:	23ff      	movs	r3, #255	; 0xff
 8006082:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8006086:	23ff      	movs	r3, #255	; 0xff
 8006088:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608c:	23ff      	movs	r3, #255	; 0xff
 800608e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006092:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	461a      	mov	r2, r3
 800609a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	431a      	orrs	r2, r3
 80060a2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80060ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060b0:	4611      	mov	r1, r2
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fa4e 	bl	8005554 <_ZN8touchgfx9colortypeC1Em>
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	4619      	mov	r1, r3
 80060bc:	4620      	mov	r0, r4
 80060be:	f7ff fde1 	bl	8005c84 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 80060c8:	23ff      	movs	r3, #255	; 0xff
 80060ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80060ce:	23ff      	movs	r3, #255	; 0xff
 80060d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80060d4:	23ff      	movs	r3, #255	; 0xff
 80060d6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80060da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060de:	041b      	lsls	r3, r3, #16
 80060e0:	461a      	mov	r2, r3
 80060e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	431a      	orrs	r2, r3
 80060ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80060f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fa2a 	bl	8005554 <_ZN8touchgfx9colortypeC1Em>
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	4619      	mov	r1, r3
 8006104:	4620      	mov	r0, r4
 8006106:	f7ff fdcb 	bl	8005ca0 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_SPLASH_LANA_MINIFIED_ID));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f503 748a 	add.w	r4, r3, #276	; 0x114
 8006110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006114:	2102      	movs	r1, #2
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fd06 	bl	8005b28 <_ZN8touchgfx6BitmapC1Et>
 800611c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006120:	4619      	mov	r1, r3
 8006122:	4620      	mov	r0, r4
 8006124:	f00a fff4 	bl	8011110 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 800, 480);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f503 708a 	add.w	r0, r3, #276	; 0x114
 800612e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006138:	2200      	movs	r2, #0
 800613a:	2100      	movs	r1, #0
 800613c:	f7ff fa75 	bl	800562a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f00a fcd1 	bl	8010af0 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>

    add(__background);
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3340      	adds	r3, #64	; 0x40
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7ff fbf4 	bl	8005944 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	336c      	adds	r3, #108	; 0x6c
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f7ff fbed 	bl	8005944 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3398      	adds	r3, #152	; 0x98
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f7ff fbe6 	bl	8005944 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	33cc      	adds	r3, #204	; 0xcc
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f7ff fbdf 	bl	8005944 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scalableImage1);
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f7ff fbd7 	bl	8005944 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4618      	mov	r0, r3
 800619a:	374c      	adds	r7, #76	; 0x4c
 800619c:	46bd      	mov	sp, r7
 800619e:	bd90      	pop	{r4, r7, pc}
 80061a0:	0802000c 	.word	0x0802000c

080061a4 <_ZN13startViewBase11setupScreenEv>:

void startViewBase::setupScreen()
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <_ZN8touchgfx4ViewI14startPresenterEC1Ev>:
    View()
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f00e f85c 	bl	8014280 <_ZN8touchgfx6ScreenC1Ev>
 80061c8:	4a05      	ldr	r2, [pc, #20]	; (80061e0 <_ZN8touchgfx4ViewI14startPresenterEC1Ev+0x28>)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	08020040 	.word	0x08020040

080061e4 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	4a05      	ldr	r2, [pc, #20]	; (8006204 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fcdd 	bl	8005bb4 <_ZN8touchgfx14AbstractButtonD1Ev>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	08020ef4 	.word	0x08020ef4

08006208 <_ZN8touchgfx6ButtonD0Ev>:
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ffe7 	bl	80061e4 <_ZN8touchgfx6ButtonD1Ev>
 8006216:	2134      	movs	r1, #52	; 0x34
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f017 fd9c 	bl	801dd56 <_ZdlPvj>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	4a08      	ldr	r2, [pc, #32]	; (8006254 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3334      	adds	r3, #52	; 0x34
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fa62 	bl	8004704 <_ZN8touchgfx9TypedTextD1Ev>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff ffce 	bl	80061e4 <_ZN8touchgfx6ButtonD1Ev>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	080210c0 	.word	0x080210c0

08006258 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ffe1 	bl	8006228 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8006266:	2148      	movs	r1, #72	; 0x48
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f017 fd74 	bl	801dd56 <_ZdlPvj>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	4a05      	ldr	r2, [pc, #20]	; (8006298 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff fb9f 	bl	80059cc <_ZN8touchgfx6WidgetD1Ev>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	08020f98 	.word	0x08020f98

0800629c <_ZN8touchgfx5ImageD0Ev>:
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff ffe7 	bl	8006278 <_ZN8touchgfx5ImageD1Ev>
 80062aa:	212c      	movs	r1, #44	; 0x2c
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f017 fd52 	bl	801dd56 <_ZdlPvj>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <_ZN8touchgfx13ScalableImageD1Ev>:
 * algorithm used. The rendering algorithm can be changed dynamically. Please note that
 * scaling images is done at runtime and may require a lot of calculations.
 *
 * @note Note that this widget does not support 1 bit per pixel color depth.
 */
class ScalableImage : public Image
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	4a05      	ldr	r2, [pc, #20]	; (80062dc <_ZN8touchgfx13ScalableImageD1Ev+0x20>)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff ffd3 	bl	8006278 <_ZN8touchgfx5ImageD1Ev>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	08020dbc 	.word	0x08020dbc

080062e0 <_ZN8touchgfx13ScalableImageD0Ev>:
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff ffe7 	bl	80062bc <_ZN8touchgfx13ScalableImageD1Ev>
 80062ee:	212c      	movs	r1, #44	; 0x2c
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f017 fd30 	bl	801dd56 <_ZdlPvj>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fafa 	bl	800490c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8006318:	4a03      	ldr	r2, [pc, #12]	; (8006328 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	601a      	str	r2, [r3, #0]
{

}
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	0801fc34 	.word	0x0801fc34

0800632c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
{

}
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <_ZN5Model4tickEv>:

void Model::tick()
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
    {
    }
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
    {
    }
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    {
 800638c:	4a04      	ldr	r2, [pc, #16]	; (80063a0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
    }
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	08020084 	.word	0x08020084

080063a4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
    }
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ffe9 	bl	8006384 <_ZN8touchgfx9PresenterD1Ev>
 80063b2:	2104      	movs	r1, #4
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f017 fcce 	bl	801dd56 <_ZdlPvj>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
    {
 80063cc:	4a04      	ldr	r2, [pc, #16]	; (80063e0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
    }
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	08020084 	.word	0x08020084

080063e4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	4a06      	ldr	r2, [pc, #24]	; (8006408 <_ZN13ModelListenerC1Ev+0x24>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	605a      	str	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	08020074 	.word	0x08020074

0800640c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	4a04      	ldr	r2, [pc, #16]	; (8006428 <_ZN13ModelListenerD1Ev+0x1c>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	08020074 	.word	0x08020074

0800642c <_ZN13ModelListenerD0Ev>:
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff ffe9 	bl	800640c <_ZN13ModelListenerD1Ev>
 800643a:	2108      	movs	r1, #8
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f017 fc8a 	bl	801dd56 <_ZdlPvj>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <_ZN14startPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~startPresenter() {};
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	4a09      	ldr	r2, [pc, #36]	; (800647c <_ZN14startPresenterD1Ev+0x30>)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	4a09      	ldr	r2, [pc, #36]	; (8006480 <_ZN14startPresenterD1Ev+0x34>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff ffd1 	bl	800640c <_ZN13ModelListenerD1Ev>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff ff89 	bl	8006384 <_ZN8touchgfx9PresenterD1Ev>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	0802009c 	.word	0x0802009c
 8006480:	080200b4 	.word	0x080200b4

08006484 <_ZThn4_N14startPresenterD1Ev>:
 8006484:	f1a0 0004 	sub.w	r0, r0, #4
 8006488:	e7e0      	b.n	800644c <_ZN14startPresenterD1Ev>
 800648a:	bf00      	nop

0800648c <_ZN14startPresenterD0Ev>:
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ffd9 	bl	800644c <_ZN14startPresenterD1Ev>
 800649a:	2110      	movs	r1, #16
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f017 fc5a 	bl	801dd56 <_ZdlPvj>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <_ZThn4_N14startPresenterD0Ev>:
 80064ac:	f1a0 0004 	sub.w	r0, r0, #4
 80064b0:	e7ec      	b.n	800648c <_ZN14startPresenterD0Ev>
	...

080064b4 <_ZN14startPresenterC1ER9startView>:
#include <gui/start_screen/startView.hpp>
#include <gui/start_screen/startPresenter.hpp>

startPresenter::startPresenter(startView& v)
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
    : view(v)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff ff7f 	bl	80063c4 <_ZN8touchgfx9PresenterC1Ev>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff ff8a 	bl	80063e4 <_ZN13ModelListenerC1Ev>
 80064d0:	4a06      	ldr	r2, [pc, #24]	; (80064ec <_ZN14startPresenterC1ER9startView+0x38>)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	4a06      	ldr	r2, [pc, #24]	; (80064f0 <_ZN14startPresenterC1ER9startView+0x3c>)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	605a      	str	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	60da      	str	r2, [r3, #12]
{

}
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	0802009c 	.word	0x0802009c
 80064f0:	080200b4 	.word	0x080200b4

080064f4 <_ZN14startPresenter8activateEv>:

void startPresenter::activate()
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <_ZN14startPresenter10deactivateEv>:

void startPresenter::deactivate()
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]

}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <_ZN9startViewD1Ev>:

class startView : public startViewBase
{
public:
    startView();
    virtual ~startView() {}
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	4a05      	ldr	r2, [pc, #20]	; (800653c <_ZN9startViewD1Ev+0x20>)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff fc85 	bl	8005e3c <_ZN13startViewBaseD1Ev>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	080200c4 	.word	0x080200c4

08006540 <_ZN9startViewD0Ev>:
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ffe7 	bl	800651c <_ZN9startViewD1Ev>
 800654e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f017 fbff 	bl	801dd56 <_ZdlPvj>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <_ZN9startViewC1Ev>:
#include <gui/start_screen/startView.hpp>

startView::startView()
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fca2 	bl	8005eb8 <_ZN13startViewBaseC1Ev>
 8006574:	4a03      	ldr	r2, [pc, #12]	; (8006584 <_ZN9startViewC1Ev+0x20>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
{

}
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	080200c4 	.word	0x080200c4

08006588 <_ZN9startView11setupScreenEv>:

void startView::setupScreen()
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
    startViewBase::setupScreen();
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff fe06 	bl	80061a4 <_ZN13startViewBase11setupScreenEv>
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <_ZN9startView14tearDownScreenEv>:

void startView::tearDownScreen()
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
    startViewBase::tearDownScreen();
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff f9aa 	bl	8005904 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <SystemInit+0x20>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	4a05      	ldr	r2, [pc, #20]	; (80065d8 <SystemInit+0x20>)
 80065c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	e000ed00 	.word	0xe000ed00

080065dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065e0:	2003      	movs	r0, #3
 80065e2:	f000 fd7a 	bl	80070da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80065e6:	200f      	movs	r0, #15
 80065e8:	f7fb fb8c 	bl	8001d04 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80065ec:	f7fb fb62 	bl	8001cb4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <HAL_IncTick+0x20>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <HAL_IncTick+0x24>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4413      	add	r3, r2
 8006608:	4a04      	ldr	r2, [pc, #16]	; (800661c <HAL_IncTick+0x24>)
 800660a:	6013      	str	r3, [r2, #0]
}
 800660c:	bf00      	nop
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	20000014 	.word	0x20000014
 800661c:	2000e578 	.word	0x2000e578

08006620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return uwTick;
 8006624:	4b03      	ldr	r3, [pc, #12]	; (8006634 <HAL_GetTick+0x14>)
 8006626:	681b      	ldr	r3, [r3, #0]
}
 8006628:	4618      	mov	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000e578 	.word	0x2000e578

08006638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006640:	f7ff ffee 	bl	8006620 <HAL_GetTick>
 8006644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d005      	beq.n	800665e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <HAL_Delay+0x44>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800665e:	bf00      	nop
 8006660:	f7ff ffde 	bl	8006620 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	429a      	cmp	r2, r3
 800666e:	d8f7      	bhi.n	8006660 <HAL_Delay+0x28>
  {
  }
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000014 	.word	0x20000014

08006680 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e0ed      	b.n	800686e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fa f9d8 	bl	8000a54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0202 	bic.w	r2, r2, #2
 80066b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066b4:	f7ff ffb4 	bl	8006620 <HAL_GetTick>
 80066b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80066ba:	e012      	b.n	80066e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80066bc:	f7ff ffb0 	bl	8006620 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b0a      	cmp	r3, #10
 80066c8:	d90b      	bls.n	80066e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2205      	movs	r2, #5
 80066da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e0c5      	b.n	800686e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e5      	bne.n	80066bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006700:	f7ff ff8e 	bl	8006620 <HAL_GetTick>
 8006704:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006706:	e012      	b.n	800672e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006708:	f7ff ff8a 	bl	8006620 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b0a      	cmp	r3, #10
 8006714:	d90b      	bls.n	800672e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2205      	movs	r2, #5
 8006726:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e09f      	b.n	800686e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0e5      	beq.n	8006708 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	7e1b      	ldrb	r3, [r3, #24]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d108      	bne.n	8006756 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e007      	b.n	8006766 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7e5b      	ldrb	r3, [r3, #25]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d108      	bne.n	8006780 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e007      	b.n	8006790 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800678e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7e9b      	ldrb	r3, [r3, #26]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d108      	bne.n	80067aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0220 	orr.w	r2, r2, #32
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e007      	b.n	80067ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0220 	bic.w	r2, r2, #32
 80067b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	7edb      	ldrb	r3, [r3, #27]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d108      	bne.n	80067d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0210 	bic.w	r2, r2, #16
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	e007      	b.n	80067e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0210 	orr.w	r2, r2, #16
 80067e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7f1b      	ldrb	r3, [r3, #28]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d108      	bne.n	80067fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0208 	orr.w	r2, r2, #8
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e007      	b.n	800680e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0208 	bic.w	r2, r2, #8
 800680c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	7f5b      	ldrb	r3, [r3, #29]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d108      	bne.n	8006828 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0204 	orr.w	r2, r2, #4
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e007      	b.n	8006838 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0204 	bic.w	r2, r2, #4
 8006836:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	ea42 0103 	orr.w	r1, r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	1e5a      	subs	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b01      	cmp	r3, #1
 8006888:	d12e      	bne.n	80068e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0201 	bic.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068a2:	f7ff febd 	bl	8006620 <HAL_GetTick>
 80068a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80068a8:	e012      	b.n	80068d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80068aa:	f7ff feb9 	bl	8006620 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b0a      	cmp	r3, #10
 80068b6:	d90b      	bls.n	80068d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2205      	movs	r2, #5
 80068c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e012      	b.n	80068f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e5      	bne.n	80068aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e006      	b.n	80068f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
  }
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80068fe:	b480      	push	{r7}
 8006900:	b087      	sub	sp, #28
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006912:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d003      	beq.n	8006922 <HAL_CAN_GetRxMessage+0x24>
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	2b02      	cmp	r3, #2
 800691e:	f040 80f3 	bne.w	8006b08 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10e      	bne.n	8006946 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d116      	bne.n	8006964 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e0e7      	b.n	8006b16 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d107      	bne.n	8006964 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0d8      	b.n	8006b16 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	331b      	adds	r3, #27
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	4413      	add	r3, r2
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0204 	and.w	r2, r3, #4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10c      	bne.n	800699c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	331b      	adds	r3, #27
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	4413      	add	r3, r2
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	0d5b      	lsrs	r3, r3, #21
 8006992:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	e00b      	b.n	80069b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	331b      	adds	r3, #27
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	4413      	add	r3, r2
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	08db      	lsrs	r3, r3, #3
 80069ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	331b      	adds	r3, #27
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4413      	add	r3, r2
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0202 	and.w	r2, r3, #2
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	331b      	adds	r3, #27
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	4413      	add	r3, r2
 80069d6:	3304      	adds	r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 020f 	and.w	r2, r3, #15
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	331b      	adds	r3, #27
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	4413      	add	r3, r2
 80069ee:	3304      	adds	r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	0a1b      	lsrs	r3, r3, #8
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	331b      	adds	r3, #27
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	4413      	add	r3, r2
 8006a06:	3304      	adds	r3, #4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	0a1a      	lsrs	r2, r3, #8
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	0c1a      	lsrs	r2, r3, #16
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	3302      	adds	r3, #2
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	0e1a      	lsrs	r2, r3, #24
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	3303      	adds	r3, #3
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	0a1a      	lsrs	r2, r3, #8
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	3305      	adds	r3, #5
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	0c1a      	lsrs	r2, r3, #16
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	3306      	adds	r3, #6
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	0e1a      	lsrs	r2, r3, #24
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	3307      	adds	r3, #7
 8006ad8:	b2d2      	uxtb	r2, r2
 8006ada:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d108      	bne.n	8006af4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0220 	orr.w	r2, r2, #32
 8006af0:	60da      	str	r2, [r3, #12]
 8006af2:	e007      	b.n	8006b04 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0220 	orr.w	r2, r2, #32
 8006b02:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	e006      	b.n	8006b16 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b08a      	sub	sp, #40	; 0x28
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d07c      	beq.n	8006c62 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d023      	beq.n	8006bba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2201      	movs	r2, #1
 8006b78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f983 	bl	8006e90 <HAL_CAN_TxMailbox0CompleteCallback>
 8006b8a:	e016      	b.n	8006bba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f003 0304 	and.w	r3, r3, #4
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d004      	beq.n	8006ba0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9e:	e00c      	b.n	8006bba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb2:	e002      	b.n	8006bba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f989 	bl	8006ecc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d024      	beq.n	8006c0e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f963 	bl	8006ea4 <HAL_CAN_TxMailbox1CompleteCallback>
 8006bde:	e016      	b.n	8006c0e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf2:	e00c      	b.n	8006c0e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
 8006c06:	e002      	b.n	8006c0e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f969 	bl	8006ee0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d024      	beq.n	8006c62 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f943 	bl	8006eb8 <HAL_CAN_TxMailbox2CompleteCallback>
 8006c32:	e016      	b.n	8006c62 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
 8006c46:	e00c      	b.n	8006c62 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d004      	beq.n	8006c5c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5a:	e002      	b.n	8006c62 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f949 	bl	8006ef4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00c      	beq.n	8006c86 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d007      	beq.n	8006c86 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2210      	movs	r2, #16
 8006c84:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d006      	beq.n	8006ca8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f930 	bl	8006f08 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7f9 ff7b 	bl	8000bbc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00c      	beq.n	8006cea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f003 0310 	and.w	r3, r3, #16
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2210      	movs	r2, #16
 8006ce8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d006      	beq.n	8006d0c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2208      	movs	r2, #8
 8006d04:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f912 	bl	8006f30 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d009      	beq.n	8006d2a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f8f9 	bl	8006f1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d006      	beq.n	8006d4c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2210      	movs	r2, #16
 8006d44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f8fc 	bl	8006f44 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d006      	beq.n	8006d6e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2208      	movs	r2, #8
 8006d66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f8f5 	bl	8006f58 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d07b      	beq.n	8006e70 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d072      	beq.n	8006e68 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d008      	beq.n	8006d9e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	f043 0301 	orr.w	r3, r3, #1
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d008      	beq.n	8006dba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	f043 0302 	orr.w	r3, r3, #2
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	f043 0304 	orr.w	r3, r3, #4
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d043      	beq.n	8006e68 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d03e      	beq.n	8006e68 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006df0:	2b60      	cmp	r3, #96	; 0x60
 8006df2:	d02b      	beq.n	8006e4c <HAL_CAN_IRQHandler+0x32a>
 8006df4:	2b60      	cmp	r3, #96	; 0x60
 8006df6:	d82e      	bhi.n	8006e56 <HAL_CAN_IRQHandler+0x334>
 8006df8:	2b50      	cmp	r3, #80	; 0x50
 8006dfa:	d022      	beq.n	8006e42 <HAL_CAN_IRQHandler+0x320>
 8006dfc:	2b50      	cmp	r3, #80	; 0x50
 8006dfe:	d82a      	bhi.n	8006e56 <HAL_CAN_IRQHandler+0x334>
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d019      	beq.n	8006e38 <HAL_CAN_IRQHandler+0x316>
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d826      	bhi.n	8006e56 <HAL_CAN_IRQHandler+0x334>
 8006e08:	2b30      	cmp	r3, #48	; 0x30
 8006e0a:	d010      	beq.n	8006e2e <HAL_CAN_IRQHandler+0x30c>
 8006e0c:	2b30      	cmp	r3, #48	; 0x30
 8006e0e:	d822      	bhi.n	8006e56 <HAL_CAN_IRQHandler+0x334>
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d002      	beq.n	8006e1a <HAL_CAN_IRQHandler+0x2f8>
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d005      	beq.n	8006e24 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006e18:	e01d      	b.n	8006e56 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	f043 0308 	orr.w	r3, r3, #8
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e22:	e019      	b.n	8006e58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	f043 0310 	orr.w	r3, r3, #16
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e2c:	e014      	b.n	8006e58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	f043 0320 	orr.w	r3, r3, #32
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e36:	e00f      	b.n	8006e58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e40:	e00a      	b.n	8006e58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e4a:	e005      	b.n	8006e58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e54:	e000      	b.n	8006e58 <HAL_CAN_IRQHandler+0x336>
            break;
 8006e56:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e66:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d008      	beq.n	8006e88 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f872 	bl	8006f6c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006e88:	bf00      	nop
 8006e8a:	3728      	adds	r7, #40	; 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <__NVIC_SetPriorityGrouping>:
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f90:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fae:	4a04      	ldr	r2, [pc, #16]	; (8006fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	60d3      	str	r3, [r2, #12]
}
 8006fb4:	bf00      	nop
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	e000ed00 	.word	0xe000ed00
 8006fc4:	05fa0000 	.word	0x05fa0000

08006fc8 <__NVIC_GetPriorityGrouping>:
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fcc:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	0a1b      	lsrs	r3, r3, #8
 8006fd2:	f003 0307 	and.w	r3, r3, #7
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	e000ed00 	.word	0xe000ed00

08006fe4 <__NVIC_EnableIRQ>:
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	db0b      	blt.n	800700e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	f003 021f 	and.w	r2, r3, #31
 8006ffc:	4907      	ldr	r1, [pc, #28]	; (800701c <__NVIC_EnableIRQ+0x38>)
 8006ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	2001      	movs	r0, #1
 8007006:	fa00 f202 	lsl.w	r2, r0, r2
 800700a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	e000e100 	.word	0xe000e100

08007020 <__NVIC_SetPriority>:
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800702c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007030:	2b00      	cmp	r3, #0
 8007032:	db0a      	blt.n	800704a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	490c      	ldr	r1, [pc, #48]	; (800706c <__NVIC_SetPriority+0x4c>)
 800703a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800703e:	0112      	lsls	r2, r2, #4
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	440b      	add	r3, r1
 8007044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007048:	e00a      	b.n	8007060 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	4908      	ldr	r1, [pc, #32]	; (8007070 <__NVIC_SetPriority+0x50>)
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	3b04      	subs	r3, #4
 8007058:	0112      	lsls	r2, r2, #4
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	440b      	add	r3, r1
 800705e:	761a      	strb	r2, [r3, #24]
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	e000e100 	.word	0xe000e100
 8007070:	e000ed00 	.word	0xe000ed00

08007074 <NVIC_EncodePriority>:
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	; 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f1c3 0307 	rsb	r3, r3, #7
 800708e:	2b04      	cmp	r3, #4
 8007090:	bf28      	it	cs
 8007092:	2304      	movcs	r3, #4
 8007094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	3304      	adds	r3, #4
 800709a:	2b06      	cmp	r3, #6
 800709c:	d902      	bls.n	80070a4 <NVIC_EncodePriority+0x30>
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3b03      	subs	r3, #3
 80070a2:	e000      	b.n	80070a6 <NVIC_EncodePriority+0x32>
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070a8:	f04f 32ff 	mov.w	r2, #4294967295
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	43da      	mvns	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	401a      	ands	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070bc:	f04f 31ff 	mov.w	r1, #4294967295
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	fa01 f303 	lsl.w	r3, r1, r3
 80070c6:	43d9      	mvns	r1, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070cc:	4313      	orrs	r3, r2
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3724      	adds	r7, #36	; 0x24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff ff4c 	bl	8006f80 <__NVIC_SetPriorityGrouping>
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007102:	f7ff ff61 	bl	8006fc8 <__NVIC_GetPriorityGrouping>
 8007106:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	6978      	ldr	r0, [r7, #20]
 800710e:	f7ff ffb1 	bl	8007074 <NVIC_EncodePriority>
 8007112:	4602      	mov	r2, r0
 8007114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007118:	4611      	mov	r1, r2
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff ff80 	bl	8007020 <__NVIC_SetPriority>
}
 8007120:	bf00      	nop
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff ff54 	bl	8006fe4 <__NVIC_EnableIRQ>
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e054      	b.n	8007200 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	7f5b      	ldrb	r3, [r3, #29]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7f9 fe6e 	bl	8000e48 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	791b      	ldrb	r3, [r3, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10c      	bne.n	8007194 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a22      	ldr	r2, [pc, #136]	; (8007208 <HAL_CRC_Init+0xc4>)
 8007180:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0218 	bic.w	r2, r2, #24
 8007190:	609a      	str	r2, [r3, #8]
 8007192:	e00c      	b.n	80071ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6899      	ldr	r1, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	461a      	mov	r2, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f834 	bl	800720c <HAL_CRCEx_Polynomial_Set>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e028      	b.n	8007200 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	795b      	ldrb	r3, [r3, #5]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d105      	bne.n	80071c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295
 80071be:	611a      	str	r2, [r3, #16]
 80071c0:	e004      	b.n	80071cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6912      	ldr	r2, [r2, #16]
 80071ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	695a      	ldr	r2, [r3, #20]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	04c11db7 	.word	0x04c11db7

0800720c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800721c:	231f      	movs	r3, #31
 800721e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007220:	bf00      	nop
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1e5a      	subs	r2, r3, #1
 8007226:	613a      	str	r2, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d009      	beq.n	8007240 <HAL_CRCEx_Polynomial_Set+0x34>
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f003 031f 	and.w	r3, r3, #31
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_CRCEx_Polynomial_Set+0x16>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b18      	cmp	r3, #24
 8007244:	d846      	bhi.n	80072d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007246:	a201      	add	r2, pc, #4	; (adr r2, 800724c <HAL_CRCEx_Polynomial_Set+0x40>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	080072db 	.word	0x080072db
 8007250:	080072d5 	.word	0x080072d5
 8007254:	080072d5 	.word	0x080072d5
 8007258:	080072d5 	.word	0x080072d5
 800725c:	080072d5 	.word	0x080072d5
 8007260:	080072d5 	.word	0x080072d5
 8007264:	080072d5 	.word	0x080072d5
 8007268:	080072d5 	.word	0x080072d5
 800726c:	080072c9 	.word	0x080072c9
 8007270:	080072d5 	.word	0x080072d5
 8007274:	080072d5 	.word	0x080072d5
 8007278:	080072d5 	.word	0x080072d5
 800727c:	080072d5 	.word	0x080072d5
 8007280:	080072d5 	.word	0x080072d5
 8007284:	080072d5 	.word	0x080072d5
 8007288:	080072d5 	.word	0x080072d5
 800728c:	080072bd 	.word	0x080072bd
 8007290:	080072d5 	.word	0x080072d5
 8007294:	080072d5 	.word	0x080072d5
 8007298:	080072d5 	.word	0x080072d5
 800729c:	080072d5 	.word	0x080072d5
 80072a0:	080072d5 	.word	0x080072d5
 80072a4:	080072d5 	.word	0x080072d5
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	080072b1 	.word	0x080072b1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2b06      	cmp	r3, #6
 80072b4:	d913      	bls.n	80072de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80072ba:	e010      	b.n	80072de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b07      	cmp	r3, #7
 80072c0:	d90f      	bls.n	80072e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80072c6:	e00c      	b.n	80072e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b0f      	cmp	r3, #15
 80072cc:	d90b      	bls.n	80072e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80072d2:	e008      	b.n	80072e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
      break;
 80072d8:	e006      	b.n	80072e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072da:	bf00      	nop
 80072dc:	e004      	b.n	80072e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072de:	bf00      	nop
 80072e0:	e002      	b.n	80072e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072e2:	bf00      	nop
 80072e4:	e000      	b.n	80072e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10d      	bne.n	800730a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f023 0118 	bic.w	r1, r3, #24
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	430a      	orrs	r2, r1
 8007308:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
}
 800730c:	4618      	mov	r0, r3
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e049      	b.n	80073be <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7f9 fdda 	bl	8000ef8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007368:	f023 0107 	bic.w	r1, r3, #7
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <HAL_DMA2D_Init+0xb0>)
 8007380:	4013      	ands	r3, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68d1      	ldr	r1, [r2, #12]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6812      	ldr	r2, [r2, #0]
 800738a:	430b      	orrs	r3, r1
 800738c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007394:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	051a      	lsls	r2, r3, #20
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	055b      	lsls	r3, r3, #21
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	ffffc000 	.word	0xffffc000

080073cc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d026      	beq.n	800743c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d021      	beq.n	800743c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007406:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740c:	f043 0201 	orr.w	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2201      	movs	r2, #1
 800741a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b00      	cmp	r3, #0
 8007444:	d026      	beq.n	8007494 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d021      	beq.n	8007494 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800745e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2220      	movs	r2, #32
 8007466:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746c:	f043 0202 	orr.w	r2, r3, #2
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d026      	beq.n	80074ec <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d021      	beq.n	80074ec <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074b6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2208      	movs	r2, #8
 80074be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c4:	f043 0204 	orr.w	r2, r3, #4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2204      	movs	r2, #4
 80074d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d013      	beq.n	800751e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00e      	beq.n	800751e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2204      	movs	r2, #4
 8007516:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f853 	bl	80075c4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d024      	beq.n	8007572 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800752e:	2b00      	cmp	r3, #0
 8007530:	d01f      	beq.n	8007572 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007540:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2202      	movs	r2, #2
 8007548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01f      	beq.n	80075bc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d01a      	beq.n	80075bc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007594:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2210      	movs	r2, #16
 800759c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f80e 	bl	80075d8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80075bc:	bf00      	nop
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_DMA2D_ConfigLayer+0x20>
 8007608:	2302      	movs	r3, #2
 800760a:	e084      	b.n	8007716 <HAL_DMA2D_ConfigLayer+0x12a>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	4613      	mov	r3, r2
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	3320      	adds	r3, #32
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	4413      	add	r3, r2
 800762c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	041b      	lsls	r3, r3, #16
 8007638:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007640:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800764c:	4b35      	ldr	r3, [pc, #212]	; (8007724 <HAL_DMA2D_ConfigLayer+0x138>)
 800764e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b0a      	cmp	r3, #10
 8007656:	d003      	beq.n	8007660 <HAL_DMA2D_ConfigLayer+0x74>
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b09      	cmp	r3, #9
 800765e:	d107      	bne.n	8007670 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	e005      	b.n	800767c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d120      	bne.n	80076c4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	43db      	mvns	r3, r3
 800768c:	ea02 0103 	and.w	r1, r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	430a      	orrs	r2, r1
 8007698:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	6812      	ldr	r2, [r2, #0]
 80076a2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b0a      	cmp	r3, #10
 80076aa:	d003      	beq.n	80076b4 <HAL_DMA2D_ConfigLayer+0xc8>
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b09      	cmp	r3, #9
 80076b2:	d127      	bne.n	8007704 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80076c0:	629a      	str	r2, [r3, #40]	; 0x28
 80076c2:	e01f      	b.n	8007704 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69da      	ldr	r2, [r3, #28]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	43db      	mvns	r3, r3
 80076ce:	ea02 0103 	and.w	r1, r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	430a      	orrs	r2, r1
 80076da:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	6812      	ldr	r2, [r2, #0]
 80076e4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b0a      	cmp	r3, #10
 80076ec:	d003      	beq.n	80076f6 <HAL_DMA2D_ConfigLayer+0x10a>
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b09      	cmp	r3, #9
 80076f4:	d106      	bne.n	8007704 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007702:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	ff33000f 	.word	0xff33000f

08007728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007728:	b480      	push	{r7}
 800772a:	b089      	sub	sp, #36	; 0x24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800773a:	2300      	movs	r3, #0
 800773c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800773e:	2300      	movs	r3, #0
 8007740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	e175      	b.n	8007a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007748:	2201      	movs	r2, #1
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4013      	ands	r3, r2
 800775a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	429a      	cmp	r2, r3
 8007762:	f040 8164 	bne.w	8007a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d00b      	beq.n	8007786 <HAL_GPIO_Init+0x5e>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d007      	beq.n	8007786 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800777a:	2b11      	cmp	r3, #17
 800777c:	d003      	beq.n	8007786 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2b12      	cmp	r3, #18
 8007784:	d130      	bne.n	80077e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	2203      	movs	r2, #3
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	43db      	mvns	r3, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	4013      	ands	r3, r2
 800779c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077bc:	2201      	movs	r2, #1
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	fa02 f303 	lsl.w	r3, r2, r3
 80077c4:	43db      	mvns	r3, r3
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	4013      	ands	r3, r2
 80077ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	091b      	lsrs	r3, r3, #4
 80077d2:	f003 0201 	and.w	r2, r3, #1
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	4313      	orrs	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	2203      	movs	r2, #3
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	43db      	mvns	r3, r3
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	4013      	ands	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	4313      	orrs	r3, r2
 8007810:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d003      	beq.n	8007828 <HAL_GPIO_Init+0x100>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b12      	cmp	r3, #18
 8007826:	d123      	bne.n	8007870 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	08da      	lsrs	r2, r3, #3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3208      	adds	r2, #8
 8007830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	220f      	movs	r2, #15
 8007840:	fa02 f303 	lsl.w	r3, r2, r3
 8007844:	43db      	mvns	r3, r3
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	4013      	ands	r3, r2
 800784a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691a      	ldr	r2, [r3, #16]
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	4313      	orrs	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	08da      	lsrs	r2, r3, #3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3208      	adds	r2, #8
 800786a:	69b9      	ldr	r1, [r7, #24]
 800786c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	2203      	movs	r2, #3
 800787c:	fa02 f303 	lsl.w	r3, r2, r3
 8007880:	43db      	mvns	r3, r3
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	4013      	ands	r3, r2
 8007886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f003 0203 	and.w	r2, r3, #3
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	4313      	orrs	r3, r2
 800789c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80be 	beq.w	8007a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078b2:	4b66      	ldr	r3, [pc, #408]	; (8007a4c <HAL_GPIO_Init+0x324>)
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	4a65      	ldr	r2, [pc, #404]	; (8007a4c <HAL_GPIO_Init+0x324>)
 80078b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078bc:	6453      	str	r3, [r2, #68]	; 0x44
 80078be:	4b63      	ldr	r3, [pc, #396]	; (8007a4c <HAL_GPIO_Init+0x324>)
 80078c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80078ca:	4a61      	ldr	r2, [pc, #388]	; (8007a50 <HAL_GPIO_Init+0x328>)
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	089b      	lsrs	r3, r3, #2
 80078d0:	3302      	adds	r3, #2
 80078d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	220f      	movs	r2, #15
 80078e2:	fa02 f303 	lsl.w	r3, r2, r3
 80078e6:	43db      	mvns	r3, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	4013      	ands	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a58      	ldr	r2, [pc, #352]	; (8007a54 <HAL_GPIO_Init+0x32c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d037      	beq.n	8007966 <HAL_GPIO_Init+0x23e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a57      	ldr	r2, [pc, #348]	; (8007a58 <HAL_GPIO_Init+0x330>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d031      	beq.n	8007962 <HAL_GPIO_Init+0x23a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a56      	ldr	r2, [pc, #344]	; (8007a5c <HAL_GPIO_Init+0x334>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d02b      	beq.n	800795e <HAL_GPIO_Init+0x236>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a55      	ldr	r2, [pc, #340]	; (8007a60 <HAL_GPIO_Init+0x338>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d025      	beq.n	800795a <HAL_GPIO_Init+0x232>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a54      	ldr	r2, [pc, #336]	; (8007a64 <HAL_GPIO_Init+0x33c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d01f      	beq.n	8007956 <HAL_GPIO_Init+0x22e>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a53      	ldr	r2, [pc, #332]	; (8007a68 <HAL_GPIO_Init+0x340>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d019      	beq.n	8007952 <HAL_GPIO_Init+0x22a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a52      	ldr	r2, [pc, #328]	; (8007a6c <HAL_GPIO_Init+0x344>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d013      	beq.n	800794e <HAL_GPIO_Init+0x226>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a51      	ldr	r2, [pc, #324]	; (8007a70 <HAL_GPIO_Init+0x348>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00d      	beq.n	800794a <HAL_GPIO_Init+0x222>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a50      	ldr	r2, [pc, #320]	; (8007a74 <HAL_GPIO_Init+0x34c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d007      	beq.n	8007946 <HAL_GPIO_Init+0x21e>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a4f      	ldr	r2, [pc, #316]	; (8007a78 <HAL_GPIO_Init+0x350>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d101      	bne.n	8007942 <HAL_GPIO_Init+0x21a>
 800793e:	2309      	movs	r3, #9
 8007940:	e012      	b.n	8007968 <HAL_GPIO_Init+0x240>
 8007942:	230a      	movs	r3, #10
 8007944:	e010      	b.n	8007968 <HAL_GPIO_Init+0x240>
 8007946:	2308      	movs	r3, #8
 8007948:	e00e      	b.n	8007968 <HAL_GPIO_Init+0x240>
 800794a:	2307      	movs	r3, #7
 800794c:	e00c      	b.n	8007968 <HAL_GPIO_Init+0x240>
 800794e:	2306      	movs	r3, #6
 8007950:	e00a      	b.n	8007968 <HAL_GPIO_Init+0x240>
 8007952:	2305      	movs	r3, #5
 8007954:	e008      	b.n	8007968 <HAL_GPIO_Init+0x240>
 8007956:	2304      	movs	r3, #4
 8007958:	e006      	b.n	8007968 <HAL_GPIO_Init+0x240>
 800795a:	2303      	movs	r3, #3
 800795c:	e004      	b.n	8007968 <HAL_GPIO_Init+0x240>
 800795e:	2302      	movs	r3, #2
 8007960:	e002      	b.n	8007968 <HAL_GPIO_Init+0x240>
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <HAL_GPIO_Init+0x240>
 8007966:	2300      	movs	r3, #0
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	f002 0203 	and.w	r2, r2, #3
 800796e:	0092      	lsls	r2, r2, #2
 8007970:	4093      	lsls	r3, r2
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	4313      	orrs	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007978:	4935      	ldr	r1, [pc, #212]	; (8007a50 <HAL_GPIO_Init+0x328>)
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	089b      	lsrs	r3, r3, #2
 800797e:	3302      	adds	r3, #2
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007986:	4b3d      	ldr	r3, [pc, #244]	; (8007a7c <HAL_GPIO_Init+0x354>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	43db      	mvns	r3, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4013      	ands	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079aa:	4a34      	ldr	r2, [pc, #208]	; (8007a7c <HAL_GPIO_Init+0x354>)
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80079b0:	4b32      	ldr	r3, [pc, #200]	; (8007a7c <HAL_GPIO_Init+0x354>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	43db      	mvns	r3, r3
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	4013      	ands	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079d4:	4a29      	ldr	r2, [pc, #164]	; (8007a7c <HAL_GPIO_Init+0x354>)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079da:	4b28      	ldr	r3, [pc, #160]	; (8007a7c <HAL_GPIO_Init+0x354>)
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	43db      	mvns	r3, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	4013      	ands	r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079fe:	4a1f      	ldr	r2, [pc, #124]	; (8007a7c <HAL_GPIO_Init+0x354>)
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a04:	4b1d      	ldr	r3, [pc, #116]	; (8007a7c <HAL_GPIO_Init+0x354>)
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	4013      	ands	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a28:	4a14      	ldr	r2, [pc, #80]	; (8007a7c <HAL_GPIO_Init+0x354>)
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	3301      	adds	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b0f      	cmp	r3, #15
 8007a38:	f67f ae86 	bls.w	8007748 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	3724      	adds	r7, #36	; 0x24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	40023800 	.word	0x40023800
 8007a50:	40013800 	.word	0x40013800
 8007a54:	40020000 	.word	0x40020000
 8007a58:	40020400 	.word	0x40020400
 8007a5c:	40020800 	.word	0x40020800
 8007a60:	40020c00 	.word	0x40020c00
 8007a64:	40021000 	.word	0x40021000
 8007a68:	40021400 	.word	0x40021400
 8007a6c:	40021800 	.word	0x40021800
 8007a70:	40021c00 	.word	0x40021c00
 8007a74:	40022000 	.word	0x40022000
 8007a78:	40022400 	.word	0x40022400
 8007a7c:	40013c00 	.word	0x40013c00

08007a80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	e0d9      	b.n	8007c50 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	f040 80c9 	bne.w	8007c4a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007ab8:	4a6b      	ldr	r2, [pc, #428]	; (8007c68 <HAL_GPIO_DeInit+0x1e8>)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	089b      	lsrs	r3, r3, #2
 8007abe:	3302      	adds	r3, #2
 8007ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	220f      	movs	r2, #15
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a63      	ldr	r2, [pc, #396]	; (8007c6c <HAL_GPIO_DeInit+0x1ec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d037      	beq.n	8007b52 <HAL_GPIO_DeInit+0xd2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a62      	ldr	r2, [pc, #392]	; (8007c70 <HAL_GPIO_DeInit+0x1f0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d031      	beq.n	8007b4e <HAL_GPIO_DeInit+0xce>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a61      	ldr	r2, [pc, #388]	; (8007c74 <HAL_GPIO_DeInit+0x1f4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d02b      	beq.n	8007b4a <HAL_GPIO_DeInit+0xca>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a60      	ldr	r2, [pc, #384]	; (8007c78 <HAL_GPIO_DeInit+0x1f8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d025      	beq.n	8007b46 <HAL_GPIO_DeInit+0xc6>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a5f      	ldr	r2, [pc, #380]	; (8007c7c <HAL_GPIO_DeInit+0x1fc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d01f      	beq.n	8007b42 <HAL_GPIO_DeInit+0xc2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a5e      	ldr	r2, [pc, #376]	; (8007c80 <HAL_GPIO_DeInit+0x200>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d019      	beq.n	8007b3e <HAL_GPIO_DeInit+0xbe>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a5d      	ldr	r2, [pc, #372]	; (8007c84 <HAL_GPIO_DeInit+0x204>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d013      	beq.n	8007b3a <HAL_GPIO_DeInit+0xba>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a5c      	ldr	r2, [pc, #368]	; (8007c88 <HAL_GPIO_DeInit+0x208>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00d      	beq.n	8007b36 <HAL_GPIO_DeInit+0xb6>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a5b      	ldr	r2, [pc, #364]	; (8007c8c <HAL_GPIO_DeInit+0x20c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d007      	beq.n	8007b32 <HAL_GPIO_DeInit+0xb2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a5a      	ldr	r2, [pc, #360]	; (8007c90 <HAL_GPIO_DeInit+0x210>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <HAL_GPIO_DeInit+0xae>
 8007b2a:	2309      	movs	r3, #9
 8007b2c:	e012      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b2e:	230a      	movs	r3, #10
 8007b30:	e010      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b32:	2308      	movs	r3, #8
 8007b34:	e00e      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b36:	2307      	movs	r3, #7
 8007b38:	e00c      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b3a:	2306      	movs	r3, #6
 8007b3c:	e00a      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b3e:	2305      	movs	r3, #5
 8007b40:	e008      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b42:	2304      	movs	r3, #4
 8007b44:	e006      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b46:	2303      	movs	r3, #3
 8007b48:	e004      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e002      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <HAL_GPIO_DeInit+0xd4>
 8007b52:	2300      	movs	r3, #0
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	f002 0203 	and.w	r2, r2, #3
 8007b5a:	0092      	lsls	r2, r2, #2
 8007b5c:	4093      	lsls	r3, r2
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d132      	bne.n	8007bca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b64:	4b4b      	ldr	r3, [pc, #300]	; (8007c94 <HAL_GPIO_DeInit+0x214>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	43db      	mvns	r3, r3
 8007b6c:	4949      	ldr	r1, [pc, #292]	; (8007c94 <HAL_GPIO_DeInit+0x214>)
 8007b6e:	4013      	ands	r3, r2
 8007b70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b72:	4b48      	ldr	r3, [pc, #288]	; (8007c94 <HAL_GPIO_DeInit+0x214>)
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	4946      	ldr	r1, [pc, #280]	; (8007c94 <HAL_GPIO_DeInit+0x214>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b80:	4b44      	ldr	r3, [pc, #272]	; (8007c94 <HAL_GPIO_DeInit+0x214>)
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	43db      	mvns	r3, r3
 8007b88:	4942      	ldr	r1, [pc, #264]	; (8007c94 <HAL_GPIO_DeInit+0x214>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b8e:	4b41      	ldr	r3, [pc, #260]	; (8007c94 <HAL_GPIO_DeInit+0x214>)
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	43db      	mvns	r3, r3
 8007b96:	493f      	ldr	r1, [pc, #252]	; (8007c94 <HAL_GPIO_DeInit+0x214>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	220f      	movs	r2, #15
 8007ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8007baa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007bac:	4a2e      	ldr	r2, [pc, #184]	; (8007c68 <HAL_GPIO_DeInit+0x1e8>)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	089b      	lsrs	r3, r3, #2
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	43da      	mvns	r2, r3
 8007bbc:	482a      	ldr	r0, [pc, #168]	; (8007c68 <HAL_GPIO_DeInit+0x1e8>)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	089b      	lsrs	r3, r3, #2
 8007bc2:	400a      	ands	r2, r1
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	2103      	movs	r1, #3
 8007bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	401a      	ands	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	08da      	lsrs	r2, r3, #3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3208      	adds	r2, #8
 8007be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	220f      	movs	r2, #15
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	43db      	mvns	r3, r3
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	08d2      	lsrs	r2, r2, #3
 8007c00:	4019      	ands	r1, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3208      	adds	r2, #8
 8007c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	2103      	movs	r1, #3
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	2101      	movs	r1, #1
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	401a      	ands	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	2103      	movs	r1, #3
 8007c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c42:	43db      	mvns	r3, r3
 8007c44:	401a      	ands	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2b0f      	cmp	r3, #15
 8007c54:	f67f af22 	bls.w	8007a9c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007c58:	bf00      	nop
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40013800 	.word	0x40013800
 8007c6c:	40020000 	.word	0x40020000
 8007c70:	40020400 	.word	0x40020400
 8007c74:	40020800 	.word	0x40020800
 8007c78:	40020c00 	.word	0x40020c00
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	40021400 	.word	0x40021400
 8007c84:	40021800 	.word	0x40021800
 8007c88:	40021c00 	.word	0x40021c00
 8007c8c:	40022000 	.word	0x40022000
 8007c90:	40022400 	.word	0x40022400
 8007c94:	40013c00 	.word	0x40013c00

08007c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	807b      	strh	r3, [r7, #2]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ca8:	787b      	ldrb	r3, [r7, #1]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cae:	887a      	ldrh	r2, [r7, #2]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007cb4:	e003      	b.n	8007cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007cb6:	887b      	ldrh	r3, [r7, #2]
 8007cb8:	041a      	lsls	r2, r3, #16
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	619a      	str	r2, [r3, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e07f      	b.n	8007dde <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7f9 fb76 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2224      	movs	r2, #36	; 0x24
 8007cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0201 	bic.w	r2, r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d107      	bne.n	8007d46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689a      	ldr	r2, [r3, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d42:	609a      	str	r2, [r3, #8]
 8007d44:	e006      	b.n	8007d54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d104      	bne.n	8007d66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6859      	ldr	r1, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	4b1d      	ldr	r3, [pc, #116]	; (8007de8 <HAL_I2C_Init+0x11c>)
 8007d72:	430b      	orrs	r3, r1
 8007d74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691a      	ldr	r2, [r3, #16]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	ea42 0103 	orr.w	r1, r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	021a      	lsls	r2, r3, #8
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	69d9      	ldr	r1, [r3, #28]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a1a      	ldr	r2, [r3, #32]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	02008000 	.word	0x02008000

08007dec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d138      	bne.n	8007e74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e032      	b.n	8007e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2224      	movs	r2, #36	; 0x24
 8007e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0201 	bic.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6819      	ldr	r1, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0201 	orr.w	r2, r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e000      	b.n	8007e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e74:	2302      	movs	r3, #2
  }
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b20      	cmp	r3, #32
 8007e96:	d139      	bne.n	8007f0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d101      	bne.n	8007ea6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e033      	b.n	8007f0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2224      	movs	r2, #36	; 0x24
 8007eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 0201 	bic.w	r2, r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ed4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	021b      	lsls	r3, r3, #8
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0201 	orr.w	r2, r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2220      	movs	r2, #32
 8007efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e000      	b.n	8007f0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f0c:	2302      	movs	r3, #2
  }
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
	...

08007f1c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e0bf      	b.n	80080ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7f9 fb54 	bl	80015f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007f5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6999      	ldr	r1, [r3, #24]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f74:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6899      	ldr	r1, [r3, #8]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	4b4a      	ldr	r3, [pc, #296]	; (80080b8 <HAL_LTDC_Init+0x19c>)
 8007f90:	400b      	ands	r3, r1
 8007f92:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	041b      	lsls	r3, r3, #16
 8007f9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6899      	ldr	r1, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68d9      	ldr	r1, [r3, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	4b3e      	ldr	r3, [pc, #248]	; (80080b8 <HAL_LTDC_Init+0x19c>)
 8007fbe:	400b      	ands	r3, r1
 8007fc0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	041b      	lsls	r3, r3, #16
 8007fc8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68d9      	ldr	r1, [r3, #12]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1a      	ldr	r2, [r3, #32]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6919      	ldr	r1, [r3, #16]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	4b33      	ldr	r3, [pc, #204]	; (80080b8 <HAL_LTDC_Init+0x19c>)
 8007fec:	400b      	ands	r3, r1
 8007fee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	041b      	lsls	r3, r3, #16
 8007ff6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6919      	ldr	r1, [r3, #16]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	431a      	orrs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6959      	ldr	r1, [r3, #20]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	4b27      	ldr	r3, [pc, #156]	; (80080b8 <HAL_LTDC_Init+0x19c>)
 800801a:	400b      	ands	r3, r1
 800801c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	041b      	lsls	r3, r3, #16
 8008024:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6959      	ldr	r1, [r3, #20]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800804c:	041b      	lsls	r3, r3, #16
 800804e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800805e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0206 	orr.w	r2, r2, #6
 800808a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	f000f800 	.word	0xf000f800

080080bc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d023      	beq.n	8008126 <HAL_LTDC_IRQHandler+0x6a>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01e      	beq.n	8008126 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0204 	bic.w	r2, r2, #4
 80080f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2204      	movs	r2, #4
 80080fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008106:	f043 0201 	orr.w	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2204      	movs	r2, #4
 8008114:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f86f 	bl	8008204 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d023      	beq.n	8008178 <HAL_LTDC_IRQHandler+0xbc>
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d01e      	beq.n	8008178 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0202 	bic.w	r2, r2, #2
 8008148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2202      	movs	r2, #2
 8008150:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008158:	f043 0202 	orr.w	r2, r3, #2
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2204      	movs	r2, #4
 8008166:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f846 	bl	8008204 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01b      	beq.n	80081ba <HAL_LTDC_IRQHandler+0xfe>
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d016      	beq.n	80081ba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2201      	movs	r2, #1
 80081a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7fc f957 	bl	8004468 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f003 0308 	and.w	r3, r3, #8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d01b      	beq.n	80081fc <HAL_LTDC_IRQHandler+0x140>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d016      	beq.n	80081fc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0208 	bic.w	r2, r2, #8
 80081dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2208      	movs	r2, #8
 80081e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f80e 	bl	8008218 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80081fc:	bf00      	nop
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800822c:	b5b0      	push	{r4, r5, r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800823e:	2b01      	cmp	r3, #1
 8008240:	d101      	bne.n	8008246 <HAL_LTDC_ConfigLayer+0x1a>
 8008242:	2302      	movs	r3, #2
 8008244:	e02c      	b.n	80082a0 <HAL_LTDC_ConfigLayer+0x74>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2202      	movs	r2, #2
 8008252:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2134      	movs	r1, #52	; 0x34
 800825c:	fb01 f303 	mul.w	r3, r1, r3
 8008260:	4413      	add	r3, r2
 8008262:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	4614      	mov	r4, r2
 800826a:	461d      	mov	r5, r3
 800826c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800826e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 f849 	bl	8008318 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2201      	movs	r2, #1
 800828c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bdb0      	pop	{r4, r5, r7, pc}

080082a8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_LTDC_ProgramLineEvent+0x18>
 80082bc:	2302      	movs	r3, #2
 80082be:	e023      	b.n	8008308 <HAL_LTDC_ProgramLineEvent+0x60>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0201 	bic.w	r2, r2, #1
 80082de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80082e0:	4a0c      	ldr	r2, [pc, #48]	; (8008314 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f042 0201 	orr.w	r2, r2, #1
 80082f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	40016800 	.word	0x40016800

08008318 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008318:	b480      	push	{r7}
 800831a:	b089      	sub	sp, #36	; 0x24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	0c1b      	lsrs	r3, r3, #16
 8008330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008334:	4413      	add	r3, r2
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	01db      	lsls	r3, r3, #7
 8008344:	4413      	add	r3, r2
 8008346:	3384      	adds	r3, #132	; 0x84
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	6812      	ldr	r2, [r2, #0]
 800834e:	4611      	mov	r1, r2
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	01d2      	lsls	r2, r2, #7
 8008354:	440a      	add	r2, r1
 8008356:	3284      	adds	r2, #132	; 0x84
 8008358:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800835c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	0c1b      	lsrs	r3, r3, #16
 800836a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800836e:	4413      	add	r3, r2
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4619      	mov	r1, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	01db      	lsls	r3, r3, #7
 800837c:	440b      	add	r3, r1
 800837e:	3384      	adds	r3, #132	; 0x84
 8008380:	4619      	mov	r1, r3
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4313      	orrs	r3, r2
 8008386:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008396:	4413      	add	r3, r2
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	01db      	lsls	r3, r3, #7
 80083a6:	4413      	add	r3, r2
 80083a8:	3384      	adds	r3, #132	; 0x84
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	6812      	ldr	r2, [r2, #0]
 80083b0:	4611      	mov	r1, r2
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	01d2      	lsls	r2, r2, #7
 80083b6:	440a      	add	r2, r1
 80083b8:	3284      	adds	r2, #132	; 0x84
 80083ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80083be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083ce:	4413      	add	r3, r2
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4619      	mov	r1, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	01db      	lsls	r3, r3, #7
 80083dc:	440b      	add	r3, r1
 80083de:	3384      	adds	r3, #132	; 0x84
 80083e0:	4619      	mov	r1, r3
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	01db      	lsls	r3, r3, #7
 80083f2:	4413      	add	r3, r2
 80083f4:	3384      	adds	r3, #132	; 0x84
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	6812      	ldr	r2, [r2, #0]
 80083fc:	4611      	mov	r1, r2
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	01d2      	lsls	r2, r2, #7
 8008402:	440a      	add	r2, r1
 8008404:	3284      	adds	r2, #132	; 0x84
 8008406:	f023 0307 	bic.w	r3, r3, #7
 800840a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	01db      	lsls	r3, r3, #7
 8008416:	4413      	add	r3, r2
 8008418:	3384      	adds	r3, #132	; 0x84
 800841a:	461a      	mov	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008428:	021b      	lsls	r3, r3, #8
 800842a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008432:	041b      	lsls	r3, r3, #16
 8008434:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	061b      	lsls	r3, r3, #24
 800843c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	01db      	lsls	r3, r3, #7
 8008448:	4413      	add	r3, r2
 800844a:	3384      	adds	r3, #132	; 0x84
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	01db      	lsls	r3, r3, #7
 8008458:	4413      	add	r3, r2
 800845a:	3384      	adds	r3, #132	; 0x84
 800845c:	461a      	mov	r2, r3
 800845e:	2300      	movs	r3, #0
 8008460:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008468:	461a      	mov	r2, r3
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	431a      	orrs	r2, r3
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	431a      	orrs	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4619      	mov	r1, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	01db      	lsls	r3, r3, #7
 800847c:	440b      	add	r3, r1
 800847e:	3384      	adds	r3, #132	; 0x84
 8008480:	4619      	mov	r1, r3
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	4313      	orrs	r3, r2
 8008486:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	01db      	lsls	r3, r3, #7
 8008492:	4413      	add	r3, r2
 8008494:	3384      	adds	r3, #132	; 0x84
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	4611      	mov	r1, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	01d2      	lsls	r2, r2, #7
 80084a2:	440a      	add	r2, r1
 80084a4:	3284      	adds	r2, #132	; 0x84
 80084a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	01db      	lsls	r3, r3, #7
 80084b6:	4413      	add	r3, r2
 80084b8:	3384      	adds	r3, #132	; 0x84
 80084ba:	461a      	mov	r2, r3
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	01db      	lsls	r3, r3, #7
 80084cc:	4413      	add	r3, r2
 80084ce:	3384      	adds	r3, #132	; 0x84
 80084d0:	69da      	ldr	r2, [r3, #28]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4619      	mov	r1, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	01db      	lsls	r3, r3, #7
 80084dc:	440b      	add	r3, r1
 80084de:	3384      	adds	r3, #132	; 0x84
 80084e0:	4619      	mov	r1, r3
 80084e2:	4b58      	ldr	r3, [pc, #352]	; (8008644 <LTDC_SetConfig+0x32c>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	68f9      	ldr	r1, [r7, #12]
 80084f2:	6809      	ldr	r1, [r1, #0]
 80084f4:	4608      	mov	r0, r1
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	01c9      	lsls	r1, r1, #7
 80084fa:	4401      	add	r1, r0
 80084fc:	3184      	adds	r1, #132	; 0x84
 80084fe:	4313      	orrs	r3, r2
 8008500:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	01db      	lsls	r3, r3, #7
 800850c:	4413      	add	r3, r2
 800850e:	3384      	adds	r3, #132	; 0x84
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	01db      	lsls	r3, r3, #7
 800851c:	4413      	add	r3, r2
 800851e:	3384      	adds	r3, #132	; 0x84
 8008520:	461a      	mov	r2, r3
 8008522:	2300      	movs	r3, #0
 8008524:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	01db      	lsls	r3, r3, #7
 8008530:	4413      	add	r3, r2
 8008532:	3384      	adds	r3, #132	; 0x84
 8008534:	461a      	mov	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008544:	2304      	movs	r3, #4
 8008546:	61fb      	str	r3, [r7, #28]
 8008548:	e01b      	b.n	8008582 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d102      	bne.n	8008558 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008552:	2303      	movs	r3, #3
 8008554:	61fb      	str	r3, [r7, #28]
 8008556:	e014      	b.n	8008582 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b04      	cmp	r3, #4
 800855e:	d00b      	beq.n	8008578 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008564:	2b02      	cmp	r3, #2
 8008566:	d007      	beq.n	8008578 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800856c:	2b03      	cmp	r3, #3
 800856e:	d003      	beq.n	8008578 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008574:	2b07      	cmp	r3, #7
 8008576:	d102      	bne.n	800857e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008578:	2302      	movs	r3, #2
 800857a:	61fb      	str	r3, [r7, #28]
 800857c:	e001      	b.n	8008582 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800857e:	2301      	movs	r3, #1
 8008580:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	01db      	lsls	r3, r3, #7
 800858c:	4413      	add	r3, r2
 800858e:	3384      	adds	r3, #132	; 0x84
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	4611      	mov	r1, r2
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	01d2      	lsls	r2, r2, #7
 800859c:	440a      	add	r2, r1
 800859e:	3284      	adds	r2, #132	; 0x84
 80085a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80085a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085aa:	69fa      	ldr	r2, [r7, #28]
 80085ac:	fb02 f303 	mul.w	r3, r2, r3
 80085b0:	041a      	lsls	r2, r3, #16
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	6859      	ldr	r1, [r3, #4]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	1acb      	subs	r3, r1, r3
 80085bc:	69f9      	ldr	r1, [r7, #28]
 80085be:	fb01 f303 	mul.w	r3, r1, r3
 80085c2:	3303      	adds	r3, #3
 80085c4:	68f9      	ldr	r1, [r7, #12]
 80085c6:	6809      	ldr	r1, [r1, #0]
 80085c8:	4608      	mov	r0, r1
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	01c9      	lsls	r1, r1, #7
 80085ce:	4401      	add	r1, r0
 80085d0:	3184      	adds	r1, #132	; 0x84
 80085d2:	4313      	orrs	r3, r2
 80085d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	01db      	lsls	r3, r3, #7
 80085e0:	4413      	add	r3, r2
 80085e2:	3384      	adds	r3, #132	; 0x84
 80085e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4619      	mov	r1, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	01db      	lsls	r3, r3, #7
 80085f0:	440b      	add	r3, r1
 80085f2:	3384      	adds	r3, #132	; 0x84
 80085f4:	4619      	mov	r1, r3
 80085f6:	4b14      	ldr	r3, [pc, #80]	; (8008648 <LTDC_SetConfig+0x330>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	01db      	lsls	r3, r3, #7
 8008606:	4413      	add	r3, r2
 8008608:	3384      	adds	r3, #132	; 0x84
 800860a:	461a      	mov	r2, r3
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008610:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	01db      	lsls	r3, r3, #7
 800861c:	4413      	add	r3, r2
 800861e:	3384      	adds	r3, #132	; 0x84
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	4611      	mov	r1, r2
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	01d2      	lsls	r2, r2, #7
 800862c:	440a      	add	r2, r1
 800862e:	3284      	adds	r2, #132	; 0x84
 8008630:	f043 0301 	orr.w	r3, r3, #1
 8008634:	6013      	str	r3, [r2, #0]
}
 8008636:	bf00      	nop
 8008638:	3724      	adds	r7, #36	; 0x24
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	fffff8f8 	.word	0xfffff8f8
 8008648:	fffff800 	.word	0xfffff800

0800864c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008656:	4b23      	ldr	r3, [pc, #140]	; (80086e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	4a22      	ldr	r2, [pc, #136]	; (80086e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800865c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008660:	6413      	str	r3, [r2, #64]	; 0x40
 8008662:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800866e:	4b1e      	ldr	r3, [pc, #120]	; (80086e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a1d      	ldr	r2, [pc, #116]	; (80086e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008678:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800867a:	f7fd ffd1 	bl	8006620 <HAL_GetTick>
 800867e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008680:	e009      	b.n	8008696 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008682:	f7fd ffcd 	bl	8006620 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008690:	d901      	bls.n	8008696 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e022      	b.n	80086dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800869e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a2:	d1ee      	bne.n	8008682 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80086a4:	4b10      	ldr	r3, [pc, #64]	; (80086e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a0f      	ldr	r2, [pc, #60]	; (80086e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80086aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086b0:	f7fd ffb6 	bl	8006620 <HAL_GetTick>
 80086b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80086b6:	e009      	b.n	80086cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80086b8:	f7fd ffb2 	bl	8006620 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086c6:	d901      	bls.n	80086cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e007      	b.n	80086dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80086cc:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086d8:	d1ee      	bne.n	80086b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40023800 	.word	0x40023800
 80086e8:	40007000 	.word	0x40007000

080086ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80086f4:	f7fd ff94 	bl	8006620 <HAL_GetTick>
 80086f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e067      	b.n	80087d4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10b      	bne.n	8008728 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7f9 fa25 	bl	8001b68 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800871e:	f241 3188 	movw	r1, #5000	; 0x1388
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fae8 	bl	8008cf8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	3b01      	subs	r3, #1
 8008738:	021a      	lsls	r2, r3, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	2120      	movs	r1, #32
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fae0 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 8008754:	4603      	mov	r3, r0
 8008756:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008758:	7afb      	ldrb	r3, [r7, #11]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d135      	bne.n	80087ca <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	4b1d      	ldr	r3, [pc, #116]	; (80087dc <HAL_QSPI_Init+0xf0>)
 8008766:	4013      	ands	r3, r2
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	6852      	ldr	r2, [r2, #4]
 800876c:	0611      	lsls	r1, r2, #24
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	68d2      	ldr	r2, [r2, #12]
 8008772:	4311      	orrs	r1, r2
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	69d2      	ldr	r2, [r2, #28]
 8008778:	4311      	orrs	r1, r2
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6a12      	ldr	r2, [r2, #32]
 800877e:	4311      	orrs	r1, r2
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	430b      	orrs	r3, r1
 8008786:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	4b14      	ldr	r3, [pc, #80]	; (80087e0 <HAL_QSPI_Init+0xf4>)
 8008790:	4013      	ands	r3, r2
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	6912      	ldr	r2, [r2, #16]
 8008796:	0411      	lsls	r1, r2, #16
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	6952      	ldr	r2, [r2, #20]
 800879c:	4311      	orrs	r1, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6992      	ldr	r2, [r2, #24]
 80087a2:	4311      	orrs	r1, r2
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6812      	ldr	r2, [r2, #0]
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80087d2:	7afb      	ldrb	r3, [r7, #11]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	00ffff2f 	.word	0x00ffff2f
 80087e0:	ffe0f8fe 	.word	0xffe0f8fe

080087e4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e016      	b.n	8008824 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0201 	bic.w	r2, r2, #1
 8008804:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7f9 fa30 	bl	8001c6c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008838:	f7fd fef2 	bl	8006620 <HAL_GetTick>
 800883c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b01      	cmp	r3, #1
 8008848:	d101      	bne.n	800884e <HAL_QSPI_Command+0x22>
 800884a:	2302      	movs	r3, #2
 800884c:	e048      	b.n	80088e0 <HAL_QSPI_Command+0xb4>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b01      	cmp	r3, #1
 8008860:	d137      	bne.n	80088d2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2200      	movs	r2, #0
 8008878:	2120      	movs	r1, #32
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 fa4a 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 8008880:	4603      	mov	r3, r0
 8008882:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d125      	bne.n	80088d6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800888a:	2200      	movs	r2, #0
 800888c:	68b9      	ldr	r1, [r7, #8]
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 fa77 	bl	8008d82 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	d115      	bne.n	80088c8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2201      	movs	r2, #1
 80088a4:	2102      	movs	r1, #2
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 fa34 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10f      	bne.n	80088d6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2202      	movs	r2, #2
 80088bc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088c6:	e006      	b.n	80088d6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088d0:	e001      	b.n	80088d6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80088d2:	2302      	movs	r3, #2
 80088d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	; 0x28
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80088f8:	f7fd fe92 	bl	8006620 <HAL_GetTick>
 80088fc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3320      	adds	r3, #32
 8008904:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_QSPI_Transmit+0x2e>
 8008912:	2302      	movs	r3, #2
 8008914:	e076      	b.n	8008a04 <HAL_QSPI_Transmit+0x11c>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b01      	cmp	r3, #1
 8008928:	d165      	bne.n	80089f6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d056      	beq.n	80089e4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2212      	movs	r2, #18
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695a      	ldr	r2, [r3, #20]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800896a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800896c:	e01b      	b.n	80089a6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	2201      	movs	r2, #1
 8008976:	2104      	movs	r1, #4
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f9cb 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 800897e:	4603      	mov	r3, r0
 8008980:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8008982:	7ffb      	ldrb	r3, [r7, #31]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d113      	bne.n	80089b0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	781a      	ldrb	r2, [r3, #0]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	1e5a      	subs	r2, r3, #1
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1df      	bne.n	800896e <HAL_QSPI_Transmit+0x86>
 80089ae:	e000      	b.n	80089b2 <HAL_QSPI_Transmit+0xca>
          break;
 80089b0:	bf00      	nop
      }

      if (status == HAL_OK)
 80089b2:	7ffb      	ldrb	r3, [r7, #31]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d110      	bne.n	80089da <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	2201      	movs	r2, #1
 80089c0:	2102      	movs	r1, #2
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 f9a6 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 80089c8:	4603      	mov	r3, r0
 80089ca:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80089cc:	7ffb      	ldrb	r3, [r7, #31]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2202      	movs	r2, #2
 80089d8:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089e2:	e00a      	b.n	80089fa <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e8:	f043 0208 	orr.w	r2, r3, #8
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	77fb      	strb	r3, [r7, #31]
 80089f4:	e001      	b.n	80089fa <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80089f6:	2302      	movs	r3, #2
 80089f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8008a02:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3720      	adds	r7, #32
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8008a1c:	f7fd fe00 	bl	8006620 <HAL_GetTick>
 8008a20:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3320      	adds	r3, #32
 8008a30:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_QSPI_Receive+0x36>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e07d      	b.n	8008b3e <HAL_QSPI_Receive+0x132>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d16c      	bne.n	8008b30 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d05d      	beq.n	8008b1e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2222      	movs	r2, #34	; 0x22
 8008a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008a9a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8008aa4:	e01c      	b.n	8008ae0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	2201      	movs	r2, #1
 8008aae:	2106      	movs	r1, #6
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 f92f 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8008aba:	7ffb      	ldrb	r3, [r7, #31]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d114      	bne.n	8008aea <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	7812      	ldrb	r2, [r2, #0]
 8008ac8:	b2d2      	uxtb	r2, r2
 8008aca:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	1e5a      	subs	r2, r3, #1
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1de      	bne.n	8008aa6 <HAL_QSPI_Receive+0x9a>
 8008ae8:	e000      	b.n	8008aec <HAL_QSPI_Receive+0xe0>
          break;
 8008aea:	bf00      	nop
      }

      if (status == HAL_OK)
 8008aec:	7ffb      	ldrb	r3, [r7, #31]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d110      	bne.n	8008b14 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	2201      	movs	r2, #1
 8008afa:	2102      	movs	r1, #2
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f909 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8008b06:	7ffb      	ldrb	r3, [r7, #31]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d103      	bne.n	8008b14 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2202      	movs	r2, #2
 8008b12:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b1c:	e00a      	b.n	8008b34 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b22:	f043 0208 	orr.w	r2, r3, #8
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	77fb      	strb	r3, [r7, #31]
 8008b2e:	e001      	b.n	8008b34 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008b30:	2302      	movs	r3, #2
 8008b32:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8008b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b088      	sub	sp, #32
 8008b4a:	af02      	add	r7, sp, #8
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008b54:	f7fd fd64 	bl	8006620 <HAL_GetTick>
 8008b58:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d101      	bne.n	8008b6a <HAL_QSPI_AutoPolling+0x24>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e060      	b.n	8008c2c <HAL_QSPI_AutoPolling+0xe6>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d14f      	bne.n	8008c1e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2242      	movs	r2, #66	; 0x42
 8008b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2200      	movs	r2, #0
 8008b94:	2120      	movs	r1, #32
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f8bc 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d13d      	bne.n	8008c22 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6812      	ldr	r2, [r2, #0]
 8008bae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6852      	ldr	r2, [r2, #4]
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	6892      	ldr	r2, [r2, #8]
 8008bc2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	431a      	orrs	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008bdc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f8c8 	bl	8008d82 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	2108      	movs	r1, #8
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f889 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2208      	movs	r2, #8
 8008c12:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c1c:	e001      	b.n	8008c22 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008c40:	f7fd fcee 	bl	8006620 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_QSPI_MemoryMapped+0x22>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e04c      	b.n	8008cf0 <HAL_QSPI_MemoryMapped+0xbc>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d13b      	bne.n	8008ce2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2282      	movs	r2, #130	; 0x82
 8008c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	2200      	movs	r2, #0
 8008c82:	2120      	movs	r1, #32
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 f845 	bl	8008d14 <QSPI_WaitFlagStateUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d128      	bne.n	8008ce6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f023 0108 	bic.w	r1, r3, #8
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d110      	bne.n	8008cd4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6812      	ldr	r2, [r2, #0]
 8008cba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2210      	movs	r2, #16
 8008cc2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008cd2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008cd4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f851 	bl	8008d82 <QSPI_Config>
 8008ce0:	e001      	b.n	8008ce6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	4613      	mov	r3, r2
 8008d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008d24:	e01a      	b.n	8008d5c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d016      	beq.n	8008d5c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d2e:	f7fd fc77 	bl	8006620 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d302      	bcc.n	8008d44 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10b      	bne.n	8008d5c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2204      	movs	r2, #4
 8008d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d50:	f043 0201 	orr.w	r2, r3, #1
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e00e      	b.n	8008d7a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689a      	ldr	r2, [r3, #8]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	4013      	ands	r3, r2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bf14      	ite	ne
 8008d6a:	2301      	movne	r3, #1
 8008d6c:	2300      	moveq	r3, #0
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	461a      	mov	r2, r3
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d1d6      	bne.n	8008d26 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b085      	sub	sp, #20
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <QSPI_Config+0x28>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008d9c:	d005      	beq.n	8008daa <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3a01      	subs	r2, #1
 8008da8:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 80b9 	beq.w	8008f26 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d05f      	beq.n	8008e7c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	6892      	ldr	r2, [r2, #8]
 8008dc4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d031      	beq.n	8008e32 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	431a      	orrs	r2, r3
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	049b      	lsls	r3, r3, #18
 8008dea:	431a      	orrs	r2, r3
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	ea42 0103 	orr.w	r1, r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008e22:	f000 812e 	beq.w	8009082 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	6852      	ldr	r2, [r2, #4]
 8008e2e:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008e30:	e127      	b.n	8009082 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e40:	431a      	orrs	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	431a      	orrs	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	049b      	lsls	r3, r3, #18
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	431a      	orrs	r2, r3
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	431a      	orrs	r2, r3
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	431a      	orrs	r2, r3
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	ea42 0103 	orr.w	r1, r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	615a      	str	r2, [r3, #20]
}
 8008e7a:	e102      	b.n	8009082 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d02e      	beq.n	8008ee2 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	431a      	orrs	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	049b      	lsls	r3, r3, #18
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	431a      	orrs	r2, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	ea42 0103 	orr.w	r1, r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008ed2:	f000 80d6 	beq.w	8009082 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	6852      	ldr	r2, [r2, #4]
 8008ede:	619a      	str	r2, [r3, #24]
}
 8008ee0:	e0cf      	b.n	8009082 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eea:	431a      	orrs	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	049b      	lsls	r3, r3, #18
 8008efe:	431a      	orrs	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	431a      	orrs	r2, r3
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	431a      	orrs	r2, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	ea42 0103 	orr.w	r1, r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	615a      	str	r2, [r3, #20]
}
 8008f24:	e0ad      	b.n	8009082 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d058      	beq.n	8008fe0 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	6892      	ldr	r2, [r2, #8]
 8008f36:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d02d      	beq.n	8008f9c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	431a      	orrs	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	049b      	lsls	r3, r3, #18
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	431a      	orrs	r2, r3
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	ea42 0103 	orr.w	r1, r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008f8e:	d078      	beq.n	8009082 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	6852      	ldr	r2, [r2, #4]
 8008f98:	619a      	str	r2, [r3, #24]
}
 8008f9a:	e072      	b.n	8009082 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	431a      	orrs	r2, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	049b      	lsls	r3, r3, #18
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	ea42 0103 	orr.w	r1, r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	615a      	str	r2, [r3, #20]
}
 8008fde:	e050      	b.n	8009082 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d02a      	beq.n	800903e <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff0:	431a      	orrs	r2, r3
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	049b      	lsls	r3, r3, #18
 8009004:	431a      	orrs	r2, r3
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	431a      	orrs	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	431a      	orrs	r2, r3
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	431a      	orrs	r2, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	ea42 0103 	orr.w	r1, r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	430a      	orrs	r2, r1
 8009028:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009030:	d027      	beq.n	8009082 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	6852      	ldr	r2, [r2, #4]
 800903a:	619a      	str	r2, [r3, #24]
}
 800903c:	e021      	b.n	8009082 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	2b00      	cmp	r3, #0
 8009044:	d01d      	beq.n	8009082 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904e:	431a      	orrs	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009054:	431a      	orrs	r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	431a      	orrs	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	049b      	lsls	r3, r3, #18
 8009062:	431a      	orrs	r2, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	431a      	orrs	r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	431a      	orrs	r2, r3
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	ea42 0103 	orr.w	r1, r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	430a      	orrs	r2, r1
 8009080:	615a      	str	r2, [r3, #20]
}
 8009082:	bf00      	nop
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
	...

08009090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009098:	2300      	movs	r3, #0
 800909a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e29b      	b.n	80095de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 8087 	beq.w	80091c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80090b4:	4b96      	ldr	r3, [pc, #600]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f003 030c 	and.w	r3, r3, #12
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d00c      	beq.n	80090da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80090c0:	4b93      	ldr	r3, [pc, #588]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f003 030c 	and.w	r3, r3, #12
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d112      	bne.n	80090f2 <HAL_RCC_OscConfig+0x62>
 80090cc:	4b90      	ldr	r3, [pc, #576]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090d8:	d10b      	bne.n	80090f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090da:	4b8d      	ldr	r3, [pc, #564]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d06c      	beq.n	80091c0 <HAL_RCC_OscConfig+0x130>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d168      	bne.n	80091c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e275      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090fa:	d106      	bne.n	800910a <HAL_RCC_OscConfig+0x7a>
 80090fc:	4b84      	ldr	r3, [pc, #528]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a83      	ldr	r2, [pc, #524]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	e02e      	b.n	8009168 <HAL_RCC_OscConfig+0xd8>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10c      	bne.n	800912c <HAL_RCC_OscConfig+0x9c>
 8009112:	4b7f      	ldr	r3, [pc, #508]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a7e      	ldr	r2, [pc, #504]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	4b7c      	ldr	r3, [pc, #496]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a7b      	ldr	r2, [pc, #492]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	e01d      	b.n	8009168 <HAL_RCC_OscConfig+0xd8>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009134:	d10c      	bne.n	8009150 <HAL_RCC_OscConfig+0xc0>
 8009136:	4b76      	ldr	r3, [pc, #472]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a75      	ldr	r2, [pc, #468]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 800913c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	4b73      	ldr	r3, [pc, #460]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a72      	ldr	r2, [pc, #456]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800914c:	6013      	str	r3, [r2, #0]
 800914e:	e00b      	b.n	8009168 <HAL_RCC_OscConfig+0xd8>
 8009150:	4b6f      	ldr	r3, [pc, #444]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a6e      	ldr	r2, [pc, #440]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	4b6c      	ldr	r3, [pc, #432]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a6b      	ldr	r2, [pc, #428]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d013      	beq.n	8009198 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009170:	f7fd fa56 	bl	8006620 <HAL_GetTick>
 8009174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009176:	e008      	b.n	800918a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009178:	f7fd fa52 	bl	8006620 <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	2b64      	cmp	r3, #100	; 0x64
 8009184:	d901      	bls.n	800918a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e229      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800918a:	4b61      	ldr	r3, [pc, #388]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0f0      	beq.n	8009178 <HAL_RCC_OscConfig+0xe8>
 8009196:	e014      	b.n	80091c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009198:	f7fd fa42 	bl	8006620 <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091a0:	f7fd fa3e 	bl	8006620 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b64      	cmp	r3, #100	; 0x64
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e215      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091b2:	4b57      	ldr	r3, [pc, #348]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1f0      	bne.n	80091a0 <HAL_RCC_OscConfig+0x110>
 80091be:	e000      	b.n	80091c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d069      	beq.n	80092a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80091ce:	4b50      	ldr	r3, [pc, #320]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f003 030c 	and.w	r3, r3, #12
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00b      	beq.n	80091f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091da:	4b4d      	ldr	r3, [pc, #308]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f003 030c 	and.w	r3, r3, #12
 80091e2:	2b08      	cmp	r3, #8
 80091e4:	d11c      	bne.n	8009220 <HAL_RCC_OscConfig+0x190>
 80091e6:	4b4a      	ldr	r3, [pc, #296]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d116      	bne.n	8009220 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091f2:	4b47      	ldr	r3, [pc, #284]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <HAL_RCC_OscConfig+0x17a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d001      	beq.n	800920a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e1e9      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800920a:	4b41      	ldr	r3, [pc, #260]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	493d      	ldr	r1, [pc, #244]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 800921a:	4313      	orrs	r3, r2
 800921c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800921e:	e040      	b.n	80092a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d023      	beq.n	8009270 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009228:	4b39      	ldr	r3, [pc, #228]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a38      	ldr	r2, [pc, #224]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009234:	f7fd f9f4 	bl	8006620 <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800923c:	f7fd f9f0 	bl	8006620 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e1c7      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800924e:	4b30      	ldr	r3, [pc, #192]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f0      	beq.n	800923c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800925a:	4b2d      	ldr	r3, [pc, #180]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	4929      	ldr	r1, [pc, #164]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 800926a:	4313      	orrs	r3, r2
 800926c:	600b      	str	r3, [r1, #0]
 800926e:	e018      	b.n	80092a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009270:	4b27      	ldr	r3, [pc, #156]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a26      	ldr	r2, [pc, #152]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009276:	f023 0301 	bic.w	r3, r3, #1
 800927a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927c:	f7fd f9d0 	bl	8006620 <HAL_GetTick>
 8009280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009284:	f7fd f9cc 	bl	8006620 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e1a3      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009296:	4b1e      	ldr	r3, [pc, #120]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f0      	bne.n	8009284 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0308 	and.w	r3, r3, #8
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d038      	beq.n	8009320 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d019      	beq.n	80092ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092b6:	4b16      	ldr	r3, [pc, #88]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80092b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ba:	4a15      	ldr	r2, [pc, #84]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80092bc:	f043 0301 	orr.w	r3, r3, #1
 80092c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092c2:	f7fd f9ad 	bl	8006620 <HAL_GetTick>
 80092c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092c8:	e008      	b.n	80092dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092ca:	f7fd f9a9 	bl	8006620 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d901      	bls.n	80092dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e180      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092dc:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80092de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0f0      	beq.n	80092ca <HAL_RCC_OscConfig+0x23a>
 80092e8:	e01a      	b.n	8009320 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80092ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ee:	4a08      	ldr	r2, [pc, #32]	; (8009310 <HAL_RCC_OscConfig+0x280>)
 80092f0:	f023 0301 	bic.w	r3, r3, #1
 80092f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f6:	f7fd f993 	bl	8006620 <HAL_GetTick>
 80092fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092fc:	e00a      	b.n	8009314 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092fe:	f7fd f98f 	bl	8006620 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	d903      	bls.n	8009314 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e166      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
 8009310:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009314:	4b92      	ldr	r3, [pc, #584]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1ee      	bne.n	80092fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0304 	and.w	r3, r3, #4
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 80a4 	beq.w	8009476 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800932e:	4b8c      	ldr	r3, [pc, #560]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10d      	bne.n	8009356 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800933a:	4b89      	ldr	r3, [pc, #548]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 800933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933e:	4a88      	ldr	r2, [pc, #544]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009344:	6413      	str	r3, [r2, #64]	; 0x40
 8009346:	4b86      	ldr	r3, [pc, #536]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800934e:	60bb      	str	r3, [r7, #8]
 8009350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009352:	2301      	movs	r3, #1
 8009354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009356:	4b83      	ldr	r3, [pc, #524]	; (8009564 <HAL_RCC_OscConfig+0x4d4>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800935e:	2b00      	cmp	r3, #0
 8009360:	d118      	bne.n	8009394 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009362:	4b80      	ldr	r3, [pc, #512]	; (8009564 <HAL_RCC_OscConfig+0x4d4>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a7f      	ldr	r2, [pc, #508]	; (8009564 <HAL_RCC_OscConfig+0x4d4>)
 8009368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800936c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800936e:	f7fd f957 	bl	8006620 <HAL_GetTick>
 8009372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009374:	e008      	b.n	8009388 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009376:	f7fd f953 	bl	8006620 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b64      	cmp	r3, #100	; 0x64
 8009382:	d901      	bls.n	8009388 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e12a      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009388:	4b76      	ldr	r3, [pc, #472]	; (8009564 <HAL_RCC_OscConfig+0x4d4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0f0      	beq.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d106      	bne.n	80093aa <HAL_RCC_OscConfig+0x31a>
 800939c:	4b70      	ldr	r3, [pc, #448]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 800939e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a0:	4a6f      	ldr	r2, [pc, #444]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	6713      	str	r3, [r2, #112]	; 0x70
 80093a8:	e02d      	b.n	8009406 <HAL_RCC_OscConfig+0x376>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10c      	bne.n	80093cc <HAL_RCC_OscConfig+0x33c>
 80093b2:	4b6b      	ldr	r3, [pc, #428]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b6:	4a6a      	ldr	r2, [pc, #424]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093b8:	f023 0301 	bic.w	r3, r3, #1
 80093bc:	6713      	str	r3, [r2, #112]	; 0x70
 80093be:	4b68      	ldr	r3, [pc, #416]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c2:	4a67      	ldr	r2, [pc, #412]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093c4:	f023 0304 	bic.w	r3, r3, #4
 80093c8:	6713      	str	r3, [r2, #112]	; 0x70
 80093ca:	e01c      	b.n	8009406 <HAL_RCC_OscConfig+0x376>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d10c      	bne.n	80093ee <HAL_RCC_OscConfig+0x35e>
 80093d4:	4b62      	ldr	r3, [pc, #392]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d8:	4a61      	ldr	r2, [pc, #388]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093da:	f043 0304 	orr.w	r3, r3, #4
 80093de:	6713      	str	r3, [r2, #112]	; 0x70
 80093e0:	4b5f      	ldr	r3, [pc, #380]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e4:	4a5e      	ldr	r2, [pc, #376]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093e6:	f043 0301 	orr.w	r3, r3, #1
 80093ea:	6713      	str	r3, [r2, #112]	; 0x70
 80093ec:	e00b      	b.n	8009406 <HAL_RCC_OscConfig+0x376>
 80093ee:	4b5c      	ldr	r3, [pc, #368]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f2:	4a5b      	ldr	r2, [pc, #364]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093f4:	f023 0301 	bic.w	r3, r3, #1
 80093f8:	6713      	str	r3, [r2, #112]	; 0x70
 80093fa:	4b59      	ldr	r3, [pc, #356]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80093fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fe:	4a58      	ldr	r2, [pc, #352]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009400:	f023 0304 	bic.w	r3, r3, #4
 8009404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d015      	beq.n	800943a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800940e:	f7fd f907 	bl	8006620 <HAL_GetTick>
 8009412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009414:	e00a      	b.n	800942c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009416:	f7fd f903 	bl	8006620 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	f241 3288 	movw	r2, #5000	; 0x1388
 8009424:	4293      	cmp	r3, r2
 8009426:	d901      	bls.n	800942c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e0d8      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800942c:	4b4c      	ldr	r3, [pc, #304]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 800942e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d0ee      	beq.n	8009416 <HAL_RCC_OscConfig+0x386>
 8009438:	e014      	b.n	8009464 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800943a:	f7fd f8f1 	bl	8006620 <HAL_GetTick>
 800943e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009440:	e00a      	b.n	8009458 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009442:	f7fd f8ed 	bl	8006620 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009450:	4293      	cmp	r3, r2
 8009452:	d901      	bls.n	8009458 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e0c2      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009458:	4b41      	ldr	r3, [pc, #260]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 800945a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1ee      	bne.n	8009442 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d105      	bne.n	8009476 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800946a:	4b3d      	ldr	r3, [pc, #244]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	4a3c      	ldr	r2, [pc, #240]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 80ae 	beq.w	80095dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009480:	4b37      	ldr	r3, [pc, #220]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 030c 	and.w	r3, r3, #12
 8009488:	2b08      	cmp	r3, #8
 800948a:	d06d      	beq.n	8009568 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	2b02      	cmp	r3, #2
 8009492:	d14b      	bne.n	800952c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009494:	4b32      	ldr	r3, [pc, #200]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a31      	ldr	r2, [pc, #196]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 800949a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800949e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a0:	f7fd f8be 	bl	8006620 <HAL_GetTick>
 80094a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094a6:	e008      	b.n	80094ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094a8:	f7fd f8ba 	bl	8006620 <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d901      	bls.n	80094ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e091      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094ba:	4b29      	ldr	r3, [pc, #164]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1f0      	bne.n	80094a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69da      	ldr	r2, [r3, #28]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	019b      	lsls	r3, r3, #6
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094dc:	085b      	lsrs	r3, r3, #1
 80094de:	3b01      	subs	r3, #1
 80094e0:	041b      	lsls	r3, r3, #16
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	061b      	lsls	r3, r3, #24
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f0:	071b      	lsls	r3, r3, #28
 80094f2:	491b      	ldr	r1, [pc, #108]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094f8:	4b19      	ldr	r3, [pc, #100]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a18      	ldr	r2, [pc, #96]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 80094fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009504:	f7fd f88c 	bl	8006620 <HAL_GetTick>
 8009508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800950a:	e008      	b.n	800951e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800950c:	f7fd f888 	bl	8006620 <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	2b02      	cmp	r3, #2
 8009518:	d901      	bls.n	800951e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e05f      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800951e:	4b10      	ldr	r3, [pc, #64]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0f0      	beq.n	800950c <HAL_RCC_OscConfig+0x47c>
 800952a:	e057      	b.n	80095dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800952c:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a0b      	ldr	r2, [pc, #44]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009538:	f7fd f872 	bl	8006620 <HAL_GetTick>
 800953c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800953e:	e008      	b.n	8009552 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009540:	f7fd f86e 	bl	8006620 <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	2b02      	cmp	r3, #2
 800954c:	d901      	bls.n	8009552 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e045      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009552:	4b03      	ldr	r3, [pc, #12]	; (8009560 <HAL_RCC_OscConfig+0x4d0>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1f0      	bne.n	8009540 <HAL_RCC_OscConfig+0x4b0>
 800955e:	e03d      	b.n	80095dc <HAL_RCC_OscConfig+0x54c>
 8009560:	40023800 	.word	0x40023800
 8009564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009568:	4b1f      	ldr	r3, [pc, #124]	; (80095e8 <HAL_RCC_OscConfig+0x558>)
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d030      	beq.n	80095d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009580:	429a      	cmp	r2, r3
 8009582:	d129      	bne.n	80095d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800958e:	429a      	cmp	r2, r3
 8009590:	d122      	bne.n	80095d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009598:	4013      	ands	r3, r2
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800959e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d119      	bne.n	80095d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ae:	085b      	lsrs	r3, r3, #1
 80095b0:	3b01      	subs	r3, #1
 80095b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d10f      	bne.n	80095d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d107      	bne.n	80095d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d001      	beq.n	80095dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e000      	b.n	80095de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	40023800 	.word	0x40023800

080095ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e0d0      	b.n	80097a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009604:	4b6a      	ldr	r3, [pc, #424]	; (80097b0 <HAL_RCC_ClockConfig+0x1c4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 030f 	and.w	r3, r3, #15
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d910      	bls.n	8009634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009612:	4b67      	ldr	r3, [pc, #412]	; (80097b0 <HAL_RCC_ClockConfig+0x1c4>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f023 020f 	bic.w	r2, r3, #15
 800961a:	4965      	ldr	r1, [pc, #404]	; (80097b0 <HAL_RCC_ClockConfig+0x1c4>)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	4313      	orrs	r3, r2
 8009620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009622:	4b63      	ldr	r3, [pc, #396]	; (80097b0 <HAL_RCC_ClockConfig+0x1c4>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 030f 	and.w	r3, r3, #15
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d001      	beq.n	8009634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e0b8      	b.n	80097a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 0302 	and.w	r3, r3, #2
 800963c:	2b00      	cmp	r3, #0
 800963e:	d020      	beq.n	8009682 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	d005      	beq.n	8009658 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800964c:	4b59      	ldr	r3, [pc, #356]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	4a58      	ldr	r2, [pc, #352]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0308 	and.w	r3, r3, #8
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009664:	4b53      	ldr	r3, [pc, #332]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	4a52      	ldr	r2, [pc, #328]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 800966a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800966e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009670:	4b50      	ldr	r3, [pc, #320]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	494d      	ldr	r1, [pc, #308]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 800967e:	4313      	orrs	r3, r2
 8009680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d040      	beq.n	8009710 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d107      	bne.n	80096a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009696:	4b47      	ldr	r3, [pc, #284]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d115      	bne.n	80096ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e07f      	b.n	80097a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d107      	bne.n	80096be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096ae:	4b41      	ldr	r3, [pc, #260]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d109      	bne.n	80096ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e073      	b.n	80097a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096be:	4b3d      	ldr	r3, [pc, #244]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e06b      	b.n	80097a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096ce:	4b39      	ldr	r3, [pc, #228]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f023 0203 	bic.w	r2, r3, #3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	4936      	ldr	r1, [pc, #216]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e0:	f7fc ff9e 	bl	8006620 <HAL_GetTick>
 80096e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096e6:	e00a      	b.n	80096fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096e8:	f7fc ff9a 	bl	8006620 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e053      	b.n	80097a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096fe:	4b2d      	ldr	r3, [pc, #180]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 020c 	and.w	r2, r3, #12
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	429a      	cmp	r2, r3
 800970e:	d1eb      	bne.n	80096e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009710:	4b27      	ldr	r3, [pc, #156]	; (80097b0 <HAL_RCC_ClockConfig+0x1c4>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 030f 	and.w	r3, r3, #15
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	429a      	cmp	r2, r3
 800971c:	d210      	bcs.n	8009740 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800971e:	4b24      	ldr	r3, [pc, #144]	; (80097b0 <HAL_RCC_ClockConfig+0x1c4>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f023 020f 	bic.w	r2, r3, #15
 8009726:	4922      	ldr	r1, [pc, #136]	; (80097b0 <HAL_RCC_ClockConfig+0x1c4>)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	4313      	orrs	r3, r2
 800972c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800972e:	4b20      	ldr	r3, [pc, #128]	; (80097b0 <HAL_RCC_ClockConfig+0x1c4>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 030f 	and.w	r3, r3, #15
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	429a      	cmp	r2, r3
 800973a:	d001      	beq.n	8009740 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e032      	b.n	80097a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b00      	cmp	r3, #0
 800974a:	d008      	beq.n	800975e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800974c:	4b19      	ldr	r3, [pc, #100]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	4916      	ldr	r1, [pc, #88]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 800975a:	4313      	orrs	r3, r2
 800975c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0308 	and.w	r3, r3, #8
 8009766:	2b00      	cmp	r3, #0
 8009768:	d009      	beq.n	800977e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800976a:	4b12      	ldr	r3, [pc, #72]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	490e      	ldr	r1, [pc, #56]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 800977a:	4313      	orrs	r3, r2
 800977c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800977e:	f000 f821 	bl	80097c4 <HAL_RCC_GetSysClockFreq>
 8009782:	4602      	mov	r2, r0
 8009784:	4b0b      	ldr	r3, [pc, #44]	; (80097b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	091b      	lsrs	r3, r3, #4
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	490a      	ldr	r1, [pc, #40]	; (80097b8 <HAL_RCC_ClockConfig+0x1cc>)
 8009790:	5ccb      	ldrb	r3, [r1, r3]
 8009792:	fa22 f303 	lsr.w	r3, r2, r3
 8009796:	4a09      	ldr	r2, [pc, #36]	; (80097bc <HAL_RCC_ClockConfig+0x1d0>)
 8009798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800979a:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <HAL_RCC_ClockConfig+0x1d4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f8 fab0 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	40023c00 	.word	0x40023c00
 80097b4:	40023800 	.word	0x40023800
 80097b8:	080200f0 	.word	0x080200f0
 80097bc:	2000000c 	.word	0x2000000c
 80097c0:	20000010 	.word	0x20000010

080097c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097c4:	b5b0      	push	{r4, r5, r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80097ca:	2100      	movs	r1, #0
 80097cc:	6079      	str	r1, [r7, #4]
 80097ce:	2100      	movs	r1, #0
 80097d0:	60f9      	str	r1, [r7, #12]
 80097d2:	2100      	movs	r1, #0
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80097d6:	2100      	movs	r1, #0
 80097d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097da:	4952      	ldr	r1, [pc, #328]	; (8009924 <HAL_RCC_GetSysClockFreq+0x160>)
 80097dc:	6889      	ldr	r1, [r1, #8]
 80097de:	f001 010c 	and.w	r1, r1, #12
 80097e2:	2908      	cmp	r1, #8
 80097e4:	d00d      	beq.n	8009802 <HAL_RCC_GetSysClockFreq+0x3e>
 80097e6:	2908      	cmp	r1, #8
 80097e8:	f200 8094 	bhi.w	8009914 <HAL_RCC_GetSysClockFreq+0x150>
 80097ec:	2900      	cmp	r1, #0
 80097ee:	d002      	beq.n	80097f6 <HAL_RCC_GetSysClockFreq+0x32>
 80097f0:	2904      	cmp	r1, #4
 80097f2:	d003      	beq.n	80097fc <HAL_RCC_GetSysClockFreq+0x38>
 80097f4:	e08e      	b.n	8009914 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097f6:	4b4c      	ldr	r3, [pc, #304]	; (8009928 <HAL_RCC_GetSysClockFreq+0x164>)
 80097f8:	60bb      	str	r3, [r7, #8]
      break;
 80097fa:	e08e      	b.n	800991a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097fc:	4b4b      	ldr	r3, [pc, #300]	; (800992c <HAL_RCC_GetSysClockFreq+0x168>)
 80097fe:	60bb      	str	r3, [r7, #8]
      break;
 8009800:	e08b      	b.n	800991a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009802:	4948      	ldr	r1, [pc, #288]	; (8009924 <HAL_RCC_GetSysClockFreq+0x160>)
 8009804:	6849      	ldr	r1, [r1, #4]
 8009806:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800980a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800980c:	4945      	ldr	r1, [pc, #276]	; (8009924 <HAL_RCC_GetSysClockFreq+0x160>)
 800980e:	6849      	ldr	r1, [r1, #4]
 8009810:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009814:	2900      	cmp	r1, #0
 8009816:	d024      	beq.n	8009862 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009818:	4942      	ldr	r1, [pc, #264]	; (8009924 <HAL_RCC_GetSysClockFreq+0x160>)
 800981a:	6849      	ldr	r1, [r1, #4]
 800981c:	0989      	lsrs	r1, r1, #6
 800981e:	4608      	mov	r0, r1
 8009820:	f04f 0100 	mov.w	r1, #0
 8009824:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009828:	f04f 0500 	mov.w	r5, #0
 800982c:	ea00 0204 	and.w	r2, r0, r4
 8009830:	ea01 0305 	and.w	r3, r1, r5
 8009834:	493d      	ldr	r1, [pc, #244]	; (800992c <HAL_RCC_GetSysClockFreq+0x168>)
 8009836:	fb01 f003 	mul.w	r0, r1, r3
 800983a:	2100      	movs	r1, #0
 800983c:	fb01 f102 	mul.w	r1, r1, r2
 8009840:	1844      	adds	r4, r0, r1
 8009842:	493a      	ldr	r1, [pc, #232]	; (800992c <HAL_RCC_GetSysClockFreq+0x168>)
 8009844:	fba2 0101 	umull	r0, r1, r2, r1
 8009848:	1863      	adds	r3, r4, r1
 800984a:	4619      	mov	r1, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	461a      	mov	r2, r3
 8009850:	f04f 0300 	mov.w	r3, #0
 8009854:	f7f6 fd44 	bl	80002e0 <__aeabi_uldivmod>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4613      	mov	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	e04a      	b.n	80098f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009862:	4b30      	ldr	r3, [pc, #192]	; (8009924 <HAL_RCC_GetSysClockFreq+0x160>)
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	099b      	lsrs	r3, r3, #6
 8009868:	461a      	mov	r2, r3
 800986a:	f04f 0300 	mov.w	r3, #0
 800986e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009872:	f04f 0100 	mov.w	r1, #0
 8009876:	ea02 0400 	and.w	r4, r2, r0
 800987a:	ea03 0501 	and.w	r5, r3, r1
 800987e:	4620      	mov	r0, r4
 8009880:	4629      	mov	r1, r5
 8009882:	f04f 0200 	mov.w	r2, #0
 8009886:	f04f 0300 	mov.w	r3, #0
 800988a:	014b      	lsls	r3, r1, #5
 800988c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009890:	0142      	lsls	r2, r0, #5
 8009892:	4610      	mov	r0, r2
 8009894:	4619      	mov	r1, r3
 8009896:	1b00      	subs	r0, r0, r4
 8009898:	eb61 0105 	sbc.w	r1, r1, r5
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	018b      	lsls	r3, r1, #6
 80098a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80098aa:	0182      	lsls	r2, r0, #6
 80098ac:	1a12      	subs	r2, r2, r0
 80098ae:	eb63 0301 	sbc.w	r3, r3, r1
 80098b2:	f04f 0000 	mov.w	r0, #0
 80098b6:	f04f 0100 	mov.w	r1, #0
 80098ba:	00d9      	lsls	r1, r3, #3
 80098bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098c0:	00d0      	lsls	r0, r2, #3
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	1912      	adds	r2, r2, r4
 80098c8:	eb45 0303 	adc.w	r3, r5, r3
 80098cc:	f04f 0000 	mov.w	r0, #0
 80098d0:	f04f 0100 	mov.w	r1, #0
 80098d4:	0299      	lsls	r1, r3, #10
 80098d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80098da:	0290      	lsls	r0, r2, #10
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4610      	mov	r0, r2
 80098e2:	4619      	mov	r1, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	461a      	mov	r2, r3
 80098e8:	f04f 0300 	mov.w	r3, #0
 80098ec:	f7f6 fcf8 	bl	80002e0 <__aeabi_uldivmod>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4613      	mov	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80098f8:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <HAL_RCC_GetSysClockFreq+0x160>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	0c1b      	lsrs	r3, r3, #16
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	3301      	adds	r3, #1
 8009904:	005b      	lsls	r3, r3, #1
 8009906:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009910:	60bb      	str	r3, [r7, #8]
      break;
 8009912:	e002      	b.n	800991a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009914:	4b04      	ldr	r3, [pc, #16]	; (8009928 <HAL_RCC_GetSysClockFreq+0x164>)
 8009916:	60bb      	str	r3, [r7, #8]
      break;
 8009918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800991a:	68bb      	ldr	r3, [r7, #8]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bdb0      	pop	{r4, r5, r7, pc}
 8009924:	40023800 	.word	0x40023800
 8009928:	00f42400 	.word	0x00f42400
 800992c:	017d7840 	.word	0x017d7840

08009930 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009934:	4b03      	ldr	r3, [pc, #12]	; (8009944 <HAL_RCC_GetHCLKFreq+0x14>)
 8009936:	681b      	ldr	r3, [r3, #0]
}
 8009938:	4618      	mov	r0, r3
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	2000000c 	.word	0x2000000c

08009948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800994c:	f7ff fff0 	bl	8009930 <HAL_RCC_GetHCLKFreq>
 8009950:	4602      	mov	r2, r0
 8009952:	4b05      	ldr	r3, [pc, #20]	; (8009968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	0a9b      	lsrs	r3, r3, #10
 8009958:	f003 0307 	and.w	r3, r3, #7
 800995c:	4903      	ldr	r1, [pc, #12]	; (800996c <HAL_RCC_GetPCLK1Freq+0x24>)
 800995e:	5ccb      	ldrb	r3, [r1, r3]
 8009960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009964:	4618      	mov	r0, r3
 8009966:	bd80      	pop	{r7, pc}
 8009968:	40023800 	.word	0x40023800
 800996c:	08020100 	.word	0x08020100

08009970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009974:	f7ff ffdc 	bl	8009930 <HAL_RCC_GetHCLKFreq>
 8009978:	4602      	mov	r2, r0
 800997a:	4b05      	ldr	r3, [pc, #20]	; (8009990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	0b5b      	lsrs	r3, r3, #13
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	4903      	ldr	r1, [pc, #12]	; (8009994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009986:	5ccb      	ldrb	r3, [r1, r3]
 8009988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800998c:	4618      	mov	r0, r3
 800998e:	bd80      	pop	{r7, pc}
 8009990:	40023800 	.word	0x40023800
 8009994:	08020100 	.word	0x08020100

08009998 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	220f      	movs	r2, #15
 80099a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80099a8:	4b12      	ldr	r3, [pc, #72]	; (80099f4 <HAL_RCC_GetClockConfig+0x5c>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 0203 	and.w	r2, r3, #3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80099b4:	4b0f      	ldr	r3, [pc, #60]	; (80099f4 <HAL_RCC_GetClockConfig+0x5c>)
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80099c0:	4b0c      	ldr	r3, [pc, #48]	; (80099f4 <HAL_RCC_GetClockConfig+0x5c>)
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80099cc:	4b09      	ldr	r3, [pc, #36]	; (80099f4 <HAL_RCC_GetClockConfig+0x5c>)
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	08db      	lsrs	r3, r3, #3
 80099d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80099da:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <HAL_RCC_GetClockConfig+0x60>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 020f 	and.w	r2, r3, #15
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	601a      	str	r2, [r3, #0]
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	40023800 	.word	0x40023800
 80099f8:	40023c00 	.word	0x40023c00

080099fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d012      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009a24:	4b69      	ldr	r3, [pc, #420]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	4a68      	ldr	r2, [pc, #416]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009a2e:	6093      	str	r3, [r2, #8]
 8009a30:	4b66      	ldr	r3, [pc, #408]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a32:	689a      	ldr	r2, [r3, #8]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a38:	4964      	ldr	r1, [pc, #400]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009a46:	2301      	movs	r3, #1
 8009a48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d017      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a56:	4b5d      	ldr	r3, [pc, #372]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a64:	4959      	ldr	r1, [pc, #356]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a74:	d101      	bne.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009a76:	2301      	movs	r3, #1
 8009a78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009a82:	2301      	movs	r3, #1
 8009a84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d017      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009a92:	4b4e      	ldr	r3, [pc, #312]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	494a      	ldr	r1, [pc, #296]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ab0:	d101      	bne.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 0320 	and.w	r3, r3, #32
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 808b 	beq.w	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009ae0:	4b3a      	ldr	r3, [pc, #232]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae4:	4a39      	ldr	r2, [pc, #228]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aea:	6413      	str	r3, [r2, #64]	; 0x40
 8009aec:	4b37      	ldr	r3, [pc, #220]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009af4:	60bb      	str	r3, [r7, #8]
 8009af6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009af8:	4b35      	ldr	r3, [pc, #212]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a34      	ldr	r2, [pc, #208]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b04:	f7fc fd8c 	bl	8006620 <HAL_GetTick>
 8009b08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009b0a:	e008      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b0c:	f7fc fd88 	bl	8006620 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b64      	cmp	r3, #100	; 0x64
 8009b18:	d901      	bls.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e38f      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009b1e:	4b2c      	ldr	r3, [pc, #176]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0f0      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009b2a:	4b28      	ldr	r3, [pc, #160]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d035      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d02e      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b48:	4b20      	ldr	r3, [pc, #128]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b52:	4b1e      	ldr	r3, [pc, #120]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b56:	4a1d      	ldr	r2, [pc, #116]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b5e:	4b1b      	ldr	r3, [pc, #108]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	4a1a      	ldr	r2, [pc, #104]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009b6a:	4a18      	ldr	r2, [pc, #96]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009b70:	4b16      	ldr	r3, [pc, #88]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d114      	bne.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b7c:	f7fc fd50 	bl	8006620 <HAL_GetTick>
 8009b80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b82:	e00a      	b.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b84:	f7fc fd4c 	bl	8006620 <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d901      	bls.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e351      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b9a:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0ee      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bb2:	d111      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009bb4:	4b05      	ldr	r3, [pc, #20]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009bc0:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009bc2:	400b      	ands	r3, r1
 8009bc4:	4901      	ldr	r1, [pc, #4]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	608b      	str	r3, [r1, #8]
 8009bca:	e00b      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009bcc:	40023800 	.word	0x40023800
 8009bd0:	40007000 	.word	0x40007000
 8009bd4:	0ffffcff 	.word	0x0ffffcff
 8009bd8:	4bb3      	ldr	r3, [pc, #716]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	4ab2      	ldr	r2, [pc, #712]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009bde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009be2:	6093      	str	r3, [r2, #8]
 8009be4:	4bb0      	ldr	r3, [pc, #704]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009be6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bf0:	49ad      	ldr	r1, [pc, #692]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0310 	and.w	r3, r3, #16
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d010      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c02:	4ba9      	ldr	r3, [pc, #676]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c08:	4aa7      	ldr	r2, [pc, #668]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009c12:	4ba5      	ldr	r3, [pc, #660]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1c:	49a2      	ldr	r1, [pc, #648]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00a      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c30:	4b9d      	ldr	r3, [pc, #628]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c3e:	499a      	ldr	r1, [pc, #616]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c52:	4b95      	ldr	r3, [pc, #596]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c60:	4991      	ldr	r1, [pc, #580]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00a      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c74:	4b8c      	ldr	r3, [pc, #560]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c82:	4989      	ldr	r1, [pc, #548]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00a      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c96:	4b84      	ldr	r3, [pc, #528]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca4:	4980      	ldr	r1, [pc, #512]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00a      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cb8:	4b7b      	ldr	r3, [pc, #492]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cbe:	f023 0203 	bic.w	r2, r3, #3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc6:	4978      	ldr	r1, [pc, #480]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009cda:	4b73      	ldr	r3, [pc, #460]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce0:	f023 020c 	bic.w	r2, r3, #12
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ce8:	496f      	ldr	r1, [pc, #444]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00a      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009cfc:	4b6a      	ldr	r3, [pc, #424]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d0a:	4967      	ldr	r1, [pc, #412]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00a      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d1e:	4b62      	ldr	r3, [pc, #392]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d2c:	495e      	ldr	r1, [pc, #376]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d40:	4b59      	ldr	r3, [pc, #356]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4e:	4956      	ldr	r1, [pc, #344]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d50:	4313      	orrs	r3, r2
 8009d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00a      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009d62:	4b51      	ldr	r3, [pc, #324]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d70:	494d      	ldr	r1, [pc, #308]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00a      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009d84:	4b48      	ldr	r3, [pc, #288]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d92:	4945      	ldr	r1, [pc, #276]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009da6:	4b40      	ldr	r3, [pc, #256]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009db4:	493c      	ldr	r1, [pc, #240]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00a      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009dc8:	4b37      	ldr	r3, [pc, #220]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dd6:	4934      	ldr	r1, [pc, #208]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d011      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009dea:	4b2f      	ldr	r3, [pc, #188]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009df8:	492b      	ldr	r1, [pc, #172]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e08:	d101      	bne.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 0308 	and.w	r3, r3, #8
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e2a:	4b1f      	ldr	r3, [pc, #124]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e38:	491b      	ldr	r1, [pc, #108]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00b      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009e4c:	4b16      	ldr	r3, [pc, #88]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e5c:	4912      	ldr	r1, [pc, #72]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009e70:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e80:	4909      	ldr	r1, [pc, #36]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00f      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e94:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea4:	e002      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009ea6:	bf00      	nop
 8009ea8:	40023800 	.word	0x40023800
 8009eac:	4986      	ldr	r1, [pc, #536]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009ec0:	4b81      	ldr	r3, [pc, #516]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ec6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ed0:	497d      	ldr	r1, [pc, #500]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d006      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f000 80d6 	beq.w	800a098 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009eec:	4b76      	ldr	r3, [pc, #472]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a75      	ldr	r2, [pc, #468]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ef8:	f7fc fb92 	bl	8006620 <HAL_GetTick>
 8009efc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009efe:	e008      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009f00:	f7fc fb8e 	bl	8006620 <HAL_GetTick>
 8009f04:	4602      	mov	r2, r0
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	2b64      	cmp	r3, #100	; 0x64
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e195      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009f12:	4b6d      	ldr	r3, [pc, #436]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1f0      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d021      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d11d      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009f32:	4b65      	ldr	r3, [pc, #404]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f38:	0c1b      	lsrs	r3, r3, #16
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009f40:	4b61      	ldr	r3, [pc, #388]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f46:	0e1b      	lsrs	r3, r3, #24
 8009f48:	f003 030f 	and.w	r3, r3, #15
 8009f4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	019a      	lsls	r2, r3, #6
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	041b      	lsls	r3, r3, #16
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	061b      	lsls	r3, r3, #24
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	071b      	lsls	r3, r3, #28
 8009f66:	4958      	ldr	r1, [pc, #352]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f82:	d00a      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d02e      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f98:	d129      	bne.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009f9a:	4b4b      	ldr	r3, [pc, #300]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fa0:	0c1b      	lsrs	r3, r3, #16
 8009fa2:	f003 0303 	and.w	r3, r3, #3
 8009fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009fa8:	4b47      	ldr	r3, [pc, #284]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fae:	0f1b      	lsrs	r3, r3, #28
 8009fb0:	f003 0307 	and.w	r3, r3, #7
 8009fb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	019a      	lsls	r2, r3, #6
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	041b      	lsls	r3, r3, #16
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	061b      	lsls	r3, r3, #24
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	071b      	lsls	r3, r3, #28
 8009fce:	493e      	ldr	r1, [pc, #248]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009fd6:	4b3c      	ldr	r3, [pc, #240]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fdc:	f023 021f 	bic.w	r2, r3, #31
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	4938      	ldr	r1, [pc, #224]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d01d      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009ffa:	4b33      	ldr	r3, [pc, #204]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a000:	0e1b      	lsrs	r3, r3, #24
 800a002:	f003 030f 	and.w	r3, r3, #15
 800a006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a008:	4b2f      	ldr	r3, [pc, #188]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a00e:	0f1b      	lsrs	r3, r3, #28
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	019a      	lsls	r2, r3, #6
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	041b      	lsls	r3, r3, #16
 800a022:	431a      	orrs	r2, r3
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	061b      	lsls	r3, r3, #24
 800a028:	431a      	orrs	r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	071b      	lsls	r3, r3, #28
 800a02e:	4926      	ldr	r1, [pc, #152]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a030:	4313      	orrs	r3, r2
 800a032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d011      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	019a      	lsls	r2, r3, #6
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	041b      	lsls	r3, r3, #16
 800a04e:	431a      	orrs	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	061b      	lsls	r3, r3, #24
 800a056:	431a      	orrs	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	071b      	lsls	r3, r3, #28
 800a05e:	491a      	ldr	r1, [pc, #104]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a060:	4313      	orrs	r3, r2
 800a062:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a066:	4b18      	ldr	r3, [pc, #96]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a17      	ldr	r2, [pc, #92]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a06c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a072:	f7fc fad5 	bl	8006620 <HAL_GetTick>
 800a076:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a078:	e008      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a07a:	f7fc fad1 	bl	8006620 <HAL_GetTick>
 800a07e:	4602      	mov	r2, r0
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	2b64      	cmp	r3, #100	; 0x64
 800a086:	d901      	bls.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a088:	2303      	movs	r3, #3
 800a08a:	e0d8      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a08c:	4b0e      	ldr	r3, [pc, #56]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d0f0      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	f040 80ce 	bne.w	800a23c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a0a0:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a08      	ldr	r2, [pc, #32]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a0a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ac:	f7fc fab8 	bl	8006620 <HAL_GetTick>
 800a0b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a0b2:	e00b      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a0b4:	f7fc fab4 	bl	8006620 <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b64      	cmp	r3, #100	; 0x64
 800a0c0:	d904      	bls.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e0bb      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800a0c6:	bf00      	nop
 800a0c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a0cc:	4b5e      	ldr	r3, [pc, #376]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0d8:	d0ec      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d009      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d02e      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d12a      	bne.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a102:	4b51      	ldr	r3, [pc, #324]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a108:	0c1b      	lsrs	r3, r3, #16
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a110:	4b4d      	ldr	r3, [pc, #308]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a116:	0f1b      	lsrs	r3, r3, #28
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	019a      	lsls	r2, r3, #6
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	041b      	lsls	r3, r3, #16
 800a128:	431a      	orrs	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	061b      	lsls	r3, r3, #24
 800a130:	431a      	orrs	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	071b      	lsls	r3, r3, #28
 800a136:	4944      	ldr	r1, [pc, #272]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a138:	4313      	orrs	r3, r2
 800a13a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a13e:	4b42      	ldr	r3, [pc, #264]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a144:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14c:	3b01      	subs	r3, #1
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	493d      	ldr	r1, [pc, #244]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a152:	4313      	orrs	r3, r2
 800a154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d022      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a16c:	d11d      	bne.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a16e:	4b36      	ldr	r3, [pc, #216]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a174:	0e1b      	lsrs	r3, r3, #24
 800a176:	f003 030f 	and.w	r3, r3, #15
 800a17a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a17c:	4b32      	ldr	r3, [pc, #200]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a182:	0f1b      	lsrs	r3, r3, #28
 800a184:	f003 0307 	and.w	r3, r3, #7
 800a188:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	019a      	lsls	r2, r3, #6
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	041b      	lsls	r3, r3, #16
 800a196:	431a      	orrs	r2, r3
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	061b      	lsls	r3, r3, #24
 800a19c:	431a      	orrs	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	071b      	lsls	r3, r3, #28
 800a1a2:	4929      	ldr	r1, [pc, #164]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 0308 	and.w	r3, r3, #8
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d028      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a1b6:	4b24      	ldr	r3, [pc, #144]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1bc:	0e1b      	lsrs	r3, r3, #24
 800a1be:	f003 030f 	and.w	r3, r3, #15
 800a1c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a1c4:	4b20      	ldr	r3, [pc, #128]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ca:	0c1b      	lsrs	r3, r3, #16
 800a1cc:	f003 0303 	and.w	r3, r3, #3
 800a1d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	019a      	lsls	r2, r3, #6
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	061b      	lsls	r3, r3, #24
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	69db      	ldr	r3, [r3, #28]
 800a1e8:	071b      	lsls	r3, r3, #28
 800a1ea:	4917      	ldr	r1, [pc, #92]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a1f2:	4b15      	ldr	r3, [pc, #84]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	4911      	ldr	r1, [pc, #68]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a202:	4313      	orrs	r3, r2
 800a204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a208:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a0e      	ldr	r2, [pc, #56]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a20e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a214:	f7fc fa04 	bl	8006620 <HAL_GetTick>
 800a218:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a21a:	e008      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a21c:	f7fc fa00 	bl	8006620 <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	2b64      	cmp	r3, #100	; 0x64
 800a228:	d901      	bls.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e007      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a22e:	4b06      	ldr	r3, [pc, #24]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a23a:	d1ef      	bne.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3720      	adds	r7, #32
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	40023800 	.word	0x40023800

0800a24c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e025      	b.n	800a2ac <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a266:	b2db      	uxtb	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d106      	bne.n	800a27a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7f6 ff9b 	bl	80011b0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2202      	movs	r2, #2
 800a27e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3304      	adds	r3, #4
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	f001 fba5 	bl	800b9dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6818      	ldr	r0, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	461a      	mov	r2, r3
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	f001 fc0f 	bl	800bac0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d101      	bne.n	800a2d0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e018      	b.n	800a302 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	68b9      	ldr	r1, [r7, #8]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f001 fc6d 	bl	800bbc0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d104      	bne.n	800a2f8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a2f6:	e003      	b.n	800a300 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b082      	sub	sp, #8
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d101      	bne.n	800a324 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a320:	2302      	movs	r3, #2
 800a322:	e00e      	b.n	800a342 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	4618      	mov	r0, r3
 800a334:	f001 fc68 	bl	800bc08 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e049      	b.n	800a3f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d106      	bne.n	800a376 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f841 	bl	800a3f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2202      	movs	r2, #2
 800a37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3304      	adds	r3, #4
 800a386:	4619      	mov	r1, r3
 800a388:	4610      	mov	r0, r2
 800a38a:	f000 fb65 	bl	800aa58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d001      	beq.n	800a424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e054      	b.n	800a4ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68da      	ldr	r2, [r3, #12]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0201 	orr.w	r2, r2, #1
 800a43a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a26      	ldr	r2, [pc, #152]	; (800a4dc <HAL_TIM_Base_Start_IT+0xd0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d022      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44e:	d01d      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a22      	ldr	r2, [pc, #136]	; (800a4e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d018      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a21      	ldr	r2, [pc, #132]	; (800a4e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d013      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a1f      	ldr	r2, [pc, #124]	; (800a4e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d00e      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a1e      	ldr	r2, [pc, #120]	; (800a4ec <HAL_TIM_Base_Start_IT+0xe0>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d009      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a1c      	ldr	r2, [pc, #112]	; (800a4f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d004      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a1b      	ldr	r2, [pc, #108]	; (800a4f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d115      	bne.n	800a4b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689a      	ldr	r2, [r3, #8]
 800a492:	4b19      	ldr	r3, [pc, #100]	; (800a4f8 <HAL_TIM_Base_Start_IT+0xec>)
 800a494:	4013      	ands	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b06      	cmp	r3, #6
 800a49c:	d015      	beq.n	800a4ca <HAL_TIM_Base_Start_IT+0xbe>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a4:	d011      	beq.n	800a4ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f042 0201 	orr.w	r2, r2, #1
 800a4b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b6:	e008      	b.n	800a4ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0201 	orr.w	r2, r2, #1
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	e000      	b.n	800a4cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	40010000 	.word	0x40010000
 800a4e0:	40000400 	.word	0x40000400
 800a4e4:	40000800 	.word	0x40000800
 800a4e8:	40000c00 	.word	0x40000c00
 800a4ec:	40010400 	.word	0x40010400
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	40001800 	.word	0x40001800
 800a4f8:	00010007 	.word	0x00010007

0800a4fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e049      	b.n	800a5a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7f7 fdae 	bl	8002084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3304      	adds	r3, #4
 800a538:	4619      	mov	r1, r3
 800a53a:	4610      	mov	r0, r2
 800a53c:	f000 fa8c 	bl	800aa58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f003 0302 	and.w	r3, r3, #2
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d122      	bne.n	800a606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d11b      	bne.n	800a606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f06f 0202 	mvn.w	r2, #2
 800a5d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d003      	beq.n	800a5f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fa15 	bl	800aa1c <HAL_TIM_IC_CaptureCallback>
 800a5f2:	e005      	b.n	800a600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fa07 	bl	800aa08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fa18 	bl	800aa30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b04      	cmp	r3, #4
 800a612:	d122      	bne.n	800a65a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d11b      	bne.n	800a65a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f06f 0204 	mvn.w	r2, #4
 800a62a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f9eb 	bl	800aa1c <HAL_TIM_IC_CaptureCallback>
 800a646:	e005      	b.n	800a654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f9dd 	bl	800aa08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f9ee 	bl	800aa30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	f003 0308 	and.w	r3, r3, #8
 800a664:	2b08      	cmp	r3, #8
 800a666:	d122      	bne.n	800a6ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f003 0308 	and.w	r3, r3, #8
 800a672:	2b08      	cmp	r3, #8
 800a674:	d11b      	bne.n	800a6ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f06f 0208 	mvn.w	r2, #8
 800a67e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2204      	movs	r2, #4
 800a684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f9c1 	bl	800aa1c <HAL_TIM_IC_CaptureCallback>
 800a69a:	e005      	b.n	800a6a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f9b3 	bl	800aa08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f9c4 	bl	800aa30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	f003 0310 	and.w	r3, r3, #16
 800a6b8:	2b10      	cmp	r3, #16
 800a6ba:	d122      	bne.n	800a702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f003 0310 	and.w	r3, r3, #16
 800a6c6:	2b10      	cmp	r3, #16
 800a6c8:	d11b      	bne.n	800a702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f06f 0210 	mvn.w	r2, #16
 800a6d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2208      	movs	r2, #8
 800a6d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f997 	bl	800aa1c <HAL_TIM_IC_CaptureCallback>
 800a6ee:	e005      	b.n	800a6fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f989 	bl	800aa08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f99a 	bl	800aa30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d10e      	bne.n	800a72e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d107      	bne.n	800a72e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f06f 0201 	mvn.w	r2, #1
 800a726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7f7 f9d9 	bl	8001ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a738:	2b80      	cmp	r3, #128	; 0x80
 800a73a:	d10e      	bne.n	800a75a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a746:	2b80      	cmp	r3, #128	; 0x80
 800a748:	d107      	bne.n	800a75a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fd15 	bl	800b184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a768:	d10e      	bne.n	800a788 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a774:	2b80      	cmp	r3, #128	; 0x80
 800a776:	d107      	bne.n	800a788 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fd08 	bl	800b198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a792:	2b40      	cmp	r3, #64	; 0x40
 800a794:	d10e      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a0:	2b40      	cmp	r3, #64	; 0x40
 800a7a2:	d107      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f948 	bl	800aa44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	2b20      	cmp	r3, #32
 800a7c0:	d10e      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f003 0320 	and.w	r3, r3, #32
 800a7cc:	2b20      	cmp	r3, #32
 800a7ce:	d107      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f06f 0220 	mvn.w	r2, #32
 800a7d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fcc8 	bl	800b170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d101      	bne.n	800a802 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a7fe:	2302      	movs	r3, #2
 800a800:	e0fd      	b.n	800a9fe <HAL_TIM_PWM_ConfigChannel+0x216>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b14      	cmp	r3, #20
 800a80e:	f200 80f0 	bhi.w	800a9f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a812:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a818:	0800a86d 	.word	0x0800a86d
 800a81c:	0800a9f3 	.word	0x0800a9f3
 800a820:	0800a9f3 	.word	0x0800a9f3
 800a824:	0800a9f3 	.word	0x0800a9f3
 800a828:	0800a8ad 	.word	0x0800a8ad
 800a82c:	0800a9f3 	.word	0x0800a9f3
 800a830:	0800a9f3 	.word	0x0800a9f3
 800a834:	0800a9f3 	.word	0x0800a9f3
 800a838:	0800a8ef 	.word	0x0800a8ef
 800a83c:	0800a9f3 	.word	0x0800a9f3
 800a840:	0800a9f3 	.word	0x0800a9f3
 800a844:	0800a9f3 	.word	0x0800a9f3
 800a848:	0800a92f 	.word	0x0800a92f
 800a84c:	0800a9f3 	.word	0x0800a9f3
 800a850:	0800a9f3 	.word	0x0800a9f3
 800a854:	0800a9f3 	.word	0x0800a9f3
 800a858:	0800a971 	.word	0x0800a971
 800a85c:	0800a9f3 	.word	0x0800a9f3
 800a860:	0800a9f3 	.word	0x0800a9f3
 800a864:	0800a9f3 	.word	0x0800a9f3
 800a868:	0800a9b1 	.word	0x0800a9b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	4618      	mov	r0, r3
 800a874:	f000 f990 	bl	800ab98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	699a      	ldr	r2, [r3, #24]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f042 0208 	orr.w	r2, r2, #8
 800a886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	699a      	ldr	r2, [r3, #24]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 0204 	bic.w	r2, r2, #4
 800a896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6999      	ldr	r1, [r3, #24]
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	691a      	ldr	r2, [r3, #16]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	619a      	str	r2, [r3, #24]
      break;
 800a8aa:	e0a3      	b.n	800a9f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68b9      	ldr	r1, [r7, #8]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 f9e2 	bl	800ac7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	699a      	ldr	r2, [r3, #24]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	699a      	ldr	r2, [r3, #24]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6999      	ldr	r1, [r3, #24]
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	021a      	lsls	r2, r3, #8
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	619a      	str	r2, [r3, #24]
      break;
 800a8ec:	e082      	b.n	800a9f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68b9      	ldr	r1, [r7, #8]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 fa39 	bl	800ad6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	69da      	ldr	r2, [r3, #28]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f042 0208 	orr.w	r2, r2, #8
 800a908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	69da      	ldr	r2, [r3, #28]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0204 	bic.w	r2, r2, #4
 800a918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	69d9      	ldr	r1, [r3, #28]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	691a      	ldr	r2, [r3, #16]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	430a      	orrs	r2, r1
 800a92a:	61da      	str	r2, [r3, #28]
      break;
 800a92c:	e062      	b.n	800a9f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68b9      	ldr	r1, [r7, #8]
 800a934:	4618      	mov	r0, r3
 800a936:	f000 fa8f 	bl	800ae58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	69da      	ldr	r2, [r3, #28]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	69da      	ldr	r2, [r3, #28]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	69d9      	ldr	r1, [r3, #28]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	021a      	lsls	r2, r3, #8
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	61da      	str	r2, [r3, #28]
      break;
 800a96e:	e041      	b.n	800a9f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68b9      	ldr	r1, [r7, #8]
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fac6 	bl	800af08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f042 0208 	orr.w	r2, r2, #8
 800a98a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f022 0204 	bic.w	r2, r2, #4
 800a99a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	691a      	ldr	r2, [r3, #16]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a9ae:	e021      	b.n	800a9f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 faf8 	bl	800afac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	021a      	lsls	r2, r3, #8
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a9f0:	e000      	b.n	800a9f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a9f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop

0800aa08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a40      	ldr	r2, [pc, #256]	; (800ab6c <TIM_Base_SetConfig+0x114>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d013      	beq.n	800aa98 <TIM_Base_SetConfig+0x40>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa76:	d00f      	beq.n	800aa98 <TIM_Base_SetConfig+0x40>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a3d      	ldr	r2, [pc, #244]	; (800ab70 <TIM_Base_SetConfig+0x118>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d00b      	beq.n	800aa98 <TIM_Base_SetConfig+0x40>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a3c      	ldr	r2, [pc, #240]	; (800ab74 <TIM_Base_SetConfig+0x11c>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d007      	beq.n	800aa98 <TIM_Base_SetConfig+0x40>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a3b      	ldr	r2, [pc, #236]	; (800ab78 <TIM_Base_SetConfig+0x120>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d003      	beq.n	800aa98 <TIM_Base_SetConfig+0x40>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a3a      	ldr	r2, [pc, #232]	; (800ab7c <TIM_Base_SetConfig+0x124>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d108      	bne.n	800aaaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a2f      	ldr	r2, [pc, #188]	; (800ab6c <TIM_Base_SetConfig+0x114>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d02b      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab8:	d027      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a2c      	ldr	r2, [pc, #176]	; (800ab70 <TIM_Base_SetConfig+0x118>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d023      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a2b      	ldr	r2, [pc, #172]	; (800ab74 <TIM_Base_SetConfig+0x11c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d01f      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a2a      	ldr	r2, [pc, #168]	; (800ab78 <TIM_Base_SetConfig+0x120>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d01b      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a29      	ldr	r2, [pc, #164]	; (800ab7c <TIM_Base_SetConfig+0x124>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d017      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a28      	ldr	r2, [pc, #160]	; (800ab80 <TIM_Base_SetConfig+0x128>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d013      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a27      	ldr	r2, [pc, #156]	; (800ab84 <TIM_Base_SetConfig+0x12c>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d00f      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a26      	ldr	r2, [pc, #152]	; (800ab88 <TIM_Base_SetConfig+0x130>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d00b      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a25      	ldr	r2, [pc, #148]	; (800ab8c <TIM_Base_SetConfig+0x134>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d007      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a24      	ldr	r2, [pc, #144]	; (800ab90 <TIM_Base_SetConfig+0x138>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d003      	beq.n	800ab0a <TIM_Base_SetConfig+0xb2>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a23      	ldr	r2, [pc, #140]	; (800ab94 <TIM_Base_SetConfig+0x13c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d108      	bne.n	800ab1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a0a      	ldr	r2, [pc, #40]	; (800ab6c <TIM_Base_SetConfig+0x114>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d003      	beq.n	800ab50 <TIM_Base_SetConfig+0xf8>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a0c      	ldr	r2, [pc, #48]	; (800ab7c <TIM_Base_SetConfig+0x124>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d103      	bne.n	800ab58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	691a      	ldr	r2, [r3, #16]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	615a      	str	r2, [r3, #20]
}
 800ab5e:	bf00      	nop
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	40010000 	.word	0x40010000
 800ab70:	40000400 	.word	0x40000400
 800ab74:	40000800 	.word	0x40000800
 800ab78:	40000c00 	.word	0x40000c00
 800ab7c:	40010400 	.word	0x40010400
 800ab80:	40014000 	.word	0x40014000
 800ab84:	40014400 	.word	0x40014400
 800ab88:	40014800 	.word	0x40014800
 800ab8c:	40001800 	.word	0x40001800
 800ab90:	40001c00 	.word	0x40001c00
 800ab94:	40002000 	.word	0x40002000

0800ab98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	f023 0201 	bic.w	r2, r3, #1
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4b2b      	ldr	r3, [pc, #172]	; (800ac70 <TIM_OC1_SetConfig+0xd8>)
 800abc4:	4013      	ands	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 0303 	bic.w	r3, r3, #3
 800abce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f023 0302 	bic.w	r3, r3, #2
 800abe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	4313      	orrs	r3, r2
 800abea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a21      	ldr	r2, [pc, #132]	; (800ac74 <TIM_OC1_SetConfig+0xdc>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d003      	beq.n	800abfc <TIM_OC1_SetConfig+0x64>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a20      	ldr	r2, [pc, #128]	; (800ac78 <TIM_OC1_SetConfig+0xe0>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d10c      	bne.n	800ac16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f023 0308 	bic.w	r3, r3, #8
 800ac02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f023 0304 	bic.w	r3, r3, #4
 800ac14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a16      	ldr	r2, [pc, #88]	; (800ac74 <TIM_OC1_SetConfig+0xdc>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d003      	beq.n	800ac26 <TIM_OC1_SetConfig+0x8e>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a15      	ldr	r2, [pc, #84]	; (800ac78 <TIM_OC1_SetConfig+0xe0>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d111      	bne.n	800ac4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	621a      	str	r2, [r3, #32]
}
 800ac64:	bf00      	nop
 800ac66:	371c      	adds	r7, #28
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	fffeff8f 	.word	0xfffeff8f
 800ac74:	40010000 	.word	0x40010000
 800ac78:	40010400 	.word	0x40010400

0800ac7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b087      	sub	sp, #28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	f023 0210 	bic.w	r2, r3, #16
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	4b2e      	ldr	r3, [pc, #184]	; (800ad60 <TIM_OC2_SetConfig+0xe4>)
 800aca8:	4013      	ands	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	021b      	lsls	r3, r3, #8
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f023 0320 	bic.w	r3, r3, #32
 800acc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	011b      	lsls	r3, r3, #4
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a23      	ldr	r2, [pc, #140]	; (800ad64 <TIM_OC2_SetConfig+0xe8>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d003      	beq.n	800ace4 <TIM_OC2_SetConfig+0x68>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a22      	ldr	r2, [pc, #136]	; (800ad68 <TIM_OC2_SetConfig+0xec>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d10d      	bne.n	800ad00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	011b      	lsls	r3, r3, #4
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a18      	ldr	r2, [pc, #96]	; (800ad64 <TIM_OC2_SetConfig+0xe8>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d003      	beq.n	800ad10 <TIM_OC2_SetConfig+0x94>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a17      	ldr	r2, [pc, #92]	; (800ad68 <TIM_OC2_SetConfig+0xec>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d113      	bne.n	800ad38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	621a      	str	r2, [r3, #32]
}
 800ad52:	bf00      	nop
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	feff8fff 	.word	0xfeff8fff
 800ad64:	40010000 	.word	0x40010000
 800ad68:	40010400 	.word	0x40010400

0800ad6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a1b      	ldr	r3, [r3, #32]
 800ad86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	4b2d      	ldr	r3, [pc, #180]	; (800ae4c <TIM_OC3_SetConfig+0xe0>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f023 0303 	bic.w	r3, r3, #3
 800ada2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	4313      	orrs	r3, r2
 800adac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800adb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	021b      	lsls	r3, r3, #8
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a22      	ldr	r2, [pc, #136]	; (800ae50 <TIM_OC3_SetConfig+0xe4>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d003      	beq.n	800add2 <TIM_OC3_SetConfig+0x66>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a21      	ldr	r2, [pc, #132]	; (800ae54 <TIM_OC3_SetConfig+0xe8>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d10d      	bne.n	800adee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800add8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	021b      	lsls	r3, r3, #8
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a17      	ldr	r2, [pc, #92]	; (800ae50 <TIM_OC3_SetConfig+0xe4>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d003      	beq.n	800adfe <TIM_OC3_SetConfig+0x92>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a16      	ldr	r2, [pc, #88]	; (800ae54 <TIM_OC3_SetConfig+0xe8>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d113      	bne.n	800ae26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	011b      	lsls	r3, r3, #4
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	621a      	str	r2, [r3, #32]
}
 800ae40:	bf00      	nop
 800ae42:	371c      	adds	r7, #28
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr
 800ae4c:	fffeff8f 	.word	0xfffeff8f
 800ae50:	40010000 	.word	0x40010000
 800ae54:	40010400 	.word	0x40010400

0800ae58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	69db      	ldr	r3, [r3, #28]
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	4b1e      	ldr	r3, [pc, #120]	; (800aefc <TIM_OC4_SetConfig+0xa4>)
 800ae84:	4013      	ands	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	021b      	lsls	r3, r3, #8
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	031b      	lsls	r3, r3, #12
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a13      	ldr	r2, [pc, #76]	; (800af00 <TIM_OC4_SetConfig+0xa8>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d003      	beq.n	800aec0 <TIM_OC4_SetConfig+0x68>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a12      	ldr	r2, [pc, #72]	; (800af04 <TIM_OC4_SetConfig+0xac>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d109      	bne.n	800aed4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	019b      	lsls	r3, r3, #6
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	621a      	str	r2, [r3, #32]
}
 800aeee:	bf00      	nop
 800aef0:	371c      	adds	r7, #28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	feff8fff 	.word	0xfeff8fff
 800af00:	40010000 	.word	0x40010000
 800af04:	40010400 	.word	0x40010400

0800af08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	4b1b      	ldr	r3, [pc, #108]	; (800afa0 <TIM_OC5_SetConfig+0x98>)
 800af34:	4013      	ands	r3, r2
 800af36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800af48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	041b      	lsls	r3, r3, #16
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	4313      	orrs	r3, r2
 800af54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a12      	ldr	r2, [pc, #72]	; (800afa4 <TIM_OC5_SetConfig+0x9c>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d003      	beq.n	800af66 <TIM_OC5_SetConfig+0x5e>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a11      	ldr	r2, [pc, #68]	; (800afa8 <TIM_OC5_SetConfig+0xa0>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d109      	bne.n	800af7a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	021b      	lsls	r3, r3, #8
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	4313      	orrs	r3, r2
 800af78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	685a      	ldr	r2, [r3, #4]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	621a      	str	r2, [r3, #32]
}
 800af94:	bf00      	nop
 800af96:	371c      	adds	r7, #28
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr
 800afa0:	fffeff8f 	.word	0xfffeff8f
 800afa4:	40010000 	.word	0x40010000
 800afa8:	40010400 	.word	0x40010400

0800afac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	4b1c      	ldr	r3, [pc, #112]	; (800b048 <TIM_OC6_SetConfig+0x9c>)
 800afd8:	4013      	ands	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	021b      	lsls	r3, r3, #8
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800afee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	051b      	lsls	r3, r3, #20
 800aff6:	693a      	ldr	r2, [r7, #16]
 800aff8:	4313      	orrs	r3, r2
 800affa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a13      	ldr	r2, [pc, #76]	; (800b04c <TIM_OC6_SetConfig+0xa0>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d003      	beq.n	800b00c <TIM_OC6_SetConfig+0x60>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a12      	ldr	r2, [pc, #72]	; (800b050 <TIM_OC6_SetConfig+0xa4>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d109      	bne.n	800b020 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b012:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	029b      	lsls	r3, r3, #10
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	621a      	str	r2, [r3, #32]
}
 800b03a:	bf00      	nop
 800b03c:	371c      	adds	r7, #28
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	feff8fff 	.word	0xfeff8fff
 800b04c:	40010000 	.word	0x40010000
 800b050:	40010400 	.word	0x40010400

0800b054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b064:	2b01      	cmp	r3, #1
 800b066:	d101      	bne.n	800b06c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b068:	2302      	movs	r3, #2
 800b06a:	e06d      	b.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2202      	movs	r2, #2
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a30      	ldr	r2, [pc, #192]	; (800b154 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d004      	beq.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a2f      	ldr	r2, [pc, #188]	; (800b158 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d108      	bne.n	800b0b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a20      	ldr	r2, [pc, #128]	; (800b154 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d022      	beq.n	800b11c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0de:	d01d      	beq.n	800b11c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a1d      	ldr	r2, [pc, #116]	; (800b15c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d018      	beq.n	800b11c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a1c      	ldr	r2, [pc, #112]	; (800b160 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d013      	beq.n	800b11c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a1a      	ldr	r2, [pc, #104]	; (800b164 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d00e      	beq.n	800b11c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a15      	ldr	r2, [pc, #84]	; (800b158 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d009      	beq.n	800b11c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a16      	ldr	r2, [pc, #88]	; (800b168 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d004      	beq.n	800b11c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a15      	ldr	r2, [pc, #84]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d10c      	bne.n	800b136 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b122:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	40010000 	.word	0x40010000
 800b158:	40010400 	.word	0x40010400
 800b15c:	40000400 	.word	0x40000400
 800b160:	40000800 	.word	0x40000800
 800b164:	40000c00 	.word	0x40000c00
 800b168:	40014000 	.word	0x40014000
 800b16c:	40001800 	.word	0x40001800

0800b170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e040      	b.n	800b240 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7f6 ffe0 	bl	8002194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2224      	movs	r2, #36	; 0x24
 800b1d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 0201 	bic.w	r2, r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f82c 	bl	800b248 <UART_SetConfig>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d101      	bne.n	800b1fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e022      	b.n	800b240 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d002      	beq.n	800b208 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fa82 	bl	800b70c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689a      	ldr	r2, [r3, #8]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f042 0201 	orr.w	r2, r2, #1
 800b236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fb09 	bl	800b850 <UART_CheckIdleState>
 800b23e:	4603      	mov	r3, r0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	689a      	ldr	r2, [r3, #8]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	431a      	orrs	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	695b      	ldr	r3, [r3, #20]
 800b262:	431a      	orrs	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	4313      	orrs	r3, r2
 800b26a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	4ba7      	ldr	r3, [pc, #668]	; (800b510 <UART_SetConfig+0x2c8>)
 800b274:	4013      	ands	r3, r2
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	6812      	ldr	r2, [r2, #0]
 800b27a:	6979      	ldr	r1, [r7, #20]
 800b27c:	430b      	orrs	r3, r1
 800b27e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68da      	ldr	r2, [r3, #12]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	430a      	orrs	r2, r1
 800b294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a95      	ldr	r2, [pc, #596]	; (800b514 <UART_SetConfig+0x2cc>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d120      	bne.n	800b306 <UART_SetConfig+0xbe>
 800b2c4:	4b94      	ldr	r3, [pc, #592]	; (800b518 <UART_SetConfig+0x2d0>)
 800b2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ca:	f003 0303 	and.w	r3, r3, #3
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	d816      	bhi.n	800b300 <UART_SetConfig+0xb8>
 800b2d2:	a201      	add	r2, pc, #4	; (adr r2, 800b2d8 <UART_SetConfig+0x90>)
 800b2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d8:	0800b2e9 	.word	0x0800b2e9
 800b2dc:	0800b2f5 	.word	0x0800b2f5
 800b2e0:	0800b2ef 	.word	0x0800b2ef
 800b2e4:	0800b2fb 	.word	0x0800b2fb
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	77fb      	strb	r3, [r7, #31]
 800b2ec:	e14f      	b.n	800b58e <UART_SetConfig+0x346>
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	77fb      	strb	r3, [r7, #31]
 800b2f2:	e14c      	b.n	800b58e <UART_SetConfig+0x346>
 800b2f4:	2304      	movs	r3, #4
 800b2f6:	77fb      	strb	r3, [r7, #31]
 800b2f8:	e149      	b.n	800b58e <UART_SetConfig+0x346>
 800b2fa:	2308      	movs	r3, #8
 800b2fc:	77fb      	strb	r3, [r7, #31]
 800b2fe:	e146      	b.n	800b58e <UART_SetConfig+0x346>
 800b300:	2310      	movs	r3, #16
 800b302:	77fb      	strb	r3, [r7, #31]
 800b304:	e143      	b.n	800b58e <UART_SetConfig+0x346>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a84      	ldr	r2, [pc, #528]	; (800b51c <UART_SetConfig+0x2d4>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d132      	bne.n	800b376 <UART_SetConfig+0x12e>
 800b310:	4b81      	ldr	r3, [pc, #516]	; (800b518 <UART_SetConfig+0x2d0>)
 800b312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b316:	f003 030c 	and.w	r3, r3, #12
 800b31a:	2b0c      	cmp	r3, #12
 800b31c:	d828      	bhi.n	800b370 <UART_SetConfig+0x128>
 800b31e:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <UART_SetConfig+0xdc>)
 800b320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b324:	0800b359 	.word	0x0800b359
 800b328:	0800b371 	.word	0x0800b371
 800b32c:	0800b371 	.word	0x0800b371
 800b330:	0800b371 	.word	0x0800b371
 800b334:	0800b365 	.word	0x0800b365
 800b338:	0800b371 	.word	0x0800b371
 800b33c:	0800b371 	.word	0x0800b371
 800b340:	0800b371 	.word	0x0800b371
 800b344:	0800b35f 	.word	0x0800b35f
 800b348:	0800b371 	.word	0x0800b371
 800b34c:	0800b371 	.word	0x0800b371
 800b350:	0800b371 	.word	0x0800b371
 800b354:	0800b36b 	.word	0x0800b36b
 800b358:	2300      	movs	r3, #0
 800b35a:	77fb      	strb	r3, [r7, #31]
 800b35c:	e117      	b.n	800b58e <UART_SetConfig+0x346>
 800b35e:	2302      	movs	r3, #2
 800b360:	77fb      	strb	r3, [r7, #31]
 800b362:	e114      	b.n	800b58e <UART_SetConfig+0x346>
 800b364:	2304      	movs	r3, #4
 800b366:	77fb      	strb	r3, [r7, #31]
 800b368:	e111      	b.n	800b58e <UART_SetConfig+0x346>
 800b36a:	2308      	movs	r3, #8
 800b36c:	77fb      	strb	r3, [r7, #31]
 800b36e:	e10e      	b.n	800b58e <UART_SetConfig+0x346>
 800b370:	2310      	movs	r3, #16
 800b372:	77fb      	strb	r3, [r7, #31]
 800b374:	e10b      	b.n	800b58e <UART_SetConfig+0x346>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a69      	ldr	r2, [pc, #420]	; (800b520 <UART_SetConfig+0x2d8>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d120      	bne.n	800b3c2 <UART_SetConfig+0x17a>
 800b380:	4b65      	ldr	r3, [pc, #404]	; (800b518 <UART_SetConfig+0x2d0>)
 800b382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b386:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b38a:	2b30      	cmp	r3, #48	; 0x30
 800b38c:	d013      	beq.n	800b3b6 <UART_SetConfig+0x16e>
 800b38e:	2b30      	cmp	r3, #48	; 0x30
 800b390:	d814      	bhi.n	800b3bc <UART_SetConfig+0x174>
 800b392:	2b20      	cmp	r3, #32
 800b394:	d009      	beq.n	800b3aa <UART_SetConfig+0x162>
 800b396:	2b20      	cmp	r3, #32
 800b398:	d810      	bhi.n	800b3bc <UART_SetConfig+0x174>
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <UART_SetConfig+0x15c>
 800b39e:	2b10      	cmp	r3, #16
 800b3a0:	d006      	beq.n	800b3b0 <UART_SetConfig+0x168>
 800b3a2:	e00b      	b.n	800b3bc <UART_SetConfig+0x174>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	77fb      	strb	r3, [r7, #31]
 800b3a8:	e0f1      	b.n	800b58e <UART_SetConfig+0x346>
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	77fb      	strb	r3, [r7, #31]
 800b3ae:	e0ee      	b.n	800b58e <UART_SetConfig+0x346>
 800b3b0:	2304      	movs	r3, #4
 800b3b2:	77fb      	strb	r3, [r7, #31]
 800b3b4:	e0eb      	b.n	800b58e <UART_SetConfig+0x346>
 800b3b6:	2308      	movs	r3, #8
 800b3b8:	77fb      	strb	r3, [r7, #31]
 800b3ba:	e0e8      	b.n	800b58e <UART_SetConfig+0x346>
 800b3bc:	2310      	movs	r3, #16
 800b3be:	77fb      	strb	r3, [r7, #31]
 800b3c0:	e0e5      	b.n	800b58e <UART_SetConfig+0x346>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a57      	ldr	r2, [pc, #348]	; (800b524 <UART_SetConfig+0x2dc>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d120      	bne.n	800b40e <UART_SetConfig+0x1c6>
 800b3cc:	4b52      	ldr	r3, [pc, #328]	; (800b518 <UART_SetConfig+0x2d0>)
 800b3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b3d6:	2bc0      	cmp	r3, #192	; 0xc0
 800b3d8:	d013      	beq.n	800b402 <UART_SetConfig+0x1ba>
 800b3da:	2bc0      	cmp	r3, #192	; 0xc0
 800b3dc:	d814      	bhi.n	800b408 <UART_SetConfig+0x1c0>
 800b3de:	2b80      	cmp	r3, #128	; 0x80
 800b3e0:	d009      	beq.n	800b3f6 <UART_SetConfig+0x1ae>
 800b3e2:	2b80      	cmp	r3, #128	; 0x80
 800b3e4:	d810      	bhi.n	800b408 <UART_SetConfig+0x1c0>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <UART_SetConfig+0x1a8>
 800b3ea:	2b40      	cmp	r3, #64	; 0x40
 800b3ec:	d006      	beq.n	800b3fc <UART_SetConfig+0x1b4>
 800b3ee:	e00b      	b.n	800b408 <UART_SetConfig+0x1c0>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	77fb      	strb	r3, [r7, #31]
 800b3f4:	e0cb      	b.n	800b58e <UART_SetConfig+0x346>
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	77fb      	strb	r3, [r7, #31]
 800b3fa:	e0c8      	b.n	800b58e <UART_SetConfig+0x346>
 800b3fc:	2304      	movs	r3, #4
 800b3fe:	77fb      	strb	r3, [r7, #31]
 800b400:	e0c5      	b.n	800b58e <UART_SetConfig+0x346>
 800b402:	2308      	movs	r3, #8
 800b404:	77fb      	strb	r3, [r7, #31]
 800b406:	e0c2      	b.n	800b58e <UART_SetConfig+0x346>
 800b408:	2310      	movs	r3, #16
 800b40a:	77fb      	strb	r3, [r7, #31]
 800b40c:	e0bf      	b.n	800b58e <UART_SetConfig+0x346>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a45      	ldr	r2, [pc, #276]	; (800b528 <UART_SetConfig+0x2e0>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d125      	bne.n	800b464 <UART_SetConfig+0x21c>
 800b418:	4b3f      	ldr	r3, [pc, #252]	; (800b518 <UART_SetConfig+0x2d0>)
 800b41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b41e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b426:	d017      	beq.n	800b458 <UART_SetConfig+0x210>
 800b428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b42c:	d817      	bhi.n	800b45e <UART_SetConfig+0x216>
 800b42e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b432:	d00b      	beq.n	800b44c <UART_SetConfig+0x204>
 800b434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b438:	d811      	bhi.n	800b45e <UART_SetConfig+0x216>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <UART_SetConfig+0x1fe>
 800b43e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b442:	d006      	beq.n	800b452 <UART_SetConfig+0x20a>
 800b444:	e00b      	b.n	800b45e <UART_SetConfig+0x216>
 800b446:	2300      	movs	r3, #0
 800b448:	77fb      	strb	r3, [r7, #31]
 800b44a:	e0a0      	b.n	800b58e <UART_SetConfig+0x346>
 800b44c:	2302      	movs	r3, #2
 800b44e:	77fb      	strb	r3, [r7, #31]
 800b450:	e09d      	b.n	800b58e <UART_SetConfig+0x346>
 800b452:	2304      	movs	r3, #4
 800b454:	77fb      	strb	r3, [r7, #31]
 800b456:	e09a      	b.n	800b58e <UART_SetConfig+0x346>
 800b458:	2308      	movs	r3, #8
 800b45a:	77fb      	strb	r3, [r7, #31]
 800b45c:	e097      	b.n	800b58e <UART_SetConfig+0x346>
 800b45e:	2310      	movs	r3, #16
 800b460:	77fb      	strb	r3, [r7, #31]
 800b462:	e094      	b.n	800b58e <UART_SetConfig+0x346>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a30      	ldr	r2, [pc, #192]	; (800b52c <UART_SetConfig+0x2e4>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d125      	bne.n	800b4ba <UART_SetConfig+0x272>
 800b46e:	4b2a      	ldr	r3, [pc, #168]	; (800b518 <UART_SetConfig+0x2d0>)
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b474:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b478:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b47c:	d017      	beq.n	800b4ae <UART_SetConfig+0x266>
 800b47e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b482:	d817      	bhi.n	800b4b4 <UART_SetConfig+0x26c>
 800b484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b488:	d00b      	beq.n	800b4a2 <UART_SetConfig+0x25a>
 800b48a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b48e:	d811      	bhi.n	800b4b4 <UART_SetConfig+0x26c>
 800b490:	2b00      	cmp	r3, #0
 800b492:	d003      	beq.n	800b49c <UART_SetConfig+0x254>
 800b494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b498:	d006      	beq.n	800b4a8 <UART_SetConfig+0x260>
 800b49a:	e00b      	b.n	800b4b4 <UART_SetConfig+0x26c>
 800b49c:	2301      	movs	r3, #1
 800b49e:	77fb      	strb	r3, [r7, #31]
 800b4a0:	e075      	b.n	800b58e <UART_SetConfig+0x346>
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	77fb      	strb	r3, [r7, #31]
 800b4a6:	e072      	b.n	800b58e <UART_SetConfig+0x346>
 800b4a8:	2304      	movs	r3, #4
 800b4aa:	77fb      	strb	r3, [r7, #31]
 800b4ac:	e06f      	b.n	800b58e <UART_SetConfig+0x346>
 800b4ae:	2308      	movs	r3, #8
 800b4b0:	77fb      	strb	r3, [r7, #31]
 800b4b2:	e06c      	b.n	800b58e <UART_SetConfig+0x346>
 800b4b4:	2310      	movs	r3, #16
 800b4b6:	77fb      	strb	r3, [r7, #31]
 800b4b8:	e069      	b.n	800b58e <UART_SetConfig+0x346>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a1c      	ldr	r2, [pc, #112]	; (800b530 <UART_SetConfig+0x2e8>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d137      	bne.n	800b534 <UART_SetConfig+0x2ec>
 800b4c4:	4b14      	ldr	r3, [pc, #80]	; (800b518 <UART_SetConfig+0x2d0>)
 800b4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b4ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4d2:	d017      	beq.n	800b504 <UART_SetConfig+0x2bc>
 800b4d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4d8:	d817      	bhi.n	800b50a <UART_SetConfig+0x2c2>
 800b4da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4de:	d00b      	beq.n	800b4f8 <UART_SetConfig+0x2b0>
 800b4e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4e4:	d811      	bhi.n	800b50a <UART_SetConfig+0x2c2>
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <UART_SetConfig+0x2aa>
 800b4ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ee:	d006      	beq.n	800b4fe <UART_SetConfig+0x2b6>
 800b4f0:	e00b      	b.n	800b50a <UART_SetConfig+0x2c2>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	77fb      	strb	r3, [r7, #31]
 800b4f6:	e04a      	b.n	800b58e <UART_SetConfig+0x346>
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	77fb      	strb	r3, [r7, #31]
 800b4fc:	e047      	b.n	800b58e <UART_SetConfig+0x346>
 800b4fe:	2304      	movs	r3, #4
 800b500:	77fb      	strb	r3, [r7, #31]
 800b502:	e044      	b.n	800b58e <UART_SetConfig+0x346>
 800b504:	2308      	movs	r3, #8
 800b506:	77fb      	strb	r3, [r7, #31]
 800b508:	e041      	b.n	800b58e <UART_SetConfig+0x346>
 800b50a:	2310      	movs	r3, #16
 800b50c:	77fb      	strb	r3, [r7, #31]
 800b50e:	e03e      	b.n	800b58e <UART_SetConfig+0x346>
 800b510:	efff69f3 	.word	0xefff69f3
 800b514:	40011000 	.word	0x40011000
 800b518:	40023800 	.word	0x40023800
 800b51c:	40004400 	.word	0x40004400
 800b520:	40004800 	.word	0x40004800
 800b524:	40004c00 	.word	0x40004c00
 800b528:	40005000 	.word	0x40005000
 800b52c:	40011400 	.word	0x40011400
 800b530:	40007800 	.word	0x40007800
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a71      	ldr	r2, [pc, #452]	; (800b700 <UART_SetConfig+0x4b8>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d125      	bne.n	800b58a <UART_SetConfig+0x342>
 800b53e:	4b71      	ldr	r3, [pc, #452]	; (800b704 <UART_SetConfig+0x4bc>)
 800b540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b548:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b54c:	d017      	beq.n	800b57e <UART_SetConfig+0x336>
 800b54e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b552:	d817      	bhi.n	800b584 <UART_SetConfig+0x33c>
 800b554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b558:	d00b      	beq.n	800b572 <UART_SetConfig+0x32a>
 800b55a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b55e:	d811      	bhi.n	800b584 <UART_SetConfig+0x33c>
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <UART_SetConfig+0x324>
 800b564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b568:	d006      	beq.n	800b578 <UART_SetConfig+0x330>
 800b56a:	e00b      	b.n	800b584 <UART_SetConfig+0x33c>
 800b56c:	2300      	movs	r3, #0
 800b56e:	77fb      	strb	r3, [r7, #31]
 800b570:	e00d      	b.n	800b58e <UART_SetConfig+0x346>
 800b572:	2302      	movs	r3, #2
 800b574:	77fb      	strb	r3, [r7, #31]
 800b576:	e00a      	b.n	800b58e <UART_SetConfig+0x346>
 800b578:	2304      	movs	r3, #4
 800b57a:	77fb      	strb	r3, [r7, #31]
 800b57c:	e007      	b.n	800b58e <UART_SetConfig+0x346>
 800b57e:	2308      	movs	r3, #8
 800b580:	77fb      	strb	r3, [r7, #31]
 800b582:	e004      	b.n	800b58e <UART_SetConfig+0x346>
 800b584:	2310      	movs	r3, #16
 800b586:	77fb      	strb	r3, [r7, #31]
 800b588:	e001      	b.n	800b58e <UART_SetConfig+0x346>
 800b58a:	2310      	movs	r3, #16
 800b58c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	69db      	ldr	r3, [r3, #28]
 800b592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b596:	d15b      	bne.n	800b650 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b598:	7ffb      	ldrb	r3, [r7, #31]
 800b59a:	2b08      	cmp	r3, #8
 800b59c:	d827      	bhi.n	800b5ee <UART_SetConfig+0x3a6>
 800b59e:	a201      	add	r2, pc, #4	; (adr r2, 800b5a4 <UART_SetConfig+0x35c>)
 800b5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a4:	0800b5c9 	.word	0x0800b5c9
 800b5a8:	0800b5d1 	.word	0x0800b5d1
 800b5ac:	0800b5d9 	.word	0x0800b5d9
 800b5b0:	0800b5ef 	.word	0x0800b5ef
 800b5b4:	0800b5df 	.word	0x0800b5df
 800b5b8:	0800b5ef 	.word	0x0800b5ef
 800b5bc:	0800b5ef 	.word	0x0800b5ef
 800b5c0:	0800b5ef 	.word	0x0800b5ef
 800b5c4:	0800b5e7 	.word	0x0800b5e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5c8:	f7fe f9be 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800b5cc:	61b8      	str	r0, [r7, #24]
        break;
 800b5ce:	e013      	b.n	800b5f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5d0:	f7fe f9ce 	bl	8009970 <HAL_RCC_GetPCLK2Freq>
 800b5d4:	61b8      	str	r0, [r7, #24]
        break;
 800b5d6:	e00f      	b.n	800b5f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5d8:	4b4b      	ldr	r3, [pc, #300]	; (800b708 <UART_SetConfig+0x4c0>)
 800b5da:	61bb      	str	r3, [r7, #24]
        break;
 800b5dc:	e00c      	b.n	800b5f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5de:	f7fe f8f1 	bl	80097c4 <HAL_RCC_GetSysClockFreq>
 800b5e2:	61b8      	str	r0, [r7, #24]
        break;
 800b5e4:	e008      	b.n	800b5f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5ea:	61bb      	str	r3, [r7, #24]
        break;
 800b5ec:	e004      	b.n	800b5f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	77bb      	strb	r3, [r7, #30]
        break;
 800b5f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d074      	beq.n	800b6e8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	005a      	lsls	r2, r3, #1
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	085b      	lsrs	r3, r3, #1
 800b608:	441a      	add	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b612:	b29b      	uxth	r3, r3
 800b614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2b0f      	cmp	r3, #15
 800b61a:	d916      	bls.n	800b64a <UART_SetConfig+0x402>
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b622:	d212      	bcs.n	800b64a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	b29b      	uxth	r3, r3
 800b628:	f023 030f 	bic.w	r3, r3, #15
 800b62c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	085b      	lsrs	r3, r3, #1
 800b632:	b29b      	uxth	r3, r3
 800b634:	f003 0307 	and.w	r3, r3, #7
 800b638:	b29a      	uxth	r2, r3
 800b63a:	89fb      	ldrh	r3, [r7, #14]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	89fa      	ldrh	r2, [r7, #14]
 800b646:	60da      	str	r2, [r3, #12]
 800b648:	e04e      	b.n	800b6e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	77bb      	strb	r3, [r7, #30]
 800b64e:	e04b      	b.n	800b6e8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b650:	7ffb      	ldrb	r3, [r7, #31]
 800b652:	2b08      	cmp	r3, #8
 800b654:	d827      	bhi.n	800b6a6 <UART_SetConfig+0x45e>
 800b656:	a201      	add	r2, pc, #4	; (adr r2, 800b65c <UART_SetConfig+0x414>)
 800b658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65c:	0800b681 	.word	0x0800b681
 800b660:	0800b689 	.word	0x0800b689
 800b664:	0800b691 	.word	0x0800b691
 800b668:	0800b6a7 	.word	0x0800b6a7
 800b66c:	0800b697 	.word	0x0800b697
 800b670:	0800b6a7 	.word	0x0800b6a7
 800b674:	0800b6a7 	.word	0x0800b6a7
 800b678:	0800b6a7 	.word	0x0800b6a7
 800b67c:	0800b69f 	.word	0x0800b69f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b680:	f7fe f962 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800b684:	61b8      	str	r0, [r7, #24]
        break;
 800b686:	e013      	b.n	800b6b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b688:	f7fe f972 	bl	8009970 <HAL_RCC_GetPCLK2Freq>
 800b68c:	61b8      	str	r0, [r7, #24]
        break;
 800b68e:	e00f      	b.n	800b6b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b690:	4b1d      	ldr	r3, [pc, #116]	; (800b708 <UART_SetConfig+0x4c0>)
 800b692:	61bb      	str	r3, [r7, #24]
        break;
 800b694:	e00c      	b.n	800b6b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b696:	f7fe f895 	bl	80097c4 <HAL_RCC_GetSysClockFreq>
 800b69a:	61b8      	str	r0, [r7, #24]
        break;
 800b69c:	e008      	b.n	800b6b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b69e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6a2:	61bb      	str	r3, [r7, #24]
        break;
 800b6a4:	e004      	b.n	800b6b0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	77bb      	strb	r3, [r7, #30]
        break;
 800b6ae:	bf00      	nop
    }

    if (pclk != 0U)
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d018      	beq.n	800b6e8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	085a      	lsrs	r2, r3, #1
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	441a      	add	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2b0f      	cmp	r3, #15
 800b6d0:	d908      	bls.n	800b6e4 <UART_SetConfig+0x49c>
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6d8:	d204      	bcs.n	800b6e4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	60da      	str	r2, [r3, #12]
 800b6e2:	e001      	b.n	800b6e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b6f4:	7fbb      	ldrb	r3, [r7, #30]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	40007c00 	.word	0x40007c00
 800b704:	40023800 	.word	0x40023800
 800b708:	00f42400 	.word	0x00f42400

0800b70c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00a      	beq.n	800b736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	f003 0302 	and.w	r3, r3, #2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00a      	beq.n	800b758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	430a      	orrs	r2, r1
 800b756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	f003 0304 	and.w	r3, r3, #4
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00a      	beq.n	800b77a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	430a      	orrs	r2, r1
 800b778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77e:	f003 0308 	and.w	r3, r3, #8
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	430a      	orrs	r2, r1
 800b79a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	f003 0310 	and.w	r3, r3, #16
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00a      	beq.n	800b7be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00a      	beq.n	800b7e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01a      	beq.n	800b822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	430a      	orrs	r2, r1
 800b800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b80a:	d10a      	bne.n	800b822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00a      	beq.n	800b844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	430a      	orrs	r2, r1
 800b842:	605a      	str	r2, [r3, #4]
  }
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af02      	add	r7, sp, #8
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b860:	f7fa fede 	bl	8006620 <HAL_GetTick>
 800b864:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0308 	and.w	r3, r3, #8
 800b870:	2b08      	cmp	r3, #8
 800b872:	d10e      	bne.n	800b892 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f82d 	bl	800b8e2 <UART_WaitOnFlagUntilTimeout>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b88e:	2303      	movs	r3, #3
 800b890:	e023      	b.n	800b8da <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0304 	and.w	r3, r3, #4
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d10e      	bne.n	800b8be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f817 	bl	800b8e2 <UART_WaitOnFlagUntilTimeout>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e00d      	b.n	800b8da <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2220      	movs	r2, #32
 800b8c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	60f8      	str	r0, [r7, #12]
 800b8ea:	60b9      	str	r1, [r7, #8]
 800b8ec:	603b      	str	r3, [r7, #0]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8f2:	e05e      	b.n	800b9b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fa:	d05a      	beq.n	800b9b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8fc:	f7fa fe90 	bl	8006620 <HAL_GetTick>
 800b900:	4602      	mov	r2, r0
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	69ba      	ldr	r2, [r7, #24]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d302      	bcc.n	800b912 <UART_WaitOnFlagUntilTimeout+0x30>
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d11b      	bne.n	800b94a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b920:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689a      	ldr	r2, [r3, #8]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f022 0201 	bic.w	r2, r2, #1
 800b930:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2220      	movs	r2, #32
 800b936:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2220      	movs	r2, #32
 800b93c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b946:	2303      	movs	r3, #3
 800b948:	e043      	b.n	800b9d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	d02c      	beq.n	800b9b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	69db      	ldr	r3, [r3, #28]
 800b95e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b966:	d124      	bne.n	800b9b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b970:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b980:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	689a      	ldr	r2, [r3, #8]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f022 0201 	bic.w	r2, r2, #1
 800b990:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2220      	movs	r2, #32
 800b996:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2220      	movs	r2, #32
 800b99c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	e00f      	b.n	800b9d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	69da      	ldr	r2, [r3, #28]
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	bf0c      	ite	eq
 800b9c2:	2301      	moveq	r3, #1
 800b9c4:	2300      	movne	r3, #0
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	79fb      	ldrb	r3, [r7, #7]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d091      	beq.n	800b8f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d027      	beq.n	800ba46 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	4b2f      	ldr	r3, [pc, #188]	; (800babc <FMC_SDRAM_Init+0xe0>)
 800ba00:	4013      	ands	r3, r2
 800ba02:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba0c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ba12:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ba18:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ba1e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ba24:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ba2a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ba30:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ba36:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	e032      	b.n	800baac <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba52:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ba5c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ba62:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	4b12      	ldr	r3, [pc, #72]	; (800babc <FMC_SDRAM_Init+0xe0>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba80:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ba86:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ba8c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ba92:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ba98:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	ffff8000 	.word	0xffff8000

0800bac0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bad0:	2300      	movs	r3, #0
 800bad2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d02e      	beq.n	800bb38 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bae6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800baf6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	3b01      	subs	r3, #1
 800bafe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb00:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	3b01      	subs	r3, #1
 800bb08:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb0a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb14:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb1e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	697a      	ldr	r2, [r7, #20]
 800bb34:	609a      	str	r2, [r3, #8]
 800bb36:	e039      	b.n	800bbac <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	4b1e      	ldr	r3, [pc, #120]	; (800bbbc <FMC_SDRAM_Timing_Init+0xfc>)
 800bb42:	4013      	ands	r3, r2
 800bb44:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bb56:	4313      	orrs	r3, r2
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb6a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	3b01      	subs	r3, #1
 800bb78:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb7a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bb84:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bb8e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	ff0f0fff 	.word	0xff0f0fff

0800bbc0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	691a      	ldr	r2, [r3, #16]
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	; (800bc04 <FMC_SDRAM_SendCommand+0x44>)
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	6811      	ldr	r1, [r2, #0]
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	6852      	ldr	r2, [r2, #4]
 800bbdc:	4311      	orrs	r1, r2
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	6892      	ldr	r2, [r2, #8]
 800bbe2:	3a01      	subs	r2, #1
 800bbe4:	0152      	lsls	r2, r2, #5
 800bbe6:	4311      	orrs	r1, r2
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	68d2      	ldr	r2, [r2, #12]
 800bbec:	0252      	lsls	r2, r2, #9
 800bbee:	430a      	orrs	r2, r1
 800bbf0:	431a      	orrs	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	ffc00000 	.word	0xffc00000

0800bc08 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	695a      	ldr	r2, [r3, #20]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	431a      	orrs	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc2e:	b480      	push	{r7}
 800bc30:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800bc32:	bf00      	nop
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc42:	f3ef 8305 	mrs	r3, IPSR
 800bc46:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10f      	bne.n	800bc6e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc4e:	f3ef 8310 	mrs	r3, PRIMASK
 800bc52:	607b      	str	r3, [r7, #4]
  return(result);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d105      	bne.n	800bc66 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc5a:	f3ef 8311 	mrs	r3, BASEPRI
 800bc5e:	603b      	str	r3, [r7, #0]
  return(result);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d007      	beq.n	800bc76 <osKernelInitialize+0x3a>
 800bc66:	4b0e      	ldr	r3, [pc, #56]	; (800bca0 <osKernelInitialize+0x64>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d103      	bne.n	800bc76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800bc6e:	f06f 0305 	mvn.w	r3, #5
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	e00c      	b.n	800bc90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc76:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <osKernelInitialize+0x64>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d105      	bne.n	800bc8a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc7e:	4b08      	ldr	r3, [pc, #32]	; (800bca0 <osKernelInitialize+0x64>)
 800bc80:	2201      	movs	r2, #1
 800bc82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	e002      	b.n	800bc90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800bc8a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800bc90:	68fb      	ldr	r3, [r7, #12]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	2000125c 	.word	0x2000125c

0800bca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcaa:	f3ef 8305 	mrs	r3, IPSR
 800bcae:	60bb      	str	r3, [r7, #8]
  return(result);
 800bcb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10f      	bne.n	800bcd6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcb6:	f3ef 8310 	mrs	r3, PRIMASK
 800bcba:	607b      	str	r3, [r7, #4]
  return(result);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d105      	bne.n	800bcce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bcc2:	f3ef 8311 	mrs	r3, BASEPRI
 800bcc6:	603b      	str	r3, [r7, #0]
  return(result);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d007      	beq.n	800bcde <osKernelStart+0x3a>
 800bcce:	4b0f      	ldr	r3, [pc, #60]	; (800bd0c <osKernelStart+0x68>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d103      	bne.n	800bcde <osKernelStart+0x3a>
    stat = osErrorISR;
 800bcd6:	f06f 0305 	mvn.w	r3, #5
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	e010      	b.n	800bd00 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bcde:	4b0b      	ldr	r3, [pc, #44]	; (800bd0c <osKernelStart+0x68>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d109      	bne.n	800bcfa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bce6:	f7ff ffa2 	bl	800bc2e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bcea:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <osKernelStart+0x68>)
 800bcec:	2202      	movs	r2, #2
 800bcee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bcf0:	f002 fb16 	bl	800e320 <vTaskStartScheduler>
      stat = osOK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	60fb      	str	r3, [r7, #12]
 800bcf8:	e002      	b.n	800bd00 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800bcfa:	f04f 33ff 	mov.w	r3, #4294967295
 800bcfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800bd00:	68fb      	ldr	r3, [r7, #12]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	2000125c 	.word	0x2000125c

0800bd10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b090      	sub	sp, #64	; 0x40
 800bd14:	af04      	add	r7, sp, #16
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd20:	f3ef 8305 	mrs	r3, IPSR
 800bd24:	61fb      	str	r3, [r7, #28]
  return(result);
 800bd26:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f040 808f 	bne.w	800be4c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd2e:	f3ef 8310 	mrs	r3, PRIMASK
 800bd32:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d105      	bne.n	800bd46 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bd3a:	f3ef 8311 	mrs	r3, BASEPRI
 800bd3e:	617b      	str	r3, [r7, #20]
  return(result);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <osThreadNew+0x3e>
 800bd46:	4b44      	ldr	r3, [pc, #272]	; (800be58 <osThreadNew+0x148>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d07e      	beq.n	800be4c <osThreadNew+0x13c>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d07b      	beq.n	800be4c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800bd54:	2380      	movs	r3, #128	; 0x80
 800bd56:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800bd58:	2318      	movs	r3, #24
 800bd5a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800bd60:	f04f 33ff 	mov.w	r3, #4294967295
 800bd64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d045      	beq.n	800bdf8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d002      	beq.n	800bd7a <osThreadNew+0x6a>
        name = attr->name;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d002      	beq.n	800bd88 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d008      	beq.n	800bda0 <osThreadNew+0x90>
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd90:	2b38      	cmp	r3, #56	; 0x38
 800bd92:	d805      	bhi.n	800bda0 <osThreadNew+0x90>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <osThreadNew+0x94>
        return (NULL);
 800bda0:	2300      	movs	r3, #0
 800bda2:	e054      	b.n	800be4e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	695b      	ldr	r3, [r3, #20]
 800bdb0:	089b      	lsrs	r3, r3, #2
 800bdb2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00e      	beq.n	800bdda <osThreadNew+0xca>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	2b5b      	cmp	r3, #91	; 0x5b
 800bdc2:	d90a      	bls.n	800bdda <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d006      	beq.n	800bdda <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <osThreadNew+0xca>
        mem = 1;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	623b      	str	r3, [r7, #32]
 800bdd8:	e010      	b.n	800bdfc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10c      	bne.n	800bdfc <osThreadNew+0xec>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d108      	bne.n	800bdfc <osThreadNew+0xec>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d104      	bne.n	800bdfc <osThreadNew+0xec>
          mem = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	623b      	str	r3, [r7, #32]
 800bdf6:	e001      	b.n	800bdfc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d110      	bne.n	800be24 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be0a:	9202      	str	r2, [sp, #8]
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f002 f8a1 	bl	800df60 <xTaskCreateStatic>
 800be1e:	4603      	mov	r3, r0
 800be20:	613b      	str	r3, [r7, #16]
 800be22:	e013      	b.n	800be4c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800be24:	6a3b      	ldr	r3, [r7, #32]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d110      	bne.n	800be4c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800be2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	f107 0310 	add.w	r3, r7, #16
 800be32:	9301      	str	r3, [sp, #4]
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f002 f8f2 	bl	800e026 <xTaskCreate>
 800be42:	4603      	mov	r3, r0
 800be44:	2b01      	cmp	r3, #1
 800be46:	d001      	beq.n	800be4c <osThreadNew+0x13c>
          hTask = NULL;
 800be48:	2300      	movs	r3, #0
 800be4a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800be4c:	693b      	ldr	r3, [r7, #16]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3730      	adds	r7, #48	; 0x30
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	2000125c 	.word	0x2000125c

0800be5c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be62:	f3ef 8305 	mrs	r3, IPSR
 800be66:	60bb      	str	r3, [r7, #8]
  return(result);
 800be68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10f      	bne.n	800be8e <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be6e:	f3ef 8310 	mrs	r3, PRIMASK
 800be72:	607b      	str	r3, [r7, #4]
  return(result);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d105      	bne.n	800be86 <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800be7a:	f3ef 8311 	mrs	r3, BASEPRI
 800be7e:	603b      	str	r3, [r7, #0]
  return(result);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d007      	beq.n	800be96 <osThreadYield+0x3a>
 800be86:	4b0c      	ldr	r3, [pc, #48]	; (800beb8 <osThreadYield+0x5c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d103      	bne.n	800be96 <osThreadYield+0x3a>
    stat = osErrorISR;
 800be8e:	f06f 0305 	mvn.w	r3, #5
 800be92:	60fb      	str	r3, [r7, #12]
 800be94:	e009      	b.n	800beaa <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800be96:	2300      	movs	r3, #0
 800be98:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 800be9a:	4b08      	ldr	r3, [pc, #32]	; (800bebc <osThreadYield+0x60>)
 800be9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800beaa:	68fb      	ldr	r3, [r7, #12]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	2000125c 	.word	0x2000125c
 800bebc:	e000ed04 	.word	0xe000ed04

0800bec0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bec8:	f3ef 8305 	mrs	r3, IPSR
 800becc:	613b      	str	r3, [r7, #16]
  return(result);
 800bece:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10f      	bne.n	800bef4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bed4:	f3ef 8310 	mrs	r3, PRIMASK
 800bed8:	60fb      	str	r3, [r7, #12]
  return(result);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bee0:	f3ef 8311 	mrs	r3, BASEPRI
 800bee4:	60bb      	str	r3, [r7, #8]
  return(result);
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d007      	beq.n	800befc <osDelay+0x3c>
 800beec:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <osDelay+0x58>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d103      	bne.n	800befc <osDelay+0x3c>
    stat = osErrorISR;
 800bef4:	f06f 0305 	mvn.w	r3, #5
 800bef8:	617b      	str	r3, [r7, #20]
 800befa:	e007      	b.n	800bf0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800befc:	2300      	movs	r3, #0
 800befe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <osDelay+0x4c>
      vTaskDelay(ticks);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f002 f9d4 	bl	800e2b4 <vTaskDelay>
    }
  }

  return (stat);
 800bf0c:	697b      	ldr	r3, [r7, #20]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3718      	adds	r7, #24
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	2000125c 	.word	0x2000125c

0800bf1c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08c      	sub	sp, #48	; 0x30
 800bf20:	af02      	add	r7, sp, #8
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf2c:	f3ef 8305 	mrs	r3, IPSR
 800bf30:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f040 8086 	bne.w	800c046 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf3a:	f3ef 8310 	mrs	r3, PRIMASK
 800bf3e:	617b      	str	r3, [r7, #20]
  return(result);
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d105      	bne.n	800bf52 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bf46:	f3ef 8311 	mrs	r3, BASEPRI
 800bf4a:	613b      	str	r3, [r7, #16]
  return(result);
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d003      	beq.n	800bf5a <osSemaphoreNew+0x3e>
 800bf52:	4b3f      	ldr	r3, [pc, #252]	; (800c050 <osSemaphoreNew+0x134>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d075      	beq.n	800c046 <osSemaphoreNew+0x12a>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d072      	beq.n	800c046 <osSemaphoreNew+0x12a>
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d86e      	bhi.n	800c046 <osSemaphoreNew+0x12a>
    mem = -1;
 800bf68:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d015      	beq.n	800bfa0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d006      	beq.n	800bf8a <osSemaphoreNew+0x6e>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	2b4f      	cmp	r3, #79	; 0x4f
 800bf82:	d902      	bls.n	800bf8a <osSemaphoreNew+0x6e>
        mem = 1;
 800bf84:	2301      	movs	r3, #1
 800bf86:	623b      	str	r3, [r7, #32]
 800bf88:	e00c      	b.n	800bfa4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d108      	bne.n	800bfa4 <osSemaphoreNew+0x88>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d104      	bne.n	800bfa4 <osSemaphoreNew+0x88>
          mem = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	623b      	str	r3, [r7, #32]
 800bf9e:	e001      	b.n	800bfa4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfaa:	d04c      	beq.n	800c046 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d128      	bne.n	800c004 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d10a      	bne.n	800bfce <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	9200      	str	r2, [sp, #0]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	f000 ffdf 	bl	800cf88 <xQueueGenericCreateStatic>
 800bfca:	6278      	str	r0, [r7, #36]	; 0x24
 800bfcc:	e005      	b.n	800bfda <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800bfce:	2203      	movs	r2, #3
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	f001 f85a 	bl	800d08c <xQueueGenericCreate>
 800bfd8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d022      	beq.n	800c026 <osSemaphoreNew+0x10a>
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d01f      	beq.n	800c026 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2100      	movs	r1, #0
 800bfec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfee:	f001 f925 	bl	800d23c <xQueueGenericSend>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d016      	beq.n	800c026 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800bff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bffa:	f001 fddb 	bl	800dbb4 <vQueueDelete>
            hSemaphore = NULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	627b      	str	r3, [r7, #36]	; 0x24
 800c002:	e010      	b.n	800c026 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d108      	bne.n	800c01c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	461a      	mov	r2, r3
 800c010:	68b9      	ldr	r1, [r7, #8]
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f001 f89f 	bl	800d156 <xQueueCreateCountingSemaphoreStatic>
 800c018:	6278      	str	r0, [r7, #36]	; 0x24
 800c01a:	e004      	b.n	800c026 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c01c:	68b9      	ldr	r1, [r7, #8]
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f001 f8d4 	bl	800d1cc <xQueueCreateCountingSemaphore>
 800c024:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00c      	beq.n	800c046 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <osSemaphoreNew+0x11e>
          name = attr->name;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	61fb      	str	r3, [r7, #28]
 800c038:	e001      	b.n	800c03e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800c03a:	2300      	movs	r3, #0
 800c03c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c03e:	69f9      	ldr	r1, [r7, #28]
 800c040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c042:	f001 ff05 	bl	800de50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3728      	adds	r7, #40	; 0x28
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	2000125c 	.word	0x2000125c

0800c054 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c062:	2300      	movs	r3, #0
 800c064:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d103      	bne.n	800c074 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c06c:	f06f 0303 	mvn.w	r3, #3
 800c070:	61fb      	str	r3, [r7, #28]
 800c072:	e04b      	b.n	800c10c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c074:	f3ef 8305 	mrs	r3, IPSR
 800c078:	617b      	str	r3, [r7, #20]
  return(result);
 800c07a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10f      	bne.n	800c0a0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c080:	f3ef 8310 	mrs	r3, PRIMASK
 800c084:	613b      	str	r3, [r7, #16]
  return(result);
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d105      	bne.n	800c098 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c08c:	f3ef 8311 	mrs	r3, BASEPRI
 800c090:	60fb      	str	r3, [r7, #12]
  return(result);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d026      	beq.n	800c0e6 <osSemaphoreAcquire+0x92>
 800c098:	4b1f      	ldr	r3, [pc, #124]	; (800c118 <osSemaphoreAcquire+0xc4>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d122      	bne.n	800c0e6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800c0a6:	f06f 0303 	mvn.w	r3, #3
 800c0aa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800c0ac:	e02d      	b.n	800c10a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c0b2:	f107 0308 	add.w	r3, r7, #8
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	69b8      	ldr	r0, [r7, #24]
 800c0bc:	f001 fcf4 	bl	800daa8 <xQueueReceiveFromISR>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d003      	beq.n	800c0ce <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800c0c6:	f06f 0302 	mvn.w	r3, #2
 800c0ca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800c0cc:	e01d      	b.n	800c10a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d01a      	beq.n	800c10a <osSemaphoreAcquire+0xb6>
 800c0d4:	4b11      	ldr	r3, [pc, #68]	; (800c11c <osSemaphoreAcquire+0xc8>)
 800c0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800c0e4:	e011      	b.n	800c10a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	69b8      	ldr	r0, [r7, #24]
 800c0ea:	f001 fbc9 	bl	800d880 <xQueueSemaphoreTake>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d00b      	beq.n	800c10c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800c0fa:	f06f 0301 	mvn.w	r3, #1
 800c0fe:	61fb      	str	r3, [r7, #28]
 800c100:	e004      	b.n	800c10c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800c102:	f06f 0302 	mvn.w	r3, #2
 800c106:	61fb      	str	r3, [r7, #28]
 800c108:	e000      	b.n	800c10c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800c10a:	bf00      	nop
      }
    }
  }

  return (stat);
 800c10c:	69fb      	ldr	r3, [r7, #28]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3720      	adds	r7, #32
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	2000125c 	.word	0x2000125c
 800c11c:	e000ed04 	.word	0xe000ed04

0800c120 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d103      	bne.n	800c13e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c136:	f06f 0303 	mvn.w	r3, #3
 800c13a:	61fb      	str	r3, [r7, #28]
 800c13c:	e03e      	b.n	800c1bc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c13e:	f3ef 8305 	mrs	r3, IPSR
 800c142:	617b      	str	r3, [r7, #20]
  return(result);
 800c144:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10f      	bne.n	800c16a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c14a:	f3ef 8310 	mrs	r3, PRIMASK
 800c14e:	613b      	str	r3, [r7, #16]
  return(result);
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c156:	f3ef 8311 	mrs	r3, BASEPRI
 800c15a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d01e      	beq.n	800c1a0 <osSemaphoreRelease+0x80>
 800c162:	4b19      	ldr	r3, [pc, #100]	; (800c1c8 <osSemaphoreRelease+0xa8>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b02      	cmp	r3, #2
 800c168:	d11a      	bne.n	800c1a0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c16e:	f107 0308 	add.w	r3, r7, #8
 800c172:	4619      	mov	r1, r3
 800c174:	69b8      	ldr	r0, [r7, #24]
 800c176:	f001 fa07 	bl	800d588 <xQueueGiveFromISR>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d003      	beq.n	800c188 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800c180:	f06f 0302 	mvn.w	r3, #2
 800c184:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c186:	e018      	b.n	800c1ba <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d015      	beq.n	800c1ba <osSemaphoreRelease+0x9a>
 800c18e:	4b0f      	ldr	r3, [pc, #60]	; (800c1cc <osSemaphoreRelease+0xac>)
 800c190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c19e:	e00c      	b.n	800c1ba <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	69b8      	ldr	r0, [r7, #24]
 800c1a8:	f001 f848 	bl	800d23c <xQueueGenericSend>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d004      	beq.n	800c1bc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800c1b2:	f06f 0302 	mvn.w	r3, #2
 800c1b6:	61fb      	str	r3, [r7, #28]
 800c1b8:	e000      	b.n	800c1bc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c1ba:	bf00      	nop
    }
  }

  return (stat);
 800c1bc:	69fb      	ldr	r3, [r7, #28]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3720      	adds	r7, #32
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	2000125c 	.word	0x2000125c
 800c1cc:	e000ed04 	.word	0xe000ed04

0800c1d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b08c      	sub	sp, #48	; 0x30
 800c1d4:	af02      	add	r7, sp, #8
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1e0:	f3ef 8305 	mrs	r3, IPSR
 800c1e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800c1e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d16f      	bne.n	800c2cc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800c1f0:	617b      	str	r3, [r7, #20]
  return(result);
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d105      	bne.n	800c204 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c1f8:	f3ef 8311 	mrs	r3, BASEPRI
 800c1fc:	613b      	str	r3, [r7, #16]
  return(result);
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d003      	beq.n	800c20c <osMessageQueueNew+0x3c>
 800c204:	4b34      	ldr	r3, [pc, #208]	; (800c2d8 <osMessageQueueNew+0x108>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d05f      	beq.n	800c2cc <osMessageQueueNew+0xfc>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d05c      	beq.n	800c2cc <osMessageQueueNew+0xfc>
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d059      	beq.n	800c2cc <osMessageQueueNew+0xfc>
    mem = -1;
 800c218:	f04f 33ff 	mov.w	r3, #4294967295
 800c21c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d029      	beq.n	800c278 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d012      	beq.n	800c252 <osMessageQueueNew+0x82>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	2b4f      	cmp	r3, #79	; 0x4f
 800c232:	d90e      	bls.n	800c252 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00a      	beq.n	800c252 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	695a      	ldr	r2, [r3, #20]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	fb01 f303 	mul.w	r3, r1, r3
 800c248:	429a      	cmp	r2, r3
 800c24a:	d302      	bcc.n	800c252 <osMessageQueueNew+0x82>
        mem = 1;
 800c24c:	2301      	movs	r3, #1
 800c24e:	623b      	str	r3, [r7, #32]
 800c250:	e014      	b.n	800c27c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d110      	bne.n	800c27c <osMessageQueueNew+0xac>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10c      	bne.n	800c27c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c266:	2b00      	cmp	r3, #0
 800c268:	d108      	bne.n	800c27c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d104      	bne.n	800c27c <osMessageQueueNew+0xac>
          mem = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	623b      	str	r3, [r7, #32]
 800c276:	e001      	b.n	800c27c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800c278:	2300      	movs	r3, #0
 800c27a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d10b      	bne.n	800c29a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	2100      	movs	r1, #0
 800c28c:	9100      	str	r1, [sp, #0]
 800c28e:	68b9      	ldr	r1, [r7, #8]
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f000 fe79 	bl	800cf88 <xQueueGenericCreateStatic>
 800c296:	6278      	str	r0, [r7, #36]	; 0x24
 800c298:	e008      	b.n	800c2ac <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800c29a:	6a3b      	ldr	r3, [r7, #32]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d105      	bne.n	800c2ac <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	68b9      	ldr	r1, [r7, #8]
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 fef1 	bl	800d08c <xQueueGenericCreate>
 800c2aa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00c      	beq.n	800c2cc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <osMessageQueueNew+0xf0>
        name = attr->name;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	61fb      	str	r3, [r7, #28]
 800c2be:	e001      	b.n	800c2c4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800c2c4:	69f9      	ldr	r1, [r7, #28]
 800c2c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2c8:	f001 fdc2 	bl	800de50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3728      	adds	r7, #40	; 0x28
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	2000125c 	.word	0x2000125c

0800c2dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08a      	sub	sp, #40	; 0x28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	603b      	str	r3, [r7, #0]
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2f4:	f3ef 8305 	mrs	r3, IPSR
 800c2f8:	61fb      	str	r3, [r7, #28]
  return(result);
 800c2fa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10f      	bne.n	800c320 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c300:	f3ef 8310 	mrs	r3, PRIMASK
 800c304:	61bb      	str	r3, [r7, #24]
  return(result);
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d105      	bne.n	800c318 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c30c:	f3ef 8311 	mrs	r3, BASEPRI
 800c310:	617b      	str	r3, [r7, #20]
  return(result);
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d02c      	beq.n	800c372 <osMessageQueuePut+0x96>
 800c318:	4b28      	ldr	r3, [pc, #160]	; (800c3bc <osMessageQueuePut+0xe0>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d128      	bne.n	800c372 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c320:	6a3b      	ldr	r3, [r7, #32]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d005      	beq.n	800c332 <osMessageQueuePut+0x56>
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <osMessageQueuePut+0x56>
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800c332:	f06f 0303 	mvn.w	r3, #3
 800c336:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c338:	e039      	b.n	800c3ae <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800c33a:	2300      	movs	r3, #0
 800c33c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c33e:	f107 0210 	add.w	r2, r7, #16
 800c342:	2300      	movs	r3, #0
 800c344:	68b9      	ldr	r1, [r7, #8]
 800c346:	6a38      	ldr	r0, [r7, #32]
 800c348:	f001 f87e 	bl	800d448 <xQueueGenericSendFromISR>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d003      	beq.n	800c35a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800c352:	f06f 0302 	mvn.w	r3, #2
 800c356:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c358:	e029      	b.n	800c3ae <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d026      	beq.n	800c3ae <osMessageQueuePut+0xd2>
 800c360:	4b17      	ldr	r3, [pc, #92]	; (800c3c0 <osMessageQueuePut+0xe4>)
 800c362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c370:	e01d      	b.n	800c3ae <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <osMessageQueuePut+0xa2>
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d103      	bne.n	800c386 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800c37e:	f06f 0303 	mvn.w	r3, #3
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
 800c384:	e014      	b.n	800c3b0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c386:	2300      	movs	r3, #0
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	68b9      	ldr	r1, [r7, #8]
 800c38c:	6a38      	ldr	r0, [r7, #32]
 800c38e:	f000 ff55 	bl	800d23c <xQueueGenericSend>
 800c392:	4603      	mov	r3, r0
 800c394:	2b01      	cmp	r3, #1
 800c396:	d00b      	beq.n	800c3b0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d003      	beq.n	800c3a6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800c39e:	f06f 0301 	mvn.w	r3, #1
 800c3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800c3a4:	e004      	b.n	800c3b0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800c3a6:	f06f 0302 	mvn.w	r3, #2
 800c3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c3ac:	e000      	b.n	800c3b0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c3ae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3728      	adds	r7, #40	; 0x28
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	2000125c 	.word	0x2000125c
 800c3c0:	e000ed04 	.word	0xe000ed04

0800c3c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08a      	sub	sp, #40	; 0x28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3da:	f3ef 8305 	mrs	r3, IPSR
 800c3de:	61fb      	str	r3, [r7, #28]
  return(result);
 800c3e0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10f      	bne.n	800c406 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c3ea:	61bb      	str	r3, [r7, #24]
  return(result);
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d105      	bne.n	800c3fe <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c3f2:	f3ef 8311 	mrs	r3, BASEPRI
 800c3f6:	617b      	str	r3, [r7, #20]
  return(result);
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d02c      	beq.n	800c458 <osMessageQueueGet+0x94>
 800c3fe:	4b28      	ldr	r3, [pc, #160]	; (800c4a0 <osMessageQueueGet+0xdc>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b02      	cmp	r3, #2
 800c404:	d128      	bne.n	800c458 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d005      	beq.n	800c418 <osMessageQueueGet+0x54>
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <osMessageQueueGet+0x54>
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d003      	beq.n	800c420 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800c418:	f06f 0303 	mvn.w	r3, #3
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c41e:	e038      	b.n	800c492 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800c420:	2300      	movs	r3, #0
 800c422:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c424:	f107 0310 	add.w	r3, r7, #16
 800c428:	461a      	mov	r2, r3
 800c42a:	68b9      	ldr	r1, [r7, #8]
 800c42c:	6a38      	ldr	r0, [r7, #32]
 800c42e:	f001 fb3b 	bl	800daa8 <xQueueReceiveFromISR>
 800c432:	4603      	mov	r3, r0
 800c434:	2b01      	cmp	r3, #1
 800c436:	d003      	beq.n	800c440 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800c438:	f06f 0302 	mvn.w	r3, #2
 800c43c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c43e:	e028      	b.n	800c492 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d025      	beq.n	800c492 <osMessageQueueGet+0xce>
 800c446:	4b17      	ldr	r3, [pc, #92]	; (800c4a4 <osMessageQueueGet+0xe0>)
 800c448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c456:	e01c      	b.n	800c492 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <osMessageQueueGet+0xa0>
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d103      	bne.n	800c46c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800c464:	f06f 0303 	mvn.w	r3, #3
 800c468:	627b      	str	r3, [r7, #36]	; 0x24
 800c46a:	e013      	b.n	800c494 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c46c:	683a      	ldr	r2, [r7, #0]
 800c46e:	68b9      	ldr	r1, [r7, #8]
 800c470:	6a38      	ldr	r0, [r7, #32]
 800c472:	f001 f91f 	bl	800d6b4 <xQueueReceive>
 800c476:	4603      	mov	r3, r0
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d00b      	beq.n	800c494 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800c482:	f06f 0301 	mvn.w	r3, #1
 800c486:	627b      	str	r3, [r7, #36]	; 0x24
 800c488:	e004      	b.n	800c494 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800c48a:	f06f 0302 	mvn.w	r3, #2
 800c48e:	627b      	str	r3, [r7, #36]	; 0x24
 800c490:	e000      	b.n	800c494 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c492:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c496:	4618      	mov	r0, r3
 800c498:	3728      	adds	r7, #40	; 0x28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	2000125c 	.word	0x2000125c
 800c4a4:	e000ed04 	.word	0xe000ed04

0800c4a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4a07      	ldr	r2, [pc, #28]	; (800c4d4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c4b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	4a06      	ldr	r2, [pc, #24]	; (800c4d8 <vApplicationGetIdleTaskMemory+0x30>)
 800c4be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2280      	movs	r2, #128	; 0x80
 800c4c4:	601a      	str	r2, [r3, #0]
}
 800c4c6:	bf00      	nop
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20001260 	.word	0x20001260
 800c4d8:	200012bc 	.word	0x200012bc

0800c4dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	4a07      	ldr	r2, [pc, #28]	; (800c508 <vApplicationGetTimerTaskMemory+0x2c>)
 800c4ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	4a06      	ldr	r2, [pc, #24]	; (800c50c <vApplicationGetTimerTaskMemory+0x30>)
 800c4f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4fa:	601a      	str	r2, [r3, #0]
}
 800c4fc:	bf00      	nop
 800c4fe:	3714      	adds	r7, #20
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr
 800c508:	200014bc 	.word	0x200014bc
 800c50c:	20001518 	.word	0x20001518

0800c510 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b08a      	sub	sp, #40	; 0x28
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c518:	2300      	movs	r3, #0
 800c51a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c51c:	f001 ff6a 	bl	800e3f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c520:	4b5b      	ldr	r3, [pc, #364]	; (800c690 <pvPortMalloc+0x180>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d101      	bne.n	800c52c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c528:	f000 f91a 	bl	800c760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c52c:	4b59      	ldr	r3, [pc, #356]	; (800c694 <pvPortMalloc+0x184>)
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4013      	ands	r3, r2
 800c534:	2b00      	cmp	r3, #0
 800c536:	f040 8092 	bne.w	800c65e <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d01f      	beq.n	800c580 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c540:	2208      	movs	r2, #8
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4413      	add	r3, r2
 800c546:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d016      	beq.n	800c580 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f023 0307 	bic.w	r3, r3, #7
 800c558:	3308      	adds	r3, #8
 800c55a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f003 0307 	and.w	r3, r3, #7
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00c      	beq.n	800c580 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56a:	b672      	cpsid	i
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	b662      	cpsie	i
 800c57a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d06b      	beq.n	800c65e <pvPortMalloc+0x14e>
 800c586:	4b44      	ldr	r3, [pc, #272]	; (800c698 <pvPortMalloc+0x188>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d866      	bhi.n	800c65e <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c590:	4b42      	ldr	r3, [pc, #264]	; (800c69c <pvPortMalloc+0x18c>)
 800c592:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c594:	4b41      	ldr	r3, [pc, #260]	; (800c69c <pvPortMalloc+0x18c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c59a:	e004      	b.n	800c5a6 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d903      	bls.n	800c5b8 <pvPortMalloc+0xa8>
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1f1      	bne.n	800c59c <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5b8:	4b35      	ldr	r3, [pc, #212]	; (800c690 <pvPortMalloc+0x180>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d04d      	beq.n	800c65e <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2208      	movs	r2, #8
 800c5c8:	4413      	add	r3, r2
 800c5ca:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
 800c5d2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	1ad2      	subs	r2, r2, r3
 800c5dc:	2308      	movs	r3, #8
 800c5de:	005b      	lsls	r3, r3, #1
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d921      	bls.n	800c628 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	f003 0307 	and.w	r3, r3, #7
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00c      	beq.n	800c610 <pvPortMalloc+0x100>
	__asm volatile
 800c5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fa:	b672      	cpsid	i
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	b662      	cpsie	i
 800c60a:	613b      	str	r3, [r7, #16]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	685a      	ldr	r2, [r3, #4]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	1ad2      	subs	r2, r2, r3
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c622:	69b8      	ldr	r0, [r7, #24]
 800c624:	f000 f8fe 	bl	800c824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c628:	4b1b      	ldr	r3, [pc, #108]	; (800c698 <pvPortMalloc+0x188>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	4a19      	ldr	r2, [pc, #100]	; (800c698 <pvPortMalloc+0x188>)
 800c634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c636:	4b18      	ldr	r3, [pc, #96]	; (800c698 <pvPortMalloc+0x188>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b19      	ldr	r3, [pc, #100]	; (800c6a0 <pvPortMalloc+0x190>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d203      	bcs.n	800c64a <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c642:	4b15      	ldr	r3, [pc, #84]	; (800c698 <pvPortMalloc+0x188>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a16      	ldr	r2, [pc, #88]	; (800c6a0 <pvPortMalloc+0x190>)
 800c648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	4b11      	ldr	r3, [pc, #68]	; (800c694 <pvPortMalloc+0x184>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	431a      	orrs	r2, r3
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c65e:	f001 fed7 	bl	800e410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	f003 0307 	and.w	r3, r3, #7
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00c      	beq.n	800c686 <pvPortMalloc+0x176>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	b672      	cpsid	i
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	b662      	cpsie	i
 800c680:	60fb      	str	r3, [r7, #12]
}
 800c682:	bf00      	nop
 800c684:	e7fe      	b.n	800c684 <pvPortMalloc+0x174>
	return pvReturn;
 800c686:	69fb      	ldr	r3, [r7, #28]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3728      	adds	r7, #40	; 0x28
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	2000d920 	.word	0x2000d920
 800c694:	2000d92c 	.word	0x2000d92c
 800c698:	2000d924 	.word	0x2000d924
 800c69c:	2000d918 	.word	0x2000d918
 800c6a0:	2000d928 	.word	0x2000d928

0800c6a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d04c      	beq.n	800c750 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6b6:	2308      	movs	r3, #8
 800c6b8:	425b      	negs	r3, r3
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	4413      	add	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	685a      	ldr	r2, [r3, #4]
 800c6c8:	4b23      	ldr	r3, [pc, #140]	; (800c758 <vPortFree+0xb4>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10c      	bne.n	800c6ec <vPortFree+0x48>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	b672      	cpsid	i
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	b662      	cpsie	i
 800c6e6:	60fb      	str	r3, [r7, #12]
}
 800c6e8:	bf00      	nop
 800c6ea:	e7fe      	b.n	800c6ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00c      	beq.n	800c70e <vPortFree+0x6a>
	__asm volatile
 800c6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f8:	b672      	cpsid	i
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	b662      	cpsie	i
 800c708:	60bb      	str	r3, [r7, #8]
}
 800c70a:	bf00      	nop
 800c70c:	e7fe      	b.n	800c70c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	4b11      	ldr	r3, [pc, #68]	; (800c758 <vPortFree+0xb4>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4013      	ands	r3, r2
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d019      	beq.n	800c750 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d115      	bne.n	800c750 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <vPortFree+0xb4>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	43db      	mvns	r3, r3
 800c72e:	401a      	ands	r2, r3
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c734:	f001 fe5e 	bl	800e3f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	4b07      	ldr	r3, [pc, #28]	; (800c75c <vPortFree+0xb8>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4413      	add	r3, r2
 800c742:	4a06      	ldr	r2, [pc, #24]	; (800c75c <vPortFree+0xb8>)
 800c744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c746:	6938      	ldr	r0, [r7, #16]
 800c748:	f000 f86c 	bl	800c824 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c74c:	f001 fe60 	bl	800e410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c750:	bf00      	nop
 800c752:	3718      	adds	r7, #24
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	2000d92c 	.word	0x2000d92c
 800c75c:	2000d924 	.word	0x2000d924

0800c760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c766:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c76a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c76c:	4b27      	ldr	r3, [pc, #156]	; (800c80c <prvHeapInit+0xac>)
 800c76e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f003 0307 	and.w	r3, r3, #7
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00c      	beq.n	800c794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3307      	adds	r3, #7
 800c77e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f023 0307 	bic.w	r3, r3, #7
 800c786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	4a1f      	ldr	r2, [pc, #124]	; (800c80c <prvHeapInit+0xac>)
 800c790:	4413      	add	r3, r2
 800c792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c798:	4a1d      	ldr	r2, [pc, #116]	; (800c810 <prvHeapInit+0xb0>)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c79e:	4b1c      	ldr	r3, [pc, #112]	; (800c810 <prvHeapInit+0xb0>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7ac:	2208      	movs	r2, #8
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	1a9b      	subs	r3, r3, r2
 800c7b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f023 0307 	bic.w	r3, r3, #7
 800c7ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	4a15      	ldr	r2, [pc, #84]	; (800c814 <prvHeapInit+0xb4>)
 800c7c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7c2:	4b14      	ldr	r3, [pc, #80]	; (800c814 <prvHeapInit+0xb4>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7ca:	4b12      	ldr	r3, [pc, #72]	; (800c814 <prvHeapInit+0xb4>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	1ad2      	subs	r2, r2, r3
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7e0:	4b0c      	ldr	r3, [pc, #48]	; (800c814 <prvHeapInit+0xb4>)
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	4a0a      	ldr	r2, [pc, #40]	; (800c818 <prvHeapInit+0xb8>)
 800c7ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	4a09      	ldr	r2, [pc, #36]	; (800c81c <prvHeapInit+0xbc>)
 800c7f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7f8:	4b09      	ldr	r3, [pc, #36]	; (800c820 <prvHeapInit+0xc0>)
 800c7fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7fe:	601a      	str	r2, [r3, #0]
}
 800c800:	bf00      	nop
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	20001918 	.word	0x20001918
 800c810:	2000d918 	.word	0x2000d918
 800c814:	2000d920 	.word	0x2000d920
 800c818:	2000d928 	.word	0x2000d928
 800c81c:	2000d924 	.word	0x2000d924
 800c820:	2000d92c 	.word	0x2000d92c

0800c824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c82c:	4b28      	ldr	r3, [pc, #160]	; (800c8d0 <prvInsertBlockIntoFreeList+0xac>)
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	e002      	b.n	800c838 <prvInsertBlockIntoFreeList+0x14>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d8f7      	bhi.n	800c832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	4413      	add	r3, r2
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	429a      	cmp	r2, r3
 800c852:	d108      	bne.n	800c866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	441a      	add	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	68ba      	ldr	r2, [r7, #8]
 800c870:	441a      	add	r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	429a      	cmp	r2, r3
 800c878:	d118      	bne.n	800c8ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	4b15      	ldr	r3, [pc, #84]	; (800c8d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	d00d      	beq.n	800c8a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685a      	ldr	r2, [r3, #4]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	441a      	add	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	e008      	b.n	800c8b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8a2:	4b0c      	ldr	r3, [pc, #48]	; (800c8d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	e003      	b.n	800c8b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d002      	beq.n	800c8c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8c2:	bf00      	nop
 800c8c4:	3714      	adds	r7, #20
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	2000d918 	.word	0x2000d918
 800c8d4:	2000d920 	.word	0x2000d920

0800c8d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f103 0208 	add.w	r2, r3, #8
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f103 0208 	add.w	r2, r3, #8
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f103 0208 	add.w	r2, r3, #8
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c926:	bf00      	nop
 800c928:	370c      	adds	r7, #12
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c932:	b480      	push	{r7}
 800c934:	b085      	sub	sp, #20
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	689a      	ldr	r2, [r3, #8]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	683a      	ldr	r2, [r7, #0]
 800c956:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	601a      	str	r2, [r3, #0]
}
 800c96e:	bf00      	nop
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c97a:	b480      	push	{r7}
 800c97c:	b085      	sub	sp, #20
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c990:	d103      	bne.n	800c99a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	60fb      	str	r3, [r7, #12]
 800c998:	e00c      	b.n	800c9b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	3308      	adds	r3, #8
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	e002      	b.n	800c9a8 <vListInsert+0x2e>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d2f6      	bcs.n	800c9a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	683a      	ldr	r2, [r7, #0]
 800c9c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	683a      	ldr	r2, [r7, #0]
 800c9ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	601a      	str	r2, [r3, #0]
}
 800c9e0:	bf00      	nop
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	6892      	ldr	r2, [r2, #8]
 800ca02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	6852      	ldr	r2, [r2, #4]
 800ca0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d103      	bne.n	800ca20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689a      	ldr	r2, [r3, #8]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	1e5a      	subs	r2, r3, #1
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	3b04      	subs	r3, #4
 800ca50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	3b04      	subs	r3, #4
 800ca5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	f023 0201 	bic.w	r2, r3, #1
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	3b04      	subs	r3, #4
 800ca6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca70:	4a0c      	ldr	r2, [pc, #48]	; (800caa4 <pxPortInitialiseStack+0x64>)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	3b14      	subs	r3, #20
 800ca7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3b04      	subs	r3, #4
 800ca86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f06f 0202 	mvn.w	r2, #2
 800ca8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	3b20      	subs	r3, #32
 800ca94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca96:	68fb      	ldr	r3, [r7, #12]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr
 800caa4:	0800caa9 	.word	0x0800caa9

0800caa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800caae:	2300      	movs	r3, #0
 800cab0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cab2:	4b14      	ldr	r3, [pc, #80]	; (800cb04 <prvTaskExitError+0x5c>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caba:	d00c      	beq.n	800cad6 <prvTaskExitError+0x2e>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	b672      	cpsid	i
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	b662      	cpsie	i
 800cad0:	60fb      	str	r3, [r7, #12]
}
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <prvTaskExitError+0x2c>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cada:	b672      	cpsid	i
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	b662      	cpsie	i
 800caea:	60bb      	str	r3, [r7, #8]
}
 800caec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800caee:	bf00      	nop
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d0fc      	beq.n	800caf0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800caf6:	bf00      	nop
 800caf8:	bf00      	nop
 800cafa:	3714      	adds	r7, #20
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	20000018 	.word	0x20000018
	...

0800cb10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <pxCurrentTCBConst2>)
 800cb12:	6819      	ldr	r1, [r3, #0]
 800cb14:	6808      	ldr	r0, [r1, #0]
 800cb16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1a:	f380 8809 	msr	PSP, r0
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f04f 0000 	mov.w	r0, #0
 800cb26:	f380 8811 	msr	BASEPRI, r0
 800cb2a:	4770      	bx	lr
 800cb2c:	f3af 8000 	nop.w

0800cb30 <pxCurrentTCBConst2>:
 800cb30:	2000d938 	.word	0x2000d938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb34:	bf00      	nop
 800cb36:	bf00      	nop

0800cb38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb38:	4808      	ldr	r0, [pc, #32]	; (800cb5c <prvPortStartFirstTask+0x24>)
 800cb3a:	6800      	ldr	r0, [r0, #0]
 800cb3c:	6800      	ldr	r0, [r0, #0]
 800cb3e:	f380 8808 	msr	MSP, r0
 800cb42:	f04f 0000 	mov.w	r0, #0
 800cb46:	f380 8814 	msr	CONTROL, r0
 800cb4a:	b662      	cpsie	i
 800cb4c:	b661      	cpsie	f
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	df00      	svc	0
 800cb58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb5a:	bf00      	nop
 800cb5c:	e000ed08 	.word	0xe000ed08

0800cb60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb66:	4b37      	ldr	r3, [pc, #220]	; (800cc44 <xPortStartScheduler+0xe4>)
 800cb68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	22ff      	movs	r2, #255	; 0xff
 800cb76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb80:	78fb      	ldrb	r3, [r7, #3]
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	4b2f      	ldr	r3, [pc, #188]	; (800cc48 <xPortStartScheduler+0xe8>)
 800cb8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb8e:	4b2f      	ldr	r3, [pc, #188]	; (800cc4c <xPortStartScheduler+0xec>)
 800cb90:	2207      	movs	r2, #7
 800cb92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb94:	e009      	b.n	800cbaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cb96:	4b2d      	ldr	r3, [pc, #180]	; (800cc4c <xPortStartScheduler+0xec>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	4a2b      	ldr	r2, [pc, #172]	; (800cc4c <xPortStartScheduler+0xec>)
 800cb9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cba0:	78fb      	ldrb	r3, [r7, #3]
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbaa:	78fb      	ldrb	r3, [r7, #3]
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbb2:	2b80      	cmp	r3, #128	; 0x80
 800cbb4:	d0ef      	beq.n	800cb96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbb6:	4b25      	ldr	r3, [pc, #148]	; (800cc4c <xPortStartScheduler+0xec>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f1c3 0307 	rsb	r3, r3, #7
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	d00c      	beq.n	800cbdc <xPortStartScheduler+0x7c>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	b672      	cpsid	i
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	b662      	cpsie	i
 800cbd6:	60bb      	str	r3, [r7, #8]
}
 800cbd8:	bf00      	nop
 800cbda:	e7fe      	b.n	800cbda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbdc:	4b1b      	ldr	r3, [pc, #108]	; (800cc4c <xPortStartScheduler+0xec>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	021b      	lsls	r3, r3, #8
 800cbe2:	4a1a      	ldr	r2, [pc, #104]	; (800cc4c <xPortStartScheduler+0xec>)
 800cbe4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbe6:	4b19      	ldr	r3, [pc, #100]	; (800cc4c <xPortStartScheduler+0xec>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbee:	4a17      	ldr	r2, [pc, #92]	; (800cc4c <xPortStartScheduler+0xec>)
 800cbf0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbfa:	4b15      	ldr	r3, [pc, #84]	; (800cc50 <xPortStartScheduler+0xf0>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a14      	ldr	r2, [pc, #80]	; (800cc50 <xPortStartScheduler+0xf0>)
 800cc00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc06:	4b12      	ldr	r3, [pc, #72]	; (800cc50 <xPortStartScheduler+0xf0>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a11      	ldr	r2, [pc, #68]	; (800cc50 <xPortStartScheduler+0xf0>)
 800cc0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc12:	f000 f8dd 	bl	800cdd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc16:	4b0f      	ldr	r3, [pc, #60]	; (800cc54 <xPortStartScheduler+0xf4>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc1c:	f000 f8fc 	bl	800ce18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc20:	4b0d      	ldr	r3, [pc, #52]	; (800cc58 <xPortStartScheduler+0xf8>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a0c      	ldr	r2, [pc, #48]	; (800cc58 <xPortStartScheduler+0xf8>)
 800cc26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc2c:	f7ff ff84 	bl	800cb38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc30:	f001 fd5a 	bl	800e6e8 <vTaskSwitchContext>
	prvTaskExitError();
 800cc34:	f7ff ff38 	bl	800caa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc38:	2300      	movs	r3, #0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	e000e400 	.word	0xe000e400
 800cc48:	2000d930 	.word	0x2000d930
 800cc4c:	2000d934 	.word	0x2000d934
 800cc50:	e000ed20 	.word	0xe000ed20
 800cc54:	20000018 	.word	0x20000018
 800cc58:	e000ef34 	.word	0xe000ef34

0800cc5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc66:	b672      	cpsid	i
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	b662      	cpsie	i
 800cc76:	607b      	str	r3, [r7, #4]
}
 800cc78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc7a:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <vPortEnterCritical+0x60>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	4a0e      	ldr	r2, [pc, #56]	; (800ccbc <vPortEnterCritical+0x60>)
 800cc82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc84:	4b0d      	ldr	r3, [pc, #52]	; (800ccbc <vPortEnterCritical+0x60>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d111      	bne.n	800ccb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc8c:	4b0c      	ldr	r3, [pc, #48]	; (800ccc0 <vPortEnterCritical+0x64>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00c      	beq.n	800ccb0 <vPortEnterCritical+0x54>
	__asm volatile
 800cc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9a:	b672      	cpsid	i
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	b662      	cpsie	i
 800ccaa:	603b      	str	r3, [r7, #0]
}
 800ccac:	bf00      	nop
 800ccae:	e7fe      	b.n	800ccae <vPortEnterCritical+0x52>
	}
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	20000018 	.word	0x20000018
 800ccc0:	e000ed04 	.word	0xe000ed04

0800ccc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccca:	4b13      	ldr	r3, [pc, #76]	; (800cd18 <vPortExitCritical+0x54>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d10c      	bne.n	800ccec <vPortExitCritical+0x28>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd6:	b672      	cpsid	i
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	b662      	cpsie	i
 800cce6:	607b      	str	r3, [r7, #4]
}
 800cce8:	bf00      	nop
 800ccea:	e7fe      	b.n	800ccea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ccec:	4b0a      	ldr	r3, [pc, #40]	; (800cd18 <vPortExitCritical+0x54>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	4a09      	ldr	r2, [pc, #36]	; (800cd18 <vPortExitCritical+0x54>)
 800ccf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccf6:	4b08      	ldr	r3, [pc, #32]	; (800cd18 <vPortExitCritical+0x54>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d105      	bne.n	800cd0a <vPortExitCritical+0x46>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd0a:	bf00      	nop
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	20000018 	.word	0x20000018
 800cd1c:	00000000 	.word	0x00000000

0800cd20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd20:	f3ef 8009 	mrs	r0, PSP
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	4b15      	ldr	r3, [pc, #84]	; (800cd80 <pxCurrentTCBConst>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	f01e 0f10 	tst.w	lr, #16
 800cd30:	bf08      	it	eq
 800cd32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3a:	6010      	str	r0, [r2, #0]
 800cd3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd44:	b672      	cpsid	i
 800cd46:	f380 8811 	msr	BASEPRI, r0
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	b662      	cpsie	i
 800cd54:	f001 fcc8 	bl	800e6e8 <vTaskSwitchContext>
 800cd58:	f04f 0000 	mov.w	r0, #0
 800cd5c:	f380 8811 	msr	BASEPRI, r0
 800cd60:	bc09      	pop	{r0, r3}
 800cd62:	6819      	ldr	r1, [r3, #0]
 800cd64:	6808      	ldr	r0, [r1, #0]
 800cd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6a:	f01e 0f10 	tst.w	lr, #16
 800cd6e:	bf08      	it	eq
 800cd70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd74:	f380 8809 	msr	PSP, r0
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop

0800cd80 <pxCurrentTCBConst>:
 800cd80:	2000d938 	.word	0x2000d938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop

0800cd88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	b672      	cpsid	i
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	b662      	cpsie	i
 800cda2:	607b      	str	r3, [r7, #4]
}
 800cda4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cda6:	f001 fbe3 	bl	800e570 <xTaskIncrementTick>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d003      	beq.n	800cdb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdb0:	4b06      	ldr	r3, [pc, #24]	; (800cdcc <SysTick_Handler+0x44>)
 800cdb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb6:	601a      	str	r2, [r3, #0]
 800cdb8:	2300      	movs	r3, #0
 800cdba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	f383 8811 	msr	BASEPRI, r3
}
 800cdc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cdc4:	bf00      	nop
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	e000ed04 	.word	0xe000ed04

0800cdd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdd4:	4b0b      	ldr	r3, [pc, #44]	; (800ce04 <vPortSetupTimerInterrupt+0x34>)
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdda:	4b0b      	ldr	r3, [pc, #44]	; (800ce08 <vPortSetupTimerInterrupt+0x38>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cde0:	4b0a      	ldr	r3, [pc, #40]	; (800ce0c <vPortSetupTimerInterrupt+0x3c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a0a      	ldr	r2, [pc, #40]	; (800ce10 <vPortSetupTimerInterrupt+0x40>)
 800cde6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdea:	099b      	lsrs	r3, r3, #6
 800cdec:	4a09      	ldr	r2, [pc, #36]	; (800ce14 <vPortSetupTimerInterrupt+0x44>)
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdf2:	4b04      	ldr	r3, [pc, #16]	; (800ce04 <vPortSetupTimerInterrupt+0x34>)
 800cdf4:	2207      	movs	r2, #7
 800cdf6:	601a      	str	r2, [r3, #0]
}
 800cdf8:	bf00      	nop
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	e000e010 	.word	0xe000e010
 800ce08:	e000e018 	.word	0xe000e018
 800ce0c:	2000000c 	.word	0x2000000c
 800ce10:	10624dd3 	.word	0x10624dd3
 800ce14:	e000e014 	.word	0xe000e014

0800ce18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce28 <vPortEnableVFP+0x10>
 800ce1c:	6801      	ldr	r1, [r0, #0]
 800ce1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce22:	6001      	str	r1, [r0, #0]
 800ce24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce26:	bf00      	nop
 800ce28:	e000ed88 	.word	0xe000ed88

0800ce2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce32:	f3ef 8305 	mrs	r3, IPSR
 800ce36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2b0f      	cmp	r3, #15
 800ce3c:	d916      	bls.n	800ce6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce3e:	4a19      	ldr	r2, [pc, #100]	; (800cea4 <vPortValidateInterruptPriority+0x78>)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	4413      	add	r3, r2
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce48:	4b17      	ldr	r3, [pc, #92]	; (800cea8 <vPortValidateInterruptPriority+0x7c>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	7afa      	ldrb	r2, [r7, #11]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d20c      	bcs.n	800ce6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	b672      	cpsid	i
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	b662      	cpsie	i
 800ce66:	607b      	str	r3, [r7, #4]
}
 800ce68:	bf00      	nop
 800ce6a:	e7fe      	b.n	800ce6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce6c:	4b0f      	ldr	r3, [pc, #60]	; (800ceac <vPortValidateInterruptPriority+0x80>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce74:	4b0e      	ldr	r3, [pc, #56]	; (800ceb0 <vPortValidateInterruptPriority+0x84>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d90c      	bls.n	800ce96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ce7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce80:	b672      	cpsid	i
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	b662      	cpsie	i
 800ce90:	603b      	str	r3, [r7, #0]
}
 800ce92:	bf00      	nop
 800ce94:	e7fe      	b.n	800ce94 <vPortValidateInterruptPriority+0x68>
	}
 800ce96:	bf00      	nop
 800ce98:	3714      	adds	r7, #20
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	e000e3f0 	.word	0xe000e3f0
 800cea8:	2000d930 	.word	0x2000d930
 800ceac:	e000ed0c 	.word	0xe000ed0c
 800ceb0:	2000d934 	.word	0x2000d934

0800ceb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10c      	bne.n	800cee2 <xQueueGenericReset+0x2e>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	b672      	cpsid	i
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	b662      	cpsie	i
 800cedc:	60bb      	str	r3, [r7, #8]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cee2:	f7ff febb 	bl	800cc5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceee:	68f9      	ldr	r1, [r7, #12]
 800cef0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cef2:	fb01 f303 	mul.w	r3, r1, r3
 800cef6:	441a      	add	r2, r3
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2200      	movs	r2, #0
 800cf00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf12:	3b01      	subs	r3, #1
 800cf14:	68f9      	ldr	r1, [r7, #12]
 800cf16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf18:	fb01 f303 	mul.w	r3, r1, r3
 800cf1c:	441a      	add	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	22ff      	movs	r2, #255	; 0xff
 800cf26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	22ff      	movs	r2, #255	; 0xff
 800cf2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d114      	bne.n	800cf62 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d01a      	beq.n	800cf76 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	3310      	adds	r3, #16
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 fc83 	bl	800e850 <xTaskRemoveFromEventList>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d012      	beq.n	800cf76 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf50:	4b0c      	ldr	r3, [pc, #48]	; (800cf84 <xQueueGenericReset+0xd0>)
 800cf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	e009      	b.n	800cf76 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	3310      	adds	r3, #16
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff fcb6 	bl	800c8d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	3324      	adds	r3, #36	; 0x24
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7ff fcb1 	bl	800c8d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf76:	f7ff fea5 	bl	800ccc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf7a:	2301      	movs	r3, #1
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	e000ed04 	.word	0xe000ed04

0800cf88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08e      	sub	sp, #56	; 0x38
 800cf8c:	af02      	add	r7, sp, #8
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
 800cf94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10c      	bne.n	800cfb6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa0:	b672      	cpsid	i
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	b662      	cpsie	i
 800cfb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfb2:	bf00      	nop
 800cfb4:	e7fe      	b.n	800cfb4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10c      	bne.n	800cfd6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	b672      	cpsid	i
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	b662      	cpsie	i
 800cfd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <xQueueGenericCreateStatic+0x5a>
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <xQueueGenericCreateStatic+0x5e>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e000      	b.n	800cfe8 <xQueueGenericCreateStatic+0x60>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10c      	bne.n	800d006 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff0:	b672      	cpsid	i
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	b662      	cpsie	i
 800d000:	623b      	str	r3, [r7, #32]
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d102      	bne.n	800d012 <xQueueGenericCreateStatic+0x8a>
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d101      	bne.n	800d016 <xQueueGenericCreateStatic+0x8e>
 800d012:	2301      	movs	r3, #1
 800d014:	e000      	b.n	800d018 <xQueueGenericCreateStatic+0x90>
 800d016:	2300      	movs	r3, #0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10c      	bne.n	800d036 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	b672      	cpsid	i
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	b662      	cpsie	i
 800d030:	61fb      	str	r3, [r7, #28]
}
 800d032:	bf00      	nop
 800d034:	e7fe      	b.n	800d034 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d036:	2350      	movs	r3, #80	; 0x50
 800d038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	2b50      	cmp	r3, #80	; 0x50
 800d03e:	d00c      	beq.n	800d05a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d044:	b672      	cpsid	i
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	b662      	cpsie	i
 800d054:	61bb      	str	r3, [r7, #24]
}
 800d056:	bf00      	nop
 800d058:	e7fe      	b.n	800d058 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d05a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00d      	beq.n	800d082 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d06e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	4613      	mov	r3, r2
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	68b9      	ldr	r1, [r7, #8]
 800d07c:	68f8      	ldr	r0, [r7, #12]
 800d07e:	f000 f847 	bl	800d110 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d084:	4618      	mov	r0, r3
 800d086:	3730      	adds	r7, #48	; 0x30
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08a      	sub	sp, #40	; 0x28
 800d090:	af02      	add	r7, sp, #8
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	4613      	mov	r3, r2
 800d098:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10c      	bne.n	800d0ba <xQueueGenericCreate+0x2e>
	__asm volatile
 800d0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a4:	b672      	cpsid	i
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	b662      	cpsie	i
 800d0b4:	613b      	str	r3, [r7, #16]
}
 800d0b6:	bf00      	nop
 800d0b8:	e7fe      	b.n	800d0b8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d102      	bne.n	800d0c6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	61fb      	str	r3, [r7, #28]
 800d0c4:	e004      	b.n	800d0d0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	fb02 f303 	mul.w	r3, r2, r3
 800d0ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	3350      	adds	r3, #80	; 0x50
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7ff fa1b 	bl	800c510 <pvPortMalloc>
 800d0da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d011      	beq.n	800d106 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	3350      	adds	r3, #80	; 0x50
 800d0ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0f4:	79fa      	ldrb	r2, [r7, #7]
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	697a      	ldr	r2, [r7, #20]
 800d0fe:	68b9      	ldr	r1, [r7, #8]
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 f805 	bl	800d110 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d106:	69bb      	ldr	r3, [r7, #24]
	}
 800d108:	4618      	mov	r0, r3
 800d10a:	3720      	adds	r7, #32
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d103      	bne.n	800d12c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	69ba      	ldr	r2, [r7, #24]
 800d128:	601a      	str	r2, [r3, #0]
 800d12a:	e002      	b.n	800d132 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d13e:	2101      	movs	r1, #1
 800d140:	69b8      	ldr	r0, [r7, #24]
 800d142:	f7ff feb7 	bl	800ceb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	78fa      	ldrb	r2, [r7, #3]
 800d14a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d14e:	bf00      	nop
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d156:	b580      	push	{r7, lr}
 800d158:	b08a      	sub	sp, #40	; 0x28
 800d15a:	af02      	add	r7, sp, #8
 800d15c:	60f8      	str	r0, [r7, #12]
 800d15e:	60b9      	str	r1, [r7, #8]
 800d160:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10c      	bne.n	800d182 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800d168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16c:	b672      	cpsid	i
 800d16e:	f383 8811 	msr	BASEPRI, r3
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	b662      	cpsie	i
 800d17c:	61bb      	str	r3, [r7, #24]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	429a      	cmp	r2, r3
 800d188:	d90c      	bls.n	800d1a4 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	b672      	cpsid	i
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	b662      	cpsie	i
 800d19e:	617b      	str	r3, [r7, #20]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d1a4:	2302      	movs	r3, #2
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f7ff feea 	bl	800cf88 <xQueueGenericCreateStatic>
 800d1b4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	68ba      	ldr	r2, [r7, #8]
 800d1c0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d1c2:	69fb      	ldr	r3, [r7, #28]
	}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3720      	adds	r7, #32
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b086      	sub	sp, #24
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10c      	bne.n	800d1f6 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800d1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e0:	b672      	cpsid	i
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	b662      	cpsie	i
 800d1f0:	613b      	str	r3, [r7, #16]
}
 800d1f2:	bf00      	nop
 800d1f4:	e7fe      	b.n	800d1f4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d90c      	bls.n	800d218 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	b672      	cpsid	i
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	b662      	cpsie	i
 800d212:	60fb      	str	r3, [r7, #12]
}
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d218:	2202      	movs	r2, #2
 800d21a:	2100      	movs	r1, #0
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff ff35 	bl	800d08c <xQueueGenericCreate>
 800d222:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d002      	beq.n	800d230 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	683a      	ldr	r2, [r7, #0]
 800d22e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d230:	697b      	ldr	r3, [r7, #20]
	}
 800d232:	4618      	mov	r0, r3
 800d234:	3718      	adds	r7, #24
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b08e      	sub	sp, #56	; 0x38
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d24a:	2300      	movs	r3, #0
 800d24c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10c      	bne.n	800d272 <xQueueGenericSend+0x36>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25c:	b672      	cpsid	i
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	b662      	cpsie	i
 800d26c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d26e:	bf00      	nop
 800d270:	e7fe      	b.n	800d270 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d103      	bne.n	800d280 <xQueueGenericSend+0x44>
 800d278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d101      	bne.n	800d284 <xQueueGenericSend+0x48>
 800d280:	2301      	movs	r3, #1
 800d282:	e000      	b.n	800d286 <xQueueGenericSend+0x4a>
 800d284:	2300      	movs	r3, #0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10c      	bne.n	800d2a4 <xQueueGenericSend+0x68>
	__asm volatile
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	b672      	cpsid	i
 800d290:	f383 8811 	msr	BASEPRI, r3
 800d294:	f3bf 8f6f 	isb	sy
 800d298:	f3bf 8f4f 	dsb	sy
 800d29c:	b662      	cpsie	i
 800d29e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2a0:	bf00      	nop
 800d2a2:	e7fe      	b.n	800d2a2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d103      	bne.n	800d2b2 <xQueueGenericSend+0x76>
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d101      	bne.n	800d2b6 <xQueueGenericSend+0x7a>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e000      	b.n	800d2b8 <xQueueGenericSend+0x7c>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10c      	bne.n	800d2d6 <xQueueGenericSend+0x9a>
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	b672      	cpsid	i
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	b662      	cpsie	i
 800d2d0:	623b      	str	r3, [r7, #32]
}
 800d2d2:	bf00      	nop
 800d2d4:	e7fe      	b.n	800d2d4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2d6:	f001 fc81 	bl	800ebdc <xTaskGetSchedulerState>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d102      	bne.n	800d2e6 <xQueueGenericSend+0xaa>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d101      	bne.n	800d2ea <xQueueGenericSend+0xae>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e000      	b.n	800d2ec <xQueueGenericSend+0xb0>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10c      	bne.n	800d30a <xQueueGenericSend+0xce>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f4:	b672      	cpsid	i
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	b662      	cpsie	i
 800d304:	61fb      	str	r3, [r7, #28]
}
 800d306:	bf00      	nop
 800d308:	e7fe      	b.n	800d308 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d30a:	f7ff fca7 	bl	800cc5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d316:	429a      	cmp	r2, r3
 800d318:	d302      	bcc.n	800d320 <xQueueGenericSend+0xe4>
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	d129      	bne.n	800d374 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d320:	683a      	ldr	r2, [r7, #0]
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d326:	f000 fc82 	bl	800dc2e <prvCopyDataToQueue>
 800d32a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d330:	2b00      	cmp	r3, #0
 800d332:	d010      	beq.n	800d356 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d336:	3324      	adds	r3, #36	; 0x24
 800d338:	4618      	mov	r0, r3
 800d33a:	f001 fa89 	bl	800e850 <xTaskRemoveFromEventList>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d013      	beq.n	800d36c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d344:	4b3f      	ldr	r3, [pc, #252]	; (800d444 <xQueueGenericSend+0x208>)
 800d346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d34a:	601a      	str	r2, [r3, #0]
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	e00a      	b.n	800d36c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d007      	beq.n	800d36c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d35c:	4b39      	ldr	r3, [pc, #228]	; (800d444 <xQueueGenericSend+0x208>)
 800d35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d36c:	f7ff fcaa 	bl	800ccc4 <vPortExitCritical>
				return pdPASS;
 800d370:	2301      	movs	r3, #1
 800d372:	e063      	b.n	800d43c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d103      	bne.n	800d382 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d37a:	f7ff fca3 	bl	800ccc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d37e:	2300      	movs	r3, #0
 800d380:	e05c      	b.n	800d43c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d384:	2b00      	cmp	r3, #0
 800d386:	d106      	bne.n	800d396 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d388:	f107 0314 	add.w	r3, r7, #20
 800d38c:	4618      	mov	r0, r3
 800d38e:	f001 fac5 	bl	800e91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d392:	2301      	movs	r3, #1
 800d394:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d396:	f7ff fc95 	bl	800ccc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d39a:	f001 f82b 	bl	800e3f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d39e:	f7ff fc5d 	bl	800cc5c <vPortEnterCritical>
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3a8:	b25b      	sxtb	r3, r3
 800d3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ae:	d103      	bne.n	800d3b8 <xQueueGenericSend+0x17c>
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3be:	b25b      	sxtb	r3, r3
 800d3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c4:	d103      	bne.n	800d3ce <xQueueGenericSend+0x192>
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3ce:	f7ff fc79 	bl	800ccc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3d2:	1d3a      	adds	r2, r7, #4
 800d3d4:	f107 0314 	add.w	r3, r7, #20
 800d3d8:	4611      	mov	r1, r2
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f001 fab4 	bl	800e948 <xTaskCheckForTimeOut>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d124      	bne.n	800d430 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d3e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3e8:	f000 fd19 	bl	800de1e <prvIsQueueFull>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d018      	beq.n	800d424 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	3310      	adds	r3, #16
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f001 f9d4 	bl	800e7a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d402:	f000 fca4 	bl	800dd4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d406:	f001 f803 	bl	800e410 <xTaskResumeAll>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f47f af7c 	bne.w	800d30a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d412:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <xQueueGenericSend+0x208>)
 800d414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d418:	601a      	str	r2, [r3, #0]
 800d41a:	f3bf 8f4f 	dsb	sy
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	e772      	b.n	800d30a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d426:	f000 fc92 	bl	800dd4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d42a:	f000 fff1 	bl	800e410 <xTaskResumeAll>
 800d42e:	e76c      	b.n	800d30a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d432:	f000 fc8c 	bl	800dd4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d436:	f000 ffeb 	bl	800e410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d43a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3738      	adds	r7, #56	; 0x38
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	e000ed04 	.word	0xe000ed04

0800d448 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08e      	sub	sp, #56	; 0x38
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
 800d454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10c      	bne.n	800d47a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d464:	b672      	cpsid	i
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	b662      	cpsie	i
 800d474:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d476:	bf00      	nop
 800d478:	e7fe      	b.n	800d478 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d103      	bne.n	800d488 <xQueueGenericSendFromISR+0x40>
 800d480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <xQueueGenericSendFromISR+0x44>
 800d488:	2301      	movs	r3, #1
 800d48a:	e000      	b.n	800d48e <xQueueGenericSendFromISR+0x46>
 800d48c:	2300      	movs	r3, #0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10c      	bne.n	800d4ac <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d496:	b672      	cpsid	i
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	b662      	cpsie	i
 800d4a6:	623b      	str	r3, [r7, #32]
}
 800d4a8:	bf00      	nop
 800d4aa:	e7fe      	b.n	800d4aa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d103      	bne.n	800d4ba <xQueueGenericSendFromISR+0x72>
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d101      	bne.n	800d4be <xQueueGenericSendFromISR+0x76>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e000      	b.n	800d4c0 <xQueueGenericSendFromISR+0x78>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10c      	bne.n	800d4de <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	b672      	cpsid	i
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	b662      	cpsie	i
 800d4d8:	61fb      	str	r3, [r7, #28]
}
 800d4da:	bf00      	nop
 800d4dc:	e7fe      	b.n	800d4dc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4de:	f7ff fca5 	bl	800ce2c <vPortValidateInterruptPriority>
	__asm volatile
 800d4e2:	f3ef 8211 	mrs	r2, BASEPRI
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	b672      	cpsid	i
 800d4ec:	f383 8811 	msr	BASEPRI, r3
 800d4f0:	f3bf 8f6f 	isb	sy
 800d4f4:	f3bf 8f4f 	dsb	sy
 800d4f8:	b662      	cpsie	i
 800d4fa:	61ba      	str	r2, [r7, #24]
 800d4fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d500:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d302      	bcc.n	800d514 <xQueueGenericSendFromISR+0xcc>
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b02      	cmp	r3, #2
 800d512:	d12c      	bne.n	800d56e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d51a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d51e:	683a      	ldr	r2, [r7, #0]
 800d520:	68b9      	ldr	r1, [r7, #8]
 800d522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d524:	f000 fb83 	bl	800dc2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d528:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d530:	d112      	bne.n	800d558 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d536:	2b00      	cmp	r3, #0
 800d538:	d016      	beq.n	800d568 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	3324      	adds	r3, #36	; 0x24
 800d53e:	4618      	mov	r0, r3
 800d540:	f001 f986 	bl	800e850 <xTaskRemoveFromEventList>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d00e      	beq.n	800d568 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00b      	beq.n	800d568 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	601a      	str	r2, [r3, #0]
 800d556:	e007      	b.n	800d568 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d558:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d55c:	3301      	adds	r3, #1
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	b25a      	sxtb	r2, r3
 800d562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d568:	2301      	movs	r3, #1
 800d56a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d56c:	e001      	b.n	800d572 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d56e:	2300      	movs	r3, #0
 800d570:	637b      	str	r3, [r7, #52]	; 0x34
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	f383 8811 	msr	BASEPRI, r3
}
 800d57c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d580:	4618      	mov	r0, r3
 800d582:	3738      	adds	r7, #56	; 0x38
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08e      	sub	sp, #56	; 0x38
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10c      	bne.n	800d5b6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a0:	b672      	cpsid	i
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	b662      	cpsie	i
 800d5b0:	623b      	str	r3, [r7, #32]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00c      	beq.n	800d5d8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c2:	b672      	cpsid	i
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	b662      	cpsie	i
 800d5d2:	61fb      	str	r3, [r7, #28]
}
 800d5d4:	bf00      	nop
 800d5d6:	e7fe      	b.n	800d5d6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d103      	bne.n	800d5e8 <xQueueGiveFromISR+0x60>
 800d5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d101      	bne.n	800d5ec <xQueueGiveFromISR+0x64>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e000      	b.n	800d5ee <xQueueGiveFromISR+0x66>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d10c      	bne.n	800d60c <xQueueGiveFromISR+0x84>
	__asm volatile
 800d5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f6:	b672      	cpsid	i
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	b662      	cpsie	i
 800d606:	61bb      	str	r3, [r7, #24]
}
 800d608:	bf00      	nop
 800d60a:	e7fe      	b.n	800d60a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d60c:	f7ff fc0e 	bl	800ce2c <vPortValidateInterruptPriority>
	__asm volatile
 800d610:	f3ef 8211 	mrs	r2, BASEPRI
 800d614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d618:	b672      	cpsid	i
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	b662      	cpsie	i
 800d628:	617a      	str	r2, [r7, #20]
 800d62a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d62c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d62e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d634:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d22b      	bcs.n	800d698 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d652:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65a:	d112      	bne.n	800d682 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d660:	2b00      	cmp	r3, #0
 800d662:	d016      	beq.n	800d692 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d666:	3324      	adds	r3, #36	; 0x24
 800d668:	4618      	mov	r0, r3
 800d66a:	f001 f8f1 	bl	800e850 <xTaskRemoveFromEventList>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00e      	beq.n	800d692 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00b      	beq.n	800d692 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	2201      	movs	r2, #1
 800d67e:	601a      	str	r2, [r3, #0]
 800d680:	e007      	b.n	800d692 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d686:	3301      	adds	r3, #1
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	b25a      	sxtb	r2, r3
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d692:	2301      	movs	r3, #1
 800d694:	637b      	str	r3, [r7, #52]	; 0x34
 800d696:	e001      	b.n	800d69c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d698:	2300      	movs	r3, #0
 800d69a:	637b      	str	r3, [r7, #52]	; 0x34
 800d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f383 8811 	msr	BASEPRI, r3
}
 800d6a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3738      	adds	r7, #56	; 0x38
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
	...

0800d6b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b08c      	sub	sp, #48	; 0x30
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10c      	bne.n	800d6e8 <xQueueReceive+0x34>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	b672      	cpsid	i
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	b662      	cpsie	i
 800d6e2:	623b      	str	r3, [r7, #32]
}
 800d6e4:	bf00      	nop
 800d6e6:	e7fe      	b.n	800d6e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d103      	bne.n	800d6f6 <xQueueReceive+0x42>
 800d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d101      	bne.n	800d6fa <xQueueReceive+0x46>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e000      	b.n	800d6fc <xQueueReceive+0x48>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10c      	bne.n	800d71a <xQueueReceive+0x66>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	b672      	cpsid	i
 800d706:	f383 8811 	msr	BASEPRI, r3
 800d70a:	f3bf 8f6f 	isb	sy
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	b662      	cpsie	i
 800d714:	61fb      	str	r3, [r7, #28]
}
 800d716:	bf00      	nop
 800d718:	e7fe      	b.n	800d718 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d71a:	f001 fa5f 	bl	800ebdc <xTaskGetSchedulerState>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d102      	bne.n	800d72a <xQueueReceive+0x76>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d101      	bne.n	800d72e <xQueueReceive+0x7a>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e000      	b.n	800d730 <xQueueReceive+0x7c>
 800d72e:	2300      	movs	r3, #0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10c      	bne.n	800d74e <xQueueReceive+0x9a>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	b672      	cpsid	i
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	b662      	cpsie	i
 800d748:	61bb      	str	r3, [r7, #24]
}
 800d74a:	bf00      	nop
 800d74c:	e7fe      	b.n	800d74c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d74e:	f7ff fa85 	bl	800cc5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d756:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d01f      	beq.n	800d79e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d75e:	68b9      	ldr	r1, [r7, #8]
 800d760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d762:	f000 face 	bl	800dd02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d768:	1e5a      	subs	r2, r3, #1
 800d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00f      	beq.n	800d796 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d778:	3310      	adds	r3, #16
 800d77a:	4618      	mov	r0, r3
 800d77c:	f001 f868 	bl	800e850 <xTaskRemoveFromEventList>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d007      	beq.n	800d796 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d786:	4b3d      	ldr	r3, [pc, #244]	; (800d87c <xQueueReceive+0x1c8>)
 800d788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d796:	f7ff fa95 	bl	800ccc4 <vPortExitCritical>
				return pdPASS;
 800d79a:	2301      	movs	r3, #1
 800d79c:	e069      	b.n	800d872 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d103      	bne.n	800d7ac <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7a4:	f7ff fa8e 	bl	800ccc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	e062      	b.n	800d872 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d106      	bne.n	800d7c0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7b2:	f107 0310 	add.w	r3, r7, #16
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 f8b0 	bl	800e91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7c0:	f7ff fa80 	bl	800ccc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7c4:	f000 fe16 	bl	800e3f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7c8:	f7ff fa48 	bl	800cc5c <vPortEnterCritical>
 800d7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7d2:	b25b      	sxtb	r3, r3
 800d7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d8:	d103      	bne.n	800d7e2 <xQueueReceive+0x12e>
 800d7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7e8:	b25b      	sxtb	r3, r3
 800d7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ee:	d103      	bne.n	800d7f8 <xQueueReceive+0x144>
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7f8:	f7ff fa64 	bl	800ccc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7fc:	1d3a      	adds	r2, r7, #4
 800d7fe:	f107 0310 	add.w	r3, r7, #16
 800d802:	4611      	mov	r1, r2
 800d804:	4618      	mov	r0, r3
 800d806:	f001 f89f 	bl	800e948 <xTaskCheckForTimeOut>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d123      	bne.n	800d858 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d812:	f000 faee 	bl	800ddf2 <prvIsQueueEmpty>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d017      	beq.n	800d84c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81e:	3324      	adds	r3, #36	; 0x24
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f000 ffbf 	bl	800e7a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d82a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d82c:	f000 fa8f 	bl	800dd4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d830:	f000 fdee 	bl	800e410 <xTaskResumeAll>
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d189      	bne.n	800d74e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d83a:	4b10      	ldr	r3, [pc, #64]	; (800d87c <xQueueReceive+0x1c8>)
 800d83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d840:	601a      	str	r2, [r3, #0]
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	e780      	b.n	800d74e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d84c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d84e:	f000 fa7e 	bl	800dd4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d852:	f000 fddd 	bl	800e410 <xTaskResumeAll>
 800d856:	e77a      	b.n	800d74e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d85a:	f000 fa78 	bl	800dd4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d85e:	f000 fdd7 	bl	800e410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d864:	f000 fac5 	bl	800ddf2 <prvIsQueueEmpty>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f43f af6f 	beq.w	800d74e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d870:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d872:	4618      	mov	r0, r3
 800d874:	3730      	adds	r7, #48	; 0x30
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	e000ed04 	.word	0xe000ed04

0800d880 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b08e      	sub	sp, #56	; 0x38
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d892:	2300      	movs	r3, #0
 800d894:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10c      	bne.n	800d8b6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	b672      	cpsid	i
 800d8a2:	f383 8811 	msr	BASEPRI, r3
 800d8a6:	f3bf 8f6f 	isb	sy
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	b662      	cpsie	i
 800d8b0:	623b      	str	r3, [r7, #32]
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00c      	beq.n	800d8d8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c2:	b672      	cpsid	i
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	b662      	cpsie	i
 800d8d2:	61fb      	str	r3, [r7, #28]
}
 800d8d4:	bf00      	nop
 800d8d6:	e7fe      	b.n	800d8d6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8d8:	f001 f980 	bl	800ebdc <xTaskGetSchedulerState>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d102      	bne.n	800d8e8 <xQueueSemaphoreTake+0x68>
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <xQueueSemaphoreTake+0x6c>
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e000      	b.n	800d8ee <xQueueSemaphoreTake+0x6e>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10c      	bne.n	800d90c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f6:	b672      	cpsid	i
 800d8f8:	f383 8811 	msr	BASEPRI, r3
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	f3bf 8f4f 	dsb	sy
 800d904:	b662      	cpsie	i
 800d906:	61bb      	str	r3, [r7, #24]
}
 800d908:	bf00      	nop
 800d90a:	e7fe      	b.n	800d90a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d90c:	f7ff f9a6 	bl	800cc5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d914:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d024      	beq.n	800d966 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91e:	1e5a      	subs	r2, r3, #1
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d104      	bne.n	800d936 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d92c:	f001 fad4 	bl	800eed8 <pvTaskIncrementMutexHeldCount>
 800d930:	4602      	mov	r2, r0
 800d932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d934:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00f      	beq.n	800d95e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d940:	3310      	adds	r3, #16
 800d942:	4618      	mov	r0, r3
 800d944:	f000 ff84 	bl	800e850 <xTaskRemoveFromEventList>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d007      	beq.n	800d95e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d94e:	4b55      	ldr	r3, [pc, #340]	; (800daa4 <xQueueSemaphoreTake+0x224>)
 800d950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d95e:	f7ff f9b1 	bl	800ccc4 <vPortExitCritical>
				return pdPASS;
 800d962:	2301      	movs	r3, #1
 800d964:	e099      	b.n	800da9a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d113      	bne.n	800d994 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00c      	beq.n	800d98c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	b672      	cpsid	i
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	b662      	cpsie	i
 800d986:	617b      	str	r3, [r7, #20]
}
 800d988:	bf00      	nop
 800d98a:	e7fe      	b.n	800d98a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d98c:	f7ff f99a 	bl	800ccc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d990:	2300      	movs	r3, #0
 800d992:	e082      	b.n	800da9a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d996:	2b00      	cmp	r3, #0
 800d998:	d106      	bne.n	800d9a8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d99a:	f107 030c 	add.w	r3, r7, #12
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f000 ffbc 	bl	800e91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9a8:	f7ff f98c 	bl	800ccc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9ac:	f000 fd22 	bl	800e3f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9b0:	f7ff f954 	bl	800cc5c <vPortEnterCritical>
 800d9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9ba:	b25b      	sxtb	r3, r3
 800d9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c0:	d103      	bne.n	800d9ca <xQueueSemaphoreTake+0x14a>
 800d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9d0:	b25b      	sxtb	r3, r3
 800d9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d6:	d103      	bne.n	800d9e0 <xQueueSemaphoreTake+0x160>
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9e0:	f7ff f970 	bl	800ccc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9e4:	463a      	mov	r2, r7
 800d9e6:	f107 030c 	add.w	r3, r7, #12
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f000 ffab 	bl	800e948 <xTaskCheckForTimeOut>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d132      	bne.n	800da5e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9fa:	f000 f9fa 	bl	800ddf2 <prvIsQueueEmpty>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d026      	beq.n	800da52 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d109      	bne.n	800da20 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800da0c:	f7ff f926 	bl	800cc5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	4618      	mov	r0, r3
 800da16:	f001 f8ff 	bl	800ec18 <xTaskPriorityInherit>
 800da1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800da1c:	f7ff f952 	bl	800ccc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da22:	3324      	adds	r3, #36	; 0x24
 800da24:	683a      	ldr	r2, [r7, #0]
 800da26:	4611      	mov	r1, r2
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 febd 	bl	800e7a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da30:	f000 f98d 	bl	800dd4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da34:	f000 fcec 	bl	800e410 <xTaskResumeAll>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f47f af66 	bne.w	800d90c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800da40:	4b18      	ldr	r3, [pc, #96]	; (800daa4 <xQueueSemaphoreTake+0x224>)
 800da42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	e75c      	b.n	800d90c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da54:	f000 f97b 	bl	800dd4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da58:	f000 fcda 	bl	800e410 <xTaskResumeAll>
 800da5c:	e756      	b.n	800d90c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da60:	f000 f975 	bl	800dd4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da64:	f000 fcd4 	bl	800e410 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da6a:	f000 f9c2 	bl	800ddf2 <prvIsQueueEmpty>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	f43f af4b 	beq.w	800d90c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00d      	beq.n	800da98 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800da7c:	f7ff f8ee 	bl	800cc5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da82:	f000 f8bc 	bl	800dbfe <prvGetDisinheritPriorityAfterTimeout>
 800da86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da8e:	4618      	mov	r0, r3
 800da90:	f001 f99c 	bl	800edcc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da94:	f7ff f916 	bl	800ccc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3738      	adds	r7, #56	; 0x38
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	e000ed04 	.word	0xe000ed04

0800daa8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b08e      	sub	sp, #56	; 0x38
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10c      	bne.n	800dad8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800dabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac2:	b672      	cpsid	i
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	b662      	cpsie	i
 800dad2:	623b      	str	r3, [r7, #32]
}
 800dad4:	bf00      	nop
 800dad6:	e7fe      	b.n	800dad6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d103      	bne.n	800dae6 <xQueueReceiveFromISR+0x3e>
 800dade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d101      	bne.n	800daea <xQueueReceiveFromISR+0x42>
 800dae6:	2301      	movs	r3, #1
 800dae8:	e000      	b.n	800daec <xQueueReceiveFromISR+0x44>
 800daea:	2300      	movs	r3, #0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d10c      	bne.n	800db0a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800daf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf4:	b672      	cpsid	i
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	b662      	cpsie	i
 800db04:	61fb      	str	r3, [r7, #28]
}
 800db06:	bf00      	nop
 800db08:	e7fe      	b.n	800db08 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db0a:	f7ff f98f 	bl	800ce2c <vPortValidateInterruptPriority>
	__asm volatile
 800db0e:	f3ef 8211 	mrs	r2, BASEPRI
 800db12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db16:	b672      	cpsid	i
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	b662      	cpsie	i
 800db26:	61ba      	str	r2, [r7, #24]
 800db28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db36:	2b00      	cmp	r3, #0
 800db38:	d02f      	beq.n	800db9a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db44:	68b9      	ldr	r1, [r7, #8]
 800db46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db48:	f000 f8db 	bl	800dd02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	1e5a      	subs	r2, r3, #1
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5c:	d112      	bne.n	800db84 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d016      	beq.n	800db94 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	3310      	adds	r3, #16
 800db6a:	4618      	mov	r0, r3
 800db6c:	f000 fe70 	bl	800e850 <xTaskRemoveFromEventList>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00e      	beq.n	800db94 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00b      	beq.n	800db94 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	601a      	str	r2, [r3, #0]
 800db82:	e007      	b.n	800db94 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db88:	3301      	adds	r3, #1
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	b25a      	sxtb	r2, r3
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800db94:	2301      	movs	r3, #1
 800db96:	637b      	str	r3, [r7, #52]	; 0x34
 800db98:	e001      	b.n	800db9e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800db9a:	2300      	movs	r3, #0
 800db9c:	637b      	str	r3, [r7, #52]	; 0x34
 800db9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	f383 8811 	msr	BASEPRI, r3
}
 800dba8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3738      	adds	r7, #56	; 0x38
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d10c      	bne.n	800dbe0 <vQueueDelete+0x2c>
	__asm volatile
 800dbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbca:	b672      	cpsid	i
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	b662      	cpsie	i
 800dbda:	60bb      	str	r3, [r7, #8]
}
 800dbdc:	bf00      	nop
 800dbde:	e7fe      	b.n	800dbde <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f000 f95f 	bl	800dea4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d102      	bne.n	800dbf6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7fe fd57 	bl	800c6a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dbf6:	bf00      	nop
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dbfe:	b480      	push	{r7}
 800dc00:	b085      	sub	sp, #20
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d006      	beq.n	800dc1c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	e001      	b.n	800dc20 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dc20:	68fb      	ldr	r3, [r7, #12]
	}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b086      	sub	sp, #24
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	60f8      	str	r0, [r7, #12]
 800dc36:	60b9      	str	r1, [r7, #8]
 800dc38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10d      	bne.n	800dc68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d14d      	bne.n	800dcf0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f001 f845 	bl	800ece8 <xTaskPriorityDisinherit>
 800dc5e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2200      	movs	r2, #0
 800dc64:	609a      	str	r2, [r3, #8]
 800dc66:	e043      	b.n	800dcf0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d119      	bne.n	800dca2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6858      	ldr	r0, [r3, #4]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc76:	461a      	mov	r2, r3
 800dc78:	68b9      	ldr	r1, [r7, #8]
 800dc7a:	f010 f919 	bl	801deb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	685a      	ldr	r2, [r3, #4]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc86:	441a      	add	r2, r3
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	685a      	ldr	r2, [r3, #4]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d32b      	bcc.n	800dcf0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	605a      	str	r2, [r3, #4]
 800dca0:	e026      	b.n	800dcf0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	68d8      	ldr	r0, [r3, #12]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcaa:	461a      	mov	r2, r3
 800dcac:	68b9      	ldr	r1, [r7, #8]
 800dcae:	f010 f8ff 	bl	801deb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	68da      	ldr	r2, [r3, #12]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcba:	425b      	negs	r3, r3
 800dcbc:	441a      	add	r2, r3
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	68da      	ldr	r2, [r3, #12]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d207      	bcs.n	800dcde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	689a      	ldr	r2, [r3, #8]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd6:	425b      	negs	r3, r3
 800dcd8:	441a      	add	r2, r3
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d105      	bne.n	800dcf0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d002      	beq.n	800dcf0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	3b01      	subs	r3, #1
 800dcee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	1c5a      	adds	r2, r3, #1
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dcf8:	697b      	ldr	r3, [r7, #20]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d018      	beq.n	800dd46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	68da      	ldr	r2, [r3, #12]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1c:	441a      	add	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	68da      	ldr	r2, [r3, #12]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d303      	bcc.n	800dd36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68d9      	ldr	r1, [r3, #12]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3e:	461a      	mov	r2, r3
 800dd40:	6838      	ldr	r0, [r7, #0]
 800dd42:	f010 f8b5 	bl	801deb0 <memcpy>
	}
}
 800dd46:	bf00      	nop
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b084      	sub	sp, #16
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd56:	f7fe ff81 	bl	800cc5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd62:	e011      	b.n	800dd88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d012      	beq.n	800dd92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3324      	adds	r3, #36	; 0x24
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 fd6d 	bl	800e850 <xTaskRemoveFromEventList>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd7c:	f000 fe4a 	bl	800ea14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd80:	7bfb      	ldrb	r3, [r7, #15]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	dce9      	bgt.n	800dd64 <prvUnlockQueue+0x16>
 800dd90:	e000      	b.n	800dd94 <prvUnlockQueue+0x46>
					break;
 800dd92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	22ff      	movs	r2, #255	; 0xff
 800dd98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dd9c:	f7fe ff92 	bl	800ccc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dda0:	f7fe ff5c 	bl	800cc5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddaa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddac:	e011      	b.n	800ddd2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d012      	beq.n	800dddc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	3310      	adds	r3, #16
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 fd48 	bl	800e850 <xTaskRemoveFromEventList>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ddc6:	f000 fe25 	bl	800ea14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ddca:	7bbb      	ldrb	r3, [r7, #14]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	dce9      	bgt.n	800ddae <prvUnlockQueue+0x60>
 800ddda:	e000      	b.n	800ddde <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dddc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	22ff      	movs	r2, #255	; 0xff
 800dde2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dde6:	f7fe ff6d 	bl	800ccc4 <vPortExitCritical>
}
 800ddea:	bf00      	nop
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b084      	sub	sp, #16
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddfa:	f7fe ff2f 	bl	800cc5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de02:	2b00      	cmp	r3, #0
 800de04:	d102      	bne.n	800de0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de06:	2301      	movs	r3, #1
 800de08:	60fb      	str	r3, [r7, #12]
 800de0a:	e001      	b.n	800de10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de0c:	2300      	movs	r3, #0
 800de0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de10:	f7fe ff58 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800de14:	68fb      	ldr	r3, [r7, #12]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b084      	sub	sp, #16
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de26:	f7fe ff19 	bl	800cc5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de32:	429a      	cmp	r2, r3
 800de34:	d102      	bne.n	800de3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de36:	2301      	movs	r3, #1
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	e001      	b.n	800de40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de3c:	2300      	movs	r3, #0
 800de3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de40:	f7fe ff40 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800de44:	68fb      	ldr	r3, [r7, #12]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
	...

0800de50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de5a:	2300      	movs	r3, #0
 800de5c:	60fb      	str	r3, [r7, #12]
 800de5e:	e014      	b.n	800de8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de60:	4a0f      	ldr	r2, [pc, #60]	; (800dea0 <vQueueAddToRegistry+0x50>)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10b      	bne.n	800de84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de6c:	490c      	ldr	r1, [pc, #48]	; (800dea0 <vQueueAddToRegistry+0x50>)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de76:	4a0a      	ldr	r2, [pc, #40]	; (800dea0 <vQueueAddToRegistry+0x50>)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	4413      	add	r3, r2
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de82:	e006      	b.n	800de92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	3301      	adds	r3, #1
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b07      	cmp	r3, #7
 800de8e:	d9e7      	bls.n	800de60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de90:	bf00      	nop
 800de92:	bf00      	nop
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	2000e57c 	.word	0x2000e57c

0800dea4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800deac:	2300      	movs	r3, #0
 800deae:	60fb      	str	r3, [r7, #12]
 800deb0:	e016      	b.n	800dee0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800deb2:	4a10      	ldr	r2, [pc, #64]	; (800def4 <vQueueUnregisterQueue+0x50>)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	00db      	lsls	r3, r3, #3
 800deb8:	4413      	add	r3, r2
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d10b      	bne.n	800deda <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dec2:	4a0c      	ldr	r2, [pc, #48]	; (800def4 <vQueueUnregisterQueue+0x50>)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2100      	movs	r1, #0
 800dec8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800decc:	4a09      	ldr	r2, [pc, #36]	; (800def4 <vQueueUnregisterQueue+0x50>)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	4413      	add	r3, r2
 800ded4:	2200      	movs	r2, #0
 800ded6:	605a      	str	r2, [r3, #4]
				break;
 800ded8:	e006      	b.n	800dee8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	3301      	adds	r3, #1
 800dede:	60fb      	str	r3, [r7, #12]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b07      	cmp	r3, #7
 800dee4:	d9e5      	bls.n	800deb2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dee6:	bf00      	nop
 800dee8:	bf00      	nop
 800deea:	3714      	adds	r7, #20
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	2000e57c 	.word	0x2000e57c

0800def8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df08:	f7fe fea8 	bl	800cc5c <vPortEnterCritical>
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df12:	b25b      	sxtb	r3, r3
 800df14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df18:	d103      	bne.n	800df22 <vQueueWaitForMessageRestricted+0x2a>
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df28:	b25b      	sxtb	r3, r3
 800df2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2e:	d103      	bne.n	800df38 <vQueueWaitForMessageRestricted+0x40>
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	2200      	movs	r2, #0
 800df34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df38:	f7fe fec4 	bl	800ccc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df40:	2b00      	cmp	r3, #0
 800df42:	d106      	bne.n	800df52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	3324      	adds	r3, #36	; 0x24
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	68b9      	ldr	r1, [r7, #8]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f000 fc51 	bl	800e7f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df52:	6978      	ldr	r0, [r7, #20]
 800df54:	f7ff fefb 	bl	800dd4e <prvUnlockQueue>
	}
 800df58:	bf00      	nop
 800df5a:	3718      	adds	r7, #24
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df60:	b580      	push	{r7, lr}
 800df62:	b08e      	sub	sp, #56	; 0x38
 800df64:	af04      	add	r7, sp, #16
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
 800df6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10c      	bne.n	800df8e <xTaskCreateStatic+0x2e>
	__asm volatile
 800df74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df78:	b672      	cpsid	i
 800df7a:	f383 8811 	msr	BASEPRI, r3
 800df7e:	f3bf 8f6f 	isb	sy
 800df82:	f3bf 8f4f 	dsb	sy
 800df86:	b662      	cpsie	i
 800df88:	623b      	str	r3, [r7, #32]
}
 800df8a:	bf00      	nop
 800df8c:	e7fe      	b.n	800df8c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800df8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10c      	bne.n	800dfae <xTaskCreateStatic+0x4e>
	__asm volatile
 800df94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df98:	b672      	cpsid	i
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	b662      	cpsie	i
 800dfa8:	61fb      	str	r3, [r7, #28]
}
 800dfaa:	bf00      	nop
 800dfac:	e7fe      	b.n	800dfac <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dfae:	235c      	movs	r3, #92	; 0x5c
 800dfb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	2b5c      	cmp	r3, #92	; 0x5c
 800dfb6:	d00c      	beq.n	800dfd2 <xTaskCreateStatic+0x72>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbc:	b672      	cpsid	i
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	b662      	cpsie	i
 800dfcc:	61bb      	str	r3, [r7, #24]
}
 800dfce:	bf00      	nop
 800dfd0:	e7fe      	b.n	800dfd0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dfd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d01e      	beq.n	800e018 <xTaskCreateStatic+0xb8>
 800dfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d01b      	beq.n	800e018 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfe8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfec:	2202      	movs	r2, #2
 800dfee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dff2:	2300      	movs	r3, #0
 800dff4:	9303      	str	r3, [sp, #12]
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff8:	9302      	str	r3, [sp, #8]
 800dffa:	f107 0314 	add.w	r3, r7, #20
 800dffe:	9301      	str	r3, [sp, #4]
 800e000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	68b9      	ldr	r1, [r7, #8]
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f000 f850 	bl	800e0b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e012:	f000 f8df 	bl	800e1d4 <prvAddNewTaskToReadyList>
 800e016:	e001      	b.n	800e01c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800e018:	2300      	movs	r3, #0
 800e01a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e01c:	697b      	ldr	r3, [r7, #20]
	}
 800e01e:	4618      	mov	r0, r3
 800e020:	3728      	adds	r7, #40	; 0x28
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e026:	b580      	push	{r7, lr}
 800e028:	b08c      	sub	sp, #48	; 0x30
 800e02a:	af04      	add	r7, sp, #16
 800e02c:	60f8      	str	r0, [r7, #12]
 800e02e:	60b9      	str	r1, [r7, #8]
 800e030:	603b      	str	r3, [r7, #0]
 800e032:	4613      	mov	r3, r2
 800e034:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e036:	88fb      	ldrh	r3, [r7, #6]
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe fa68 	bl	800c510 <pvPortMalloc>
 800e040:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00e      	beq.n	800e066 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e048:	205c      	movs	r0, #92	; 0x5c
 800e04a:	f7fe fa61 	bl	800c510 <pvPortMalloc>
 800e04e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d003      	beq.n	800e05e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	631a      	str	r2, [r3, #48]	; 0x30
 800e05c:	e005      	b.n	800e06a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e05e:	6978      	ldr	r0, [r7, #20]
 800e060:	f7fe fb20 	bl	800c6a4 <vPortFree>
 800e064:	e001      	b.n	800e06a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e066:	2300      	movs	r3, #0
 800e068:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d017      	beq.n	800e0a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	2200      	movs	r2, #0
 800e074:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e078:	88fa      	ldrh	r2, [r7, #6]
 800e07a:	2300      	movs	r3, #0
 800e07c:	9303      	str	r3, [sp, #12]
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	9302      	str	r3, [sp, #8]
 800e082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e084:	9301      	str	r3, [sp, #4]
 800e086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	68b9      	ldr	r1, [r7, #8]
 800e08e:	68f8      	ldr	r0, [r7, #12]
 800e090:	f000 f80e 	bl	800e0b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e094:	69f8      	ldr	r0, [r7, #28]
 800e096:	f000 f89d 	bl	800e1d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e09a:	2301      	movs	r3, #1
 800e09c:	61bb      	str	r3, [r7, #24]
 800e09e:	e002      	b.n	800e0a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0a6:	69bb      	ldr	r3, [r7, #24]
	}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3720      	adds	r7, #32
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
 800e0bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	21a5      	movs	r1, #165	; 0xa5
 800e0ca:	f00f feff 	bl	801decc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e0d8:	440b      	add	r3, r1
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	f023 0307 	bic.w	r3, r3, #7
 800e0e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	f003 0307 	and.w	r3, r3, #7
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00c      	beq.n	800e10c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f6:	b672      	cpsid	i
 800e0f8:	f383 8811 	msr	BASEPRI, r3
 800e0fc:	f3bf 8f6f 	isb	sy
 800e100:	f3bf 8f4f 	dsb	sy
 800e104:	b662      	cpsie	i
 800e106:	617b      	str	r3, [r7, #20]
}
 800e108:	bf00      	nop
 800e10a:	e7fe      	b.n	800e10a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d01f      	beq.n	800e152 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e112:	2300      	movs	r3, #0
 800e114:	61fb      	str	r3, [r7, #28]
 800e116:	e012      	b.n	800e13e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	4413      	add	r3, r2
 800e11e:	7819      	ldrb	r1, [r3, #0]
 800e120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	4413      	add	r3, r2
 800e126:	3334      	adds	r3, #52	; 0x34
 800e128:	460a      	mov	r2, r1
 800e12a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	4413      	add	r3, r2
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d006      	beq.n	800e146 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	3301      	adds	r3, #1
 800e13c:	61fb      	str	r3, [r7, #28]
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	2b0f      	cmp	r3, #15
 800e142:	d9e9      	bls.n	800e118 <prvInitialiseNewTask+0x68>
 800e144:	e000      	b.n	800e148 <prvInitialiseNewTask+0x98>
			{
				break;
 800e146:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	2200      	movs	r2, #0
 800e14c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e150:	e003      	b.n	800e15a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e154:	2200      	movs	r2, #0
 800e156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15c:	2b37      	cmp	r3, #55	; 0x37
 800e15e:	d901      	bls.n	800e164 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e160:	2337      	movs	r3, #55	; 0x37
 800e162:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e168:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e16e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e172:	2200      	movs	r2, #0
 800e174:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	3304      	adds	r3, #4
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fe fbcc 	bl	800c918 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	3318      	adds	r3, #24
 800e184:	4618      	mov	r0, r3
 800e186:	f7fe fbc7 	bl	800c918 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e18e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e192:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e198:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e19e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1ae:	683a      	ldr	r2, [r7, #0]
 800e1b0:	68f9      	ldr	r1, [r7, #12]
 800e1b2:	69b8      	ldr	r0, [r7, #24]
 800e1b4:	f7fe fc44 	bl	800ca40 <pxPortInitialiseStack>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1ca:	bf00      	nop
 800e1cc:	3720      	adds	r7, #32
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
	...

0800e1d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1dc:	f7fe fd3e 	bl	800cc5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1e0:	4b2d      	ldr	r3, [pc, #180]	; (800e298 <prvAddNewTaskToReadyList+0xc4>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	4a2c      	ldr	r2, [pc, #176]	; (800e298 <prvAddNewTaskToReadyList+0xc4>)
 800e1e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1ea:	4b2c      	ldr	r3, [pc, #176]	; (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d109      	bne.n	800e206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1f2:	4a2a      	ldr	r2, [pc, #168]	; (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1f8:	4b27      	ldr	r3, [pc, #156]	; (800e298 <prvAddNewTaskToReadyList+0xc4>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d110      	bne.n	800e222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e200:	f000 fc2c 	bl	800ea5c <prvInitialiseTaskLists>
 800e204:	e00d      	b.n	800e222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e206:	4b26      	ldr	r3, [pc, #152]	; (800e2a0 <prvAddNewTaskToReadyList+0xcc>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d109      	bne.n	800e222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e20e:	4b23      	ldr	r3, [pc, #140]	; (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e218:	429a      	cmp	r2, r3
 800e21a:	d802      	bhi.n	800e222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e21c:	4a1f      	ldr	r2, [pc, #124]	; (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e222:	4b20      	ldr	r3, [pc, #128]	; (800e2a4 <prvAddNewTaskToReadyList+0xd0>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	3301      	adds	r3, #1
 800e228:	4a1e      	ldr	r2, [pc, #120]	; (800e2a4 <prvAddNewTaskToReadyList+0xd0>)
 800e22a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e22c:	4b1d      	ldr	r3, [pc, #116]	; (800e2a4 <prvAddNewTaskToReadyList+0xd0>)
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e238:	4b1b      	ldr	r3, [pc, #108]	; (800e2a8 <prvAddNewTaskToReadyList+0xd4>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d903      	bls.n	800e248 <prvAddNewTaskToReadyList+0x74>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e244:	4a18      	ldr	r2, [pc, #96]	; (800e2a8 <prvAddNewTaskToReadyList+0xd4>)
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24c:	4613      	mov	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4a15      	ldr	r2, [pc, #84]	; (800e2ac <prvAddNewTaskToReadyList+0xd8>)
 800e256:	441a      	add	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	3304      	adds	r3, #4
 800e25c:	4619      	mov	r1, r3
 800e25e:	4610      	mov	r0, r2
 800e260:	f7fe fb67 	bl	800c932 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e264:	f7fe fd2e 	bl	800ccc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e268:	4b0d      	ldr	r3, [pc, #52]	; (800e2a0 <prvAddNewTaskToReadyList+0xcc>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00e      	beq.n	800e28e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e270:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d207      	bcs.n	800e28e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e27e:	4b0c      	ldr	r3, [pc, #48]	; (800e2b0 <prvAddNewTaskToReadyList+0xdc>)
 800e280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e284:	601a      	str	r2, [r3, #0]
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e28e:	bf00      	nop
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	2000de0c 	.word	0x2000de0c
 800e29c:	2000d938 	.word	0x2000d938
 800e2a0:	2000de18 	.word	0x2000de18
 800e2a4:	2000de28 	.word	0x2000de28
 800e2a8:	2000de14 	.word	0x2000de14
 800e2ac:	2000d93c 	.word	0x2000d93c
 800e2b0:	e000ed04 	.word	0xe000ed04

0800e2b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d019      	beq.n	800e2fa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2c6:	4b14      	ldr	r3, [pc, #80]	; (800e318 <vTaskDelay+0x64>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00c      	beq.n	800e2e8 <vTaskDelay+0x34>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d2:	b672      	cpsid	i
 800e2d4:	f383 8811 	msr	BASEPRI, r3
 800e2d8:	f3bf 8f6f 	isb	sy
 800e2dc:	f3bf 8f4f 	dsb	sy
 800e2e0:	b662      	cpsie	i
 800e2e2:	60bb      	str	r3, [r7, #8]
}
 800e2e4:	bf00      	nop
 800e2e6:	e7fe      	b.n	800e2e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e2e8:	f000 f884 	bl	800e3f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fe06 	bl	800ef00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2f4:	f000 f88c 	bl	800e410 <xTaskResumeAll>
 800e2f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d107      	bne.n	800e310 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800e300:	4b06      	ldr	r3, [pc, #24]	; (800e31c <vTaskDelay+0x68>)
 800e302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e306:	601a      	str	r2, [r3, #0]
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e310:	bf00      	nop
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	2000de34 	.word	0x2000de34
 800e31c:	e000ed04 	.word	0xe000ed04

0800e320 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08a      	sub	sp, #40	; 0x28
 800e324:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e326:	2300      	movs	r3, #0
 800e328:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e32e:	463a      	mov	r2, r7
 800e330:	1d39      	adds	r1, r7, #4
 800e332:	f107 0308 	add.w	r3, r7, #8
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe f8b6 	bl	800c4a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	9202      	str	r2, [sp, #8]
 800e344:	9301      	str	r3, [sp, #4]
 800e346:	2300      	movs	r3, #0
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	2300      	movs	r3, #0
 800e34c:	460a      	mov	r2, r1
 800e34e:	4923      	ldr	r1, [pc, #140]	; (800e3dc <vTaskStartScheduler+0xbc>)
 800e350:	4823      	ldr	r0, [pc, #140]	; (800e3e0 <vTaskStartScheduler+0xc0>)
 800e352:	f7ff fe05 	bl	800df60 <xTaskCreateStatic>
 800e356:	4603      	mov	r3, r0
 800e358:	4a22      	ldr	r2, [pc, #136]	; (800e3e4 <vTaskStartScheduler+0xc4>)
 800e35a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e35c:	4b21      	ldr	r3, [pc, #132]	; (800e3e4 <vTaskStartScheduler+0xc4>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d002      	beq.n	800e36a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e364:	2301      	movs	r3, #1
 800e366:	617b      	str	r3, [r7, #20]
 800e368:	e001      	b.n	800e36e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e36a:	2300      	movs	r3, #0
 800e36c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d102      	bne.n	800e37a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e374:	f000 fe18 	bl	800efa8 <xTimerCreateTimerTask>
 800e378:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d118      	bne.n	800e3b2 <vTaskStartScheduler+0x92>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	b672      	cpsid	i
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	b662      	cpsie	i
 800e394:	613b      	str	r3, [r7, #16]
}
 800e396:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e398:	4b13      	ldr	r3, [pc, #76]	; (800e3e8 <vTaskStartScheduler+0xc8>)
 800e39a:	f04f 32ff 	mov.w	r2, #4294967295
 800e39e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e3a0:	4b12      	ldr	r3, [pc, #72]	; (800e3ec <vTaskStartScheduler+0xcc>)
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e3a6:	4b12      	ldr	r3, [pc, #72]	; (800e3f0 <vTaskStartScheduler+0xd0>)
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e3ac:	f7fe fbd8 	bl	800cb60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3b0:	e010      	b.n	800e3d4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b8:	d10c      	bne.n	800e3d4 <vTaskStartScheduler+0xb4>
	__asm volatile
 800e3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3be:	b672      	cpsid	i
 800e3c0:	f383 8811 	msr	BASEPRI, r3
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	b662      	cpsie	i
 800e3ce:	60fb      	str	r3, [r7, #12]
}
 800e3d0:	bf00      	nop
 800e3d2:	e7fe      	b.n	800e3d2 <vTaskStartScheduler+0xb2>
}
 800e3d4:	bf00      	nop
 800e3d6:	3718      	adds	r7, #24
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	0801f950 	.word	0x0801f950
 800e3e0:	0800ea2d 	.word	0x0800ea2d
 800e3e4:	2000de30 	.word	0x2000de30
 800e3e8:	2000de2c 	.word	0x2000de2c
 800e3ec:	2000de18 	.word	0x2000de18
 800e3f0:	2000de10 	.word	0x2000de10

0800e3f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e3f8:	4b04      	ldr	r3, [pc, #16]	; (800e40c <vTaskSuspendAll+0x18>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	4a03      	ldr	r2, [pc, #12]	; (800e40c <vTaskSuspendAll+0x18>)
 800e400:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e402:	bf00      	nop
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr
 800e40c:	2000de34 	.word	0x2000de34

0800e410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e416:	2300      	movs	r3, #0
 800e418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e41a:	2300      	movs	r3, #0
 800e41c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e41e:	4b43      	ldr	r3, [pc, #268]	; (800e52c <xTaskResumeAll+0x11c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d10c      	bne.n	800e440 <xTaskResumeAll+0x30>
	__asm volatile
 800e426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42a:	b672      	cpsid	i
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	b662      	cpsie	i
 800e43a:	603b      	str	r3, [r7, #0]
}
 800e43c:	bf00      	nop
 800e43e:	e7fe      	b.n	800e43e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e440:	f7fe fc0c 	bl	800cc5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e444:	4b39      	ldr	r3, [pc, #228]	; (800e52c <xTaskResumeAll+0x11c>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	3b01      	subs	r3, #1
 800e44a:	4a38      	ldr	r2, [pc, #224]	; (800e52c <xTaskResumeAll+0x11c>)
 800e44c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e44e:	4b37      	ldr	r3, [pc, #220]	; (800e52c <xTaskResumeAll+0x11c>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d162      	bne.n	800e51c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e456:	4b36      	ldr	r3, [pc, #216]	; (800e530 <xTaskResumeAll+0x120>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d05e      	beq.n	800e51c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e45e:	e02f      	b.n	800e4c0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e460:	4b34      	ldr	r3, [pc, #208]	; (800e534 <xTaskResumeAll+0x124>)
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3318      	adds	r3, #24
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe fabd 	bl	800c9ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3304      	adds	r3, #4
 800e476:	4618      	mov	r0, r3
 800e478:	f7fe fab8 	bl	800c9ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e480:	4b2d      	ldr	r3, [pc, #180]	; (800e538 <xTaskResumeAll+0x128>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	429a      	cmp	r2, r3
 800e486:	d903      	bls.n	800e490 <xTaskResumeAll+0x80>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e48c:	4a2a      	ldr	r2, [pc, #168]	; (800e538 <xTaskResumeAll+0x128>)
 800e48e:	6013      	str	r3, [r2, #0]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e494:	4613      	mov	r3, r2
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	4413      	add	r3, r2
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	4a27      	ldr	r2, [pc, #156]	; (800e53c <xTaskResumeAll+0x12c>)
 800e49e:	441a      	add	r2, r3
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4610      	mov	r0, r2
 800e4a8:	f7fe fa43 	bl	800c932 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b0:	4b23      	ldr	r3, [pc, #140]	; (800e540 <xTaskResumeAll+0x130>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d302      	bcc.n	800e4c0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800e4ba:	4b22      	ldr	r3, [pc, #136]	; (800e544 <xTaskResumeAll+0x134>)
 800e4bc:	2201      	movs	r2, #1
 800e4be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4c0:	4b1c      	ldr	r3, [pc, #112]	; (800e534 <xTaskResumeAll+0x124>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1cb      	bne.n	800e460 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d001      	beq.n	800e4d2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4ce:	f000 fb65 	bl	800eb9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e4d2:	4b1d      	ldr	r3, [pc, #116]	; (800e548 <xTaskResumeAll+0x138>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d010      	beq.n	800e500 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4de:	f000 f847 	bl	800e570 <xTaskIncrementTick>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d002      	beq.n	800e4ee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800e4e8:	4b16      	ldr	r3, [pc, #88]	; (800e544 <xTaskResumeAll+0x134>)
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d1f1      	bne.n	800e4de <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800e4fa:	4b13      	ldr	r3, [pc, #76]	; (800e548 <xTaskResumeAll+0x138>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e500:	4b10      	ldr	r3, [pc, #64]	; (800e544 <xTaskResumeAll+0x134>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d009      	beq.n	800e51c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e508:	2301      	movs	r3, #1
 800e50a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e50c:	4b0f      	ldr	r3, [pc, #60]	; (800e54c <xTaskResumeAll+0x13c>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e51c:	f7fe fbd2 	bl	800ccc4 <vPortExitCritical>

	return xAlreadyYielded;
 800e520:	68bb      	ldr	r3, [r7, #8]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	2000de34 	.word	0x2000de34
 800e530:	2000de0c 	.word	0x2000de0c
 800e534:	2000ddcc 	.word	0x2000ddcc
 800e538:	2000de14 	.word	0x2000de14
 800e53c:	2000d93c 	.word	0x2000d93c
 800e540:	2000d938 	.word	0x2000d938
 800e544:	2000de20 	.word	0x2000de20
 800e548:	2000de1c 	.word	0x2000de1c
 800e54c:	e000ed04 	.word	0xe000ed04

0800e550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e556:	4b05      	ldr	r3, [pc, #20]	; (800e56c <xTaskGetTickCount+0x1c>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e55c:	687b      	ldr	r3, [r7, #4]
}
 800e55e:	4618      	mov	r0, r3
 800e560:	370c      	adds	r7, #12
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	2000de10 	.word	0x2000de10

0800e570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e576:	2300      	movs	r3, #0
 800e578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e57a:	4b50      	ldr	r3, [pc, #320]	; (800e6bc <xTaskIncrementTick+0x14c>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f040 808b 	bne.w	800e69a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e584:	4b4e      	ldr	r3, [pc, #312]	; (800e6c0 <xTaskIncrementTick+0x150>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3301      	adds	r3, #1
 800e58a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e58c:	4a4c      	ldr	r2, [pc, #304]	; (800e6c0 <xTaskIncrementTick+0x150>)
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d122      	bne.n	800e5de <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e598:	4b4a      	ldr	r3, [pc, #296]	; (800e6c4 <xTaskIncrementTick+0x154>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00c      	beq.n	800e5bc <xTaskIncrementTick+0x4c>
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a6:	b672      	cpsid	i
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	b662      	cpsie	i
 800e5b6:	603b      	str	r3, [r7, #0]
}
 800e5b8:	bf00      	nop
 800e5ba:	e7fe      	b.n	800e5ba <xTaskIncrementTick+0x4a>
 800e5bc:	4b41      	ldr	r3, [pc, #260]	; (800e6c4 <xTaskIncrementTick+0x154>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	60fb      	str	r3, [r7, #12]
 800e5c2:	4b41      	ldr	r3, [pc, #260]	; (800e6c8 <xTaskIncrementTick+0x158>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a3f      	ldr	r2, [pc, #252]	; (800e6c4 <xTaskIncrementTick+0x154>)
 800e5c8:	6013      	str	r3, [r2, #0]
 800e5ca:	4a3f      	ldr	r2, [pc, #252]	; (800e6c8 <xTaskIncrementTick+0x158>)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6013      	str	r3, [r2, #0]
 800e5d0:	4b3e      	ldr	r3, [pc, #248]	; (800e6cc <xTaskIncrementTick+0x15c>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	4a3d      	ldr	r2, [pc, #244]	; (800e6cc <xTaskIncrementTick+0x15c>)
 800e5d8:	6013      	str	r3, [r2, #0]
 800e5da:	f000 fadf 	bl	800eb9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5de:	4b3c      	ldr	r3, [pc, #240]	; (800e6d0 <xTaskIncrementTick+0x160>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d349      	bcc.n	800e67c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5e8:	4b36      	ldr	r3, [pc, #216]	; (800e6c4 <xTaskIncrementTick+0x154>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d104      	bne.n	800e5fc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f2:	4b37      	ldr	r3, [pc, #220]	; (800e6d0 <xTaskIncrementTick+0x160>)
 800e5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f8:	601a      	str	r2, [r3, #0]
					break;
 800e5fa:	e03f      	b.n	800e67c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5fc:	4b31      	ldr	r3, [pc, #196]	; (800e6c4 <xTaskIncrementTick+0x154>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e60c:	693a      	ldr	r2, [r7, #16]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	429a      	cmp	r2, r3
 800e612:	d203      	bcs.n	800e61c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e614:	4a2e      	ldr	r2, [pc, #184]	; (800e6d0 <xTaskIncrementTick+0x160>)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e61a:	e02f      	b.n	800e67c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	3304      	adds	r3, #4
 800e620:	4618      	mov	r0, r3
 800e622:	f7fe f9e3 	bl	800c9ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d004      	beq.n	800e638 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	3318      	adds	r3, #24
 800e632:	4618      	mov	r0, r3
 800e634:	f7fe f9da 	bl	800c9ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63c:	4b25      	ldr	r3, [pc, #148]	; (800e6d4 <xTaskIncrementTick+0x164>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	429a      	cmp	r2, r3
 800e642:	d903      	bls.n	800e64c <xTaskIncrementTick+0xdc>
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e648:	4a22      	ldr	r2, [pc, #136]	; (800e6d4 <xTaskIncrementTick+0x164>)
 800e64a:	6013      	str	r3, [r2, #0]
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e650:	4613      	mov	r3, r2
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	4413      	add	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4a1f      	ldr	r2, [pc, #124]	; (800e6d8 <xTaskIncrementTick+0x168>)
 800e65a:	441a      	add	r2, r3
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	3304      	adds	r3, #4
 800e660:	4619      	mov	r1, r3
 800e662:	4610      	mov	r0, r2
 800e664:	f7fe f965 	bl	800c932 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e66c:	4b1b      	ldr	r3, [pc, #108]	; (800e6dc <xTaskIncrementTick+0x16c>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e672:	429a      	cmp	r2, r3
 800e674:	d3b8      	bcc.n	800e5e8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e676:	2301      	movs	r3, #1
 800e678:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e67a:	e7b5      	b.n	800e5e8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e67c:	4b17      	ldr	r3, [pc, #92]	; (800e6dc <xTaskIncrementTick+0x16c>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e682:	4915      	ldr	r1, [pc, #84]	; (800e6d8 <xTaskIncrementTick+0x168>)
 800e684:	4613      	mov	r3, r2
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	4413      	add	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	440b      	add	r3, r1
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b01      	cmp	r3, #1
 800e692:	d907      	bls.n	800e6a4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800e694:	2301      	movs	r3, #1
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	e004      	b.n	800e6a4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e69a:	4b11      	ldr	r3, [pc, #68]	; (800e6e0 <xTaskIncrementTick+0x170>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	4a0f      	ldr	r2, [pc, #60]	; (800e6e0 <xTaskIncrementTick+0x170>)
 800e6a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e6a4:	4b0f      	ldr	r3, [pc, #60]	; (800e6e4 <xTaskIncrementTick+0x174>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d001      	beq.n	800e6b0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e6b0:	697b      	ldr	r3, [r7, #20]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3718      	adds	r7, #24
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	2000de34 	.word	0x2000de34
 800e6c0:	2000de10 	.word	0x2000de10
 800e6c4:	2000ddc4 	.word	0x2000ddc4
 800e6c8:	2000ddc8 	.word	0x2000ddc8
 800e6cc:	2000de24 	.word	0x2000de24
 800e6d0:	2000de2c 	.word	0x2000de2c
 800e6d4:	2000de14 	.word	0x2000de14
 800e6d8:	2000d93c 	.word	0x2000d93c
 800e6dc:	2000d938 	.word	0x2000d938
 800e6e0:	2000de1c 	.word	0x2000de1c
 800e6e4:	2000de20 	.word	0x2000de20

0800e6e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6ee:	4b29      	ldr	r3, [pc, #164]	; (800e794 <vTaskSwitchContext+0xac>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d003      	beq.n	800e6fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6f6:	4b28      	ldr	r3, [pc, #160]	; (800e798 <vTaskSwitchContext+0xb0>)
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6fc:	e043      	b.n	800e786 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800e6fe:	4b26      	ldr	r3, [pc, #152]	; (800e798 <vTaskSwitchContext+0xb0>)
 800e700:	2200      	movs	r2, #0
 800e702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e704:	4b25      	ldr	r3, [pc, #148]	; (800e79c <vTaskSwitchContext+0xb4>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	60fb      	str	r3, [r7, #12]
 800e70a:	e012      	b.n	800e732 <vTaskSwitchContext+0x4a>
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10c      	bne.n	800e72c <vTaskSwitchContext+0x44>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e716:	b672      	cpsid	i
 800e718:	f383 8811 	msr	BASEPRI, r3
 800e71c:	f3bf 8f6f 	isb	sy
 800e720:	f3bf 8f4f 	dsb	sy
 800e724:	b662      	cpsie	i
 800e726:	607b      	str	r3, [r7, #4]
}
 800e728:	bf00      	nop
 800e72a:	e7fe      	b.n	800e72a <vTaskSwitchContext+0x42>
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	3b01      	subs	r3, #1
 800e730:	60fb      	str	r3, [r7, #12]
 800e732:	491b      	ldr	r1, [pc, #108]	; (800e7a0 <vTaskSwitchContext+0xb8>)
 800e734:	68fa      	ldr	r2, [r7, #12]
 800e736:	4613      	mov	r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	4413      	add	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	440b      	add	r3, r1
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d0e2      	beq.n	800e70c <vTaskSwitchContext+0x24>
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	4613      	mov	r3, r2
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	4413      	add	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4a13      	ldr	r2, [pc, #76]	; (800e7a0 <vTaskSwitchContext+0xb8>)
 800e752:	4413      	add	r3, r2
 800e754:	60bb      	str	r3, [r7, #8]
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	605a      	str	r2, [r3, #4]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	3308      	adds	r3, #8
 800e768:	429a      	cmp	r2, r3
 800e76a:	d104      	bne.n	800e776 <vTaskSwitchContext+0x8e>
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	685a      	ldr	r2, [r3, #4]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	605a      	str	r2, [r3, #4]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	4a09      	ldr	r2, [pc, #36]	; (800e7a4 <vTaskSwitchContext+0xbc>)
 800e77e:	6013      	str	r3, [r2, #0]
 800e780:	4a06      	ldr	r2, [pc, #24]	; (800e79c <vTaskSwitchContext+0xb4>)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6013      	str	r3, [r2, #0]
}
 800e786:	bf00      	nop
 800e788:	3714      	adds	r7, #20
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	2000de34 	.word	0x2000de34
 800e798:	2000de20 	.word	0x2000de20
 800e79c:	2000de14 	.word	0x2000de14
 800e7a0:	2000d93c 	.word	0x2000d93c
 800e7a4:	2000d938 	.word	0x2000d938

0800e7a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10c      	bne.n	800e7d2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	b672      	cpsid	i
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	b662      	cpsie	i
 800e7cc:	60fb      	str	r3, [r7, #12]
}
 800e7ce:	bf00      	nop
 800e7d0:	e7fe      	b.n	800e7d0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7d2:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <vTaskPlaceOnEventList+0x48>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	3318      	adds	r3, #24
 800e7d8:	4619      	mov	r1, r3
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7fe f8cd 	bl	800c97a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	6838      	ldr	r0, [r7, #0]
 800e7e4:	f000 fb8c 	bl	800ef00 <prvAddCurrentTaskToDelayedList>
}
 800e7e8:	bf00      	nop
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	2000d938 	.word	0x2000d938

0800e7f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10c      	bne.n	800e820 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800e806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80a:	b672      	cpsid	i
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	b662      	cpsie	i
 800e81a:	617b      	str	r3, [r7, #20]
}
 800e81c:	bf00      	nop
 800e81e:	e7fe      	b.n	800e81e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e820:	4b0a      	ldr	r3, [pc, #40]	; (800e84c <vTaskPlaceOnEventListRestricted+0x58>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	3318      	adds	r3, #24
 800e826:	4619      	mov	r1, r3
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f7fe f882 	bl	800c932 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d002      	beq.n	800e83a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800e834:	f04f 33ff 	mov.w	r3, #4294967295
 800e838:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e83a:	6879      	ldr	r1, [r7, #4]
 800e83c:	68b8      	ldr	r0, [r7, #8]
 800e83e:	f000 fb5f 	bl	800ef00 <prvAddCurrentTaskToDelayedList>
	}
 800e842:	bf00      	nop
 800e844:	3718      	adds	r7, #24
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	2000d938 	.word	0x2000d938

0800e850 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10c      	bne.n	800e880 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86a:	b672      	cpsid	i
 800e86c:	f383 8811 	msr	BASEPRI, r3
 800e870:	f3bf 8f6f 	isb	sy
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	b662      	cpsie	i
 800e87a:	60fb      	str	r3, [r7, #12]
}
 800e87c:	bf00      	nop
 800e87e:	e7fe      	b.n	800e87e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	3318      	adds	r3, #24
 800e884:	4618      	mov	r0, r3
 800e886:	f7fe f8b1 	bl	800c9ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e88a:	4b1e      	ldr	r3, [pc, #120]	; (800e904 <xTaskRemoveFromEventList+0xb4>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d11d      	bne.n	800e8ce <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	3304      	adds	r3, #4
 800e896:	4618      	mov	r0, r3
 800e898:	f7fe f8a8 	bl	800c9ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8a0:	4b19      	ldr	r3, [pc, #100]	; (800e908 <xTaskRemoveFromEventList+0xb8>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d903      	bls.n	800e8b0 <xTaskRemoveFromEventList+0x60>
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ac:	4a16      	ldr	r2, [pc, #88]	; (800e908 <xTaskRemoveFromEventList+0xb8>)
 800e8ae:	6013      	str	r3, [r2, #0]
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	4413      	add	r3, r2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	4a13      	ldr	r2, [pc, #76]	; (800e90c <xTaskRemoveFromEventList+0xbc>)
 800e8be:	441a      	add	r2, r3
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	f7fe f833 	bl	800c932 <vListInsertEnd>
 800e8cc:	e005      	b.n	800e8da <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	3318      	adds	r3, #24
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	480e      	ldr	r0, [pc, #56]	; (800e910 <xTaskRemoveFromEventList+0xc0>)
 800e8d6:	f7fe f82c 	bl	800c932 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8de:	4b0d      	ldr	r3, [pc, #52]	; (800e914 <xTaskRemoveFromEventList+0xc4>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d905      	bls.n	800e8f4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e8ec:	4b0a      	ldr	r3, [pc, #40]	; (800e918 <xTaskRemoveFromEventList+0xc8>)
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	e001      	b.n	800e8f8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e8f8:	697b      	ldr	r3, [r7, #20]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3718      	adds	r7, #24
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	2000de34 	.word	0x2000de34
 800e908:	2000de14 	.word	0x2000de14
 800e90c:	2000d93c 	.word	0x2000d93c
 800e910:	2000ddcc 	.word	0x2000ddcc
 800e914:	2000d938 	.word	0x2000d938
 800e918:	2000de20 	.word	0x2000de20

0800e91c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e924:	4b06      	ldr	r3, [pc, #24]	; (800e940 <vTaskInternalSetTimeOutState+0x24>)
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e92c:	4b05      	ldr	r3, [pc, #20]	; (800e944 <vTaskInternalSetTimeOutState+0x28>)
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	605a      	str	r2, [r3, #4]
}
 800e934:	bf00      	nop
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr
 800e940:	2000de24 	.word	0x2000de24
 800e944:	2000de10 	.word	0x2000de10

0800e948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b088      	sub	sp, #32
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d10c      	bne.n	800e972 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95c:	b672      	cpsid	i
 800e95e:	f383 8811 	msr	BASEPRI, r3
 800e962:	f3bf 8f6f 	isb	sy
 800e966:	f3bf 8f4f 	dsb	sy
 800e96a:	b662      	cpsie	i
 800e96c:	613b      	str	r3, [r7, #16]
}
 800e96e:	bf00      	nop
 800e970:	e7fe      	b.n	800e970 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10c      	bne.n	800e992 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97c:	b672      	cpsid	i
 800e97e:	f383 8811 	msr	BASEPRI, r3
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	f3bf 8f4f 	dsb	sy
 800e98a:	b662      	cpsie	i
 800e98c:	60fb      	str	r3, [r7, #12]
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e992:	f7fe f963 	bl	800cc5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e996:	4b1d      	ldr	r3, [pc, #116]	; (800ea0c <xTaskCheckForTimeOut+0xc4>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	69ba      	ldr	r2, [r7, #24]
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ae:	d102      	bne.n	800e9b6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	61fb      	str	r3, [r7, #28]
 800e9b4:	e023      	b.n	800e9fe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	4b15      	ldr	r3, [pc, #84]	; (800ea10 <xTaskCheckForTimeOut+0xc8>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d007      	beq.n	800e9d2 <xTaskCheckForTimeOut+0x8a>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	69ba      	ldr	r2, [r7, #24]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d302      	bcc.n	800e9d2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	61fb      	str	r3, [r7, #28]
 800e9d0:	e015      	b.n	800e9fe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d20b      	bcs.n	800e9f4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	1ad2      	subs	r2, r2, r3
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f7ff ff97 	bl	800e91c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	61fb      	str	r3, [r7, #28]
 800e9f2:	e004      	b.n	800e9fe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e9fe:	f7fe f961 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800ea02:	69fb      	ldr	r3, [r7, #28]
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3720      	adds	r7, #32
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	2000de10 	.word	0x2000de10
 800ea10:	2000de24 	.word	0x2000de24

0800ea14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea14:	b480      	push	{r7}
 800ea16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea18:	4b03      	ldr	r3, [pc, #12]	; (800ea28 <vTaskMissedYield+0x14>)
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	601a      	str	r2, [r3, #0]
}
 800ea1e:	bf00      	nop
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr
 800ea28:	2000de20 	.word	0x2000de20

0800ea2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea34:	f000 f852 	bl	800eadc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea38:	4b06      	ldr	r3, [pc, #24]	; (800ea54 <prvIdleTask+0x28>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d9f9      	bls.n	800ea34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ea40:	4b05      	ldr	r3, [pc, #20]	; (800ea58 <prvIdleTask+0x2c>)
 800ea42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea46:	601a      	str	r2, [r3, #0]
 800ea48:	f3bf 8f4f 	dsb	sy
 800ea4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ea50:	e7f0      	b.n	800ea34 <prvIdleTask+0x8>
 800ea52:	bf00      	nop
 800ea54:	2000d93c 	.word	0x2000d93c
 800ea58:	e000ed04 	.word	0xe000ed04

0800ea5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea62:	2300      	movs	r3, #0
 800ea64:	607b      	str	r3, [r7, #4]
 800ea66:	e00c      	b.n	800ea82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	4413      	add	r3, r2
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	4a12      	ldr	r2, [pc, #72]	; (800eabc <prvInitialiseTaskLists+0x60>)
 800ea74:	4413      	add	r3, r2
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fd ff2e 	bl	800c8d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	607b      	str	r3, [r7, #4]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b37      	cmp	r3, #55	; 0x37
 800ea86:	d9ef      	bls.n	800ea68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea88:	480d      	ldr	r0, [pc, #52]	; (800eac0 <prvInitialiseTaskLists+0x64>)
 800ea8a:	f7fd ff25 	bl	800c8d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea8e:	480d      	ldr	r0, [pc, #52]	; (800eac4 <prvInitialiseTaskLists+0x68>)
 800ea90:	f7fd ff22 	bl	800c8d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea94:	480c      	ldr	r0, [pc, #48]	; (800eac8 <prvInitialiseTaskLists+0x6c>)
 800ea96:	f7fd ff1f 	bl	800c8d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea9a:	480c      	ldr	r0, [pc, #48]	; (800eacc <prvInitialiseTaskLists+0x70>)
 800ea9c:	f7fd ff1c 	bl	800c8d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eaa0:	480b      	ldr	r0, [pc, #44]	; (800ead0 <prvInitialiseTaskLists+0x74>)
 800eaa2:	f7fd ff19 	bl	800c8d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eaa6:	4b0b      	ldr	r3, [pc, #44]	; (800ead4 <prvInitialiseTaskLists+0x78>)
 800eaa8:	4a05      	ldr	r2, [pc, #20]	; (800eac0 <prvInitialiseTaskLists+0x64>)
 800eaaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eaac:	4b0a      	ldr	r3, [pc, #40]	; (800ead8 <prvInitialiseTaskLists+0x7c>)
 800eaae:	4a05      	ldr	r2, [pc, #20]	; (800eac4 <prvInitialiseTaskLists+0x68>)
 800eab0:	601a      	str	r2, [r3, #0]
}
 800eab2:	bf00      	nop
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	2000d93c 	.word	0x2000d93c
 800eac0:	2000dd9c 	.word	0x2000dd9c
 800eac4:	2000ddb0 	.word	0x2000ddb0
 800eac8:	2000ddcc 	.word	0x2000ddcc
 800eacc:	2000dde0 	.word	0x2000dde0
 800ead0:	2000ddf8 	.word	0x2000ddf8
 800ead4:	2000ddc4 	.word	0x2000ddc4
 800ead8:	2000ddc8 	.word	0x2000ddc8

0800eadc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eae2:	e019      	b.n	800eb18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eae4:	f7fe f8ba 	bl	800cc5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eae8:	4b10      	ldr	r3, [pc, #64]	; (800eb2c <prvCheckTasksWaitingTermination+0x50>)
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7fd ff79 	bl	800c9ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eafa:	4b0d      	ldr	r3, [pc, #52]	; (800eb30 <prvCheckTasksWaitingTermination+0x54>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	3b01      	subs	r3, #1
 800eb00:	4a0b      	ldr	r2, [pc, #44]	; (800eb30 <prvCheckTasksWaitingTermination+0x54>)
 800eb02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb04:	4b0b      	ldr	r3, [pc, #44]	; (800eb34 <prvCheckTasksWaitingTermination+0x58>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	4a0a      	ldr	r2, [pc, #40]	; (800eb34 <prvCheckTasksWaitingTermination+0x58>)
 800eb0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb0e:	f7fe f8d9 	bl	800ccc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 f810 	bl	800eb38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb18:	4b06      	ldr	r3, [pc, #24]	; (800eb34 <prvCheckTasksWaitingTermination+0x58>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d1e1      	bne.n	800eae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb20:	bf00      	nop
 800eb22:	bf00      	nop
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	2000dde0 	.word	0x2000dde0
 800eb30:	2000de0c 	.word	0x2000de0c
 800eb34:	2000ddf4 	.word	0x2000ddf4

0800eb38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d108      	bne.n	800eb5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fd fda8 	bl	800c6a4 <vPortFree>
				vPortFree( pxTCB );
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7fd fda5 	bl	800c6a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb5a:	e01a      	b.n	800eb92 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d103      	bne.n	800eb6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7fd fd9c 	bl	800c6a4 <vPortFree>
	}
 800eb6c:	e011      	b.n	800eb92 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	d00c      	beq.n	800eb92 <prvDeleteTCB+0x5a>
	__asm volatile
 800eb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7c:	b672      	cpsid	i
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	b662      	cpsie	i
 800eb8c:	60fb      	str	r3, [r7, #12]
}
 800eb8e:	bf00      	nop
 800eb90:	e7fe      	b.n	800eb90 <prvDeleteTCB+0x58>
	}
 800eb92:	bf00      	nop
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
	...

0800eb9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eba2:	4b0c      	ldr	r3, [pc, #48]	; (800ebd4 <prvResetNextTaskUnblockTime+0x38>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d104      	bne.n	800ebb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebac:	4b0a      	ldr	r3, [pc, #40]	; (800ebd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ebae:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebb4:	e008      	b.n	800ebc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebb6:	4b07      	ldr	r3, [pc, #28]	; (800ebd4 <prvResetNextTaskUnblockTime+0x38>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	4a04      	ldr	r2, [pc, #16]	; (800ebd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ebc6:	6013      	str	r3, [r2, #0]
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr
 800ebd4:	2000ddc4 	.word	0x2000ddc4
 800ebd8:	2000de2c 	.word	0x2000de2c

0800ebdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ebe2:	4b0b      	ldr	r3, [pc, #44]	; (800ec10 <xTaskGetSchedulerState+0x34>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d102      	bne.n	800ebf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ebea:	2301      	movs	r3, #1
 800ebec:	607b      	str	r3, [r7, #4]
 800ebee:	e008      	b.n	800ec02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebf0:	4b08      	ldr	r3, [pc, #32]	; (800ec14 <xTaskGetSchedulerState+0x38>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d102      	bne.n	800ebfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	607b      	str	r3, [r7, #4]
 800ebfc:	e001      	b.n	800ec02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec02:	687b      	ldr	r3, [r7, #4]
	}
 800ec04:	4618      	mov	r0, r3
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr
 800ec10:	2000de18 	.word	0x2000de18
 800ec14:	2000de34 	.word	0x2000de34

0800ec18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec24:	2300      	movs	r3, #0
 800ec26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d051      	beq.n	800ecd2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec32:	4b2a      	ldr	r3, [pc, #168]	; (800ecdc <xTaskPriorityInherit+0xc4>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d241      	bcs.n	800ecc0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	699b      	ldr	r3, [r3, #24]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	db06      	blt.n	800ec52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec44:	4b25      	ldr	r3, [pc, #148]	; (800ecdc <xTaskPriorityInherit+0xc4>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	6959      	ldr	r1, [r3, #20]
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4413      	add	r3, r2
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	4a1f      	ldr	r2, [pc, #124]	; (800ece0 <xTaskPriorityInherit+0xc8>)
 800ec64:	4413      	add	r3, r2
 800ec66:	4299      	cmp	r1, r3
 800ec68:	d122      	bne.n	800ecb0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fd febc 	bl	800c9ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec74:	4b19      	ldr	r3, [pc, #100]	; (800ecdc <xTaskPriorityInherit+0xc4>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec82:	4b18      	ldr	r3, [pc, #96]	; (800ece4 <xTaskPriorityInherit+0xcc>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d903      	bls.n	800ec92 <xTaskPriorityInherit+0x7a>
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec8e:	4a15      	ldr	r2, [pc, #84]	; (800ece4 <xTaskPriorityInherit+0xcc>)
 800ec90:	6013      	str	r3, [r2, #0]
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec96:	4613      	mov	r3, r2
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	4413      	add	r3, r2
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4a10      	ldr	r2, [pc, #64]	; (800ece0 <xTaskPriorityInherit+0xc8>)
 800eca0:	441a      	add	r2, r3
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	3304      	adds	r3, #4
 800eca6:	4619      	mov	r1, r3
 800eca8:	4610      	mov	r0, r2
 800ecaa:	f7fd fe42 	bl	800c932 <vListInsertEnd>
 800ecae:	e004      	b.n	800ecba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecb0:	4b0a      	ldr	r3, [pc, #40]	; (800ecdc <xTaskPriorityInherit+0xc4>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	60fb      	str	r3, [r7, #12]
 800ecbe:	e008      	b.n	800ecd2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecc4:	4b05      	ldr	r3, [pc, #20]	; (800ecdc <xTaskPriorityInherit+0xc4>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d201      	bcs.n	800ecd2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
	}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	2000d938 	.word	0x2000d938
 800ece0:	2000d93c 	.word	0x2000d93c
 800ece4:	2000de14 	.word	0x2000de14

0800ece8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b086      	sub	sp, #24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d05a      	beq.n	800edb4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ecfe:	4b30      	ldr	r3, [pc, #192]	; (800edc0 <xTaskPriorityDisinherit+0xd8>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	693a      	ldr	r2, [r7, #16]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d00c      	beq.n	800ed22 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ed08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0c:	b672      	cpsid	i
 800ed0e:	f383 8811 	msr	BASEPRI, r3
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	b662      	cpsie	i
 800ed1c:	60fb      	str	r3, [r7, #12]
}
 800ed1e:	bf00      	nop
 800ed20:	e7fe      	b.n	800ed20 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d10c      	bne.n	800ed44 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ed2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2e:	b672      	cpsid	i
 800ed30:	f383 8811 	msr	BASEPRI, r3
 800ed34:	f3bf 8f6f 	isb	sy
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	b662      	cpsie	i
 800ed3e:	60bb      	str	r3, [r7, #8]
}
 800ed40:	bf00      	nop
 800ed42:	e7fe      	b.n	800ed42 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed48:	1e5a      	subs	r2, r3, #1
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d02c      	beq.n	800edb4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d128      	bne.n	800edb4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	3304      	adds	r3, #4
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fd fe40 	bl	800c9ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed84:	4b0f      	ldr	r3, [pc, #60]	; (800edc4 <xTaskPriorityDisinherit+0xdc>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d903      	bls.n	800ed94 <xTaskPriorityDisinherit+0xac>
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed90:	4a0c      	ldr	r2, [pc, #48]	; (800edc4 <xTaskPriorityDisinherit+0xdc>)
 800ed92:	6013      	str	r3, [r2, #0]
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed98:	4613      	mov	r3, r2
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	4413      	add	r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	4a09      	ldr	r2, [pc, #36]	; (800edc8 <xTaskPriorityDisinherit+0xe0>)
 800eda2:	441a      	add	r2, r3
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	3304      	adds	r3, #4
 800eda8:	4619      	mov	r1, r3
 800edaa:	4610      	mov	r0, r2
 800edac:	f7fd fdc1 	bl	800c932 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800edb0:	2301      	movs	r3, #1
 800edb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edb4:	697b      	ldr	r3, [r7, #20]
	}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3718      	adds	r7, #24
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	2000d938 	.word	0x2000d938
 800edc4:	2000de14 	.word	0x2000de14
 800edc8:	2000d93c 	.word	0x2000d93c

0800edcc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b088      	sub	sp, #32
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800edda:	2301      	movs	r3, #1
 800eddc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d06e      	beq.n	800eec2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10c      	bne.n	800ee06 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	b672      	cpsid	i
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	b662      	cpsie	i
 800ee00:	60fb      	str	r3, [r7, #12]
}
 800ee02:	bf00      	nop
 800ee04:	e7fe      	b.n	800ee04 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee0a:	683a      	ldr	r2, [r7, #0]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d902      	bls.n	800ee16 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	61fb      	str	r3, [r7, #28]
 800ee14:	e002      	b.n	800ee1c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee20:	69fa      	ldr	r2, [r7, #28]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d04d      	beq.n	800eec2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d148      	bne.n	800eec2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee30:	4b26      	ldr	r3, [pc, #152]	; (800eecc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	69ba      	ldr	r2, [r7, #24]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d10c      	bne.n	800ee54 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800ee3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3e:	b672      	cpsid	i
 800ee40:	f383 8811 	msr	BASEPRI, r3
 800ee44:	f3bf 8f6f 	isb	sy
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	b662      	cpsie	i
 800ee4e:	60bb      	str	r3, [r7, #8]
}
 800ee50:	bf00      	nop
 800ee52:	e7fe      	b.n	800ee52 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	69fa      	ldr	r2, [r7, #28]
 800ee5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	699b      	ldr	r3, [r3, #24]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	db04      	blt.n	800ee72 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	6959      	ldr	r1, [r3, #20]
 800ee76:	693a      	ldr	r2, [r7, #16]
 800ee78:	4613      	mov	r3, r2
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	4413      	add	r3, r2
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	4a13      	ldr	r2, [pc, #76]	; (800eed0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ee82:	4413      	add	r3, r2
 800ee84:	4299      	cmp	r1, r3
 800ee86:	d11c      	bne.n	800eec2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	3304      	adds	r3, #4
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fd fdad 	bl	800c9ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee96:	4b0f      	ldr	r3, [pc, #60]	; (800eed4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d903      	bls.n	800eea6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea2:	4a0c      	ldr	r2, [pc, #48]	; (800eed4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800eea4:	6013      	str	r3, [r2, #0]
 800eea6:	69bb      	ldr	r3, [r7, #24]
 800eea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeaa:	4613      	mov	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4413      	add	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4a07      	ldr	r2, [pc, #28]	; (800eed0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eeb4:	441a      	add	r2, r3
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	3304      	adds	r3, #4
 800eeba:	4619      	mov	r1, r3
 800eebc:	4610      	mov	r0, r2
 800eebe:	f7fd fd38 	bl	800c932 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eec2:	bf00      	nop
 800eec4:	3720      	adds	r7, #32
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	2000d938 	.word	0x2000d938
 800eed0:	2000d93c 	.word	0x2000d93c
 800eed4:	2000de14 	.word	0x2000de14

0800eed8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eed8:	b480      	push	{r7}
 800eeda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eedc:	4b07      	ldr	r3, [pc, #28]	; (800eefc <pvTaskIncrementMutexHeldCount+0x24>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d004      	beq.n	800eeee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eee4:	4b05      	ldr	r3, [pc, #20]	; (800eefc <pvTaskIncrementMutexHeldCount+0x24>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eeea:	3201      	adds	r2, #1
 800eeec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800eeee:	4b03      	ldr	r3, [pc, #12]	; (800eefc <pvTaskIncrementMutexHeldCount+0x24>)
 800eef0:	681b      	ldr	r3, [r3, #0]
	}
 800eef2:	4618      	mov	r0, r3
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	2000d938 	.word	0x2000d938

0800ef00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef0a:	4b21      	ldr	r3, [pc, #132]	; (800ef90 <prvAddCurrentTaskToDelayedList+0x90>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef10:	4b20      	ldr	r3, [pc, #128]	; (800ef94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	3304      	adds	r3, #4
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fd fd68 	bl	800c9ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef22:	d10a      	bne.n	800ef3a <prvAddCurrentTaskToDelayedList+0x3a>
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d007      	beq.n	800ef3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef2a:	4b1a      	ldr	r3, [pc, #104]	; (800ef94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	3304      	adds	r3, #4
 800ef30:	4619      	mov	r1, r3
 800ef32:	4819      	ldr	r0, [pc, #100]	; (800ef98 <prvAddCurrentTaskToDelayedList+0x98>)
 800ef34:	f7fd fcfd 	bl	800c932 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef38:	e026      	b.n	800ef88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4413      	add	r3, r2
 800ef40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef42:	4b14      	ldr	r3, [pc, #80]	; (800ef94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef4a:	68ba      	ldr	r2, [r7, #8]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d209      	bcs.n	800ef66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef52:	4b12      	ldr	r3, [pc, #72]	; (800ef9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	4b0f      	ldr	r3, [pc, #60]	; (800ef94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	4610      	mov	r0, r2
 800ef60:	f7fd fd0b 	bl	800c97a <vListInsert>
}
 800ef64:	e010      	b.n	800ef88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef66:	4b0e      	ldr	r3, [pc, #56]	; (800efa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	4b0a      	ldr	r3, [pc, #40]	; (800ef94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	3304      	adds	r3, #4
 800ef70:	4619      	mov	r1, r3
 800ef72:	4610      	mov	r0, r2
 800ef74:	f7fd fd01 	bl	800c97a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef78:	4b0a      	ldr	r3, [pc, #40]	; (800efa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d202      	bcs.n	800ef88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ef82:	4a08      	ldr	r2, [pc, #32]	; (800efa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	6013      	str	r3, [r2, #0]
}
 800ef88:	bf00      	nop
 800ef8a:	3710      	adds	r7, #16
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	2000de10 	.word	0x2000de10
 800ef94:	2000d938 	.word	0x2000d938
 800ef98:	2000ddf8 	.word	0x2000ddf8
 800ef9c:	2000ddc8 	.word	0x2000ddc8
 800efa0:	2000ddc4 	.word	0x2000ddc4
 800efa4:	2000de2c 	.word	0x2000de2c

0800efa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b08a      	sub	sp, #40	; 0x28
 800efac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800efae:	2300      	movs	r3, #0
 800efb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800efb2:	f000 fb15 	bl	800f5e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800efb6:	4b1d      	ldr	r3, [pc, #116]	; (800f02c <xTimerCreateTimerTask+0x84>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d021      	beq.n	800f002 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800efbe:	2300      	movs	r3, #0
 800efc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800efc2:	2300      	movs	r3, #0
 800efc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800efc6:	1d3a      	adds	r2, r7, #4
 800efc8:	f107 0108 	add.w	r1, r7, #8
 800efcc:	f107 030c 	add.w	r3, r7, #12
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fd fa83 	bl	800c4dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800efd6:	6879      	ldr	r1, [r7, #4]
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	9202      	str	r2, [sp, #8]
 800efde:	9301      	str	r3, [sp, #4]
 800efe0:	2302      	movs	r3, #2
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	2300      	movs	r3, #0
 800efe6:	460a      	mov	r2, r1
 800efe8:	4911      	ldr	r1, [pc, #68]	; (800f030 <xTimerCreateTimerTask+0x88>)
 800efea:	4812      	ldr	r0, [pc, #72]	; (800f034 <xTimerCreateTimerTask+0x8c>)
 800efec:	f7fe ffb8 	bl	800df60 <xTaskCreateStatic>
 800eff0:	4603      	mov	r3, r0
 800eff2:	4a11      	ldr	r2, [pc, #68]	; (800f038 <xTimerCreateTimerTask+0x90>)
 800eff4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eff6:	4b10      	ldr	r3, [pc, #64]	; (800f038 <xTimerCreateTimerTask+0x90>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800effe:	2301      	movs	r3, #1
 800f000:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10c      	bne.n	800f022 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800f008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00c:	b672      	cpsid	i
 800f00e:	f383 8811 	msr	BASEPRI, r3
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	f3bf 8f4f 	dsb	sy
 800f01a:	b662      	cpsie	i
 800f01c:	613b      	str	r3, [r7, #16]
}
 800f01e:	bf00      	nop
 800f020:	e7fe      	b.n	800f020 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800f022:	697b      	ldr	r3, [r7, #20]
}
 800f024:	4618      	mov	r0, r3
 800f026:	3718      	adds	r7, #24
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	2000de68 	.word	0x2000de68
 800f030:	0801f958 	.word	0x0801f958
 800f034:	0800f179 	.word	0x0800f179
 800f038:	2000de6c 	.word	0x2000de6c

0800f03c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b08a      	sub	sp, #40	; 0x28
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	607a      	str	r2, [r7, #4]
 800f048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f04a:	2300      	movs	r3, #0
 800f04c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10c      	bne.n	800f06e <xTimerGenericCommand+0x32>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f058:	b672      	cpsid	i
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	b662      	cpsie	i
 800f068:	623b      	str	r3, [r7, #32]
}
 800f06a:	bf00      	nop
 800f06c:	e7fe      	b.n	800f06c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f06e:	4b1a      	ldr	r3, [pc, #104]	; (800f0d8 <xTimerGenericCommand+0x9c>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d02a      	beq.n	800f0cc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	2b05      	cmp	r3, #5
 800f086:	dc18      	bgt.n	800f0ba <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f088:	f7ff fda8 	bl	800ebdc <xTaskGetSchedulerState>
 800f08c:	4603      	mov	r3, r0
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d109      	bne.n	800f0a6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f092:	4b11      	ldr	r3, [pc, #68]	; (800f0d8 <xTimerGenericCommand+0x9c>)
 800f094:	6818      	ldr	r0, [r3, #0]
 800f096:	f107 0110 	add.w	r1, r7, #16
 800f09a:	2300      	movs	r3, #0
 800f09c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f09e:	f7fe f8cd 	bl	800d23c <xQueueGenericSend>
 800f0a2:	6278      	str	r0, [r7, #36]	; 0x24
 800f0a4:	e012      	b.n	800f0cc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0a6:	4b0c      	ldr	r3, [pc, #48]	; (800f0d8 <xTimerGenericCommand+0x9c>)
 800f0a8:	6818      	ldr	r0, [r3, #0]
 800f0aa:	f107 0110 	add.w	r1, r7, #16
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f7fe f8c3 	bl	800d23c <xQueueGenericSend>
 800f0b6:	6278      	str	r0, [r7, #36]	; 0x24
 800f0b8:	e008      	b.n	800f0cc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f0ba:	4b07      	ldr	r3, [pc, #28]	; (800f0d8 <xTimerGenericCommand+0x9c>)
 800f0bc:	6818      	ldr	r0, [r3, #0]
 800f0be:	f107 0110 	add.w	r1, r7, #16
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	f7fe f9bf 	bl	800d448 <xQueueGenericSendFromISR>
 800f0ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3728      	adds	r7, #40	; 0x28
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	2000de68 	.word	0x2000de68

0800f0dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af02      	add	r7, sp, #8
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0e6:	4b23      	ldr	r3, [pc, #140]	; (800f174 <prvProcessExpiredTimer+0x98>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fd fc79 	bl	800c9ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f100:	f003 0304 	and.w	r3, r3, #4
 800f104:	2b00      	cmp	r3, #0
 800f106:	d024      	beq.n	800f152 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	699a      	ldr	r2, [r3, #24]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	18d1      	adds	r1, r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	6978      	ldr	r0, [r7, #20]
 800f116:	f000 f8d3 	bl	800f2c0 <prvInsertTimerInActiveList>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d021      	beq.n	800f164 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f120:	2300      	movs	r3, #0
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	2300      	movs	r3, #0
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	2100      	movs	r1, #0
 800f12a:	6978      	ldr	r0, [r7, #20]
 800f12c:	f7ff ff86 	bl	800f03c <xTimerGenericCommand>
 800f130:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d115      	bne.n	800f164 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800f138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13c:	b672      	cpsid	i
 800f13e:	f383 8811 	msr	BASEPRI, r3
 800f142:	f3bf 8f6f 	isb	sy
 800f146:	f3bf 8f4f 	dsb	sy
 800f14a:	b662      	cpsie	i
 800f14c:	60fb      	str	r3, [r7, #12]
}
 800f14e:	bf00      	nop
 800f150:	e7fe      	b.n	800f150 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f158:	f023 0301 	bic.w	r3, r3, #1
 800f15c:	b2da      	uxtb	r2, r3
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	6a1b      	ldr	r3, [r3, #32]
 800f168:	6978      	ldr	r0, [r7, #20]
 800f16a:	4798      	blx	r3
}
 800f16c:	bf00      	nop
 800f16e:	3718      	adds	r7, #24
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	2000de60 	.word	0x2000de60

0800f178 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f180:	f107 0308 	add.w	r3, r7, #8
 800f184:	4618      	mov	r0, r3
 800f186:	f000 f857 	bl	800f238 <prvGetNextExpireTime>
 800f18a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	4619      	mov	r1, r3
 800f190:	68f8      	ldr	r0, [r7, #12]
 800f192:	f000 f803 	bl	800f19c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f196:	f000 f8d5 	bl	800f344 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f19a:	e7f1      	b.n	800f180 <prvTimerTask+0x8>

0800f19c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f1a6:	f7ff f925 	bl	800e3f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1aa:	f107 0308 	add.w	r3, r7, #8
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 f866 	bl	800f280 <prvSampleTimeNow>
 800f1b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d130      	bne.n	800f21e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10a      	bne.n	800f1d8 <prvProcessTimerOrBlockTask+0x3c>
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d806      	bhi.n	800f1d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f1ca:	f7ff f921 	bl	800e410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f1ce:	68f9      	ldr	r1, [r7, #12]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7ff ff83 	bl	800f0dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f1d6:	e024      	b.n	800f222 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d008      	beq.n	800f1f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f1de:	4b13      	ldr	r3, [pc, #76]	; (800f22c <prvProcessTimerOrBlockTask+0x90>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d101      	bne.n	800f1ec <prvProcessTimerOrBlockTask+0x50>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e000      	b.n	800f1ee <prvProcessTimerOrBlockTask+0x52>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f1f0:	4b0f      	ldr	r3, [pc, #60]	; (800f230 <prvProcessTimerOrBlockTask+0x94>)
 800f1f2:	6818      	ldr	r0, [r3, #0]
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	f7fe fe7b 	bl	800def8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f202:	f7ff f905 	bl	800e410 <xTaskResumeAll>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d10a      	bne.n	800f222 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f20c:	4b09      	ldr	r3, [pc, #36]	; (800f234 <prvProcessTimerOrBlockTask+0x98>)
 800f20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f212:	601a      	str	r2, [r3, #0]
 800f214:	f3bf 8f4f 	dsb	sy
 800f218:	f3bf 8f6f 	isb	sy
}
 800f21c:	e001      	b.n	800f222 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f21e:	f7ff f8f7 	bl	800e410 <xTaskResumeAll>
}
 800f222:	bf00      	nop
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	2000de64 	.word	0x2000de64
 800f230:	2000de68 	.word	0x2000de68
 800f234:	e000ed04 	.word	0xe000ed04

0800f238 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f238:	b480      	push	{r7}
 800f23a:	b085      	sub	sp, #20
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f240:	4b0e      	ldr	r3, [pc, #56]	; (800f27c <prvGetNextExpireTime+0x44>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d101      	bne.n	800f24e <prvGetNextExpireTime+0x16>
 800f24a:	2201      	movs	r2, #1
 800f24c:	e000      	b.n	800f250 <prvGetNextExpireTime+0x18>
 800f24e:	2200      	movs	r2, #0
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d105      	bne.n	800f268 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f25c:	4b07      	ldr	r3, [pc, #28]	; (800f27c <prvGetNextExpireTime+0x44>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	60fb      	str	r3, [r7, #12]
 800f266:	e001      	b.n	800f26c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f268:	2300      	movs	r3, #0
 800f26a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f26c:	68fb      	ldr	r3, [r7, #12]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3714      	adds	r7, #20
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	2000de60 	.word	0x2000de60

0800f280 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f288:	f7ff f962 	bl	800e550 <xTaskGetTickCount>
 800f28c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f28e:	4b0b      	ldr	r3, [pc, #44]	; (800f2bc <prvSampleTimeNow+0x3c>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	429a      	cmp	r2, r3
 800f296:	d205      	bcs.n	800f2a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f298:	f000 f93c 	bl	800f514 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	601a      	str	r2, [r3, #0]
 800f2a2:	e002      	b.n	800f2aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f2aa:	4a04      	ldr	r2, [pc, #16]	; (800f2bc <prvSampleTimeNow+0x3c>)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	2000de70 	.word	0x2000de70

0800f2c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]
 800f2cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	68ba      	ldr	r2, [r7, #8]
 800f2d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	68fa      	ldr	r2, [r7, #12]
 800f2dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d812      	bhi.n	800f30c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	1ad2      	subs	r2, r2, r3
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	699b      	ldr	r3, [r3, #24]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d302      	bcc.n	800f2fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	617b      	str	r3, [r7, #20]
 800f2f8:	e01b      	b.n	800f332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f2fa:	4b10      	ldr	r3, [pc, #64]	; (800f33c <prvInsertTimerInActiveList+0x7c>)
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	3304      	adds	r3, #4
 800f302:	4619      	mov	r1, r3
 800f304:	4610      	mov	r0, r2
 800f306:	f7fd fb38 	bl	800c97a <vListInsert>
 800f30a:	e012      	b.n	800f332 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	429a      	cmp	r2, r3
 800f312:	d206      	bcs.n	800f322 <prvInsertTimerInActiveList+0x62>
 800f314:	68ba      	ldr	r2, [r7, #8]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d302      	bcc.n	800f322 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f31c:	2301      	movs	r3, #1
 800f31e:	617b      	str	r3, [r7, #20]
 800f320:	e007      	b.n	800f332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f322:	4b07      	ldr	r3, [pc, #28]	; (800f340 <prvInsertTimerInActiveList+0x80>)
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	3304      	adds	r3, #4
 800f32a:	4619      	mov	r1, r3
 800f32c:	4610      	mov	r0, r2
 800f32e:	f7fd fb24 	bl	800c97a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f332:	697b      	ldr	r3, [r7, #20]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3718      	adds	r7, #24
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	2000de64 	.word	0x2000de64
 800f340:	2000de60 	.word	0x2000de60

0800f344 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08e      	sub	sp, #56	; 0x38
 800f348:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f34a:	e0d0      	b.n	800f4ee <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	da1a      	bge.n	800f388 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f352:	1d3b      	adds	r3, r7, #4
 800f354:	3304      	adds	r3, #4
 800f356:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d10c      	bne.n	800f378 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800f35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f362:	b672      	cpsid	i
 800f364:	f383 8811 	msr	BASEPRI, r3
 800f368:	f3bf 8f6f 	isb	sy
 800f36c:	f3bf 8f4f 	dsb	sy
 800f370:	b662      	cpsie	i
 800f372:	61fb      	str	r3, [r7, #28]
}
 800f374:	bf00      	nop
 800f376:	e7fe      	b.n	800f376 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f37e:	6850      	ldr	r0, [r2, #4]
 800f380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f382:	6892      	ldr	r2, [r2, #8]
 800f384:	4611      	mov	r1, r2
 800f386:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	f2c0 80ae 	blt.w	800f4ec <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	695b      	ldr	r3, [r3, #20]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d004      	beq.n	800f3a6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39e:	3304      	adds	r3, #4
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fd fb23 	bl	800c9ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3a6:	463b      	mov	r3, r7
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7ff ff69 	bl	800f280 <prvSampleTimeNow>
 800f3ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2b09      	cmp	r3, #9
 800f3b4:	f200 809b 	bhi.w	800f4ee <prvProcessReceivedCommands+0x1aa>
 800f3b8:	a201      	add	r2, pc, #4	; (adr r2, 800f3c0 <prvProcessReceivedCommands+0x7c>)
 800f3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3be:	bf00      	nop
 800f3c0:	0800f3e9 	.word	0x0800f3e9
 800f3c4:	0800f3e9 	.word	0x0800f3e9
 800f3c8:	0800f3e9 	.word	0x0800f3e9
 800f3cc:	0800f461 	.word	0x0800f461
 800f3d0:	0800f475 	.word	0x0800f475
 800f3d4:	0800f4c3 	.word	0x0800f4c3
 800f3d8:	0800f3e9 	.word	0x0800f3e9
 800f3dc:	0800f3e9 	.word	0x0800f3e9
 800f3e0:	0800f461 	.word	0x0800f461
 800f3e4:	0800f475 	.word	0x0800f475
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3ee:	f043 0301 	orr.w	r3, r3, #1
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	18d1      	adds	r1, r2, r3
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f408:	f7ff ff5a 	bl	800f2c0 <prvInsertTimerInActiveList>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d06d      	beq.n	800f4ee <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f414:	6a1b      	ldr	r3, [r3, #32]
 800f416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f418:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f420:	f003 0304 	and.w	r3, r3, #4
 800f424:	2b00      	cmp	r3, #0
 800f426:	d062      	beq.n	800f4ee <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42c:	699b      	ldr	r3, [r3, #24]
 800f42e:	441a      	add	r2, r3
 800f430:	2300      	movs	r3, #0
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	2300      	movs	r3, #0
 800f436:	2100      	movs	r1, #0
 800f438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f43a:	f7ff fdff 	bl	800f03c <xTimerGenericCommand>
 800f43e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f440:	6a3b      	ldr	r3, [r7, #32]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d153      	bne.n	800f4ee <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800f446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44a:	b672      	cpsid	i
 800f44c:	f383 8811 	msr	BASEPRI, r3
 800f450:	f3bf 8f6f 	isb	sy
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	b662      	cpsie	i
 800f45a:	61bb      	str	r3, [r7, #24]
}
 800f45c:	bf00      	nop
 800f45e:	e7fe      	b.n	800f45e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f466:	f023 0301 	bic.w	r3, r3, #1
 800f46a:	b2da      	uxtb	r2, r3
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f472:	e03c      	b.n	800f4ee <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f47a:	f043 0301 	orr.w	r3, r3, #1
 800f47e:	b2da      	uxtb	r2, r3
 800f480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48e:	699b      	ldr	r3, [r3, #24]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d10c      	bne.n	800f4ae <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800f494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f498:	b672      	cpsid	i
 800f49a:	f383 8811 	msr	BASEPRI, r3
 800f49e:	f3bf 8f6f 	isb	sy
 800f4a2:	f3bf 8f4f 	dsb	sy
 800f4a6:	b662      	cpsie	i
 800f4a8:	617b      	str	r3, [r7, #20]
}
 800f4aa:	bf00      	nop
 800f4ac:	e7fe      	b.n	800f4ac <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b0:	699a      	ldr	r2, [r3, #24]
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b4:	18d1      	adds	r1, r2, r3
 800f4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4bc:	f7ff ff00 	bl	800f2c0 <prvInsertTimerInActiveList>
					break;
 800f4c0:	e015      	b.n	800f4ee <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4c8:	f003 0302 	and.w	r3, r3, #2
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d103      	bne.n	800f4d8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800f4d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4d2:	f7fd f8e7 	bl	800c6a4 <vPortFree>
 800f4d6:	e00a      	b.n	800f4ee <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4de:	f023 0301 	bic.w	r3, r3, #1
 800f4e2:	b2da      	uxtb	r2, r3
 800f4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f4ea:	e000      	b.n	800f4ee <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f4ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f4ee:	4b08      	ldr	r3, [pc, #32]	; (800f510 <prvProcessReceivedCommands+0x1cc>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	1d39      	adds	r1, r7, #4
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe f8dc 	bl	800d6b4 <xQueueReceive>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f47f af24 	bne.w	800f34c <prvProcessReceivedCommands+0x8>
	}
}
 800f504:	bf00      	nop
 800f506:	bf00      	nop
 800f508:	3730      	adds	r7, #48	; 0x30
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	2000de68 	.word	0x2000de68

0800f514 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f51a:	e04a      	b.n	800f5b2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f51c:	4b2e      	ldr	r3, [pc, #184]	; (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f526:	4b2c      	ldr	r3, [pc, #176]	; (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	3304      	adds	r3, #4
 800f534:	4618      	mov	r0, r3
 800f536:	f7fd fa59 	bl	800c9ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6a1b      	ldr	r3, [r3, #32]
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f548:	f003 0304 	and.w	r3, r3, #4
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d030      	beq.n	800f5b2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	699b      	ldr	r3, [r3, #24]
 800f554:	693a      	ldr	r2, [r7, #16]
 800f556:	4413      	add	r3, r2
 800f558:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f55a:	68ba      	ldr	r2, [r7, #8]
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d90e      	bls.n	800f580 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	68ba      	ldr	r2, [r7, #8]
 800f566:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f56e:	4b1a      	ldr	r3, [pc, #104]	; (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3304      	adds	r3, #4
 800f576:	4619      	mov	r1, r3
 800f578:	4610      	mov	r0, r2
 800f57a:	f7fd f9fe 	bl	800c97a <vListInsert>
 800f57e:	e018      	b.n	800f5b2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f580:	2300      	movs	r3, #0
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	2300      	movs	r3, #0
 800f586:	693a      	ldr	r2, [r7, #16]
 800f588:	2100      	movs	r1, #0
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f7ff fd56 	bl	800f03c <xTimerGenericCommand>
 800f590:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d10c      	bne.n	800f5b2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800f598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59c:	b672      	cpsid	i
 800f59e:	f383 8811 	msr	BASEPRI, r3
 800f5a2:	f3bf 8f6f 	isb	sy
 800f5a6:	f3bf 8f4f 	dsb	sy
 800f5aa:	b662      	cpsie	i
 800f5ac:	603b      	str	r3, [r7, #0]
}
 800f5ae:	bf00      	nop
 800f5b0:	e7fe      	b.n	800f5b0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5b2:	4b09      	ldr	r3, [pc, #36]	; (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d1af      	bne.n	800f51c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f5bc:	4b06      	ldr	r3, [pc, #24]	; (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f5c2:	4b06      	ldr	r3, [pc, #24]	; (800f5dc <prvSwitchTimerLists+0xc8>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a04      	ldr	r2, [pc, #16]	; (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f5c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f5ca:	4a04      	ldr	r2, [pc, #16]	; (800f5dc <prvSwitchTimerLists+0xc8>)
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	6013      	str	r3, [r2, #0]
}
 800f5d0:	bf00      	nop
 800f5d2:	3718      	adds	r7, #24
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	2000de60 	.word	0x2000de60
 800f5dc:	2000de64 	.word	0x2000de64

0800f5e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f5e6:	f7fd fb39 	bl	800cc5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f5ea:	4b15      	ldr	r3, [pc, #84]	; (800f640 <prvCheckForValidListAndQueue+0x60>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d120      	bne.n	800f634 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f5f2:	4814      	ldr	r0, [pc, #80]	; (800f644 <prvCheckForValidListAndQueue+0x64>)
 800f5f4:	f7fd f970 	bl	800c8d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f5f8:	4813      	ldr	r0, [pc, #76]	; (800f648 <prvCheckForValidListAndQueue+0x68>)
 800f5fa:	f7fd f96d 	bl	800c8d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f5fe:	4b13      	ldr	r3, [pc, #76]	; (800f64c <prvCheckForValidListAndQueue+0x6c>)
 800f600:	4a10      	ldr	r2, [pc, #64]	; (800f644 <prvCheckForValidListAndQueue+0x64>)
 800f602:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f604:	4b12      	ldr	r3, [pc, #72]	; (800f650 <prvCheckForValidListAndQueue+0x70>)
 800f606:	4a10      	ldr	r2, [pc, #64]	; (800f648 <prvCheckForValidListAndQueue+0x68>)
 800f608:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f60a:	2300      	movs	r3, #0
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	4b11      	ldr	r3, [pc, #68]	; (800f654 <prvCheckForValidListAndQueue+0x74>)
 800f610:	4a11      	ldr	r2, [pc, #68]	; (800f658 <prvCheckForValidListAndQueue+0x78>)
 800f612:	2110      	movs	r1, #16
 800f614:	200a      	movs	r0, #10
 800f616:	f7fd fcb7 	bl	800cf88 <xQueueGenericCreateStatic>
 800f61a:	4603      	mov	r3, r0
 800f61c:	4a08      	ldr	r2, [pc, #32]	; (800f640 <prvCheckForValidListAndQueue+0x60>)
 800f61e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f620:	4b07      	ldr	r3, [pc, #28]	; (800f640 <prvCheckForValidListAndQueue+0x60>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d005      	beq.n	800f634 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f628:	4b05      	ldr	r3, [pc, #20]	; (800f640 <prvCheckForValidListAndQueue+0x60>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	490b      	ldr	r1, [pc, #44]	; (800f65c <prvCheckForValidListAndQueue+0x7c>)
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe fc0e 	bl	800de50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f634:	f7fd fb46 	bl	800ccc4 <vPortExitCritical>
}
 800f638:	bf00      	nop
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	2000de68 	.word	0x2000de68
 800f644:	2000de38 	.word	0x2000de38
 800f648:	2000de4c 	.word	0x2000de4c
 800f64c:	2000de60 	.word	0x2000de60
 800f650:	2000de64 	.word	0x2000de64
 800f654:	2000df14 	.word	0x2000df14
 800f658:	2000de74 	.word	0x2000de74
 800f65c:	0801f960 	.word	0x0801f960

0800f660 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f660:	8880      	ldrh	r0, [r0, #4]
 800f662:	4770      	bx	lr

0800f664 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f664:	2300      	movs	r3, #0
 800f666:	8083      	strh	r3, [r0, #4]
 800f668:	4770      	bx	lr
	...

0800f66c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f66e:	6803      	ldr	r3, [r0, #0]
 800f670:	460e      	mov	r6, r1
 800f672:	2100      	movs	r1, #0
 800f674:	4605      	mov	r5, r0
 800f676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f678:	4798      	blx	r3
 800f67a:	4604      	mov	r4, r0
 800f67c:	682b      	ldr	r3, [r5, #0]
 800f67e:	4628      	mov	r0, r5
 800f680:	1b34      	subs	r4, r6, r4
 800f682:	6a1b      	ldr	r3, [r3, #32]
 800f684:	b2a4      	uxth	r4, r4
 800f686:	4798      	blx	r3
 800f688:	88ab      	ldrh	r3, [r5, #4]
 800f68a:	fbb4 f4f0 	udiv	r4, r4, r0
 800f68e:	42a3      	cmp	r3, r4
 800f690:	d805      	bhi.n	800f69e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800f692:	4b0e      	ldr	r3, [pc, #56]	; (800f6cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800f694:	211e      	movs	r1, #30
 800f696:	4a0e      	ldr	r2, [pc, #56]	; (800f6d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800f698:	480e      	ldr	r0, [pc, #56]	; (800f6d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800f69a:	f00e fb8b 	bl	801ddb4 <__assert_func>
 800f69e:	682b      	ldr	r3, [r5, #0]
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a6:	4798      	blx	r3
 800f6a8:	682b      	ldr	r3, [r5, #0]
 800f6aa:	4607      	mov	r7, r0
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	6a1b      	ldr	r3, [r3, #32]
 800f6b0:	4798      	blx	r3
 800f6b2:	1bf3      	subs	r3, r6, r7
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	fbb3 f2f0 	udiv	r2, r3, r0
 800f6ba:	fb02 3010 	mls	r0, r2, r0, r3
 800f6be:	b118      	cbz	r0, 800f6c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800f6c0:	4b05      	ldr	r3, [pc, #20]	; (800f6d8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800f6c2:	211f      	movs	r1, #31
 800f6c4:	4a02      	ldr	r2, [pc, #8]	; (800f6d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800f6c6:	e7e7      	b.n	800f698 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6cc:	08020108 	.word	0x08020108
 800f6d0:	08020276 	.word	0x08020276
 800f6d4:	0802011d 	.word	0x0802011d
 800f6d8:	0802014b 	.word	0x0802014b

0800f6dc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f6dc:	b538      	push	{r3, r4, r5, lr}
 800f6de:	6803      	ldr	r3, [r0, #0]
 800f6e0:	460d      	mov	r5, r1
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	6a1b      	ldr	r3, [r3, #32]
 800f6e6:	4798      	blx	r3
 800f6e8:	4285      	cmp	r5, r0
 800f6ea:	d905      	bls.n	800f6f8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800f6ec:	4b0c      	ldr	r3, [pc, #48]	; (800f720 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800f6ee:	2130      	movs	r1, #48	; 0x30
 800f6f0:	4a0c      	ldr	r2, [pc, #48]	; (800f724 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800f6f2:	480d      	ldr	r0, [pc, #52]	; (800f728 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800f6f4:	f00e fb5e 	bl	801ddb4 <__assert_func>
 800f6f8:	6823      	ldr	r3, [r4, #0]
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	88a5      	ldrh	r5, [r4, #4]
 800f6fe:	69db      	ldr	r3, [r3, #28]
 800f700:	4798      	blx	r3
 800f702:	4285      	cmp	r5, r0
 800f704:	d303      	bcc.n	800f70e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800f706:	4b09      	ldr	r3, [pc, #36]	; (800f72c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800f708:	2131      	movs	r1, #49	; 0x31
 800f70a:	4a06      	ldr	r2, [pc, #24]	; (800f724 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800f70c:	e7f1      	b.n	800f6f2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	4620      	mov	r0, r4
 800f712:	88a1      	ldrh	r1, [r4, #4]
 800f714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f716:	4798      	blx	r3
 800f718:	88a3      	ldrh	r3, [r4, #4]
 800f71a:	3301      	adds	r3, #1
 800f71c:	80a3      	strh	r3, [r4, #4]
 800f71e:	bd38      	pop	{r3, r4, r5, pc}
 800f720:	080201c5 	.word	0x080201c5
 800f724:	080202b9 	.word	0x080202b9
 800f728:	0802011d 	.word	0x0802011d
 800f72c:	080201dc 	.word	0x080201dc

0800f730 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	6803      	ldr	r3, [r0, #0]
 800f734:	4616      	mov	r6, r2
 800f736:	4604      	mov	r4, r0
 800f738:	460d      	mov	r5, r1
 800f73a:	6a1b      	ldr	r3, [r3, #32]
 800f73c:	4798      	blx	r3
 800f73e:	4286      	cmp	r6, r0
 800f740:	d905      	bls.n	800f74e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800f742:	4b06      	ldr	r3, [pc, #24]	; (800f75c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800f744:	213a      	movs	r1, #58	; 0x3a
 800f746:	4a06      	ldr	r2, [pc, #24]	; (800f760 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800f748:	4806      	ldr	r0, [pc, #24]	; (800f764 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800f74a:	f00e fb33 	bl	801ddb4 <__assert_func>
 800f74e:	6823      	ldr	r3, [r4, #0]
 800f750:	4629      	mov	r1, r5
 800f752:	4620      	mov	r0, r4
 800f754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f75a:	4718      	bx	r3
 800f75c:	080201c5 	.word	0x080201c5
 800f760:	0802022c 	.word	0x0802022c
 800f764:	0802011d 	.word	0x0802011d

0800f768 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f768:	4770      	bx	lr
	...

0800f76c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f76c:	4a02      	ldr	r2, [pc, #8]	; (800f778 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f76e:	6002      	str	r2, [r0, #0]
 800f770:	2200      	movs	r2, #0
 800f772:	8082      	strh	r2, [r0, #4]
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	08020200 	.word	0x08020200

0800f77c <_ZN8touchgfx9Container13getFirstChildEv>:
 800f77c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f77e:	4770      	bx	lr

0800f780 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800f780:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f782:	2000      	movs	r0, #0
 800f784:	b12b      	cbz	r3, 800f792 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f786:	b920      	cbnz	r0, 800f792 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f788:	1a5a      	subs	r2, r3, r1
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	4250      	negs	r0, r2
 800f78e:	4150      	adcs	r0, r2
 800f790:	e7f8      	b.n	800f784 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800f792:	4770      	bx	lr

0800f794 <_ZN8touchgfx9Container9removeAllEv>:
 800f794:	2200      	movs	r2, #0
 800f796:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f798:	b123      	cbz	r3, 800f7a4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800f79a:	6999      	ldr	r1, [r3, #24]
 800f79c:	6281      	str	r1, [r0, #40]	; 0x28
 800f79e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800f7a2:	e7f8      	b.n	800f796 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800f7a4:	4770      	bx	lr

0800f7a6 <_ZN8touchgfx9Container6unlinkEv>:
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	6283      	str	r3, [r0, #40]	; 0x28
 800f7aa:	4770      	bx	lr

0800f7ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800f7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b0:	461f      	mov	r7, r3
 800f7b2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800f7b6:	460d      	mov	r5, r1
 800f7b8:	4616      	mov	r6, r2
 800f7ba:	b103      	cbz	r3, 800f7be <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800f7bc:	6038      	str	r0, [r7, #0]
 800f7be:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f7c0:	b314      	cbz	r4, 800f808 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800f7c2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f7c6:	b1eb      	cbz	r3, 800f804 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f7c8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f7cc:	428d      	cmp	r5, r1
 800f7ce:	db19      	blt.n	800f804 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f7d0:	b289      	uxth	r1, r1
 800f7d2:	8923      	ldrh	r3, [r4, #8]
 800f7d4:	440b      	add	r3, r1
 800f7d6:	b21b      	sxth	r3, r3
 800f7d8:	429d      	cmp	r5, r3
 800f7da:	da13      	bge.n	800f804 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f7dc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f7e0:	4296      	cmp	r6, r2
 800f7e2:	db0f      	blt.n	800f804 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f7e4:	b292      	uxth	r2, r2
 800f7e6:	8963      	ldrh	r3, [r4, #10]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	b21b      	sxth	r3, r3
 800f7ec:	429e      	cmp	r6, r3
 800f7ee:	da09      	bge.n	800f804 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f7f0:	6823      	ldr	r3, [r4, #0]
 800f7f2:	1ab2      	subs	r2, r6, r2
 800f7f4:	1a69      	subs	r1, r5, r1
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800f7fc:	b212      	sxth	r2, r2
 800f7fe:	463b      	mov	r3, r7
 800f800:	b209      	sxth	r1, r1
 800f802:	47c0      	blx	r8
 800f804:	69a4      	ldr	r4, [r4, #24]
 800f806:	e7db      	b.n	800f7c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800f808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f80c <_ZNK8touchgfx9Container12getSolidRectEv>:
 800f80c:	2200      	movs	r2, #0
 800f80e:	8002      	strh	r2, [r0, #0]
 800f810:	8042      	strh	r2, [r0, #2]
 800f812:	8082      	strh	r2, [r0, #4]
 800f814:	80c2      	strh	r2, [r0, #6]
 800f816:	4770      	bx	lr

0800f818 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800f818:	b570      	push	{r4, r5, r6, lr}
 800f81a:	460d      	mov	r5, r1
 800f81c:	4616      	mov	r6, r2
 800f81e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f820:	b13c      	cbz	r4, 800f832 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800f822:	6823      	ldr	r3, [r4, #0]
 800f824:	4620      	mov	r0, r4
 800f826:	4632      	mov	r2, r6
 800f828:	4629      	mov	r1, r5
 800f82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f82c:	4798      	blx	r3
 800f82e:	69a4      	ldr	r4, [r4, #24]
 800f830:	e7f6      	b.n	800f820 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800f832:	bd70      	pop	{r4, r5, r6, pc}

0800f834 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	460d      	mov	r5, r1
 800f838:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f83a:	b134      	cbz	r4, 800f84a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800f83c:	682b      	ldr	r3, [r5, #0]
 800f83e:	4621      	mov	r1, r4
 800f840:	4628      	mov	r0, r5
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	4798      	blx	r3
 800f846:	69a4      	ldr	r4, [r4, #24]
 800f848:	e7f7      	b.n	800f83a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800f84a:	bd38      	pop	{r3, r4, r5, pc}

0800f84c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800f84c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f84e:	b19b      	cbz	r3, 800f878 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f850:	428b      	cmp	r3, r1
 800f852:	d109      	bne.n	800f868 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800f854:	699a      	ldr	r2, [r3, #24]
 800f856:	2100      	movs	r1, #0
 800f858:	6159      	str	r1, [r3, #20]
 800f85a:	6282      	str	r2, [r0, #40]	; 0x28
 800f85c:	b902      	cbnz	r2, 800f860 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800f85e:	4770      	bx	lr
 800f860:	6199      	str	r1, [r3, #24]
 800f862:	4770      	bx	lr
 800f864:	4613      	mov	r3, r2
 800f866:	b13a      	cbz	r2, 800f878 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f868:	699a      	ldr	r2, [r3, #24]
 800f86a:	428a      	cmp	r2, r1
 800f86c:	d1fa      	bne.n	800f864 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800f86e:	698a      	ldr	r2, [r1, #24]
 800f870:	619a      	str	r2, [r3, #24]
 800f872:	2300      	movs	r3, #0
 800f874:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800f878:	4770      	bx	lr

0800f87a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800f87a:	b410      	push	{r4}
 800f87c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f87e:	4604      	mov	r4, r0
 800f880:	b92b      	cbnz	r3, 800f88e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800f882:	6803      	ldr	r3, [r0, #0]
 800f884:	4611      	mov	r1, r2
 800f886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f88a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f88c:	4718      	bx	r3
 800f88e:	b941      	cbnz	r1, 800f8a2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800f890:	6193      	str	r3, [r2, #24]
 800f892:	6282      	str	r2, [r0, #40]	; 0x28
 800f894:	6154      	str	r4, [r2, #20]
 800f896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f89a:	4770      	bx	lr
 800f89c:	4603      	mov	r3, r0
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	d0f9      	beq.n	800f896 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800f8a2:	4299      	cmp	r1, r3
 800f8a4:	6998      	ldr	r0, [r3, #24]
 800f8a6:	d1f9      	bne.n	800f89c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800f8a8:	6190      	str	r0, [r2, #24]
 800f8aa:	618a      	str	r2, [r1, #24]
 800f8ac:	e7f2      	b.n	800f894 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800f8b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800f8b0:	4288      	cmp	r0, r1
 800f8b2:	b508      	push	{r3, lr}
 800f8b4:	d105      	bne.n	800f8c2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800f8b6:	4b11      	ldr	r3, [pc, #68]	; (800f8fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800f8b8:	2121      	movs	r1, #33	; 0x21
 800f8ba:	4a11      	ldr	r2, [pc, #68]	; (800f900 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800f8bc:	4811      	ldr	r0, [pc, #68]	; (800f904 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800f8be:	f00e fa79 	bl	801ddb4 <__assert_func>
 800f8c2:	694b      	ldr	r3, [r1, #20]
 800f8c4:	b11b      	cbz	r3, 800f8ce <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800f8c6:	4b10      	ldr	r3, [pc, #64]	; (800f908 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800f8c8:	2122      	movs	r1, #34	; 0x22
 800f8ca:	4a0d      	ldr	r2, [pc, #52]	; (800f900 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800f8cc:	e7f6      	b.n	800f8bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800f8ce:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800f8d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f8d4:	b913      	cbnz	r3, 800f8dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800f8d6:	6281      	str	r1, [r0, #40]	; 0x28
 800f8d8:	bd08      	pop	{r3, pc}
 800f8da:	4613      	mov	r3, r2
 800f8dc:	699a      	ldr	r2, [r3, #24]
 800f8de:	b12a      	cbz	r2, 800f8ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800f8e0:	428b      	cmp	r3, r1
 800f8e2:	d1fa      	bne.n	800f8da <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800f8e4:	4b09      	ldr	r3, [pc, #36]	; (800f90c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800f8e6:	2133      	movs	r1, #51	; 0x33
 800f8e8:	4a05      	ldr	r2, [pc, #20]	; (800f900 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800f8ea:	e7e7      	b.n	800f8bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800f8ec:	428b      	cmp	r3, r1
 800f8ee:	d103      	bne.n	800f8f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800f8f0:	4b06      	ldr	r3, [pc, #24]	; (800f90c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800f8f2:	2136      	movs	r1, #54	; 0x36
 800f8f4:	4a02      	ldr	r2, [pc, #8]	; (800f900 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800f8f6:	e7e1      	b.n	800f8bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800f8f8:	6199      	str	r1, [r3, #24]
 800f8fa:	e7ed      	b.n	800f8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800f8fc:	080202f7 	.word	0x080202f7
 800f900:	08020448 	.word	0x08020448
 800f904:	08020323 	.word	0x08020323
 800f908:	08020356 	.word	0x08020356
 800f90c:	0802038c 	.word	0x0802038c

0800f910 <_ZN8touchgfx4RectaNERKS0_>:
 800f910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f914:	f9b1 7000 	ldrsh.w	r7, [r1]
 800f918:	888c      	ldrh	r4, [r1, #4]
 800f91a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800f91e:	443c      	add	r4, r7
 800f920:	b2a4      	uxth	r4, r4
 800f922:	fa0f f884 	sxth.w	r8, r4
 800f926:	45c1      	cmp	r9, r8
 800f928:	da2f      	bge.n	800f98a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f92a:	8882      	ldrh	r2, [r0, #4]
 800f92c:	444a      	add	r2, r9
 800f92e:	b292      	uxth	r2, r2
 800f930:	fa0f fe82 	sxth.w	lr, r2
 800f934:	4577      	cmp	r7, lr
 800f936:	da28      	bge.n	800f98a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f938:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f93c:	88cb      	ldrh	r3, [r1, #6]
 800f93e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800f942:	442b      	add	r3, r5
 800f944:	b21b      	sxth	r3, r3
 800f946:	429e      	cmp	r6, r3
 800f948:	da1f      	bge.n	800f98a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f94a:	88c3      	ldrh	r3, [r0, #6]
 800f94c:	4433      	add	r3, r6
 800f94e:	b29b      	uxth	r3, r3
 800f950:	fa0f fc83 	sxth.w	ip, r3
 800f954:	4565      	cmp	r5, ip
 800f956:	da18      	bge.n	800f98a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f958:	454f      	cmp	r7, r9
 800f95a:	bfb8      	it	lt
 800f95c:	464f      	movlt	r7, r9
 800f95e:	42b5      	cmp	r5, r6
 800f960:	bfb8      	it	lt
 800f962:	4635      	movlt	r5, r6
 800f964:	45f0      	cmp	r8, lr
 800f966:	bfd8      	it	le
 800f968:	4622      	movle	r2, r4
 800f96a:	1bd2      	subs	r2, r2, r7
 800f96c:	8082      	strh	r2, [r0, #4]
 800f96e:	884a      	ldrh	r2, [r1, #2]
 800f970:	88c9      	ldrh	r1, [r1, #6]
 800f972:	8007      	strh	r7, [r0, #0]
 800f974:	440a      	add	r2, r1
 800f976:	8045      	strh	r5, [r0, #2]
 800f978:	b292      	uxth	r2, r2
 800f97a:	b211      	sxth	r1, r2
 800f97c:	458c      	cmp	ip, r1
 800f97e:	bfa8      	it	ge
 800f980:	4613      	movge	r3, r2
 800f982:	1b5b      	subs	r3, r3, r5
 800f984:	80c3      	strh	r3, [r0, #6]
 800f986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f98a:	2300      	movs	r3, #0
 800f98c:	8003      	strh	r3, [r0, #0]
 800f98e:	8043      	strh	r3, [r0, #2]
 800f990:	8083      	strh	r3, [r0, #4]
 800f992:	80c3      	strh	r3, [r0, #6]
 800f994:	e7f7      	b.n	800f986 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800f996 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800f996:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	dd06      	ble.n	800f9ac <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800f99e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	bfcc      	ite	gt
 800f9a6:	2000      	movgt	r0, #0
 800f9a8:	2001      	movle	r0, #1
 800f9aa:	4770      	bx	lr
 800f9ac:	2001      	movs	r0, #1
 800f9ae:	4770      	bx	lr

0800f9b0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800f9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800f9ba:	8003      	strh	r3, [r0, #0]
 800f9bc:	8043      	strh	r3, [r0, #2]
 800f9be:	8083      	strh	r3, [r0, #4]
 800f9c0:	80c3      	strh	r3, [r0, #6]
 800f9c2:	2d00      	cmp	r5, #0
 800f9c4:	d040      	beq.n	800fa48 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800f9c6:	1d28      	adds	r0, r5, #4
 800f9c8:	f7ff ffe5 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f9cc:	b988      	cbnz	r0, 800f9f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f7ff ffe1 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f9d4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800f9d8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f9dc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800f9e0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800f9e4:	b138      	cbz	r0, 800f9f6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800f9e6:	8022      	strh	r2, [r4, #0]
 800f9e8:	8063      	strh	r3, [r4, #2]
 800f9ea:	f8a4 e004 	strh.w	lr, [r4, #4]
 800f9ee:	f8a4 c006 	strh.w	ip, [r4, #6]
 800f9f2:	69ad      	ldr	r5, [r5, #24]
 800f9f4:	e7e5      	b.n	800f9c2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800f9f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f9fa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f9fe:	4290      	cmp	r0, r2
 800fa00:	4607      	mov	r7, r0
 800fa02:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800fa06:	460e      	mov	r6, r1
 800fa08:	bfa8      	it	ge
 800fa0a:	4617      	movge	r7, r2
 800fa0c:	4299      	cmp	r1, r3
 800fa0e:	4472      	add	r2, lr
 800fa10:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800fa14:	bfa8      	it	ge
 800fa16:	461e      	movge	r6, r3
 800fa18:	4440      	add	r0, r8
 800fa1a:	4471      	add	r1, lr
 800fa1c:	4463      	add	r3, ip
 800fa1e:	b200      	sxth	r0, r0
 800fa20:	8027      	strh	r7, [r4, #0]
 800fa22:	b212      	sxth	r2, r2
 800fa24:	8066      	strh	r6, [r4, #2]
 800fa26:	b209      	sxth	r1, r1
 800fa28:	b21b      	sxth	r3, r3
 800fa2a:	4290      	cmp	r0, r2
 800fa2c:	bfac      	ite	ge
 800fa2e:	ebc7 0200 	rsbge	r2, r7, r0
 800fa32:	ebc7 0202 	rsblt	r2, r7, r2
 800fa36:	4299      	cmp	r1, r3
 800fa38:	bfac      	ite	ge
 800fa3a:	ebc6 0301 	rsbge	r3, r6, r1
 800fa3e:	ebc6 0303 	rsblt	r3, r6, r3
 800fa42:	80a2      	strh	r2, [r4, #4]
 800fa44:	80e3      	strh	r3, [r4, #6]
 800fa46:	e7d4      	b.n	800f9f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800fa48:	4620      	mov	r0, r4
 800fa4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fa4e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800fa4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fa52:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800fa56:	b383      	cbz	r3, 800faba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800fa58:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fa5a:	b374      	cbz	r4, 800faba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800fa5c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800fa60:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800fa64:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800fa68:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800fa6c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800fa70:	b303      	cbz	r3, 800fab4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800fa72:	4668      	mov	r0, sp
 800fa74:	1d21      	adds	r1, r4, #4
 800fa76:	f8ad 5000 	strh.w	r5, [sp]
 800fa7a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800fa7e:	f8ad 7004 	strh.w	r7, [sp, #4]
 800fa82:	f8ad 8006 	strh.w	r8, [sp, #6]
 800fa86:	f7ff ff43 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 800fa8a:	4668      	mov	r0, sp
 800fa8c:	f7ff ff83 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fa90:	b980      	cbnz	r0, 800fab4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800fa92:	f8bd 3000 	ldrh.w	r3, [sp]
 800fa96:	4669      	mov	r1, sp
 800fa98:	88a2      	ldrh	r2, [r4, #4]
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	1a9b      	subs	r3, r3, r2
 800fa9e:	88e2      	ldrh	r2, [r4, #6]
 800faa0:	f8ad 3000 	strh.w	r3, [sp]
 800faa4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800faa8:	1a9b      	subs	r3, r3, r2
 800faaa:	f8ad 3002 	strh.w	r3, [sp, #2]
 800faae:	6823      	ldr	r3, [r4, #0]
 800fab0:	689b      	ldr	r3, [r3, #8]
 800fab2:	4798      	blx	r3
 800fab4:	69a4      	ldr	r4, [r4, #24]
 800fab6:	2c00      	cmp	r4, #0
 800fab8:	d1d8      	bne.n	800fa6c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800faba:	b002      	add	sp, #8
 800fabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fac0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800fac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fac2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800fac6:	460d      	mov	r5, r1
 800fac8:	4616      	mov	r6, r2
 800faca:	b323      	cbz	r3, 800fb16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800facc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800face:	b314      	cbz	r4, 800fb16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800fad0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800fad4:	b1eb      	cbz	r3, 800fb12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800fad6:	6828      	ldr	r0, [r5, #0]
 800fad8:	466b      	mov	r3, sp
 800fada:	6869      	ldr	r1, [r5, #4]
 800fadc:	c303      	stmia	r3!, {r0, r1}
 800fade:	4668      	mov	r0, sp
 800fae0:	1d21      	adds	r1, r4, #4
 800fae2:	f7ff ff15 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 800fae6:	4668      	mov	r0, sp
 800fae8:	f7ff ff55 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 800faec:	b988      	cbnz	r0, 800fb12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800faee:	f8bd 3000 	ldrh.w	r3, [sp]
 800faf2:	4669      	mov	r1, sp
 800faf4:	88a2      	ldrh	r2, [r4, #4]
 800faf6:	4620      	mov	r0, r4
 800faf8:	1a9b      	subs	r3, r3, r2
 800fafa:	88e2      	ldrh	r2, [r4, #6]
 800fafc:	f8ad 3000 	strh.w	r3, [sp]
 800fb00:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fb04:	1a9b      	subs	r3, r3, r2
 800fb06:	4632      	mov	r2, r6
 800fb08:	f8ad 3002 	strh.w	r3, [sp, #2]
 800fb0c:	6823      	ldr	r3, [r4, #0]
 800fb0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb10:	4798      	blx	r3
 800fb12:	69a4      	ldr	r4, [r4, #24]
 800fb14:	e7db      	b.n	800face <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800fb16:	b002      	add	sp, #8
 800fb18:	bd70      	pop	{r4, r5, r6, pc}

0800fb1a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 800fb1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800fb1e:	4770      	bx	lr

0800fb20 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800fb20:	4770      	bx	lr

0800fb22 <_ZN8touchgfx3HAL10FlushCacheEv>:
 800fb22:	4770      	bx	lr

0800fb24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800fb24:	6803      	ldr	r3, [r0, #0]
 800fb26:	b513      	push	{r0, r1, r4, lr}
 800fb28:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	e9cd 3300 	strd	r3, r3, [sp]
 800fb32:	466b      	mov	r3, sp
 800fb34:	47a0      	blx	r4
 800fb36:	b002      	add	sp, #8
 800fb38:	bd10      	pop	{r4, pc}

0800fb3a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800fb40:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800fb44:	4770      	bx	lr

0800fb46 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800fb46:	2301      	movs	r3, #1
 800fb48:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800fb4c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800fb50:	4770      	bx	lr

0800fb52 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800fb52:	6843      	ldr	r3, [r0, #4]
 800fb54:	2201      	movs	r2, #1
 800fb56:	725a      	strb	r2, [r3, #9]
 800fb58:	6840      	ldr	r0, [r0, #4]
 800fb5a:	6803      	ldr	r3, [r0, #0]
 800fb5c:	691b      	ldr	r3, [r3, #16]
 800fb5e:	4718      	bx	r3

0800fb60 <_ZN8touchgfx3HAL8flushDMAEv>:
 800fb60:	6840      	ldr	r0, [r0, #4]
 800fb62:	6803      	ldr	r3, [r0, #0]
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	4718      	bx	r3

0800fb68 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800fb68:	b530      	push	{r4, r5, lr}
 800fb6a:	b08b      	sub	sp, #44	; 0x2c
 800fb6c:	6804      	ldr	r4, [r0, #0]
 800fb6e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800fb72:	9508      	str	r5, [sp, #32]
 800fb74:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800fb78:	9507      	str	r5, [sp, #28]
 800fb7a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800fb7e:	9506      	str	r5, [sp, #24]
 800fb80:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800fb84:	9505      	str	r5, [sp, #20]
 800fb86:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800fb8a:	9504      	str	r5, [sp, #16]
 800fb8c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800fb90:	9503      	str	r5, [sp, #12]
 800fb92:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800fb96:	9502      	str	r5, [sp, #8]
 800fb98:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800fb9c:	e9cd 3500 	strd	r3, r5, [sp]
 800fba0:	4613      	mov	r3, r2
 800fba2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fba4:	2200      	movs	r2, #0
 800fba6:	47a0      	blx	r4
 800fba8:	b00b      	add	sp, #44	; 0x2c
 800fbaa:	bd30      	pop	{r4, r5, pc}

0800fbac <_ZN8touchgfx3HAL10beginFrameEv>:
 800fbac:	4b04      	ldr	r3, [pc, #16]	; (800fbc0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	b123      	cbz	r3, 800fbbc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800fbb2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800fbb6:	f080 0001 	eor.w	r0, r0, #1
 800fbba:	4770      	bx	lr
 800fbbc:	2001      	movs	r0, #1
 800fbbe:	4770      	bx	lr
 800fbc0:	2000df6e 	.word	0x2000df6e

0800fbc4 <_ZN8touchgfx3HAL8endFrameEv>:
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	6840      	ldr	r0, [r0, #4]
 800fbca:	6803      	ldr	r3, [r0, #0]
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	4798      	blx	r3
 800fbd0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800fbd4:	b113      	cbz	r3, 800fbdc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800fbdc:	bd10      	pop	{r4, pc}

0800fbde <_ZN8touchgfx3HAL10initializeEv>:
 800fbde:	b510      	push	{r4, lr}
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	f7f2 fdfd 	bl	80027e0 <_ZN8touchgfx10OSWrappers10initializeEv>
 800fbe6:	6860      	ldr	r0, [r4, #4]
 800fbe8:	6803      	ldr	r3, [r0, #0]
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	4798      	blx	r3
 800fbee:	68e0      	ldr	r0, [r4, #12]
 800fbf0:	6803      	ldr	r3, [r0, #0]
 800fbf2:	689b      	ldr	r3, [r3, #8]
 800fbf4:	4798      	blx	r3
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc00:	4718      	bx	r3

0800fc02 <_ZN8touchgfx3HAL9taskEntryEv>:
 800fc02:	b508      	push	{r3, lr}
 800fc04:	6803      	ldr	r3, [r0, #0]
 800fc06:	4604      	mov	r4, r0
 800fc08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc0a:	4798      	blx	r3
 800fc0c:	6823      	ldr	r3, [r4, #0]
 800fc0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc10:	4620      	mov	r0, r4
 800fc12:	4798      	blx	r3
 800fc14:	f7f2 fe5a 	bl	80028cc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800fc18:	6823      	ldr	r3, [r4, #0]
 800fc1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc1c:	e7f8      	b.n	800fc10 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800fc20 <_ZN8touchgfx3HAL4tickEv>:
 800fc20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fc22:	6803      	ldr	r3, [r0, #0]
 800fc24:	4604      	mov	r4, r0
 800fc26:	4d5c      	ldr	r5, [pc, #368]	; (800fd98 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800fc28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fc2c:	4798      	blx	r3
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	f000 8097 	beq.w	800fd62 <_ZN8touchgfx3HAL4tickEv+0x142>
 800fc34:	2001      	movs	r0, #1
 800fc36:	2600      	movs	r6, #0
 800fc38:	f7f2 fbbe 	bl	80023b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800fc3c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800fc40:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800fc44:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800fc48:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800fc4c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800fc50:	b133      	cbz	r3, 800fc60 <_ZN8touchgfx3HAL4tickEv+0x40>
 800fc52:	6823      	ldr	r3, [r4, #0]
 800fc54:	4620      	mov	r0, r4
 800fc56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fc5a:	4798      	blx	r3
 800fc5c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800fc60:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800fc64:	2601      	movs	r6, #1
 800fc66:	6862      	ldr	r2, [r4, #4]
 800fc68:	f083 0301 	eor.w	r3, r3, #1
 800fc6c:	702e      	strb	r6, [r5, #0]
 800fc6e:	7253      	strb	r3, [r2, #9]
 800fc70:	f003 f834 	bl	8012cdc <_ZN8touchgfx11Application11getInstanceEv>
 800fc74:	6803      	ldr	r3, [r0, #0]
 800fc76:	4631      	mov	r1, r6
 800fc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc7a:	4798      	blx	r3
 800fc7c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800fc80:	b90b      	cbnz	r3, 800fc86 <_ZN8touchgfx3HAL4tickEv+0x66>
 800fc82:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800fc86:	f003 f829 	bl	8012cdc <_ZN8touchgfx11Application11getInstanceEv>
 800fc8a:	6803      	ldr	r3, [r0, #0]
 800fc8c:	695b      	ldr	r3, [r3, #20]
 800fc8e:	4798      	blx	r3
 800fc90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc92:	6803      	ldr	r3, [r0, #0]
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	4798      	blx	r3
 800fc98:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800fc9c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800fca0:	3b01      	subs	r3, #1
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800fca8:	b10a      	cbz	r2, 800fcae <_ZN8touchgfx3HAL4tickEv+0x8e>
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1eb      	bne.n	800fc86 <_ZN8touchgfx3HAL4tickEv+0x66>
 800fcae:	4a3b      	ldr	r2, [pc, #236]	; (800fd9c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800fcb0:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800fcb4:	7813      	ldrb	r3, [r2, #0]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	b25b      	sxtb	r3, r3
 800fcba:	4299      	cmp	r1, r3
 800fcbc:	7013      	strb	r3, [r2, #0]
 800fcbe:	dc10      	bgt.n	800fce2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	68e0      	ldr	r0, [r4, #12]
 800fcc4:	a902      	add	r1, sp, #8
 800fcc6:	7013      	strb	r3, [r2, #0]
 800fcc8:	aa03      	add	r2, sp, #12
 800fcca:	6803      	ldr	r3, [r0, #0]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	4798      	blx	r3
 800fcd0:	6823      	ldr	r3, [r4, #0]
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d051      	beq.n	800fd7a <_ZN8touchgfx3HAL4tickEv+0x15a>
 800fcd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fcda:	4620      	mov	r0, r4
 800fcdc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800fce0:	4798      	blx	r3
 800fce2:	2300      	movs	r3, #0
 800fce4:	6960      	ldr	r0, [r4, #20]
 800fce6:	f88d 3007 	strb.w	r3, [sp, #7]
 800fcea:	b158      	cbz	r0, 800fd04 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800fcec:	6803      	ldr	r3, [r0, #0]
 800fcee:	f10d 0107 	add.w	r1, sp, #7
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	4798      	blx	r3
 800fcf6:	b128      	cbz	r0, 800fd04 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800fcf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcfa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fcfe:	6803      	ldr	r3, [r0, #0]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	4798      	blx	r3
 800fd04:	f104 001c 	add.w	r0, r4, #28
 800fd08:	f00d ff6c 	bl	801dbe4 <_ZN8touchgfx8Gestures4tickEv>
 800fd0c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800fd10:	b30b      	cbz	r3, 800fd56 <_ZN8touchgfx3HAL4tickEv+0x136>
 800fd12:	6920      	ldr	r0, [r4, #16]
 800fd14:	6803      	ldr	r3, [r0, #0]
 800fd16:	691b      	ldr	r3, [r3, #16]
 800fd18:	4798      	blx	r3
 800fd1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fd1c:	4606      	mov	r6, r0
 800fd1e:	b903      	cbnz	r3, 800fd22 <_ZN8touchgfx3HAL4tickEv+0x102>
 800fd20:	6720      	str	r0, [r4, #112]	; 0x70
 800fd22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fd24:	4a1e      	ldr	r2, [pc, #120]	; (800fda0 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800fd26:	1af3      	subs	r3, r6, r3
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d914      	bls.n	800fd56 <_ZN8touchgfx3HAL4tickEv+0x136>
 800fd2c:	6920      	ldr	r0, [r4, #16]
 800fd2e:	6803      	ldr	r3, [r0, #0]
 800fd30:	699b      	ldr	r3, [r3, #24]
 800fd32:	4798      	blx	r3
 800fd34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fd36:	2264      	movs	r2, #100	; 0x64
 800fd38:	1af3      	subs	r3, r6, r3
 800fd3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd3e:	fbb0 f0f3 	udiv	r0, r0, r3
 800fd42:	2800      	cmp	r0, #0
 800fd44:	dc1e      	bgt.n	800fd84 <_ZN8touchgfx3HAL4tickEv+0x164>
 800fd46:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800fd4a:	6920      	ldr	r0, [r4, #16]
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	6803      	ldr	r3, [r0, #0]
 800fd50:	69db      	ldr	r3, [r3, #28]
 800fd52:	4798      	blx	r3
 800fd54:	6726      	str	r6, [r4, #112]	; 0x70
 800fd56:	f002 ffc1 	bl	8012cdc <_ZN8touchgfx11Application11getInstanceEv>
 800fd5a:	6803      	ldr	r3, [r0, #0]
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd60:	4798      	blx	r3
 800fd62:	6823      	ldr	r3, [r4, #0]
 800fd64:	4620      	mov	r0, r4
 800fd66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fd6a:	4798      	blx	r3
 800fd6c:	2001      	movs	r0, #1
 800fd6e:	f7f2 fb2e 	bl	80023ce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800fd72:	2300      	movs	r3, #0
 800fd74:	702b      	strb	r3, [r5, #0]
 800fd76:	b004      	add	sp, #16
 800fd78:	bd70      	pop	{r4, r5, r6, pc}
 800fd7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fd7e:	4620      	mov	r0, r4
 800fd80:	4798      	blx	r3
 800fd82:	e7ae      	b.n	800fce2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800fd84:	2863      	cmp	r0, #99	; 0x63
 800fd86:	bfcb      	itete	gt
 800fd88:	2300      	movgt	r3, #0
 800fd8a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800fd8e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800fd92:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800fd96:	e7d8      	b.n	800fd4a <_ZN8touchgfx3HAL4tickEv+0x12a>
 800fd98:	2000df74 	.word	0x2000df74
 800fd9c:	2000df75 	.word	0x2000df75
 800fda0:	05f5e100 	.word	0x05f5e100

0800fda4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800fda4:	f7f2 bd5e 	b.w	8002864 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800fda8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800fda8:	6581      	str	r1, [r0, #88]	; 0x58
 800fdaa:	301c      	adds	r0, #28
 800fdac:	f00d bf18 	b.w	801dbe0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800fdb0 <_ZN8touchgfx3HAL5touchEll>:
 800fdb0:	b530      	push	{r4, r5, lr}
 800fdb2:	b087      	sub	sp, #28
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	a804      	add	r0, sp, #16
 800fdb8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800fdbc:	f002 fd3c 	bl	8012838 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800fdc0:	9b04      	ldr	r3, [sp, #16]
 800fdc2:	a906      	add	r1, sp, #24
 800fdc4:	a803      	add	r0, sp, #12
 800fdc6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fdca:	9b05      	ldr	r3, [sp, #20]
 800fdcc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800fdd0:	f002 fd70 	bl	80128b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800fdd4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800fdd8:	f104 001c 	add.w	r0, r4, #28
 800fddc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800fde0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800fde4:	b189      	cbz	r1, 800fe0a <_ZN8touchgfx3HAL5touchEll+0x5a>
 800fde6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	4613      	mov	r3, r2
 800fdee:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800fdf2:	462a      	mov	r2, r5
 800fdf4:	f00d ff04 	bl	801dc00 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800fdf8:	b128      	cbz	r0, 800fe06 <_ZN8touchgfx3HAL5touchEll+0x56>
 800fdfa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800fdfe:	65e3      	str	r3, [r4, #92]	; 0x5c
 800fe00:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fe04:	6623      	str	r3, [r4, #96]	; 0x60
 800fe06:	b007      	add	sp, #28
 800fe08:	bd30      	pop	{r4, r5, pc}
 800fe0a:	f00d ff3d 	bl	801dc88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800fe14:	e7f1      	b.n	800fdfa <_ZN8touchgfx3HAL5touchEll+0x4a>

0800fe16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800fe16:	b570      	push	{r4, r5, r6, lr}
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d050      	beq.n	800febe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800fe1c:	ea81 0002 	eor.w	r0, r1, r2
 800fe20:	07c6      	lsls	r6, r0, #31
 800fe22:	d508      	bpl.n	800fe36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800fe24:	3a01      	subs	r2, #1
 800fe26:	18cc      	adds	r4, r1, r3
 800fe28:	42a1      	cmp	r1, r4
 800fe2a:	d048      	beq.n	800febe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800fe2c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fe30:	f801 0b01 	strb.w	r0, [r1], #1
 800fe34:	e7f8      	b.n	800fe28 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800fe36:	07d5      	lsls	r5, r2, #31
 800fe38:	bf42      	ittt	mi
 800fe3a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800fe3e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800fe42:	f801 0b01 	strbmi.w	r0, [r1], #1
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d915      	bls.n	800fe76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800fe4a:	ea82 0001 	eor.w	r0, r2, r1
 800fe4e:	0784      	lsls	r4, r0, #30
 800fe50:	d02d      	beq.n	800feae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 800fe52:	1e94      	subs	r4, r2, #2
 800fe54:	4608      	mov	r0, r1
 800fe56:	18ce      	adds	r6, r1, r3
 800fe58:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 800fe5c:	f820 5b02 	strh.w	r5, [r0], #2
 800fe60:	1a35      	subs	r5, r6, r0
 800fe62:	2d01      	cmp	r5, #1
 800fe64:	d8f8      	bhi.n	800fe58 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 800fe66:	1e98      	subs	r0, r3, #2
 800fe68:	f003 0301 	and.w	r3, r3, #1
 800fe6c:	f020 0001 	bic.w	r0, r0, #1
 800fe70:	3002      	adds	r0, #2
 800fe72:	4401      	add	r1, r0
 800fe74:	4402      	add	r2, r0
 800fe76:	1f14      	subs	r4, r2, #4
 800fe78:	4608      	mov	r0, r1
 800fe7a:	18ce      	adds	r6, r1, r3
 800fe7c:	1a35      	subs	r5, r6, r0
 800fe7e:	2d03      	cmp	r5, #3
 800fe80:	d810      	bhi.n	800fea4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 800fe82:	089c      	lsrs	r4, r3, #2
 800fe84:	00a0      	lsls	r0, r4, #2
 800fe86:	4401      	add	r1, r0
 800fe88:	3801      	subs	r0, #1
 800fe8a:	4402      	add	r2, r0
 800fe8c:	f06f 0003 	mvn.w	r0, #3
 800fe90:	fb00 3404 	mla	r4, r0, r4, r3
 800fe94:	440c      	add	r4, r1
 800fe96:	42a1      	cmp	r1, r4
 800fe98:	d011      	beq.n	800febe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800fe9a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800fe9e:	f801 3b01 	strb.w	r3, [r1], #1
 800fea2:	e7f8      	b.n	800fe96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800fea4:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800fea8:	f840 5b04 	str.w	r5, [r0], #4
 800feac:	e7e6      	b.n	800fe7c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800feae:	0790      	lsls	r0, r2, #30
 800feb0:	d0e1      	beq.n	800fe76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800feb2:	f832 0b02 	ldrh.w	r0, [r2], #2
 800feb6:	3b02      	subs	r3, #2
 800feb8:	f821 0b02 	strh.w	r0, [r1], #2
 800febc:	e7db      	b.n	800fe76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800febe:	2001      	movs	r0, #1
 800fec0:	bd70      	pop	{r4, r5, r6, pc}

0800fec2 <_ZN8touchgfx3HAL7noTouchEv>:
 800fec2:	b510      	push	{r4, lr}
 800fec4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800fec8:	4604      	mov	r4, r0
 800feca:	b153      	cbz	r3, 800fee2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800fecc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800fed0:	2101      	movs	r1, #1
 800fed2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800fed6:	301c      	adds	r0, #28
 800fed8:	f00d fed6 	bl	801dc88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800fedc:	2300      	movs	r3, #0
 800fede:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800fee2:	bd10      	pop	{r4, pc}

0800fee4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800fee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fee8:	4604      	mov	r4, r0
 800feea:	6980      	ldr	r0, [r0, #24]
 800feec:	b085      	sub	sp, #20
 800feee:	460f      	mov	r7, r1
 800fef0:	4690      	mov	r8, r2
 800fef2:	4699      	mov	r9, r3
 800fef4:	b930      	cbnz	r0, 800ff04 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800fef6:	4b1c      	ldr	r3, [pc, #112]	; (800ff68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800fef8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800fefc:	4a1b      	ldr	r2, [pc, #108]	; (800ff6c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800fefe:	481c      	ldr	r0, [pc, #112]	; (800ff70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800ff00:	f00d ff58 	bl	801ddb4 <__assert_func>
 800ff04:	ad04      	add	r5, sp, #16
 800ff06:	2600      	movs	r6, #0
 800ff08:	f845 6d04 	str.w	r6, [r5, #-4]!
 800ff0c:	6806      	ldr	r6, [r0, #0]
 800ff0e:	9501      	str	r5, [sp, #4]
 800ff10:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800ff14:	9500      	str	r5, [sp, #0]
 800ff16:	6835      	ldr	r5, [r6, #0]
 800ff18:	47a8      	blx	r5
 800ff1a:	4d16      	ldr	r5, [pc, #88]	; (800ff74 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	f8a5 9000 	strh.w	r9, [r5]
 800ff22:	f7f4 fcd7 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 800ff26:	6803      	ldr	r3, [r0, #0]
 800ff28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2a:	4798      	blx	r3
 800ff2c:	2801      	cmp	r0, #1
 800ff2e:	d012      	beq.n	800ff56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800ff30:	d306      	bcc.n	800ff40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800ff32:	280d      	cmp	r0, #13
 800ff34:	d80b      	bhi.n	800ff4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800ff36:	4b10      	ldr	r3, [pc, #64]	; (800ff78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800ff38:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800ff3c:	4a0b      	ldr	r2, [pc, #44]	; (800ff6c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800ff3e:	e7de      	b.n	800fefe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800ff40:	882b      	ldrh	r3, [r5, #0]
 800ff42:	fb08 7203 	mla	r2, r8, r3, r7
 800ff46:	9b03      	ldr	r3, [sp, #12]
 800ff48:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800ff4c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ff4e:	4630      	mov	r0, r6
 800ff50:	b005      	add	sp, #20
 800ff52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff56:	882a      	ldrh	r2, [r5, #0]
 800ff58:	9b03      	ldr	r3, [sp, #12]
 800ff5a:	fb08 7202 	mla	r2, r8, r2, r7
 800ff5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ff62:	1a9a      	subs	r2, r3, r2
 800ff64:	63e2      	str	r2, [r4, #60]	; 0x3c
 800ff66:	e7f2      	b.n	800ff4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800ff68:	080205f0 	.word	0x080205f0
 800ff6c:	08020975 	.word	0x08020975
 800ff70:	08020635 	.word	0x08020635
 800ff74:	2000df6a 	.word	0x2000df6a
 800ff78:	0802065b 	.word	0x0802065b

0800ff7c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800ff7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7e:	b08b      	sub	sp, #44	; 0x2c
 800ff80:	4617      	mov	r7, r2
 800ff82:	4604      	mov	r4, r0
 800ff84:	460e      	mov	r6, r1
 800ff86:	461d      	mov	r5, r3
 800ff88:	f7f4 fca4 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 800ff8c:	6803      	ldr	r3, [r0, #0]
 800ff8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff90:	4798      	blx	r3
 800ff92:	4b0f      	ldr	r3, [pc, #60]	; (800ffd0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 800ff94:	6822      	ldr	r2, [r4, #0]
 800ff96:	4631      	mov	r1, r6
 800ff98:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	9306      	str	r3, [sp, #24]
 800ffa2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ffa6:	9305      	str	r3, [sp, #20]
 800ffa8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800ffac:	9304      	str	r3, [sp, #16]
 800ffae:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ffb2:	9303      	str	r3, [sp, #12]
 800ffb4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ffb8:	9302      	str	r3, [sp, #8]
 800ffba:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ffbe:	e9cd 5300 	strd	r5, r3, [sp]
 800ffc2:	463b      	mov	r3, r7
 800ffc4:	6b95      	ldr	r5, [r2, #56]	; 0x38
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	47a8      	blx	r5
 800ffca:	b00b      	add	sp, #44	; 0x2c
 800ffcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	2000df6a 	.word	0x2000df6a

0800ffd4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800ffd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffd8:	4698      	mov	r8, r3
 800ffda:	6803      	ldr	r3, [r0, #0]
 800ffdc:	b08b      	sub	sp, #44	; 0x2c
 800ffde:	4617      	mov	r7, r2
 800ffe0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800ffe2:	460e      	mov	r6, r1
 800ffe4:	4b11      	ldr	r3, [pc, #68]	; (801002c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	f8b3 9000 	ldrh.w	r9, [r3]
 800ffec:	f7f4 fc72 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 800fff0:	6803      	ldr	r3, [r0, #0]
 800fff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff4:	4798      	blx	r3
 800fff6:	2302      	movs	r3, #2
 800fff8:	9008      	str	r0, [sp, #32]
 800fffa:	2200      	movs	r2, #0
 800fffc:	4631      	mov	r1, r6
 800fffe:	4620      	mov	r0, r4
 8010000:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8010004:	2301      	movs	r3, #1
 8010006:	9305      	str	r3, [sp, #20]
 8010008:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801000c:	9304      	str	r3, [sp, #16]
 801000e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010012:	9303      	str	r3, [sp, #12]
 8010014:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010018:	9302      	str	r3, [sp, #8]
 801001a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801001e:	e9cd 8300 	strd	r8, r3, [sp]
 8010022:	463b      	mov	r3, r7
 8010024:	47a8      	blx	r5
 8010026:	b00b      	add	sp, #44	; 0x2c
 8010028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801002c:	2000df6a 	.word	0x2000df6a

08010030 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8010030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010034:	4698      	mov	r8, r3
 8010036:	6803      	ldr	r3, [r0, #0]
 8010038:	b087      	sub	sp, #28
 801003a:	460e      	mov	r6, r1
 801003c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801003e:	4617      	mov	r7, r2
 8010040:	4b0d      	ldr	r3, [pc, #52]	; (8010078 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8010042:	4604      	mov	r4, r0
 8010044:	f8b3 9000 	ldrh.w	r9, [r3]
 8010048:	f7f4 fc44 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 801004c:	6803      	ldr	r3, [r0, #0]
 801004e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010050:	4798      	blx	r3
 8010052:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8010056:	463a      	mov	r2, r7
 8010058:	4631      	mov	r1, r6
 801005a:	9302      	str	r3, [sp, #8]
 801005c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010060:	9301      	str	r3, [sp, #4]
 8010062:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010066:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	4620      	mov	r0, r4
 801006e:	4643      	mov	r3, r8
 8010070:	47a8      	blx	r5
 8010072:	b007      	add	sp, #28
 8010074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010078:	2000df6a 	.word	0x2000df6a

0801007c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801007c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010080:	4604      	mov	r4, r0
 8010082:	b08f      	sub	sp, #60	; 0x3c
 8010084:	4610      	mov	r0, r2
 8010086:	460d      	mov	r5, r1
 8010088:	4691      	mov	r9, r2
 801008a:	461e      	mov	r6, r3
 801008c:	f005 fa36 	bl	80154fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010090:	2800      	cmp	r0, #0
 8010092:	f000 80b3 	beq.w	80101fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 8010096:	6823      	ldr	r3, [r4, #0]
 8010098:	4620      	mov	r0, r4
 801009a:	f8df b190 	ldr.w	fp, [pc, #400]	; 801022c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 801009e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80100a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a4:	4798      	blx	r3
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	4620      	mov	r0, r4
 80100aa:	f8df a184 	ldr.w	sl, [pc, #388]	; 8010230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 80100ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100b0:	4798      	blx	r3
 80100b2:	f8bb 3000 	ldrh.w	r3, [fp]
 80100b6:	4f5a      	ldr	r7, [pc, #360]	; (8010220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80100b8:	9300      	str	r3, [sp, #0]
 80100ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80100be:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80100c2:	4640      	mov	r0, r8
 80100c4:	9301      	str	r3, [sp, #4]
 80100c6:	883b      	ldrh	r3, [r7, #0]
 80100c8:	9302      	str	r3, [sp, #8]
 80100ca:	4b56      	ldr	r3, [pc, #344]	; (8010224 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80100cc:	881a      	ldrh	r2, [r3, #0]
 80100ce:	9304      	str	r3, [sp, #16]
 80100d0:	9203      	str	r2, [sp, #12]
 80100d2:	f005 facd 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80100d6:	8038      	strh	r0, [r7, #0]
 80100d8:	4640      	mov	r0, r8
 80100da:	f005 fb03 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80100de:	9b04      	ldr	r3, [sp, #16]
 80100e0:	8018      	strh	r0, [r3, #0]
 80100e2:	4b51      	ldr	r3, [pc, #324]	; (8010228 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f040 808b 	bne.w	8010202 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 80100ec:	883b      	ldrh	r3, [r7, #0]
 80100ee:	f8aa 0000 	strh.w	r0, [sl]
 80100f2:	f8ab 3000 	strh.w	r3, [fp]
 80100f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80100f8:	4648      	mov	r0, r9
 80100fa:	6c27      	ldr	r7, [r4, #64]	; 0x40
 80100fc:	9304      	str	r3, [sp, #16]
 80100fe:	f005 f9fd 	bl	80154fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010102:	2200      	movs	r2, #0
 8010104:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8010108:	4611      	mov	r1, r2
 801010a:	4628      	mov	r0, r5
 801010c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8010110:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8010114:	f7f5 fac8 	bl	80056a8 <_ZN8touchgfx8Drawable5setXYEss>
 8010118:	2301      	movs	r3, #1
 801011a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801011e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8010122:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	dd71      	ble.n	801020e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 801012a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801012e:	2b00      	cmp	r3, #0
 8010130:	dd6d      	ble.n	801020e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8010132:	462a      	mov	r2, r5
 8010134:	ab0a      	add	r3, sp, #40	; 0x28
 8010136:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801013a:	6851      	ldr	r1, [r2, #4]
 801013c:	c303      	stmia	r3!, {r0, r1}
 801013e:	4631      	mov	r1, r6
 8010140:	a80a      	add	r0, sp, #40	; 0x28
 8010142:	f7ff fbe5 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 8010146:	4b36      	ldr	r3, [pc, #216]	; (8010220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8010148:	2600      	movs	r6, #0
 801014a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801014e:	4b35      	ldr	r3, [pc, #212]	; (8010224 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8010150:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8010154:	aa0a      	add	r2, sp, #40	; 0x28
 8010156:	f9b3 3000 	ldrsh.w	r3, [r3]
 801015a:	960c      	str	r6, [sp, #48]	; 0x30
 801015c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010160:	ab08      	add	r3, sp, #32
 8010162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010166:	e883 0003 	stmia.w	r3, {r0, r1}
 801016a:	4618      	mov	r0, r3
 801016c:	a90c      	add	r1, sp, #48	; 0x30
 801016e:	f7ff fbcf 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 8010172:	a807      	add	r0, sp, #28
 8010174:	f005 fc0e 	bl	8015994 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010178:	4680      	mov	r8, r0
 801017a:	f7f4 fbab 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 801017e:	6802      	ldr	r2, [r0, #0]
 8010180:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010182:	4790      	blx	r2
 8010184:	4580      	cmp	r8, r0
 8010186:	d049      	beq.n	801021c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 8010188:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801018a:	b150      	cbz	r0, 80101a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 801018c:	a807      	add	r0, sp, #28
 801018e:	f005 fc01 	bl	8015994 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010192:	4606      	mov	r6, r0
 8010194:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010196:	6803      	ldr	r3, [r0, #0]
 8010198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801019a:	4798      	blx	r3
 801019c:	1a33      	subs	r3, r6, r0
 801019e:	4258      	negs	r0, r3
 80101a0:	4158      	adcs	r0, r3
 80101a2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80101a6:	2600      	movs	r6, #0
 80101a8:	696b      	ldr	r3, [r5, #20]
 80101aa:	a908      	add	r1, sp, #32
 80101ac:	682a      	ldr	r2, [r5, #0]
 80101ae:	4628      	mov	r0, r5
 80101b0:	9305      	str	r3, [sp, #20]
 80101b2:	616e      	str	r6, [r5, #20]
 80101b4:	6892      	ldr	r2, [r2, #8]
 80101b6:	4790      	blx	r2
 80101b8:	9b05      	ldr	r3, [sp, #20]
 80101ba:	4652      	mov	r2, sl
 80101bc:	4649      	mov	r1, r9
 80101be:	616b      	str	r3, [r5, #20]
 80101c0:	4628      	mov	r0, r5
 80101c2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80101c6:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80101ca:	f7f5 fa6d 	bl	80056a8 <_ZN8touchgfx8Drawable5setXYEss>
 80101ce:	9b04      	ldr	r3, [sp, #16]
 80101d0:	9a00      	ldr	r2, [sp, #0]
 80101d2:	4620      	mov	r0, r4
 80101d4:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 80101d8:	4b14      	ldr	r3, [pc, #80]	; (801022c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80101da:	801a      	strh	r2, [r3, #0]
 80101dc:	9a01      	ldr	r2, [sp, #4]
 80101de:	4b14      	ldr	r3, [pc, #80]	; (8010230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80101e0:	801a      	strh	r2, [r3, #0]
 80101e2:	9a02      	ldr	r2, [sp, #8]
 80101e4:	4b0e      	ldr	r3, [pc, #56]	; (8010220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80101e6:	801a      	strh	r2, [r3, #0]
 80101e8:	4b0e      	ldr	r3, [pc, #56]	; (8010224 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80101ea:	9a03      	ldr	r2, [sp, #12]
 80101ec:	801a      	strh	r2, [r3, #0]
 80101ee:	6823      	ldr	r3, [r4, #0]
 80101f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f2:	4798      	blx	r3
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	4620      	mov	r0, r4
 80101f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101fa:	4798      	blx	r3
 80101fc:	b00f      	add	sp, #60	; 0x3c
 80101fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010202:	883b      	ldrh	r3, [r7, #0]
 8010204:	f8ab 0000 	strh.w	r0, [fp]
 8010208:	f8aa 3000 	strh.w	r3, [sl]
 801020c:	e773      	b.n	80100f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801020e:	462a      	mov	r2, r5
 8010210:	ab0a      	add	r3, sp, #40	; 0x28
 8010212:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010216:	6851      	ldr	r1, [r2, #4]
 8010218:	c303      	stmia	r3!, {r0, r1}
 801021a:	e794      	b.n	8010146 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 801021c:	4630      	mov	r0, r6
 801021e:	e7c0      	b.n	80101a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8010220:	2000df64 	.word	0x2000df64
 8010224:	2000df66 	.word	0x2000df66
 8010228:	2000df68 	.word	0x2000df68
 801022c:	2000df6a 	.word	0x2000df6a
 8010230:	2000df6c 	.word	0x2000df6c

08010234 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010234:	4b07      	ldr	r3, [pc, #28]	; (8010254 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8010236:	b510      	push	{r4, lr}
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	4604      	mov	r4, r0
 801023c:	b13b      	cbz	r3, 801024e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801023e:	6803      	ldr	r3, [r0, #0]
 8010240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010242:	4798      	blx	r3
 8010244:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010246:	4283      	cmp	r3, r0
 8010248:	d101      	bne.n	801024e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801024a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801024c:	bd10      	pop	{r4, pc}
 801024e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010250:	e7fc      	b.n	801024c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8010252:	bf00      	nop
 8010254:	2000df6e 	.word	0x2000df6e

08010258 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801025c:	b088      	sub	sp, #32
 801025e:	4692      	mov	sl, r2
 8010260:	461c      	mov	r4, r3
 8010262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010266:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 801026a:	2500      	movs	r5, #0
 801026c:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8010270:	4606      	mov	r6, r0
 8010272:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8010276:	fb09 a404 	mla	r4, r9, r4, sl
 801027a:	9503      	str	r5, [sp, #12]
 801027c:	f8ad 8014 	strh.w	r8, [sp, #20]
 8010280:	f8ad 7016 	strh.w	r7, [sp, #22]
 8010284:	f88d 501c 	strb.w	r5, [sp, #28]
 8010288:	e9cd 3100 	strd	r3, r1, [sp]
 801028c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010290:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010294:	f7ff ffce 	bl	8010234 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010298:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801029c:	f8ad 901a 	strh.w	r9, [sp, #26]
 80102a0:	f88d 501e 	strb.w	r5, [sp, #30]
 80102a4:	9404      	str	r4, [sp, #16]
 80102a6:	f88d 501d 	strb.w	r5, [sp, #29]
 80102aa:	f1b8 0f00 	cmp.w	r8, #0
 80102ae:	d000      	beq.n	80102b2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 80102b0:	b937      	cbnz	r7, 80102c0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 80102b2:	4b0d      	ldr	r3, [pc, #52]	; (80102e8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 80102b4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80102b8:	4a0c      	ldr	r2, [pc, #48]	; (80102ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80102ba:	480d      	ldr	r0, [pc, #52]	; (80102f0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80102bc:	f00d fd7a 	bl	801ddb4 <__assert_func>
 80102c0:	6833      	ldr	r3, [r6, #0]
 80102c2:	4630      	mov	r0, r6
 80102c4:	9c00      	ldr	r4, [sp, #0]
 80102c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102c8:	4798      	blx	r3
 80102ca:	4220      	tst	r0, r4
 80102cc:	d104      	bne.n	80102d8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 80102ce:	4b09      	ldr	r3, [pc, #36]	; (80102f4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80102d0:	f240 2105 	movw	r1, #517	; 0x205
 80102d4:	4a05      	ldr	r2, [pc, #20]	; (80102ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80102d6:	e7f0      	b.n	80102ba <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 80102d8:	6870      	ldr	r0, [r6, #4]
 80102da:	4669      	mov	r1, sp
 80102dc:	6803      	ldr	r3, [r0, #0]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	4798      	blx	r3
 80102e2:	b008      	add	sp, #32
 80102e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102e8:	08020483 	.word	0x08020483
 80102ec:	080207b0 	.word	0x080207b0
 80102f0:	08020635 	.word	0x08020635
 80102f4:	080204bb 	.word	0x080204bb

080102f8 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80102f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fc:	b089      	sub	sp, #36	; 0x24
 80102fe:	4693      	mov	fp, r2
 8010300:	461d      	mov	r5, r3
 8010302:	2400      	movs	r4, #0
 8010304:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8010308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801030c:	468a      	mov	sl, r1
 801030e:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8010312:	fb09 b505 	mla	r5, r9, r5, fp
 8010316:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801031a:	4606      	mov	r6, r0
 801031c:	9403      	str	r4, [sp, #12]
 801031e:	e9cd 3400 	strd	r3, r4, [sp]
 8010322:	f7ff ff87 	bl	8010234 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010326:	f8ad 8014 	strh.w	r8, [sp, #20]
 801032a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801032e:	f8ad 7016 	strh.w	r7, [sp, #22]
 8010332:	f8ad 4018 	strh.w	r4, [sp, #24]
 8010336:	9504      	str	r5, [sp, #16]
 8010338:	f8ad 901a 	strh.w	r9, [sp, #26]
 801033c:	f8cd a00c 	str.w	sl, [sp, #12]
 8010340:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010344:	f88d 401e 	strb.w	r4, [sp, #30]
 8010348:	f1b8 0f00 	cmp.w	r8, #0
 801034c:	d000      	beq.n	8010350 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 801034e:	b937      	cbnz	r7, 801035e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 8010350:	4b0d      	ldr	r3, [pc, #52]	; (8010388 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 8010352:	f240 2119 	movw	r1, #537	; 0x219
 8010356:	4a0d      	ldr	r2, [pc, #52]	; (801038c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8010358:	480d      	ldr	r0, [pc, #52]	; (8010390 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 801035a:	f00d fd2b 	bl	801ddb4 <__assert_func>
 801035e:	6833      	ldr	r3, [r6, #0]
 8010360:	4630      	mov	r0, r6
 8010362:	9c00      	ldr	r4, [sp, #0]
 8010364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010366:	4798      	blx	r3
 8010368:	4220      	tst	r0, r4
 801036a:	d104      	bne.n	8010376 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 801036c:	4b09      	ldr	r3, [pc, #36]	; (8010394 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 801036e:	f240 211a 	movw	r1, #538	; 0x21a
 8010372:	4a06      	ldr	r2, [pc, #24]	; (801038c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8010374:	e7f0      	b.n	8010358 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8010376:	6870      	ldr	r0, [r6, #4]
 8010378:	4669      	mov	r1, sp
 801037a:	6803      	ldr	r3, [r0, #0]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	4798      	blx	r3
 8010380:	b009      	add	sp, #36	; 0x24
 8010382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010386:	bf00      	nop
 8010388:	08020500 	.word	0x08020500
 801038c:	08020826 	.word	0x08020826
 8010390:	08020635 	.word	0x08020635
 8010394:	08020538 	.word	0x08020538

08010398 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8010398:	b508      	push	{r3, lr}
 801039a:	290d      	cmp	r1, #13
 801039c:	d817      	bhi.n	80103ce <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801039e:	e8df f001 	tbb	[pc, r1]
 80103a2:	090b      	.short	0x090b
 80103a4:	0d0d0d07 	.word	0x0d0d0d07
 80103a8:	1414140d 	.word	0x1414140d
 80103ac:	0d0d1414 	.word	0x0d0d1414
 80103b0:	2020      	movs	r0, #32
 80103b2:	bd08      	pop	{r3, pc}
 80103b4:	2018      	movs	r0, #24
 80103b6:	e7fc      	b.n	80103b2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80103b8:	2010      	movs	r0, #16
 80103ba:	e7fa      	b.n	80103b2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80103bc:	4b05      	ldr	r3, [pc, #20]	; (80103d4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80103be:	f240 2177 	movw	r1, #631	; 0x277
 80103c2:	4a05      	ldr	r2, [pc, #20]	; (80103d8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80103c4:	4805      	ldr	r0, [pc, #20]	; (80103dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80103c6:	f00d fcf5 	bl	801ddb4 <__assert_func>
 80103ca:	2008      	movs	r0, #8
 80103cc:	e7f1      	b.n	80103b2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80103ce:	2000      	movs	r0, #0
 80103d0:	e7ef      	b.n	80103b2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80103d2:	bf00      	nop
 80103d4:	080206b1 	.word	0x080206b1
 80103d8:	08020b3f 	.word	0x08020b3f
 80103dc:	08020635 	.word	0x08020635

080103e0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80103e0:	b570      	push	{r4, r5, r6, lr}
 80103e2:	460d      	mov	r5, r1
 80103e4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80103e8:	4616      	mov	r6, r2
 80103ea:	461c      	mov	r4, r3
 80103ec:	f7ff ffd4 	bl	8010398 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80103f0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80103f4:	10c0      	asrs	r0, r0, #3
 80103f6:	fb06 5101 	mla	r1, r6, r1, r5
 80103fa:	fb00 4001 	mla	r0, r0, r1, r4
 80103fe:	bd70      	pop	{r4, r5, r6, pc}

08010400 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8010400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010404:	b08a      	sub	sp, #40	; 0x28
 8010406:	f04f 0c00 	mov.w	ip, #0
 801040a:	4604      	mov	r4, r0
 801040c:	469a      	mov	sl, r3
 801040e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8010412:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8010416:	2d0b      	cmp	r5, #11
 8010418:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801041c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010420:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8010424:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8010428:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 801042c:	f8cd c014 	str.w	ip, [sp, #20]
 8010430:	d129      	bne.n	8010486 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 8010432:	2080      	movs	r0, #128	; 0x80
 8010434:	9204      	str	r2, [sp, #16]
 8010436:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801043a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801043e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8010442:	f8ad 701c 	strh.w	r7, [sp, #28]
 8010446:	f8ad 601e 	strh.w	r6, [sp, #30]
 801044a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801044e:	4620      	mov	r0, r4
 8010450:	f7ff fef0 	bl	8010234 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010454:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8010458:	4603      	mov	r3, r0
 801045a:	4651      	mov	r1, sl
 801045c:	4620      	mov	r0, r4
 801045e:	e9cd 9800 	strd	r9, r8, [sp]
 8010462:	f7ff ffbd 	bl	80103e0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8010466:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 801046a:	9006      	str	r0, [sp, #24]
 801046c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8010470:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8010474:	b107      	cbz	r7, 8010478 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8010476:	b9d6      	cbnz	r6, 80104ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8010478:	4b17      	ldr	r3, [pc, #92]	; (80104d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801047a:	f240 11cf 	movw	r1, #463	; 0x1cf
 801047e:	4a17      	ldr	r2, [pc, #92]	; (80104dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8010480:	4817      	ldr	r0, [pc, #92]	; (80104e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8010482:	f00d fc97 	bl	801ddb4 <__assert_func>
 8010486:	2d02      	cmp	r5, #2
 8010488:	d108      	bne.n	801049c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 801048a:	2bff      	cmp	r3, #255	; 0xff
 801048c:	d104      	bne.n	8010498 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 801048e:	2800      	cmp	r0, #0
 8010490:	bf14      	ite	ne
 8010492:	2040      	movne	r0, #64	; 0x40
 8010494:	2020      	moveq	r0, #32
 8010496:	e7cd      	b.n	8010434 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8010498:	2040      	movs	r0, #64	; 0x40
 801049a:	e7cb      	b.n	8010434 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 801049c:	2bff      	cmp	r3, #255	; 0xff
 801049e:	d104      	bne.n	80104aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 80104a0:	2800      	cmp	r0, #0
 80104a2:	bf14      	ite	ne
 80104a4:	2004      	movne	r0, #4
 80104a6:	2001      	moveq	r0, #1
 80104a8:	e7c4      	b.n	8010434 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 80104aa:	2004      	movs	r0, #4
 80104ac:	e7c2      	b.n	8010434 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 80104ae:	6823      	ldr	r3, [r4, #0]
 80104b0:	4620      	mov	r0, r4
 80104b2:	9d02      	ldr	r5, [sp, #8]
 80104b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104b6:	4798      	blx	r3
 80104b8:	4228      	tst	r0, r5
 80104ba:	d104      	bne.n	80104c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 80104bc:	4b09      	ldr	r3, [pc, #36]	; (80104e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 80104be:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80104c2:	4a06      	ldr	r2, [pc, #24]	; (80104dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80104c4:	e7dc      	b.n	8010480 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 80104c6:	6860      	ldr	r0, [r4, #4]
 80104c8:	a902      	add	r1, sp, #8
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	4798      	blx	r3
 80104d0:	b00a      	add	sp, #40	; 0x28
 80104d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104d6:	bf00      	nop
 80104d8:	08020483 	.word	0x08020483
 80104dc:	080209d9 	.word	0x080209d9
 80104e0:	08020635 	.word	0x08020635
 80104e4:	080204bb 	.word	0x080204bb

080104e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80104e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ec:	b08b      	sub	sp, #44	; 0x2c
 80104ee:	469b      	mov	fp, r3
 80104f0:	4604      	mov	r4, r0
 80104f2:	4692      	mov	sl, r2
 80104f4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80104f8:	2600      	movs	r6, #0
 80104fa:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80104fe:	4689      	mov	r9, r1
 8010500:	2fff      	cmp	r7, #255	; 0xff
 8010502:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8010506:	9605      	str	r6, [sp, #20]
 8010508:	bf14      	ite	ne
 801050a:	2308      	movne	r3, #8
 801050c:	2302      	moveq	r3, #2
 801050e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8010512:	f7ff fe8f 	bl	8010234 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010516:	465a      	mov	r2, fp
 8010518:	4603      	mov	r3, r0
 801051a:	4651      	mov	r1, sl
 801051c:	4620      	mov	r0, r4
 801051e:	e9cd 8500 	strd	r8, r5, [sp]
 8010522:	f7ff ff5d 	bl	80103e0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8010526:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801052a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801052e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010532:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010536:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801053a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	9d02      	ldr	r5, [sp, #8]
 8010542:	9006      	str	r0, [sp, #24]
 8010544:	4620      	mov	r0, r4
 8010546:	f8ad 6020 	strh.w	r6, [sp, #32]
 801054a:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801054e:	f8cd 9014 	str.w	r9, [sp, #20]
 8010552:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8010556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010558:	4798      	blx	r3
 801055a:	4228      	tst	r0, r5
 801055c:	d106      	bne.n	801056c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801055e:	4b07      	ldr	r3, [pc, #28]	; (801057c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8010560:	f240 212e 	movw	r1, #558	; 0x22e
 8010564:	4a06      	ldr	r2, [pc, #24]	; (8010580 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8010566:	4807      	ldr	r0, [pc, #28]	; (8010584 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8010568:	f00d fc24 	bl	801ddb4 <__assert_func>
 801056c:	6860      	ldr	r0, [r4, #4]
 801056e:	a902      	add	r1, sp, #8
 8010570:	6803      	ldr	r3, [r0, #0]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	4798      	blx	r3
 8010576:	b00b      	add	sp, #44	; 0x2c
 8010578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057c:	080204bb 	.word	0x080204bb
 8010580:	08020aaa 	.word	0x08020aaa
 8010584:	08020635 	.word	0x08020635

08010588 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010588:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801058c:	461f      	mov	r7, r3
 801058e:	4b0b      	ldr	r3, [pc, #44]	; (80105bc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010590:	460d      	mov	r5, r1
 8010592:	4616      	mov	r6, r2
 8010594:	f8b3 8000 	ldrh.w	r8, [r3]
 8010598:	4604      	mov	r4, r0
 801059a:	f7f4 f99b 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 801059e:	6803      	ldr	r3, [r0, #0]
 80105a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a2:	4798      	blx	r3
 80105a4:	463b      	mov	r3, r7
 80105a6:	4632      	mov	r2, r6
 80105a8:	4629      	mov	r1, r5
 80105aa:	e9cd 8000 	strd	r8, r0, [sp]
 80105ae:	4620      	mov	r0, r4
 80105b0:	f7ff ff16 	bl	80103e0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80105b4:	b002      	add	sp, #8
 80105b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ba:	bf00      	nop
 80105bc:	2000df6a 	.word	0x2000df6a

080105c0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80105c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c4:	4698      	mov	r8, r3
 80105c6:	b088      	sub	sp, #32
 80105c8:	2300      	movs	r3, #0
 80105ca:	4617      	mov	r7, r2
 80105cc:	4604      	mov	r4, r0
 80105ce:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80105d2:	9303      	str	r3, [sp, #12]
 80105d4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80105d8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80105dc:	f8ad 6014 	strh.w	r6, [sp, #20]
 80105e0:	f8ad 5016 	strh.w	r5, [sp, #22]
 80105e4:	e9cd 3100 	strd	r3, r1, [sp]
 80105e8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80105ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80105f0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80105f4:	f88d 301c 	strb.w	r3, [sp, #28]
 80105f8:	f7ff fe1c 	bl	8010234 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80105fc:	4642      	mov	r2, r8
 80105fe:	4603      	mov	r3, r0
 8010600:	4639      	mov	r1, r7
 8010602:	4620      	mov	r0, r4
 8010604:	f7ff ffc0 	bl	8010588 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010608:	4b16      	ldr	r3, [pc, #88]	; (8010664 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801060a:	9004      	str	r0, [sp, #16]
 801060c:	881b      	ldrh	r3, [r3, #0]
 801060e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010612:	f7f4 f95f 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 8010616:	6803      	ldr	r3, [r0, #0]
 8010618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801061a:	4798      	blx	r3
 801061c:	f88d 001e 	strb.w	r0, [sp, #30]
 8010620:	f88d 001d 	strb.w	r0, [sp, #29]
 8010624:	b106      	cbz	r6, 8010628 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8010626:	b935      	cbnz	r5, 8010636 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8010628:	4b0f      	ldr	r3, [pc, #60]	; (8010668 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801062a:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 801062e:	4a0f      	ldr	r2, [pc, #60]	; (801066c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8010630:	480f      	ldr	r0, [pc, #60]	; (8010670 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8010632:	f00d fbbf 	bl	801ddb4 <__assert_func>
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	4620      	mov	r0, r4
 801063a:	9d00      	ldr	r5, [sp, #0]
 801063c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801063e:	4798      	blx	r3
 8010640:	4228      	tst	r0, r5
 8010642:	d104      	bne.n	801064e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8010644:	4b0b      	ldr	r3, [pc, #44]	; (8010674 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8010646:	f240 11ed 	movw	r1, #493	; 0x1ed
 801064a:	4a08      	ldr	r2, [pc, #32]	; (801066c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801064c:	e7f0      	b.n	8010630 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801064e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010650:	4669      	mov	r1, sp
 8010652:	6860      	ldr	r0, [r4, #4]
 8010654:	9303      	str	r3, [sp, #12]
 8010656:	6803      	ldr	r3, [r0, #0]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	4798      	blx	r3
 801065c:	b008      	add	sp, #32
 801065e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010662:	bf00      	nop
 8010664:	2000df6a 	.word	0x2000df6a
 8010668:	08020483 	.word	0x08020483
 801066c:	0802088b 	.word	0x0802088b
 8010670:	08020635 	.word	0x08020635
 8010674:	080204bb 	.word	0x080204bb

08010678 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010678:	b570      	push	{r4, r5, r6, lr}
 801067a:	b08a      	sub	sp, #40	; 0x28
 801067c:	4604      	mov	r4, r0
 801067e:	466b      	mov	r3, sp
 8010680:	e883 0006 	stmia.w	r3, {r1, r2}
 8010684:	4b1f      	ldr	r3, [pc, #124]	; (8010704 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	b933      	cbnz	r3, 8010698 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801068a:	4b1f      	ldr	r3, [pc, #124]	; (8010708 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801068c:	f240 213f 	movw	r1, #575	; 0x23f
 8010690:	4a1e      	ldr	r2, [pc, #120]	; (801070c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8010692:	481f      	ldr	r0, [pc, #124]	; (8010710 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8010694:	f00d fb8e 	bl	801ddb4 <__assert_func>
 8010698:	2300      	movs	r3, #0
 801069a:	f8bd 5000 	ldrh.w	r5, [sp]
 801069e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80106a2:	9305      	str	r3, [sp, #20]
 80106a4:	2301      	movs	r3, #1
 80106a6:	9302      	str	r3, [sp, #8]
 80106a8:	6803      	ldr	r3, [r0, #0]
 80106aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ac:	4798      	blx	r3
 80106ae:	4632      	mov	r2, r6
 80106b0:	4629      	mov	r1, r5
 80106b2:	4603      	mov	r3, r0
 80106b4:	4620      	mov	r0, r4
 80106b6:	f7ff ff67 	bl	8010588 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80106ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106bc:	9003      	str	r0, [sp, #12]
 80106be:	9306      	str	r3, [sp, #24]
 80106c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80106c4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80106c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80106cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80106d0:	4b10      	ldr	r3, [pc, #64]	; (8010714 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80106d8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80106dc:	f7f4 f8fa 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 80106e0:	6803      	ldr	r3, [r0, #0]
 80106e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e4:	4798      	blx	r3
 80106e6:	23ff      	movs	r3, #255	; 0xff
 80106e8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80106ec:	a902      	add	r1, sp, #8
 80106ee:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80106f2:	6860      	ldr	r0, [r4, #4]
 80106f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80106f8:	6803      	ldr	r3, [r0, #0]
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	4798      	blx	r3
 80106fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010700:	b00a      	add	sp, #40	; 0x28
 8010702:	bd70      	pop	{r4, r5, r6, pc}
 8010704:	2000df6f 	.word	0x2000df6f
 8010708:	08020582 	.word	0x08020582
 801070c:	0802092f 	.word	0x0802092f
 8010710:	08020635 	.word	0x08020635
 8010714:	2000df6a 	.word	0x2000df6a

08010718 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801071a:	b08b      	sub	sp, #44	; 0x2c
 801071c:	4604      	mov	r4, r0
 801071e:	466d      	mov	r5, sp
 8010720:	e885 0006 	stmia.w	r5, {r1, r2}
 8010724:	461d      	mov	r5, r3
 8010726:	2300      	movs	r3, #0
 8010728:	f8bd 6000 	ldrh.w	r6, [sp]
 801072c:	9305      	str	r3, [sp, #20]
 801072e:	2301      	movs	r3, #1
 8010730:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010734:	9302      	str	r3, [sp, #8]
 8010736:	6803      	ldr	r3, [r0, #0]
 8010738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801073a:	4798      	blx	r3
 801073c:	463a      	mov	r2, r7
 801073e:	4631      	mov	r1, r6
 8010740:	4603      	mov	r3, r0
 8010742:	4620      	mov	r0, r4
 8010744:	f7ff ff20 	bl	8010588 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010748:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801074c:	9003      	str	r0, [sp, #12]
 801074e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010752:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010756:	9506      	str	r5, [sp, #24]
 8010758:	f8ad 301e 	strh.w	r3, [sp, #30]
 801075c:	4b0d      	ldr	r3, [pc, #52]	; (8010794 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801075e:	881b      	ldrh	r3, [r3, #0]
 8010760:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010766:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801076a:	f7f4 f8b3 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 801076e:	6803      	ldr	r3, [r0, #0]
 8010770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010772:	4798      	blx	r3
 8010774:	23ff      	movs	r3, #255	; 0xff
 8010776:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801077a:	a902      	add	r1, sp, #8
 801077c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8010780:	6860      	ldr	r0, [r4, #4]
 8010782:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010786:	6803      	ldr	r3, [r0, #0]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	4798      	blx	r3
 801078c:	4628      	mov	r0, r5
 801078e:	b00b      	add	sp, #44	; 0x2c
 8010790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010792:	bf00      	nop
 8010794:	2000df6a 	.word	0x2000df6a

08010798 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010798:	b570      	push	{r4, r5, r6, lr}
 801079a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801079e:	4604      	mov	r4, r0
 80107a0:	b19b      	cbz	r3, 80107ca <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80107a2:	2002      	movs	r0, #2
 80107a4:	f7f1 fe1e 	bl	80023e4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80107a8:	2300      	movs	r3, #0
 80107aa:	4620      	mov	r0, r4
 80107ac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80107b0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80107b4:	6823      	ldr	r3, [r4, #0]
 80107b6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80107ba:	f7ff fd3b 	bl	8010234 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80107be:	4601      	mov	r1, r0
 80107c0:	4620      	mov	r0, r4
 80107c2:	462b      	mov	r3, r5
 80107c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107c8:	4718      	bx	r3
 80107ca:	bd70      	pop	{r4, r5, r6, pc}

080107cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80107cc:	b538      	push	{r3, r4, r5, lr}
 80107ce:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80107d2:	4604      	mov	r4, r0
 80107d4:	460d      	mov	r5, r1
 80107d6:	428a      	cmp	r2, r1
 80107d8:	d008      	beq.n	80107ec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 80107da:	2a01      	cmp	r2, #1
 80107dc:	6803      	ldr	r3, [r0, #0]
 80107de:	d106      	bne.n	80107ee <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80107e0:	b929      	cbnz	r1, 80107ee <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80107e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80107e6:	4798      	blx	r3
 80107e8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80107ec:	bd38      	pop	{r3, r4, r5, pc}
 80107ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80107f2:	4620      	mov	r0, r4
 80107f4:	e7f7      	b.n	80107e6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

080107f8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80107f8:	4b0d      	ldr	r3, [pc, #52]	; (8010830 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80107fa:	b510      	push	{r4, lr}
 80107fc:	781b      	ldrb	r3, [r3, #0]
 80107fe:	4604      	mov	r4, r0
 8010800:	b95b      	cbnz	r3, 801081a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010802:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8010806:	2b02      	cmp	r3, #2
 8010808:	d007      	beq.n	801081a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801080a:	6840      	ldr	r0, [r0, #4]
 801080c:	f000 f93a 	bl	8010a84 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8010810:	b118      	cbz	r0, 801081a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010812:	6862      	ldr	r2, [r4, #4]
 8010814:	7a53      	ldrb	r3, [r2, #9]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d0fc      	beq.n	8010814 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801081a:	f7f2 f815 	bl	8002848 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801081e:	4620      	mov	r0, r4
 8010820:	2100      	movs	r1, #0
 8010822:	f7ff ffd3 	bl	80107cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010826:	4620      	mov	r0, r4
 8010828:	f7ff fd04 	bl	8010234 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801082c:	bd10      	pop	{r4, pc}
 801082e:	bf00      	nop
 8010830:	2000df6e 	.word	0x2000df6e

08010834 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8010834:	4770      	bx	lr

08010836 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8010836:	2000      	movs	r0, #0
 8010838:	4770      	bx	lr

0801083a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801083a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801083e:	1a13      	subs	r3, r2, r0
 8010840:	4258      	negs	r0, r3
 8010842:	4158      	adcs	r0, r3
 8010844:	4770      	bx	lr

08010846 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010846:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801084a:	1a9b      	subs	r3, r3, r2
 801084c:	2b00      	cmp	r3, #0
 801084e:	bfdc      	itt	le
 8010850:	6882      	ldrle	r2, [r0, #8]
 8010852:	189b      	addle	r3, r3, r2
 8010854:	2b01      	cmp	r3, #1
 8010856:	bfcc      	ite	gt
 8010858:	2000      	movgt	r0, #0
 801085a:	2001      	movle	r0, #1
 801085c:	4770      	bx	lr

0801085e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801085e:	6902      	ldr	r2, [r0, #16]
 8010860:	6840      	ldr	r0, [r0, #4]
 8010862:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8010866:	4770      	bx	lr

08010868 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8010868:	6803      	ldr	r3, [r0, #0]
 801086a:	691b      	ldr	r3, [r3, #16]
 801086c:	4718      	bx	r3

0801086e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801086e:	4770      	bx	lr

08010870 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8010870:	4770      	bx	lr
	...

08010874 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8010874:	2301      	movs	r3, #1
 8010876:	b570      	push	{r4, r5, r6, lr}
 8010878:	7203      	strb	r3, [r0, #8]
 801087a:	4604      	mov	r4, r0
 801087c:	6840      	ldr	r0, [r0, #4]
 801087e:	6803      	ldr	r3, [r0, #0]
 8010880:	699b      	ldr	r3, [r3, #24]
 8010882:	4798      	blx	r3
 8010884:	6803      	ldr	r3, [r0, #0]
 8010886:	4605      	mov	r5, r0
 8010888:	2b40      	cmp	r3, #64	; 0x40
 801088a:	d039      	beq.n	8010900 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801088c:	d815      	bhi.n	80108ba <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801088e:	2b04      	cmp	r3, #4
 8010890:	d022      	beq.n	80108d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010892:	d808      	bhi.n	80108a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010894:	2b01      	cmp	r3, #1
 8010896:	d033      	beq.n	8010900 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8010898:	2b02      	cmp	r3, #2
 801089a:	d108      	bne.n	80108ae <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 801089c:	6823      	ldr	r3, [r4, #0]
 801089e:	4620      	mov	r0, r4
 80108a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108a2:	4798      	blx	r3
 80108a4:	e025      	b.n	80108f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 80108a6:	2b08      	cmp	r3, #8
 80108a8:	d01e      	beq.n	80108e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 80108aa:	2b20      	cmp	r3, #32
 80108ac:	d028      	beq.n	8010900 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80108ae:	4b17      	ldr	r3, [pc, #92]	; (801090c <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 80108b0:	218b      	movs	r1, #139	; 0x8b
 80108b2:	4a17      	ldr	r2, [pc, #92]	; (8010910 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80108b4:	4817      	ldr	r0, [pc, #92]	; (8010914 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80108b6:	f00d fa7d 	bl	801ddb4 <__assert_func>
 80108ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108be:	d01f      	beq.n	8010900 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80108c0:	d804      	bhi.n	80108cc <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 80108c2:	2b80      	cmp	r3, #128	; 0x80
 80108c4:	d01c      	beq.n	8010900 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80108c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ca:	e7ef      	b.n	80108ac <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80108cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108d0:	d016      	beq.n	8010900 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80108d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80108d6:	e7e0      	b.n	801089a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	7f01      	ldrb	r1, [r0, #28]
 80108dc:	4620      	mov	r0, r4
 80108de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108e0:	4798      	blx	r3
 80108e2:	6823      	ldr	r3, [r4, #0]
 80108e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108e6:	e006      	b.n	80108f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80108e8:	6823      	ldr	r3, [r4, #0]
 80108ea:	7f01      	ldrb	r1, [r0, #28]
 80108ec:	4620      	mov	r0, r4
 80108ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108f0:	4798      	blx	r3
 80108f2:	6823      	ldr	r3, [r4, #0]
 80108f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108f6:	4629      	mov	r1, r5
 80108f8:	4620      	mov	r0, r4
 80108fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80108fe:	4718      	bx	r3
 8010900:	6823      	ldr	r3, [r4, #0]
 8010902:	4620      	mov	r0, r4
 8010904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010906:	4798      	blx	r3
 8010908:	e7eb      	b.n	80108e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801090a:	bf00      	nop
 801090c:	08020b88 	.word	0x08020b88
 8010910:	08020c98 	.word	0x08020c98
 8010914:	08020bad 	.word	0x08020bad

08010918 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8010918:	b570      	push	{r4, r5, r6, lr}
 801091a:	4604      	mov	r4, r0
 801091c:	460e      	mov	r6, r1
 801091e:	6860      	ldr	r0, [r4, #4]
 8010920:	6803      	ldr	r3, [r0, #0]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	4798      	blx	r3
 8010926:	2800      	cmp	r0, #0
 8010928:	d1f9      	bne.n	801091e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801092a:	4d0d      	ldr	r5, [pc, #52]	; (8010960 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801092c:	6828      	ldr	r0, [r5, #0]
 801092e:	6803      	ldr	r3, [r0, #0]
 8010930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010932:	4798      	blx	r3
 8010934:	f7f1 ffa2 	bl	800287c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8010938:	6828      	ldr	r0, [r5, #0]
 801093a:	2101      	movs	r1, #1
 801093c:	f7ff ff46 	bl	80107cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010940:	6860      	ldr	r0, [r4, #4]
 8010942:	4631      	mov	r1, r6
 8010944:	6803      	ldr	r3, [r0, #0]
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	4798      	blx	r3
 801094a:	6823      	ldr	r3, [r4, #0]
 801094c:	4620      	mov	r0, r4
 801094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010950:	4798      	blx	r3
 8010952:	6828      	ldr	r0, [r5, #0]
 8010954:	6803      	ldr	r3, [r0, #0]
 8010956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801095a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801095c:	4718      	bx	r3
 801095e:	bf00      	nop
 8010960:	2000df70 	.word	0x2000df70

08010964 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010964:	b508      	push	{r3, lr}
 8010966:	f7f1 ff6f 	bl	8002848 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801096a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801096e:	f7f1 bf79 	b.w	8002864 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010972 <_ZN8touchgfx13DMA_Interface5startEv>:
 8010972:	b510      	push	{r4, lr}
 8010974:	4604      	mov	r4, r0
 8010976:	6840      	ldr	r0, [r0, #4]
 8010978:	6803      	ldr	r3, [r0, #0]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4798      	blx	r3
 801097e:	b948      	cbnz	r0, 8010994 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010980:	7a63      	ldrb	r3, [r4, #9]
 8010982:	b13b      	cbz	r3, 8010994 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010984:	7a23      	ldrb	r3, [r4, #8]
 8010986:	b92b      	cbnz	r3, 8010994 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010988:	6823      	ldr	r3, [r4, #0]
 801098a:	4620      	mov	r0, r4
 801098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801098e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010992:	4718      	bx	r3
 8010994:	bd10      	pop	{r4, pc}
	...

08010998 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8010998:	b510      	push	{r4, lr}
 801099a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801099e:	1b12      	subs	r2, r2, r4
 80109a0:	2a00      	cmp	r2, #0
 80109a2:	bfdc      	itt	le
 80109a4:	6883      	ldrle	r3, [r0, #8]
 80109a6:	18d2      	addle	r2, r2, r3
 80109a8:	2a01      	cmp	r2, #1
 80109aa:	dd18      	ble.n	80109de <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80109ac:	6843      	ldr	r3, [r0, #4]
 80109ae:	f101 021c 	add.w	r2, r1, #28
 80109b2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80109b6:	f851 4b04 	ldr.w	r4, [r1], #4
 80109ba:	4291      	cmp	r1, r2
 80109bc:	f843 4b04 	str.w	r4, [r3], #4
 80109c0:	d1f9      	bne.n	80109b6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80109c2:	880a      	ldrh	r2, [r1, #0]
 80109c4:	801a      	strh	r2, [r3, #0]
 80109c6:	788a      	ldrb	r2, [r1, #2]
 80109c8:	709a      	strb	r2, [r3, #2]
 80109ca:	68c3      	ldr	r3, [r0, #12]
 80109cc:	6882      	ldr	r2, [r0, #8]
 80109ce:	f3bf 8f5b 	dmb	ish
 80109d2:	3301      	adds	r3, #1
 80109d4:	429a      	cmp	r2, r3
 80109d6:	bfd8      	it	le
 80109d8:	1a9b      	suble	r3, r3, r2
 80109da:	60c3      	str	r3, [r0, #12]
 80109dc:	bd10      	pop	{r4, pc}
 80109de:	4b03      	ldr	r3, [pc, #12]	; (80109ec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80109e0:	2139      	movs	r1, #57	; 0x39
 80109e2:	4a03      	ldr	r2, [pc, #12]	; (80109f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80109e4:	4803      	ldr	r0, [pc, #12]	; (80109f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80109e6:	f00d f9e5 	bl	801ddb4 <__assert_func>
 80109ea:	bf00      	nop
 80109ec:	08020bd3 	.word	0x08020bd3
 80109f0:	08020cc8 	.word	0x08020cc8
 80109f4:	08020bad 	.word	0x08020bad

080109f8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80109f8:	b510      	push	{r4, lr}
 80109fa:	6803      	ldr	r3, [r0, #0]
 80109fc:	4604      	mov	r4, r0
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4798      	blx	r3
 8010a02:	b128      	cbz	r0, 8010a10 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8010a04:	4b07      	ldr	r3, [pc, #28]	; (8010a24 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8010a06:	213f      	movs	r1, #63	; 0x3f
 8010a08:	4a07      	ldr	r2, [pc, #28]	; (8010a28 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8010a0a:	4808      	ldr	r0, [pc, #32]	; (8010a2c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8010a0c:	f00d f9d2 	bl	801ddb4 <__assert_func>
 8010a10:	6923      	ldr	r3, [r4, #16]
 8010a12:	68a2      	ldr	r2, [r4, #8]
 8010a14:	f3bf 8f5b 	dmb	ish
 8010a18:	3301      	adds	r3, #1
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	bfd8      	it	le
 8010a1e:	1a9b      	suble	r3, r3, r2
 8010a20:	6123      	str	r3, [r4, #16]
 8010a22:	bd10      	pop	{r4, pc}
 8010a24:	08020bf6 	.word	0x08020bf6
 8010a28:	08020d16 	.word	0x08020d16
 8010a2c:	08020bad 	.word	0x08020bad

08010a30 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8010a30:	b570      	push	{r4, r5, r6, lr}
 8010a32:	4604      	mov	r4, r0
 8010a34:	6840      	ldr	r0, [r0, #4]
 8010a36:	6803      	ldr	r3, [r0, #0]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4798      	blx	r3
 8010a3c:	4605      	mov	r5, r0
 8010a3e:	b930      	cbnz	r0, 8010a4e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010a40:	7a23      	ldrb	r3, [r4, #8]
 8010a42:	b123      	cbz	r3, 8010a4e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010a44:	6860      	ldr	r0, [r4, #4]
 8010a46:	6803      	ldr	r3, [r0, #0]
 8010a48:	695b      	ldr	r3, [r3, #20]
 8010a4a:	4798      	blx	r3
 8010a4c:	7225      	strb	r5, [r4, #8]
 8010a4e:	6860      	ldr	r0, [r4, #4]
 8010a50:	6803      	ldr	r3, [r0, #0]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4798      	blx	r3
 8010a56:	b928      	cbnz	r0, 8010a64 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8010a58:	6823      	ldr	r3, [r4, #0]
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a62:	4718      	bx	r3
 8010a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a68:	f7f1 bf14 	b.w	8002894 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08010a6c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8010a6c:	b510      	push	{r4, lr}
 8010a6e:	6082      	str	r2, [r0, #8]
 8010a70:	2200      	movs	r2, #0
 8010a72:	4c03      	ldr	r4, [pc, #12]	; (8010a80 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8010a74:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8010a78:	e9c0 4100 	strd	r4, r1, [r0]
 8010a7c:	bd10      	pop	{r4, pc}
 8010a7e:	bf00      	nop
 8010a80:	08020c7c 	.word	0x08020c7c

08010a84 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8010a84:	6840      	ldr	r0, [r0, #4]
 8010a86:	6803      	ldr	r3, [r0, #0]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4718      	bx	r3

08010a8c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8010a8c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8010a90:	4770      	bx	lr

08010a92 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8010a92:	b510      	push	{r4, lr}
 8010a94:	4604      	mov	r4, r0
 8010a96:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010a98:	b150      	cbz	r0, 8010ab0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8010a9a:	6803      	ldr	r3, [r0, #0]
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	4798      	blx	r3
 8010aa0:	b130      	cbz	r0, 8010ab0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8010aa2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010aa4:	4621      	mov	r1, r4
 8010aa6:	6803      	ldr	r3, [r0, #0]
 8010aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	4718      	bx	r3
 8010ab0:	bd10      	pop	{r4, pc}

08010ab2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8010ab2:	790b      	ldrb	r3, [r1, #4]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	bf0c      	ite	eq
 8010ab8:	2301      	moveq	r3, #1
 8010aba:	2300      	movne	r3, #0
 8010abc:	b570      	push	{r4, r5, r6, lr}
 8010abe:	4604      	mov	r4, r0
 8010ac0:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8010ac4:	460e      	mov	r6, r1
 8010ac6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8010aca:	d109      	bne.n	8010ae0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8010acc:	b14d      	cbz	r5, 8010ae2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8010ace:	7933      	ldrb	r3, [r6, #4]
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d10c      	bne.n	8010aee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8010ad4:	6823      	ldr	r3, [r4, #0]
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ade:	4718      	bx	r3
 8010ae0:	b12d      	cbz	r5, 8010aee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8010ae2:	6823      	ldr	r3, [r4, #0]
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	695b      	ldr	r3, [r3, #20]
 8010ae8:	4798      	blx	r3
 8010aea:	2d00      	cmp	r5, #0
 8010aec:	d1ef      	bne.n	8010ace <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8010aee:	bd70      	pop	{r4, r5, r6, pc}

08010af0 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 8010af0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8010af4:	4770      	bx	lr

08010af6 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8010af6:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8010afa:	4770      	bx	lr

08010afc <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8010afc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010afe:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8010b02:	4605      	mov	r5, r0
 8010b04:	2bff      	cmp	r3, #255	; 0xff
 8010b06:	d007      	beq.n	8010b18 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 8010b08:	2300      	movs	r3, #0
 8010b0a:	802b      	strh	r3, [r5, #0]
 8010b0c:	806b      	strh	r3, [r5, #2]
 8010b0e:	80ab      	strh	r3, [r5, #4]
 8010b10:	80eb      	strh	r3, [r5, #6]
 8010b12:	4628      	mov	r0, r5
 8010b14:	b004      	add	sp, #16
 8010b16:	bd70      	pop	{r4, r5, r6, pc}
 8010b18:	f101 0426 	add.w	r4, r1, #38	; 0x26
 8010b1c:	4668      	mov	r0, sp
 8010b1e:	4621      	mov	r1, r4
 8010b20:	f004 fe1a 	bl	8015758 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010b24:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f004 fda1 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010b2e:	4286      	cmp	r6, r0
 8010b30:	d1ea      	bne.n	8010b08 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 8010b32:	4621      	mov	r1, r4
 8010b34:	a802      	add	r0, sp, #8
 8010b36:	f004 fe0f 	bl	8015758 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010b3a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f004 fdd0 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010b44:	4286      	cmp	r6, r0
 8010b46:	d1df      	bne.n	8010b08 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 8010b48:	4621      	mov	r1, r4
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f004 fe04 	bl	8015758 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010b50:	e7df      	b.n	8010b12 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>
	...

08010b54 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8010b54:	b538      	push	{r3, r4, r5, lr}
 8010b56:	2300      	movs	r3, #0
 8010b58:	2501      	movs	r5, #1
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	8083      	strh	r3, [r0, #4]
 8010b5e:	80c3      	strh	r3, [r0, #6]
 8010b60:	8103      	strh	r3, [r0, #8]
 8010b62:	8143      	strh	r3, [r0, #10]
 8010b64:	8183      	strh	r3, [r0, #12]
 8010b66:	81c3      	strh	r3, [r0, #14]
 8010b68:	8203      	strh	r3, [r0, #16]
 8010b6a:	8243      	strh	r3, [r0, #18]
 8010b6c:	61c3      	str	r3, [r0, #28]
 8010b6e:	8403      	strh	r3, [r0, #32]
 8010b70:	8443      	strh	r3, [r0, #34]	; 0x22
 8010b72:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8010b76:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8010b7a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8010b7e:	4b07      	ldr	r3, [pc, #28]	; (8010b9c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8010b80:	6003      	str	r3, [r0, #0]
 8010b82:	880b      	ldrh	r3, [r1, #0]
 8010b84:	84c3      	strh	r3, [r0, #38]	; 0x26
 8010b86:	23ff      	movs	r3, #255	; 0xff
 8010b88:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8010b8c:	f000 fac0 	bl	8011110 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010b90:	4b03      	ldr	r3, [pc, #12]	; (8010ba0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8010b92:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8010b96:	4620      	mov	r0, r4
 8010b98:	6023      	str	r3, [r4, #0]
 8010b9a:	bd38      	pop	{r3, r4, r5, pc}
 8010b9c:	08020f98 	.word	0x08020f98
 8010ba0:	08020dbc 	.word	0x08020dbc

08010ba4 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	3026      	adds	r0, #38	; 0x26
 8010ba8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010bac:	b90b      	cbnz	r3, 8010bb2 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 8010bae:	f003 b957 	b.w	8013e60 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8010bb2:	f003 b965 	b.w	8013e80 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08010bb8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8010bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	469b      	mov	fp, r3
 8010bc0:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8010bc4:	b0b3      	sub	sp, #204	; 0xcc
 8010bc6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010bca:	f9b1 6000 	ldrsh.w	r6, [r1]
 8010bce:	8888      	ldrh	r0, [r1, #4]
 8010bd0:	9206      	str	r2, [sp, #24]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	4430      	add	r0, r6
 8010bd6:	9211      	str	r2, [sp, #68]	; 0x44
 8010bd8:	b280      	uxth	r0, r0
 8010bda:	fa0f fe80 	sxth.w	lr, r0
 8010bde:	4596      	cmp	lr, r2
 8010be0:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 8010be4:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 8010be8:	f340 811a 	ble.w	8010e20 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010bec:	45b4      	cmp	ip, r6
 8010bee:	f340 8117 	ble.w	8010e20 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010bf2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010bf6:	88ca      	ldrh	r2, [r1, #6]
 8010bf8:	442a      	add	r2, r5
 8010bfa:	b292      	uxth	r2, r2
 8010bfc:	b211      	sxth	r1, r2
 8010bfe:	2900      	cmp	r1, #0
 8010c00:	f340 810e 	ble.w	8010e20 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010c04:	42ab      	cmp	r3, r5
 8010c06:	f340 810b 	ble.w	8010e20 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010c0a:	45f4      	cmp	ip, lr
 8010c0c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8010c10:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8010c14:	bfb8      	it	lt
 8010c16:	fa1f f08c 	uxthlt.w	r0, ip
 8010c1a:	428b      	cmp	r3, r1
 8010c1c:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8010c20:	bfb8      	it	lt
 8010c22:	b29a      	uxthlt	r2, r3
 8010c24:	1b80      	subs	r0, r0, r6
 8010c26:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8010c2a:	1b52      	subs	r2, r2, r5
 8010c2c:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8010c30:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8010c34:	ab11      	add	r3, sp, #68	; 0x44
 8010c36:	ad13      	add	r5, sp, #76	; 0x4c
 8010c38:	6822      	ldr	r2, [r4, #0]
 8010c3a:	1d26      	adds	r6, r4, #4
 8010c3c:	9307      	str	r3, [sp, #28]
 8010c3e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010c40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c44:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c48:	4629      	mov	r1, r5
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	4790      	blx	r2
 8010c4e:	4621      	mov	r1, r4
 8010c50:	a815      	add	r0, sp, #84	; 0x54
 8010c52:	f003 f867 	bl	8013d24 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010c56:	a815      	add	r0, sp, #84	; 0x54
 8010c58:	f001 feb6 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010c5c:	9b07      	ldr	r3, [sp, #28]
 8010c5e:	4631      	mov	r1, r6
 8010c60:	4618      	mov	r0, r3
 8010c62:	f001 fe99 	bl	8012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010c66:	4628      	mov	r0, r5
 8010c68:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8010c6c:	f001 feac 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010c70:	4628      	mov	r0, r5
 8010c72:	f004 fe05 	bl	8015880 <_ZNK8touchgfx6Bitmap7getDataEv>
 8010c76:	9007      	str	r0, [sp, #28]
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	f000 80ce 	beq.w	8010e1a <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 8010c7e:	f8db 2000 	ldr.w	r2, [fp]
 8010c82:	a90d      	add	r1, sp, #52	; 0x34
 8010c84:	a809      	add	r0, sp, #36	; 0x24
 8010c86:	9209      	str	r2, [sp, #36]	; 0x24
 8010c88:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010c8c:	920a      	str	r2, [sp, #40]	; 0x28
 8010c8e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8010c92:	920b      	str	r2, [sp, #44]	; 0x2c
 8010c94:	f8db 200c 	ldr.w	r2, [fp, #12]
 8010c98:	920c      	str	r2, [sp, #48]	; 0x30
 8010c9a:	f8da 2000 	ldr.w	r2, [sl]
 8010c9e:	920d      	str	r2, [sp, #52]	; 0x34
 8010ca0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010ca4:	920e      	str	r2, [sp, #56]	; 0x38
 8010ca6:	f8da 2008 	ldr.w	r2, [sl, #8]
 8010caa:	920f      	str	r2, [sp, #60]	; 0x3c
 8010cac:	f8da 200c 	ldr.w	r2, [sl, #12]
 8010cb0:	9210      	str	r2, [sp, #64]	; 0x40
 8010cb2:	4632      	mov	r2, r6
 8010cb4:	f001 fe54 	bl	8012960 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010cb8:	4632      	mov	r2, r6
 8010cba:	a90e      	add	r1, sp, #56	; 0x38
 8010cbc:	a80a      	add	r0, sp, #40	; 0x28
 8010cbe:	f001 fe4f 	bl	8012960 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010cc2:	4632      	mov	r2, r6
 8010cc4:	a90f      	add	r1, sp, #60	; 0x3c
 8010cc6:	a80b      	add	r0, sp, #44	; 0x2c
 8010cc8:	f001 fe4a 	bl	8012960 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010ccc:	4632      	mov	r2, r6
 8010cce:	a910      	add	r1, sp, #64	; 0x40
 8010cd0:	a80c      	add	r0, sp, #48	; 0x30
 8010cd2:	f001 fe45 	bl	8012960 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010cd6:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8010cda:	edd7 3a00 	vldr	s7, [r7]
 8010cde:	eef0 6a67 	vmov.f32	s13, s15
 8010ce2:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8010ce6:	ed97 5a01 	vldr	s10, [r7, #4]
 8010cea:	eeb0 7a67 	vmov.f32	s14, s15
 8010cee:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010cf2:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8010cf6:	edd9 2a00 	vldr	s5, [r9]
 8010cfa:	eeb0 6a67 	vmov.f32	s12, s15
 8010cfe:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8010d02:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8010d06:	ed98 3a00 	vldr	s6, [r8]
 8010d0a:	ed99 4a01 	vldr	s8, [r9, #4]
 8010d0e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010d12:	edd8 4a01 	vldr	s9, [r8, #4]
 8010d16:	edd9 5a02 	vldr	s11, [r9, #8]
 8010d1a:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8010d1e:	ee16 6a10 	vmov	r6, s12
 8010d22:	eeb0 6a67 	vmov.f32	s12, s15
 8010d26:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8010d2a:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8010d2e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010d32:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8010d36:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 8010d3a:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 8010d3e:	ee16 0a10 	vmov	r0, s12
 8010d42:	eeb0 6a67 	vmov.f32	s12, s15
 8010d46:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8010d4a:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 8010d4e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010d52:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8010d56:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 8010d5a:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 8010d5e:	ee16 1a10 	vmov	r1, s12
 8010d62:	eeb0 6a67 	vmov.f32	s12, s15
 8010d66:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8010d6a:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 8010d6e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010d72:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8010d76:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8010d7a:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8010d7e:	68ff      	ldr	r7, [r7, #12]
 8010d80:	ee16 2a10 	vmov	r2, s12
 8010d84:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8010d88:	9624      	str	r6, [sp, #144]	; 0x90
 8010d8a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010d8e:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8010d92:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8010d96:	4628      	mov	r0, r5
 8010d98:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8010d9c:	9b06      	ldr	r3, [sp, #24]
 8010d9e:	922d      	str	r2, [sp, #180]	; 0xb4
 8010da0:	4a21      	ldr	r2, [pc, #132]	; (8010e28 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 8010da2:	9317      	str	r3, [sp, #92]	; 0x5c
 8010da4:	8812      	ldrh	r2, [r2, #0]
 8010da6:	9b07      	ldr	r3, [sp, #28]
 8010da8:	9218      	str	r2, [sp, #96]	; 0x60
 8010daa:	9319      	str	r3, [sp, #100]	; 0x64
 8010dac:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8010db0:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8010db4:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8010db8:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8010dbc:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8010dc0:	9731      	str	r7, [sp, #196]	; 0xc4
 8010dc2:	f004 fd8f 	bl	80158e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8010dc6:	901a      	str	r0, [sp, #104]	; 0x68
 8010dc8:	4628      	mov	r0, r5
 8010dca:	f004 fc51 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010dce:	901b      	str	r0, [sp, #108]	; 0x6c
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	f004 fc87 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010dd6:	901c      	str	r0, [sp, #112]	; 0x70
 8010dd8:	4628      	mov	r0, r5
 8010dda:	f004 fc49 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010dde:	4b13      	ldr	r3, [pc, #76]	; (8010e2c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 8010de0:	901d      	str	r0, [sp, #116]	; 0x74
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010de8:	b10a      	cbz	r2, 8010dee <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 8010dea:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8010dec:	b905      	cbnz	r5, 8010df0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 8010dee:	689d      	ldr	r5, [r3, #8]
 8010df0:	682b      	ldr	r3, [r5, #0]
 8010df2:	4620      	mov	r0, r4
 8010df4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8010df6:	f7ff fed5 	bl	8010ba4 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8010dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010dfe:	aa1e      	add	r2, sp, #120	; 0x78
 8010e00:	a917      	add	r1, sp, #92	; 0x5c
 8010e02:	9304      	str	r3, [sp, #16]
 8010e04:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010e08:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010e0c:	ab13      	add	r3, sp, #76	; 0x4c
 8010e0e:	4628      	mov	r0, r5
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	ab15      	add	r3, sp, #84	; 0x54
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	ab19      	add	r3, sp, #100	; 0x64
 8010e18:	47b0      	blx	r6
 8010e1a:	b033      	add	sp, #204	; 0xcc
 8010e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e20:	2300      	movs	r3, #0
 8010e22:	9312      	str	r3, [sp, #72]	; 0x48
 8010e24:	e706      	b.n	8010c34 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 8010e26:	bf00      	nop
 8010e28:	2000df6a 	.word	0x2000df6a
 8010e2c:	2000df70 	.word	0x2000df70

08010e30 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8010e30:	b570      	push	{r4, r5, r6, lr}
 8010e32:	ed2d 8b04 	vpush	{d8-d9}
 8010e36:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8010e3a:	b098      	sub	sp, #96	; 0x60
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	460e      	mov	r6, r1
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d065      	beq.n	8010f10 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8010e44:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010e48:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8010e4c:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8010f2c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 8010e50:	ee09 3a10 	vmov	s18, r3
 8010e54:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010e58:	4628      	mov	r0, r5
 8010e5a:	ee08 3a90 	vmov	s17, r3
 8010e5e:	4b34      	ldr	r3, [pc, #208]	; (8010f30 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8010e60:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8010e64:	930c      	str	r3, [sp, #48]	; 0x30
 8010e66:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8010e6a:	930d      	str	r3, [sp, #52]	; 0x34
 8010e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8010e6e:	ee39 9a08 	vadd.f32	s18, s18, s16
 8010e72:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e74:	f004 fbfc 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010e78:	ee07 0a90 	vmov	s15, r0
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	ee78 8a88 	vadd.f32	s17, s17, s16
 8010e82:	eef8 9a67 	vcvt.f32.u32	s19, s15
 8010e86:	f004 fc2d 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010e8a:	4b2a      	ldr	r3, [pc, #168]	; (8010f34 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8010e8c:	ee07 0a90 	vmov	s15, r0
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010e96:	eef0 7a48 	vmov.f32	s15, s16
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d13c      	bne.n	8010f18 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 8010e9e:	eef0 6a69 	vmov.f32	s13, s19
 8010ea2:	ee19 3a90 	vmov	r3, s19
 8010ea6:	eeb0 6a47 	vmov.f32	s12, s14
 8010eaa:	eef0 5a47 	vmov.f32	s11, s14
 8010eae:	eef0 9a48 	vmov.f32	s19, s16
 8010eb2:	eeb0 7a48 	vmov.f32	s14, s16
 8010eb6:	9314      	str	r3, [sp, #80]	; 0x50
 8010eb8:	ab14      	add	r3, sp, #80	; 0x50
 8010eba:	2200      	movs	r2, #0
 8010ebc:	4631      	mov	r1, r6
 8010ebe:	9303      	str	r3, [sp, #12]
 8010ec0:	ab10      	add	r3, sp, #64	; 0x40
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	edcd 7a04 	vstr	s15, [sp, #16]
 8010ec8:	9302      	str	r3, [sp, #8]
 8010eca:	ab0c      	add	r3, sp, #48	; 0x30
 8010ecc:	ed8d 9a05 	vstr	s18, [sp, #20]
 8010ed0:	9301      	str	r3, [sp, #4]
 8010ed2:	ab08      	add	r3, sp, #32
 8010ed4:	ed8d 9a06 	vstr	s18, [sp, #24]
 8010ed8:	9300      	str	r3, [sp, #0]
 8010eda:	ab04      	add	r3, sp, #16
 8010edc:	edcd 7a07 	vstr	s15, [sp, #28]
 8010ee0:	edcd 7a08 	vstr	s15, [sp, #32]
 8010ee4:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8010ee8:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8010eec:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 8010ef0:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8010ef4:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 8010ef8:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 8010efc:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8010f00:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8010f04:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 8010f08:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 8010f0c:	f7ff fe54 	bl	8010bb8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8010f10:	b018      	add	sp, #96	; 0x60
 8010f12:	ecbd 8b04 	vpop	{d8-d9}
 8010f16:	bd70      	pop	{r4, r5, r6, pc}
 8010f18:	eef0 6a47 	vmov.f32	s13, s14
 8010f1c:	ee18 3a10 	vmov	r3, s16
 8010f20:	eef0 5a69 	vmov.f32	s11, s19
 8010f24:	eeb0 6a48 	vmov.f32	s12, s16
 8010f28:	e7c5      	b.n	8010eb6 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 8010f2a:	bf00      	nop
 8010f2c:	00000000 	.word	0x00000000
 8010f30:	42c80000 	.word	0x42c80000
 8010f34:	2000df68 	.word	0x2000df68

08010f38 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8010f38:	2300      	movs	r3, #0
 8010f3a:	8083      	strh	r3, [r0, #4]
 8010f3c:	80c3      	strh	r3, [r0, #6]
 8010f3e:	8003      	strh	r3, [r0, #0]
 8010f40:	8043      	strh	r3, [r0, #2]
 8010f42:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8010f46:	2bff      	cmp	r3, #255	; 0xff
 8010f48:	bf01      	itttt	eq
 8010f4a:	890b      	ldrheq	r3, [r1, #8]
 8010f4c:	8083      	strheq	r3, [r0, #4]
 8010f4e:	894b      	ldrheq	r3, [r1, #10]
 8010f50:	80c3      	strheq	r3, [r0, #6]
 8010f52:	4770      	bx	lr

08010f54 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8010f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f56:	4604      	mov	r4, r0
 8010f58:	466b      	mov	r3, sp
 8010f5a:	6808      	ldr	r0, [r1, #0]
 8010f5c:	6849      	ldr	r1, [r1, #4]
 8010f5e:	c303      	stmia	r3!, {r0, r1}
 8010f60:	6823      	ldr	r3, [r4, #0]
 8010f62:	4669      	mov	r1, sp
 8010f64:	4620      	mov	r0, r4
 8010f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f68:	4798      	blx	r3
 8010f6a:	4b08      	ldr	r3, [pc, #32]	; (8010f8c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010f72:	b10a      	cbz	r2, 8010f78 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8010f74:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010f76:	b900      	cbnz	r0, 8010f7a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8010f78:	6898      	ldr	r0, [r3, #8]
 8010f7a:	6803      	ldr	r3, [r0, #0]
 8010f7c:	4669      	mov	r1, sp
 8010f7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010f80:	699d      	ldr	r5, [r3, #24]
 8010f82:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010f86:	47a8      	blx	r5
 8010f88:	b003      	add	sp, #12
 8010f8a:	bd30      	pop	{r4, r5, pc}
 8010f8c:	2000df70 	.word	0x2000df70

08010f90 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8010f90:	b570      	push	{r4, r5, r6, lr}
 8010f92:	880b      	ldrh	r3, [r1, #0]
 8010f94:	4605      	mov	r5, r0
 8010f96:	4604      	mov	r4, r0
 8010f98:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8010f9a:	8813      	ldrh	r3, [r2, #0]
 8010f9c:	f825 3f30 	strh.w	r3, [r5, #48]!
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	f004 fb65 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010fa6:	4606      	mov	r6, r0
 8010fa8:	4628      	mov	r0, r5
 8010faa:	f004 fb9b 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010fae:	6823      	ldr	r3, [r4, #0]
 8010fb0:	4605      	mov	r5, r0
 8010fb2:	b231      	sxth	r1, r6
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb8:	4798      	blx	r3
 8010fba:	6823      	ldr	r3, [r4, #0]
 8010fbc:	b229      	sxth	r1, r5
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fc6:	4718      	bx	r3

08010fc8 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8010fc8:	b510      	push	{r4, lr}
 8010fca:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8010fce:	4604      	mov	r4, r0
 8010fd0:	2bff      	cmp	r3, #255	; 0xff
 8010fd2:	d006      	beq.n	8010fe2 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	8003      	strh	r3, [r0, #0]
 8010fd8:	8043      	strh	r3, [r0, #2]
 8010fda:	8083      	strh	r3, [r0, #4]
 8010fdc:	80c3      	strh	r3, [r0, #6]
 8010fde:	4620      	mov	r0, r4
 8010fe0:	bd10      	pop	{r4, pc}
 8010fe2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8010fe6:	b11b      	cbz	r3, 8010ff0 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8010fe8:	3130      	adds	r1, #48	; 0x30
 8010fea:	f004 fbb5 	bl	8015758 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010fee:	e7f6      	b.n	8010fde <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8010ff0:	312e      	adds	r1, #46	; 0x2e
 8010ff2:	e7fa      	b.n	8010fea <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08010ff4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8010ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8010ffc:	b08a      	sub	sp, #40	; 0x28
 8010ffe:	4604      	mov	r4, r0
 8011000:	4688      	mov	r8, r1
 8011002:	2b00      	cmp	r3, #0
 8011004:	d044      	beq.n	8011090 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8011006:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8011008:	a805      	add	r0, sp, #20
 801100a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801100e:	f004 fb2f 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011012:	4605      	mov	r5, r0
 8011014:	b206      	sxth	r6, r0
 8011016:	a805      	add	r0, sp, #20
 8011018:	f004 fb64 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801101c:	f9b8 2000 	ldrsh.w	r2, [r8]
 8011020:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8011024:	2300      	movs	r3, #0
 8011026:	fa0f fc80 	sxth.w	ip, r0
 801102a:	4417      	add	r7, r2
 801102c:	9306      	str	r3, [sp, #24]
 801102e:	b2bf      	uxth	r7, r7
 8011030:	fa0f fe87 	sxth.w	lr, r7
 8011034:	459e      	cmp	lr, r3
 8011036:	dd2d      	ble.n	8011094 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8011038:	4296      	cmp	r6, r2
 801103a:	dd2b      	ble.n	8011094 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801103c:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8011040:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8011044:	4419      	add	r1, r3
 8011046:	b289      	uxth	r1, r1
 8011048:	fa0f f881 	sxth.w	r8, r1
 801104c:	f1b8 0f00 	cmp.w	r8, #0
 8011050:	dd20      	ble.n	8011094 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8011052:	459c      	cmp	ip, r3
 8011054:	dd1e      	ble.n	8011094 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8011056:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801105a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801105e:	4576      	cmp	r6, lr
 8011060:	bfa8      	it	ge
 8011062:	463d      	movge	r5, r7
 8011064:	45c4      	cmp	ip, r8
 8011066:	bfa8      	it	ge
 8011068:	4608      	movge	r0, r1
 801106a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801106e:	1aad      	subs	r5, r5, r2
 8011070:	1ac0      	subs	r0, r0, r3
 8011072:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011076:	f8ad 501c 	strh.w	r5, [sp, #28]
 801107a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801107e:	4b1f      	ldr	r3, [pc, #124]	; (80110fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	b953      	cbnz	r3, 801109a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8011084:	4b1e      	ldr	r3, [pc, #120]	; (8011100 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8011086:	2187      	movs	r1, #135	; 0x87
 8011088:	4a1e      	ldr	r2, [pc, #120]	; (8011104 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801108a:	481f      	ldr	r0, [pc, #124]	; (8011108 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 801108c:	f00c fe92 	bl	801ddb4 <__assert_func>
 8011090:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8011092:	e7b9      	b.n	8011008 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8011094:	2300      	movs	r3, #0
 8011096:	9307      	str	r3, [sp, #28]
 8011098:	e7f1      	b.n	801107e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801109a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801109e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d026      	beq.n	80110f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80110a6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	dd22      	ble.n	80110f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80110ae:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	dd1e      	ble.n	80110f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80110b6:	2300      	movs	r3, #0
 80110b8:	a908      	add	r1, sp, #32
 80110ba:	4620      	mov	r0, r4
 80110bc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80110c0:	6823      	ldr	r3, [r4, #0]
 80110c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110c4:	4798      	blx	r3
 80110c6:	4b11      	ldr	r3, [pc, #68]	; (801110c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80110ce:	b10a      	cbz	r2, 80110d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80110d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80110d2:	b900      	cbnz	r0, 80110d6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 80110d4:	6898      	ldr	r0, [r3, #8]
 80110d6:	2501      	movs	r5, #1
 80110d8:	6801      	ldr	r1, [r0, #0]
 80110da:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80110de:	9502      	str	r5, [sp, #8]
 80110e0:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80110e4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80110e8:	9401      	str	r4, [sp, #4]
 80110ea:	ac06      	add	r4, sp, #24
 80110ec:	9400      	str	r4, [sp, #0]
 80110ee:	688c      	ldr	r4, [r1, #8]
 80110f0:	a905      	add	r1, sp, #20
 80110f2:	47a0      	blx	r4
 80110f4:	b00a      	add	sp, #40	; 0x28
 80110f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110fa:	bf00      	nop
 80110fc:	2000dff8 	.word	0x2000dff8
 8011100:	08020e88 	.word	0x08020e88
 8011104:	08020f5c 	.word	0x08020f5c
 8011108:	08020ec4 	.word	0x08020ec4
 801110c:	2000df70 	.word	0x2000df70

08011110 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011110:	b570      	push	{r4, r5, r6, lr}
 8011112:	880b      	ldrh	r3, [r1, #0]
 8011114:	460d      	mov	r5, r1
 8011116:	4604      	mov	r4, r0
 8011118:	84c3      	strh	r3, [r0, #38]	; 0x26
 801111a:	4608      	mov	r0, r1
 801111c:	f004 faa8 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011120:	4606      	mov	r6, r0
 8011122:	4628      	mov	r0, r5
 8011124:	f004 fade 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011128:	6823      	ldr	r3, [r4, #0]
 801112a:	4605      	mov	r5, r0
 801112c:	b231      	sxth	r1, r6
 801112e:	4620      	mov	r0, r4
 8011130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011132:	4798      	blx	r3
 8011134:	6823      	ldr	r3, [r4, #0]
 8011136:	b229      	sxth	r1, r5
 8011138:	4620      	mov	r0, r4
 801113a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801113c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011140:	4718      	bx	r3

08011142 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011142:	b510      	push	{r4, lr}
 8011144:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8011148:	4604      	mov	r4, r0
 801114a:	2bff      	cmp	r3, #255	; 0xff
 801114c:	d006      	beq.n	801115c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801114e:	2300      	movs	r3, #0
 8011150:	8003      	strh	r3, [r0, #0]
 8011152:	8043      	strh	r3, [r0, #2]
 8011154:	8083      	strh	r3, [r0, #4]
 8011156:	80c3      	strh	r3, [r0, #6]
 8011158:	4620      	mov	r0, r4
 801115a:	bd10      	pop	{r4, pc}
 801115c:	3126      	adds	r1, #38	; 0x26
 801115e:	f004 fafb 	bl	8015758 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011162:	e7f9      	b.n	8011158 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08011164 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011168:	4604      	mov	r4, r0
 801116a:	b088      	sub	sp, #32
 801116c:	2500      	movs	r5, #0
 801116e:	460f      	mov	r7, r1
 8011170:	f854 3b26 	ldr.w	r3, [r4], #38
 8011174:	a904      	add	r1, sp, #16
 8011176:	4606      	mov	r6, r0
 8011178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801117a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801117e:	4798      	blx	r3
 8011180:	4620      	mov	r0, r4
 8011182:	f004 fa75 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011186:	4680      	mov	r8, r0
 8011188:	4620      	mov	r0, r4
 801118a:	f004 faab 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801118e:	9506      	str	r5, [sp, #24]
 8011190:	ad06      	add	r5, sp, #24
 8011192:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011196:	4639      	mov	r1, r7
 8011198:	f8ad 801c 	strh.w	r8, [sp, #28]
 801119c:	4628      	mov	r0, r5
 801119e:	f7fe fbb7 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 80111a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	dd19      	ble.n	80111de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80111aa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	dd15      	ble.n	80111de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80111b2:	4b0c      	ldr	r3, [pc, #48]	; (80111e4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80111ba:	b10a      	cbz	r2, 80111c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80111bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80111be:	b900      	cbnz	r0, 80111c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80111c0:	6898      	ldr	r0, [r3, #8]
 80111c2:	2701      	movs	r7, #1
 80111c4:	6801      	ldr	r1, [r0, #0]
 80111c6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80111ca:	9702      	str	r7, [sp, #8]
 80111cc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80111d0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80111d4:	e9cd 5600 	strd	r5, r6, [sp]
 80111d8:	688d      	ldr	r5, [r1, #8]
 80111da:	4621      	mov	r1, r4
 80111dc:	47a8      	blx	r5
 80111de:	b008      	add	sp, #32
 80111e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111e4:	2000df70 	.word	0x2000df70

080111e8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 80111e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111ec:	4604      	mov	r4, r0
 80111ee:	b08c      	sub	sp, #48	; 0x30
 80111f0:	4688      	mov	r8, r1
 80111f2:	f7ff feff 	bl	8010ff4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80111f6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80111f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111fc:	4293      	cmp	r3, r2
 80111fe:	f000 809a 	beq.w	8011336 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8011202:	4e55      	ldr	r6, [pc, #340]	; (8011358 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8011204:	6832      	ldr	r2, [r6, #0]
 8011206:	b92a      	cbnz	r2, 8011214 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8011208:	4b54      	ldr	r3, [pc, #336]	; (801135c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801120a:	21ae      	movs	r1, #174	; 0xae
 801120c:	4a54      	ldr	r2, [pc, #336]	; (8011360 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801120e:	4855      	ldr	r0, [pc, #340]	; (8011364 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8011210:	f00c fdd0 	bl	801ddb4 <__assert_func>
 8011214:	4d54      	ldr	r5, [pc, #336]	; (8011368 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 8011216:	8829      	ldrh	r1, [r5, #0]
 8011218:	4299      	cmp	r1, r3
 801121a:	d803      	bhi.n	8011224 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 801121c:	4b53      	ldr	r3, [pc, #332]	; (801136c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801121e:	21af      	movs	r1, #175	; 0xaf
 8011220:	4a4f      	ldr	r2, [pc, #316]	; (8011360 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8011222:	e7f4      	b.n	801120e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 8011224:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011228:	f04f 0c02 	mov.w	ip, #2
 801122c:	4b50      	ldr	r3, [pc, #320]	; (8011370 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801122e:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011238:	f1be 0f01 	cmp.w	lr, #1
 801123c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8011240:	f04f 0300 	mov.w	r3, #0
 8011244:	b208      	sxth	r0, r1
 8011246:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801124a:	9303      	str	r3, [sp, #12]
 801124c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8011250:	d074      	beq.n	801133c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8011252:	f1be 0f03 	cmp.w	lr, #3
 8011256:	d071      	beq.n	801133c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8011258:	1a52      	subs	r2, r2, r1
 801125a:	f8ad 3010 	strh.w	r3, [sp, #16]
 801125e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011262:	fb92 f2fc 	sdiv	r2, r2, ip
 8011266:	f8ad 200e 	strh.w	r2, [sp, #14]
 801126a:	f10d 090c 	add.w	r9, sp, #12
 801126e:	f10d 0a14 	add.w	sl, sp, #20
 8011272:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011276:	e88a 0003 	stmia.w	sl, {r0, r1}
 801127a:	4641      	mov	r1, r8
 801127c:	4650      	mov	r0, sl
 801127e:	f7fe fb47 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 8011282:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011286:	2b00      	cmp	r3, #0
 8011288:	dd55      	ble.n	8011336 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801128a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801128e:	2b00      	cmp	r3, #0
 8011290:	dd51      	ble.n	8011336 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8011292:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011296:	4649      	mov	r1, r9
 8011298:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801129c:	4620      	mov	r0, r4
 801129e:	1a9b      	subs	r3, r3, r2
 80112a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80112a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80112a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80112ac:	1a9b      	subs	r3, r3, r2
 80112ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80112b2:	6823      	ldr	r3, [r4, #0]
 80112b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b6:	4798      	blx	r3
 80112b8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d047      	beq.n	8011350 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 80112c0:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80112c4:	6833      	ldr	r3, [r6, #0]
 80112c6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d09c      	beq.n	8011208 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 80112ce:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80112d0:	882d      	ldrh	r5, [r5, #0]
 80112d2:	428d      	cmp	r5, r1
 80112d4:	d9a2      	bls.n	801121c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 80112d6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80112da:	6812      	ldr	r2, [r2, #0]
 80112dc:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 80112e0:	785b      	ldrb	r3, [r3, #1]
 80112e2:	9209      	str	r2, [sp, #36]	; 0x24
 80112e4:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80112e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80112ec:	9707      	str	r7, [sp, #28]
 80112ee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80112f2:	2300      	movs	r3, #0
 80112f4:	f88d 5020 	strb.w	r5, [sp, #32]
 80112f8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80112fc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8011300:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8011304:	4b1b      	ldr	r3, [pc, #108]	; (8011374 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 8011306:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8011310:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011314:	b10a      	cbz	r2, 801131a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 8011316:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011318:	b904      	cbnz	r4, 801131c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 801131a:	689c      	ldr	r4, [r3, #8]
 801131c:	4b16      	ldr	r3, [pc, #88]	; (8011378 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801131e:	6818      	ldr	r0, [r3, #0]
 8011320:	f7f4 f8c2 	bl	80054a8 <_ZNK8touchgfx5Texts7getTextEt>
 8011324:	ab07      	add	r3, sp, #28
 8011326:	9001      	str	r0, [sp, #4]
 8011328:	4620      	mov	r0, r4
 801132a:	9300      	str	r3, [sp, #0]
 801132c:	4653      	mov	r3, sl
 801132e:	e899 0006 	ldmia.w	r9, {r1, r2}
 8011332:	f7f4 f84a 	bl	80053ca <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011336:	b00c      	add	sp, #48	; 0x30
 8011338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801133c:	1a5b      	subs	r3, r3, r1
 801133e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011342:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011346:	fb93 f3fc 	sdiv	r3, r3, ip
 801134a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801134e:	e78c      	b.n	801126a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 8011350:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8011354:	e7b6      	b.n	80112c4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 8011356:	bf00      	nop
 8011358:	2000dfc0 	.word	0x2000dfc0
 801135c:	08020ff8 	.word	0x08020ff8
 8011360:	08021128 	.word	0x08021128
 8011364:	0802103a 	.word	0x0802103a
 8011368:	2000dfc4 	.word	0x2000dfc4
 801136c:	08021063 	.word	0x08021063
 8011370:	2000dfc8 	.word	0x2000dfc8
 8011374:	2000df70 	.word	0x2000df70
 8011378:	2000dfcc 	.word	0x2000dfcc

0801137c <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801137c:	2101      	movs	r1, #1
 801137e:	2200      	movs	r2, #0
 8011380:	b510      	push	{r4, lr}
 8011382:	4c13      	ldr	r4, [pc, #76]	; (80113d0 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8011384:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8011388:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801138c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011390:	6004      	str	r4, [r0, #0]
 8011392:	4c10      	ldr	r4, [pc, #64]	; (80113d4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8011394:	8082      	strh	r2, [r0, #4]
 8011396:	80c2      	strh	r2, [r0, #6]
 8011398:	8102      	strh	r2, [r0, #8]
 801139a:	8142      	strh	r2, [r0, #10]
 801139c:	8182      	strh	r2, [r0, #12]
 801139e:	81c2      	strh	r2, [r0, #14]
 80113a0:	8202      	strh	r2, [r0, #16]
 80113a2:	8242      	strh	r2, [r0, #18]
 80113a4:	61c2      	str	r2, [r0, #28]
 80113a6:	8402      	strh	r2, [r0, #32]
 80113a8:	8442      	strh	r2, [r0, #34]	; 0x22
 80113aa:	6282      	str	r2, [r0, #40]	; 0x28
 80113ac:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80113b0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80113b2:	8601      	strh	r1, [r0, #48]	; 0x30
 80113b4:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80113b8:	6344      	str	r4, [r0, #52]	; 0x34
 80113ba:	8701      	strh	r1, [r0, #56]	; 0x38
 80113bc:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80113c0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 80113c4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80113c8:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80113cc:	bd10      	pop	{r4, pc}
 80113ce:	bf00      	nop
 80113d0:	080210c0 	.word	0x080210c0
 80113d4:	0801fe98 	.word	0x0801fe98

080113d8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80113d8:	4b01      	ldr	r3, [pc, #4]	; (80113e0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80113da:	6019      	str	r1, [r3, #0]
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop
 80113e0:	2000df78 	.word	0x2000df78

080113e4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80113e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e8:	4696      	mov	lr, r2
 80113ea:	b097      	sub	sp, #92	; 0x5c
 80113ec:	4605      	mov	r5, r0
 80113ee:	4614      	mov	r4, r2
 80113f0:	460e      	mov	r6, r1
 80113f2:	461f      	mov	r7, r3
 80113f4:	f10d 0c1c 	add.w	ip, sp, #28
 80113f8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80113fc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8011400:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8011404:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011408:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801140c:	f8de 3000 	ldr.w	r3, [lr]
 8011410:	f104 0e14 	add.w	lr, r4, #20
 8011414:	f8cc 3000 	str.w	r3, [ip]
 8011418:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801141c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011420:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011424:	f8de 3000 	ldr.w	r3, [lr]
 8011428:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801142c:	f8cc 3000 	str.w	r3, [ip]
 8011430:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011434:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801143c:	f8de 3000 	ldr.w	r3, [lr]
 8011440:	4631      	mov	r1, r6
 8011442:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011444:	4628      	mov	r0, r5
 8011446:	f8cc 3000 	str.w	r3, [ip]
 801144a:	682b      	ldr	r3, [r5, #0]
 801144c:	9201      	str	r2, [sp, #4]
 801144e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011450:	f8cd 8008 	str.w	r8, [sp, #8]
 8011454:	9200      	str	r2, [sp, #0]
 8011456:	aa07      	add	r2, sp, #28
 8011458:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801145c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8011460:	463b      	mov	r3, r7
 8011462:	47d8      	blx	fp
 8011464:	46a6      	mov	lr, r4
 8011466:	f10d 0c1c 	add.w	ip, sp, #28
 801146a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801146e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011472:	f8de 3000 	ldr.w	r3, [lr]
 8011476:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801147a:	343c      	adds	r4, #60	; 0x3c
 801147c:	f8cc 3000 	str.w	r3, [ip]
 8011480:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011484:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011488:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801148c:	f8de 3000 	ldr.w	r3, [lr]
 8011490:	f8cc 3000 	str.w	r3, [ip]
 8011494:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801149a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801149e:	6823      	ldr	r3, [r4, #0]
 80114a0:	4631      	mov	r1, r6
 80114a2:	4628      	mov	r0, r5
 80114a4:	f8cc 3000 	str.w	r3, [ip]
 80114a8:	682b      	ldr	r3, [r5, #0]
 80114aa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80114ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80114b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80114b4:	9201      	str	r2, [sp, #4]
 80114b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80114b8:	9200      	str	r2, [sp, #0]
 80114ba:	aa07      	add	r2, sp, #28
 80114bc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80114be:	463b      	mov	r3, r7
 80114c0:	47a0      	blx	r4
 80114c2:	b017      	add	sp, #92	; 0x5c
 80114c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114c8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80114c8:	2000      	movs	r0, #0
 80114ca:	4770      	bx	lr

080114cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80114cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d0:	b08d      	sub	sp, #52	; 0x34
 80114d2:	4688      	mov	r8, r1
 80114d4:	f8d3 c000 	ldr.w	ip, [r3]
 80114d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80114da:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80114de:	680f      	ldr	r7, [r1, #0]
 80114e0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80114e4:	eba7 070c 	sub.w	r7, r7, ip
 80114e8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80114ec:	edd3 6a07 	vldr	s13, [r3, #28]
 80114f0:	42bc      	cmp	r4, r7
 80114f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80114f4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80114f8:	bfa8      	it	ge
 80114fa:	463c      	movge	r4, r7
 80114fc:	f9b1 9000 	ldrsh.w	r9, [r1]
 8011500:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011504:	ee07 4a90 	vmov	s15, r4
 8011508:	eb09 0e0c 	add.w	lr, r9, ip
 801150c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8011510:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011514:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011518:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801151c:	4571      	cmp	r1, lr
 801151e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8011522:	ee65 4a24 	vmul.f32	s9, s10, s9
 8011526:	ee25 5a27 	vmul.f32	s10, s10, s15
 801152a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801152e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8011532:	ee32 1a05 	vadd.f32	s2, s4, s10
 8011536:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801153a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801153e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011542:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011546:	f340 808c 	ble.w	8011662 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801154a:	eba1 060e 	sub.w	r6, r1, lr
 801154e:	fb96 f5f4 	sdiv	r5, r6, r4
 8011552:	ee07 5a10 	vmov	s14, r5
 8011556:	2d00      	cmp	r5, #0
 8011558:	fb04 6615 	mls	r6, r4, r5, r6
 801155c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011560:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011564:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011568:	eea7 1a05 	vfma.f32	s2, s14, s10
 801156c:	dd12      	ble.n	8011594 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801156e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8011572:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011576:	ee31 2a45 	vsub.f32	s4, s2, s10
 801157a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011582:	bf14      	ite	ne
 8011584:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011588:	eeb0 7a67 	vmoveq.f32	s14, s15
 801158c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011590:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011594:	fb05 f204 	mul.w	r2, r5, r4
 8011598:	1abf      	subs	r7, r7, r2
 801159a:	4494      	add	ip, r2
 801159c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80115a0:	4411      	add	r1, r2
 80115a2:	eb09 020c 	add.w	r2, r9, ip
 80115a6:	b209      	sxth	r1, r1
 80115a8:	443a      	add	r2, r7
 80115aa:	428a      	cmp	r2, r1
 80115ac:	bfc4      	itt	gt
 80115ae:	eba1 0209 	subgt.w	r2, r1, r9
 80115b2:	eba2 070c 	subgt.w	r7, r2, ip
 80115b6:	2f00      	cmp	r7, #0
 80115b8:	dd50      	ble.n	801165c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80115ba:	fb97 f1f4 	sdiv	r1, r7, r4
 80115be:	fb04 7211 	mls	r2, r4, r1, r7
 80115c2:	b90a      	cbnz	r2, 80115c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80115c4:	3901      	subs	r1, #1
 80115c6:	4622      	mov	r2, r4
 80115c8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80115cc:	6840      	ldr	r0, [r0, #4]
 80115ce:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80115d2:	44b6      	add	lr, r6
 80115d4:	f8d0 a000 	ldr.w	sl, [r0]
 80115d8:	2900      	cmp	r1, #0
 80115da:	bfcc      	ite	gt
 80115dc:	46a1      	movgt	r9, r4
 80115de:	4691      	movle	r9, r2
 80115e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80115e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80115e4:	fb04 e505 	mla	r5, r4, r5, lr
 80115e8:	eef0 6a42 	vmov.f32	s13, s4
 80115ec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80115f0:	9008      	str	r0, [sp, #32]
 80115f2:	eeb0 7a61 	vmov.f32	s14, s3
 80115f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80115f8:	695b      	ldr	r3, [r3, #20]
 80115fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80115fe:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011602:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011606:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011608:	445b      	add	r3, fp
 801160a:	9307      	str	r3, [sp, #28]
 801160c:	ee16 3a90 	vmov	r3, s13
 8011610:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011614:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8011618:	ee21 3a23 	vmul.f32	s6, s2, s7
 801161c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011620:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011624:	ee17 7a90 	vmov	r7, s15
 8011628:	ee73 7a42 	vsub.f32	s15, s6, s4
 801162c:	fb97 f7f4 	sdiv	r7, r7, r4
 8011630:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011634:	ee17 ca90 	vmov	ip, s15
 8011638:	fb9c fcf4 	sdiv	ip, ip, r4
 801163c:	fb0c 3306 	mla	r3, ip, r6, r3
 8011640:	9302      	str	r3, [sp, #8]
 8011642:	ee17 3a10 	vmov	r3, s14
 8011646:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801164a:	fb07 3706 	mla	r7, r7, r6, r3
 801164e:	eba9 0306 	sub.w	r3, r9, r6
 8011652:	e9cd 4700 	strd	r4, r7, [sp]
 8011656:	f8da 4008 	ldr.w	r4, [sl, #8]
 801165a:	47a0      	blx	r4
 801165c:	b00d      	add	sp, #52	; 0x34
 801165e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011662:	2500      	movs	r5, #0
 8011664:	462e      	mov	r6, r5
 8011666:	e799      	b.n	801159c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011668 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801166c:	b0db      	sub	sp, #364	; 0x16c
 801166e:	461d      	mov	r5, r3
 8011670:	4614      	mov	r4, r2
 8011672:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8011676:	910f      	str	r1, [sp, #60]	; 0x3c
 8011678:	4629      	mov	r1, r5
 801167a:	930a      	str	r3, [sp, #40]	; 0x28
 801167c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8011680:	9009      	str	r0, [sp, #36]	; 0x24
 8011682:	930b      	str	r3, [sp, #44]	; 0x2c
 8011684:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8011688:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801168c:	9310      	str	r3, [sp, #64]	; 0x40
 801168e:	6803      	ldr	r3, [r0, #0]
 8011690:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8011692:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011696:	47b8      	blx	r7
 8011698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801169a:	6058      	str	r0, [r3, #4]
 801169c:	2800      	cmp	r0, #0
 801169e:	f000 83a1 	beq.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80116a2:	682b      	ldr	r3, [r5, #0]
 80116a4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80116a8:	ed94 7a02 	vldr	s14, [r4, #8]
 80116ac:	9314      	str	r3, [sp, #80]	; 0x50
 80116ae:	686b      	ldr	r3, [r5, #4]
 80116b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80116b4:	9315      	str	r3, [sp, #84]	; 0x54
 80116b6:	4bc1      	ldr	r3, [pc, #772]	; (80119bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80116b8:	7819      	ldrb	r1, [r3, #0]
 80116ba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80116be:	2900      	cmp	r1, #0
 80116c0:	bf16      	itet	ne
 80116c2:	4619      	movne	r1, r3
 80116c4:	4611      	moveq	r1, r2
 80116c6:	4613      	movne	r3, r2
 80116c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116cc:	9116      	str	r1, [sp, #88]	; 0x58
 80116ce:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80116d2:	f240 8387 	bls.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80116d6:	ed94 7a07 	vldr	s14, [r4, #28]
 80116da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80116de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e2:	f240 837f 	bls.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80116e6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80116ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80116ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f2:	f240 8377 	bls.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80116f6:	6822      	ldr	r2, [r4, #0]
 80116f8:	4bb1      	ldr	r3, [pc, #708]	; (80119c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80116fa:	429a      	cmp	r2, r3
 80116fc:	f2c0 8372 	blt.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011700:	49b0      	ldr	r1, [pc, #704]	; (80119c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8011702:	6963      	ldr	r3, [r4, #20]
 8011704:	428a      	cmp	r2, r1
 8011706:	f300 836d 	bgt.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801170a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801170e:	48ae      	ldr	r0, [pc, #696]	; (80119c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8011710:	33ff      	adds	r3, #255	; 0xff
 8011712:	4283      	cmp	r3, r0
 8011714:	f200 8366 	bhi.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801171a:	4dac      	ldr	r5, [pc, #688]	; (80119cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801171c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8011720:	33ff      	adds	r3, #255	; 0xff
 8011722:	42ab      	cmp	r3, r5
 8011724:	f200 835e 	bhi.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011728:	6862      	ldr	r2, [r4, #4]
 801172a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801172e:	33ff      	adds	r3, #255	; 0xff
 8011730:	4283      	cmp	r3, r0
 8011732:	f200 8357 	bhi.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011736:	69a1      	ldr	r1, [r4, #24]
 8011738:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801173c:	33ff      	adds	r3, #255	; 0xff
 801173e:	4283      	cmp	r3, r0
 8011740:	f200 8350 	bhi.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011744:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011746:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801174a:	30ff      	adds	r0, #255	; 0xff
 801174c:	42a8      	cmp	r0, r5
 801174e:	f200 8349 	bhi.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011752:	428a      	cmp	r2, r1
 8011754:	f280 8110 	bge.w	8011978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8011758:	429a      	cmp	r2, r3
 801175a:	f300 8119 	bgt.w	8011990 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801175e:	4299      	cmp	r1, r3
 8011760:	f280 811d 	bge.w	801199e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011764:	2502      	movs	r5, #2
 8011766:	2701      	movs	r7, #1
 8011768:	46a9      	mov	r9, r5
 801176a:	46b8      	mov	r8, r7
 801176c:	f04f 0a00 	mov.w	sl, #0
 8011770:	4621      	mov	r1, r4
 8011772:	a849      	add	r0, sp, #292	; 0x124
 8011774:	f003 fcca 	bl	801510c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011778:	4622      	mov	r2, r4
 801177a:	4653      	mov	r3, sl
 801177c:	a949      	add	r1, sp, #292	; 0x124
 801177e:	f8cd 9000 	str.w	r9, [sp]
 8011782:	a819      	add	r0, sp, #100	; 0x64
 8011784:	f003 fdf2 	bl	801536c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011788:	4622      	mov	r2, r4
 801178a:	4653      	mov	r3, sl
 801178c:	a949      	add	r1, sp, #292	; 0x124
 801178e:	f8cd 8000 	str.w	r8, [sp]
 8011792:	a829      	add	r0, sp, #164	; 0xa4
 8011794:	f003 fdea 	bl	801536c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011798:	4643      	mov	r3, r8
 801179a:	4622      	mov	r2, r4
 801179c:	a949      	add	r1, sp, #292	; 0x124
 801179e:	f8cd 9000 	str.w	r9, [sp]
 80117a2:	a839      	add	r0, sp, #228	; 0xe4
 80117a4:	f003 fde2 	bl	801536c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80117a8:	42af      	cmp	r7, r5
 80117aa:	af12      	add	r7, sp, #72	; 0x48
 80117ac:	bfb7      	itett	lt
 80117ae:	2300      	movlt	r3, #0
 80117b0:	2301      	movge	r3, #1
 80117b2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80117b4:	ac19      	addlt	r4, sp, #100	; 0x64
 80117b6:	bfb1      	iteee	lt
 80117b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80117ba:	ad19      	addge	r5, sp, #100	; 0x64
 80117bc:	930e      	strge	r3, [sp, #56]	; 0x38
 80117be:	ac29      	addge	r4, sp, #164	; 0xa4
 80117c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80117c6:	e887 0003 	stmia.w	r7, {r0, r1}
 80117ca:	b928      	cbnz	r0, 80117d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80117cc:	4b80      	ldr	r3, [pc, #512]	; (80119d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80117ce:	6818      	ldr	r0, [r3, #0]
 80117d0:	6803      	ldr	r3, [r0, #0]
 80117d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d4:	4798      	blx	r3
 80117d6:	6038      	str	r0, [r7, #0]
 80117d8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80117da:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80117de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80117e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80117e4:	930c      	str	r3, [sp, #48]	; 0x30
 80117e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80117e8:	6963      	ldr	r3, [r4, #20]
 80117ea:	440b      	add	r3, r1
 80117ec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80117f0:	4408      	add	r0, r1
 80117f2:	b200      	sxth	r0, r0
 80117f4:	4283      	cmp	r3, r0
 80117f6:	900d      	str	r0, [sp, #52]	; 0x34
 80117f8:	f280 80dd 	bge.w	80119b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80117fc:	428b      	cmp	r3, r1
 80117fe:	da08      	bge.n	8011812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011800:	2a00      	cmp	r2, #0
 8011802:	dd06      	ble.n	8011812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011804:	1acb      	subs	r3, r1, r3
 8011806:	429a      	cmp	r2, r3
 8011808:	f2c0 80e4 	blt.w	80119d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801180c:	2b00      	cmp	r3, #0
 801180e:	f300 80e2 	bgt.w	80119d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8011812:	6967      	ldr	r7, [r4, #20]
 8011814:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8011818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801181a:	443b      	add	r3, r7
 801181c:	461f      	mov	r7, r3
 801181e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011820:	1bdf      	subs	r7, r3, r7
 8011822:	4297      	cmp	r7, r2
 8011824:	bfa8      	it	ge
 8011826:	4617      	movge	r7, r2
 8011828:	2f00      	cmp	r7, #0
 801182a:	f340 8166 	ble.w	8011afa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801182e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011830:	6829      	ldr	r1, [r5, #0]
 8011832:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011836:	f9bb 3000 	ldrsh.w	r3, [fp]
 801183a:	4411      	add	r1, r2
 801183c:	6820      	ldr	r0, [r4, #0]
 801183e:	4299      	cmp	r1, r3
 8011840:	dd1a      	ble.n	8011878 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011842:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011846:	4402      	add	r2, r0
 8011848:	440b      	add	r3, r1
 801184a:	b21b      	sxth	r3, r3
 801184c:	429a      	cmp	r2, r3
 801184e:	dc13      	bgt.n	8011878 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011850:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011852:	a912      	add	r1, sp, #72	; 0x48
 8011854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011856:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	9206      	str	r2, [sp, #24]
 801185c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801185e:	9500      	str	r5, [sp, #0]
 8011860:	9205      	str	r2, [sp, #20]
 8011862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011864:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011868:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801186a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801186e:	aa49      	add	r2, sp, #292	; 0x124
 8011870:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8011874:	4623      	mov	r3, r4
 8011876:	47c8      	blx	r9
 8011878:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801187c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8011880:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8011884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011888:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801188c:	68a1      	ldr	r1, [r4, #8]
 801188e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011892:	ed94 6a08 	vldr	s12, [r4, #32]
 8011896:	edd4 6a07 	vldr	s13, [r4, #28]
 801189a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801189e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80118a2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80118a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80118aa:	edc4 6a07 	vstr	s13, [r4, #28]
 80118ae:	441a      	add	r2, r3
 80118b0:	6963      	ldr	r3, [r4, #20]
 80118b2:	3301      	adds	r3, #1
 80118b4:	6022      	str	r2, [r4, #0]
 80118b6:	6163      	str	r3, [r4, #20]
 80118b8:	69a3      	ldr	r3, [r4, #24]
 80118ba:	3b01      	subs	r3, #1
 80118bc:	61a3      	str	r3, [r4, #24]
 80118be:	6923      	ldr	r3, [r4, #16]
 80118c0:	440b      	add	r3, r1
 80118c2:	68e1      	ldr	r1, [r4, #12]
 80118c4:	428b      	cmp	r3, r1
 80118c6:	6123      	str	r3, [r4, #16]
 80118c8:	db15      	blt.n	80118f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80118ca:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80118ce:	3201      	adds	r2, #1
 80118d0:	1a5b      	subs	r3, r3, r1
 80118d2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80118d6:	6022      	str	r2, [r4, #0]
 80118d8:	6123      	str	r3, [r4, #16]
 80118da:	edc4 6a07 	vstr	s13, [r4, #28]
 80118de:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80118e2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80118e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80118ea:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80118ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118f2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80118f6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80118fa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80118fe:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8011902:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011906:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801190a:	68a9      	ldr	r1, [r5, #8]
 801190c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011910:	ed95 6a08 	vldr	s12, [r5, #32]
 8011914:	edd5 6a07 	vldr	s13, [r5, #28]
 8011918:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801191c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011920:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011924:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011928:	edc5 6a07 	vstr	s13, [r5, #28]
 801192c:	441a      	add	r2, r3
 801192e:	696b      	ldr	r3, [r5, #20]
 8011930:	3301      	adds	r3, #1
 8011932:	602a      	str	r2, [r5, #0]
 8011934:	616b      	str	r3, [r5, #20]
 8011936:	69ab      	ldr	r3, [r5, #24]
 8011938:	3b01      	subs	r3, #1
 801193a:	61ab      	str	r3, [r5, #24]
 801193c:	692b      	ldr	r3, [r5, #16]
 801193e:	440b      	add	r3, r1
 8011940:	68e9      	ldr	r1, [r5, #12]
 8011942:	428b      	cmp	r3, r1
 8011944:	612b      	str	r3, [r5, #16]
 8011946:	db15      	blt.n	8011974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8011948:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801194c:	3201      	adds	r2, #1
 801194e:	1a5b      	subs	r3, r3, r1
 8011950:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011954:	602a      	str	r2, [r5, #0]
 8011956:	612b      	str	r3, [r5, #16]
 8011958:	edc5 6a07 	vstr	s13, [r5, #28]
 801195c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8011960:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011964:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011968:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801196c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011970:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011974:	3f01      	subs	r7, #1
 8011976:	e757      	b.n	8011828 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011978:	4299      	cmp	r1, r3
 801197a:	dc13      	bgt.n	80119a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801197c:	429a      	cmp	r2, r3
 801197e:	da14      	bge.n	80119aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011980:	2502      	movs	r5, #2
 8011982:	2703      	movs	r7, #3
 8011984:	f04f 0800 	mov.w	r8, #0
 8011988:	46a9      	mov	r9, r5
 801198a:	f04f 0a01 	mov.w	sl, #1
 801198e:	e6ef      	b.n	8011770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011990:	2501      	movs	r5, #1
 8011992:	2700      	movs	r7, #0
 8011994:	46a9      	mov	r9, r5
 8011996:	46b8      	mov	r8, r7
 8011998:	f04f 0a02 	mov.w	sl, #2
 801199c:	e6e8      	b.n	8011770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801199e:	2501      	movs	r5, #1
 80119a0:	2702      	movs	r7, #2
 80119a2:	e6e1      	b.n	8011768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80119a4:	2500      	movs	r5, #0
 80119a6:	2701      	movs	r7, #1
 80119a8:	e7f4      	b.n	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80119aa:	2702      	movs	r7, #2
 80119ac:	2503      	movs	r5, #3
 80119ae:	f04f 0900 	mov.w	r9, #0
 80119b2:	46b8      	mov	r8, r7
 80119b4:	e7e9      	b.n	801198a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80119b6:	4613      	mov	r3, r2
 80119b8:	e728      	b.n	801180c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80119ba:	bf00      	nop
 80119bc:	2000df68 	.word	0x2000df68
 80119c0:	fffd8f01 	.word	0xfffd8f01
 80119c4:	00027100 	.word	0x00027100
 80119c8:	0004e1ff 	.word	0x0004e1ff
 80119cc:	0004e1fe 	.word	0x0004e1fe
 80119d0:	2000df70 	.word	0x2000df70
 80119d4:	4613      	mov	r3, r2
 80119d6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80119d8:	469e      	mov	lr, r3
 80119da:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80119dc:	469c      	mov	ip, r3
 80119de:	9111      	str	r1, [sp, #68]	; 0x44
 80119e0:	f04f 0900 	mov.w	r9, #0
 80119e4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80119e8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80119ec:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80119f0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80119f4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80119f8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80119fc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8011a00:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8011a04:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8011a08:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8011a0c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8011a10:	f1bc 0f00 	cmp.w	ip, #0
 8011a14:	d147      	bne.n	8011aa6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8011a16:	eb03 0c07 	add.w	ip, r3, r7
 8011a1a:	1ad7      	subs	r7, r2, r3
 8011a1c:	f1b9 0f00 	cmp.w	r9, #0
 8011a20:	d009      	beq.n	8011a36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8011a22:	9029      	str	r0, [sp, #164]	; 0xa4
 8011a24:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8011a28:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8011a2c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8011a30:	912d      	str	r1, [sp, #180]	; 0xb4
 8011a32:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8011a36:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011a38:	f04f 0800 	mov.w	r8, #0
 8011a3c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8011a40:	9111      	str	r1, [sp, #68]	; 0x44
 8011a42:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011a46:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8011a4a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8011a4e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8011a52:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8011a56:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8011a5a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8011a5e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8011a62:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8011a66:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8011a6a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8011a6e:	f1be 0f00 	cmp.w	lr, #0
 8011a72:	d031      	beq.n	8011ad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8011a74:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011a76:	4450      	add	r0, sl
 8011a78:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011a7c:	4431      	add	r1, r6
 8011a7e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011a82:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011a86:	4549      	cmp	r1, r9
 8011a88:	db08      	blt.n	8011a9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8011a8a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011a8e:	3001      	adds	r0, #1
 8011a90:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011a94:	eba1 0109 	sub.w	r1, r1, r9
 8011a98:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011a9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011aa0:	f04f 0801 	mov.w	r8, #1
 8011aa4:	e7e3      	b.n	8011a6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8011aa6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011aa8:	4450      	add	r0, sl
 8011aaa:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011aae:	4431      	add	r1, r6
 8011ab0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011ab4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011ab8:	4541      	cmp	r1, r8
 8011aba:	db08      	blt.n	8011ace <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8011abc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011ac6:	eba1 0108 	sub.w	r1, r1, r8
 8011aca:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011ace:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011ad2:	f04f 0901 	mov.w	r9, #1
 8011ad6:	e79b      	b.n	8011a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8011ad8:	449c      	add	ip, r3
 8011ada:	1aff      	subs	r7, r7, r3
 8011adc:	f1b8 0f00 	cmp.w	r8, #0
 8011ae0:	d009      	beq.n	8011af6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8011ae2:	9019      	str	r0, [sp, #100]	; 0x64
 8011ae4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8011ae8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8011aec:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8011af0:	911d      	str	r1, [sp, #116]	; 0x74
 8011af2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8011af6:	1ad2      	subs	r2, r2, r3
 8011af8:	e68b      	b.n	8011812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011afc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	f000 80d1 	beq.w	8011ca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8011b04:	ad19      	add	r5, sp, #100	; 0x64
 8011b06:	ac39      	add	r4, sp, #228	; 0xe4
 8011b08:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011b0a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011b0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011b12:	930c      	str	r3, [sp, #48]	; 0x30
 8011b14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011b16:	6963      	ldr	r3, [r4, #20]
 8011b18:	440b      	add	r3, r1
 8011b1a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011b1e:	4408      	add	r0, r1
 8011b20:	b200      	sxth	r0, r0
 8011b22:	4283      	cmp	r3, r0
 8011b24:	900d      	str	r0, [sp, #52]	; 0x34
 8011b26:	f280 80c1 	bge.w	8011cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8011b2a:	428b      	cmp	r3, r1
 8011b2c:	da08      	bge.n	8011b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011b2e:	2a00      	cmp	r2, #0
 8011b30:	dd06      	ble.n	8011b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011b32:	1acb      	subs	r3, r1, r3
 8011b34:	429a      	cmp	r2, r3
 8011b36:	f2c0 80bb 	blt.w	8011cb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	f300 80b9 	bgt.w	8011cb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8011b40:	6967      	ldr	r7, [r4, #20]
 8011b42:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8011b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b48:	443b      	add	r3, r7
 8011b4a:	461f      	mov	r7, r3
 8011b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b4e:	1bdf      	subs	r7, r3, r7
 8011b50:	4297      	cmp	r7, r2
 8011b52:	bfa8      	it	ge
 8011b54:	4617      	movge	r7, r2
 8011b56:	2f00      	cmp	r7, #0
 8011b58:	f340 813c 	ble.w	8011dd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8011b5c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011b5e:	6829      	ldr	r1, [r5, #0]
 8011b60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b64:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011b68:	4411      	add	r1, r2
 8011b6a:	6820      	ldr	r0, [r4, #0]
 8011b6c:	4299      	cmp	r1, r3
 8011b6e:	dd1a      	ble.n	8011ba6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011b70:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011b74:	4402      	add	r2, r0
 8011b76:	440b      	add	r3, r1
 8011b78:	b21b      	sxth	r3, r3
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	dc13      	bgt.n	8011ba6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011b7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011b80:	a912      	add	r1, sp, #72	; 0x48
 8011b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	9206      	str	r2, [sp, #24]
 8011b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b8c:	9500      	str	r5, [sp, #0]
 8011b8e:	9205      	str	r2, [sp, #20]
 8011b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b92:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011b96:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8011b98:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8011b9c:	aa49      	add	r2, sp, #292	; 0x124
 8011b9e:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8011ba2:	4623      	mov	r3, r4
 8011ba4:	47c8      	blx	r9
 8011ba6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8011baa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8011bae:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8011bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bb6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8011bba:	68a1      	ldr	r1, [r4, #8]
 8011bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011bc0:	ed94 6a08 	vldr	s12, [r4, #32]
 8011bc4:	edd4 6a07 	vldr	s13, [r4, #28]
 8011bc8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011bcc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011bd0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011bd4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011bd8:	edc4 6a07 	vstr	s13, [r4, #28]
 8011bdc:	441a      	add	r2, r3
 8011bde:	6963      	ldr	r3, [r4, #20]
 8011be0:	3301      	adds	r3, #1
 8011be2:	6022      	str	r2, [r4, #0]
 8011be4:	6163      	str	r3, [r4, #20]
 8011be6:	69a3      	ldr	r3, [r4, #24]
 8011be8:	3b01      	subs	r3, #1
 8011bea:	61a3      	str	r3, [r4, #24]
 8011bec:	6923      	ldr	r3, [r4, #16]
 8011bee:	440b      	add	r3, r1
 8011bf0:	68e1      	ldr	r1, [r4, #12]
 8011bf2:	428b      	cmp	r3, r1
 8011bf4:	6123      	str	r3, [r4, #16]
 8011bf6:	db15      	blt.n	8011c24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8011bf8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8011bfc:	3201      	adds	r2, #1
 8011bfe:	1a5b      	subs	r3, r3, r1
 8011c00:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011c04:	6022      	str	r2, [r4, #0]
 8011c06:	6123      	str	r3, [r4, #16]
 8011c08:	edc4 6a07 	vstr	s13, [r4, #28]
 8011c0c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8011c10:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011c14:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011c18:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c20:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011c24:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8011c28:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8011c2c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8011c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011c34:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8011c38:	68a9      	ldr	r1, [r5, #8]
 8011c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c3e:	ed95 6a08 	vldr	s12, [r5, #32]
 8011c42:	edd5 6a07 	vldr	s13, [r5, #28]
 8011c46:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011c4a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011c4e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011c52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c56:	edc5 6a07 	vstr	s13, [r5, #28]
 8011c5a:	441a      	add	r2, r3
 8011c5c:	696b      	ldr	r3, [r5, #20]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	602a      	str	r2, [r5, #0]
 8011c62:	616b      	str	r3, [r5, #20]
 8011c64:	69ab      	ldr	r3, [r5, #24]
 8011c66:	3b01      	subs	r3, #1
 8011c68:	61ab      	str	r3, [r5, #24]
 8011c6a:	692b      	ldr	r3, [r5, #16]
 8011c6c:	440b      	add	r3, r1
 8011c6e:	68e9      	ldr	r1, [r5, #12]
 8011c70:	428b      	cmp	r3, r1
 8011c72:	612b      	str	r3, [r5, #16]
 8011c74:	db15      	blt.n	8011ca2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8011c76:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8011c7a:	3201      	adds	r2, #1
 8011c7c:	1a5b      	subs	r3, r3, r1
 8011c7e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011c82:	602a      	str	r2, [r5, #0]
 8011c84:	612b      	str	r3, [r5, #16]
 8011c86:	edc5 6a07 	vstr	s13, [r5, #28]
 8011c8a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8011c8e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011c92:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011c96:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8011c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c9e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011ca2:	3f01      	subs	r7, #1
 8011ca4:	e757      	b.n	8011b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8011ca6:	ad39      	add	r5, sp, #228	; 0xe4
 8011ca8:	ac19      	add	r4, sp, #100	; 0x64
 8011caa:	e72d      	b.n	8011b08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8011cac:	4613      	mov	r3, r2
 8011cae:	e744      	b.n	8011b3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8011cb4:	469e      	mov	lr, r3
 8011cb6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8011cba:	461f      	mov	r7, r3
 8011cbc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8011cc0:	f04f 0900 	mov.w	r9, #0
 8011cc4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8011cc8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8011ccc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8011cd0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8011cd4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8011cd8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8011cda:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8011cde:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8011ce2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8011ce6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8011cea:	960e      	str	r6, [sp, #56]	; 0x38
 8011cec:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8011cf0:	2f00      	cmp	r7, #0
 8011cf2:	d146      	bne.n	8011d82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8011cf4:	449c      	add	ip, r3
 8011cf6:	1ad7      	subs	r7, r2, r3
 8011cf8:	f1b9 0f00 	cmp.w	r9, #0
 8011cfc:	d009      	beq.n	8011d12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8011cfe:	9039      	str	r0, [sp, #228]	; 0xe4
 8011d00:	913d      	str	r1, [sp, #244]	; 0xf4
 8011d02:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8011d06:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8011d0a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8011d0e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8011d12:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011d14:	f04f 0800 	mov.w	r8, #0
 8011d18:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8011d1c:	910e      	str	r1, [sp, #56]	; 0x38
 8011d1e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011d22:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8011d26:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8011d2a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8011d2e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8011d32:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8011d36:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8011d3a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8011d3e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8011d42:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8011d46:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8011d4a:	f1be 0f00 	cmp.w	lr, #0
 8011d4e:	d030      	beq.n	8011db2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8011d50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011d52:	4450      	add	r0, sl
 8011d54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011d58:	4431      	add	r1, r6
 8011d5a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011d5e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011d62:	4549      	cmp	r1, r9
 8011d64:	db08      	blt.n	8011d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8011d66:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011d6a:	3001      	adds	r0, #1
 8011d6c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011d70:	eba1 0109 	sub.w	r1, r1, r9
 8011d74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011d78:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011d7c:	f04f 0801 	mov.w	r8, #1
 8011d80:	e7e3      	b.n	8011d4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8011d82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011d84:	4450      	add	r0, sl
 8011d86:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011d8a:	4431      	add	r1, r6
 8011d8c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011d90:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011d94:	4541      	cmp	r1, r8
 8011d96:	db08      	blt.n	8011daa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8011d98:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011d9c:	3001      	adds	r0, #1
 8011d9e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011da2:	eba1 0108 	sub.w	r1, r1, r8
 8011da6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011daa:	3f01      	subs	r7, #1
 8011dac:	f04f 0901 	mov.w	r9, #1
 8011db0:	e79e      	b.n	8011cf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8011db2:	449c      	add	ip, r3
 8011db4:	1aff      	subs	r7, r7, r3
 8011db6:	f1b8 0f00 	cmp.w	r8, #0
 8011dba:	d009      	beq.n	8011dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8011dbc:	9019      	str	r0, [sp, #100]	; 0x64
 8011dbe:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8011dc2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8011dc6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8011dca:	911d      	str	r1, [sp, #116]	; 0x74
 8011dcc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8011dd0:	1ad2      	subs	r2, r2, r3
 8011dd2:	e6b5      	b.n	8011b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	b923      	cbnz	r3, 8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011dda:	4b04      	ldr	r3, [pc, #16]	; (8011dec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8011ddc:	6818      	ldr	r0, [r3, #0]
 8011dde:	6803      	ldr	r3, [r0, #0]
 8011de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011de2:	4798      	blx	r3
 8011de4:	b05b      	add	sp, #364	; 0x16c
 8011de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dea:	bf00      	nop
 8011dec:	2000df70 	.word	0x2000df70

08011df0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8011df0:	b570      	push	{r4, r5, r6, lr}
 8011df2:	4604      	mov	r4, r0
 8011df4:	2500      	movs	r5, #0
 8011df6:	9804      	ldr	r0, [sp, #16]
 8011df8:	7223      	strb	r3, [r4, #8]
 8011dfa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8011dfe:	8025      	strh	r5, [r4, #0]
 8011e00:	6061      	str	r1, [r4, #4]
 8011e02:	7263      	strb	r3, [r4, #9]
 8011e04:	60e0      	str	r0, [r4, #12]
 8011e06:	8222      	strh	r2, [r4, #16]
 8011e08:	8265      	strh	r5, [r4, #18]
 8011e0a:	82a5      	strh	r5, [r4, #20]
 8011e0c:	82e5      	strh	r5, [r4, #22]
 8011e0e:	8325      	strh	r5, [r4, #24]
 8011e10:	8365      	strh	r5, [r4, #26]
 8011e12:	83a5      	strh	r5, [r4, #28]
 8011e14:	77a5      	strb	r5, [r4, #30]
 8011e16:	6803      	ldr	r3, [r0, #0]
 8011e18:	695b      	ldr	r3, [r3, #20]
 8011e1a:	4798      	blx	r3
 8011e1c:	4606      	mov	r6, r0
 8011e1e:	b1f8      	cbz	r0, 8011e60 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8011e20:	68e0      	ldr	r0, [r4, #12]
 8011e22:	4631      	mov	r1, r6
 8011e24:	6803      	ldr	r3, [r0, #0]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	4798      	blx	r3
 8011e2a:	7b43      	ldrb	r3, [r0, #13]
 8011e2c:	7a82      	ldrb	r2, [r0, #10]
 8011e2e:	4605      	mov	r5, r0
 8011e30:	005b      	lsls	r3, r3, #1
 8011e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e36:	4313      	orrs	r3, r2
 8011e38:	83a3      	strh	r3, [r4, #28]
 8011e3a:	7a63      	ldrb	r3, [r4, #9]
 8011e3c:	2b04      	cmp	r3, #4
 8011e3e:	d10f      	bne.n	8011e60 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8011e40:	68e0      	ldr	r0, [r4, #12]
 8011e42:	462a      	mov	r2, r5
 8011e44:	4631      	mov	r1, r6
 8011e46:	6803      	ldr	r3, [r0, #0]
 8011e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e4a:	4798      	blx	r3
 8011e4c:	7b6b      	ldrb	r3, [r5, #13]
 8011e4e:	005b      	lsls	r3, r3, #1
 8011e50:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011e54:	7aab      	ldrb	r3, [r5, #10]
 8011e56:	4313      	orrs	r3, r2
 8011e58:	4418      	add	r0, r3
 8011e5a:	8ba3      	ldrh	r3, [r4, #28]
 8011e5c:	4418      	add	r0, r3
 8011e5e:	83a0      	strh	r0, [r4, #28]
 8011e60:	4620      	mov	r0, r4
 8011e62:	bd70      	pop	{r4, r5, r6, pc}

08011e64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8011e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e68:	2400      	movs	r4, #0
 8011e6a:	b085      	sub	sp, #20
 8011e6c:	4681      	mov	r9, r0
 8011e6e:	4688      	mov	r8, r1
 8011e70:	4692      	mov	sl, r2
 8011e72:	469b      	mov	fp, r3
 8011e74:	4627      	mov	r7, r4
 8011e76:	4625      	mov	r5, r4
 8011e78:	4626      	mov	r6, r4
 8011e7a:	4554      	cmp	r4, sl
 8011e7c:	da2a      	bge.n	8011ed4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011e7e:	2300      	movs	r3, #0
 8011e80:	9303      	str	r3, [sp, #12]
 8011e82:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011e86:	429d      	cmp	r5, r3
 8011e88:	d004      	beq.n	8011e94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8011e8a:	f242 030b 	movw	r3, #8203	; 0x200b
 8011e8e:	429d      	cmp	r5, r3
 8011e90:	bf18      	it	ne
 8011e92:	462f      	movne	r7, r5
 8011e94:	ab03      	add	r3, sp, #12
 8011e96:	4642      	mov	r2, r8
 8011e98:	4659      	mov	r1, fp
 8011e9a:	4648      	mov	r0, r9
 8011e9c:	f002 febc 	bl	8014c18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011ea0:	4605      	mov	r5, r0
 8011ea2:	b1b8      	cbz	r0, 8011ed4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011ea4:	280a      	cmp	r0, #10
 8011ea6:	d015      	beq.n	8011ed4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011ea8:	9a03      	ldr	r2, [sp, #12]
 8011eaa:	b18a      	cbz	r2, 8011ed0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8011eac:	7b50      	ldrb	r0, [r2, #13]
 8011eae:	4639      	mov	r1, r7
 8011eb0:	7a93      	ldrb	r3, [r2, #10]
 8011eb2:	0040      	lsls	r0, r0, #1
 8011eb4:	8895      	ldrh	r5, [r2, #4]
 8011eb6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011eba:	4303      	orrs	r3, r0
 8011ebc:	4640      	mov	r0, r8
 8011ebe:	9301      	str	r3, [sp, #4]
 8011ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8011ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ec6:	4798      	blx	r3
 8011ec8:	9b01      	ldr	r3, [sp, #4]
 8011eca:	4418      	add	r0, r3
 8011ecc:	4406      	add	r6, r0
 8011ece:	b2b6      	uxth	r6, r6
 8011ed0:	3401      	adds	r4, #1
 8011ed2:	e7d2      	b.n	8011e7a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	b005      	add	sp, #20
 8011ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011edc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8011edc:	2a02      	cmp	r2, #2
 8011ede:	b530      	push	{r4, r5, lr}
 8011ee0:	d011      	beq.n	8011f06 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8011ee2:	2a03      	cmp	r2, #3
 8011ee4:	d01c      	beq.n	8011f20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8011ee6:	2a01      	cmp	r2, #1
 8011ee8:	d10c      	bne.n	8011f04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011eea:	888b      	ldrh	r3, [r1, #4]
 8011eec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8011ef0:	8801      	ldrh	r1, [r0, #0]
 8011ef2:	1a9b      	subs	r3, r3, r2
 8011ef4:	8844      	ldrh	r4, [r0, #2]
 8011ef6:	1a5b      	subs	r3, r3, r1
 8011ef8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011efc:	8004      	strh	r4, [r0, #0]
 8011efe:	8043      	strh	r3, [r0, #2]
 8011f00:	8081      	strh	r1, [r0, #4]
 8011f02:	80c2      	strh	r2, [r0, #6]
 8011f04:	bd30      	pop	{r4, r5, pc}
 8011f06:	88cb      	ldrh	r3, [r1, #6]
 8011f08:	88c2      	ldrh	r2, [r0, #6]
 8011f0a:	1a9b      	subs	r3, r3, r2
 8011f0c:	8842      	ldrh	r2, [r0, #2]
 8011f0e:	1a9b      	subs	r3, r3, r2
 8011f10:	888a      	ldrh	r2, [r1, #4]
 8011f12:	8881      	ldrh	r1, [r0, #4]
 8011f14:	8043      	strh	r3, [r0, #2]
 8011f16:	1a52      	subs	r2, r2, r1
 8011f18:	8801      	ldrh	r1, [r0, #0]
 8011f1a:	1a52      	subs	r2, r2, r1
 8011f1c:	8002      	strh	r2, [r0, #0]
 8011f1e:	e7f1      	b.n	8011f04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011f20:	88cb      	ldrh	r3, [r1, #6]
 8011f22:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011f26:	8841      	ldrh	r1, [r0, #2]
 8011f28:	1a9b      	subs	r3, r3, r2
 8011f2a:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011f2e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8011f32:	1a5b      	subs	r3, r3, r1
 8011f34:	8045      	strh	r5, [r0, #2]
 8011f36:	8082      	strh	r2, [r0, #4]
 8011f38:	8003      	strh	r3, [r0, #0]
 8011f3a:	80c4      	strh	r4, [r0, #6]
 8011f3c:	e7e2      	b.n	8011f04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08011f3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8011f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f42:	b09f      	sub	sp, #124	; 0x7c
 8011f44:	9116      	str	r1, [sp, #88]	; 0x58
 8011f46:	9317      	str	r3, [sp, #92]	; 0x5c
 8011f48:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8011f4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011f4c:	8809      	ldrh	r1, [r1, #0]
 8011f4e:	889b      	ldrh	r3, [r3, #4]
 8011f50:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8011f54:	440b      	add	r3, r1
 8011f56:	9212      	str	r2, [sp, #72]	; 0x48
 8011f58:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8011f5c:	b21b      	sxth	r3, r3
 8011f5e:	9011      	str	r0, [sp, #68]	; 0x44
 8011f60:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8011f64:	9310      	str	r3, [sp, #64]	; 0x40
 8011f66:	f8d8 3000 	ldr.w	r3, [r8]
 8011f6a:	7a59      	ldrb	r1, [r3, #9]
 8011f6c:	7a1b      	ldrb	r3, [r3, #8]
 8011f6e:	9114      	str	r1, [sp, #80]	; 0x50
 8011f70:	9315      	str	r3, [sp, #84]	; 0x54
 8011f72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011f78:	2a00      	cmp	r2, #0
 8011f7a:	d067      	beq.n	801204c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8011f7c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8011f80:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011f82:	2b04      	cmp	r3, #4
 8011f84:	bf14      	ite	ne
 8011f86:	2301      	movne	r3, #1
 8011f88:	2302      	moveq	r3, #2
 8011f8a:	4413      	add	r3, r2
 8011f8c:	f04f 0900 	mov.w	r9, #0
 8011f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f92:	464c      	mov	r4, r9
 8011f94:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011f98:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8011f9c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	f280 808c 	bge.w	80120be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	931c      	str	r3, [sp, #112]	; 0x70
 8011faa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011fae:	429c      	cmp	r4, r3
 8011fb0:	d006      	beq.n	8011fc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8011fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fb4:	f242 020b 	movw	r2, #8203	; 0x200b
 8011fb8:	4294      	cmp	r4, r2
 8011fba:	bf18      	it	ne
 8011fbc:	4623      	movne	r3, r4
 8011fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8011fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fc2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8011fc4:	f8d8 2000 	ldr.w	r2, [r8]
 8011fc8:	428b      	cmp	r3, r1
 8011fca:	db41      	blt.n	8012050 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8011fcc:	6813      	ldr	r3, [r2, #0]
 8011fce:	4610      	mov	r0, r2
 8011fd0:	695b      	ldr	r3, [r3, #20]
 8011fd2:	4798      	blx	r3
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	f8d8 0000 	ldr.w	r0, [r8]
 8011fda:	aa1d      	add	r2, sp, #116	; 0x74
 8011fdc:	4621      	mov	r1, r4
 8011fde:	6803      	ldr	r3, [r0, #0]
 8011fe0:	689e      	ldr	r6, [r3, #8]
 8011fe2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8011fe6:	47b0      	blx	r6
 8011fe8:	901c      	str	r0, [sp, #112]	; 0x70
 8011fea:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011fee:	429c      	cmp	r4, r3
 8011ff0:	f000 80ea 	beq.w	80121c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011ff4:	f242 030b 	movw	r3, #8203	; 0x200b
 8011ff8:	429c      	cmp	r4, r3
 8011ffa:	f000 80e5 	beq.w	80121c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011ffe:	2c00      	cmp	r4, #0
 8012000:	f000 80f7 	beq.w	80121f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8012004:	2c0a      	cmp	r4, #10
 8012006:	d060      	beq.n	80120ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8012008:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801200a:	b36a      	cbz	r2, 8012068 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801200c:	8894      	ldrh	r4, [r2, #4]
 801200e:	f1bb 0f00 	cmp.w	fp, #0
 8012012:	d03b      	beq.n	801208c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8012014:	f892 900d 	ldrb.w	r9, [r2, #13]
 8012018:	f1bb 0f01 	cmp.w	fp, #1
 801201c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8012020:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8012024:	f892 900a 	ldrb.w	r9, [r2, #10]
 8012028:	ea49 0903 	orr.w	r9, r9, r3
 801202c:	d134      	bne.n	8012098 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801202e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012030:	eba5 0509 	sub.w	r5, r5, r9
 8012034:	2b00      	cmp	r3, #0
 8012036:	d14f      	bne.n	80120d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8012038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801203a:	eb09 0305 	add.w	r3, r9, r5
 801203e:	4413      	add	r3, r2
 8012040:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8012042:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012046:	4293      	cmp	r3, r2
 8012048:	da51      	bge.n	80120ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801204a:	e038      	b.n	80120be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801204c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801204e:	e79d      	b.n	8011f8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8012050:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8012054:	4659      	mov	r1, fp
 8012056:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012058:	9301      	str	r3, [sp, #4]
 801205a:	ab1d      	add	r3, sp, #116	; 0x74
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	ab1c      	add	r3, sp, #112	; 0x70
 8012060:	f002 fe32 	bl	8014cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8012064:	4604      	mov	r4, r0
 8012066:	e7c0      	b.n	8011fea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8012068:	f8d8 0000 	ldr.w	r0, [r8]
 801206c:	6803      	ldr	r3, [r0, #0]
 801206e:	691b      	ldr	r3, [r3, #16]
 8012070:	4798      	blx	r3
 8012072:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012076:	4298      	cmp	r0, r3
 8012078:	f000 80a6 	beq.w	80121c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801207c:	f242 030b 	movw	r3, #8203	; 0x200b
 8012080:	4298      	cmp	r0, r3
 8012082:	f000 80a1 	beq.w	80121c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8012086:	f1bb 0f00 	cmp.w	fp, #0
 801208a:	d100      	bne.n	801208e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801208c:	444d      	add	r5, r9
 801208e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012090:	2a00      	cmp	r2, #0
 8012092:	d1bf      	bne.n	8012014 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8012094:	4691      	mov	r9, r2
 8012096:	e097      	b.n	80121c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8012098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801209a:	2b00      	cmp	r3, #0
 801209c:	f000 80ab 	beq.w	80121f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80120a0:	f1bb 0f00 	cmp.w	fp, #0
 80120a4:	d118      	bne.n	80120d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80120a6:	f8d8 0000 	ldr.w	r0, [r8]
 80120aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80120ac:	6803      	ldr	r3, [r0, #0]
 80120ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120b0:	4798      	blx	r3
 80120b2:	4405      	add	r5, r0
 80120b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80120b8:	1aeb      	subs	r3, r5, r3
 80120ba:	4293      	cmp	r3, r2
 80120bc:	dd17      	ble.n	80120ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80120be:	2c00      	cmp	r4, #0
 80120c0:	f000 8097 	beq.w	80121f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80120c4:	2c0a      	cmp	r4, #10
 80120c6:	f040 8085 	bne.w	80121d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80120ca:	240a      	movs	r4, #10
 80120cc:	fab4 f084 	clz	r0, r4
 80120d0:	0940      	lsrs	r0, r0, #5
 80120d2:	b01f      	add	sp, #124	; 0x7c
 80120d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d8:	f8d8 0000 	ldr.w	r0, [r8]
 80120dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80120de:	6803      	ldr	r3, [r0, #0]
 80120e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120e2:	4798      	blx	r3
 80120e4:	f1bb 0f01 	cmp.w	fp, #1
 80120e8:	eba5 0500 	sub.w	r5, r5, r0
 80120ec:	d0a4      	beq.n	8012038 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80120ee:	981c      	ldr	r0, [sp, #112]	; 0x70
 80120f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80120f2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80120f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80120fa:	7b43      	ldrb	r3, [r0, #13]
 80120fc:	4429      	add	r1, r5
 80120fe:	015b      	lsls	r3, r3, #5
 8012100:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012104:	7983      	ldrb	r3, [r0, #6]
 8012106:	4313      	orrs	r3, r2
 8012108:	440b      	add	r3, r1
 801210a:	42b3      	cmp	r3, r6
 801210c:	db5c      	blt.n	80121c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801210e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012110:	4299      	cmp	r1, r3
 8012112:	da59      	bge.n	80121c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8012114:	f8d8 0000 	ldr.w	r0, [r8]
 8012118:	42ae      	cmp	r6, r5
 801211a:	6803      	ldr	r3, [r0, #0]
 801211c:	bfcc      	ite	gt
 801211e:	1b76      	subgt	r6, r6, r5
 8012120:	2600      	movle	r6, #0
 8012122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012124:	bfc8      	it	gt
 8012126:	b2b6      	uxthgt	r6, r6
 8012128:	4798      	blx	r3
 801212a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801212c:	7b5a      	ldrb	r2, [r3, #13]
 801212e:	00d1      	lsls	r1, r2, #3
 8012130:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8012134:	7a19      	ldrb	r1, [r3, #8]
 8012136:	4339      	orrs	r1, r7
 8012138:	0657      	lsls	r7, r2, #25
 801213a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801213c:	bf48      	it	mi
 801213e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8012142:	4407      	add	r7, r0
 8012144:	bf48      	it	mi
 8012146:	b209      	sxthmi	r1, r1
 8012148:	1a7f      	subs	r7, r7, r1
 801214a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801214c:	b2bf      	uxth	r7, r7
 801214e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8012152:	fa0f fa87 	sxth.w	sl, r7
 8012156:	4551      	cmp	r1, sl
 8012158:	dd3a      	ble.n	80121d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801215a:	0112      	lsls	r2, r2, #4
 801215c:	79d8      	ldrb	r0, [r3, #7]
 801215e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012162:	4302      	orrs	r2, r0
 8012164:	4492      	add	sl, r2
 8012166:	4551      	cmp	r1, sl
 8012168:	dc2e      	bgt.n	80121c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801216a:	1bcf      	subs	r7, r1, r7
 801216c:	468a      	mov	sl, r1
 801216e:	b2bf      	uxth	r7, r7
 8012170:	9319      	str	r3, [sp, #100]	; 0x64
 8012172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012174:	f8d8 0000 	ldr.w	r0, [r8]
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	6801      	ldr	r1, [r0, #0]
 801217c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801217e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012180:	9313      	str	r3, [sp, #76]	; 0x4c
 8012182:	9218      	str	r2, [sp, #96]	; 0x60
 8012184:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8012186:	4788      	blx	r1
 8012188:	f898 1006 	ldrb.w	r1, [r8, #6]
 801218c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801218e:	910b      	str	r1, [sp, #44]	; 0x2c
 8012190:	f898 100e 	ldrb.w	r1, [r8, #14]
 8012194:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012196:	910a      	str	r1, [sp, #40]	; 0x28
 8012198:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801219c:	9109      	str	r1, [sp, #36]	; 0x24
 801219e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80121a2:	9305      	str	r3, [sp, #20]
 80121a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80121a6:	9206      	str	r2, [sp, #24]
 80121a8:	e9cd a601 	strd	sl, r6, [sp, #4]
 80121ac:	442e      	add	r6, r5
 80121ae:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80121b2:	b236      	sxth	r6, r6
 80121b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80121b6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80121ba:	9600      	str	r6, [sp, #0]
 80121bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80121c6:	47b0      	blx	r6
 80121c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121ca:	3301      	adds	r3, #1
 80121cc:	930e      	str	r3, [sp, #56]	; 0x38
 80121ce:	e6e5      	b.n	8011f9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80121d0:	2700      	movs	r7, #0
 80121d2:	e7cd      	b.n	8012170 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80121d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80121d6:	3501      	adds	r5, #1
 80121d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80121da:	429d      	cmp	r5, r3
 80121dc:	f6bf af76 	bge.w	80120cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80121e0:	4659      	mov	r1, fp
 80121e2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80121e4:	f7f3 f840 	bl	8005268 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80121e8:	4604      	mov	r4, r0
 80121ea:	b110      	cbz	r0, 80121f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80121ec:	280a      	cmp	r0, #10
 80121ee:	d1f2      	bne.n	80121d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80121f0:	e76b      	b.n	80120ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80121f2:	2400      	movs	r4, #0
 80121f4:	e76a      	b.n	80120cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80121f6:	f1bb 0f00 	cmp.w	fp, #0
 80121fa:	f43f af5b 	beq.w	80120b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80121fe:	e776      	b.n	80120ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08012200 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8012200:	b530      	push	{r4, r5, lr}
 8012202:	8a44      	ldrh	r4, [r0, #18]
 8012204:	8ac5      	ldrh	r5, [r0, #22]
 8012206:	82c3      	strh	r3, [r0, #22]
 8012208:	442c      	add	r4, r5
 801220a:	1ae4      	subs	r4, r4, r3
 801220c:	8b03      	ldrh	r3, [r0, #24]
 801220e:	8244      	strh	r4, [r0, #18]
 8012210:	8a84      	ldrh	r4, [r0, #20]
 8012212:	4422      	add	r2, r4
 8012214:	440c      	add	r4, r1
 8012216:	1a59      	subs	r1, r3, r1
 8012218:	8342      	strh	r2, [r0, #26]
 801221a:	8284      	strh	r4, [r0, #20]
 801221c:	8301      	strh	r1, [r0, #24]
 801221e:	bd30      	pop	{r4, r5, pc}

08012220 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8012220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012224:	7a43      	ldrb	r3, [r0, #9]
 8012226:	b087      	sub	sp, #28
 8012228:	4604      	mov	r4, r0
 801222a:	460f      	mov	r7, r1
 801222c:	1eda      	subs	r2, r3, #3
 801222e:	b2d2      	uxtb	r2, r2
 8012230:	2900      	cmp	r1, #0
 8012232:	d036      	beq.n	80122a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8012234:	2a01      	cmp	r2, #1
 8012236:	d932      	bls.n	801229e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8012238:	1e58      	subs	r0, r3, #1
 801223a:	f1d0 0b00 	rsbs	fp, r0, #0
 801223e:	eb4b 0b00 	adc.w	fp, fp, r0
 8012242:	1e99      	subs	r1, r3, #2
 8012244:	424b      	negs	r3, r1
 8012246:	414b      	adcs	r3, r1
 8012248:	9303      	str	r3, [sp, #12]
 801224a:	2300      	movs	r3, #0
 801224c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8012250:	2500      	movs	r5, #0
 8012252:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8012256:	46a9      	mov	r9, r5
 8012258:	8265      	strh	r5, [r4, #18]
 801225a:	82a5      	strh	r5, [r4, #20]
 801225c:	2300      	movs	r3, #0
 801225e:	9305      	str	r3, [sp, #20]
 8012260:	8823      	ldrh	r3, [r4, #0]
 8012262:	2b20      	cmp	r3, #32
 8012264:	d02b      	beq.n	80122be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8012266:	eba3 020a 	sub.w	r2, r3, sl
 801226a:	4256      	negs	r6, r2
 801226c:	4156      	adcs	r6, r2
 801226e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012272:	4293      	cmp	r3, r2
 8012274:	d004      	beq.n	8012280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8012276:	4553      	cmp	r3, sl
 8012278:	bf16      	itet	ne
 801227a:	4699      	movne	r9, r3
 801227c:	2601      	moveq	r6, #1
 801227e:	2600      	movne	r6, #0
 8012280:	ab05      	add	r3, sp, #20
 8012282:	68e2      	ldr	r2, [r4, #12]
 8012284:	7a21      	ldrb	r1, [r4, #8]
 8012286:	6860      	ldr	r0, [r4, #4]
 8012288:	f002 fcc6 	bl	8014c18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801228c:	8020      	strh	r0, [r4, #0]
 801228e:	b9c8      	cbnz	r0, 80122c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8012290:	8b22      	ldrh	r2, [r4, #24]
 8012292:	2300      	movs	r3, #0
 8012294:	4611      	mov	r1, r2
 8012296:	4620      	mov	r0, r4
 8012298:	f7ff ffb2 	bl	8012200 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801229c:	e066      	b.n	801236c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801229e:	468b      	mov	fp, r1
 80122a0:	e7cf      	b.n	8012242 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80122a2:	3b01      	subs	r3, #1
 80122a4:	2a01      	cmp	r2, #1
 80122a6:	9103      	str	r1, [sp, #12]
 80122a8:	468b      	mov	fp, r1
 80122aa:	bf8c      	ite	hi
 80122ac:	2200      	movhi	r2, #0
 80122ae:	2201      	movls	r2, #1
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	9202      	str	r2, [sp, #8]
 80122b4:	bf8c      	ite	hi
 80122b6:	2300      	movhi	r3, #0
 80122b8:	2301      	movls	r3, #1
 80122ba:	9301      	str	r3, [sp, #4]
 80122bc:	e7c8      	b.n	8012250 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80122be:	4699      	mov	r9, r3
 80122c0:	2601      	movs	r6, #1
 80122c2:	e7dd      	b.n	8012280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80122c4:	8ae3      	ldrh	r3, [r4, #22]
 80122c6:	280a      	cmp	r0, #10
 80122c8:	f103 0301 	add.w	r3, r3, #1
 80122cc:	82e3      	strh	r3, [r4, #22]
 80122ce:	d0df      	beq.n	8012290 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80122d0:	9a05      	ldr	r2, [sp, #20]
 80122d2:	bb42      	cbnz	r2, 8012326 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80122d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80122d8:	4298      	cmp	r0, r3
 80122da:	d001      	beq.n	80122e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80122dc:	4550      	cmp	r0, sl
 80122de:	d1bd      	bne.n	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80122e0:	8823      	ldrh	r3, [r4, #0]
 80122e2:	8b21      	ldrh	r1, [r4, #24]
 80122e4:	2b20      	cmp	r3, #32
 80122e6:	d001      	beq.n	80122ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80122e8:	4553      	cmp	r3, sl
 80122ea:	d131      	bne.n	8012350 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80122ec:	2e00      	cmp	r6, #0
 80122ee:	bf0a      	itet	eq
 80122f0:	460d      	moveq	r5, r1
 80122f2:	4630      	movne	r0, r6
 80122f4:	2001      	moveq	r0, #1
 80122f6:	440a      	add	r2, r1
 80122f8:	8aa3      	ldrh	r3, [r4, #20]
 80122fa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80122fe:	b292      	uxth	r2, r2
 8012300:	8322      	strh	r2, [r4, #24]
 8012302:	4413      	add	r3, r2
 8012304:	2f00      	cmp	r7, #0
 8012306:	d03a      	beq.n	801237e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8012308:	f1bb 0f00 	cmp.w	fp, #0
 801230c:	d102      	bne.n	8012314 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801230e:	9903      	ldr	r1, [sp, #12]
 8012310:	b301      	cbz	r1, 8012354 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8012312:	b1f8      	cbz	r0, 8012354 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8012314:	8ba1      	ldrh	r1, [r4, #28]
 8012316:	4419      	add	r1, r3
 8012318:	458c      	cmp	ip, r1
 801231a:	da2a      	bge.n	8012372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801231c:	8a61      	ldrh	r1, [r4, #18]
 801231e:	b341      	cbz	r1, 8012372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8012320:	4563      	cmp	r3, ip
 8012322:	dd9b      	ble.n	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012324:	e01c      	b.n	8012360 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8012326:	8893      	ldrh	r3, [r2, #4]
 8012328:	4649      	mov	r1, r9
 801232a:	8023      	strh	r3, [r4, #0]
 801232c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8012330:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8012334:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8012338:	f892 800a 	ldrb.w	r8, [r2, #10]
 801233c:	ea48 0800 	orr.w	r8, r8, r0
 8012340:	68e0      	ldr	r0, [r4, #12]
 8012342:	6803      	ldr	r3, [r0, #0]
 8012344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012346:	4798      	blx	r3
 8012348:	eb08 0200 	add.w	r2, r8, r0
 801234c:	b292      	uxth	r2, r2
 801234e:	e7c7      	b.n	80122e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8012350:	2000      	movs	r0, #0
 8012352:	e7d0      	b.n	80122f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8012354:	4563      	cmp	r3, ip
 8012356:	dd81      	ble.n	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012358:	8a63      	ldrh	r3, [r4, #18]
 801235a:	2b00      	cmp	r3, #0
 801235c:	f43f af7e 	beq.w	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012360:	2301      	movs	r3, #1
 8012362:	8ba2      	ldrh	r2, [r4, #28]
 8012364:	77a3      	strb	r3, [r4, #30]
 8012366:	8b63      	ldrh	r3, [r4, #26]
 8012368:	4413      	add	r3, r2
 801236a:	8363      	strh	r3, [r4, #26]
 801236c:	b007      	add	sp, #28
 801236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012372:	2300      	movs	r3, #0
 8012374:	4611      	mov	r1, r2
 8012376:	4620      	mov	r0, r4
 8012378:	f7ff ff42 	bl	8012200 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801237c:	e76e      	b.n	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801237e:	4563      	cmp	r3, ip
 8012380:	dd14      	ble.n	80123ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8012382:	9b02      	ldr	r3, [sp, #8]
 8012384:	b113      	cbz	r3, 801238c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8012386:	2301      	movs	r3, #1
 8012388:	460a      	mov	r2, r1
 801238a:	e783      	b.n	8012294 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801238c:	9b01      	ldr	r3, [sp, #4]
 801238e:	2b00      	cmp	r3, #0
 8012390:	f43f af64 	beq.w	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012394:	2800      	cmp	r0, #0
 8012396:	f47f af61 	bne.w	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801239a:	b116      	cbz	r6, 80123a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801239c:	2301      	movs	r3, #1
 801239e:	462a      	mov	r2, r5
 80123a0:	e779      	b.n	8012296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80123a2:	8a63      	ldrh	r3, [r4, #18]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	f43f af59 	beq.w	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80123aa:	e7df      	b.n	801236c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	f47f af55 	bne.w	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80123b2:	2e00      	cmp	r6, #0
 80123b4:	f43f af52 	beq.w	801225c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80123b8:	2301      	movs	r3, #1
 80123ba:	462a      	mov	r2, r5
 80123bc:	e7db      	b.n	8012376 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080123be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80123be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123c2:	b0df      	sub	sp, #380	; 0x17c
 80123c4:	4689      	mov	r9, r1
 80123c6:	461c      	mov	r4, r3
 80123c8:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 80123cc:	900a      	str	r0, [sp, #40]	; 0x28
 80123ce:	f1ba 0f00 	cmp.w	sl, #0
 80123d2:	f000 80b1 	beq.w	8012538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	f000 80ad 	beq.w	8012538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80123de:	7ba3      	ldrb	r3, [r4, #14]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f000 80a9 	beq.w	8012538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80123e6:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 80123ea:	6810      	ldr	r0, [r2, #0]
 80123ec:	6851      	ldr	r1, [r2, #4]
 80123ee:	2500      	movs	r5, #0
 80123f0:	4643      	mov	r3, r8
 80123f2:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80123f6:	950f      	str	r5, [sp, #60]	; 0x3c
 80123f8:	af19      	add	r7, sp, #100	; 0x64
 80123fa:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80123fe:	79a2      	ldrb	r2, [r4, #6]
 8012400:	c303      	stmia	r3!, {r0, r1}
 8012402:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8012406:	a90f      	add	r1, sp, #60	; 0x3c
 8012408:	4640      	mov	r0, r8
 801240a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801240e:	f7ff fd65 	bl	8011edc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012412:	a90f      	add	r1, sp, #60	; 0x3c
 8012414:	79a2      	ldrb	r2, [r4, #6]
 8012416:	4608      	mov	r0, r1
 8012418:	f7ff fd60 	bl	8011edc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801241c:	4638      	mov	r0, r7
 801241e:	f002 f8b2 	bl	8014586 <_ZN8touchgfx12TextProviderC1Ev>
 8012422:	6820      	ldr	r0, [r4, #0]
 8012424:	6803      	ldr	r3, [r0, #0]
 8012426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012428:	4798      	blx	r3
 801242a:	4606      	mov	r6, r0
 801242c:	6820      	ldr	r0, [r4, #0]
 801242e:	6803      	ldr	r3, [r0, #0]
 8012430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012432:	4798      	blx	r3
 8012434:	4633      	mov	r3, r6
 8012436:	9000      	str	r0, [sp, #0]
 8012438:	4651      	mov	r1, sl
 801243a:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801243c:	4638      	mov	r0, r7
 801243e:	f002 f8ef 	bl	8014620 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012442:	7923      	ldrb	r3, [r4, #4]
 8012444:	6820      	ldr	r0, [r4, #0]
 8012446:	9308      	str	r3, [sp, #32]
 8012448:	6803      	ldr	r3, [r0, #0]
 801244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801244c:	4798      	blx	r3
 801244e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012452:	181e      	adds	r6, r3, r0
 8012454:	42ae      	cmp	r6, r5
 8012456:	dd06      	ble.n	8012466 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8012458:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801245c:	4282      	cmp	r2, r0
 801245e:	bfa4      	itt	ge
 8012460:	189d      	addge	r5, r3, r2
 8012462:	fb95 f5f6 	sdivge	r5, r5, r6
 8012466:	a830      	add	r0, sp, #192	; 0xc0
 8012468:	f002 f88d 	bl	8014586 <_ZN8touchgfx12TextProviderC1Ev>
 801246c:	7c23      	ldrb	r3, [r4, #16]
 801246e:	b17b      	cbz	r3, 8012490 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8012470:	6820      	ldr	r0, [r4, #0]
 8012472:	6803      	ldr	r3, [r0, #0]
 8012474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012476:	4798      	blx	r3
 8012478:	4683      	mov	fp, r0
 801247a:	6820      	ldr	r0, [r4, #0]
 801247c:	6803      	ldr	r3, [r0, #0]
 801247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012480:	4798      	blx	r3
 8012482:	465b      	mov	r3, fp
 8012484:	9000      	str	r0, [sp, #0]
 8012486:	4651      	mov	r1, sl
 8012488:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801248a:	a830      	add	r0, sp, #192	; 0xc0
 801248c:	f002 f8c8 	bl	8014620 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012490:	7c21      	ldrb	r1, [r4, #16]
 8012492:	a811      	add	r0, sp, #68	; 0x44
 8012494:	7963      	ldrb	r3, [r4, #5]
 8012496:	9101      	str	r1, [sp, #4]
 8012498:	6821      	ldr	r1, [r4, #0]
 801249a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801249e:	9100      	str	r1, [sp, #0]
 80124a0:	a930      	add	r1, sp, #192	; 0xc0
 80124a2:	f7ff fca5 	bl	8011df0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80124a6:	7c23      	ldrb	r3, [r4, #16]
 80124a8:	b9bb      	cbnz	r3, 80124da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 80124aa:	fa1f fa86 	uxth.w	sl, r6
 80124ae:	2d00      	cmp	r5, #0
 80124b0:	dd45      	ble.n	801253e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80124b2:	4638      	mov	r0, r7
 80124b4:	f002 fca8 	bl	8014e08 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	d03d      	beq.n	8012538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80124bc:	280a      	cmp	r0, #10
 80124be:	d1f6      	bne.n	80124ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 80124c0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80124c4:	3d01      	subs	r5, #1
 80124c6:	4453      	add	r3, sl
 80124c8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80124cc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80124d0:	eba3 030a 	sub.w	r3, r3, sl
 80124d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80124d8:	e7e9      	b.n	80124ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 80124da:	0073      	lsls	r3, r6, #1
 80124dc:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80124e0:	fa1f fa86 	uxth.w	sl, r6
 80124e4:	9309      	str	r3, [sp, #36]	; 0x24
 80124e6:	2d00      	cmp	r5, #0
 80124e8:	dd29      	ble.n	801253e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80124ea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80124ee:	a811      	add	r0, sp, #68	; 0x44
 80124f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f2:	428b      	cmp	r3, r1
 80124f4:	bfd4      	ite	le
 80124f6:	2100      	movle	r1, #0
 80124f8:	2101      	movgt	r1, #1
 80124fa:	f7ff fe91 	bl	8012220 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80124fe:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8012502:	3b01      	subs	r3, #1
 8012504:	b29b      	uxth	r3, r3
 8012506:	455b      	cmp	r3, fp
 8012508:	930b      	str	r3, [sp, #44]	; 0x2c
 801250a:	d005      	beq.n	8012518 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 801250c:	7961      	ldrb	r1, [r4, #5]
 801250e:	4638      	mov	r0, r7
 8012510:	f7f2 feaa 	bl	8005268 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012516:	e7f4      	b.n	8012502 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8012518:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801251c:	3d01      	subs	r5, #1
 801251e:	4453      	add	r3, sl
 8012520:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012524:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8012528:	eba3 030a 	sub.w	r3, r3, sl
 801252c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8012530:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012534:	2b00      	cmp	r3, #0
 8012536:	d1d6      	bne.n	80124e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 8012538:	b05f      	add	sp, #380	; 0x17c
 801253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801253e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8012542:	ad47      	add	r5, sp, #284	; 0x11c
 8012544:	f04f 0b00 	mov.w	fp, #0
 8012548:	7c23      	ldrb	r3, [r4, #16]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d067      	beq.n	801261e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801254e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012552:	a811      	add	r0, sp, #68	; 0x44
 8012554:	458a      	cmp	sl, r1
 8012556:	bfd4      	ite	le
 8012558:	2100      	movle	r1, #0
 801255a:	2101      	movgt	r1, #1
 801255c:	f7ff fe60 	bl	8012220 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8012560:	9b08      	ldr	r3, [sp, #32]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d056      	beq.n	8012614 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8012566:	7c23      	ldrb	r3, [r4, #16]
 8012568:	225c      	movs	r2, #92	; 0x5c
 801256a:	4639      	mov	r1, r7
 801256c:	4628      	mov	r0, r5
 801256e:	9309      	str	r3, [sp, #36]	; 0x24
 8012570:	f00b fc9e 	bl	801deb0 <memcpy>
 8012574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012576:	2b00      	cmp	r3, #0
 8012578:	d059      	beq.n	801262e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801257a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801257e:	7922      	ldrb	r2, [r4, #4]
 8012580:	2a01      	cmp	r2, #1
 8012582:	d13d      	bne.n	8012600 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8012584:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8012588:	1ac0      	subs	r0, r0, r3
 801258a:	2302      	movs	r3, #2
 801258c:	fb90 f0f3 	sdiv	r0, r0, r3
 8012590:	b200      	sxth	r0, r0
 8012592:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012596:	4418      	add	r0, r3
 8012598:	7c23      	ldrb	r3, [r4, #16]
 801259a:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d03a      	beq.n	8012618 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 80125a2:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 80125a6:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 80125aa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80125ae:	9500      	str	r5, [sp, #0]
 80125b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80125b2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80125b6:	e9cd b703 	strd	fp, r7, [sp, #12]
 80125ba:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80125be:	464a      	mov	r2, r9
 80125c0:	2100      	movs	r1, #0
 80125c2:	f7ff fcbc 	bl	8011f3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80125c6:	2800      	cmp	r0, #0
 80125c8:	d1b6      	bne.n	8012538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80125ca:	b2b2      	uxth	r2, r6
 80125cc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80125d0:	4611      	mov	r1, r2
 80125d2:	4413      	add	r3, r2
 80125d4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80125d8:	b21b      	sxth	r3, r3
 80125da:	1a52      	subs	r2, r2, r1
 80125dc:	7c21      	ldrb	r1, [r4, #16]
 80125de:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80125e2:	b212      	sxth	r2, r2
 80125e4:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80125e8:	b109      	cbz	r1, 80125ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 80125ea:	42b2      	cmp	r2, r6
 80125ec:	dba4      	blt.n	8012538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80125ee:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80125f2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80125f6:	440a      	add	r2, r1
 80125f8:	b212      	sxth	r2, r2
 80125fa:	4293      	cmp	r3, r2
 80125fc:	dda4      	ble.n	8012548 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 80125fe:	e79b      	b.n	8012538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8012600:	2a02      	cmp	r2, #2
 8012602:	d105      	bne.n	8012610 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8012604:	7be2      	ldrb	r2, [r4, #15]
 8012606:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801260a:	1a80      	subs	r0, r0, r2
 801260c:	1ac0      	subs	r0, r0, r3
 801260e:	e7bf      	b.n	8012590 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 8012610:	2000      	movs	r0, #0
 8012612:	e7be      	b.n	8012592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8012614:	7be0      	ldrb	r0, [r4, #15]
 8012616:	e7bc      	b.n	8012592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8012618:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801261c:	e7c3      	b.n	80125a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801261e:	9b08      	ldr	r3, [sp, #32]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d0f7      	beq.n	8012614 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8012624:	225c      	movs	r2, #92	; 0x5c
 8012626:	4639      	mov	r1, r7
 8012628:	4628      	mov	r0, r5
 801262a:	f00b fc41 	bl	801deb0 <memcpy>
 801262e:	2300      	movs	r3, #0
 8012630:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012634:	6821      	ldr	r1, [r4, #0]
 8012636:	4628      	mov	r0, r5
 8012638:	f7ff fc14 	bl	8011e64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801263c:	b203      	sxth	r3, r0
 801263e:	e79e      	b.n	801257e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

08012640 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012640:	2b02      	cmp	r3, #2
 8012642:	b510      	push	{r4, lr}
 8012644:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012648:	d00b      	beq.n	8012662 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801264a:	2b03      	cmp	r3, #3
 801264c:	d00e      	beq.n	801266c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801264e:	2b01      	cmp	r3, #1
 8012650:	d001      	beq.n	8012656 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8012652:	1860      	adds	r0, r4, r1
 8012654:	bd10      	pop	{r4, pc}
 8012656:	8880      	ldrh	r0, [r0, #4]
 8012658:	4420      	add	r0, r4
 801265a:	b200      	sxth	r0, r0
 801265c:	1a80      	subs	r0, r0, r2
 801265e:	3801      	subs	r0, #1
 8012660:	e7f8      	b.n	8012654 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8012662:	8880      	ldrh	r0, [r0, #4]
 8012664:	4420      	add	r0, r4
 8012666:	b200      	sxth	r0, r0
 8012668:	1a40      	subs	r0, r0, r1
 801266a:	e7f8      	b.n	801265e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801266c:	18a0      	adds	r0, r4, r2
 801266e:	e7f1      	b.n	8012654 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08012670 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012670:	2b02      	cmp	r3, #2
 8012672:	b510      	push	{r4, lr}
 8012674:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012678:	d006      	beq.n	8012688 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801267a:	2b03      	cmp	r3, #3
 801267c:	d00a      	beq.n	8012694 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801267e:	2b01      	cmp	r3, #1
 8012680:	bf14      	ite	ne
 8012682:	18a0      	addne	r0, r4, r2
 8012684:	1860      	addeq	r0, r4, r1
 8012686:	bd10      	pop	{r4, pc}
 8012688:	88c0      	ldrh	r0, [r0, #6]
 801268a:	4420      	add	r0, r4
 801268c:	b200      	sxth	r0, r0
 801268e:	1a80      	subs	r0, r0, r2
 8012690:	3801      	subs	r0, #1
 8012692:	e7f8      	b.n	8012686 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8012694:	88c0      	ldrh	r0, [r0, #6]
 8012696:	4420      	add	r0, r4
 8012698:	b200      	sxth	r0, r0
 801269a:	1a40      	subs	r0, r0, r1
 801269c:	e7f8      	b.n	8012690 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080126a0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80126a0:	4b01      	ldr	r3, [pc, #4]	; (80126a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80126a2:	2200      	movs	r2, #0
 80126a4:	601a      	str	r2, [r3, #0]
 80126a6:	4770      	bx	lr
 80126a8:	2000df78 	.word	0x2000df78

080126ac <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80126ac:	4603      	mov	r3, r0
 80126ae:	b1c8      	cbz	r0, 80126e4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80126b0:	0c02      	lsrs	r2, r0, #16
 80126b2:	0412      	lsls	r2, r2, #16
 80126b4:	b9a2      	cbnz	r2, 80126e0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80126b6:	0403      	lsls	r3, r0, #16
 80126b8:	2010      	movs	r0, #16
 80126ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80126be:	bf04      	itt	eq
 80126c0:	021b      	lsleq	r3, r3, #8
 80126c2:	3008      	addeq	r0, #8
 80126c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80126c8:	bf04      	itt	eq
 80126ca:	011b      	lsleq	r3, r3, #4
 80126cc:	3004      	addeq	r0, #4
 80126ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80126d2:	bf04      	itt	eq
 80126d4:	009b      	lsleq	r3, r3, #2
 80126d6:	3002      	addeq	r0, #2
 80126d8:	2b00      	cmp	r3, #0
 80126da:	db04      	blt.n	80126e6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80126dc:	3001      	adds	r0, #1
 80126de:	4770      	bx	lr
 80126e0:	2000      	movs	r0, #0
 80126e2:	e7ea      	b.n	80126ba <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80126e4:	2020      	movs	r0, #32
 80126e6:	4770      	bx	lr

080126e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80126e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ec:	b087      	sub	sp, #28
 80126ee:	4681      	mov	r9, r0
 80126f0:	4698      	mov	r8, r3
 80126f2:	4610      	mov	r0, r2
 80126f4:	460d      	mov	r5, r1
 80126f6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80126fa:	b981      	cbnz	r1, 801271e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80126fc:	b14b      	cbz	r3, 8012712 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80126fe:	460b      	mov	r3, r1
 8012700:	464a      	mov	r2, r9
 8012702:	4641      	mov	r1, r8
 8012704:	e9cd 4700 	strd	r4, r7, [sp]
 8012708:	f7ff ffee 	bl	80126e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801270c:	b007      	add	sp, #28
 801270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012712:	f04f 33ff 	mov.w	r3, #4294967295
 8012716:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801271a:	603b      	str	r3, [r7, #0]
 801271c:	e7f6      	b.n	801270c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801271e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8012722:	d107      	bne.n	8012734 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8012724:	fb09 f602 	mul.w	r6, r9, r2
 8012728:	fbb6 f0f4 	udiv	r0, r6, r4
 801272c:	fb04 6610 	mls	r6, r4, r0, r6
 8012730:	603e      	str	r6, [r7, #0]
 8012732:	e7eb      	b.n	801270c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8012734:	2601      	movs	r6, #1
 8012736:	fa09 fb01 	lsl.w	fp, r9, r1
 801273a:	408e      	lsls	r6, r1
 801273c:	fbbb f3f4 	udiv	r3, fp, r4
 8012740:	3e01      	subs	r6, #1
 8012742:	9302      	str	r3, [sp, #8]
 8012744:	fb0a f303 	mul.w	r3, sl, r3
 8012748:	4016      	ands	r6, r2
 801274a:	9303      	str	r3, [sp, #12]
 801274c:	4630      	mov	r0, r6
 801274e:	f7ff ffad 	bl	80126ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012752:	464a      	mov	r2, r9
 8012754:	460b      	mov	r3, r1
 8012756:	4601      	mov	r1, r0
 8012758:	4630      	mov	r0, r6
 801275a:	e9cd 4700 	strd	r4, r7, [sp]
 801275e:	f7ff ffc3 	bl	80126e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012762:	9b02      	ldr	r3, [sp, #8]
 8012764:	4606      	mov	r6, r0
 8012766:	eb05 0108 	add.w	r1, r5, r8
 801276a:	fb04 bb13 	mls	fp, r4, r3, fp
 801276e:	4658      	mov	r0, fp
 8012770:	f7ff ff9c 	bl	80126ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012774:	ab05      	add	r3, sp, #20
 8012776:	465a      	mov	r2, fp
 8012778:	e9cd 4300 	strd	r4, r3, [sp]
 801277c:	4603      	mov	r3, r0
 801277e:	4650      	mov	r0, sl
 8012780:	f7ff ffb2 	bl	80126e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012784:	6839      	ldr	r1, [r7, #0]
 8012786:	9a05      	ldr	r2, [sp, #20]
 8012788:	9b03      	ldr	r3, [sp, #12]
 801278a:	4411      	add	r1, r2
 801278c:	fbb1 f2f4 	udiv	r2, r1, r4
 8012790:	18d3      	adds	r3, r2, r3
 8012792:	fb04 1412 	mls	r4, r4, r2, r1
 8012796:	441e      	add	r6, r3
 8012798:	603c      	str	r4, [r7, #0]
 801279a:	4430      	add	r0, r6
 801279c:	e7b6      	b.n	801270c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801279e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801279e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127a2:	b085      	sub	sp, #20
 80127a4:	f1b0 0900 	subs.w	r9, r0, #0
 80127a8:	461d      	mov	r5, r3
 80127aa:	4617      	mov	r7, r2
 80127ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80127ae:	bfbb      	ittet	lt
 80127b0:	f1c9 0900 	rsblt	r9, r9, #0
 80127b4:	f04f 36ff 	movlt.w	r6, #4294967295
 80127b8:	2601      	movge	r6, #1
 80127ba:	6823      	ldrlt	r3, [r4, #0]
 80127bc:	bfbc      	itt	lt
 80127be:	425b      	neglt	r3, r3
 80127c0:	6023      	strlt	r3, [r4, #0]
 80127c2:	2a00      	cmp	r2, #0
 80127c4:	da04      	bge.n	80127d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80127c6:	6823      	ldr	r3, [r4, #0]
 80127c8:	4257      	negs	r7, r2
 80127ca:	4276      	negs	r6, r6
 80127cc:	425b      	negs	r3, r3
 80127ce:	6023      	str	r3, [r4, #0]
 80127d0:	2d00      	cmp	r5, #0
 80127d2:	4638      	mov	r0, r7
 80127d4:	bfba      	itte	lt
 80127d6:	426d      	neglt	r5, r5
 80127d8:	f04f 38ff 	movlt.w	r8, #4294967295
 80127dc:	f04f 0801 	movge.w	r8, #1
 80127e0:	f7ff ff64 	bl	80126ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 80127e4:	ab03      	add	r3, sp, #12
 80127e6:	463a      	mov	r2, r7
 80127e8:	e9cd 5300 	strd	r5, r3, [sp]
 80127ec:	4603      	mov	r3, r0
 80127ee:	4648      	mov	r0, r9
 80127f0:	f7ff ff7a 	bl	80126e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80127f4:	6823      	ldr	r3, [r4, #0]
 80127f6:	9a03      	ldr	r2, [sp, #12]
 80127f8:	4546      	cmp	r6, r8
 80127fa:	441a      	add	r2, r3
 80127fc:	fb92 f3f5 	sdiv	r3, r2, r5
 8012800:	4418      	add	r0, r3
 8012802:	fb05 2313 	mls	r3, r5, r3, r2
 8012806:	bf18      	it	ne
 8012808:	4240      	negne	r0, r0
 801280a:	1c72      	adds	r2, r6, #1
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	d105      	bne.n	801281c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8012810:	2b00      	cmp	r3, #0
 8012812:	f1c3 0200 	rsb	r2, r3, #0
 8012816:	db0b      	blt.n	8012830 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8012818:	6022      	str	r2, [r4, #0]
 801281a:	e006      	b.n	801282a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801281c:	2e01      	cmp	r6, #1
 801281e:	d104      	bne.n	801282a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012820:	2b00      	cmp	r3, #0
 8012822:	da02      	bge.n	801282a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012824:	442b      	add	r3, r5
 8012826:	3801      	subs	r0, #1
 8012828:	6023      	str	r3, [r4, #0]
 801282a:	b005      	add	sp, #20
 801282c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012830:	3801      	subs	r0, #1
 8012832:	1b52      	subs	r2, r2, r5
 8012834:	e7f0      	b.n	8012818 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08012838 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8012838:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801283c:	4c1c      	ldr	r4, [pc, #112]	; (80128b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801283e:	4605      	mov	r5, r0
 8012840:	6807      	ldr	r7, [r0, #0]
 8012842:	69a3      	ldr	r3, [r4, #24]
 8012844:	b92b      	cbnz	r3, 8012852 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8012846:	6840      	ldr	r0, [r0, #4]
 8012848:	e9c5 7000 	strd	r7, r0, [r5]
 801284c:	b004      	add	sp, #16
 801284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012852:	f04f 0802 	mov.w	r8, #2
 8012856:	68a2      	ldr	r2, [r4, #8]
 8012858:	ae04      	add	r6, sp, #16
 801285a:	6820      	ldr	r0, [r4, #0]
 801285c:	fb93 f1f8 	sdiv	r1, r3, r8
 8012860:	440a      	add	r2, r1
 8012862:	69e1      	ldr	r1, [r4, #28]
 8012864:	f846 2d04 	str.w	r2, [r6, #-4]!
 8012868:	463a      	mov	r2, r7
 801286a:	9600      	str	r6, [sp, #0]
 801286c:	f7ff ff97 	bl	801279e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012870:	69a3      	ldr	r3, [r4, #24]
 8012872:	4607      	mov	r7, r0
 8012874:	686a      	ldr	r2, [r5, #4]
 8012876:	6a21      	ldr	r1, [r4, #32]
 8012878:	9600      	str	r6, [sp, #0]
 801287a:	6860      	ldr	r0, [r4, #4]
 801287c:	f7ff ff8f 	bl	801279e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012880:	69a3      	ldr	r3, [r4, #24]
 8012882:	6962      	ldr	r2, [r4, #20]
 8012884:	4407      	add	r7, r0
 8012886:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012888:	9600      	str	r6, [sp, #0]
 801288a:	68e0      	ldr	r0, [r4, #12]
 801288c:	fb93 f8f8 	sdiv	r8, r3, r8
 8012890:	4442      	add	r2, r8
 8012892:	9203      	str	r2, [sp, #12]
 8012894:	682a      	ldr	r2, [r5, #0]
 8012896:	f7ff ff82 	bl	801279e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801289a:	4680      	mov	r8, r0
 801289c:	9600      	str	r6, [sp, #0]
 801289e:	69a3      	ldr	r3, [r4, #24]
 80128a0:	686a      	ldr	r2, [r5, #4]
 80128a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80128a4:	6920      	ldr	r0, [r4, #16]
 80128a6:	f7ff ff7a 	bl	801279e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80128aa:	4440      	add	r0, r8
 80128ac:	e7cc      	b.n	8012848 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80128ae:	bf00      	nop
 80128b0:	2000df7c 	.word	0x2000df7c

080128b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80128b4:	4b07      	ldr	r3, [pc, #28]	; (80128d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80128b6:	b510      	push	{r4, lr}
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	2b01      	cmp	r3, #1
 80128bc:	d108      	bne.n	80128d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80128be:	4b06      	ldr	r3, [pc, #24]	; (80128d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80128c0:	880c      	ldrh	r4, [r1, #0]
 80128c2:	881b      	ldrh	r3, [r3, #0]
 80128c4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80128c8:	3b01      	subs	r3, #1
 80128ca:	1b1b      	subs	r3, r3, r4
 80128cc:	8003      	strh	r3, [r0, #0]
 80128ce:	800a      	strh	r2, [r1, #0]
 80128d0:	bd10      	pop	{r4, pc}
 80128d2:	bf00      	nop
 80128d4:	2000df68 	.word	0x2000df68
 80128d8:	2000df6c 	.word	0x2000df6c

080128dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80128dc:	4b0a      	ldr	r3, [pc, #40]	; (8012908 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80128de:	b510      	push	{r4, lr}
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d10e      	bne.n	8012904 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80128e6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80128ea:	8843      	ldrh	r3, [r0, #2]
 80128ec:	f9b0 4000 	ldrsh.w	r4, [r0]
 80128f0:	18ca      	adds	r2, r1, r3
 80128f2:	4b06      	ldr	r3, [pc, #24]	; (801290c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80128f4:	8044      	strh	r4, [r0, #2]
 80128f6:	881b      	ldrh	r3, [r3, #0]
 80128f8:	1a9b      	subs	r3, r3, r2
 80128fa:	8003      	strh	r3, [r0, #0]
 80128fc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012900:	8081      	strh	r1, [r0, #4]
 8012902:	80c3      	strh	r3, [r0, #6]
 8012904:	bd10      	pop	{r4, pc}
 8012906:	bf00      	nop
 8012908:	2000df68 	.word	0x2000df68
 801290c:	2000df64 	.word	0x2000df64

08012910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8012910:	4b07      	ldr	r3, [pc, #28]	; (8012930 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8012912:	b510      	push	{r4, lr}
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	2b01      	cmp	r3, #1
 8012918:	d108      	bne.n	801292c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801291a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801291e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012922:	8003      	strh	r3, [r0, #0]
 8012924:	8893      	ldrh	r3, [r2, #4]
 8012926:	3b01      	subs	r3, #1
 8012928:	1b1b      	subs	r3, r3, r4
 801292a:	800b      	strh	r3, [r1, #0]
 801292c:	bd10      	pop	{r4, pc}
 801292e:	bf00      	nop
 8012930:	2000df68 	.word	0x2000df68

08012934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012934:	4b08      	ldr	r3, [pc, #32]	; (8012958 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8012936:	b513      	push	{r0, r1, r4, lr}
 8012938:	f9b3 2000 	ldrsh.w	r2, [r3]
 801293c:	2400      	movs	r4, #0
 801293e:	4b07      	ldr	r3, [pc, #28]	; (801295c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8012940:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012944:	466a      	mov	r2, sp
 8012946:	f9b3 3000 	ldrsh.w	r3, [r3]
 801294a:	9400      	str	r4, [sp, #0]
 801294c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012950:	f7ff ffde 	bl	8012910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8012954:	b002      	add	sp, #8
 8012956:	bd10      	pop	{r4, pc}
 8012958:	2000df64 	.word	0x2000df64
 801295c:	2000df66 	.word	0x2000df66

08012960 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8012960:	4b0b      	ldr	r3, [pc, #44]	; (8012990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	2b01      	cmp	r3, #1
 8012966:	d111      	bne.n	801298c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8012968:	680b      	ldr	r3, [r1, #0]
 801296a:	ed90 7a00 	vldr	s14, [r0]
 801296e:	6003      	str	r3, [r0, #0]
 8012970:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8012974:	eddf 6a07 	vldr	s13, [pc, #28]	; 8012994 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8012978:	ee07 3a90 	vmov	s15, r3
 801297c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012980:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012988:	edc1 7a00 	vstr	s15, [r1]
 801298c:	4770      	bx	lr
 801298e:	bf00      	nop
 8012990:	2000df68 	.word	0x2000df68
 8012994:	38d1b717 	.word	0x38d1b717

08012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8012998:	4b0a      	ldr	r3, [pc, #40]	; (80129c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801299a:	460a      	mov	r2, r1
 801299c:	b510      	push	{r4, lr}
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d10d      	bne.n	80129c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80129a4:	8881      	ldrh	r1, [r0, #4]
 80129a6:	8803      	ldrh	r3, [r0, #0]
 80129a8:	440b      	add	r3, r1
 80129aa:	4601      	mov	r1, r0
 80129ac:	3b01      	subs	r3, #1
 80129ae:	f821 3b02 	strh.w	r3, [r1], #2
 80129b2:	f7ff ffad 	bl	8012910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80129b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80129ba:	88c2      	ldrh	r2, [r0, #6]
 80129bc:	80c3      	strh	r3, [r0, #6]
 80129be:	8082      	strh	r2, [r0, #4]
 80129c0:	bd10      	pop	{r4, pc}
 80129c2:	bf00      	nop
 80129c4:	2000df68 	.word	0x2000df68

080129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80129c8:	4b09      	ldr	r3, [pc, #36]	; (80129f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80129ca:	b507      	push	{r0, r1, r2, lr}
 80129cc:	2100      	movs	r1, #0
 80129ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129d2:	4b08      	ldr	r3, [pc, #32]	; (80129f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80129d4:	9100      	str	r1, [sp, #0]
 80129d6:	4669      	mov	r1, sp
 80129d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129dc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80129e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80129e4:	f7ff ffd8 	bl	8012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80129e8:	b003      	add	sp, #12
 80129ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80129ee:	bf00      	nop
 80129f0:	2000df64 	.word	0x2000df64
 80129f4:	2000df66 	.word	0x2000df66

080129f8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80129f8:	4b06      	ldr	r3, [pc, #24]	; (8012a14 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80129fa:	2100      	movs	r1, #0
 80129fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012a00:	4b05      	ldr	r3, [pc, #20]	; (8012a18 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8012a02:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8012a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a0a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8012a0e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8012a12:	4770      	bx	lr
 8012a14:	2000df64 	.word	0x2000df64
 8012a18:	2000df66 	.word	0x2000df66

08012a1c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012a1c:	4b03      	ldr	r3, [pc, #12]	; (8012a2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8012a1e:	6818      	ldr	r0, [r3, #0]
 8012a20:	b110      	cbz	r0, 8012a28 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8012a22:	6803      	ldr	r3, [r0, #0]
 8012a24:	699b      	ldr	r3, [r3, #24]
 8012a26:	4718      	bx	r3
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	2000dfac 	.word	0x2000dfac

08012a30 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8012a30:	4770      	bx	lr
	...

08012a34 <_ZN8touchgfx11Application4drawEv>:
 8012a34:	4b09      	ldr	r3, [pc, #36]	; (8012a5c <_ZN8touchgfx11Application4drawEv+0x28>)
 8012a36:	b507      	push	{r0, r1, r2, lr}
 8012a38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012a3c:	2100      	movs	r1, #0
 8012a3e:	4b08      	ldr	r3, [pc, #32]	; (8012a60 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8012a40:	9100      	str	r1, [sp, #0]
 8012a42:	4669      	mov	r1, sp
 8012a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a48:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012a4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012a50:	6803      	ldr	r3, [r0, #0]
 8012a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a54:	4798      	blx	r3
 8012a56:	b003      	add	sp, #12
 8012a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a5c:	2000df64 	.word	0x2000df64
 8012a60:	2000df66 	.word	0x2000df66

08012a64 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8012a64:	4b03      	ldr	r3, [pc, #12]	; (8012a74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8012a66:	6818      	ldr	r0, [r3, #0]
 8012a68:	b110      	cbz	r0, 8012a70 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8012a6a:	6803      	ldr	r3, [r0, #0]
 8012a6c:	69db      	ldr	r3, [r3, #28]
 8012a6e:	4718      	bx	r3
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop
 8012a74:	2000dfac 	.word	0x2000dfac

08012a78 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8012a78:	4b03      	ldr	r3, [pc, #12]	; (8012a88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8012a7a:	6818      	ldr	r0, [r3, #0]
 8012a7c:	b110      	cbz	r0, 8012a84 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8012a7e:	6803      	ldr	r3, [r0, #0]
 8012a80:	6a1b      	ldr	r3, [r3, #32]
 8012a82:	4718      	bx	r3
 8012a84:	4770      	bx	lr
 8012a86:	bf00      	nop
 8012a88:	2000dfac 	.word	0x2000dfac

08012a8c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8012a8c:	4b03      	ldr	r3, [pc, #12]	; (8012a9c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8012a8e:	6818      	ldr	r0, [r3, #0]
 8012a90:	b110      	cbz	r0, 8012a98 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8012a92:	6803      	ldr	r3, [r0, #0]
 8012a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a96:	4718      	bx	r3
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop
 8012a9c:	2000dfac 	.word	0x2000dfac

08012aa0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8012aa0:	b570      	push	{r4, r5, r6, lr}
 8012aa2:	4d34      	ldr	r5, [pc, #208]	; (8012b74 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	6828      	ldr	r0, [r5, #0]
 8012aa8:	b140      	cbz	r0, 8012abc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012aaa:	7a03      	ldrb	r3, [r0, #8]
 8012aac:	b933      	cbnz	r3, 8012abc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012aae:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8012ab2:	6803      	ldr	r3, [r0, #0]
 8012ab4:	689b      	ldr	r3, [r3, #8]
 8012ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012aba:	4718      	bx	r3
 8012abc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8012ac0:	b97b      	cbnz	r3, 8012ae2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012ac2:	b170      	cbz	r0, 8012ae2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012ac4:	7a03      	ldrb	r3, [r0, #8]
 8012ac6:	b163      	cbz	r3, 8012ae2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012ac8:	4b2b      	ldr	r3, [pc, #172]	; (8012b78 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8012aca:	6818      	ldr	r0, [r3, #0]
 8012acc:	b110      	cbz	r0, 8012ad4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8012ace:	6803      	ldr	r3, [r0, #0]
 8012ad0:	691b      	ldr	r3, [r3, #16]
 8012ad2:	4798      	blx	r3
 8012ad4:	6828      	ldr	r0, [r5, #0]
 8012ad6:	6803      	ldr	r3, [r0, #0]
 8012ad8:	68db      	ldr	r3, [r3, #12]
 8012ada:	4798      	blx	r3
 8012adc:	2301      	movs	r3, #1
 8012ade:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8012ae2:	2500      	movs	r5, #0
 8012ae4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8012ae8:	42a8      	cmp	r0, r5
 8012aea:	dd0c      	ble.n	8012b06 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8012aec:	1963      	adds	r3, r4, r5
 8012aee:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8012af2:	b132      	cbz	r2, 8012b02 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8012af4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8012af8:	4413      	add	r3, r2
 8012afa:	6858      	ldr	r0, [r3, #4]
 8012afc:	6803      	ldr	r3, [r0, #0]
 8012afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b00:	4798      	blx	r3
 8012b02:	3501      	adds	r5, #1
 8012b04:	e7ee      	b.n	8012ae4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8012b06:	2300      	movs	r3, #0
 8012b08:	461a      	mov	r2, r3
 8012b0a:	4298      	cmp	r0, r3
 8012b0c:	d114      	bne.n	8012b38 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8012b0e:	1d25      	adds	r5, r4, #4
 8012b10:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8012b14:	1e48      	subs	r0, r1, #1
 8012b16:	b280      	uxth	r0, r0
 8012b18:	4291      	cmp	r1, r2
 8012b1a:	dd24      	ble.n	8012b66 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8012b1c:	4288      	cmp	r0, r1
 8012b1e:	d2fb      	bcs.n	8012b18 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8012b20:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8012b24:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8012b28:	3304      	adds	r3, #4
 8012b2a:	428b      	cmp	r3, r1
 8012b2c:	d018      	beq.n	8012b60 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8012b2e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8012b32:	f843 6c04 	str.w	r6, [r3, #-4]
 8012b36:	e7f8      	b.n	8012b2a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8012b38:	18e1      	adds	r1, r4, r3
 8012b3a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8012b3e:	b16d      	cbz	r5, 8012b5c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d00a      	beq.n	8012b5a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8012b44:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8012b48:	4431      	add	r1, r6
 8012b4a:	684e      	ldr	r6, [r1, #4]
 8012b4c:	b291      	uxth	r1, r2
 8012b4e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8012b52:	604e      	str	r6, [r1, #4]
 8012b54:	18a1      	adds	r1, r4, r2
 8012b56:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8012b5a:	3201      	adds	r2, #1
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	e7d4      	b.n	8012b0a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8012b60:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8012b64:	e7d4      	b.n	8012b10 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8012b66:	4b04      	ldr	r3, [pc, #16]	; (8012b78 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8012b68:	6818      	ldr	r0, [r3, #0]
 8012b6a:	b110      	cbz	r0, 8012b72 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8012b6c:	6803      	ldr	r3, [r0, #0]
 8012b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b70:	e7a1      	b.n	8012ab6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8012b72:	bd70      	pop	{r4, r5, r6, pc}
 8012b74:	2000dfb0 	.word	0x2000dfb0
 8012b78:	2000dfac 	.word	0x2000dfac

08012b7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8012b7c:	b570      	push	{r4, r5, r6, lr}
 8012b7e:	4606      	mov	r6, r0
 8012b80:	460c      	mov	r4, r1
 8012b82:	b929      	cbnz	r1, 8012b90 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8012b84:	4b0c      	ldr	r3, [pc, #48]	; (8012bb8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8012b86:	2167      	movs	r1, #103	; 0x67
 8012b88:	4a0c      	ldr	r2, [pc, #48]	; (8012bbc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8012b8a:	480d      	ldr	r0, [pc, #52]	; (8012bc0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8012b8c:	f00b f912 	bl	801ddb4 <__assert_func>
 8012b90:	2300      	movs	r3, #0
 8012b92:	4d0c      	ldr	r5, [pc, #48]	; (8012bc4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8012b94:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8012b98:	6828      	ldr	r0, [r5, #0]
 8012b9a:	b110      	cbz	r0, 8012ba2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8012b9c:	6803      	ldr	r3, [r0, #0]
 8012b9e:	695b      	ldr	r3, [r3, #20]
 8012ba0:	4798      	blx	r3
 8012ba2:	602c      	str	r4, [r5, #0]
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	6823      	ldr	r3, [r4, #0]
 8012ba8:	68db      	ldr	r3, [r3, #12]
 8012baa:	4798      	blx	r3
 8012bac:	6833      	ldr	r3, [r6, #0]
 8012bae:	4630      	mov	r0, r6
 8012bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bb6:	4718      	bx	r3
 8012bb8:	080211a4 	.word	0x080211a4
 8012bbc:	08021274 	.word	0x08021274
 8012bc0:	080211ae 	.word	0x080211ae
 8012bc4:	2000dfac 	.word	0x2000dfac

08012bc8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8012bc8:	b510      	push	{r4, lr}
 8012bca:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012bce:	888a      	ldrh	r2, [r1, #4]
 8012bd0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012bd4:	4422      	add	r2, r4
 8012bd6:	b212      	sxth	r2, r2
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	da15      	bge.n	8012c08 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012bdc:	8882      	ldrh	r2, [r0, #4]
 8012bde:	4413      	add	r3, r2
 8012be0:	b21b      	sxth	r3, r3
 8012be2:	429c      	cmp	r4, r3
 8012be4:	da10      	bge.n	8012c08 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012be6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012bea:	88c9      	ldrh	r1, [r1, #6]
 8012bec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012bf0:	4419      	add	r1, r3
 8012bf2:	b209      	sxth	r1, r1
 8012bf4:	428a      	cmp	r2, r1
 8012bf6:	da07      	bge.n	8012c08 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012bf8:	88c0      	ldrh	r0, [r0, #6]
 8012bfa:	4410      	add	r0, r2
 8012bfc:	b200      	sxth	r0, r0
 8012bfe:	4283      	cmp	r3, r0
 8012c00:	bfac      	ite	ge
 8012c02:	2000      	movge	r0, #0
 8012c04:	2001      	movlt	r0, #1
 8012c06:	bd10      	pop	{r4, pc}
 8012c08:	2000      	movs	r0, #0
 8012c0a:	e7fc      	b.n	8012c06 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012c0c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8012c0c:	b570      	push	{r4, r5, r6, lr}
 8012c0e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012c12:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012c16:	42ac      	cmp	r4, r5
 8012c18:	db18      	blt.n	8012c4c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8012c1a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8012c1e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	db12      	blt.n	8012c4c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8012c26:	8886      	ldrh	r6, [r0, #4]
 8012c28:	4435      	add	r5, r6
 8012c2a:	888e      	ldrh	r6, [r1, #4]
 8012c2c:	4434      	add	r4, r6
 8012c2e:	b22d      	sxth	r5, r5
 8012c30:	b224      	sxth	r4, r4
 8012c32:	42a5      	cmp	r5, r4
 8012c34:	db0a      	blt.n	8012c4c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8012c36:	88c0      	ldrh	r0, [r0, #6]
 8012c38:	4418      	add	r0, r3
 8012c3a:	88cb      	ldrh	r3, [r1, #6]
 8012c3c:	441a      	add	r2, r3
 8012c3e:	b200      	sxth	r0, r0
 8012c40:	b212      	sxth	r2, r2
 8012c42:	4290      	cmp	r0, r2
 8012c44:	bfb4      	ite	lt
 8012c46:	2000      	movlt	r0, #0
 8012c48:	2001      	movge	r0, #1
 8012c4a:	bd70      	pop	{r4, r5, r6, pc}
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	e7fc      	b.n	8012c4a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08012c50 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c52:	4604      	mov	r4, r0
 8012c54:	4608      	mov	r0, r1
 8012c56:	460d      	mov	r5, r1
 8012c58:	f7fc fe9d 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c5c:	b978      	cbnz	r0, 8012c7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f7fc fe99 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c64:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012c68:	b150      	cbz	r0, 8012c80 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012c6a:	8026      	strh	r6, [r4, #0]
 8012c6c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012c70:	8063      	strh	r3, [r4, #2]
 8012c72:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012c76:	80a3      	strh	r3, [r4, #4]
 8012c78:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012c7c:	80e3      	strh	r3, [r4, #6]
 8012c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c80:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012c84:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012c88:	42b1      	cmp	r1, r6
 8012c8a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012c8e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012c92:	460f      	mov	r7, r1
 8012c94:	88ed      	ldrh	r5, [r5, #6]
 8012c96:	bfa8      	it	ge
 8012c98:	4637      	movge	r7, r6
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	4466      	add	r6, ip
 8012ca0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012ca4:	bfa8      	it	ge
 8012ca6:	4610      	movge	r0, r2
 8012ca8:	442a      	add	r2, r5
 8012caa:	88e5      	ldrh	r5, [r4, #6]
 8012cac:	4461      	add	r1, ip
 8012cae:	b236      	sxth	r6, r6
 8012cb0:	8027      	strh	r7, [r4, #0]
 8012cb2:	442b      	add	r3, r5
 8012cb4:	b209      	sxth	r1, r1
 8012cb6:	b212      	sxth	r2, r2
 8012cb8:	8060      	strh	r0, [r4, #2]
 8012cba:	b21b      	sxth	r3, r3
 8012cbc:	428e      	cmp	r6, r1
 8012cbe:	bfac      	ite	ge
 8012cc0:	ebc7 0106 	rsbge	r1, r7, r6
 8012cc4:	ebc7 0101 	rsblt	r1, r7, r1
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	bfac      	ite	ge
 8012ccc:	ebc0 0202 	rsbge	r2, r0, r2
 8012cd0:	ebc0 0203 	rsblt	r2, r0, r3
 8012cd4:	80a1      	strh	r1, [r4, #4]
 8012cd6:	80e2      	strh	r2, [r4, #6]
 8012cd8:	e7d1      	b.n	8012c7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08012cdc <_ZN8touchgfx11Application11getInstanceEv>:
 8012cdc:	4b01      	ldr	r3, [pc, #4]	; (8012ce4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8012cde:	6818      	ldr	r0, [r3, #0]
 8012ce0:	4770      	bx	lr
 8012ce2:	bf00      	nop
 8012ce4:	2000dfbc 	.word	0x2000dfbc

08012ce8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8012ce8:	2300      	movs	r3, #0
 8012cea:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8012cee:	30a8      	adds	r0, #168	; 0xa8
 8012cf0:	f820 3c24 	strh.w	r3, [r0, #-36]
 8012cf4:	f802 3b01 	strb.w	r3, [r2], #1
 8012cf8:	4282      	cmp	r2, r0
 8012cfa:	d1fb      	bne.n	8012cf4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8012cfc:	4770      	bx	lr

08012cfe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012cfe:	4603      	mov	r3, r0
 8012d00:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8012d04:	2200      	movs	r2, #0
 8012d06:	801a      	strh	r2, [r3, #0]
 8012d08:	3308      	adds	r3, #8
 8012d0a:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012d0e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8012d12:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012d16:	428b      	cmp	r3, r1
 8012d18:	d1f5      	bne.n	8012d06 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8012d1a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012d1e:	4770      	bx	lr

08012d20 <_ZN8touchgfx11ApplicationC1Ev>:
 8012d20:	b570      	push	{r4, r5, r6, lr}
 8012d22:	4b1a      	ldr	r3, [pc, #104]	; (8012d8c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8012d24:	2500      	movs	r5, #0
 8012d26:	4604      	mov	r4, r0
 8012d28:	30a8      	adds	r0, #168	; 0xa8
 8012d2a:	f840 3ca8 	str.w	r3, [r0, #-168]
 8012d2e:	f820 5c24 	strh.w	r5, [r0, #-36]
 8012d32:	f7ff ffe4 	bl	8012cfe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012d36:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8012d3a:	f7ff ffe0 	bl	8012cfe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012d3e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8012d42:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8012d46:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8012d4a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8012d4e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8012d52:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8012d56:	490e      	ldr	r1, [pc, #56]	; (8012d90 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8012d58:	480e      	ldr	r0, [pc, #56]	; (8012d94 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8012d5a:	f00a feef 	bl	801db3c <CRC_Lock>
 8012d5e:	4e0e      	ldr	r6, [pc, #56]	; (8012d98 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8012d60:	4b0e      	ldr	r3, [pc, #56]	; (8012d9c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8012d62:	b158      	cbz	r0, 8012d7c <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8012d64:	801d      	strh	r5, [r3, #0]
 8012d66:	2300      	movs	r3, #0
 8012d68:	4a0d      	ldr	r2, [pc, #52]	; (8012da0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	6013      	str	r3, [r2, #0]
 8012d6e:	4a0d      	ldr	r2, [pc, #52]	; (8012da4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8012d70:	6033      	str	r3, [r6, #0]
 8012d72:	6013      	str	r3, [r2, #0]
 8012d74:	f7ff ffb8 	bl	8012ce8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8012d78:	4620      	mov	r0, r4
 8012d7a:	bd70      	pop	{r4, r5, r6, pc}
 8012d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012d80:	2002      	movs	r0, #2
 8012d82:	801a      	strh	r2, [r3, #0]
 8012d84:	6030      	str	r0, [r6, #0]
 8012d86:	f001 fab3 	bl	80142f0 <_ZN8touchgfx6Screen4drawEv>
 8012d8a:	e7ec      	b.n	8012d66 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8012d8c:	08021238 	.word	0x08021238
 8012d90:	b5e8b5cd 	.word	0xb5e8b5cd
 8012d94:	f407a5c2 	.word	0xf407a5c2
 8012d98:	2000dfac 	.word	0x2000dfac
 8012d9c:	2000001c 	.word	0x2000001c
 8012da0:	2000dfbc 	.word	0x2000dfbc
 8012da4:	2000dfb0 	.word	0x2000dfb0

08012da8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012da8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8012dac:	428b      	cmp	r3, r1
 8012dae:	b510      	push	{r4, lr}
 8012db0:	d90e      	bls.n	8012dd0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8012db2:	3b01      	subs	r3, #1
 8012db4:	b29b      	uxth	r3, r3
 8012db6:	428b      	cmp	r3, r1
 8012db8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8012dbc:	d908      	bls.n	8012dd0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8012dbe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012dc2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8012dc6:	681a      	ldr	r2, [r3, #0]
 8012dc8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	6062      	str	r2, [r4, #4]
 8012dd0:	bd10      	pop	{r4, pc}
	...

08012dd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8012dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012dd6:	466b      	mov	r3, sp
 8012dd8:	4604      	mov	r4, r0
 8012dda:	e883 0006 	stmia.w	r3, {r1, r2}
 8012dde:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8012de2:	2a07      	cmp	r2, #7
 8012de4:	d906      	bls.n	8012df4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8012de6:	4b09      	ldr	r3, [pc, #36]	; (8012e0c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8012de8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012dec:	4a08      	ldr	r2, [pc, #32]	; (8012e10 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8012dee:	4809      	ldr	r0, [pc, #36]	; (8012e14 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8012df0:	f00a ffe0 	bl	801ddb4 <__assert_func>
 8012df4:	1c51      	adds	r1, r2, #1
 8012df6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8012dfa:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8012dfe:	cb03      	ldmia	r3!, {r0, r1}
 8012e00:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8012e04:	6069      	str	r1, [r5, #4]
 8012e06:	b003      	add	sp, #12
 8012e08:	bd30      	pop	{r4, r5, pc}
 8012e0a:	bf00      	nop
 8012e0c:	080211d8 	.word	0x080211d8
 8012e10:	080212b8 	.word	0x080212b8
 8012e14:	08021207 	.word	0x08021207

08012e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e1c:	b08d      	sub	sp, #52	; 0x34
 8012e1e:	4683      	mov	fp, r0
 8012e20:	ac08      	add	r4, sp, #32
 8012e22:	4620      	mov	r0, r4
 8012e24:	e884 0006 	stmia.w	r4, {r1, r2}
 8012e28:	f7fc fdb5 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e2c:	2800      	cmp	r0, #0
 8012e2e:	d16a      	bne.n	8012f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8012e30:	9402      	str	r4, [sp, #8]
 8012e32:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8012e36:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8012e3a:	2400      	movs	r4, #0
 8012e3c:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8012e40:	9301      	str	r3, [sp, #4]
 8012e42:	36a0      	adds	r6, #160	; 0xa0
 8012e44:	42a5      	cmp	r5, r4
 8012e46:	d00d      	beq.n	8012e64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8012e48:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8012e4c:	9802      	ldr	r0, [sp, #8]
 8012e4e:	f7ff fedd 	bl	8012c0c <_ZNK8touchgfx4Rect8includesERKS0_>
 8012e52:	b128      	cbz	r0, 8012e60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8012e54:	1e69      	subs	r1, r5, #1
 8012e56:	9801      	ldr	r0, [sp, #4]
 8012e58:	1b09      	subs	r1, r1, r4
 8012e5a:	b289      	uxth	r1, r1
 8012e5c:	f7ff ffa4 	bl	8012da8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012e60:	3401      	adds	r4, #1
 8012e62:	e7ef      	b.n	8012e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012e64:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8012e68:	1e7b      	subs	r3, r7, #1
 8012e6a:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8012e6e:	9703      	str	r7, [sp, #12]
 8012e70:	9300      	str	r3, [sp, #0]
 8012e72:	2400      	movs	r4, #0
 8012e74:	4655      	mov	r5, sl
 8012e76:	9704      	str	r7, [sp, #16]
 8012e78:	4626      	mov	r6, r4
 8012e7a:	9b04      	ldr	r3, [sp, #16]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d078      	beq.n	8012f72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8012e80:	9902      	ldr	r1, [sp, #8]
 8012e82:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8012e86:	f7ff fe9f 	bl	8012bc8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012e8a:	b360      	cbz	r0, 8012ee6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8012e8c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8012e90:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8012e94:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8012e98:	45e6      	cmp	lr, ip
 8012e9a:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8012e9e:	db35      	blt.n	8012f0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8012ea0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012ea4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8012ea8:	4472      	add	r2, lr
 8012eaa:	4463      	add	r3, ip
 8012eac:	b212      	sxth	r2, r2
 8012eae:	b21b      	sxth	r3, r3
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	dc2b      	bgt.n	8012f0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8012eb4:	fa1f f288 	uxth.w	r2, r8
 8012eb8:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8012ebc:	45c1      	cmp	r9, r8
 8012ebe:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8012ec2:	4413      	add	r3, r2
 8012ec4:	fa1f fc89 	uxth.w	ip, r9
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	fa0f fe83 	sxth.w	lr, r3
 8012ece:	db0f      	blt.n	8012ef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8012ed0:	eba3 030c 	sub.w	r3, r3, ip
 8012ed4:	1ac9      	subs	r1, r1, r3
 8012ed6:	b209      	sxth	r1, r1
 8012ed8:	2900      	cmp	r1, #0
 8012eda:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8012ede:	dd12      	ble.n	8012f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8012ee0:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	9b04      	ldr	r3, [sp, #16]
 8012ee8:	3d08      	subs	r5, #8
 8012eea:	3b01      	subs	r3, #1
 8012eec:	9304      	str	r3, [sp, #16]
 8012eee:	e7c4      	b.n	8012e7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8012ef0:	4461      	add	r1, ip
 8012ef2:	b209      	sxth	r1, r1
 8012ef4:	4571      	cmp	r1, lr
 8012ef6:	dc3a      	bgt.n	8012f6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8012ef8:	eba2 020c 	sub.w	r2, r2, ip
 8012efc:	b212      	sxth	r2, r2
 8012efe:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8012f02:	2a00      	cmp	r2, #0
 8012f04:	dcee      	bgt.n	8012ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8012f06:	b00d      	add	sp, #52	; 0x34
 8012f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f0c:	45c1      	cmp	r9, r8
 8012f0e:	db2e      	blt.n	8012f6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8012f10:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012f14:	4499      	add	r9, r3
 8012f16:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8012f1a:	4498      	add	r8, r3
 8012f1c:	fa0f f989 	sxth.w	r9, r9
 8012f20:	fa0f f888 	sxth.w	r8, r8
 8012f24:	45c1      	cmp	r9, r8
 8012f26:	dc22      	bgt.n	8012f6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8012f28:	fa1f f28c 	uxth.w	r2, ip
 8012f2c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8012f30:	45e6      	cmp	lr, ip
 8012f32:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012f36:	4413      	add	r3, r2
 8012f38:	fa1f f88e 	uxth.w	r8, lr
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	fa0f f983 	sxth.w	r9, r3
 8012f42:	db0a      	blt.n	8012f5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8012f44:	eba3 0308 	sub.w	r3, r3, r8
 8012f48:	1ac9      	subs	r1, r1, r3
 8012f4a:	b209      	sxth	r1, r1
 8012f4c:	2900      	cmp	r1, #0
 8012f4e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8012f52:	ddd8      	ble.n	8012f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8012f54:	f8ad 9020 	strh.w	r9, [sp, #32]
 8012f58:	e7c4      	b.n	8012ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8012f5a:	4441      	add	r1, r8
 8012f5c:	b209      	sxth	r1, r1
 8012f5e:	4549      	cmp	r1, r9
 8012f60:	dc05      	bgt.n	8012f6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8012f62:	eba2 0208 	sub.w	r2, r2, r8
 8012f66:	b212      	sxth	r2, r2
 8012f68:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8012f6c:	e7c9      	b.n	8012f02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8012f6e:	4606      	mov	r6, r0
 8012f70:	e7b9      	b.n	8012ee6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8012f72:	2c00      	cmp	r4, #0
 8012f74:	f47f af7d 	bne.w	8012e72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8012f78:	2e00      	cmp	r6, #0
 8012f7a:	f000 81dc 	beq.w	8013336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8012f7e:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8012f82:	4655      	mov	r5, sl
 8012f84:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8012f88:	b2b9      	uxth	r1, r7
 8012f8a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012f8e:	b2b3      	uxth	r3, r6
 8012f90:	9104      	str	r1, [sp, #16]
 8012f92:	9804      	ldr	r0, [sp, #16]
 8012f94:	441a      	add	r2, r3
 8012f96:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8012f9a:	b292      	uxth	r2, r2
 8012f9c:	4401      	add	r1, r0
 8012f9e:	fa0f f882 	sxth.w	r8, r2
 8012fa2:	b289      	uxth	r1, r1
 8012fa4:	9105      	str	r1, [sp, #20]
 8012fa6:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8012faa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012fae:	9b03      	ldr	r3, [sp, #12]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d054      	beq.n	801305e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8012fb4:	9902      	ldr	r1, [sp, #8]
 8012fb6:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8012fba:	f7ff fe05 	bl	8012bc8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012fbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012fc2:	b1d8      	cbz	r0, 8012ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012fc4:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8012fc8:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8012fcc:	4576      	cmp	r6, lr
 8012fce:	dc26      	bgt.n	801301e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012fd0:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8012fd4:	44f4      	add	ip, lr
 8012fd6:	fa0f fc8c 	sxth.w	ip, ip
 8012fda:	45e0      	cmp	r8, ip
 8012fdc:	db1f      	blt.n	801301e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012fde:	428f      	cmp	r7, r1
 8012fe0:	fa1f fc81 	uxth.w	ip, r1
 8012fe4:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8012fe8:	dc0f      	bgt.n	801300a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8012fea:	9805      	ldr	r0, [sp, #20]
 8012fec:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8012ff0:	eba0 0c0c 	sub.w	ip, r0, ip
 8012ff4:	eba1 010c 	sub.w	r1, r1, ip
 8012ff8:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	9903      	ldr	r1, [sp, #12]
 8013000:	3d08      	subs	r5, #8
 8013002:	4604      	mov	r4, r0
 8013004:	3901      	subs	r1, #1
 8013006:	9103      	str	r1, [sp, #12]
 8013008:	e7cf      	b.n	8012faa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801300a:	4461      	add	r1, ip
 801300c:	b209      	sxth	r1, r1
 801300e:	4549      	cmp	r1, r9
 8013010:	dcf5      	bgt.n	8012ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013012:	9904      	ldr	r1, [sp, #16]
 8013014:	eba1 0c0c 	sub.w	ip, r1, ip
 8013018:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801301c:	e7ee      	b.n	8012ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801301e:	428f      	cmp	r7, r1
 8013020:	dced      	bgt.n	8012ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013022:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8013026:	4461      	add	r1, ip
 8013028:	b209      	sxth	r1, r1
 801302a:	4589      	cmp	r9, r1
 801302c:	dbe7      	blt.n	8012ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801302e:	4576      	cmp	r6, lr
 8013030:	fa1f fc8e 	uxth.w	ip, lr
 8013034:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8013038:	dc08      	bgt.n	801304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801303a:	eba2 0c0c 	sub.w	ip, r2, ip
 801303e:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8013042:	eba1 010c 	sub.w	r1, r1, ip
 8013046:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801304a:	e7d7      	b.n	8012ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801304c:	4461      	add	r1, ip
 801304e:	b209      	sxth	r1, r1
 8013050:	4588      	cmp	r8, r1
 8013052:	dbd4      	blt.n	8012ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013054:	eba3 0c0c 	sub.w	ip, r3, ip
 8013058:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801305c:	e7ce      	b.n	8012ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801305e:	2c00      	cmp	r4, #0
 8013060:	f000 8169 	beq.w	8013336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8013064:	9b00      	ldr	r3, [sp, #0]
 8013066:	3301      	adds	r3, #1
 8013068:	f000 8165 	beq.w	8013336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801306c:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8013070:	9802      	ldr	r0, [sp, #8]
 8013072:	4621      	mov	r1, r4
 8013074:	f7ff fdca 	bl	8012c0c <_ZNK8touchgfx4Rect8includesERKS0_>
 8013078:	b120      	cbz	r0, 8013084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801307a:	f8bd 1000 	ldrh.w	r1, [sp]
 801307e:	9801      	ldr	r0, [sp, #4]
 8013080:	f7ff fe92 	bl	8012da8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013084:	9902      	ldr	r1, [sp, #8]
 8013086:	4620      	mov	r0, r4
 8013088:	f7ff fd9e 	bl	8012bc8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801308c:	2800      	cmp	r0, #0
 801308e:	f000 809b 	beq.w	80131c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8013092:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8013096:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801309a:	fa1f f288 	uxth.w	r2, r8
 801309e:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 80130a2:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 80130a6:	19d5      	adds	r5, r2, r7
 80130a8:	b2a1      	uxth	r1, r4
 80130aa:	45a0      	cmp	r8, r4
 80130ac:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80130b0:	fa1f f985 	uxth.w	r9, r5
 80130b4:	440b      	add	r3, r1
 80130b6:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 80130ba:	fa0f f589 	sxth.w	r5, r9
 80130be:	b29b      	uxth	r3, r3
 80130c0:	9503      	str	r5, [sp, #12]
 80130c2:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80130c6:	9507      	str	r5, [sp, #28]
 80130c8:	f340 809d 	ble.w	8013206 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80130cc:	1a52      	subs	r2, r2, r1
 80130ce:	4584      	cmp	ip, r0
 80130d0:	fa0f fe83 	sxth.w	lr, r3
 80130d4:	b292      	uxth	r2, r2
 80130d6:	b215      	sxth	r5, r2
 80130d8:	dd2f      	ble.n	801313a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80130da:	9e00      	ldr	r6, [sp, #0]
 80130dc:	fa1f fc8c 	uxth.w	ip, ip
 80130e0:	b280      	uxth	r0, r0
 80130e2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80130e6:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 80130ea:	9e03      	ldr	r6, [sp, #12]
 80130ec:	ebac 0300 	sub.w	r3, ip, r0
 80130f0:	448c      	add	ip, r1
 80130f2:	eba6 060e 	sub.w	r6, r6, lr
 80130f6:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80130fa:	b29b      	uxth	r3, r3
 80130fc:	4470      	add	r0, lr
 80130fe:	fa0f fc8c 	sxth.w	ip, ip
 8013102:	b21c      	sxth	r4, r3
 8013104:	b200      	sxth	r0, r0
 8013106:	4366      	muls	r6, r4
 8013108:	ebac 0000 	sub.w	r0, ip, r0
 801310c:	4368      	muls	r0, r5
 801310e:	4286      	cmp	r6, r0
 8013110:	db09      	blt.n	8013126 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8013112:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8013116:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801311a:	4417      	add	r7, r2
 801311c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013120:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8013124:	e685      	b.n	8012e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013126:	440b      	add	r3, r1
 8013128:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801312c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013130:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8013134:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013138:	e67b      	b.n	8012e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801313a:	9e03      	ldr	r6, [sp, #12]
 801313c:	45b6      	cmp	lr, r6
 801313e:	da28      	bge.n	8013192 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8013140:	9b00      	ldr	r3, [sp, #0]
 8013142:	eba6 060e 	sub.w	r6, r6, lr
 8013146:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801314a:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801314e:	eb04 030c 	add.w	r3, r4, ip
 8013152:	fa1f f883 	uxth.w	r8, r3
 8013156:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801315a:	4403      	add	r3, r0
 801315c:	fa0f f988 	sxth.w	r9, r8
 8013160:	eba0 000c 	sub.w	r0, r0, ip
 8013164:	eba3 0308 	sub.w	r3, r3, r8
 8013168:	4368      	muls	r0, r5
 801316a:	b29b      	uxth	r3, r3
 801316c:	fa0f f883 	sxth.w	r8, r3
 8013170:	fb08 f606 	mul.w	r6, r8, r6
 8013174:	42b0      	cmp	r0, r6
 8013176:	dc06      	bgt.n	8013186 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8013178:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801317c:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8013180:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8013184:	e7c9      	b.n	801311a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8013186:	4423      	add	r3, r4
 8013188:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801318c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013190:	e64f      	b.n	8012e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013192:	eba3 0309 	sub.w	r3, r3, r9
 8013196:	9807      	ldr	r0, [sp, #28]
 8013198:	b29b      	uxth	r3, r3
 801319a:	2806      	cmp	r0, #6
 801319c:	fa0f fc83 	sxth.w	ip, r3
 80131a0:	d818      	bhi.n	80131d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 80131a2:	4652      	mov	r2, sl
 80131a4:	ab0a      	add	r3, sp, #40	; 0x28
 80131a6:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 80131aa:	6851      	ldr	r1, [r2, #4]
 80131ac:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 80131b0:	c303      	stmia	r3!, {r0, r1}
 80131b2:	9b03      	ldr	r3, [sp, #12]
 80131b4:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 80131b8:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80131bc:	ab0a      	add	r3, sp, #40	; 0x28
 80131be:	9801      	ldr	r0, [sp, #4]
 80131c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80131c4:	f7ff fe06 	bl	8012dd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80131c8:	9b00      	ldr	r3, [sp, #0]
 80131ca:	f1aa 0a08 	sub.w	sl, sl, #8
 80131ce:	3b01      	subs	r3, #1
 80131d0:	9300      	str	r3, [sp, #0]
 80131d2:	e747      	b.n	8013064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80131d4:	9800      	ldr	r0, [sp, #0]
 80131d6:	45ac      	cmp	ip, r5
 80131d8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80131dc:	db0c      	blt.n	80131f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 80131de:	4417      	add	r7, r2
 80131e0:	4458      	add	r0, fp
 80131e2:	f8ad 4020 	strh.w	r4, [sp, #32]
 80131e6:	b2bf      	uxth	r7, r7
 80131e8:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 80131ec:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80131f0:	440f      	add	r7, r1
 80131f2:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80131f6:	e61c      	b.n	8012e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80131f8:	4458      	add	r0, fp
 80131fa:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 80131fe:	443b      	add	r3, r7
 8013200:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013204:	e615      	b.n	8012e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013206:	fa1f f18c 	uxth.w	r1, ip
 801320a:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801320e:	b282      	uxth	r2, r0
 8013210:	4584      	cmp	ip, r0
 8013212:	eb01 0e05 	add.w	lr, r1, r5
 8013216:	9204      	str	r2, [sp, #16]
 8013218:	fa1f fe8e 	uxth.w	lr, lr
 801321c:	9e04      	ldr	r6, [sp, #16]
 801321e:	fa0f f28e 	sxth.w	r2, lr
 8013222:	9205      	str	r2, [sp, #20]
 8013224:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8013228:	4432      	add	r2, r6
 801322a:	b292      	uxth	r2, r2
 801322c:	9206      	str	r2, [sp, #24]
 801322e:	da26      	bge.n	801327e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8013230:	eba3 0309 	sub.w	r3, r3, r9
 8013234:	eba2 020e 	sub.w	r2, r2, lr
 8013238:	eba0 000c 	sub.w	r0, r0, ip
 801323c:	eba4 0408 	sub.w	r4, r4, r8
 8013240:	b29b      	uxth	r3, r3
 8013242:	b292      	uxth	r2, r2
 8013244:	fa0f fa83 	sxth.w	sl, r3
 8013248:	b211      	sxth	r1, r2
 801324a:	fb0a f000 	mul.w	r0, sl, r0
 801324e:	434c      	muls	r4, r1
 8013250:	42a0      	cmp	r0, r4
 8013252:	9800      	ldr	r0, [sp, #0]
 8013254:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8013258:	dc06      	bgt.n	8013268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801325a:	4458      	add	r0, fp
 801325c:	9a05      	ldr	r2, [sp, #20]
 801325e:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8013262:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8013266:	e7ca      	b.n	80131fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8013268:	eb0b 0300 	add.w	r3, fp, r0
 801326c:	9903      	ldr	r1, [sp, #12]
 801326e:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8013272:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8013276:	442a      	add	r2, r5
 8013278:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801327c:	e5d9      	b.n	8012e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801327e:	9e04      	ldr	r6, [sp, #16]
 8013280:	9a03      	ldr	r2, [sp, #12]
 8013282:	1b89      	subs	r1, r1, r6
 8013284:	b21e      	sxth	r6, r3
 8013286:	b289      	uxth	r1, r1
 8013288:	4296      	cmp	r6, r2
 801328a:	fa0f fc81 	sxth.w	ip, r1
 801328e:	dd25      	ble.n	80132dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8013290:	eba3 0309 	sub.w	r3, r3, r9
 8013294:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8013298:	9e05      	ldr	r6, [sp, #20]
 801329a:	eba4 0408 	sub.w	r4, r4, r8
 801329e:	b29b      	uxth	r3, r3
 80132a0:	eba6 0902 	sub.w	r9, r6, r2
 80132a4:	fb0c f404 	mul.w	r4, ip, r4
 80132a8:	b218      	sxth	r0, r3
 80132aa:	9a00      	ldr	r2, [sp, #0]
 80132ac:	fb00 f909 	mul.w	r9, r0, r9
 80132b0:	00d2      	lsls	r2, r2, #3
 80132b2:	454c      	cmp	r4, r9
 80132b4:	db03      	blt.n	80132be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 80132b6:	445a      	add	r2, fp
 80132b8:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 80132bc:	e79f      	b.n	80131fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80132be:	eb0b 0302 	add.w	r3, fp, r2
 80132c2:	9a03      	ldr	r2, [sp, #12]
 80132c4:	4429      	add	r1, r5
 80132c6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80132ca:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80132ce:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80132d2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80132d6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80132da:	e5aa      	b.n	8012e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80132dc:	9b06      	ldr	r3, [sp, #24]
 80132de:	9c07      	ldr	r4, [sp, #28]
 80132e0:	eba3 020e 	sub.w	r2, r3, lr
 80132e4:	2c06      	cmp	r4, #6
 80132e6:	b292      	uxth	r2, r2
 80132e8:	b213      	sxth	r3, r2
 80132ea:	d80d      	bhi.n	8013308 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 80132ec:	4651      	mov	r1, sl
 80132ee:	aa0a      	add	r2, sp, #40	; 0x28
 80132f0:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 80132f4:	6849      	ldr	r1, [r1, #4]
 80132f6:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 80132fa:	9b05      	ldr	r3, [sp, #20]
 80132fc:	c203      	stmia	r2!, {r0, r1}
 80132fe:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8013302:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8013306:	e759      	b.n	80131bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8013308:	9c00      	ldr	r4, [sp, #0]
 801330a:	4563      	cmp	r3, ip
 801330c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013310:	db0d      	blt.n	801332e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8013312:	4429      	add	r1, r5
 8013314:	9a04      	ldr	r2, [sp, #16]
 8013316:	445c      	add	r4, fp
 8013318:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801331c:	b289      	uxth	r1, r1
 801331e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8013322:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8013326:	4411      	add	r1, r2
 8013328:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801332c:	e581      	b.n	8012e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801332e:	445c      	add	r4, fp
 8013330:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8013334:	e79f      	b.n	8013276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8013336:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801333a:	2f07      	cmp	r7, #7
 801333c:	d806      	bhi.n	801334c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801333e:	ab08      	add	r3, sp, #32
 8013340:	9801      	ldr	r0, [sp, #4]
 8013342:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013346:	f7ff fd45 	bl	8012dd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801334a:	e5dc      	b.n	8012f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801334c:	f107 39ff 	add.w	r9, r7, #4294967295
 8013350:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8013354:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8013358:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801335c:	f04f 35ff 	mov.w	r5, #4294967295
 8013360:	2400      	movs	r4, #0
 8013362:	9304      	str	r3, [sp, #16]
 8013364:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8013368:	f109 32ff 	add.w	r2, r9, #4294967295
 801336c:	9300      	str	r3, [sp, #0]
 801336e:	4690      	mov	r8, r2
 8013370:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8013374:	9303      	str	r3, [sp, #12]
 8013376:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801337a:	f1b8 3fff 	cmp.w	r8, #4294967295
 801337e:	6818      	ldr	r0, [r3, #0]
 8013380:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8013384:	9206      	str	r2, [sp, #24]
 8013386:	bf16      	itet	ne
 8013388:	9904      	ldrne	r1, [sp, #16]
 801338a:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801338e:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8013392:	9305      	str	r3, [sp, #20]
 8013394:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013398:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801339c:	fb16 f601 	smulbb	r6, r6, r1
 80133a0:	6859      	ldr	r1, [r3, #4]
 80133a2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80133a6:	4671      	mov	r1, lr
 80133a8:	a80a      	add	r0, sp, #40	; 0x28
 80133aa:	f7ff fc51 	bl	8012c50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80133ae:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80133b2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80133b6:	9b03      	ldr	r3, [sp, #12]
 80133b8:	9a00      	ldr	r2, [sp, #0]
 80133ba:	fb11 f100 	smulbb	r1, r1, r0
 80133be:	2008      	movs	r0, #8
 80133c0:	fb02 6603 	mla	r6, r2, r3, r6
 80133c4:	1b8e      	subs	r6, r1, r6
 80133c6:	fb91 f1f0 	sdiv	r1, r1, r0
 80133ca:	42b1      	cmp	r1, r6
 80133cc:	dc21      	bgt.n	8013412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80133ce:	4556      	cmp	r6, sl
 80133d0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80133d4:	da03      	bge.n	80133de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 80133d6:	b1e6      	cbz	r6, 8013412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80133d8:	46b2      	mov	sl, r6
 80133da:	4645      	mov	r5, r8
 80133dc:	464c      	mov	r4, r9
 80133de:	f108 38ff 	add.w	r8, r8, #4294967295
 80133e2:	f118 0f02 	cmn.w	r8, #2
 80133e6:	d1c8      	bne.n	801337a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 80133e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80133ec:	f1a7 0708 	sub.w	r7, r7, #8
 80133f0:	4691      	mov	r9, r2
 80133f2:	d1b7      	bne.n	8013364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80133f4:	9b01      	ldr	r3, [sp, #4]
 80133f6:	b2a6      	uxth	r6, r4
 80133f8:	00e4      	lsls	r4, r4, #3
 80133fa:	1918      	adds	r0, r3, r4
 80133fc:	1c6b      	adds	r3, r5, #1
 80133fe:	d10b      	bne.n	8013418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8013400:	4601      	mov	r1, r0
 8013402:	9802      	ldr	r0, [sp, #8]
 8013404:	f7ff fc24 	bl	8012c50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013408:	4631      	mov	r1, r6
 801340a:	9801      	ldr	r0, [sp, #4]
 801340c:	f7ff fccc 	bl	8012da8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013410:	e50f      	b.n	8012e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013412:	4645      	mov	r5, r8
 8013414:	464c      	mov	r4, r9
 8013416:	e7ed      	b.n	80133f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8013418:	9b01      	ldr	r3, [sp, #4]
 801341a:	00ed      	lsls	r5, r5, #3
 801341c:	445c      	add	r4, fp
 801341e:	1959      	adds	r1, r3, r5
 8013420:	445d      	add	r5, fp
 8013422:	f7ff fc15 	bl	8012c50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013426:	9b02      	ldr	r3, [sp, #8]
 8013428:	cb03      	ldmia	r3!, {r0, r1}
 801342a:	9b02      	ldr	r3, [sp, #8]
 801342c:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8013430:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8013434:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8013438:	6861      	ldr	r1, [r4, #4]
 801343a:	c303      	stmia	r3!, {r0, r1}
 801343c:	e7e4      	b.n	8013408 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08013440 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8013440:	4b1d      	ldr	r3, [pc, #116]	; (80134b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8013442:	b530      	push	{r4, r5, lr}
 8013444:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013448:	b085      	sub	sp, #20
 801344a:	4b1c      	ldr	r3, [pc, #112]	; (80134bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801344c:	460c      	mov	r4, r1
 801344e:	2100      	movs	r1, #0
 8013450:	4605      	mov	r5, r0
 8013452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013456:	6820      	ldr	r0, [r4, #0]
 8013458:	9100      	str	r1, [sp, #0]
 801345a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801345e:	ab02      	add	r3, sp, #8
 8013460:	6861      	ldr	r1, [r4, #4]
 8013462:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013466:	c303      	stmia	r3!, {r0, r1}
 8013468:	4669      	mov	r1, sp
 801346a:	a802      	add	r0, sp, #8
 801346c:	f7fc fa50 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 8013470:	ab02      	add	r3, sp, #8
 8013472:	cb03      	ldmia	r3!, {r0, r1}
 8013474:	4b12      	ldr	r3, [pc, #72]	; (80134c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8013476:	6020      	str	r0, [r4, #0]
 8013478:	6818      	ldr	r0, [r3, #0]
 801347a:	6061      	str	r1, [r4, #4]
 801347c:	b138      	cbz	r0, 801348e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801347e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8013482:	b133      	cbz	r3, 8013492 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8013484:	6821      	ldr	r1, [r4, #0]
 8013486:	4628      	mov	r0, r5
 8013488:	6862      	ldr	r2, [r4, #4]
 801348a:	f7ff fcc5 	bl	8012e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801348e:	b005      	add	sp, #20
 8013490:	bd30      	pop	{r4, r5, pc}
 8013492:	6803      	ldr	r3, [r0, #0]
 8013494:	4621      	mov	r1, r4
 8013496:	689b      	ldr	r3, [r3, #8]
 8013498:	4798      	blx	r3
 801349a:	4b0a      	ldr	r3, [pc, #40]	; (80134c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801349c:	6818      	ldr	r0, [r3, #0]
 801349e:	b118      	cbz	r0, 80134a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80134a0:	6803      	ldr	r3, [r0, #0]
 80134a2:	4621      	mov	r1, r4
 80134a4:	689b      	ldr	r3, [r3, #8]
 80134a6:	4798      	blx	r3
 80134a8:	4b07      	ldr	r3, [pc, #28]	; (80134c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80134aa:	4621      	mov	r1, r4
 80134ac:	6818      	ldr	r0, [r3, #0]
 80134ae:	6803      	ldr	r3, [r0, #0]
 80134b0:	699b      	ldr	r3, [r3, #24]
 80134b2:	4798      	blx	r3
 80134b4:	e7eb      	b.n	801348e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80134b6:	bf00      	nop
 80134b8:	2000df64 	.word	0x2000df64
 80134bc:	2000df66 	.word	0x2000df66
 80134c0:	2000dfac 	.word	0x2000dfac
 80134c4:	2000dfa8 	.word	0x2000dfa8
 80134c8:	2000df70 	.word	0x2000df70

080134cc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80134cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d0:	4604      	mov	r4, r0
 80134d2:	b09b      	sub	sp, #108	; 0x6c
 80134d4:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80134d8:	b129      	cbz	r1, 80134e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80134da:	2300      	movs	r3, #0
 80134dc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80134e0:	b01b      	add	sp, #108	; 0x6c
 80134e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e6:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80134ea:	4630      	mov	r0, r6
 80134ec:	f7fc fa53 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 80134f0:	4605      	mov	r5, r0
 80134f2:	b940      	cbnz	r0, 8013506 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 80134f4:	4620      	mov	r0, r4
 80134f6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80134fa:	f7ff fc8d 	bl	8012e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80134fe:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8013502:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8013506:	4ba6      	ldr	r3, [pc, #664]	; (80137a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	b33b      	cbz	r3, 801355c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801350c:	4da5      	ldr	r5, [pc, #660]	; (80137a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801350e:	4628      	mov	r0, r5
 8013510:	f7fc fa41 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013514:	4606      	mov	r6, r0
 8013516:	bb08      	cbnz	r0, 801355c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8013518:	4628      	mov	r0, r5
 801351a:	f7ff f9df 	bl	80128dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801351e:	6829      	ldr	r1, [r5, #0]
 8013520:	686a      	ldr	r2, [r5, #4]
 8013522:	4620      	mov	r0, r4
 8013524:	f7ff fc78 	bl	8012e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013528:	802e      	strh	r6, [r5, #0]
 801352a:	806e      	strh	r6, [r5, #2]
 801352c:	80ae      	strh	r6, [r5, #4]
 801352e:	80ee      	strh	r6, [r5, #6]
 8013530:	4f9d      	ldr	r7, [pc, #628]	; (80137a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8013532:	a809      	add	r0, sp, #36	; 0x24
 8013534:	f7ff fbe3 	bl	8012cfe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013538:	883d      	ldrh	r5, [r7, #0]
 801353a:	462e      	mov	r6, r5
 801353c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8013540:	42b3      	cmp	r3, r6
 8013542:	d910      	bls.n	8013566 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8013544:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8013548:	3601      	adds	r6, #1
 801354a:	a809      	add	r0, sp, #36	; 0x24
 801354c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8013550:	b2b6      	uxth	r6, r6
 8013552:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8013556:	f7ff fc3d 	bl	8012dd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801355a:	e7ef      	b.n	801353c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801355c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8013560:	2b00      	cmp	r3, #0
 8013562:	d1e5      	bne.n	8013530 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8013564:	e7bc      	b.n	80134e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8013566:	462e      	mov	r6, r5
 8013568:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801356c:	42b3      	cmp	r3, r6
 801356e:	d90b      	bls.n	8013588 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8013570:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8013574:	3601      	adds	r6, #1
 8013576:	4620      	mov	r0, r4
 8013578:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801357c:	b2b6      	uxth	r6, r6
 801357e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8013582:	f7ff fc49 	bl	8012e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013586:	e7ef      	b.n	8013568 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8013588:	4a88      	ldr	r2, [pc, #544]	; (80137ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801358a:	6813      	ldr	r3, [r2, #0]
 801358c:	4690      	mov	r8, r2
 801358e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013592:	2b01      	cmp	r3, #1
 8013594:	f040 8094 	bne.w	80136c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8013598:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801359c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80135a0:	f04f 0900 	mov.w	r9, #0
 80135a4:	33aa      	adds	r3, #170	; 0xaa
 80135a6:	42a8      	cmp	r0, r5
 80135a8:	f103 0308 	add.w	r3, r3, #8
 80135ac:	dd0a      	ble.n	80135c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 80135ae:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80135b2:	3501      	adds	r5, #1
 80135b4:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80135b8:	440a      	add	r2, r1
 80135ba:	b212      	sxth	r2, r2
 80135bc:	4591      	cmp	r9, r2
 80135be:	bfb8      	it	lt
 80135c0:	4691      	movlt	r9, r2
 80135c2:	e7f0      	b.n	80135a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 80135c4:	4b7a      	ldr	r3, [pc, #488]	; (80137b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80135c6:	4e7b      	ldr	r6, [pc, #492]	; (80137b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80135c8:	881d      	ldrh	r5, [r3, #0]
 80135ca:	2300      	movs	r3, #0
 80135cc:	2d0f      	cmp	r5, #15
 80135ce:	bf8c      	ite	hi
 80135d0:	08ed      	lsrhi	r5, r5, #3
 80135d2:	2501      	movls	r5, #1
 80135d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80135d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80135dc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80135e0:	f8d8 0000 	ldr.w	r0, [r8]
 80135e4:	440b      	add	r3, r1
 80135e6:	6802      	ldr	r2, [r0, #0]
 80135e8:	b21b      	sxth	r3, r3
 80135ea:	4599      	cmp	r9, r3
 80135ec:	dd4b      	ble.n	8013686 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 80135ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80135f2:	4798      	blx	r3
 80135f4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80135f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80135fc:	4413      	add	r3, r2
 80135fe:	b21b      	sxth	r3, r3
 8013600:	195a      	adds	r2, r3, r5
 8013602:	4290      	cmp	r0, r2
 8013604:	da07      	bge.n	8013616 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8013606:	4581      	cmp	r9, r0
 8013608:	dd05      	ble.n	8013616 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801360a:	4298      	cmp	r0, r3
 801360c:	da33      	bge.n	8013676 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801360e:	2b00      	cmp	r3, #0
 8013610:	dd31      	ble.n	8013676 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8013612:	4648      	mov	r0, r9
 8013614:	e004      	b.n	8013620 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8013616:	4298      	cmp	r0, r3
 8013618:	dbfb      	blt.n	8013612 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801361a:	4548      	cmp	r0, r9
 801361c:	bfa8      	it	ge
 801361e:	4648      	movge	r0, r9
 8013620:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013624:	2100      	movs	r1, #0
 8013626:	1ac0      	subs	r0, r0, r3
 8013628:	f8b7 a000 	ldrh.w	sl, [r7]
 801362c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013630:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013634:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013638:	f8ad 001a 	strh.w	r0, [sp, #26]
 801363c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8013640:	4553      	cmp	r3, sl
 8013642:	d9c9      	bls.n	80135d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8013644:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8013648:	ab07      	add	r3, sp, #28
 801364a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801364e:	6851      	ldr	r1, [r2, #4]
 8013650:	c303      	stmia	r3!, {r0, r1}
 8013652:	a807      	add	r0, sp, #28
 8013654:	a905      	add	r1, sp, #20
 8013656:	f7fc f95b 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 801365a:	a807      	add	r0, sp, #28
 801365c:	f7fc f99b 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013660:	b920      	cbnz	r0, 801366c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8013662:	6823      	ldr	r3, [r4, #0]
 8013664:	a907      	add	r1, sp, #28
 8013666:	4620      	mov	r0, r4
 8013668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801366a:	4798      	blx	r3
 801366c:	f10a 0a01 	add.w	sl, sl, #1
 8013670:	fa1f fa8a 	uxth.w	sl, sl
 8013674:	e7e2      	b.n	801363c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8013676:	f8d8 0000 	ldr.w	r0, [r8]
 801367a:	2101      	movs	r1, #1
 801367c:	6803      	ldr	r3, [r0, #0]
 801367e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013682:	4798      	blx	r3
 8013684:	e7a8      	b.n	80135d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8013686:	6a13      	ldr	r3, [r2, #32]
 8013688:	4798      	blx	r3
 801368a:	4b4b      	ldr	r3, [pc, #300]	; (80137b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801368c:	781b      	ldrb	r3, [r3, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	f43f af26 	beq.w	80134e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8013694:	2300      	movs	r3, #0
 8013696:	883d      	ldrh	r5, [r7, #0]
 8013698:	34ea      	adds	r4, #234	; 0xea
 801369a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801369e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80136a2:	42ab      	cmp	r3, r5
 80136a4:	f67f af1c 	bls.w	80134e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80136a8:	ab1a      	add	r3, sp, #104	; 0x68
 80136aa:	4620      	mov	r0, r4
 80136ac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80136b0:	3501      	adds	r5, #1
 80136b2:	3b44      	subs	r3, #68	; 0x44
 80136b4:	b2ad      	uxth	r5, r5
 80136b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80136ba:	f7ff fb8b 	bl	8012dd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80136be:	e7ee      	b.n	801369e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 80136c0:	2b02      	cmp	r3, #2
 80136c2:	f040 813d 	bne.w	8013940 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 80136c6:	4b3d      	ldr	r3, [pc, #244]	; (80137bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	2b01      	cmp	r3, #1
 80136cc:	d02c      	beq.n	8013728 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 80136ce:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 80136d2:	883a      	ldrh	r2, [r7, #0]
 80136d4:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80136d8:	3201      	adds	r2, #1
 80136da:	b292      	uxth	r2, r2
 80136dc:	2900      	cmp	r1, #0
 80136de:	d0d4      	beq.n	801368a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80136e0:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80136e4:	4610      	mov	r0, r2
 80136e6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80136ea:	f04f 0a00 	mov.w	sl, #0
 80136ee:	441d      	add	r5, r3
 80136f0:	b22d      	sxth	r5, r5
 80136f2:	b283      	uxth	r3, r0
 80136f4:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 80136f8:	4299      	cmp	r1, r3
 80136fa:	f240 80c3 	bls.w	8013884 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 80136fe:	4426      	add	r6, r4
 8013700:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8013704:	4684      	mov	ip, r0
 8013706:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801370a:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801370e:	4573      	cmp	r3, lr
 8013710:	f340 80a5 	ble.w	801385e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8013714:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8013718:	4475      	add	r5, lr
 801371a:	b22d      	sxth	r5, r5
 801371c:	429d      	cmp	r5, r3
 801371e:	bfa8      	it	ge
 8013720:	461d      	movge	r5, r3
 8013722:	3001      	adds	r0, #1
 8013724:	46e2      	mov	sl, ip
 8013726:	e7e4      	b.n	80136f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8013728:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801372c:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8013730:	f1bb 0f00 	cmp.w	fp, #0
 8013734:	d0a9      	beq.n	801368a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8013736:	883b      	ldrh	r3, [r7, #0]
 8013738:	2600      	movs	r6, #0
 801373a:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801373e:	3301      	adds	r3, #1
 8013740:	b29b      	uxth	r3, r3
 8013742:	b299      	uxth	r1, r3
 8013744:	00f5      	lsls	r5, r6, #3
 8013746:	458b      	cmp	fp, r1
 8013748:	d93a      	bls.n	80137c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801374a:	4425      	add	r5, r4
 801374c:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8013750:	469c      	mov	ip, r3
 8013752:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8013756:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801375a:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801375e:	4408      	add	r0, r1
 8013760:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8013764:	4471      	add	r1, lr
 8013766:	b200      	sxth	r0, r0
 8013768:	b209      	sxth	r1, r1
 801376a:	4288      	cmp	r0, r1
 801376c:	da06      	bge.n	801377c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801376e:	4586      	cmp	lr, r0
 8013770:	4672      	mov	r2, lr
 8013772:	bfb8      	it	lt
 8013774:	4602      	movlt	r2, r0
 8013776:	3301      	adds	r3, #1
 8013778:	4666      	mov	r6, ip
 801377a:	e7e2      	b.n	8013742 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801377c:	d10b      	bne.n	8013796 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801377e:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8013782:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8013786:	458c      	cmp	ip, r1
 8013788:	bfb4      	ite	lt
 801378a:	469c      	movlt	ip, r3
 801378c:	46b4      	movge	ip, r6
 801378e:	4572      	cmp	r2, lr
 8013790:	bfb8      	it	lt
 8013792:	4672      	movlt	r2, lr
 8013794:	e7ef      	b.n	8013776 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8013796:	428a      	cmp	r2, r1
 8013798:	46b4      	mov	ip, r6
 801379a:	bfb8      	it	lt
 801379c:	460a      	movlt	r2, r1
 801379e:	e7ea      	b.n	8013776 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80137a0:	2000dfa8 	.word	0x2000dfa8
 80137a4:	2000dfb4 	.word	0x2000dfb4
 80137a8:	2000001c 	.word	0x2000001c
 80137ac:	2000df70 	.word	0x2000df70
 80137b0:	2000df66 	.word	0x2000df66
 80137b4:	2000df64 	.word	0x2000df64
 80137b8:	2000df6e 	.word	0x2000df6e
 80137bc:	2000df68 	.word	0x2000df68
 80137c0:	1961      	adds	r1, r4, r5
 80137c2:	ab07      	add	r3, sp, #28
 80137c4:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80137c8:	6849      	ldr	r1, [r1, #4]
 80137ca:	c303      	stmia	r3!, {r0, r1}
 80137cc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80137d0:	a807      	add	r0, sp, #28
 80137d2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80137d6:	2b13      	cmp	r3, #19
 80137d8:	440b      	add	r3, r1
 80137da:	bfd8      	it	le
 80137dc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80137e0:	1a9b      	subs	r3, r3, r2
 80137e2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80137e6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80137ea:	f7ff f8ed 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80137ee:	a807      	add	r0, sp, #28
 80137f0:	f7fc f8d1 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 80137f4:	2800      	cmp	r0, #0
 80137f6:	d199      	bne.n	801372c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80137f8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80137fc:	4425      	add	r5, r4
 80137fe:	f8d8 0000 	ldr.w	r0, [r8]
 8013802:	f1bc 0f14 	cmp.w	ip, #20
 8013806:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801380a:	f8d0 e000 	ldr.w	lr, [r0]
 801380e:	bfa8      	it	ge
 8013810:	f04f 0c14 	movge.w	ip, #20
 8013814:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013818:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801381c:	fa1f fc8c 	uxth.w	ip, ip
 8013820:	f8cd c000 	str.w	ip, [sp]
 8013824:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 8013828:	47d0      	blx	sl
 801382a:	4682      	mov	sl, r0
 801382c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8013830:	a807      	add	r0, sp, #28
 8013832:	f7ff f853 	bl	80128dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013836:	6823      	ldr	r3, [r4, #0]
 8013838:	4620      	mov	r0, r4
 801383a:	a907      	add	r1, sp, #28
 801383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801383e:	4798      	blx	r3
 8013840:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8013844:	eba0 000a 	sub.w	r0, r0, sl
 8013848:	b200      	sxth	r0, r0
 801384a:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801384e:	2800      	cmp	r0, #0
 8013850:	f47f af6c 	bne.w	801372c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8013854:	b2b1      	uxth	r1, r6
 8013856:	4648      	mov	r0, r9
 8013858:	f7ff faa6 	bl	8012da8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801385c:	e766      	b.n	801372c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801385e:	d10c      	bne.n	801387a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8013860:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8013864:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8013868:	45b4      	cmp	ip, r6
 801386a:	bfb4      	ite	lt
 801386c:	4684      	movlt	ip, r0
 801386e:	46d4      	movge	ip, sl
 8013870:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8013874:	4433      	add	r3, r6
 8013876:	b21b      	sxth	r3, r3
 8013878:	e750      	b.n	801371c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801387a:	4575      	cmp	r5, lr
 801387c:	46d4      	mov	ip, sl
 801387e:	bfa8      	it	ge
 8013880:	4675      	movge	r5, lr
 8013882:	e74e      	b.n	8013722 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8013884:	eb0b 0006 	add.w	r0, fp, r6
 8013888:	4426      	add	r6, r4
 801388a:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801388e:	f1b9 0f13 	cmp.w	r9, #19
 8013892:	bfdc      	itt	le
 8013894:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8013898:	444d      	addle	r5, r9
 801389a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801389e:	bfd8      	it	le
 80138a0:	b22d      	sxthle	r5, r5
 80138a2:	f7fc f878 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 80138a6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80138aa:	2800      	cmp	r0, #0
 80138ac:	f47f af16 	bne.w	80136dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 80138b0:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 80138b4:	fa1f f989 	uxth.w	r9, r9
 80138b8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80138bc:	eba5 050c 	sub.w	r5, r5, ip
 80138c0:	fa1f f28c 	uxth.w	r2, ip
 80138c4:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 80138c8:	eb02 0009 	add.w	r0, r2, r9
 80138cc:	2d14      	cmp	r5, #20
 80138ce:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 80138d2:	bfa8      	it	ge
 80138d4:	2514      	movge	r5, #20
 80138d6:	b200      	sxth	r0, r0
 80138d8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80138dc:	b289      	uxth	r1, r1
 80138de:	fa1f fe85 	uxth.w	lr, r5
 80138e2:	eba0 000c 	sub.w	r0, r0, ip
 80138e6:	f8ad c01e 	strh.w	ip, [sp, #30]
 80138ea:	4586      	cmp	lr, r0
 80138ec:	f8d8 0000 	ldr.w	r0, [r8]
 80138f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80138f4:	b29b      	uxth	r3, r3
 80138f6:	bfb8      	it	lt
 80138f8:	46f1      	movlt	r9, lr
 80138fa:	6805      	ldr	r5, [r0, #0]
 80138fc:	f8cd 9000 	str.w	r9, [sp]
 8013900:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 8013904:	47a8      	blx	r5
 8013906:	6823      	ldr	r3, [r4, #0]
 8013908:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801390c:	a907      	add	r1, sp, #28
 801390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013910:	4620      	mov	r0, r4
 8013912:	4798      	blx	r3
 8013914:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8013918:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801391c:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8013920:	1a5b      	subs	r3, r3, r1
 8013922:	440a      	add	r2, r1
 8013924:	b21b      	sxth	r3, r3
 8013926:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801392a:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801392e:	2b00      	cmp	r3, #0
 8013930:	f47f aecf 	bne.w	80136d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8013934:	fa1f f18a 	uxth.w	r1, sl
 8013938:	4658      	mov	r0, fp
 801393a:	f7ff fa35 	bl	8012da8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801393e:	e6c8      	b.n	80136d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8013940:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8013944:	42ab      	cmp	r3, r5
 8013946:	f67f aea0 	bls.w	801368a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801394a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801394e:	ab07      	add	r3, sp, #28
 8013950:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8013954:	6851      	ldr	r1, [r2, #4]
 8013956:	c303      	stmia	r3!, {r0, r1}
 8013958:	a807      	add	r0, sp, #28
 801395a:	f7fc f81c 	bl	800f996 <_ZNK8touchgfx4Rect7isEmptyEv>
 801395e:	b920      	cbnz	r0, 801396a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8013960:	6823      	ldr	r3, [r4, #0]
 8013962:	a907      	add	r1, sp, #28
 8013964:	4620      	mov	r0, r4
 8013966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013968:	4798      	blx	r3
 801396a:	3501      	adds	r5, #1
 801396c:	b2ad      	uxth	r5, r5
 801396e:	e7e7      	b.n	8013940 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08013970 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013970:	4b03      	ldr	r3, [pc, #12]	; (8013980 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013972:	2200      	movs	r2, #0
 8013974:	801a      	strh	r2, [r3, #0]
 8013976:	805a      	strh	r2, [r3, #2]
 8013978:	809a      	strh	r2, [r3, #4]
 801397a:	80da      	strh	r2, [r3, #6]
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop
 8013980:	2000dfb4 	.word	0x2000dfb4

08013984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013988:	b09b      	sub	sp, #108	; 0x6c
 801398a:	4606      	mov	r6, r0
 801398c:	4614      	mov	r4, r2
 801398e:	468a      	mov	sl, r1
 8013990:	a803      	add	r0, sp, #12
 8013992:	461d      	mov	r5, r3
 8013994:	f000 fdf7 	bl	8014586 <_ZN8touchgfx12TextProviderC1Ev>
 8013998:	6833      	ldr	r3, [r6, #0]
 801399a:	4630      	mov	r0, r6
 801399c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80139a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139a2:	4798      	blx	r3
 80139a4:	6833      	ldr	r3, [r6, #0]
 80139a6:	4607      	mov	r7, r0
 80139a8:	4630      	mov	r0, r6
 80139aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80139ac:	4798      	blx	r3
 80139ae:	462a      	mov	r2, r5
 80139b0:	2500      	movs	r5, #0
 80139b2:	4621      	mov	r1, r4
 80139b4:	9000      	str	r0, [sp, #0]
 80139b6:	463b      	mov	r3, r7
 80139b8:	462c      	mov	r4, r5
 80139ba:	46a9      	mov	r9, r5
 80139bc:	46a8      	mov	r8, r5
 80139be:	a803      	add	r0, sp, #12
 80139c0:	f000 fe2e 	bl	8014620 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80139c4:	2300      	movs	r3, #0
 80139c6:	9302      	str	r3, [sp, #8]
 80139c8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80139cc:	429c      	cmp	r4, r3
 80139ce:	d002      	beq.n	80139d6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80139d0:	455c      	cmp	r4, fp
 80139d2:	bf18      	it	ne
 80139d4:	4625      	movne	r5, r4
 80139d6:	ab02      	add	r3, sp, #8
 80139d8:	4632      	mov	r2, r6
 80139da:	4651      	mov	r1, sl
 80139dc:	a803      	add	r0, sp, #12
 80139de:	f001 f91b 	bl	8014c18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80139e2:	4604      	mov	r4, r0
 80139e4:	b108      	cbz	r0, 80139ea <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80139e6:	280a      	cmp	r0, #10
 80139e8:	d10a      	bne.n	8013a00 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80139ea:	45c1      	cmp	r9, r8
 80139ec:	bf38      	it	cc
 80139ee:	46c1      	movcc	r9, r8
 80139f0:	f04f 0800 	mov.w	r8, #0
 80139f4:	2c00      	cmp	r4, #0
 80139f6:	d1e5      	bne.n	80139c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80139f8:	4648      	mov	r0, r9
 80139fa:	b01b      	add	sp, #108	; 0x6c
 80139fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a00:	9a02      	ldr	r2, [sp, #8]
 8013a02:	2a00      	cmp	r2, #0
 8013a04:	d0de      	beq.n	80139c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013a06:	7b57      	ldrb	r7, [r2, #13]
 8013a08:	4629      	mov	r1, r5
 8013a0a:	6833      	ldr	r3, [r6, #0]
 8013a0c:	007f      	lsls	r7, r7, #1
 8013a0e:	8894      	ldrh	r4, [r2, #4]
 8013a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a12:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8013a16:	7a97      	ldrb	r7, [r2, #10]
 8013a18:	4307      	orrs	r7, r0
 8013a1a:	4630      	mov	r0, r6
 8013a1c:	4798      	blx	r3
 8013a1e:	4438      	add	r0, r7
 8013a20:	4480      	add	r8, r0
 8013a22:	fa1f f888 	uxth.w	r8, r8
 8013a26:	e7e5      	b.n	80139f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08013a28 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8013a28:	b508      	push	{r3, lr}
 8013a2a:	6803      	ldr	r3, [r0, #0]
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	4798      	blx	r3
 8013a30:	b128      	cbz	r0, 8013a3e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8013a32:	7b43      	ldrb	r3, [r0, #13]
 8013a34:	7a80      	ldrb	r0, [r0, #10]
 8013a36:	005b      	lsls	r3, r3, #1
 8013a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a3c:	4318      	orrs	r0, r3
 8013a3e:	bd08      	pop	{r3, pc}

08013a40 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013a40:	b40e      	push	{r1, r2, r3}
 8013a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a44:	b09c      	sub	sp, #112	; 0x70
 8013a46:	4605      	mov	r5, r0
 8013a48:	ab21      	add	r3, sp, #132	; 0x84
 8013a4a:	a805      	add	r0, sp, #20
 8013a4c:	f853 4b04 	ldr.w	r4, [r3], #4
 8013a50:	9303      	str	r3, [sp, #12]
 8013a52:	f000 fd98 	bl	8014586 <_ZN8touchgfx12TextProviderC1Ev>
 8013a56:	682b      	ldr	r3, [r5, #0]
 8013a58:	4628      	mov	r0, r5
 8013a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a5c:	4798      	blx	r3
 8013a5e:	682b      	ldr	r3, [r5, #0]
 8013a60:	4606      	mov	r6, r0
 8013a62:	4628      	mov	r0, r5
 8013a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a66:	4798      	blx	r3
 8013a68:	4633      	mov	r3, r6
 8013a6a:	4621      	mov	r1, r4
 8013a6c:	ae1c      	add	r6, sp, #112	; 0x70
 8013a6e:	2400      	movs	r4, #0
 8013a70:	9000      	str	r0, [sp, #0]
 8013a72:	9a03      	ldr	r2, [sp, #12]
 8013a74:	a805      	add	r0, sp, #20
 8013a76:	f000 fdd3 	bl	8014620 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013a7a:	f846 4d60 	str.w	r4, [r6, #-96]!
 8013a7e:	462a      	mov	r2, r5
 8013a80:	4633      	mov	r3, r6
 8013a82:	4621      	mov	r1, r4
 8013a84:	a805      	add	r0, sp, #20
 8013a86:	f001 f8c7 	bl	8014c18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013a8a:	b300      	cbz	r0, 8013ace <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8013a8c:	280a      	cmp	r0, #10
 8013a8e:	d01a      	beq.n	8013ac6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013a90:	9f04      	ldr	r7, [sp, #16]
 8013a92:	b1c7      	cbz	r7, 8013ac6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013a94:	7b78      	ldrb	r0, [r7, #13]
 8013a96:	7a3b      	ldrb	r3, [r7, #8]
 8013a98:	00c1      	lsls	r1, r0, #3
 8013a9a:	88aa      	ldrh	r2, [r5, #4]
 8013a9c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013aa0:	4319      	orrs	r1, r3
 8013aa2:	0643      	lsls	r3, r0, #25
 8013aa4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8013aa8:	bf48      	it	mi
 8013aaa:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8013aae:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013ab2:	bf48      	it	mi
 8013ab4:	b219      	sxthmi	r1, r3
 8013ab6:	79fb      	ldrb	r3, [r7, #7]
 8013ab8:	4303      	orrs	r3, r0
 8013aba:	4413      	add	r3, r2
 8013abc:	1a5b      	subs	r3, r3, r1
 8013abe:	b29b      	uxth	r3, r3
 8013ac0:	42a3      	cmp	r3, r4
 8013ac2:	bfc8      	it	gt
 8013ac4:	b21c      	sxthgt	r4, r3
 8013ac6:	4633      	mov	r3, r6
 8013ac8:	462a      	mov	r2, r5
 8013aca:	2100      	movs	r1, #0
 8013acc:	e7da      	b.n	8013a84 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8013ace:	b2a0      	uxth	r0, r4
 8013ad0:	b01c      	add	sp, #112	; 0x70
 8013ad2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013ad6:	b003      	add	sp, #12
 8013ad8:	4770      	bx	lr

08013ada <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8013ada:	b40e      	push	{r1, r2, r3}
 8013adc:	b570      	push	{r4, r5, r6, lr}
 8013ade:	b09b      	sub	sp, #108	; 0x6c
 8013ae0:	4604      	mov	r4, r0
 8013ae2:	ab1f      	add	r3, sp, #124	; 0x7c
 8013ae4:	a803      	add	r0, sp, #12
 8013ae6:	f853 5b04 	ldr.w	r5, [r3], #4
 8013aea:	9302      	str	r3, [sp, #8]
 8013aec:	f000 fd4b 	bl	8014586 <_ZN8touchgfx12TextProviderC1Ev>
 8013af0:	6823      	ldr	r3, [r4, #0]
 8013af2:	4620      	mov	r0, r4
 8013af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013af6:	4798      	blx	r3
 8013af8:	6823      	ldr	r3, [r4, #0]
 8013afa:	4606      	mov	r6, r0
 8013afc:	4620      	mov	r0, r4
 8013afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b00:	2401      	movs	r4, #1
 8013b02:	4798      	blx	r3
 8013b04:	4633      	mov	r3, r6
 8013b06:	9000      	str	r0, [sp, #0]
 8013b08:	4629      	mov	r1, r5
 8013b0a:	9a02      	ldr	r2, [sp, #8]
 8013b0c:	a803      	add	r0, sp, #12
 8013b0e:	f000 fd87 	bl	8014620 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013b12:	a803      	add	r0, sp, #12
 8013b14:	f001 f978 	bl	8014e08 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013b18:	b2a3      	uxth	r3, r4
 8013b1a:	b138      	cbz	r0, 8013b2c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8013b1c:	280a      	cmp	r0, #10
 8013b1e:	a803      	add	r0, sp, #12
 8013b20:	bf04      	itt	eq
 8013b22:	3301      	addeq	r3, #1
 8013b24:	b21c      	sxtheq	r4, r3
 8013b26:	f001 f96f 	bl	8014e08 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013b2a:	e7f5      	b.n	8013b18 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	b01b      	add	sp, #108	; 0x6c
 8013b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b34:	b003      	add	sp, #12
 8013b36:	4770      	bx	lr

08013b38 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013b38:	b40e      	push	{r1, r2, r3}
 8013b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b3c:	b09c      	sub	sp, #112	; 0x70
 8013b3e:	4604      	mov	r4, r0
 8013b40:	ab21      	add	r3, sp, #132	; 0x84
 8013b42:	a805      	add	r0, sp, #20
 8013b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b48:	9303      	str	r3, [sp, #12]
 8013b4a:	f000 fd1c 	bl	8014586 <_ZN8touchgfx12TextProviderC1Ev>
 8013b4e:	6823      	ldr	r3, [r4, #0]
 8013b50:	4620      	mov	r0, r4
 8013b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b54:	4798      	blx	r3
 8013b56:	6823      	ldr	r3, [r4, #0]
 8013b58:	4606      	mov	r6, r0
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b5e:	4798      	blx	r3
 8013b60:	4633      	mov	r3, r6
 8013b62:	4629      	mov	r1, r5
 8013b64:	9000      	str	r0, [sp, #0]
 8013b66:	9a03      	ldr	r2, [sp, #12]
 8013b68:	a805      	add	r0, sp, #20
 8013b6a:	f000 fd59 	bl	8014620 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013b6e:	ad1c      	add	r5, sp, #112	; 0x70
 8013b70:	2100      	movs	r1, #0
 8013b72:	26ff      	movs	r6, #255	; 0xff
 8013b74:	4622      	mov	r2, r4
 8013b76:	a805      	add	r0, sp, #20
 8013b78:	f845 1d60 	str.w	r1, [r5, #-96]!
 8013b7c:	462b      	mov	r3, r5
 8013b7e:	f001 f84b 	bl	8014c18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013b82:	b1d8      	cbz	r0, 8013bbc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8013b84:	280a      	cmp	r0, #10
 8013b86:	d012      	beq.n	8013bae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8013b88:	9804      	ldr	r0, [sp, #16]
 8013b8a:	b180      	cbz	r0, 8013bae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8013b8c:	7b47      	ldrb	r7, [r0, #13]
 8013b8e:	7922      	ldrb	r2, [r4, #4]
 8013b90:	00fb      	lsls	r3, r7, #3
 8013b92:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013b96:	7a03      	ldrb	r3, [r0, #8]
 8013b98:	430b      	orrs	r3, r1
 8013b9a:	0679      	lsls	r1, r7, #25
 8013b9c:	bf44      	itt	mi
 8013b9e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013ba2:	b21b      	sxthmi	r3, r3
 8013ba4:	1ad3      	subs	r3, r2, r3
 8013ba6:	b2db      	uxtb	r3, r3
 8013ba8:	429e      	cmp	r6, r3
 8013baa:	bf28      	it	cs
 8013bac:	461e      	movcs	r6, r3
 8013bae:	462b      	mov	r3, r5
 8013bb0:	4622      	mov	r2, r4
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	a805      	add	r0, sp, #20
 8013bb6:	f001 f82f 	bl	8014c18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013bba:	e7e2      	b.n	8013b82 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8013bbc:	4630      	mov	r0, r6
 8013bbe:	b01c      	add	sp, #112	; 0x70
 8013bc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013bc4:	b003      	add	sp, #12
 8013bc6:	4770      	bx	lr

08013bc8 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8013bc8:	b513      	push	{r0, r1, r4, lr}
 8013bca:	1d01      	adds	r1, r0, #4
 8013bcc:	4603      	mov	r3, r0
 8013bce:	466a      	mov	r2, sp
 8013bd0:	c903      	ldmia	r1, {r0, r1}
 8013bd2:	e882 0003 	stmia.w	r2, {r0, r1}
 8013bd6:	2100      	movs	r1, #0
 8013bd8:	4618      	mov	r0, r3
 8013bda:	9100      	str	r1, [sp, #0]
 8013bdc:	6819      	ldr	r1, [r3, #0]
 8013bde:	690c      	ldr	r4, [r1, #16]
 8013be0:	4611      	mov	r1, r2
 8013be2:	47a0      	blx	r4
 8013be4:	b002      	add	sp, #8
 8013be6:	bd10      	pop	{r4, pc}

08013be8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8013be8:	b538      	push	{r3, r4, r5, lr}
 8013bea:	680b      	ldr	r3, [r1, #0]
 8013bec:	460c      	mov	r4, r1
 8013bee:	4605      	mov	r5, r0
 8013bf0:	68db      	ldr	r3, [r3, #12]
 8013bf2:	4798      	blx	r3
 8013bf4:	6823      	ldr	r3, [r4, #0]
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	4629      	mov	r1, r5
 8013bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bfc:	4798      	blx	r3
 8013bfe:	4628      	mov	r0, r5
 8013c00:	bd38      	pop	{r3, r4, r5, pc}

08013c02 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8013c02:	b410      	push	{r4}
 8013c04:	880a      	ldrh	r2, [r1, #0]
 8013c06:	8884      	ldrh	r4, [r0, #4]
 8013c08:	4422      	add	r2, r4
 8013c0a:	800a      	strh	r2, [r1, #0]
 8013c0c:	884a      	ldrh	r2, [r1, #2]
 8013c0e:	88c4      	ldrh	r4, [r0, #6]
 8013c10:	4422      	add	r2, r4
 8013c12:	804a      	strh	r2, [r1, #2]
 8013c14:	6940      	ldr	r0, [r0, #20]
 8013c16:	b120      	cbz	r0, 8013c22 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8013c18:	6803      	ldr	r3, [r0, #0]
 8013c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c20:	4718      	bx	r3
 8013c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c26:	4770      	bx	lr

08013c28 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	b085      	sub	sp, #20
 8013c2e:	4604      	mov	r4, r0
 8013c30:	b901      	cbnz	r1, 8013c34 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8013c32:	b322      	cbz	r2, 8013c7e <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 8013c34:	1d27      	adds	r7, r4, #4
 8013c36:	466e      	mov	r6, sp
 8013c38:	88e5      	ldrh	r5, [r4, #6]
 8013c3a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013c3e:	442a      	add	r2, r5
 8013c40:	e886 0003 	stmia.w	r6, {r0, r1}
 8013c44:	88a1      	ldrh	r1, [r4, #4]
 8013c46:	4620      	mov	r0, r4
 8013c48:	b215      	sxth	r5, r2
 8013c4a:	4419      	add	r1, r3
 8013c4c:	6823      	ldr	r3, [r4, #0]
 8013c4e:	b209      	sxth	r1, r1
 8013c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c52:	4798      	blx	r3
 8013c54:	6823      	ldr	r3, [r4, #0]
 8013c56:	4629      	mov	r1, r5
 8013c58:	4620      	mov	r0, r4
 8013c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c5c:	ad02      	add	r5, sp, #8
 8013c5e:	4798      	blx	r3
 8013c60:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013c64:	e885 0003 	stmia.w	r5, {r0, r1}
 8013c68:	6960      	ldr	r0, [r4, #20]
 8013c6a:	b150      	cbz	r0, 8013c82 <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8013c6c:	6803      	ldr	r3, [r0, #0]
 8013c6e:	4631      	mov	r1, r6
 8013c70:	691b      	ldr	r3, [r3, #16]
 8013c72:	4798      	blx	r3
 8013c74:	6960      	ldr	r0, [r4, #20]
 8013c76:	6803      	ldr	r3, [r0, #0]
 8013c78:	691b      	ldr	r3, [r3, #16]
 8013c7a:	4629      	mov	r1, r5
 8013c7c:	4798      	blx	r3
 8013c7e:	b005      	add	sp, #20
 8013c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c82:	f7ff f82b 	bl	8012cdc <_ZN8touchgfx11Application11getInstanceEv>
 8013c86:	6803      	ldr	r3, [r0, #0]
 8013c88:	4631      	mov	r1, r6
 8013c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c8c:	4798      	blx	r3
 8013c8e:	f7ff f825 	bl	8012cdc <_ZN8touchgfx11Application11getInstanceEv>
 8013c92:	6803      	ldr	r3, [r0, #0]
 8013c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c96:	e7f0      	b.n	8013c7a <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08013c98 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c9a:	8882      	ldrh	r2, [r0, #4]
 8013c9c:	4605      	mov	r5, r0
 8013c9e:	880b      	ldrh	r3, [r1, #0]
 8013ca0:	460c      	mov	r4, r1
 8013ca2:	4413      	add	r3, r2
 8013ca4:	800b      	strh	r3, [r1, #0]
 8013ca6:	884b      	ldrh	r3, [r1, #2]
 8013ca8:	88c2      	ldrh	r2, [r0, #6]
 8013caa:	4413      	add	r3, r2
 8013cac:	4602      	mov	r2, r0
 8013cae:	804b      	strh	r3, [r1, #2]
 8013cb0:	466b      	mov	r3, sp
 8013cb2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013cb6:	6851      	ldr	r1, [r2, #4]
 8013cb8:	c303      	stmia	r3!, {r0, r1}
 8013cba:	4621      	mov	r1, r4
 8013cbc:	4668      	mov	r0, sp
 8013cbe:	f7fb fe27 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 8013cc2:	466b      	mov	r3, sp
 8013cc4:	cb03      	ldmia	r3!, {r0, r1}
 8013cc6:	6020      	str	r0, [r4, #0]
 8013cc8:	6061      	str	r1, [r4, #4]
 8013cca:	6968      	ldr	r0, [r5, #20]
 8013ccc:	b128      	cbz	r0, 8013cda <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8013cce:	6803      	ldr	r3, [r0, #0]
 8013cd0:	691b      	ldr	r3, [r3, #16]
 8013cd2:	4621      	mov	r1, r4
 8013cd4:	4798      	blx	r3
 8013cd6:	b003      	add	sp, #12
 8013cd8:	bd30      	pop	{r4, r5, pc}
 8013cda:	f7fe ffff 	bl	8012cdc <_ZN8touchgfx11Application11getInstanceEv>
 8013cde:	6803      	ldr	r3, [r0, #0]
 8013ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ce2:	e7f6      	b.n	8013cd2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08013ce4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8013ce4:	b570      	push	{r4, r5, r6, lr}
 8013ce6:	8882      	ldrh	r2, [r0, #4]
 8013ce8:	460c      	mov	r4, r1
 8013cea:	880b      	ldrh	r3, [r1, #0]
 8013cec:	4605      	mov	r5, r0
 8013cee:	4413      	add	r3, r2
 8013cf0:	800b      	strh	r3, [r1, #0]
 8013cf2:	884b      	ldrh	r3, [r1, #2]
 8013cf4:	88c2      	ldrh	r2, [r0, #6]
 8013cf6:	4413      	add	r3, r2
 8013cf8:	804b      	strh	r3, [r1, #2]
 8013cfa:	1d01      	adds	r1, r0, #4
 8013cfc:	4620      	mov	r0, r4
 8013cfe:	f7fb fe07 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 8013d02:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	dd0b      	ble.n	8013d22 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013d0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	dd07      	ble.n	8013d22 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013d12:	6968      	ldr	r0, [r5, #20]
 8013d14:	b128      	cbz	r0, 8013d22 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013d16:	6803      	ldr	r3, [r0, #0]
 8013d18:	4621      	mov	r1, r4
 8013d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d20:	4718      	bx	r3
 8013d22:	bd70      	pop	{r4, r5, r6, pc}

08013d24 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013d24:	b510      	push	{r4, lr}
 8013d26:	2300      	movs	r3, #0
 8013d28:	4604      	mov	r4, r0
 8013d2a:	4608      	mov	r0, r1
 8013d2c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013d30:	8023      	strh	r3, [r4, #0]
 8013d32:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013d36:	8063      	strh	r3, [r4, #2]
 8013d38:	6803      	ldr	r3, [r0, #0]
 8013d3a:	80a1      	strh	r1, [r4, #4]
 8013d3c:	4621      	mov	r1, r4
 8013d3e:	80e2      	strh	r2, [r4, #6]
 8013d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d42:	4798      	blx	r3
 8013d44:	4620      	mov	r0, r4
 8013d46:	bd10      	pop	{r4, pc}

08013d48 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8013d48:	b530      	push	{r4, r5, lr}
 8013d4a:	8083      	strh	r3, [r0, #4]
 8013d4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013d50:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8013d54:	7183      	strb	r3, [r0, #6]
 8013d56:	79c3      	ldrb	r3, [r0, #7]
 8013d58:	6101      	str	r1, [r0, #16]
 8013d5a:	f365 0306 	bfi	r3, r5, #0, #7
 8013d5e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8013d62:	8282      	strh	r2, [r0, #20]
 8013d64:	f365 13c7 	bfi	r3, r5, #7, #1
 8013d68:	71c3      	strb	r3, [r0, #7]
 8013d6a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8013d6e:	7203      	strb	r3, [r0, #8]
 8013d70:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8013d74:	7243      	strb	r3, [r0, #9]
 8013d76:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013d7a:	8143      	strh	r3, [r0, #10]
 8013d7c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013d80:	8183      	strh	r3, [r0, #12]
 8013d82:	4b01      	ldr	r3, [pc, #4]	; (8013d88 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8013d84:	6003      	str	r3, [r0, #0]
 8013d86:	bd30      	pop	{r4, r5, pc}
 8013d88:	0802138c 	.word	0x0802138c

08013d8c <_ZNK8touchgfx9ConstFont4findEt>:
 8013d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d8e:	6904      	ldr	r4, [r0, #16]
 8013d90:	b3bc      	cbz	r4, 8013e02 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013d92:	88a3      	ldrh	r3, [r4, #4]
 8013d94:	8a82      	ldrh	r2, [r0, #20]
 8013d96:	1acb      	subs	r3, r1, r3
 8013d98:	f102 32ff 	add.w	r2, r2, #4294967295
 8013d9c:	d431      	bmi.n	8013e02 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013d9e:	4293      	cmp	r3, r2
 8013da0:	dd0c      	ble.n	8013dbc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8013da2:	230e      	movs	r3, #14
 8013da4:	fb03 4302 	mla	r3, r3, r2, r4
 8013da8:	889b      	ldrh	r3, [r3, #4]
 8013daa:	1a5b      	subs	r3, r3, r1
 8013dac:	1ad3      	subs	r3, r2, r3
 8013dae:	429a      	cmp	r2, r3
 8013db0:	db27      	blt.n	8013e02 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	bfbc      	itt	lt
 8013db6:	2302      	movlt	r3, #2
 8013db8:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013dbc:	2500      	movs	r5, #0
 8013dbe:	260e      	movs	r6, #14
 8013dc0:	4295      	cmp	r5, r2
 8013dc2:	dc1e      	bgt.n	8013e02 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013dc4:	fb06 4003 	mla	r0, r6, r3, r4
 8013dc8:	8887      	ldrh	r7, [r0, #4]
 8013dca:	42b9      	cmp	r1, r7
 8013dcc:	d01a      	beq.n	8013e04 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013dce:	d20d      	bcs.n	8013dec <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013dd0:	1e5a      	subs	r2, r3, #1
 8013dd2:	4295      	cmp	r5, r2
 8013dd4:	dc15      	bgt.n	8013e02 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013dd6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8013dda:	1a5b      	subs	r3, r3, r1
 8013ddc:	1ad3      	subs	r3, r2, r3
 8013dde:	429a      	cmp	r2, r3
 8013de0:	db0f      	blt.n	8013e02 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013de2:	429d      	cmp	r5, r3
 8013de4:	ddec      	ble.n	8013dc0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013de6:	1953      	adds	r3, r2, r5
 8013de8:	105b      	asrs	r3, r3, #1
 8013dea:	e7e9      	b.n	8013dc0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013dec:	1c5d      	adds	r5, r3, #1
 8013dee:	42aa      	cmp	r2, r5
 8013df0:	db07      	blt.n	8013e02 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013df2:	8a43      	ldrh	r3, [r0, #18]
 8013df4:	1acb      	subs	r3, r1, r3
 8013df6:	442b      	add	r3, r5
 8013df8:	429d      	cmp	r5, r3
 8013dfa:	dc02      	bgt.n	8013e02 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	dadf      	bge.n	8013dc0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013e00:	e7f1      	b.n	8013de6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8013e02:	2000      	movs	r0, #0
 8013e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e06 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8013e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e08:	4604      	mov	r4, r0
 8013e0a:	4617      	mov	r7, r2
 8013e0c:	461e      	mov	r6, r3
 8013e0e:	b911      	cbnz	r1, 8013e16 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013e10:	2500      	movs	r5, #0
 8013e12:	4628      	mov	r0, r5
 8013e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e16:	290a      	cmp	r1, #10
 8013e18:	d0fa      	beq.n	8013e10 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013e1a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8013e1e:	4291      	cmp	r1, r2
 8013e20:	d0f6      	beq.n	8013e10 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013e22:	f242 020b 	movw	r2, #8203	; 0x200b
 8013e26:	4291      	cmp	r1, r2
 8013e28:	d0f2      	beq.n	8013e10 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013e2a:	f7ff ffaf 	bl	8013d8c <_ZNK8touchgfx9ConstFont4findEt>
 8013e2e:	4605      	mov	r5, r0
 8013e30:	b950      	cbnz	r0, 8013e48 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8013e32:	6823      	ldr	r3, [r4, #0]
 8013e34:	4620      	mov	r0, r4
 8013e36:	691b      	ldr	r3, [r3, #16]
 8013e38:	4798      	blx	r3
 8013e3a:	4601      	mov	r1, r0
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	f7ff ffa5 	bl	8013d8c <_ZNK8touchgfx9ConstFont4findEt>
 8013e42:	4605      	mov	r5, r0
 8013e44:	2800      	cmp	r0, #0
 8013e46:	d0e3      	beq.n	8013e10 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013e48:	6823      	ldr	r3, [r4, #0]
 8013e4a:	4629      	mov	r1, r5
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e50:	4798      	blx	r3
 8013e52:	6038      	str	r0, [r7, #0]
 8013e54:	6823      	ldr	r3, [r4, #0]
 8013e56:	4620      	mov	r0, r4
 8013e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e5a:	4798      	blx	r3
 8013e5c:	7030      	strb	r0, [r6, #0]
 8013e5e:	e7d8      	b.n	8013e12 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013e60 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8013e60:	b538      	push	{r3, r4, r5, lr}
 8013e62:	4605      	mov	r5, r0
 8013e64:	f001 fd96 	bl	8015994 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013e68:	4604      	mov	r4, r0
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	f001 fcce 	bl	801580c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8013e70:	2800      	cmp	r0, #0
 8013e72:	bf14      	ite	ne
 8013e74:	2002      	movne	r0, #2
 8013e76:	2000      	moveq	r0, #0
 8013e78:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8013e7c:	b280      	uxth	r0, r0
 8013e7e:	bd38      	pop	{r3, r4, r5, pc}

08013e80 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8013e80:	b538      	push	{r3, r4, r5, lr}
 8013e82:	4605      	mov	r5, r0
 8013e84:	f001 fd86 	bl	8015994 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013e88:	4604      	mov	r4, r0
 8013e8a:	4628      	mov	r0, r5
 8013e8c:	f001 fcbe 	bl	801580c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8013e90:	2800      	cmp	r0, #0
 8013e92:	bf14      	ite	ne
 8013e94:	2002      	movne	r0, #2
 8013e96:	2000      	moveq	r0, #0
 8013e98:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8013e9c:	f040 0001 	orr.w	r0, r0, #1
 8013ea0:	b280      	uxth	r0, r0
 8013ea2:	bd38      	pop	{r3, r4, r5, pc}

08013ea4 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	4770      	bx	lr

08013ea8 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8013ea8:	2001      	movs	r0, #1
 8013eaa:	4770      	bx	lr

08013eac <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8013eac:	2002      	movs	r0, #2
 8013eae:	4770      	bx	lr

08013eb0 <_ZN8touchgfx12GestureEventD1Ev>:
 8013eb0:	4770      	bx	lr

08013eb2 <_ZN8touchgfx9DragEventD1Ev>:
 8013eb2:	4770      	bx	lr

08013eb4 <_ZN8touchgfx10ClickEventD1Ev>:
 8013eb4:	4770      	bx	lr

08013eb6 <_ZN8touchgfx10ClickEventD0Ev>:
 8013eb6:	b510      	push	{r4, lr}
 8013eb8:	4604      	mov	r4, r0
 8013eba:	210c      	movs	r1, #12
 8013ebc:	f009 ff4b 	bl	801dd56 <_ZdlPvj>
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	bd10      	pop	{r4, pc}

08013ec4 <_ZN8touchgfx9DragEventD0Ev>:
 8013ec4:	b510      	push	{r4, lr}
 8013ec6:	4604      	mov	r4, r0
 8013ec8:	2110      	movs	r1, #16
 8013eca:	f009 ff44 	bl	801dd56 <_ZdlPvj>
 8013ece:	4620      	mov	r0, r4
 8013ed0:	bd10      	pop	{r4, pc}

08013ed2 <_ZN8touchgfx12GestureEventD0Ev>:
 8013ed2:	b510      	push	{r4, lr}
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	210c      	movs	r1, #12
 8013ed8:	f009 ff3d 	bl	801dd56 <_ZdlPvj>
 8013edc:	4620      	mov	r0, r4
 8013ede:	bd10      	pop	{r4, pc}

08013ee0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013ee0:	b530      	push	{r4, r5, lr}
 8013ee2:	460d      	mov	r5, r1
 8013ee4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013ee6:	b087      	sub	sp, #28
 8013ee8:	4604      	mov	r4, r0
 8013eea:	b301      	cbz	r1, 8013f2e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013eec:	a801      	add	r0, sp, #4
 8013eee:	f7ff ff19 	bl	8013d24 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ef2:	892a      	ldrh	r2, [r5, #8]
 8013ef4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013ef8:	7928      	ldrb	r0, [r5, #4]
 8013efa:	1ad2      	subs	r2, r2, r3
 8013efc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013efe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013f02:	441a      	add	r2, r3
 8013f04:	896b      	ldrh	r3, [r5, #10]
 8013f06:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013f0a:	f88d 0010 	strb.w	r0, [sp, #16]
 8013f0e:	1b5b      	subs	r3, r3, r5
 8013f10:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8013f12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013f14:	442b      	add	r3, r5
 8013f16:	4d07      	ldr	r5, [pc, #28]	; (8013f34 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013f18:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013f1c:	a903      	add	r1, sp, #12
 8013f1e:	9503      	str	r5, [sp, #12]
 8013f20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013f24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f28:	6803      	ldr	r3, [r0, #0]
 8013f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f2c:	4798      	blx	r3
 8013f2e:	b007      	add	sp, #28
 8013f30:	bd30      	pop	{r4, r5, pc}
 8013f32:	bf00      	nop
 8013f34:	0802140c 	.word	0x0802140c

08013f38 <_ZNK8touchgfx4Rect9intersectEss>:
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013f3e:	428b      	cmp	r3, r1
 8013f40:	dc10      	bgt.n	8013f64 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013f42:	8884      	ldrh	r4, [r0, #4]
 8013f44:	4423      	add	r3, r4
 8013f46:	b21b      	sxth	r3, r3
 8013f48:	4299      	cmp	r1, r3
 8013f4a:	da0b      	bge.n	8013f64 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013f4c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013f50:	4293      	cmp	r3, r2
 8013f52:	dc07      	bgt.n	8013f64 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013f54:	88c0      	ldrh	r0, [r0, #6]
 8013f56:	4418      	add	r0, r3
 8013f58:	b200      	sxth	r0, r0
 8013f5a:	4282      	cmp	r2, r0
 8013f5c:	bfac      	ite	ge
 8013f5e:	2000      	movge	r0, #0
 8013f60:	2001      	movlt	r0, #1
 8013f62:	bd10      	pop	{r4, pc}
 8013f64:	2000      	movs	r0, #0
 8013f66:	e7fc      	b.n	8013f62 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08013f68 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f6a:	460c      	mov	r4, r1
 8013f6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013f6e:	b089      	sub	sp, #36	; 0x24
 8013f70:	4605      	mov	r5, r0
 8013f72:	2900      	cmp	r1, #0
 8013f74:	d054      	beq.n	8014020 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8013f76:	4668      	mov	r0, sp
 8013f78:	f7ff fed4 	bl	8013d24 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f7c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8013f7e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8013f80:	4668      	mov	r0, sp
 8013f82:	8922      	ldrh	r2, [r4, #8]
 8013f84:	88e1      	ldrh	r1, [r4, #6]
 8013f86:	443a      	add	r2, r7
 8013f88:	4431      	add	r1, r6
 8013f8a:	b212      	sxth	r2, r2
 8013f8c:	b209      	sxth	r1, r1
 8013f8e:	f7ff ffd3 	bl	8013f38 <_ZNK8touchgfx4Rect9intersectEss>
 8013f92:	b1d0      	cbz	r0, 8013fca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8013f94:	89a2      	ldrh	r2, [r4, #12]
 8013f96:	4668      	mov	r0, sp
 8013f98:	8961      	ldrh	r1, [r4, #10]
 8013f9a:	443a      	add	r2, r7
 8013f9c:	4431      	add	r1, r6
 8013f9e:	b212      	sxth	r2, r2
 8013fa0:	b209      	sxth	r1, r1
 8013fa2:	f7ff ffc9 	bl	8013f38 <_ZNK8touchgfx4Rect9intersectEss>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	b978      	cbnz	r0, 8013fca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8013faa:	4a1e      	ldr	r2, [pc, #120]	; (8014024 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8013fac:	a904      	add	r1, sp, #16
 8013fae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013fb0:	9204      	str	r2, [sp, #16]
 8013fb2:	2202      	movs	r2, #2
 8013fb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013fb8:	f88d 2014 	strb.w	r2, [sp, #20]
 8013fbc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013fc0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013fc4:	6803      	ldr	r3, [r0, #0]
 8013fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fc8:	4798      	blx	r3
 8013fca:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8013fcc:	a802      	add	r0, sp, #8
 8013fce:	f7ff fea9 	bl	8013d24 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013fd2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8013fd6:	88e0      	ldrh	r0, [r4, #6]
 8013fd8:	8961      	ldrh	r1, [r4, #10]
 8013fda:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8013fde:	1a80      	subs	r0, r0, r2
 8013fe0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8013fe4:	1a89      	subs	r1, r1, r2
 8013fe6:	8923      	ldrh	r3, [r4, #8]
 8013fe8:	4460      	add	r0, ip
 8013fea:	89a2      	ldrh	r2, [r4, #12]
 8013fec:	4461      	add	r1, ip
 8013fee:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8013ff0:	eba3 030e 	sub.w	r3, r3, lr
 8013ff4:	eba2 020e 	sub.w	r2, r2, lr
 8013ff8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013ffc:	7927      	ldrb	r7, [r4, #4]
 8013ffe:	4433      	add	r3, r6
 8014000:	4432      	add	r2, r6
 8014002:	4c09      	ldr	r4, [pc, #36]	; (8014028 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8014004:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014006:	f8ad 101a 	strh.w	r1, [sp, #26]
 801400a:	a904      	add	r1, sp, #16
 801400c:	9404      	str	r4, [sp, #16]
 801400e:	f88d 7014 	strb.w	r7, [sp, #20]
 8014012:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014016:	f8ad 201c 	strh.w	r2, [sp, #28]
 801401a:	6803      	ldr	r3, [r0, #0]
 801401c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801401e:	4798      	blx	r3
 8014020:	b009      	add	sp, #36	; 0x24
 8014022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014024:	080213e4 	.word	0x080213e4
 8014028:	080213f8 	.word	0x080213f8

0801402c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014030:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8014034:	b0a1      	sub	sp, #132	; 0x84
 8014036:	4604      	mov	r4, r0
 8014038:	460d      	mov	r5, r1
 801403a:	790b      	ldrb	r3, [r1, #4]
 801403c:	f1b9 0f00 	cmp.w	r9, #0
 8014040:	d00f      	beq.n	8014062 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8014042:	2b00      	cmp	r3, #0
 8014044:	f040 80a2 	bne.w	801418c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8014048:	b021      	add	sp, #132	; 0x84
 801404a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801404e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8014052:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8014056:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801405a:	1d20      	adds	r0, r4, #4
 801405c:	f7fb fba6 	bl	800f7ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014060:	e094      	b.n	801418c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8014062:	2b00      	cmp	r3, #0
 8014064:	d1f0      	bne.n	8014048 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8014066:	4b5f      	ldr	r3, [pc, #380]	; (80141e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801406e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8014072:	f1ba 0f03 	cmp.w	sl, #3
 8014076:	ddea      	ble.n	801404e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8014078:	f1ba 0f0c 	cmp.w	sl, #12
 801407c:	f04f 0303 	mov.w	r3, #3
 8014080:	f04f 0600 	mov.w	r6, #0
 8014084:	4958      	ldr	r1, [pc, #352]	; (80141e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8014086:	bfd8      	it	le
 8014088:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801408c:	960a      	str	r6, [sp, #40]	; 0x28
 801408e:	bfd8      	it	le
 8014090:	fb92 f3f3 	sdivle	r3, r2, r3
 8014094:	9301      	str	r3, [sp, #4]
 8014096:	4b55      	ldr	r3, [pc, #340]	; (80141ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8014098:	f9b3 2000 	ldrsh.w	r2, [r3]
 801409c:	4b54      	ldr	r3, [pc, #336]	; (80141f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801409e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80140a2:	2248      	movs	r2, #72	; 0x48
 80140a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140a8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80140ac:	ab0e      	add	r3, sp, #56	; 0x38
 80140ae:	4618      	mov	r0, r3
 80140b0:	f009 fefe 	bl	801deb0 <memcpy>
 80140b4:	f04f 32ff 	mov.w	r2, #4294967295
 80140b8:	f8cd a008 	str.w	sl, [sp, #8]
 80140bc:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80140c0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80140c4:	46b3      	mov	fp, r6
 80140c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	9303      	str	r3, [sp, #12]
 80140ce:	2300      	movs	r3, #0
 80140d0:	9a03      	ldr	r2, [sp, #12]
 80140d2:	88ef      	ldrh	r7, [r5, #6]
 80140d4:	a80a      	add	r0, sp, #40	; 0x28
 80140d6:	9309      	str	r3, [sp, #36]	; 0x24
 80140d8:	9b07      	ldr	r3, [sp, #28]
 80140da:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80140de:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80140e2:	fb13 f302 	smulbb	r3, r3, r2
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	9304      	str	r3, [sp, #16]
 80140ea:	9b07      	ldr	r3, [sp, #28]
 80140ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	fb13 f302 	smulbb	r3, r3, r2
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	9305      	str	r3, [sp, #20]
 80140fa:	9b04      	ldr	r3, [sp, #16]
 80140fc:	441f      	add	r7, r3
 80140fe:	9b05      	ldr	r3, [sp, #20]
 8014100:	4498      	add	r8, r3
 8014102:	b23f      	sxth	r7, r7
 8014104:	fa0f f888 	sxth.w	r8, r8
 8014108:	4639      	mov	r1, r7
 801410a:	4642      	mov	r2, r8
 801410c:	f7ff ff14 	bl	8013f38 <_ZNK8touchgfx4Rect9intersectEss>
 8014110:	b380      	cbz	r0, 8014174 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8014112:	4639      	mov	r1, r7
 8014114:	ab09      	add	r3, sp, #36	; 0x24
 8014116:	4642      	mov	r2, r8
 8014118:	1d20      	adds	r0, r4, #4
 801411a:	f7fb fb47 	bl	800f7ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801411e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014120:	b341      	cbz	r1, 8014174 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8014122:	4549      	cmp	r1, r9
 8014124:	d026      	beq.n	8014174 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8014126:	a80c      	add	r0, sp, #48	; 0x30
 8014128:	f7ff fdfc 	bl	8013d24 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801412c:	2002      	movs	r0, #2
 801412e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8014132:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8014136:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801413a:	fb92 f2f0 	sdiv	r2, r2, r0
 801413e:	440a      	add	r2, r1
 8014140:	1a99      	subs	r1, r3, r2
 8014142:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8014146:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801414a:	fb93 f3f0 	sdiv	r3, r3, r0
 801414e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8014152:	4403      	add	r3, r0
 8014154:	1ad3      	subs	r3, r2, r3
 8014156:	9a06      	ldr	r2, [sp, #24]
 8014158:	435b      	muls	r3, r3
 801415a:	fb01 3301 	mla	r3, r1, r1, r3
 801415e:	4293      	cmp	r3, r2
 8014160:	d208      	bcs.n	8014174 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8014162:	9a04      	ldr	r2, [sp, #16]
 8014164:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014168:	86a2      	strh	r2, [r4, #52]	; 0x34
 801416a:	9a05      	ldr	r2, [sp, #20]
 801416c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8014170:	86e2      	strh	r2, [r4, #54]	; 0x36
 8014172:	9306      	str	r3, [sp, #24]
 8014174:	f10b 0b02 	add.w	fp, fp, #2
 8014178:	f1bb 0f08 	cmp.w	fp, #8
 801417c:	dda7      	ble.n	80140ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801417e:	9b02      	ldr	r3, [sp, #8]
 8014180:	3601      	adds	r6, #1
 8014182:	4453      	add	r3, sl
 8014184:	9302      	str	r3, [sp, #8]
 8014186:	9b01      	ldr	r3, [sp, #4]
 8014188:	42b3      	cmp	r3, r6
 801418a:	d199      	bne.n	80140c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801418c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801418e:	2900      	cmp	r1, #0
 8014190:	f43f af5a 	beq.w	8014048 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8014194:	a80c      	add	r0, sp, #48	; 0x30
 8014196:	2600      	movs	r6, #0
 8014198:	f7ff fdc4 	bl	8013d24 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801419c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80141a0:	88ea      	ldrh	r2, [r5, #6]
 80141a2:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80141a6:	1ad2      	subs	r2, r2, r3
 80141a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80141aa:	7929      	ldrb	r1, [r5, #4]
 80141ac:	441a      	add	r2, r3
 80141ae:	892b      	ldrh	r3, [r5, #8]
 80141b0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80141b4:	a90e      	add	r1, sp, #56	; 0x38
 80141b6:	1a1b      	subs	r3, r3, r0
 80141b8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80141ba:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80141be:	4403      	add	r3, r0
 80141c0:	480c      	ldr	r0, [pc, #48]	; (80141f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 80141c2:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80141c6:	900e      	str	r0, [sp, #56]	; 0x38
 80141c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80141ca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80141ce:	6803      	ldr	r3, [r0, #0]
 80141d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141d2:	4798      	blx	r3
 80141d4:	792b      	ldrb	r3, [r5, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	f43f af36 	beq.w	8014048 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80141dc:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80141e0:	e732      	b.n	8014048 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80141e2:	bf00      	nop
 80141e4:	2000df70 	.word	0x2000df70
 80141e8:	0801f968 	.word	0x0801f968
 80141ec:	2000df64 	.word	0x2000df64
 80141f0:	2000df66 	.word	0x2000df66
 80141f4:	080213e4 	.word	0x080213e4

080141f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80141f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141fa:	4604      	mov	r4, r0
 80141fc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014200:	3201      	adds	r2, #1
 8014202:	d112      	bne.n	801422a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8014204:	2500      	movs	r5, #0
 8014206:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801420a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801420e:	6803      	ldr	r3, [r0, #0]
 8014210:	9500      	str	r5, [sp, #0]
 8014212:	466d      	mov	r5, sp
 8014214:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014218:	f8ad 2006 	strh.w	r2, [sp, #6]
 801421c:	4629      	mov	r1, r5
 801421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014220:	4798      	blx	r3
 8014222:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014226:	e884 0003 	stmia.w	r4, {r0, r1}
 801422a:	4620      	mov	r0, r4
 801422c:	b003      	add	sp, #12
 801422e:	bd30      	pop	{r4, r5, pc}

08014230 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014230:	b513      	push	{r0, r1, r4, lr}
 8014232:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8014236:	4604      	mov	r4, r0
 8014238:	3301      	adds	r3, #1
 801423a:	d109      	bne.n	8014250 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801423c:	4601      	mov	r1, r0
 801423e:	4668      	mov	r0, sp
 8014240:	f7ff fd70 	bl	8013d24 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014244:	f8bd 3000 	ldrh.w	r3, [sp]
 8014248:	8423      	strh	r3, [r4, #32]
 801424a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801424e:	8463      	strh	r3, [r4, #34]	; 0x22
 8014250:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014254:	b002      	add	sp, #8
 8014256:	bd10      	pop	{r4, pc}

08014258 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8014258:	b513      	push	{r0, r1, r4, lr}
 801425a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801425e:	4604      	mov	r4, r0
 8014260:	3301      	adds	r3, #1
 8014262:	d109      	bne.n	8014278 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014264:	4601      	mov	r1, r0
 8014266:	4668      	mov	r0, sp
 8014268:	f7ff fd5c 	bl	8013d24 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801426c:	f8bd 3000 	ldrh.w	r3, [sp]
 8014270:	8423      	strh	r3, [r4, #32]
 8014272:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014276:	8463      	strh	r3, [r4, #34]	; 0x22
 8014278:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801427c:	b002      	add	sp, #8
 801427e:	bd10      	pop	{r4, pc}

08014280 <_ZN8touchgfx6ScreenC1Ev>:
 8014280:	b570      	push	{r4, r5, r6, lr}
 8014282:	4b17      	ldr	r3, [pc, #92]	; (80142e0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014284:	4605      	mov	r5, r0
 8014286:	4a17      	ldr	r2, [pc, #92]	; (80142e4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8014288:	2101      	movs	r1, #1
 801428a:	f845 3b04 	str.w	r3, [r5], #4
 801428e:	2300      	movs	r3, #0
 8014290:	6042      	str	r2, [r0, #4]
 8014292:	4604      	mov	r4, r0
 8014294:	8103      	strh	r3, [r0, #8]
 8014296:	8143      	strh	r3, [r0, #10]
 8014298:	8183      	strh	r3, [r0, #12]
 801429a:	81c3      	strh	r3, [r0, #14]
 801429c:	8203      	strh	r3, [r0, #16]
 801429e:	8243      	strh	r3, [r0, #18]
 80142a0:	8283      	strh	r3, [r0, #20]
 80142a2:	82c3      	strh	r3, [r0, #22]
 80142a4:	6203      	str	r3, [r0, #32]
 80142a6:	8483      	strh	r3, [r0, #36]	; 0x24
 80142a8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80142aa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80142ae:	6343      	str	r3, [r0, #52]	; 0x34
 80142b0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80142b4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80142b8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80142bc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80142c0:	4b09      	ldr	r3, [pc, #36]	; (80142e8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80142c2:	4628      	mov	r0, r5
 80142c4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80142c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80142ca:	4a08      	ldr	r2, [pc, #32]	; (80142ec <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80142cc:	f9b2 1000 	ldrsh.w	r1, [r2]
 80142d0:	4798      	blx	r3
 80142d2:	6863      	ldr	r3, [r4, #4]
 80142d4:	4628      	mov	r0, r5
 80142d6:	4631      	mov	r1, r6
 80142d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142da:	4798      	blx	r3
 80142dc:	4620      	mov	r0, r4
 80142de:	bd70      	pop	{r4, r5, r6, pc}
 80142e0:	08021420 	.word	0x08021420
 80142e4:	080203c8 	.word	0x080203c8
 80142e8:	2000df66 	.word	0x2000df66
 80142ec:	2000df64 	.word	0x2000df64

080142f0 <_ZN8touchgfx6Screen4drawEv>:
 80142f0:	4b09      	ldr	r3, [pc, #36]	; (8014318 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80142f2:	b507      	push	{r0, r1, r2, lr}
 80142f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80142f8:	2100      	movs	r1, #0
 80142fa:	4b08      	ldr	r3, [pc, #32]	; (801431c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80142fc:	9100      	str	r1, [sp, #0]
 80142fe:	4669      	mov	r1, sp
 8014300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014304:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014308:	f8ad 3006 	strh.w	r3, [sp, #6]
 801430c:	6803      	ldr	r3, [r0, #0]
 801430e:	689b      	ldr	r3, [r3, #8]
 8014310:	4798      	blx	r3
 8014312:	b003      	add	sp, #12
 8014314:	f85d fb04 	ldr.w	pc, [sp], #4
 8014318:	2000df64 	.word	0x2000df64
 801431c:	2000df66 	.word	0x2000df66

08014320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014324:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014328:	b089      	sub	sp, #36	; 0x24
 801432a:	4680      	mov	r8, r0
 801432c:	460c      	mov	r4, r1
 801432e:	2b00      	cmp	r3, #0
 8014330:	4615      	mov	r5, r2
 8014332:	dd0e      	ble.n	8014352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014334:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014338:	2b00      	cmp	r3, #0
 801433a:	dd0a      	ble.n	8014352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801433c:	4628      	mov	r0, r5
 801433e:	f7ff ff5b 	bl	80141f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014342:	4621      	mov	r1, r4
 8014344:	f7fe fc40 	bl	8012bc8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014348:	69eb      	ldr	r3, [r5, #28]
 801434a:	b928      	cbnz	r0, 8014358 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801434c:	461d      	mov	r5, r3
 801434e:	2b00      	cmp	r3, #0
 8014350:	d1f4      	bne.n	801433c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014352:	b009      	add	sp, #36	; 0x24
 8014354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014358:	ae04      	add	r6, sp, #16
 801435a:	2b00      	cmp	r3, #0
 801435c:	f000 80b5 	beq.w	80144ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014360:	682b      	ldr	r3, [r5, #0]
 8014362:	4629      	mov	r1, r5
 8014364:	a802      	add	r0, sp, #8
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	4798      	blx	r3
 801436a:	4628      	mov	r0, r5
 801436c:	f7ff ff60 	bl	8014230 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014370:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014374:	4407      	add	r7, r0
 8014376:	4628      	mov	r0, r5
 8014378:	f7ff ff6e 	bl	8014258 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801437c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014380:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014384:	b23f      	sxth	r7, r7
 8014386:	4418      	add	r0, r3
 8014388:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801438c:	4621      	mov	r1, r4
 801438e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014392:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014396:	4630      	mov	r0, r6
 8014398:	f8ad 3016 	strh.w	r3, [sp, #22]
 801439c:	f8ad 7010 	strh.w	r7, [sp, #16]
 80143a0:	f7fb fab6 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 80143a4:	4628      	mov	r0, r5
 80143a6:	f7ff ff27 	bl	80141f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80143aa:	ab06      	add	r3, sp, #24
 80143ac:	4602      	mov	r2, r0
 80143ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80143b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80143b6:	4611      	mov	r1, r2
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7fb faa9 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 80143be:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80143c2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80143c6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80143ca:	4299      	cmp	r1, r3
 80143cc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80143d0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80143d4:	d10b      	bne.n	80143ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80143d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80143da:	4552      	cmp	r2, sl
 80143dc:	d107      	bne.n	80143ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80143de:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80143e2:	455a      	cmp	r2, fp
 80143e4:	d103      	bne.n	80143ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80143e6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80143ea:	454a      	cmp	r2, r9
 80143ec:	d06d      	beq.n	80144ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80143ee:	f1bb 0f00 	cmp.w	fp, #0
 80143f2:	dd65      	ble.n	80144c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80143f4:	f1b9 0f00 	cmp.w	r9, #0
 80143f8:	dd62      	ble.n	80144c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80143fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80143fe:	fa1f f08a 	uxth.w	r0, sl
 8014402:	4552      	cmp	r2, sl
 8014404:	9000      	str	r0, [sp, #0]
 8014406:	da12      	bge.n	801442e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8014408:	9301      	str	r3, [sp, #4]
 801440a:	9b00      	ldr	r3, [sp, #0]
 801440c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014410:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014414:	1a9a      	subs	r2, r3, r2
 8014416:	f8ad 1010 	strh.w	r1, [sp, #16]
 801441a:	4631      	mov	r1, r6
 801441c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014420:	4640      	mov	r0, r8
 8014422:	f8ad 2016 	strh.w	r2, [sp, #22]
 8014426:	69ea      	ldr	r2, [r5, #28]
 8014428:	f7ff ff7a 	bl	8014320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801442c:	9b01      	ldr	r3, [sp, #4]
 801442e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014432:	b29f      	uxth	r7, r3
 8014434:	429a      	cmp	r2, r3
 8014436:	da0d      	bge.n	8014454 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014438:	f8ad 2010 	strh.w	r2, [sp, #16]
 801443c:	1aba      	subs	r2, r7, r2
 801443e:	f8ad a012 	strh.w	sl, [sp, #18]
 8014442:	4631      	mov	r1, r6
 8014444:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014448:	4640      	mov	r0, r8
 801444a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801444e:	69ea      	ldr	r2, [r5, #28]
 8014450:	f7ff ff66 	bl	8014320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014454:	8822      	ldrh	r2, [r4, #0]
 8014456:	445f      	add	r7, fp
 8014458:	88a3      	ldrh	r3, [r4, #4]
 801445a:	b2bf      	uxth	r7, r7
 801445c:	4413      	add	r3, r2
 801445e:	b23a      	sxth	r2, r7
 8014460:	b29b      	uxth	r3, r3
 8014462:	b219      	sxth	r1, r3
 8014464:	4291      	cmp	r1, r2
 8014466:	dd0d      	ble.n	8014484 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014468:	1bdb      	subs	r3, r3, r7
 801446a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801446e:	f8ad a012 	strh.w	sl, [sp, #18]
 8014472:	4631      	mov	r1, r6
 8014474:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014478:	4640      	mov	r0, r8
 801447a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801447e:	69ea      	ldr	r2, [r5, #28]
 8014480:	f7ff ff4e 	bl	8014320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014484:	88e2      	ldrh	r2, [r4, #6]
 8014486:	8863      	ldrh	r3, [r4, #2]
 8014488:	4413      	add	r3, r2
 801448a:	9a00      	ldr	r2, [sp, #0]
 801448c:	444a      	add	r2, r9
 801448e:	b29b      	uxth	r3, r3
 8014490:	fa1f f982 	uxth.w	r9, r2
 8014494:	b219      	sxth	r1, r3
 8014496:	fa0f f289 	sxth.w	r2, r9
 801449a:	428a      	cmp	r2, r1
 801449c:	da15      	bge.n	80144ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801449e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80144a2:	eba3 0309 	sub.w	r3, r3, r9
 80144a6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80144aa:	f8ad 1014 	strh.w	r1, [sp, #20]
 80144ae:	4631      	mov	r1, r6
 80144b0:	f8ad 0010 	strh.w	r0, [sp, #16]
 80144b4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80144b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80144bc:	69ea      	ldr	r2, [r5, #28]
 80144be:	e001      	b.n	80144c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80144c0:	69ea      	ldr	r2, [r5, #28]
 80144c2:	4621      	mov	r1, r4
 80144c4:	4640      	mov	r0, r8
 80144c6:	f7ff ff2b 	bl	8014320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80144ca:	4628      	mov	r0, r5
 80144cc:	f7ff fe94 	bl	80141f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80144d0:	6861      	ldr	r1, [r4, #4]
 80144d2:	4602      	mov	r2, r0
 80144d4:	4633      	mov	r3, r6
 80144d6:	6820      	ldr	r0, [r4, #0]
 80144d8:	c303      	stmia	r3!, {r0, r1}
 80144da:	4611      	mov	r1, r2
 80144dc:	4630      	mov	r0, r6
 80144de:	f7fb fa17 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 80144e2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	f77f af33 	ble.w	8014352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80144ec:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	f77f af2e 	ble.w	8014352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80144f6:	4628      	mov	r0, r5
 80144f8:	f7ff fe9a 	bl	8014230 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80144fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014500:	1a18      	subs	r0, r3, r0
 8014502:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014506:	4628      	mov	r0, r5
 8014508:	f7ff fea6 	bl	8014258 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801450c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014510:	4631      	mov	r1, r6
 8014512:	1a18      	subs	r0, r3, r0
 8014514:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014518:	4628      	mov	r0, r5
 801451a:	682b      	ldr	r3, [r5, #0]
 801451c:	689b      	ldr	r3, [r3, #8]
 801451e:	4798      	blx	r3
 8014520:	e717      	b.n	8014352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014522 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014522:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014524:	2300      	movs	r3, #0
 8014526:	aa02      	add	r2, sp, #8
 8014528:	4604      	mov	r4, r0
 801452a:	3004      	adds	r0, #4
 801452c:	f842 3d04 	str.w	r3, [r2, #-4]!
 8014530:	460d      	mov	r5, r1
 8014532:	f7fb fac5 	bl	800fac0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8014536:	9a01      	ldr	r2, [sp, #4]
 8014538:	b11a      	cbz	r2, 8014542 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801453a:	4629      	mov	r1, r5
 801453c:	4620      	mov	r0, r4
 801453e:	f7ff feef 	bl	8014320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014542:	b003      	add	sp, #12
 8014544:	bd30      	pop	{r4, r5, pc}

08014546 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8014546:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014548:	4602      	mov	r2, r0
 801454a:	4604      	mov	r4, r0
 801454c:	460d      	mov	r5, r1
 801454e:	466b      	mov	r3, sp
 8014550:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8014554:	6851      	ldr	r1, [r2, #4]
 8014556:	c303      	stmia	r3!, {r0, r1}
 8014558:	4629      	mov	r1, r5
 801455a:	4668      	mov	r0, sp
 801455c:	f7fb f9d8 	bl	800f910 <_ZN8touchgfx4RectaNERKS0_>
 8014560:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014564:	4669      	mov	r1, sp
 8014566:	b123      	cbz	r3, 8014572 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8014568:	4620      	mov	r0, r4
 801456a:	f7ff ffda 	bl	8014522 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801456e:	b003      	add	sp, #12
 8014570:	bd30      	pop	{r4, r5, pc}
 8014572:	1d20      	adds	r0, r4, #4
 8014574:	f7fb fa6b 	bl	800fa4e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8014578:	e7f9      	b.n	801456e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801457a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801457a:	460b      	mov	r3, r1
 801457c:	680a      	ldr	r2, [r1, #0]
 801457e:	1d01      	adds	r1, r0, #4
 8014580:	6992      	ldr	r2, [r2, #24]
 8014582:	4618      	mov	r0, r3
 8014584:	4710      	bx	r2

08014586 <_ZN8touchgfx12TextProviderC1Ev>:
 8014586:	b538      	push	{r3, r4, r5, lr}
 8014588:	2500      	movs	r5, #0
 801458a:	4604      	mov	r4, r0
 801458c:	220e      	movs	r2, #14
 801458e:	7405      	strb	r5, [r0, #16]
 8014590:	4629      	mov	r1, r5
 8014592:	82c5      	strh	r5, [r0, #22]
 8014594:	8305      	strh	r5, [r0, #24]
 8014596:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8014598:	8605      	strh	r5, [r0, #48]	; 0x30
 801459a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801459c:	8705      	strh	r5, [r0, #56]	; 0x38
 801459e:	e9c0 5500 	strd	r5, r5, [r0]
 80145a2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80145a6:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 80145aa:	3044      	adds	r0, #68	; 0x44
 80145ac:	f009 fc8e 	bl	801decc <memset>
 80145b0:	2301      	movs	r3, #1
 80145b2:	4620      	mov	r0, r4
 80145b4:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80145b8:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80145bc:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80145c0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80145c4:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80145c8:	f7f0 fef4 	bl	80053b4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80145cc:	4620      	mov	r0, r4
 80145ce:	bd38      	pop	{r3, r4, r5, pc}

080145d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80145d0:	b530      	push	{r4, r5, lr}
 80145d2:	2500      	movs	r5, #0
 80145d4:	2401      	movs	r4, #1
 80145d6:	6843      	ldr	r3, [r0, #4]
 80145d8:	b913      	cbnz	r3, 80145e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80145da:	6803      	ldr	r3, [r0, #0]
 80145dc:	b1f3      	cbz	r3, 801461c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80145de:	6043      	str	r3, [r0, #4]
 80145e0:	7c03      	ldrb	r3, [r0, #16]
 80145e2:	b143      	cbz	r3, 80145f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80145e4:	68c3      	ldr	r3, [r0, #12]
 80145e6:	b12b      	cbz	r3, 80145f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80145e8:	881a      	ldrh	r2, [r3, #0]
 80145ea:	b11a      	cbz	r2, 80145f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80145ec:	1c9a      	adds	r2, r3, #2
 80145ee:	60c2      	str	r2, [r0, #12]
 80145f0:	8818      	ldrh	r0, [r3, #0]
 80145f2:	bd30      	pop	{r4, r5, pc}
 80145f4:	7405      	strb	r5, [r0, #16]
 80145f6:	6843      	ldr	r3, [r0, #4]
 80145f8:	8819      	ldrh	r1, [r3, #0]
 80145fa:	b179      	cbz	r1, 801461c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80145fc:	1c9a      	adds	r2, r3, #2
 80145fe:	2902      	cmp	r1, #2
 8014600:	6042      	str	r2, [r0, #4]
 8014602:	d1f5      	bne.n	80145f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8014604:	6883      	ldr	r3, [r0, #8]
 8014606:	1d1a      	adds	r2, r3, #4
 8014608:	6082      	str	r2, [r0, #8]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	60c3      	str	r3, [r0, #12]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d0e1      	beq.n	80145d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014612:	881b      	ldrh	r3, [r3, #0]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d0de      	beq.n	80145d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014618:	7404      	strb	r4, [r0, #16]
 801461a:	e7dc      	b.n	80145d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801461c:	2000      	movs	r0, #0
 801461e:	e7e8      	b.n	80145f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08014620 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8014620:	b410      	push	{r4}
 8014622:	63c3      	str	r3, [r0, #60]	; 0x3c
 8014624:	9b01      	ldr	r3, [sp, #4]
 8014626:	6082      	str	r2, [r0, #8]
 8014628:	6403      	str	r3, [r0, #64]	; 0x40
 801462a:	2300      	movs	r3, #0
 801462c:	6001      	str	r1, [r0, #0]
 801462e:	6043      	str	r3, [r0, #4]
 8014630:	60c3      	str	r3, [r0, #12]
 8014632:	7403      	strb	r3, [r0, #16]
 8014634:	8603      	strh	r3, [r0, #48]	; 0x30
 8014636:	8303      	strh	r3, [r0, #24]
 8014638:	8703      	strh	r3, [r0, #56]	; 0x38
 801463a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801463e:	f7f0 beb9 	b.w	80053b4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08014642 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8014642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014644:	4605      	mov	r5, r0
 8014646:	4608      	mov	r0, r1
 8014648:	b1f1      	cbz	r1, 8014688 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801464a:	f105 0444 	add.w	r4, r5, #68	; 0x44
 801464e:	460b      	mov	r3, r1
 8014650:	f101 0708 	add.w	r7, r1, #8
 8014654:	4622      	mov	r2, r4
 8014656:	6818      	ldr	r0, [r3, #0]
 8014658:	3308      	adds	r3, #8
 801465a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801465e:	4626      	mov	r6, r4
 8014660:	42bb      	cmp	r3, r7
 8014662:	c603      	stmia	r6!, {r0, r1}
 8014664:	4634      	mov	r4, r6
 8014666:	d1f6      	bne.n	8014656 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8014668:	6818      	ldr	r0, [r3, #0]
 801466a:	6030      	str	r0, [r6, #0]
 801466c:	4610      	mov	r0, r2
 801466e:	889b      	ldrh	r3, [r3, #4]
 8014670:	80b3      	strh	r3, [r6, #4]
 8014672:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8014676:	015b      	lsls	r3, r3, #5
 8014678:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801467c:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8014680:	430b      	orrs	r3, r1
 8014682:	425b      	negs	r3, r3
 8014684:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 8014688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801468a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801468a:	b538      	push	{r3, r4, r5, lr}
 801468c:	460c      	mov	r4, r1
 801468e:	6811      	ldr	r1, [r2, #0]
 8014690:	4610      	mov	r0, r2
 8014692:	68cd      	ldr	r5, [r1, #12]
 8014694:	4619      	mov	r1, r3
 8014696:	47a8      	blx	r5
 8014698:	2800      	cmp	r0, #0
 801469a:	bf08      	it	eq
 801469c:	4620      	moveq	r0, r4
 801469e:	bd38      	pop	{r3, r4, r5, pc}

080146a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80146a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146a2:	4604      	mov	r4, r0
 80146a4:	4615      	mov	r5, r2
 80146a6:	4608      	mov	r0, r1
 80146a8:	b93a      	cbnz	r2, 80146ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80146aa:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80146ae:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 80146b2:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 80146b6:	4628      	mov	r0, r5
 80146b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146ba:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80146be:	8893      	ldrh	r3, [r2, #4]
 80146c0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80146c4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80146c8:	79ee      	ldrb	r6, [r5, #7]
 80146ca:	4316      	orrs	r6, r2
 80146cc:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 80146d0:	189a      	adds	r2, r3, r2
 80146d2:	b2b7      	uxth	r7, r6
 80146d4:	b291      	uxth	r1, r2
 80146d6:	291d      	cmp	r1, #29
 80146d8:	f200 8084 	bhi.w	80147e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80146dc:	2201      	movs	r2, #1
 80146de:	10f6      	asrs	r6, r6, #3
 80146e0:	408a      	lsls	r2, r1
 80146e2:	4978      	ldr	r1, [pc, #480]	; (80148c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 80146e4:	420a      	tst	r2, r1
 80146e6:	d12e      	bne.n	8014746 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80146e8:	f412 7f60 	tst.w	r2, #896	; 0x380
 80146ec:	d07a      	beq.n	80147e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80146ee:	f104 0244 	add.w	r2, r4, #68	; 0x44
 80146f2:	462b      	mov	r3, r5
 80146f4:	f105 0e08 	add.w	lr, r5, #8
 80146f8:	4615      	mov	r5, r2
 80146fa:	6818      	ldr	r0, [r3, #0]
 80146fc:	3308      	adds	r3, #8
 80146fe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014702:	4694      	mov	ip, r2
 8014704:	4573      	cmp	r3, lr
 8014706:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801470a:	4662      	mov	r2, ip
 801470c:	d1f5      	bne.n	80146fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801470e:	6818      	ldr	r0, [r3, #0]
 8014710:	f8cc 0000 	str.w	r0, [ip]
 8014714:	889b      	ldrh	r3, [r3, #4]
 8014716:	f8ac 3004 	strh.w	r3, [ip, #4]
 801471a:	b2b3      	uxth	r3, r6
 801471c:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 8014720:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8014724:	1aca      	subs	r2, r1, r3
 8014726:	1bcf      	subs	r7, r1, r7
 8014728:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801472c:	b292      	uxth	r2, r2
 801472e:	1afb      	subs	r3, r7, r3
 8014730:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 8014734:	10d2      	asrs	r2, r2, #3
 8014736:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801473a:	4302      	orrs	r2, r0
 801473c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8014740:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8014744:	e7b7      	b.n	80146b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8014746:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014748:	b92b      	cbnz	r3, 8014756 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801474a:	4b5f      	ldr	r3, [pc, #380]	; (80148c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801474c:	21bf      	movs	r1, #191	; 0xbf
 801474e:	4a5f      	ldr	r2, [pc, #380]	; (80148cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8014750:	485f      	ldr	r0, [pc, #380]	; (80148d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8014752:	f009 fb2f 	bl	801ddb4 <__assert_func>
 8014756:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8014758:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801475c:	8b59      	ldrh	r1, [r3, #26]
 801475e:	f640 6333 	movw	r3, #3635	; 0xe33
 8014762:	4299      	cmp	r1, r3
 8014764:	d110      	bne.n	8014788 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8014766:	6803      	ldr	r3, [r0, #0]
 8014768:	68db      	ldr	r3, [r3, #12]
 801476a:	4798      	blx	r3
 801476c:	7b41      	ldrb	r1, [r0, #13]
 801476e:	00cb      	lsls	r3, r1, #3
 8014770:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014774:	7a03      	ldrb	r3, [r0, #8]
 8014776:	0648      	lsls	r0, r1, #25
 8014778:	ea43 0302 	orr.w	r3, r3, r2
 801477c:	bf44      	itt	mi
 801477e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014782:	b21b      	sxthmi	r3, r3
 8014784:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8014788:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801478c:	462a      	mov	r2, r5
 801478e:	f105 0c08 	add.w	ip, r5, #8
 8014792:	443b      	add	r3, r7
 8014794:	4433      	add	r3, r6
 8014796:	f104 0644 	add.w	r6, r4, #68	; 0x44
 801479a:	b29b      	uxth	r3, r3
 801479c:	4635      	mov	r5, r6
 801479e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80147a2:	6810      	ldr	r0, [r2, #0]
 80147a4:	3208      	adds	r2, #8
 80147a6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80147aa:	4637      	mov	r7, r6
 80147ac:	4562      	cmp	r2, ip
 80147ae:	c703      	stmia	r7!, {r0, r1}
 80147b0:	463e      	mov	r6, r7
 80147b2:	d1f6      	bne.n	80147a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 80147b4:	6810      	ldr	r0, [r2, #0]
 80147b6:	6038      	str	r0, [r7, #0]
 80147b8:	8892      	ldrh	r2, [r2, #4]
 80147ba:	80ba      	strh	r2, [r7, #4]
 80147bc:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80147c0:	10db      	asrs	r3, r3, #3
 80147c2:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 80147c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80147ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80147ce:	4313      	orrs	r3, r2
 80147d0:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 80147d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 80147d8:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 80147dc:	1a9b      	subs	r3, r3, r2
 80147de:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80147e2:	e768      	b.n	80146b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80147e4:	f023 0204 	bic.w	r2, r3, #4
 80147e8:	f640 611b 	movw	r1, #3611	; 0xe1b
 80147ec:	428a      	cmp	r2, r1
 80147ee:	d003      	beq.n	80147f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80147f0:	f640 621d 	movw	r2, #3613	; 0xe1d
 80147f4:	4293      	cmp	r3, r2
 80147f6:	d120      	bne.n	801483a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80147f8:	3b01      	subs	r3, #1
 80147fa:	4602      	mov	r2, r0
 80147fc:	4629      	mov	r1, r5
 80147fe:	4620      	mov	r0, r4
 8014800:	b29b      	uxth	r3, r3
 8014802:	f7ff ff42 	bl	801468a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014806:	7b41      	ldrb	r1, [r0, #13]
 8014808:	00cb      	lsls	r3, r1, #3
 801480a:	0649      	lsls	r1, r1, #25
 801480c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014810:	7a03      	ldrb	r3, [r0, #8]
 8014812:	ea43 0302 	orr.w	r3, r3, r2
 8014816:	bf44      	itt	mi
 8014818:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801481c:	b21b      	sxthmi	r3, r3
 801481e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8014822:	7b6b      	ldrb	r3, [r5, #13]
 8014824:	7aaa      	ldrb	r2, [r5, #10]
 8014826:	005b      	lsls	r3, r3, #1
 8014828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801482c:	4313      	orrs	r3, r2
 801482e:	115a      	asrs	r2, r3, #5
 8014830:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8014834:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8014838:	e035      	b.n	80148a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801483a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801483e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8014842:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8014846:	7a2a      	ldrb	r2, [r5, #8]
 8014848:	ea42 0201 	orr.w	r2, r2, r1
 801484c:	f640 6109 	movw	r1, #3593	; 0xe09
 8014850:	bf1c      	itt	ne
 8014852:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8014856:	b212      	sxthne	r2, r2
 8014858:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801485c:	f023 0210 	bic.w	r2, r3, #16
 8014860:	428a      	cmp	r2, r1
 8014862:	d003      	beq.n	801486c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8014864:	f640 6213 	movw	r2, #3603	; 0xe13
 8014868:	4293      	cmp	r3, r2
 801486a:	d129      	bne.n	80148c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801486c:	7b6e      	ldrb	r6, [r5, #13]
 801486e:	4629      	mov	r1, r5
 8014870:	0076      	lsls	r6, r6, #1
 8014872:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8014876:	7aae      	ldrb	r6, [r5, #10]
 8014878:	4316      	orrs	r6, r2
 801487a:	f640 6213 	movw	r2, #3603	; 0xe13
 801487e:	4293      	cmp	r3, r2
 8014880:	4602      	mov	r2, r0
 8014882:	4620      	mov	r0, r4
 8014884:	bf16      	itet	ne
 8014886:	f103 33ff 	addne.w	r3, r3, #4294967295
 801488a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801488e:	b29b      	uxthne	r3, r3
 8014890:	f7ff fefb 	bl	801468a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014894:	7b43      	ldrb	r3, [r0, #13]
 8014896:	7a82      	ldrb	r2, [r0, #10]
 8014898:	005b      	lsls	r3, r3, #1
 801489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801489e:	4313      	orrs	r3, r2
 80148a0:	1af6      	subs	r6, r6, r3
 80148a2:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 80148a6:	7b69      	ldrb	r1, [r5, #13]
 80148a8:	00cb      	lsls	r3, r1, #3
 80148aa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80148ae:	7a2b      	ldrb	r3, [r5, #8]
 80148b0:	4313      	orrs	r3, r2
 80148b2:	064a      	lsls	r2, r1, #25
 80148b4:	bf44      	itt	mi
 80148b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80148ba:	b21b      	sxthmi	r3, r3
 80148bc:	1bdb      	subs	r3, r3, r7
 80148be:	e73f      	b.n	8014740 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 80148c0:	2300      	movs	r3, #0
 80148c2:	e7b7      	b.n	8014834 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 80148c4:	3fc00079 	.word	0x3fc00079
 80148c8:	0802144c 	.word	0x0802144c
 80148cc:	080216be 	.word	0x080216be
 80148d0:	08021455 	.word	0x08021455

080148d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80148d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148d8:	4604      	mov	r4, r0
 80148da:	b942      	cbnz	r2, 80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80148dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80148e0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80148e4:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 80148e8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80148ec:	e046      	b.n	801497c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80148ee:	7b51      	ldrb	r1, [r2, #13]
 80148f0:	8893      	ldrh	r3, [r2, #4]
 80148f2:	010f      	lsls	r7, r1, #4
 80148f4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80148f8:	79d7      	ldrb	r7, [r2, #7]
 80148fa:	4307      	orrs	r7, r0
 80148fc:	2f04      	cmp	r7, #4
 80148fe:	b2bd      	uxth	r5, r7
 8014900:	bfcc      	ite	gt
 8014902:	08bf      	lsrgt	r7, r7, #2
 8014904:	2701      	movle	r7, #1
 8014906:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801490a:	f200 80ab 	bhi.w	8014a64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801490e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8014912:	4283      	cmp	r3, r0
 8014914:	d216      	bcs.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014916:	f240 605b 	movw	r0, #1627	; 0x65b
 801491a:	4283      	cmp	r3, r0
 801491c:	d859      	bhi.n	80149d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801491e:	f240 6057 	movw	r0, #1623	; 0x657
 8014922:	4283      	cmp	r3, r0
 8014924:	d20e      	bcs.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014926:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801492a:	d24a      	bcs.n	80149c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801492c:	f240 604e 	movw	r0, #1614	; 0x64e
 8014930:	4283      	cmp	r3, r0
 8014932:	d207      	bcs.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014934:	f240 601a 	movw	r0, #1562	; 0x61a
 8014938:	4283      	cmp	r3, r0
 801493a:	d02a      	beq.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801493c:	d821      	bhi.n	8014982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801493e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8014942:	d35b      	bcc.n	80149fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014944:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 8014948:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801494c:	f040 80d0 	bne.w	8014af0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8014950:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 8014954:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014958:	f040 80ca 	bne.w	8014af0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801495c:	00cb      	lsls	r3, r1, #3
 801495e:	0649      	lsls	r1, r1, #25
 8014960:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014964:	7a13      	ldrb	r3, [r2, #8]
 8014966:	ea43 0300 	orr.w	r3, r3, r0
 801496a:	bf44      	itt	mi
 801496c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014970:	b21b      	sxthmi	r3, r3
 8014972:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8014976:	1b5d      	subs	r5, r3, r5
 8014978:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801497c:	4610      	mov	r0, r2
 801497e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014982:	f240 604b 	movw	r0, #1611	; 0x64b
 8014986:	4283      	cmp	r3, r0
 8014988:	d338      	bcc.n	80149fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801498a:	f240 604c 	movw	r0, #1612	; 0x64c
 801498e:	4283      	cmp	r3, r0
 8014990:	d9d8      	bls.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014992:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8014996:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801499a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801499e:	f040 80f2 	bne.w	8014b86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 80149a2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80149a6:	f040 80ee 	bne.w	8014b86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 80149aa:	00cb      	lsls	r3, r1, #3
 80149ac:	064e      	lsls	r6, r1, #25
 80149ae:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80149b2:	7a13      	ldrb	r3, [r2, #8]
 80149b4:	ea43 0300 	orr.w	r3, r3, r0
 80149b8:	bf44      	itt	mi
 80149ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80149be:	b21b      	sxthmi	r3, r3
 80149c0:	e7d9      	b.n	8014976 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 80149c2:	f240 6054 	movw	r0, #1620	; 0x654
 80149c6:	4283      	cmp	r3, r0
 80149c8:	d8e3      	bhi.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80149ca:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80149ce:	d9e0      	bls.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80149d0:	e7b8      	b.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80149d2:	f240 6074 	movw	r0, #1652	; 0x674
 80149d6:	4283      	cmp	r3, r0
 80149d8:	d0b4      	beq.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80149da:	d82d      	bhi.n	8014a38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 80149dc:	f240 605e 	movw	r0, #1630	; 0x65e
 80149e0:	4283      	cmp	r3, r0
 80149e2:	d804      	bhi.n	80149ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 80149e4:	f240 605d 	movw	r0, #1629	; 0x65d
 80149e8:	4283      	cmp	r3, r0
 80149ea:	d3d2      	bcc.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80149ec:	e7aa      	b.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80149ee:	f240 605f 	movw	r0, #1631	; 0x65f
 80149f2:	4283      	cmp	r3, r0
 80149f4:	d0cd      	beq.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80149f6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80149fa:	d0a3      	beq.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80149fc:	00cb      	lsls	r3, r1, #3
 80149fe:	0649      	lsls	r1, r1, #25
 8014a00:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014a04:	7a13      	ldrb	r3, [r2, #8]
 8014a06:	ea43 0300 	orr.w	r3, r3, r0
 8014a0a:	bf44      	itt	mi
 8014a0c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014a10:	b21b      	sxthmi	r3, r3
 8014a12:	1b5d      	subs	r5, r3, r5
 8014a14:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8014a18:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8014a1c:	7b53      	ldrb	r3, [r2, #13]
 8014a1e:	015b      	lsls	r3, r3, #5
 8014a20:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014a24:	7993      	ldrb	r3, [r2, #6]
 8014a26:	430b      	orrs	r3, r1
 8014a28:	2105      	movs	r1, #5
 8014a2a:	005b      	lsls	r3, r3, #1
 8014a2c:	fb93 f3f1 	sdiv	r3, r3, r1
 8014a30:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8014a34:	440b      	add	r3, r1
 8014a36:	e757      	b.n	80148e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8014a38:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8014a3c:	4283      	cmp	r3, r0
 8014a3e:	d809      	bhi.n	8014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8014a40:	f240 60df 	movw	r0, #1759	; 0x6df
 8014a44:	4283      	cmp	r3, r0
 8014a46:	f4bf af7d 	bcs.w	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014a4a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8014a4e:	2b05      	cmp	r3, #5
 8014a50:	d8d4      	bhi.n	80149fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014a52:	e777      	b.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014a54:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8014a58:	4283      	cmp	r3, r0
 8014a5a:	d09a      	beq.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014a5c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8014a60:	4283      	cmp	r3, r0
 8014a62:	e7ca      	b.n	80149fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8014a64:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8014a68:	d22b      	bcs.n	8014ac2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8014a6a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8014a6e:	4283      	cmp	r3, r0
 8014a70:	d28f      	bcs.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014a72:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014a76:	4283      	cmp	r3, r0
 8014a78:	d816      	bhi.n	8014aa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8014a7a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8014a7e:	4283      	cmp	r3, r0
 8014a80:	f4bf af60 	bcs.w	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014a84:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8014a88:	4283      	cmp	r3, r0
 8014a8a:	d80a      	bhi.n	8014aa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8014a8c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8014a90:	4283      	cmp	r3, r0
 8014a92:	f4bf af57 	bcs.w	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014a96:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8014a9a:	4283      	cmp	r3, r0
 8014a9c:	f43f af79 	beq.w	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014aa0:	e7ac      	b.n	80149fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014aa2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8014aa6:	e7f8      	b.n	8014a9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8014aa8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8014aac:	4283      	cmp	r3, r0
 8014aae:	d802      	bhi.n	8014ab6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8014ab0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014ab4:	e798      	b.n	80149e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8014ab6:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8014aba:	4283      	cmp	r3, r0
 8014abc:	f47f af42 	bne.w	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014ac0:	e767      	b.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014ac2:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8014ac6:	4283      	cmp	r3, r0
 8014ac8:	f43f af63 	beq.w	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014acc:	d802      	bhi.n	8014ad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8014ace:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8014ad2:	e7f2      	b.n	8014aba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8014ad4:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8014ad8:	4283      	cmp	r3, r0
 8014ada:	d805      	bhi.n	8014ae8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8014adc:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8014ae0:	4283      	cmp	r3, r0
 8014ae2:	f4ff af2f 	bcc.w	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014ae6:	e754      	b.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014ae8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8014aec:	4283      	cmp	r3, r0
 8014aee:	e7af      	b.n	8014a50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8014af0:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 8014af4:	4617      	mov	r7, r2
 8014af6:	f102 0808 	add.w	r8, r2, #8
 8014afa:	4666      	mov	r6, ip
 8014afc:	6838      	ldr	r0, [r7, #0]
 8014afe:	3708      	adds	r7, #8
 8014b00:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014b04:	46e6      	mov	lr, ip
 8014b06:	4547      	cmp	r7, r8
 8014b08:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014b0c:	46f4      	mov	ip, lr
 8014b0e:	d1f5      	bne.n	8014afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8014b10:	6838      	ldr	r0, [r7, #0]
 8014b12:	f8ce 0000 	str.w	r0, [lr]
 8014b16:	88b9      	ldrh	r1, [r7, #4]
 8014b18:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014b1c:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 8014b20:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014b24:	d009      	beq.n	8014b3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8014b26:	7b51      	ldrb	r1, [r2, #13]
 8014b28:	7992      	ldrb	r2, [r2, #6]
 8014b2a:	0149      	lsls	r1, r1, #5
 8014b2c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014b30:	4311      	orrs	r1, r2
 8014b32:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014b36:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 8014b3a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014b3e:	d00d      	beq.n	8014b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8014b40:	442b      	add	r3, r5
 8014b42:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014b4c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8014b50:	10db      	asrs	r3, r3, #3
 8014b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b56:	4313      	orrs	r3, r2
 8014b58:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8014b5c:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8014b60:	00cb      	lsls	r3, r1, #3
 8014b62:	064f      	lsls	r7, r1, #25
 8014b64:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014b68:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8014b6c:	ea43 0302 	orr.w	r3, r3, r2
 8014b70:	bf44      	itt	mi
 8014b72:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014b76:	b21b      	sxthmi	r3, r3
 8014b78:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8014b7c:	1b5d      	subs	r5, r3, r5
 8014b7e:	4632      	mov	r2, r6
 8014b80:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8014b84:	e6fa      	b.n	801497c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8014b86:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 8014b8a:	4694      	mov	ip, r2
 8014b8c:	f102 0908 	add.w	r9, r2, #8
 8014b90:	4676      	mov	r6, lr
 8014b92:	f8dc 0000 	ldr.w	r0, [ip]
 8014b96:	f10c 0c08 	add.w	ip, ip, #8
 8014b9a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8014b9e:	46f0      	mov	r8, lr
 8014ba0:	45cc      	cmp	ip, r9
 8014ba2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014ba6:	46c6      	mov	lr, r8
 8014ba8:	d1f3      	bne.n	8014b92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8014baa:	f8dc 0000 	ldr.w	r0, [ip]
 8014bae:	f8c8 0000 	str.w	r0, [r8]
 8014bb2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8014bb6:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014bba:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 8014bbe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014bc2:	d009      	beq.n	8014bd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8014bc4:	7b51      	ldrb	r1, [r2, #13]
 8014bc6:	7992      	ldrb	r2, [r2, #6]
 8014bc8:	0149      	lsls	r1, r1, #5
 8014bca:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014bce:	4311      	orrs	r1, r2
 8014bd0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014bd4:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 8014bd8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014bdc:	d00d      	beq.n	8014bfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8014bde:	1bdb      	subs	r3, r3, r7
 8014be0:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8014be4:	b29b      	uxth	r3, r3
 8014be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014bea:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8014bee:	10db      	asrs	r3, r3, #3
 8014bf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014bf4:	4313      	orrs	r3, r2
 8014bf6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8014bfa:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8014bfe:	00cb      	lsls	r3, r1, #3
 8014c00:	0648      	lsls	r0, r1, #25
 8014c02:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014c06:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8014c0a:	ea43 0302 	orr.w	r3, r3, r2
 8014c0e:	bf44      	itt	mi
 8014c10:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014c14:	b21b      	sxthmi	r3, r3
 8014c16:	e7b1      	b.n	8014b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08014c18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c1c:	461e      	mov	r6, r3
 8014c1e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8014c20:	4604      	mov	r4, r0
 8014c22:	4617      	mov	r7, r2
 8014c24:	b92b      	cbnz	r3, 8014c32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8014c26:	4b25      	ldr	r3, [pc, #148]	; (8014cbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8014c28:	21bf      	movs	r1, #191	; 0xbf
 8014c2a:	4a25      	ldr	r2, [pc, #148]	; (8014cc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8014c2c:	4825      	ldr	r0, [pc, #148]	; (8014cc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8014c2e:	f009 f8c1 	bl	801ddb4 <__assert_func>
 8014c32:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8014c34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014c38:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8014c3c:	f7f0 fb14 	bl	8005268 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014c40:	4605      	mov	r5, r0
 8014c42:	b918      	cbnz	r0, 8014c4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8014c44:	6030      	str	r0, [r6, #0]
 8014c46:	4628      	mov	r0, r5
 8014c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	4601      	mov	r1, r0
 8014c50:	4638      	mov	r0, r7
 8014c52:	68db      	ldr	r3, [r3, #12]
 8014c54:	4798      	blx	r3
 8014c56:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8014c5a:	4602      	mov	r2, r0
 8014c5c:	6030      	str	r0, [r6, #0]
 8014c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014c62:	d213      	bcs.n	8014c8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8014c64:	4643      	mov	r3, r8
 8014c66:	4639      	mov	r1, r7
 8014c68:	4620      	mov	r0, r4
 8014c6a:	f7ff fe33 	bl	80148d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014c6e:	6030      	str	r0, [r6, #0]
 8014c70:	6833      	ldr	r3, [r6, #0]
 8014c72:	b143      	cbz	r3, 8014c86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8014c74:	7b5a      	ldrb	r2, [r3, #13]
 8014c76:	7a9b      	ldrb	r3, [r3, #10]
 8014c78:	0052      	lsls	r2, r2, #1
 8014c7a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014c7e:	4313      	orrs	r3, r2
 8014c80:	bf0c      	ite	eq
 8014c82:	2301      	moveq	r3, #1
 8014c84:	2300      	movne	r3, #0
 8014c86:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8014c8a:	e7dc      	b.n	8014c46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8014c8c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8014c90:	b29b      	uxth	r3, r3
 8014c92:	2b7f      	cmp	r3, #127	; 0x7f
 8014c94:	d804      	bhi.n	8014ca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8014c96:	4639      	mov	r1, r7
 8014c98:	4620      	mov	r0, r4
 8014c9a:	f7ff fd01 	bl	80146a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014c9e:	e7e6      	b.n	8014c6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8014ca0:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d0e3      	beq.n	8014c70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8014ca8:	f640 1302 	movw	r3, #2306	; 0x902
 8014cac:	429d      	cmp	r5, r3
 8014cae:	d1df      	bne.n	8014c70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8014cb0:	4601      	mov	r1, r0
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f7ff fcc5 	bl	8014642 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014cb8:	e7d9      	b.n	8014c6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8014cba:	bf00      	nop
 8014cbc:	0802144c 	.word	0x0802144c
 8014cc0:	080216be 	.word	0x080216be
 8014cc4:	08021455 	.word	0x08021455

08014cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8014cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ccc:	461e      	mov	r6, r3
 8014cce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8014cd0:	4604      	mov	r4, r0
 8014cd2:	4617      	mov	r7, r2
 8014cd4:	b92b      	cbnz	r3, 8014ce2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8014cd6:	4b26      	ldr	r3, [pc, #152]	; (8014d70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8014cd8:	21bf      	movs	r1, #191	; 0xbf
 8014cda:	4a26      	ldr	r2, [pc, #152]	; (8014d74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8014cdc:	4826      	ldr	r0, [pc, #152]	; (8014d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8014cde:	f009 f869 	bl	801ddb4 <__assert_func>
 8014ce2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8014ce4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014ce8:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8014cec:	f7f0 fabc 	bl	8005268 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014cf0:	4605      	mov	r5, r0
 8014cf2:	b918      	cbnz	r0, 8014cfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8014cf4:	6030      	str	r0, [r6, #0]
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	4601      	mov	r1, r0
 8014d00:	4638      	mov	r0, r7
 8014d02:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8014d06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014d0a:	47c8      	blx	r9
 8014d0c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8014d10:	4602      	mov	r2, r0
 8014d12:	6030      	str	r0, [r6, #0]
 8014d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014d18:	d213      	bcs.n	8014d42 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8014d1a:	4643      	mov	r3, r8
 8014d1c:	4639      	mov	r1, r7
 8014d1e:	4620      	mov	r0, r4
 8014d20:	f7ff fdd8 	bl	80148d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014d24:	6030      	str	r0, [r6, #0]
 8014d26:	6833      	ldr	r3, [r6, #0]
 8014d28:	b143      	cbz	r3, 8014d3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8014d2a:	7b5a      	ldrb	r2, [r3, #13]
 8014d2c:	7a9b      	ldrb	r3, [r3, #10]
 8014d2e:	0052      	lsls	r2, r2, #1
 8014d30:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014d34:	4313      	orrs	r3, r2
 8014d36:	bf0c      	ite	eq
 8014d38:	2301      	moveq	r3, #1
 8014d3a:	2300      	movne	r3, #0
 8014d3c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8014d40:	e7d9      	b.n	8014cf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8014d42:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8014d46:	b29b      	uxth	r3, r3
 8014d48:	2b7f      	cmp	r3, #127	; 0x7f
 8014d4a:	d804      	bhi.n	8014d56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8014d4c:	4639      	mov	r1, r7
 8014d4e:	4620      	mov	r0, r4
 8014d50:	f7ff fca6 	bl	80146a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014d54:	e7e6      	b.n	8014d24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8014d56:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d0e3      	beq.n	8014d26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8014d5e:	f640 1302 	movw	r3, #2306	; 0x902
 8014d62:	429d      	cmp	r5, r3
 8014d64:	d1df      	bne.n	8014d26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8014d66:	4601      	mov	r1, r0
 8014d68:	4620      	mov	r0, r4
 8014d6a:	f7ff fc6a 	bl	8014642 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014d6e:	e7d9      	b.n	8014d24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8014d70:	0802144c 	.word	0x0802144c
 8014d74:	080216be 	.word	0x080216be
 8014d78:	08021455 	.word	0x08021455

08014d7c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8014d7c:	b510      	push	{r4, lr}
 8014d7e:	4604      	mov	r4, r0
 8014d80:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8014d82:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014d84:	b9d9      	cbnz	r1, 8014dbe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8014d86:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014d88:	2b0a      	cmp	r3, #10
 8014d8a:	d036      	beq.n	8014dfa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	f7ff fc1f 	bl	80145d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8014d92:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014d94:	2b09      	cmp	r3, #9
 8014d96:	d906      	bls.n	8014da6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8014d98:	4b18      	ldr	r3, [pc, #96]	; (8014dfc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8014d9a:	f240 1103 	movw	r1, #259	; 0x103
 8014d9e:	4a18      	ldr	r2, [pc, #96]	; (8014e00 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8014da0:	4818      	ldr	r0, [pc, #96]	; (8014e04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8014da2:	f009 f807 	bl	801ddb4 <__assert_func>
 8014da6:	1c5a      	adds	r2, r3, #1
 8014da8:	8622      	strh	r2, [r4, #48]	; 0x30
 8014daa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8014dac:	4413      	add	r3, r2
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	2b09      	cmp	r3, #9
 8014db2:	bf88      	it	hi
 8014db4:	3b0a      	subhi	r3, #10
 8014db6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014dba:	8358      	strh	r0, [r3, #26]
 8014dbc:	e7e3      	b.n	8014d86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8014dbe:	2b0a      	cmp	r3, #10
 8014dc0:	d01b      	beq.n	8014dfa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8014dc2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014dc4:	3901      	subs	r1, #1
 8014dc6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8014dca:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8014dcc:	8721      	strh	r1, [r4, #56]	; 0x38
 8014dce:	1c51      	adds	r1, r2, #1
 8014dd0:	b289      	uxth	r1, r1
 8014dd2:	2901      	cmp	r1, #1
 8014dd4:	bf8a      	itet	hi
 8014dd6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014dda:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8014ddc:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8014dde:	2b09      	cmp	r3, #9
 8014de0:	d8da      	bhi.n	8014d98 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8014de2:	1c5a      	adds	r2, r3, #1
 8014de4:	8622      	strh	r2, [r4, #48]	; 0x30
 8014de6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8014de8:	4413      	add	r3, r2
 8014dea:	b29b      	uxth	r3, r3
 8014dec:	2b09      	cmp	r3, #9
 8014dee:	bf88      	it	hi
 8014df0:	3b0a      	subhi	r3, #10
 8014df2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014df6:	8358      	strh	r0, [r3, #26]
 8014df8:	e7c2      	b.n	8014d80 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8014dfa:	bd10      	pop	{r4, pc}
 8014dfc:	08021481 	.word	0x08021481
 8014e00:	08021814 	.word	0x08021814
 8014e04:	08021455 	.word	0x08021455

08014e08 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014e08:	b538      	push	{r3, r4, r5, lr}
 8014e0a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8014e0c:	4604      	mov	r4, r0
 8014e0e:	b92a      	cbnz	r2, 8014e1c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8014e10:	4b13      	ldr	r3, [pc, #76]	; (8014e60 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8014e12:	21d4      	movs	r1, #212	; 0xd4
 8014e14:	4a13      	ldr	r2, [pc, #76]	; (8014e64 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8014e16:	4814      	ldr	r0, [pc, #80]	; (8014e68 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8014e18:	f008 ffcc 	bl	801ddb4 <__assert_func>
 8014e1c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8014e1e:	3a01      	subs	r2, #1
 8014e20:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8014e24:	8b4d      	ldrh	r5, [r1, #26]
 8014e26:	8602      	strh	r2, [r0, #48]	; 0x30
 8014e28:	1c5a      	adds	r2, r3, #1
 8014e2a:	b292      	uxth	r2, r2
 8014e2c:	2a09      	cmp	r2, #9
 8014e2e:	bf8a      	itet	hi
 8014e30:	3b09      	subhi	r3, #9
 8014e32:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8014e34:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8014e36:	f7ff ffa1 	bl	8014d7c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014e3a:	8b23      	ldrh	r3, [r4, #24]
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	bf9c      	itt	ls
 8014e40:	3301      	addls	r3, #1
 8014e42:	8323      	strhls	r3, [r4, #24]
 8014e44:	8ae3      	ldrh	r3, [r4, #22]
 8014e46:	b90b      	cbnz	r3, 8014e4c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8014e48:	2302      	movs	r3, #2
 8014e4a:	82e3      	strh	r3, [r4, #22]
 8014e4c:	8ae3      	ldrh	r3, [r4, #22]
 8014e4e:	4628      	mov	r0, r5
 8014e50:	3b01      	subs	r3, #1
 8014e52:	b29b      	uxth	r3, r3
 8014e54:	82e3      	strh	r3, [r4, #22]
 8014e56:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014e5a:	8265      	strh	r5, [r4, #18]
 8014e5c:	bd38      	pop	{r3, r4, r5, pc}
 8014e5e:	bf00      	nop
 8014e60:	0802144c 	.word	0x0802144c
 8014e64:	08021769 	.word	0x08021769
 8014e68:	08021455 	.word	0x08021455

08014e6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014e6c:	428a      	cmp	r2, r1
 8014e6e:	b538      	push	{r3, r4, r5, lr}
 8014e70:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8014e72:	d90c      	bls.n	8014e8e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8014e74:	b92c      	cbnz	r4, 8014e82 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8014e76:	4b1c      	ldr	r3, [pc, #112]	; (8014ee8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8014e78:	21e0      	movs	r1, #224	; 0xe0
 8014e7a:	4a1c      	ldr	r2, [pc, #112]	; (8014eec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8014e7c:	481c      	ldr	r0, [pc, #112]	; (8014ef0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8014e7e:	f008 ff99 	bl	801ddb4 <__assert_func>
 8014e82:	3c01      	subs	r4, #1
 8014e84:	4b1b      	ldr	r3, [pc, #108]	; (8014ef4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8014e86:	4a1c      	ldr	r2, [pc, #112]	; (8014ef8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8014e88:	21c4      	movs	r1, #196	; 0xc4
 8014e8a:	8604      	strh	r4, [r0, #48]	; 0x30
 8014e8c:	e7f6      	b.n	8014e7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014e8e:	428c      	cmp	r4, r1
 8014e90:	d203      	bcs.n	8014e9a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8014e92:	4b1a      	ldr	r3, [pc, #104]	; (8014efc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8014e94:	21ca      	movs	r1, #202	; 0xca
 8014e96:	4a1a      	ldr	r2, [pc, #104]	; (8014f00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8014e98:	e7f0      	b.n	8014e7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014e9a:	1a64      	subs	r4, r4, r1
 8014e9c:	250a      	movs	r5, #10
 8014e9e:	8604      	strh	r4, [r0, #48]	; 0x30
 8014ea0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8014ea2:	4421      	add	r1, r4
 8014ea4:	b289      	uxth	r1, r1
 8014ea6:	2909      	cmp	r1, #9
 8014ea8:	bf88      	it	hi
 8014eaa:	390a      	subhi	r1, #10
 8014eac:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8014eae:	b1ba      	cbz	r2, 8014ee0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8014eb0:	3a01      	subs	r2, #1
 8014eb2:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8014eb4:	b292      	uxth	r2, r2
 8014eb6:	2909      	cmp	r1, #9
 8014eb8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014ebc:	d903      	bls.n	8014ec6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8014ebe:	4b11      	ldr	r3, [pc, #68]	; (8014f04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8014ec0:	21e5      	movs	r1, #229	; 0xe5
 8014ec2:	4a11      	ldr	r2, [pc, #68]	; (8014f08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8014ec4:	e7da      	b.n	8014e7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014ec6:	3101      	adds	r1, #1
 8014ec8:	8601      	strh	r1, [r0, #48]	; 0x30
 8014eca:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8014ecc:	b901      	cbnz	r1, 8014ed0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8014ece:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8014ed0:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8014ed2:	3901      	subs	r1, #1
 8014ed4:	b289      	uxth	r1, r1
 8014ed6:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8014ed8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014edc:	834c      	strh	r4, [r1, #26]
 8014ede:	e7e6      	b.n	8014eae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8014ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ee4:	f7ff bf4a 	b.w	8014d7c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014ee8:	0802144c 	.word	0x0802144c
 8014eec:	08021542 	.word	0x08021542
 8014ef0:	08021455 	.word	0x08021455
 8014ef4:	0802148d 	.word	0x0802148d
 8014ef8:	080215ec 	.word	0x080215ec
 8014efc:	0802149b 	.word	0x0802149b
 8014f00:	080218c3 	.word	0x080218c3
 8014f04:	080214a7 	.word	0x080214a7
 8014f08:	080214ba 	.word	0x080214ba

08014f0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014f0c:	3a01      	subs	r2, #1
 8014f0e:	b570      	push	{r4, r5, r6, lr}
 8014f10:	b292      	uxth	r2, r2
 8014f12:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8014f16:	42b2      	cmp	r2, r6
 8014f18:	d019      	beq.n	8014f4e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8014f1a:	8b04      	ldrh	r4, [r0, #24]
 8014f1c:	f831 5b02 	ldrh.w	r5, [r1], #2
 8014f20:	4294      	cmp	r4, r2
 8014f22:	d805      	bhi.n	8014f30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8014f24:	4b19      	ldr	r3, [pc, #100]	; (8014f8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8014f26:	4a1a      	ldr	r2, [pc, #104]	; (8014f90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8014f28:	21c4      	movs	r1, #196	; 0xc4
 8014f2a:	481a      	ldr	r0, [pc, #104]	; (8014f94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8014f2c:	f008 ff42 	bl	801ddb4 <__assert_func>
 8014f30:	8ac4      	ldrh	r4, [r0, #22]
 8014f32:	4414      	add	r4, r2
 8014f34:	3a01      	subs	r2, #1
 8014f36:	b2a4      	uxth	r4, r4
 8014f38:	b292      	uxth	r2, r2
 8014f3a:	2c01      	cmp	r4, #1
 8014f3c:	bf88      	it	hi
 8014f3e:	3c02      	subhi	r4, #2
 8014f40:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014f44:	8a64      	ldrh	r4, [r4, #18]
 8014f46:	42ac      	cmp	r4, r5
 8014f48:	d0e5      	beq.n	8014f16 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8014f4a:	2000      	movs	r0, #0
 8014f4c:	bd70      	pop	{r4, r5, r6, pc}
 8014f4e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014f52:	2400      	movs	r4, #0
 8014f54:	4413      	add	r3, r2
 8014f56:	b2a2      	uxth	r2, r4
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	da14      	bge.n	8014f86 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8014f5c:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8014f5e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014f62:	4296      	cmp	r6, r2
 8014f64:	d802      	bhi.n	8014f6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8014f66:	4b09      	ldr	r3, [pc, #36]	; (8014f8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8014f68:	4a0b      	ldr	r2, [pc, #44]	; (8014f98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8014f6a:	e7dd      	b.n	8014f28 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8014f6c:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8014f6e:	3401      	adds	r4, #1
 8014f70:	4432      	add	r2, r6
 8014f72:	b292      	uxth	r2, r2
 8014f74:	2a09      	cmp	r2, #9
 8014f76:	bf88      	it	hi
 8014f78:	3a0a      	subhi	r2, #10
 8014f7a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014f7e:	8b52      	ldrh	r2, [r2, #26]
 8014f80:	42aa      	cmp	r2, r5
 8014f82:	d0e8      	beq.n	8014f56 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8014f84:	e7e1      	b.n	8014f4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8014f86:	2001      	movs	r0, #1
 8014f88:	e7e0      	b.n	8014f4c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8014f8a:	bf00      	nop
 8014f8c:	0802148d 	.word	0x0802148d
 8014f90:	08021947 	.word	0x08021947
 8014f94:	08021455 	.word	0x08021455
 8014f98:	080215ec 	.word	0x080215ec

08014f9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa0:	4605      	mov	r5, r0
 8014fa2:	4616      	mov	r6, r2
 8014fa4:	1c8c      	adds	r4, r1, #2
 8014fa6:	8809      	ldrh	r1, [r1, #0]
 8014fa8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014fac:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014fb0:	42b3      	cmp	r3, r6
 8014fb2:	d124      	bne.n	8014ffe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014fb4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8014fb8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014fbc:	f001 070f 	and.w	r7, r1, #15
 8014fc0:	4652      	mov	r2, sl
 8014fc2:	f8cd 8000 	str.w	r8, [sp]
 8014fc6:	464b      	mov	r3, r9
 8014fc8:	4621      	mov	r1, r4
 8014fca:	4628      	mov	r0, r5
 8014fcc:	f7ff ff9e 	bl	8014f0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014fd0:	4683      	mov	fp, r0
 8014fd2:	b168      	cbz	r0, 8014ff0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014fd4:	eb0a 0109 	add.w	r1, sl, r9
 8014fd8:	463a      	mov	r2, r7
 8014fda:	4628      	mov	r0, r5
 8014fdc:	4441      	add	r1, r8
 8014fde:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014fe2:	4649      	mov	r1, r9
 8014fe4:	f7ff ff42 	bl	8014e6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8014fe8:	4658      	mov	r0, fp
 8014fea:	b003      	add	sp, #12
 8014fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ff0:	eb07 010a 	add.w	r1, r7, sl
 8014ff4:	4449      	add	r1, r9
 8014ff6:	4441      	add	r1, r8
 8014ff8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014ffc:	e7d2      	b.n	8014fa4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014ffe:	f04f 0b00 	mov.w	fp, #0
 8015002:	e7f1      	b.n	8014fe8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08015004 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8015004:	b570      	push	{r4, r5, r6, lr}
 8015006:	8810      	ldrh	r0, [r2, #0]
 8015008:	4298      	cmp	r0, r3
 801500a:	d817      	bhi.n	801503c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801500c:	1e48      	subs	r0, r1, #1
 801500e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8015012:	4298      	cmp	r0, r3
 8015014:	d312      	bcc.n	801503c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015016:	2400      	movs	r4, #0
 8015018:	428c      	cmp	r4, r1
 801501a:	d20f      	bcs.n	801503c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801501c:	1860      	adds	r0, r4, r1
 801501e:	1040      	asrs	r0, r0, #1
 8015020:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8015024:	0085      	lsls	r5, r0, #2
 8015026:	42b3      	cmp	r3, r6
 8015028:	d902      	bls.n	8015030 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801502a:	3001      	adds	r0, #1
 801502c:	b284      	uxth	r4, r0
 801502e:	e7f3      	b.n	8015018 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015030:	d201      	bcs.n	8015036 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8015032:	b281      	uxth	r1, r0
 8015034:	e7f0      	b.n	8015018 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015036:	442a      	add	r2, r5
 8015038:	8850      	ldrh	r0, [r2, #2]
 801503a:	bd70      	pop	{r4, r5, r6, pc}
 801503c:	2000      	movs	r0, #0
 801503e:	e7fc      	b.n	801503a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08015040 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8015040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015044:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8015046:	4604      	mov	r4, r0
 8015048:	260b      	movs	r6, #11
 801504a:	886f      	ldrh	r7, [r5, #2]
 801504c:	087f      	lsrs	r7, r7, #1
 801504e:	3e01      	subs	r6, #1
 8015050:	d01b      	beq.n	801508a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8015052:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015054:	b92b      	cbnz	r3, 8015062 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8015056:	4b0e      	ldr	r3, [pc, #56]	; (8015090 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8015058:	21bf      	movs	r1, #191	; 0xbf
 801505a:	4a0e      	ldr	r2, [pc, #56]	; (8015094 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801505c:	480e      	ldr	r0, [pc, #56]	; (8015098 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801505e:	f008 fea9 	bl	801ddb4 <__assert_func>
 8015062:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8015064:	462a      	mov	r2, r5
 8015066:	4639      	mov	r1, r7
 8015068:	4620      	mov	r0, r4
 801506a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801506e:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8015072:	4643      	mov	r3, r8
 8015074:	f7ff ffc6 	bl	8015004 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8015078:	b138      	cbz	r0, 801508a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801507a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801507e:	4642      	mov	r2, r8
 8015080:	4620      	mov	r0, r4
 8015082:	f7ff ff8b 	bl	8014f9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8015086:	2800      	cmp	r0, #0
 8015088:	d1e1      	bne.n	801504e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801508a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801508e:	bf00      	nop
 8015090:	0802144c 	.word	0x0802144c
 8015094:	080216be 	.word	0x080216be
 8015098:	08021455 	.word	0x08021455

0801509c <_ZN8touchgfx8ceil28_4El>:
 801509c:	f110 030f 	adds.w	r3, r0, #15
 80150a0:	d401      	bmi.n	80150a6 <_ZN8touchgfx8ceil28_4El+0xa>
 80150a2:	1118      	asrs	r0, r3, #4
 80150a4:	4770      	bx	lr
 80150a6:	2210      	movs	r2, #16
 80150a8:	f1c0 0001 	rsb	r0, r0, #1
 80150ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80150b0:	f010 000f 	ands.w	r0, r0, #15
 80150b4:	bf18      	it	ne
 80150b6:	2001      	movne	r0, #1
 80150b8:	1a18      	subs	r0, r3, r0
 80150ba:	4770      	bx	lr

080150bc <_ZN8touchgfx11floorDivModEllRlS0_>:
 80150bc:	2900      	cmp	r1, #0
 80150be:	b538      	push	{r3, r4, r5, lr}
 80150c0:	dc05      	bgt.n	80150ce <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 80150c2:	4b0f      	ldr	r3, [pc, #60]	; (8015100 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 80150c4:	21f7      	movs	r1, #247	; 0xf7
 80150c6:	4a0f      	ldr	r2, [pc, #60]	; (8015104 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 80150c8:	480f      	ldr	r0, [pc, #60]	; (8015108 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 80150ca:	f008 fe73 	bl	801ddb4 <__assert_func>
 80150ce:	2800      	cmp	r0, #0
 80150d0:	db06      	blt.n	80150e0 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 80150d2:	fb90 f4f1 	sdiv	r4, r0, r1
 80150d6:	fb01 0114 	mls	r1, r1, r4, r0
 80150da:	6014      	str	r4, [r2, #0]
 80150dc:	6019      	str	r1, [r3, #0]
 80150de:	bd38      	pop	{r3, r4, r5, pc}
 80150e0:	4240      	negs	r0, r0
 80150e2:	fb90 f4f1 	sdiv	r4, r0, r1
 80150e6:	4265      	negs	r5, r4
 80150e8:	fb01 0014 	mls	r0, r1, r4, r0
 80150ec:	6015      	str	r5, [r2, #0]
 80150ee:	6018      	str	r0, [r3, #0]
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d0f4      	beq.n	80150de <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 80150f4:	6810      	ldr	r0, [r2, #0]
 80150f6:	3801      	subs	r0, #1
 80150f8:	6010      	str	r0, [r2, #0]
 80150fa:	6818      	ldr	r0, [r3, #0]
 80150fc:	1a09      	subs	r1, r1, r0
 80150fe:	e7ed      	b.n	80150dc <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8015100:	08021a18 	.word	0x08021a18
 8015104:	08021a57 	.word	0x08021a57
 8015108:	08021a28 	.word	0x08021a28

0801510c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801510c:	b570      	push	{r4, r5, r6, lr}
 801510e:	694a      	ldr	r2, [r1, #20]
 8015110:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015112:	684b      	ldr	r3, [r1, #4]
 8015114:	1b54      	subs	r4, r2, r5
 8015116:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8015118:	f000 8106 	beq.w	8015328 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801511c:	1b9b      	subs	r3, r3, r6
 801511e:	d003      	beq.n	8015128 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015120:	4363      	muls	r3, r4
 8015122:	2210      	movs	r2, #16
 8015124:	fb93 f3f2 	sdiv	r3, r3, r2
 8015128:	680c      	ldr	r4, [r1, #0]
 801512a:	698a      	ldr	r2, [r1, #24]
 801512c:	1b65      	subs	r5, r4, r5
 801512e:	f000 80fd 	beq.w	801532c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8015132:	1b92      	subs	r2, r2, r6
 8015134:	d003      	beq.n	801513e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015136:	436a      	muls	r2, r5
 8015138:	2410      	movs	r4, #16
 801513a:	fb92 f2f4 	sdiv	r2, r2, r4
 801513e:	1a9b      	subs	r3, r3, r2
 8015140:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8015368 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8015144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015148:	460a      	mov	r2, r1
 801514a:	ee07 3a90 	vmov	s15, r3
 801514e:	f100 040c 	add.w	r4, r0, #12
 8015152:	4603      	mov	r3, r0
 8015154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015158:	ee67 7a84 	vmul.f32	s15, s15, s8
 801515c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8015160:	eeb1 6a43 	vneg.f32	s12, s6
 8015164:	edd2 7a02 	vldr	s15, [r2, #8]
 8015168:	3214      	adds	r2, #20
 801516a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801516e:	ece3 6a01 	vstmia	r3!, {s13}
 8015172:	429c      	cmp	r4, r3
 8015174:	ed52 7a02 	vldr	s15, [r2, #-8]
 8015178:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801517c:	edc3 7a02 	vstr	s15, [r3, #8]
 8015180:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015184:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015188:	edc3 7a05 	vstr	s15, [r3, #20]
 801518c:	d1ea      	bne.n	8015164 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801518e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015190:	698b      	ldr	r3, [r1, #24]
 8015192:	edd0 4a02 	vldr	s9, [r0, #8]
 8015196:	1a9b      	subs	r3, r3, r2
 8015198:	edd0 3a00 	vldr	s7, [r0]
 801519c:	edd0 6a01 	vldr	s13, [r0, #4]
 80151a0:	ee07 3a90 	vmov	s15, r3
 80151a4:	684b      	ldr	r3, [r1, #4]
 80151a6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80151aa:	ed90 5a05 	vldr	s10, [r0, #20]
 80151ae:	1a9b      	subs	r3, r3, r2
 80151b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151b4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80151b8:	ed90 2a03 	vldr	s4, [r0, #12]
 80151bc:	ee07 3a10 	vmov	s14, r3
 80151c0:	edd0 5a04 	vldr	s11, [r0, #16]
 80151c4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80151c8:	ed90 1a07 	vldr	s2, [r0, #28]
 80151cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151d0:	edd0 2a06 	vldr	s5, [r0, #24]
 80151d4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80151d8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80151dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80151e0:	ee32 5a45 	vsub.f32	s10, s4, s10
 80151e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80151e8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80151ec:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80151f0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80151f2:	694a      	ldr	r2, [r1, #20]
 80151f4:	1b13      	subs	r3, r2, r4
 80151f6:	ee07 3a10 	vmov	s14, r3
 80151fa:	680b      	ldr	r3, [r1, #0]
 80151fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015200:	1b1b      	subs	r3, r3, r4
 8015202:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015206:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801520a:	ee07 3a10 	vmov	s14, r3
 801520e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015212:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015216:	eee6 4a87 	vfma.f32	s9, s13, s14
 801521a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801521e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8015222:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015224:	698b      	ldr	r3, [r1, #24]
 8015226:	1a9b      	subs	r3, r3, r2
 8015228:	ee06 3a90 	vmov	s13, r3
 801522c:	684b      	ldr	r3, [r1, #4]
 801522e:	1a9b      	subs	r3, r3, r2
 8015230:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015234:	ee07 3a10 	vmov	s14, r3
 8015238:	ee66 6a84 	vmul.f32	s13, s13, s8
 801523c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015240:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015244:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015248:	eee5 6a87 	vfma.f32	s13, s11, s14
 801524c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015250:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8015254:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015256:	694a      	ldr	r2, [r1, #20]
 8015258:	1b13      	subs	r3, r2, r4
 801525a:	ee07 3a10 	vmov	s14, r3
 801525e:	680b      	ldr	r3, [r1, #0]
 8015260:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015264:	1b1b      	subs	r3, r3, r4
 8015266:	ee27 7a04 	vmul.f32	s14, s14, s8
 801526a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801526e:	ee07 3a10 	vmov	s14, r3
 8015272:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015276:	ee27 7a04 	vmul.f32	s14, s14, s8
 801527a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801527e:	edd0 5a08 	vldr	s11, [r0, #32]
 8015282:	ee31 1a65 	vsub.f32	s2, s2, s11
 8015286:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801528a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801528e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8015292:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015294:	698b      	ldr	r3, [r1, #24]
 8015296:	1a9b      	subs	r3, r3, r2
 8015298:	ee07 3a10 	vmov	s14, r3
 801529c:	684b      	ldr	r3, [r1, #4]
 801529e:	1a9b      	subs	r3, r3, r2
 80152a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152a4:	ee01 3a90 	vmov	s3, r3
 80152a8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80152ac:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80152b0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80152b4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80152b8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80152bc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80152c0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80152c4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80152c6:	694a      	ldr	r2, [r1, #20]
 80152c8:	1b13      	subs	r3, r2, r4
 80152ca:	ee03 3a10 	vmov	s6, r3
 80152ce:	680b      	ldr	r3, [r1, #0]
 80152d0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80152d4:	1b1b      	subs	r3, r3, r4
 80152d6:	ee23 3a04 	vmul.f32	s6, s6, s8
 80152da:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80152de:	ee03 3a10 	vmov	s6, r3
 80152e2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80152e6:	ee23 4a04 	vmul.f32	s8, s6, s8
 80152ea:	eee1 5a04 	vfma.f32	s11, s2, s8
 80152ee:	ee25 6a86 	vmul.f32	s12, s11, s12
 80152f2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80152f6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80152fa:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80152fe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8015302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015306:	dd13      	ble.n	8015330 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8015308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801530c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015310:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015312:	eee3 7a87 	vfma.f32	s15, s7, s14
 8015316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801531e:	dd15      	ble.n	801534c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8015320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015324:	6403      	str	r3, [r0, #64]	; 0x40
 8015326:	bd70      	pop	{r4, r5, r6, pc}
 8015328:	4623      	mov	r3, r4
 801532a:	e6fd      	b.n	8015128 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801532c:	462a      	mov	r2, r5
 801532e:	e706      	b.n	801513e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015330:	d502      	bpl.n	8015338 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8015332:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015336:	e7e9      	b.n	801530c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8015338:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801533c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015340:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8015344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015348:	dade      	bge.n	8015308 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801534a:	e7f2      	b.n	8015332 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801534c:	d502      	bpl.n	8015354 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801534e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015352:	e7e7      	b.n	8015324 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8015354:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015358:	eee3 4a86 	vfma.f32	s9, s7, s12
 801535c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015364:	dadc      	bge.n	8015320 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8015366:	e7f2      	b.n	801534e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8015368:	3d800000 	.word	0x3d800000

0801536c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801536c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015370:	f04f 0814 	mov.w	r8, #20
 8015374:	4604      	mov	r4, r0
 8015376:	4617      	mov	r7, r2
 8015378:	460d      	mov	r5, r1
 801537a:	fb08 f903 	mul.w	r9, r8, r3
 801537e:	461e      	mov	r6, r3
 8015380:	eb02 0a09 	add.w	sl, r2, r9
 8015384:	f8da 0004 	ldr.w	r0, [sl, #4]
 8015388:	f7ff fe88 	bl	801509c <_ZN8touchgfx8ceil28_4El>
 801538c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801538e:	6160      	str	r0, [r4, #20]
 8015390:	fb08 f803 	mul.w	r8, r8, r3
 8015394:	9001      	str	r0, [sp, #4]
 8015396:	eb07 0b08 	add.w	fp, r7, r8
 801539a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801539e:	f7ff fe7d 	bl	801509c <_ZN8touchgfx8ceil28_4El>
 80153a2:	9a01      	ldr	r2, [sp, #4]
 80153a4:	1a80      	subs	r0, r0, r2
 80153a6:	61a0      	str	r0, [r4, #24]
 80153a8:	2800      	cmp	r0, #0
 80153aa:	f000 8088 	beq.w	80154be <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 80153ae:	f857 3009 	ldr.w	r3, [r7, r9]
 80153b2:	f857 c008 	ldr.w	ip, [r7, r8]
 80153b6:	f8db 0004 	ldr.w	r0, [fp, #4]
 80153ba:	ebac 0c03 	sub.w	ip, ip, r3
 80153be:	f8da 1004 	ldr.w	r1, [sl, #4]
 80153c2:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 80153c6:	1a40      	subs	r0, r0, r1
 80153c8:	fb0b f202 	mul.w	r2, fp, r2
 80153cc:	ea4f 1800 	mov.w	r8, r0, lsl #4
 80153d0:	fb0c 2211 	mls	r2, ip, r1, r2
 80153d4:	4641      	mov	r1, r8
 80153d6:	fb00 2003 	mla	r0, r0, r3, r2
 80153da:	f104 0310 	add.w	r3, r4, #16
 80153de:	4622      	mov	r2, r4
 80153e0:	3801      	subs	r0, #1
 80153e2:	4440      	add	r0, r8
 80153e4:	f7ff fe6a 	bl	80150bc <_ZN8touchgfx11floorDivModEllRlS0_>
 80153e8:	f104 0308 	add.w	r3, r4, #8
 80153ec:	1d22      	adds	r2, r4, #4
 80153ee:	4641      	mov	r1, r8
 80153f0:	4658      	mov	r0, fp
 80153f2:	f7ff fe63 	bl	80150bc <_ZN8touchgfx11floorDivModEllRlS0_>
 80153f6:	f8c4 800c 	str.w	r8, [r4, #12]
 80153fa:	6962      	ldr	r2, [r4, #20]
 80153fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015400:	eddf 6a31 	vldr	s13, [pc, #196]	; 80154c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015404:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8015408:	6822      	ldr	r2, [r4, #0]
 801540a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801540e:	ee07 3a10 	vmov	s14, r3
 8015412:	f857 3009 	ldr.w	r3, [r7, r9]
 8015416:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801541a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801541e:	ee07 3a90 	vmov	s15, r3
 8015422:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8015426:	ee27 7a26 	vmul.f32	s14, s14, s13
 801542a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801542e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015432:	edd3 6a00 	vldr	s13, [r3]
 8015436:	eee6 6a07 	vfma.f32	s13, s12, s14
 801543a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801543e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015442:	edc4 6a07 	vstr	s13, [r4, #28]
 8015446:	edd4 6a01 	vldr	s13, [r4, #4]
 801544a:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801544e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015452:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8015456:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801545a:	ed84 6a08 	vstr	s12, [r4, #32]
 801545e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8015460:	6262      	str	r2, [r4, #36]	; 0x24
 8015462:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8015466:	ed93 6a03 	vldr	s12, [r3, #12]
 801546a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801546e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8015472:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015476:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801547a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801547e:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8015482:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015486:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801548a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801548c:	6322      	str	r2, [r4, #48]	; 0x30
 801548e:	ed93 6a06 	vldr	s12, [r3, #24]
 8015492:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8015496:	eea5 6a87 	vfma.f32	s12, s11, s14
 801549a:	eeb0 7a46 	vmov.f32	s14, s12
 801549e:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80154a2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80154a6:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80154aa:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80154ae:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80154b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80154b6:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80154ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80154bc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80154be:	4620      	mov	r0, r4
 80154c0:	b003      	add	sp, #12
 80154c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154c6:	bf00      	nop
 80154c8:	3d800000 	.word	0x3d800000

080154cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80154cc:	4b01      	ldr	r3, [pc, #4]	; (80154d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80154ce:	6018      	str	r0, [r3, #0]
 80154d0:	4770      	bx	lr
 80154d2:	bf00      	nop
 80154d4:	2000dfd0 	.word	0x2000dfd0

080154d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80154d8:	4b06      	ldr	r3, [pc, #24]	; (80154f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80154da:	881a      	ldrh	r2, [r3, #0]
 80154dc:	4282      	cmp	r2, r0
 80154de:	d807      	bhi.n	80154f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80154e0:	4b05      	ldr	r3, [pc, #20]	; (80154f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80154e2:	881b      	ldrh	r3, [r3, #0]
 80154e4:	4413      	add	r3, r2
 80154e6:	4298      	cmp	r0, r3
 80154e8:	bfac      	ite	ge
 80154ea:	2000      	movge	r0, #0
 80154ec:	2001      	movlt	r0, #1
 80154ee:	4770      	bx	lr
 80154f0:	2000      	movs	r0, #0
 80154f2:	4770      	bx	lr
 80154f4:	2000dff0 	.word	0x2000dff0
 80154f8:	2000dff4 	.word	0x2000dff4

080154fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80154fc:	b508      	push	{r3, lr}
 80154fe:	4601      	mov	r1, r0
 8015500:	f7ff ffea 	bl	80154d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015504:	b118      	cbz	r0, 801550e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8015506:	4b02      	ldr	r3, [pc, #8]	; (8015510 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801550e:	bd08      	pop	{r3, pc}
 8015510:	2000dfd4 	.word	0x2000dfd4

08015514 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015518:	4d28      	ldr	r5, [pc, #160]	; (80155bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801551a:	682b      	ldr	r3, [r5, #0]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d04a      	beq.n	80155b6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8015520:	4a27      	ldr	r2, [pc, #156]	; (80155c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015522:	4e28      	ldr	r6, [pc, #160]	; (80155c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015524:	8810      	ldrh	r0, [r2, #0]
 8015526:	f8b6 8000 	ldrh.w	r8, [r6]
 801552a:	4c27      	ldr	r4, [pc, #156]	; (80155c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801552c:	4440      	add	r0, r8
 801552e:	4f27      	ldr	r7, [pc, #156]	; (80155cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015530:	1c41      	adds	r1, r0, #1
 8015532:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8015536:	f021 0101 	bic.w	r1, r1, #1
 801553a:	eb03 020e 	add.w	r2, r3, lr
 801553e:	0409      	lsls	r1, r1, #16
 8015540:	6022      	str	r2, [r4, #0]
 8015542:	0c09      	lsrs	r1, r1, #16
 8015544:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8015548:	eb0e 010c 	add.w	r1, lr, ip
 801554c:	185a      	adds	r2, r3, r1
 801554e:	603a      	str	r2, [r7, #0]
 8015550:	220e      	movs	r2, #14
 8015552:	fb02 f208 	mul.w	r2, r2, r8
 8015556:	3203      	adds	r2, #3
 8015558:	f022 0203 	bic.w	r2, r2, #3
 801555c:	4411      	add	r1, r2
 801555e:	440b      	add	r3, r1
 8015560:	491b      	ldr	r1, [pc, #108]	; (80155d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8015562:	600b      	str	r3, [r1, #0]
 8015564:	2300      	movs	r3, #0
 8015566:	491b      	ldr	r1, [pc, #108]	; (80155d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8015568:	800b      	strh	r3, [r1, #0]
 801556a:	491b      	ldr	r1, [pc, #108]	; (80155d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801556c:	6809      	ldr	r1, [r1, #0]
 801556e:	eba1 010e 	sub.w	r1, r1, lr
 8015572:	eba1 010c 	sub.w	r1, r1, ip
 8015576:	469c      	mov	ip, r3
 8015578:	1a8a      	subs	r2, r1, r2
 801557a:	4918      	ldr	r1, [pc, #96]	; (80155dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801557c:	600a      	str	r2, [r1, #0]
 801557e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015582:	4a17      	ldr	r2, [pc, #92]	; (80155e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8015584:	8013      	strh	r3, [r2, #0]
 8015586:	4283      	cmp	r3, r0
 8015588:	d10d      	bne.n	80155a6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801558a:	8835      	ldrh	r5, [r6, #0]
 801558c:	2300      	movs	r3, #0
 801558e:	6838      	ldr	r0, [r7, #0]
 8015590:	240e      	movs	r4, #14
 8015592:	429d      	cmp	r5, r3
 8015594:	d90f      	bls.n	80155b6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8015596:	fb04 0203 	mla	r2, r4, r3, r0
 801559a:	3301      	adds	r3, #1
 801559c:	7b11      	ldrb	r1, [r2, #12]
 801559e:	f36f 1145 	bfc	r1, #5, #1
 80155a2:	7311      	strb	r1, [r2, #12]
 80155a4:	e7f5      	b.n	8015592 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80155a6:	682a      	ldr	r2, [r5, #0]
 80155a8:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80155ac:	6822      	ldr	r2, [r4, #0]
 80155ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80155b2:	3301      	adds	r3, #1
 80155b4:	e7e7      	b.n	8015586 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80155b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ba:	bf00      	nop
 80155bc:	2000dfd4 	.word	0x2000dfd4
 80155c0:	2000dff0 	.word	0x2000dff0
 80155c4:	2000dff4 	.word	0x2000dff4
 80155c8:	2000dfe8 	.word	0x2000dfe8
 80155cc:	2000dfd8 	.word	0x2000dfd8
 80155d0:	2000dfe0 	.word	0x2000dfe0
 80155d4:	2000dff2 	.word	0x2000dff2
 80155d8:	2000dfdc 	.word	0x2000dfdc
 80155dc:	2000dfec 	.word	0x2000dfec
 80155e0:	2000dfe4 	.word	0x2000dfe4

080155e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80155e4:	4b10      	ldr	r3, [pc, #64]	; (8015628 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80155e6:	b510      	push	{r4, lr}
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	b9db      	cbnz	r3, 8015624 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80155ec:	b1d1      	cbz	r1, 8015624 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80155ee:	4b0f      	ldr	r3, [pc, #60]	; (801562c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80155f0:	240e      	movs	r4, #14
 80155f2:	801a      	strh	r2, [r3, #0]
 80155f4:	b292      	uxth	r2, r2
 80155f6:	4b0e      	ldr	r3, [pc, #56]	; (8015630 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80155f8:	881b      	ldrh	r3, [r3, #0]
 80155fa:	4413      	add	r3, r2
 80155fc:	4362      	muls	r2, r4
 80155fe:	2406      	movs	r4, #6
 8015600:	fb04 2203 	mla	r2, r4, r3, r2
 8015604:	428a      	cmp	r2, r1
 8015606:	d305      	bcc.n	8015614 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8015608:	4b0a      	ldr	r3, [pc, #40]	; (8015634 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801560a:	2135      	movs	r1, #53	; 0x35
 801560c:	4a0a      	ldr	r2, [pc, #40]	; (8015638 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801560e:	480b      	ldr	r0, [pc, #44]	; (801563c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8015610:	f008 fbd0 	bl	801ddb4 <__assert_func>
 8015614:	4b0a      	ldr	r3, [pc, #40]	; (8015640 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8015616:	6019      	str	r1, [r3, #0]
 8015618:	4b0a      	ldr	r3, [pc, #40]	; (8015644 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801561a:	6018      	str	r0, [r3, #0]
 801561c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015620:	f7ff bf78 	b.w	8015514 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015624:	bd10      	pop	{r4, pc}
 8015626:	bf00      	nop
 8015628:	2000dfe0 	.word	0x2000dfe0
 801562c:	2000dff4 	.word	0x2000dff4
 8015630:	2000dff0 	.word	0x2000dff0
 8015634:	08021af5 	.word	0x08021af5
 8015638:	08021b4e 	.word	0x08021b4e
 801563c:	08021ad0 	.word	0x08021ad0
 8015640:	2000dfdc 	.word	0x2000dfdc
 8015644:	2000dfd4 	.word	0x2000dfd4

08015648 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8015648:	b470      	push	{r4, r5, r6}
 801564a:	4c07      	ldr	r4, [pc, #28]	; (8015668 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801564c:	4605      	mov	r5, r0
 801564e:	4610      	mov	r0, r2
 8015650:	9a03      	ldr	r2, [sp, #12]
 8015652:	6826      	ldr	r6, [r4, #0]
 8015654:	b936      	cbnz	r6, 8015664 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8015656:	6025      	str	r5, [r4, #0]
 8015658:	4c04      	ldr	r4, [pc, #16]	; (801566c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801565a:	8021      	strh	r1, [r4, #0]
 801565c:	4619      	mov	r1, r3
 801565e:	bc70      	pop	{r4, r5, r6}
 8015660:	f7ff bfc0 	b.w	80155e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015664:	bc70      	pop	{r4, r5, r6}
 8015666:	4770      	bx	lr
 8015668:	2000dff8 	.word	0x2000dff8
 801566c:	2000dff0 	.word	0x2000dff0

08015670 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015670:	b508      	push	{r3, lr}
 8015672:	4b14      	ldr	r3, [pc, #80]	; (80156c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015674:	6819      	ldr	r1, [r3, #0]
 8015676:	b931      	cbnz	r1, 8015686 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8015678:	4b13      	ldr	r3, [pc, #76]	; (80156c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801567a:	f240 4186 	movw	r1, #1158	; 0x486
 801567e:	4a13      	ldr	r2, [pc, #76]	; (80156cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8015680:	4813      	ldr	r0, [pc, #76]	; (80156d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015682:	f008 fb97 	bl	801ddb4 <__assert_func>
 8015686:	4a13      	ldr	r2, [pc, #76]	; (80156d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8015688:	8803      	ldrh	r3, [r0, #0]
 801568a:	8812      	ldrh	r2, [r2, #0]
 801568c:	4293      	cmp	r3, r2
 801568e:	d204      	bcs.n	801569a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8015690:	2214      	movs	r2, #20
 8015692:	fb02 1303 	mla	r3, r2, r3, r1
 8015696:	8918      	ldrh	r0, [r3, #8]
 8015698:	bd08      	pop	{r3, pc}
 801569a:	490f      	ldr	r1, [pc, #60]	; (80156d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801569c:	8809      	ldrh	r1, [r1, #0]
 801569e:	4411      	add	r1, r2
 80156a0:	428b      	cmp	r3, r1
 80156a2:	da06      	bge.n	80156b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80156a4:	1a9b      	subs	r3, r3, r2
 80156a6:	4a0d      	ldr	r2, [pc, #52]	; (80156dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80156a8:	210e      	movs	r1, #14
 80156aa:	6812      	ldr	r2, [r2, #0]
 80156ac:	fb01 2303 	mla	r3, r1, r3, r2
 80156b0:	e7f1      	b.n	8015696 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80156b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80156b6:	4293      	cmp	r3, r2
 80156b8:	bf0a      	itet	eq
 80156ba:	4b09      	ldreq	r3, [pc, #36]	; (80156e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80156bc:	2000      	movne	r0, #0
 80156be:	8818      	ldrheq	r0, [r3, #0]
 80156c0:	e7ea      	b.n	8015698 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80156c2:	bf00      	nop
 80156c4:	2000dff8 	.word	0x2000dff8
 80156c8:	08020e88 	.word	0x08020e88
 80156cc:	08021bfb 	.word	0x08021bfb
 80156d0:	08021ad0 	.word	0x08021ad0
 80156d4:	2000dff0 	.word	0x2000dff0
 80156d8:	2000dff4 	.word	0x2000dff4
 80156dc:	2000dfd8 	.word	0x2000dfd8
 80156e0:	2000df64 	.word	0x2000df64

080156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80156e4:	b508      	push	{r3, lr}
 80156e6:	4b14      	ldr	r3, [pc, #80]	; (8015738 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80156e8:	6819      	ldr	r1, [r3, #0]
 80156ea:	b931      	cbnz	r1, 80156fa <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80156ec:	4b13      	ldr	r3, [pc, #76]	; (801573c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80156ee:	f240 419a 	movw	r1, #1178	; 0x49a
 80156f2:	4a13      	ldr	r2, [pc, #76]	; (8015740 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80156f4:	4813      	ldr	r0, [pc, #76]	; (8015744 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80156f6:	f008 fb5d 	bl	801ddb4 <__assert_func>
 80156fa:	4a13      	ldr	r2, [pc, #76]	; (8015748 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80156fc:	8803      	ldrh	r3, [r0, #0]
 80156fe:	8812      	ldrh	r2, [r2, #0]
 8015700:	4293      	cmp	r3, r2
 8015702:	d204      	bcs.n	801570e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8015704:	2214      	movs	r2, #20
 8015706:	fb02 1303 	mla	r3, r2, r3, r1
 801570a:	8958      	ldrh	r0, [r3, #10]
 801570c:	bd08      	pop	{r3, pc}
 801570e:	490f      	ldr	r1, [pc, #60]	; (801574c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8015710:	8809      	ldrh	r1, [r1, #0]
 8015712:	4411      	add	r1, r2
 8015714:	428b      	cmp	r3, r1
 8015716:	da06      	bge.n	8015726 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8015718:	1a9b      	subs	r3, r3, r2
 801571a:	4a0d      	ldr	r2, [pc, #52]	; (8015750 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801571c:	210e      	movs	r1, #14
 801571e:	6812      	ldr	r2, [r2, #0]
 8015720:	fb01 2303 	mla	r3, r1, r3, r2
 8015724:	e7f1      	b.n	801570a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8015726:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801572a:	4293      	cmp	r3, r2
 801572c:	bf0a      	itet	eq
 801572e:	4b09      	ldreq	r3, [pc, #36]	; (8015754 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8015730:	2000      	movne	r0, #0
 8015732:	8818      	ldrheq	r0, [r3, #0]
 8015734:	e7ea      	b.n	801570c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8015736:	bf00      	nop
 8015738:	2000dff8 	.word	0x2000dff8
 801573c:	08020e88 	.word	0x08020e88
 8015740:	08021c27 	.word	0x08021c27
 8015744:	08021ad0 	.word	0x08021ad0
 8015748:	2000dff0 	.word	0x2000dff0
 801574c:	2000dff4 	.word	0x2000dff4
 8015750:	2000dfd8 	.word	0x2000dfd8
 8015754:	2000df66 	.word	0x2000df66

08015758 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015758:	4b23      	ldr	r3, [pc, #140]	; (80157e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801575a:	b510      	push	{r4, lr}
 801575c:	681c      	ldr	r4, [r3, #0]
 801575e:	b934      	cbnz	r4, 801576e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8015760:	4b22      	ldr	r3, [pc, #136]	; (80157ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8015762:	f240 41ae 	movw	r1, #1198	; 0x4ae
 8015766:	4a22      	ldr	r2, [pc, #136]	; (80157f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8015768:	4822      	ldr	r0, [pc, #136]	; (80157f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801576a:	f008 fb23 	bl	801ddb4 <__assert_func>
 801576e:	4a22      	ldr	r2, [pc, #136]	; (80157f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8015770:	880b      	ldrh	r3, [r1, #0]
 8015772:	8812      	ldrh	r2, [r2, #0]
 8015774:	4293      	cmp	r3, r2
 8015776:	d211      	bcs.n	801579c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8015778:	2214      	movs	r2, #20
 801577a:	fb02 4303 	mla	r3, r2, r3, r4
 801577e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8015782:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015786:	8a1a      	ldrh	r2, [r3, #16]
 8015788:	8a5b      	ldrh	r3, [r3, #18]
 801578a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801578e:	8004      	strh	r4, [r0, #0]
 8015790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015794:	8041      	strh	r1, [r0, #2]
 8015796:	8082      	strh	r2, [r0, #4]
 8015798:	80c3      	strh	r3, [r0, #6]
 801579a:	e00e      	b.n	80157ba <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801579c:	4917      	ldr	r1, [pc, #92]	; (80157fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801579e:	8809      	ldrh	r1, [r1, #0]
 80157a0:	4411      	add	r1, r2
 80157a2:	428b      	cmp	r3, r1
 80157a4:	da0a      	bge.n	80157bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80157a6:	1a9b      	subs	r3, r3, r2
 80157a8:	4a15      	ldr	r2, [pc, #84]	; (8015800 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80157aa:	210e      	movs	r1, #14
 80157ac:	6812      	ldr	r2, [r2, #0]
 80157ae:	fb01 2303 	mla	r3, r1, r3, r2
 80157b2:	681a      	ldr	r2, [r3, #0]
 80157b4:	6002      	str	r2, [r0, #0]
 80157b6:	685a      	ldr	r2, [r3, #4]
 80157b8:	6042      	str	r2, [r0, #4]
 80157ba:	bd10      	pop	{r4, pc}
 80157bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80157c0:	4293      	cmp	r3, r2
 80157c2:	d10b      	bne.n	80157dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80157c4:	4b0f      	ldr	r3, [pc, #60]	; (8015804 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80157c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80157ca:	4b0f      	ldr	r3, [pc, #60]	; (8015808 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80157cc:	8081      	strh	r1, [r0, #4]
 80157ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80157d2:	2300      	movs	r3, #0
 80157d4:	80c2      	strh	r2, [r0, #6]
 80157d6:	8003      	strh	r3, [r0, #0]
 80157d8:	8043      	strh	r3, [r0, #2]
 80157da:	e7ee      	b.n	80157ba <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80157dc:	2300      	movs	r3, #0
 80157de:	8003      	strh	r3, [r0, #0]
 80157e0:	8043      	strh	r3, [r0, #2]
 80157e2:	8083      	strh	r3, [r0, #4]
 80157e4:	e7d8      	b.n	8015798 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80157e6:	bf00      	nop
 80157e8:	2000dff8 	.word	0x2000dff8
 80157ec:	08020e88 	.word	0x08020e88
 80157f0:	08021b94 	.word	0x08021b94
 80157f4:	08021ad0 	.word	0x08021ad0
 80157f8:	2000dff0 	.word	0x2000dff0
 80157fc:	2000dff4 	.word	0x2000dff4
 8015800:	2000dfd8 	.word	0x2000dfd8
 8015804:	2000df64 	.word	0x2000df64
 8015808:	2000df66 	.word	0x2000df66

0801580c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801580c:	4b18      	ldr	r3, [pc, #96]	; (8015870 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	b34b      	cbz	r3, 8015866 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8015812:	4a18      	ldr	r2, [pc, #96]	; (8015874 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8015814:	8800      	ldrh	r0, [r0, #0]
 8015816:	8812      	ldrh	r2, [r2, #0]
 8015818:	4290      	cmp	r0, r2
 801581a:	d211      	bcs.n	8015840 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801581c:	2214      	movs	r2, #20
 801581e:	fb02 3300 	mla	r3, r2, r0, r3
 8015822:	8a1a      	ldrh	r2, [r3, #16]
 8015824:	8919      	ldrh	r1, [r3, #8]
 8015826:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801582a:	428a      	cmp	r2, r1
 801582c:	db1d      	blt.n	801586a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801582e:	8a58      	ldrh	r0, [r3, #18]
 8015830:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8015834:	895b      	ldrh	r3, [r3, #10]
 8015836:	4298      	cmp	r0, r3
 8015838:	bfac      	ite	ge
 801583a:	2000      	movge	r0, #0
 801583c:	2001      	movlt	r0, #1
 801583e:	4770      	bx	lr
 8015840:	4b0d      	ldr	r3, [pc, #52]	; (8015878 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8015842:	881b      	ldrh	r3, [r3, #0]
 8015844:	4413      	add	r3, r2
 8015846:	4298      	cmp	r0, r3
 8015848:	da0d      	bge.n	8015866 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801584a:	4b0c      	ldr	r3, [pc, #48]	; (801587c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801584c:	1a80      	subs	r0, r0, r2
 801584e:	220e      	movs	r2, #14
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	fb02 3300 	mla	r3, r2, r0, r3
 8015856:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801585a:	891a      	ldrh	r2, [r3, #8]
 801585c:	4291      	cmp	r1, r2
 801585e:	db04      	blt.n	801586a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8015860:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8015864:	e7e6      	b.n	8015834 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8015866:	2000      	movs	r0, #0
 8015868:	4770      	bx	lr
 801586a:	2001      	movs	r0, #1
 801586c:	4770      	bx	lr
 801586e:	bf00      	nop
 8015870:	2000dff8 	.word	0x2000dff8
 8015874:	2000dff0 	.word	0x2000dff0
 8015878:	2000dff4 	.word	0x2000dff4
 801587c:	2000dfd8 	.word	0x2000dfd8

08015880 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8015880:	b508      	push	{r3, lr}
 8015882:	4b12      	ldr	r3, [pc, #72]	; (80158cc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8015884:	6819      	ldr	r1, [r3, #0]
 8015886:	b931      	cbnz	r1, 8015896 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8015888:	4b11      	ldr	r3, [pc, #68]	; (80158d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801588a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801588e:	4a11      	ldr	r2, [pc, #68]	; (80158d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015890:	4811      	ldr	r0, [pc, #68]	; (80158d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015892:	f008 fa8f 	bl	801ddb4 <__assert_func>
 8015896:	8803      	ldrh	r3, [r0, #0]
 8015898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801589c:	4293      	cmp	r3, r2
 801589e:	d012      	beq.n	80158c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80158a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80158a4:	4293      	cmp	r3, r2
 80158a6:	d103      	bne.n	80158b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80158a8:	4b0c      	ldr	r3, [pc, #48]	; (80158dc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80158ae:	bd08      	pop	{r3, pc}
 80158b0:	4a0b      	ldr	r2, [pc, #44]	; (80158e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 80158b2:	6812      	ldr	r2, [r2, #0]
 80158b4:	b11a      	cbz	r2, 80158be <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 80158b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80158ba:	2800      	cmp	r0, #0
 80158bc:	d1f7      	bne.n	80158ae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80158be:	2214      	movs	r2, #20
 80158c0:	4353      	muls	r3, r2
 80158c2:	58c8      	ldr	r0, [r1, r3]
 80158c4:	e7f3      	b.n	80158ae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80158c6:	2000      	movs	r0, #0
 80158c8:	e7f1      	b.n	80158ae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80158ca:	bf00      	nop
 80158cc:	2000dff8 	.word	0x2000dff8
 80158d0:	08020e88 	.word	0x08020e88
 80158d4:	08021bca 	.word	0x08021bca
 80158d8:	08021ad0 	.word	0x08021ad0
 80158dc:	2000df70 	.word	0x2000df70
 80158e0:	2000dfd4 	.word	0x2000dfd4

080158e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80158e4:	8802      	ldrh	r2, [r0, #0]
 80158e6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d845      	bhi.n	801597a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80158ee:	4b24      	ldr	r3, [pc, #144]	; (8015980 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80158f0:	8818      	ldrh	r0, [r3, #0]
 80158f2:	4282      	cmp	r2, r0
 80158f4:	d221      	bcs.n	801593a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 80158f6:	4b23      	ldr	r3, [pc, #140]	; (8015984 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80158f8:	6819      	ldr	r1, [r3, #0]
 80158fa:	2314      	movs	r3, #20
 80158fc:	fb03 1302 	mla	r3, r3, r2, r1
 8015900:	6858      	ldr	r0, [r3, #4]
 8015902:	2800      	cmp	r0, #0
 8015904:	d03a      	beq.n	801597c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8015906:	4920      	ldr	r1, [pc, #128]	; (8015988 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015908:	6809      	ldr	r1, [r1, #0]
 801590a:	2900      	cmp	r1, #0
 801590c:	d036      	beq.n	801597c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801590e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015912:	2900      	cmp	r1, #0
 8015914:	d032      	beq.n	801597c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8015916:	891a      	ldrh	r2, [r3, #8]
 8015918:	8958      	ldrh	r0, [r3, #10]
 801591a:	4350      	muls	r0, r2
 801591c:	7c5a      	ldrb	r2, [r3, #17]
 801591e:	7cdb      	ldrb	r3, [r3, #19]
 8015920:	0952      	lsrs	r2, r2, #5
 8015922:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015926:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801592a:	2b0b      	cmp	r3, #11
 801592c:	bf18      	it	ne
 801592e:	0040      	lslne	r0, r0, #1
 8015930:	3003      	adds	r0, #3
 8015932:	f020 0003 	bic.w	r0, r0, #3
 8015936:	4408      	add	r0, r1
 8015938:	4770      	bx	lr
 801593a:	4b14      	ldr	r3, [pc, #80]	; (801598c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801593c:	881b      	ldrh	r3, [r3, #0]
 801593e:	4403      	add	r3, r0
 8015940:	429a      	cmp	r2, r3
 8015942:	da1a      	bge.n	801597a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8015944:	4b12      	ldr	r3, [pc, #72]	; (8015990 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8015946:	1a10      	subs	r0, r2, r0
 8015948:	210e      	movs	r1, #14
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	fb01 3000 	mla	r0, r1, r0, r3
 8015950:	7b03      	ldrb	r3, [r0, #12]
 8015952:	f003 031f 	and.w	r3, r3, #31
 8015956:	2b0b      	cmp	r3, #11
 8015958:	d10b      	bne.n	8015972 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801595a:	8903      	ldrh	r3, [r0, #8]
 801595c:	8940      	ldrh	r0, [r0, #10]
 801595e:	4358      	muls	r0, r3
 8015960:	4b09      	ldr	r3, [pc, #36]	; (8015988 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015962:	3003      	adds	r0, #3
 8015964:	6819      	ldr	r1, [r3, #0]
 8015966:	f020 0303 	bic.w	r3, r0, #3
 801596a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801596e:	4418      	add	r0, r3
 8015970:	4770      	bx	lr
 8015972:	2b0d      	cmp	r3, #13
 8015974:	d101      	bne.n	801597a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8015976:	300d      	adds	r0, #13
 8015978:	4770      	bx	lr
 801597a:	2000      	movs	r0, #0
 801597c:	4770      	bx	lr
 801597e:	bf00      	nop
 8015980:	2000dff0 	.word	0x2000dff0
 8015984:	2000dff8 	.word	0x2000dff8
 8015988:	2000dfd4 	.word	0x2000dfd4
 801598c:	2000dff4 	.word	0x2000dff4
 8015990:	2000dfd8 	.word	0x2000dfd8

08015994 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015994:	4b17      	ldr	r3, [pc, #92]	; (80159f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8015996:	b510      	push	{r4, lr}
 8015998:	6819      	ldr	r1, [r3, #0]
 801599a:	8803      	ldrh	r3, [r0, #0]
 801599c:	b1e9      	cbz	r1, 80159da <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801599e:	4a16      	ldr	r2, [pc, #88]	; (80159f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80159a0:	8812      	ldrh	r2, [r2, #0]
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d90a      	bls.n	80159bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 80159a6:	2214      	movs	r2, #20
 80159a8:	fb02 1303 	mla	r3, r2, r3, r1
 80159ac:	7c58      	ldrb	r0, [r3, #17]
 80159ae:	0942      	lsrs	r2, r0, #5
 80159b0:	7cd8      	ldrb	r0, [r3, #19]
 80159b2:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80159b6:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80159ba:	bd10      	pop	{r4, pc}
 80159bc:	490f      	ldr	r1, [pc, #60]	; (80159fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80159be:	8809      	ldrh	r1, [r1, #0]
 80159c0:	4411      	add	r1, r2
 80159c2:	428b      	cmp	r3, r1
 80159c4:	da09      	bge.n	80159da <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80159c6:	1a9b      	subs	r3, r3, r2
 80159c8:	4a0d      	ldr	r2, [pc, #52]	; (8015a00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80159ca:	210e      	movs	r1, #14
 80159cc:	6812      	ldr	r2, [r2, #0]
 80159ce:	fb01 2303 	mla	r3, r1, r3, r2
 80159d2:	7b18      	ldrb	r0, [r3, #12]
 80159d4:	f000 001f 	and.w	r0, r0, #31
 80159d8:	e7ef      	b.n	80159ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80159da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80159de:	4293      	cmp	r3, r2
 80159e0:	d106      	bne.n	80159f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80159e2:	f7ee ff77 	bl	80048d4 <_ZN8touchgfx3HAL3lcdEv>
 80159e6:	6803      	ldr	r3, [r0, #0]
 80159e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159ee:	4718      	bx	r3
 80159f0:	2000      	movs	r0, #0
 80159f2:	e7e2      	b.n	80159ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80159f4:	2000dff8 	.word	0x2000dff8
 80159f8:	2000dff0 	.word	0x2000dff0
 80159fc:	2000dff4 	.word	0x2000dff4
 8015a00:	2000dfd8 	.word	0x2000dfd8

08015a04 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015a04:	2018      	movs	r0, #24
 8015a06:	4770      	bx	lr

08015a08 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8015a08:	2001      	movs	r0, #1
 8015a0a:	4770      	bx	lr

08015a0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a10:	b085      	sub	sp, #20
 8015a12:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015a14:	9203      	str	r2, [sp, #12]
 8015a16:	6870      	ldr	r0, [r6, #4]
 8015a18:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015a1c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015a20:	9101      	str	r1, [sp, #4]
 8015a22:	fa1f f885 	uxth.w	r8, r5
 8015a26:	43ed      	mvns	r5, r5
 8015a28:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015a2c:	b2ed      	uxtb	r5, r5
 8015a2e:	fb00 2404 	mla	r4, r0, r4, r2
 8015a32:	6832      	ldr	r2, [r6, #0]
 8015a34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015a38:	4414      	add	r4, r2
 8015a3a:	f8dc 2000 	ldr.w	r2, [ip]
 8015a3e:	9202      	str	r2, [sp, #8]
 8015a40:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015a44:	f102 0e04 	add.w	lr, r2, #4
 8015a48:	9a01      	ldr	r2, [sp, #4]
 8015a4a:	2a00      	cmp	r2, #0
 8015a4c:	dc03      	bgt.n	8015a56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015a4e:	9a03      	ldr	r2, [sp, #12]
 8015a50:	2a00      	cmp	r2, #0
 8015a52:	f340 8116 	ble.w	8015c82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015a56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a58:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015a5c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015a60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015a62:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015a66:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	dd0e      	ble.n	8015a8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015a6e:	1406      	asrs	r6, r0, #16
 8015a70:	d405      	bmi.n	8015a7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015a72:	4556      	cmp	r6, sl
 8015a74:	da03      	bge.n	8015a7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015a76:	1416      	asrs	r6, r2, #16
 8015a78:	d401      	bmi.n	8015a7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015a7a:	454e      	cmp	r6, r9
 8015a7c:	db07      	blt.n	8015a8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015a7e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015a80:	3b01      	subs	r3, #1
 8015a82:	3403      	adds	r4, #3
 8015a84:	4430      	add	r0, r6
 8015a86:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015a88:	4432      	add	r2, r6
 8015a8a:	e7ee      	b.n	8015a6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015a8c:	d063      	beq.n	8015b56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015a8e:	1e5e      	subs	r6, r3, #1
 8015a90:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015a92:	fb07 0706 	mla	r7, r7, r6, r0
 8015a96:	143f      	asrs	r7, r7, #16
 8015a98:	d454      	bmi.n	8015b44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a9a:	4557      	cmp	r7, sl
 8015a9c:	da52      	bge.n	8015b44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a9e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015aa0:	fb07 2606 	mla	r6, r7, r6, r2
 8015aa4:	1436      	asrs	r6, r6, #16
 8015aa6:	d44d      	bmi.n	8015b44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015aa8:	454e      	cmp	r6, r9
 8015aaa:	da4b      	bge.n	8015b44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015aac:	1ce6      	adds	r6, r4, #3
 8015aae:	4699      	mov	r9, r3
 8015ab0:	f1b9 0f00 	cmp.w	r9, #0
 8015ab4:	f106 0603 	add.w	r6, r6, #3
 8015ab8:	dd48      	ble.n	8015b4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015aba:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015abe:	1417      	asrs	r7, r2, #16
 8015ac0:	9902      	ldr	r1, [sp, #8]
 8015ac2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015ac6:	f109 39ff 	add.w	r9, r9, #4294967295
 8015aca:	fb0b 1707 	mla	r7, fp, r7, r1
 8015ace:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015ad2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015ad4:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015ad8:	fb1b fb05 	smulbb	fp, fp, r5
 8015adc:	4408      	add	r0, r1
 8015ade:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015ae0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015ae4:	440a      	add	r2, r1
 8015ae6:	eb0e 0a07 	add.w	sl, lr, r7
 8015aea:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015aee:	fb07 b708 	mla	r7, r7, r8, fp
 8015af2:	b2bf      	uxth	r7, r7
 8015af4:	f107 0b01 	add.w	fp, r7, #1
 8015af8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015afc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015b00:	fb1b fb05 	smulbb	fp, fp, r5
 8015b04:	123f      	asrs	r7, r7, #8
 8015b06:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015b0a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015b0e:	fb07 b708 	mla	r7, r7, r8, fp
 8015b12:	b2bf      	uxth	r7, r7
 8015b14:	f107 0b01 	add.w	fp, r7, #1
 8015b18:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015b1c:	123f      	asrs	r7, r7, #8
 8015b1e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015b22:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015b26:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015b2a:	fb1a fa05 	smulbb	sl, sl, r5
 8015b2e:	fb07 a708 	mla	r7, r7, r8, sl
 8015b32:	b2bf      	uxth	r7, r7
 8015b34:	f107 0a01 	add.w	sl, r7, #1
 8015b38:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015b3c:	123f      	asrs	r7, r7, #8
 8015b3e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015b42:	e7b5      	b.n	8015ab0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015b44:	2700      	movs	r7, #0
 8015b46:	1bde      	subs	r6, r3, r7
 8015b48:	2e00      	cmp	r6, #0
 8015b4a:	dc42      	bgt.n	8015bd2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015b4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015b50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015b54:	441c      	add	r4, r3
 8015b56:	9b01      	ldr	r3, [sp, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	f340 8092 	ble.w	8015c82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015b68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015b6c:	eef0 6a62 	vmov.f32	s13, s5
 8015b70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015b74:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015b78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015b7c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8015b80:	eef0 6a43 	vmov.f32	s13, s6
 8015b84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015b88:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8015b8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015b90:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015b94:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015b98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015b9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015ba0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015ba4:	ee12 2a90 	vmov	r2, s5
 8015ba8:	eef0 2a47 	vmov.f32	s5, s14
 8015bac:	fb92 f3f3 	sdiv	r3, r2, r3
 8015bb0:	ee13 2a10 	vmov	r2, s6
 8015bb4:	9311      	str	r3, [sp, #68]	; 0x44
 8015bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015bb8:	eeb0 3a67 	vmov.f32	s6, s15
 8015bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8015bc0:	9312      	str	r3, [sp, #72]	; 0x48
 8015bc2:	9b01      	ldr	r3, [sp, #4]
 8015bc4:	9a03      	ldr	r2, [sp, #12]
 8015bc6:	3b01      	subs	r3, #1
 8015bc8:	9301      	str	r3, [sp, #4]
 8015bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015bcc:	bf08      	it	eq
 8015bce:	4613      	moveq	r3, r2
 8015bd0:	e73a      	b.n	8015a48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015bd2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8015bd6:	d44e      	bmi.n	8015c76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015bd8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015bdc:	4556      	cmp	r6, sl
 8015bde:	dd4a      	ble.n	8015c76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015be0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015be4:	d447      	bmi.n	8015c76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015be6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015bea:	4559      	cmp	r1, fp
 8015bec:	dd43      	ble.n	8015c76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015bee:	fa0f f986 	sxth.w	r9, r6
 8015bf2:	9902      	ldr	r1, [sp, #8]
 8015bf4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015bf8:	fb0b 1909 	mla	r9, fp, r9, r1
 8015bfc:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015c00:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015c04:	fb1b fb05 	smulbb	fp, fp, r5
 8015c08:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015c0c:	eb0e 0a09 	add.w	sl, lr, r9
 8015c10:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015c14:	fb09 b908 	mla	r9, r9, r8, fp
 8015c18:	fa1f f989 	uxth.w	r9, r9
 8015c1c:	f109 0b01 	add.w	fp, r9, #1
 8015c20:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015c24:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c28:	f804 9006 	strb.w	r9, [r4, r6]
 8015c2c:	4426      	add	r6, r4
 8015c2e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015c32:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015c36:	fb1b fb05 	smulbb	fp, fp, r5
 8015c3a:	fb09 b908 	mla	r9, r9, r8, fp
 8015c3e:	fa1f f989 	uxth.w	r9, r9
 8015c42:	f109 0b01 	add.w	fp, r9, #1
 8015c46:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015c4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c4e:	f886 9001 	strb.w	r9, [r6, #1]
 8015c52:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015c56:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015c5a:	fb1a fa05 	smulbb	sl, sl, r5
 8015c5e:	fb09 a908 	mla	r9, r9, r8, sl
 8015c62:	fa1f f989 	uxth.w	r9, r9
 8015c66:	f109 0a01 	add.w	sl, r9, #1
 8015c6a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015c6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c72:	f886 9002 	strb.w	r9, [r6, #2]
 8015c76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015c78:	3701      	adds	r7, #1
 8015c7a:	4408      	add	r0, r1
 8015c7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015c7e:	440a      	add	r2, r1
 8015c80:	e761      	b.n	8015b46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015c82:	b005      	add	sp, #20
 8015c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015c88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015c8e:	4693      	mov	fp, r2
 8015c90:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015c96:	6868      	ldr	r0, [r5, #4]
 8015c98:	6877      	ldr	r7, [r6, #4]
 8015c9a:	9100      	str	r1, [sp, #0]
 8015c9c:	3704      	adds	r7, #4
 8015c9e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8015ca2:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8015ca6:	fb00 2404 	mla	r4, r0, r4, r2
 8015caa:	682a      	ldr	r2, [r5, #0]
 8015cac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015cb0:	4414      	add	r4, r2
 8015cb2:	6832      	ldr	r2, [r6, #0]
 8015cb4:	9201      	str	r2, [sp, #4]
 8015cb6:	9a00      	ldr	r2, [sp, #0]
 8015cb8:	2a00      	cmp	r2, #0
 8015cba:	dc03      	bgt.n	8015cc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015cbc:	f1bb 0f00 	cmp.w	fp, #0
 8015cc0:	f340 80bc 	ble.w	8015e3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015cc6:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8015cca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015cd0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8015cd4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	dd0c      	ble.n	8015cf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015cdc:	1405      	asrs	r5, r0, #16
 8015cde:	d405      	bmi.n	8015cec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015ce0:	4555      	cmp	r5, sl
 8015ce2:	da03      	bge.n	8015cec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015ce4:	1415      	asrs	r5, r2, #16
 8015ce6:	d401      	bmi.n	8015cec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015ce8:	454d      	cmp	r5, r9
 8015cea:	db05      	blt.n	8015cf8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015cec:	4440      	add	r0, r8
 8015cee:	4472      	add	r2, lr
 8015cf0:	3b01      	subs	r3, #1
 8015cf2:	3403      	adds	r4, #3
 8015cf4:	e7f0      	b.n	8015cd8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015cf6:	d03f      	beq.n	8015d78 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8015cf8:	1e5d      	subs	r5, r3, #1
 8015cfa:	fb08 0c05 	mla	ip, r8, r5, r0
 8015cfe:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015d02:	d42e      	bmi.n	8015d62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015d04:	45d4      	cmp	ip, sl
 8015d06:	da2c      	bge.n	8015d62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015d08:	fb0e 2505 	mla	r5, lr, r5, r2
 8015d0c:	142d      	asrs	r5, r5, #16
 8015d0e:	d428      	bmi.n	8015d62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015d10:	454d      	cmp	r5, r9
 8015d12:	da26      	bge.n	8015d62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015d14:	1ce5      	adds	r5, r4, #3
 8015d16:	469c      	mov	ip, r3
 8015d18:	f1bc 0f00 	cmp.w	ip, #0
 8015d1c:	f105 0503 	add.w	r5, r5, #3
 8015d20:	dd25      	ble.n	8015d6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8015d22:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015d26:	ea4f 4922 	mov.w	r9, r2, asr #16
 8015d2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015d2e:	4472      	add	r2, lr
 8015d30:	468a      	mov	sl, r1
 8015d32:	9901      	ldr	r1, [sp, #4]
 8015d34:	fb0a 1909 	mla	r9, sl, r9, r1
 8015d38:	1401      	asrs	r1, r0, #16
 8015d3a:	4440      	add	r0, r8
 8015d3c:	f819 9001 	ldrb.w	r9, [r9, r1]
 8015d40:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015d44:	eb07 0a09 	add.w	sl, r7, r9
 8015d48:	f817 9009 	ldrb.w	r9, [r7, r9]
 8015d4c:	f805 9c06 	strb.w	r9, [r5, #-6]
 8015d50:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015d54:	f805 9c05 	strb.w	r9, [r5, #-5]
 8015d58:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015d5c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8015d60:	e7da      	b.n	8015d18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015d62:	2500      	movs	r5, #0
 8015d64:	eba3 0c05 	sub.w	ip, r3, r5
 8015d68:	f1bc 0f00 	cmp.w	ip, #0
 8015d6c:	dc3b      	bgt.n	8015de6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015d6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015d72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d76:	441c      	add	r4, r3
 8015d78:	9b00      	ldr	r3, [sp, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	dd5e      	ble.n	8015e3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015d7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015d88:	eeb0 6a62 	vmov.f32	s12, s5
 8015d8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015d90:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015d94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015d98:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8015d9c:	eeb0 6a43 	vmov.f32	s12, s6
 8015da0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015da4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8015da8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015dac:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015db0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015db4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015db8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015dbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015dc0:	ee12 2a90 	vmov	r2, s5
 8015dc4:	eef0 2a47 	vmov.f32	s5, s14
 8015dc8:	fb92 f8f3 	sdiv	r8, r2, r3
 8015dcc:	ee13 2a10 	vmov	r2, s6
 8015dd0:	eeb0 3a67 	vmov.f32	s6, s15
 8015dd4:	fb92 fef3 	sdiv	lr, r2, r3
 8015dd8:	9b00      	ldr	r3, [sp, #0]
 8015dda:	3b01      	subs	r3, #1
 8015ddc:	9300      	str	r3, [sp, #0]
 8015dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015de0:	bf08      	it	eq
 8015de2:	465b      	moveq	r3, fp
 8015de4:	e767      	b.n	8015cb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015de6:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015dea:	d423      	bmi.n	8015e34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015dec:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8015df0:	45cc      	cmp	ip, r9
 8015df2:	dd1f      	ble.n	8015e34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015df4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015df8:	d41c      	bmi.n	8015e34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015dfa:	68f1      	ldr	r1, [r6, #12]
 8015dfc:	4551      	cmp	r1, sl
 8015dfe:	dd19      	ble.n	8015e34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015e00:	fa0f fc8c 	sxth.w	ip, ip
 8015e04:	9901      	ldr	r1, [sp, #4]
 8015e06:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8015e0a:	f81c c009 	ldrb.w	ip, [ip, r9]
 8015e0e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015e12:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8015e16:	eb07 090c 	add.w	r9, r7, ip
 8015e1a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8015e1e:	f804 a00c 	strb.w	sl, [r4, ip]
 8015e22:	44a4      	add	ip, r4
 8015e24:	f899 a001 	ldrb.w	sl, [r9, #1]
 8015e28:	f88c a001 	strb.w	sl, [ip, #1]
 8015e2c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8015e30:	f88c 9002 	strb.w	r9, [ip, #2]
 8015e34:	4440      	add	r0, r8
 8015e36:	4472      	add	r2, lr
 8015e38:	3501      	adds	r5, #1
 8015e3a:	e793      	b.n	8015d64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8015e3c:	b003      	add	sp, #12
 8015e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e42 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e46:	b085      	sub	sp, #20
 8015e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015e4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015e4e:	9202      	str	r2, [sp, #8]
 8015e50:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8015e54:	6860      	ldr	r0, [r4, #4]
 8015e56:	9203      	str	r2, [sp, #12]
 8015e58:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015e5c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8015e60:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8015e64:	fb00 2505 	mla	r5, r0, r5, r2
 8015e68:	6822      	ldr	r2, [r4, #0]
 8015e6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e6e:	4415      	add	r5, r2
 8015e70:	f8dc 2000 	ldr.w	r2, [ip]
 8015e74:	9200      	str	r2, [sp, #0]
 8015e76:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015e7a:	3204      	adds	r2, #4
 8015e7c:	9201      	str	r2, [sp, #4]
 8015e7e:	2900      	cmp	r1, #0
 8015e80:	dc03      	bgt.n	8015e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015e82:	9a02      	ldr	r2, [sp, #8]
 8015e84:	2a00      	cmp	r2, #0
 8015e86:	f340 8127 	ble.w	80160d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015e8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e8c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015e90:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015e94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e96:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015e9a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	dd0d      	ble.n	8015ebe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015ea2:	1422      	asrs	r2, r4, #16
 8015ea4:	d405      	bmi.n	8015eb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015ea6:	4542      	cmp	r2, r8
 8015ea8:	da03      	bge.n	8015eb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015eaa:	1402      	asrs	r2, r0, #16
 8015eac:	d401      	bmi.n	8015eb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015eae:	42ba      	cmp	r2, r7
 8015eb0:	db06      	blt.n	8015ec0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015eb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015eb4:	4474      	add	r4, lr
 8015eb6:	3b01      	subs	r3, #1
 8015eb8:	3503      	adds	r5, #3
 8015eba:	4410      	add	r0, r2
 8015ebc:	e7ef      	b.n	8015e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015ebe:	d075      	beq.n	8015fac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8015ec0:	1e5a      	subs	r2, r3, #1
 8015ec2:	fb0e 4602 	mla	r6, lr, r2, r4
 8015ec6:	1436      	asrs	r6, r6, #16
 8015ec8:	d465      	bmi.n	8015f96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015eca:	4546      	cmp	r6, r8
 8015ecc:	da63      	bge.n	8015f96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015ece:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015ed0:	fb06 0202 	mla	r2, r6, r2, r0
 8015ed4:	1412      	asrs	r2, r2, #16
 8015ed6:	d45e      	bmi.n	8015f96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015ed8:	42ba      	cmp	r2, r7
 8015eda:	da5c      	bge.n	8015f96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015edc:	1cef      	adds	r7, r5, #3
 8015ede:	4699      	mov	r9, r3
 8015ee0:	f1b9 0f00 	cmp.w	r9, #0
 8015ee4:	dd5d      	ble.n	8015fa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8015ee6:	1402      	asrs	r2, r0, #16
 8015ee8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015eec:	1426      	asrs	r6, r4, #16
 8015eee:	4692      	mov	sl, r2
 8015ef0:	9a00      	ldr	r2, [sp, #0]
 8015ef2:	fb08 220a 	mla	r2, r8, sl, r2
 8015ef6:	5d92      	ldrb	r2, [r2, r6]
 8015ef8:	9e01      	ldr	r6, [sp, #4]
 8015efa:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8015efe:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8015f02:	d041      	beq.n	8015f88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015f04:	9a03      	ldr	r2, [sp, #12]
 8015f06:	fa5f fb86 	uxtb.w	fp, r6
 8015f0a:	fb02 f808 	mul.w	r8, r2, r8
 8015f0e:	f108 0201 	add.w	r2, r8, #1
 8015f12:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8015f16:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8015f1a:	1212      	asrs	r2, r2, #8
 8015f1c:	fa1f fa82 	uxth.w	sl, r2
 8015f20:	43d2      	mvns	r2, r2
 8015f22:	fb1b fb0a 	smulbb	fp, fp, sl
 8015f26:	b2d2      	uxtb	r2, r2
 8015f28:	fb08 b802 	mla	r8, r8, r2, fp
 8015f2c:	fa1f f888 	uxth.w	r8, r8
 8015f30:	f108 0b01 	add.w	fp, r8, #1
 8015f34:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015f38:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8015f3c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015f40:	fb1b fb0a 	smulbb	fp, fp, sl
 8015f44:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015f48:	fb16 fa0a 	smulbb	sl, r6, sl
 8015f4c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8015f50:	f807 8c03 	strb.w	r8, [r7, #-3]
 8015f54:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8015f58:	fb06 aa02 	mla	sl, r6, r2, sl
 8015f5c:	fb08 b802 	mla	r8, r8, r2, fp
 8015f60:	fa1f fa8a 	uxth.w	sl, sl
 8015f64:	fa1f f888 	uxth.w	r8, r8
 8015f68:	f10a 0601 	add.w	r6, sl, #1
 8015f6c:	f108 0b01 	add.w	fp, r8, #1
 8015f70:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8015f74:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015f78:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015f7c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015f80:	f807 ac01 	strb.w	sl, [r7, #-1]
 8015f84:	f807 8c02 	strb.w	r8, [r7, #-2]
 8015f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f8a:	4474      	add	r4, lr
 8015f8c:	3703      	adds	r7, #3
 8015f8e:	f109 39ff 	add.w	r9, r9, #4294967295
 8015f92:	4410      	add	r0, r2
 8015f94:	e7a4      	b.n	8015ee0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015f96:	f04f 0800 	mov.w	r8, #0
 8015f9a:	eba3 0208 	sub.w	r2, r3, r8
 8015f9e:	2a00      	cmp	r2, #0
 8015fa0:	dc3b      	bgt.n	801601a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8015fa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015fa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015faa:	441d      	add	r5, r3
 8015fac:	2900      	cmp	r1, #0
 8015fae:	f340 8093 	ble.w	80160d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015fb2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015fbc:	3901      	subs	r1, #1
 8015fbe:	eeb0 6a62 	vmov.f32	s12, s5
 8015fc2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015fc6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015fca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015fce:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015fd2:	eeb0 6a43 	vmov.f32	s12, s6
 8015fd6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015fda:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015fde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015fe2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015fe6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015fea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015fee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015ff2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015ff6:	ee12 2a90 	vmov	r2, s5
 8015ffa:	eef0 2a47 	vmov.f32	s5, s14
 8015ffe:	fb92 fef3 	sdiv	lr, r2, r3
 8016002:	ee13 2a10 	vmov	r2, s6
 8016006:	eeb0 3a67 	vmov.f32	s6, s15
 801600a:	fb92 f3f3 	sdiv	r3, r2, r3
 801600e:	9a02      	ldr	r2, [sp, #8]
 8016010:	9312      	str	r3, [sp, #72]	; 0x48
 8016012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016014:	bf08      	it	eq
 8016016:	4613      	moveq	r3, r2
 8016018:	e731      	b.n	8015e7e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801601a:	1427      	asrs	r7, r4, #16
 801601c:	d456      	bmi.n	80160cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801601e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016022:	42be      	cmp	r6, r7
 8016024:	dd52      	ble.n	80160cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016026:	ea5f 4920 	movs.w	r9, r0, asr #16
 801602a:	d44f      	bmi.n	80160cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801602c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016030:	454a      	cmp	r2, r9
 8016032:	dd4b      	ble.n	80160cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016034:	9a00      	ldr	r2, [sp, #0]
 8016036:	b236      	sxth	r6, r6
 8016038:	fb09 2606 	mla	r6, r9, r6, r2
 801603c:	5df2      	ldrb	r2, [r6, r7]
 801603e:	9e01      	ldr	r6, [sp, #4]
 8016040:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8016044:	0e3a      	lsrs	r2, r7, #24
 8016046:	d041      	beq.n	80160cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016048:	9e03      	ldr	r6, [sp, #12]
 801604a:	fa5f fb87 	uxtb.w	fp, r7
 801604e:	4372      	muls	r2, r6
 8016050:	1c56      	adds	r6, r2, #1
 8016052:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016056:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801605a:	1212      	asrs	r2, r2, #8
 801605c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016060:	fa1f fa82 	uxth.w	sl, r2
 8016064:	43d2      	mvns	r2, r2
 8016066:	fb1b fb0a 	smulbb	fp, fp, sl
 801606a:	b2d2      	uxtb	r2, r2
 801606c:	fb09 b902 	mla	r9, r9, r2, fp
 8016070:	fa1f f989 	uxth.w	r9, r9
 8016074:	f109 0b01 	add.w	fp, r9, #1
 8016078:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801607c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016080:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016084:	fb1b fb0a 	smulbb	fp, fp, sl
 8016088:	ea4f 2929 	mov.w	r9, r9, asr #8
 801608c:	fb17 fa0a 	smulbb	sl, r7, sl
 8016090:	f805 9006 	strb.w	r9, [r5, r6]
 8016094:	442e      	add	r6, r5
 8016096:	78b7      	ldrb	r7, [r6, #2]
 8016098:	f896 9001 	ldrb.w	r9, [r6, #1]
 801609c:	fb07 aa02 	mla	sl, r7, r2, sl
 80160a0:	fb09 b902 	mla	r9, r9, r2, fp
 80160a4:	fa1f fa8a 	uxth.w	sl, sl
 80160a8:	fa1f f989 	uxth.w	r9, r9
 80160ac:	f10a 0701 	add.w	r7, sl, #1
 80160b0:	f109 0b01 	add.w	fp, r9, #1
 80160b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80160b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80160bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80160c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80160c4:	f886 a002 	strb.w	sl, [r6, #2]
 80160c8:	f886 9001 	strb.w	r9, [r6, #1]
 80160cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80160ce:	4474      	add	r4, lr
 80160d0:	f108 0801 	add.w	r8, r8, #1
 80160d4:	4410      	add	r0, r2
 80160d6:	e760      	b.n	8015f9a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80160d8:	b005      	add	sp, #20
 80160da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80160de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e2:	b085      	sub	sp, #20
 80160e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80160e8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80160ea:	9203      	str	r2, [sp, #12]
 80160ec:	6868      	ldr	r0, [r5, #4]
 80160ee:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80160f2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80160f6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80160fa:	fb00 2404 	mla	r4, r0, r4, r2
 80160fe:	682a      	ldr	r2, [r5, #0]
 8016100:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016104:	4414      	add	r4, r2
 8016106:	f8dc 2000 	ldr.w	r2, [ip]
 801610a:	9201      	str	r2, [sp, #4]
 801610c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016110:	3204      	adds	r2, #4
 8016112:	9202      	str	r2, [sp, #8]
 8016114:	2900      	cmp	r1, #0
 8016116:	dc03      	bgt.n	8016120 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016118:	9a03      	ldr	r2, [sp, #12]
 801611a:	2a00      	cmp	r2, #0
 801611c:	f340 8137 	ble.w	801638e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016122:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016126:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801612a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801612c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016130:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016134:	2b00      	cmp	r3, #0
 8016136:	dd0d      	ble.n	8016154 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016138:	1405      	asrs	r5, r0, #16
 801613a:	d405      	bmi.n	8016148 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801613c:	4545      	cmp	r5, r8
 801613e:	da03      	bge.n	8016148 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016140:	1415      	asrs	r5, r2, #16
 8016142:	d401      	bmi.n	8016148 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016144:	42bd      	cmp	r5, r7
 8016146:	db06      	blt.n	8016156 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016148:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801614a:	4470      	add	r0, lr
 801614c:	3b01      	subs	r3, #1
 801614e:	3403      	adds	r4, #3
 8016150:	442a      	add	r2, r5
 8016152:	e7ef      	b.n	8016134 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8016154:	d070      	beq.n	8016238 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016156:	1e5d      	subs	r5, r3, #1
 8016158:	fb0e 0605 	mla	r6, lr, r5, r0
 801615c:	1436      	asrs	r6, r6, #16
 801615e:	d462      	bmi.n	8016226 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016160:	4546      	cmp	r6, r8
 8016162:	da60      	bge.n	8016226 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016164:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016166:	fb06 2505 	mla	r5, r6, r5, r2
 801616a:	142d      	asrs	r5, r5, #16
 801616c:	d45b      	bmi.n	8016226 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801616e:	42bd      	cmp	r5, r7
 8016170:	da59      	bge.n	8016226 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016172:	1ce5      	adds	r5, r4, #3
 8016174:	469a      	mov	sl, r3
 8016176:	f1ba 0f00 	cmp.w	sl, #0
 801617a:	dd58      	ble.n	801622e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801617c:	1416      	asrs	r6, r2, #16
 801617e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016182:	1407      	asrs	r7, r0, #16
 8016184:	46b1      	mov	r9, r6
 8016186:	9e01      	ldr	r6, [sp, #4]
 8016188:	fb08 6609 	mla	r6, r8, r9, r6
 801618c:	5df6      	ldrb	r6, [r6, r7]
 801618e:	9f02      	ldr	r7, [sp, #8]
 8016190:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8016194:	0e37      	lsrs	r7, r6, #24
 8016196:	2fff      	cmp	r7, #255	; 0xff
 8016198:	f000 80f0 	beq.w	801637c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801619c:	fa5f f887 	uxtb.w	r8, r7
 80161a0:	b3d7      	cbz	r7, 8016218 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80161a2:	fa1f f788 	uxth.w	r7, r8
 80161a6:	ea6f 0808 	mvn.w	r8, r8
 80161aa:	fa5f fb86 	uxtb.w	fp, r6
 80161ae:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80161b2:	fa5f f888 	uxtb.w	r8, r8
 80161b6:	fb1b fb07 	smulbb	fp, fp, r7
 80161ba:	fb09 b908 	mla	r9, r9, r8, fp
 80161be:	fa1f f989 	uxth.w	r9, r9
 80161c2:	f109 0b01 	add.w	fp, r9, #1
 80161c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80161ca:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80161ce:	fb1b fb08 	smulbb	fp, fp, r8
 80161d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80161d6:	f805 9c03 	strb.w	r9, [r5, #-3]
 80161da:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80161de:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80161e2:	fb09 b907 	mla	r9, r9, r7, fp
 80161e6:	fa1f f989 	uxth.w	r9, r9
 80161ea:	f109 0b01 	add.w	fp, r9, #1
 80161ee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80161f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80161f6:	f805 9c02 	strb.w	r9, [r5, #-2]
 80161fa:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80161fe:	fb19 f808 	smulbb	r8, r9, r8
 8016202:	fb06 8607 	mla	r6, r6, r7, r8
 8016206:	b2b6      	uxth	r6, r6
 8016208:	f106 0801 	add.w	r8, r6, #1
 801620c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8016210:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016214:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016218:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801621a:	4470      	add	r0, lr
 801621c:	3503      	adds	r5, #3
 801621e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016222:	4432      	add	r2, r6
 8016224:	e7a7      	b.n	8016176 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016226:	2600      	movs	r6, #0
 8016228:	1b9d      	subs	r5, r3, r6
 801622a:	2d00      	cmp	r5, #0
 801622c:	dc3b      	bgt.n	80162a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801622e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016232:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016236:	441c      	add	r4, r3
 8016238:	2900      	cmp	r1, #0
 801623a:	f340 80a8 	ble.w	801638e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801623e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016244:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016248:	3901      	subs	r1, #1
 801624a:	eeb0 6a62 	vmov.f32	s12, s5
 801624e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016252:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016256:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801625a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801625e:	eeb0 6a43 	vmov.f32	s12, s6
 8016262:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016266:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801626a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801626e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016272:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016276:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801627a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801627e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016282:	ee12 2a90 	vmov	r2, s5
 8016286:	eef0 2a47 	vmov.f32	s5, s14
 801628a:	fb92 fef3 	sdiv	lr, r2, r3
 801628e:	ee13 2a10 	vmov	r2, s6
 8016292:	eeb0 3a67 	vmov.f32	s6, s15
 8016296:	fb92 f3f3 	sdiv	r3, r2, r3
 801629a:	9a03      	ldr	r2, [sp, #12]
 801629c:	9312      	str	r3, [sp, #72]	; 0x48
 801629e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162a0:	bf08      	it	eq
 80162a2:	4613      	moveq	r3, r2
 80162a4:	e736      	b.n	8016114 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80162a6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80162aa:	d457      	bmi.n	801635c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80162ac:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80162b0:	4547      	cmp	r7, r8
 80162b2:	dd53      	ble.n	801635c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80162b4:	ea5f 4922 	movs.w	r9, r2, asr #16
 80162b8:	d450      	bmi.n	801635c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80162ba:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80162be:	454d      	cmp	r5, r9
 80162c0:	dd4c      	ble.n	801635c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80162c2:	9d01      	ldr	r5, [sp, #4]
 80162c4:	b23f      	sxth	r7, r7
 80162c6:	fb09 5707 	mla	r7, r9, r7, r5
 80162ca:	f817 5008 	ldrb.w	r5, [r7, r8]
 80162ce:	9f02      	ldr	r7, [sp, #8]
 80162d0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80162d4:	0e2f      	lsrs	r7, r5, #24
 80162d6:	2fff      	cmp	r7, #255	; 0xff
 80162d8:	d045      	beq.n	8016366 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80162da:	fa5f f987 	uxtb.w	r9, r7
 80162de:	b3ef      	cbz	r7, 801635c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80162e0:	fa1f f889 	uxth.w	r8, r9
 80162e4:	ea6f 0909 	mvn.w	r9, r9
 80162e8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80162ec:	fa5f fb85 	uxtb.w	fp, r5
 80162f0:	f814 a007 	ldrb.w	sl, [r4, r7]
 80162f4:	fa5f f989 	uxtb.w	r9, r9
 80162f8:	fb1b fb08 	smulbb	fp, fp, r8
 80162fc:	fb0a ba09 	mla	sl, sl, r9, fp
 8016300:	fa1f fa8a 	uxth.w	sl, sl
 8016304:	f10a 0b01 	add.w	fp, sl, #1
 8016308:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801630c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016310:	f804 a007 	strb.w	sl, [r4, r7]
 8016314:	4427      	add	r7, r4
 8016316:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801631a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801631e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8016322:	fb1b fb09 	smulbb	fp, fp, r9
 8016326:	fb0a ba08 	mla	sl, sl, r8, fp
 801632a:	fa1f fa8a 	uxth.w	sl, sl
 801632e:	f10a 0b01 	add.w	fp, sl, #1
 8016332:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8016336:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801633a:	f887 a001 	strb.w	sl, [r7, #1]
 801633e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016342:	fb1a f909 	smulbb	r9, sl, r9
 8016346:	fb05 9508 	mla	r5, r5, r8, r9
 801634a:	b2ad      	uxth	r5, r5
 801634c:	f105 0901 	add.w	r9, r5, #1
 8016350:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8016354:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016358:	f887 9002 	strb.w	r9, [r7, #2]
 801635c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801635e:	4470      	add	r0, lr
 8016360:	3601      	adds	r6, #1
 8016362:	442a      	add	r2, r5
 8016364:	e760      	b.n	8016228 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016366:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801636a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801636e:	55e5      	strb	r5, [r4, r7]
 8016370:	4427      	add	r7, r4
 8016372:	0c2d      	lsrs	r5, r5, #16
 8016374:	f887 8001 	strb.w	r8, [r7, #1]
 8016378:	70bd      	strb	r5, [r7, #2]
 801637a:	e7ef      	b.n	801635c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801637c:	0a37      	lsrs	r7, r6, #8
 801637e:	f805 6c03 	strb.w	r6, [r5, #-3]
 8016382:	0c36      	lsrs	r6, r6, #16
 8016384:	f805 7c02 	strb.w	r7, [r5, #-2]
 8016388:	f805 6c01 	strb.w	r6, [r5, #-1]
 801638c:	e744      	b.n	8016218 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801638e:	b005      	add	sp, #20
 8016390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016394 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016398:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801639a:	9201      	str	r2, [sp, #4]
 801639c:	6870      	ldr	r0, [r6, #4]
 801639e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80163a2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80163a6:	fa1f fe85 	uxth.w	lr, r5
 80163aa:	43ed      	mvns	r5, r5
 80163ac:	f8dc 8000 	ldr.w	r8, [ip]
 80163b0:	b2ed      	uxtb	r5, r5
 80163b2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80163b6:	fb00 2404 	mla	r4, r0, r4, r2
 80163ba:	6832      	ldr	r2, [r6, #0]
 80163bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80163c0:	4414      	add	r4, r2
 80163c2:	2900      	cmp	r1, #0
 80163c4:	dc03      	bgt.n	80163ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80163c6:	9a01      	ldr	r2, [sp, #4]
 80163c8:	2a00      	cmp	r2, #0
 80163ca:	f340 810d 	ble.w	80165e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80163ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80163d0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80163d4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80163d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80163da:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80163de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	dd0e      	ble.n	8016404 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80163e6:	1406      	asrs	r6, r0, #16
 80163e8:	d405      	bmi.n	80163f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80163ea:	4556      	cmp	r6, sl
 80163ec:	da03      	bge.n	80163f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80163ee:	1416      	asrs	r6, r2, #16
 80163f0:	d401      	bmi.n	80163f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80163f2:	454e      	cmp	r6, r9
 80163f4:	db07      	blt.n	8016406 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80163f6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80163f8:	3b01      	subs	r3, #1
 80163fa:	3403      	adds	r4, #3
 80163fc:	4430      	add	r0, r6
 80163fe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016400:	4432      	add	r2, r6
 8016402:	e7ee      	b.n	80163e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8016404:	d060      	beq.n	80164c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8016406:	1e5e      	subs	r6, r3, #1
 8016408:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801640a:	fb07 0706 	mla	r7, r7, r6, r0
 801640e:	143f      	asrs	r7, r7, #16
 8016410:	d451      	bmi.n	80164b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016412:	4557      	cmp	r7, sl
 8016414:	da4f      	bge.n	80164b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016416:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016418:	fb07 2606 	mla	r6, r7, r6, r2
 801641c:	1436      	asrs	r6, r6, #16
 801641e:	d44a      	bmi.n	80164b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016420:	454e      	cmp	r6, r9
 8016422:	da48      	bge.n	80164b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016424:	1ce6      	adds	r6, r4, #3
 8016426:	4699      	mov	r9, r3
 8016428:	f1b9 0f00 	cmp.w	r9, #0
 801642c:	f106 0603 	add.w	r6, r6, #3
 8016430:	dd45      	ble.n	80164be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8016432:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8016436:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801643a:	1417      	asrs	r7, r2, #16
 801643c:	f109 39ff 	add.w	r9, r9, #4294967295
 8016440:	fb0b a707 	mla	r7, fp, r7, sl
 8016444:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8016448:	fb1b fb05 	smulbb	fp, fp, r5
 801644c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016450:	eb08 0a07 	add.w	sl, r8, r7
 8016454:	f818 7007 	ldrb.w	r7, [r8, r7]
 8016458:	fb07 b70e 	mla	r7, r7, lr, fp
 801645c:	b2bf      	uxth	r7, r7
 801645e:	f107 0b01 	add.w	fp, r7, #1
 8016462:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016466:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801646a:	fb1b fb05 	smulbb	fp, fp, r5
 801646e:	123f      	asrs	r7, r7, #8
 8016470:	f806 7c06 	strb.w	r7, [r6, #-6]
 8016474:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016478:	fb07 b70e 	mla	r7, r7, lr, fp
 801647c:	b2bf      	uxth	r7, r7
 801647e:	f107 0b01 	add.w	fp, r7, #1
 8016482:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016486:	123f      	asrs	r7, r7, #8
 8016488:	f806 7c05 	strb.w	r7, [r6, #-5]
 801648c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8016490:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8016494:	fb1a fa05 	smulbb	sl, sl, r5
 8016498:	fb07 a70e 	mla	r7, r7, lr, sl
 801649c:	b2bf      	uxth	r7, r7
 801649e:	f107 0a01 	add.w	sl, r7, #1
 80164a2:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80164a6:	123f      	asrs	r7, r7, #8
 80164a8:	f806 7c04 	strb.w	r7, [r6, #-4]
 80164ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80164ae:	4438      	add	r0, r7
 80164b0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80164b2:	443a      	add	r2, r7
 80164b4:	e7b8      	b.n	8016428 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80164b6:	2700      	movs	r7, #0
 80164b8:	1bde      	subs	r6, r3, r7
 80164ba:	2e00      	cmp	r6, #0
 80164bc:	dc3f      	bgt.n	801653e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80164be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80164c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80164c6:	441c      	add	r4, r3
 80164c8:	2900      	cmp	r1, #0
 80164ca:	f340 808d 	ble.w	80165e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80164ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80164d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80164d8:	3901      	subs	r1, #1
 80164da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80164de:	eef0 6a62 	vmov.f32	s13, s5
 80164e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80164e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80164ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80164ee:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80164f2:	eef0 6a43 	vmov.f32	s13, s6
 80164f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80164fa:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80164fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016502:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016506:	ee77 2a62 	vsub.f32	s5, s14, s5
 801650a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801650e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016512:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016516:	ee12 2a90 	vmov	r2, s5
 801651a:	eef0 2a47 	vmov.f32	s5, s14
 801651e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016522:	ee13 2a10 	vmov	r2, s6
 8016526:	930f      	str	r3, [sp, #60]	; 0x3c
 8016528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801652a:	eeb0 3a67 	vmov.f32	s6, s15
 801652e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016532:	9a01      	ldr	r2, [sp, #4]
 8016534:	9310      	str	r3, [sp, #64]	; 0x40
 8016536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016538:	bf08      	it	eq
 801653a:	4613      	moveq	r3, r2
 801653c:	e741      	b.n	80163c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801653e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016542:	d44b      	bmi.n	80165dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016544:	f8dc b008 	ldr.w	fp, [ip, #8]
 8016548:	45cb      	cmp	fp, r9
 801654a:	dd47      	ble.n	80165dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801654c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016550:	d444      	bmi.n	80165dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016552:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8016556:	4556      	cmp	r6, sl
 8016558:	dd40      	ble.n	80165dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801655a:	fa0f f68b 	sxth.w	r6, fp
 801655e:	fb0a 9906 	mla	r9, sl, r6, r9
 8016562:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016566:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801656a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801656e:	fb1b fb05 	smulbb	fp, fp, r5
 8016572:	eb08 0a09 	add.w	sl, r8, r9
 8016576:	f818 9009 	ldrb.w	r9, [r8, r9]
 801657a:	fb09 b90e 	mla	r9, r9, lr, fp
 801657e:	fa1f f989 	uxth.w	r9, r9
 8016582:	f109 0b01 	add.w	fp, r9, #1
 8016586:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801658a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801658e:	f804 9006 	strb.w	r9, [r4, r6]
 8016592:	4426      	add	r6, r4
 8016594:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016598:	f896 b001 	ldrb.w	fp, [r6, #1]
 801659c:	fb1b fb05 	smulbb	fp, fp, r5
 80165a0:	fb09 b90e 	mla	r9, r9, lr, fp
 80165a4:	fa1f f989 	uxth.w	r9, r9
 80165a8:	f109 0b01 	add.w	fp, r9, #1
 80165ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80165b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80165b4:	f886 9001 	strb.w	r9, [r6, #1]
 80165b8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80165bc:	f896 a002 	ldrb.w	sl, [r6, #2]
 80165c0:	fb1a fa05 	smulbb	sl, sl, r5
 80165c4:	fb09 a90e 	mla	r9, r9, lr, sl
 80165c8:	fa1f f989 	uxth.w	r9, r9
 80165cc:	f109 0a01 	add.w	sl, r9, #1
 80165d0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80165d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80165d8:	f886 9002 	strb.w	r9, [r6, #2]
 80165dc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80165de:	3701      	adds	r7, #1
 80165e0:	4430      	add	r0, r6
 80165e2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80165e4:	4432      	add	r2, r6
 80165e6:	e767      	b.n	80164b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80165e8:	b003      	add	sp, #12
 80165ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80165ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80165f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80165f8:	9201      	str	r2, [sp, #4]
 80165fa:	6868      	ldr	r0, [r5, #4]
 80165fc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80165fe:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8016602:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8016606:	fb00 2404 	mla	r4, r0, r4, r2
 801660a:	682a      	ldr	r2, [r5, #0]
 801660c:	f8d7 8000 	ldr.w	r8, [r7]
 8016610:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016614:	4414      	add	r4, r2
 8016616:	2900      	cmp	r1, #0
 8016618:	dc03      	bgt.n	8016622 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801661a:	9a01      	ldr	r2, [sp, #4]
 801661c:	2a00      	cmp	r2, #0
 801661e:	f340 80af 	ble.w	8016780 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016622:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016624:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8016628:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801662c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801662e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8016632:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016636:	2b00      	cmp	r3, #0
 8016638:	dd0c      	ble.n	8016654 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801663a:	1405      	asrs	r5, r0, #16
 801663c:	d405      	bmi.n	801664a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801663e:	4555      	cmp	r5, sl
 8016640:	da03      	bge.n	801664a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016642:	1415      	asrs	r5, r2, #16
 8016644:	d401      	bmi.n	801664a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016646:	454d      	cmp	r5, r9
 8016648:	db05      	blt.n	8016656 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801664a:	4470      	add	r0, lr
 801664c:	4462      	add	r2, ip
 801664e:	3b01      	subs	r3, #1
 8016650:	3403      	adds	r4, #3
 8016652:	e7f0      	b.n	8016636 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016654:	d038      	beq.n	80166c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016656:	1e5d      	subs	r5, r3, #1
 8016658:	fb0e 0605 	mla	r6, lr, r5, r0
 801665c:	1436      	asrs	r6, r6, #16
 801665e:	d42a      	bmi.n	80166b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016660:	4556      	cmp	r6, sl
 8016662:	da28      	bge.n	80166b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016664:	fb0c 2505 	mla	r5, ip, r5, r2
 8016668:	142d      	asrs	r5, r5, #16
 801666a:	d424      	bmi.n	80166b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801666c:	454d      	cmp	r5, r9
 801666e:	da22      	bge.n	80166b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016670:	1ce6      	adds	r6, r4, #3
 8016672:	4699      	mov	r9, r3
 8016674:	f1b9 0f00 	cmp.w	r9, #0
 8016678:	f106 0603 	add.w	r6, r6, #3
 801667c:	dd1f      	ble.n	80166be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801667e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8016682:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016686:	1415      	asrs	r5, r2, #16
 8016688:	4470      	add	r0, lr
 801668a:	4462      	add	r2, ip
 801668c:	f109 39ff 	add.w	r9, r9, #4294967295
 8016690:	fb0b a505 	mla	r5, fp, r5, sl
 8016694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016698:	eb08 0a05 	add.w	sl, r8, r5
 801669c:	f818 5005 	ldrb.w	r5, [r8, r5]
 80166a0:	f806 5c06 	strb.w	r5, [r6, #-6]
 80166a4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80166a8:	f806 5c05 	strb.w	r5, [r6, #-5]
 80166ac:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80166b0:	f806 5c04 	strb.w	r5, [r6, #-4]
 80166b4:	e7de      	b.n	8016674 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80166b6:	2600      	movs	r6, #0
 80166b8:	1b9d      	subs	r5, r3, r6
 80166ba:	2d00      	cmp	r5, #0
 80166bc:	dc38      	bgt.n	8016730 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80166be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80166c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80166c6:	441c      	add	r4, r3
 80166c8:	2900      	cmp	r1, #0
 80166ca:	dd59      	ble.n	8016780 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80166cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80166d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80166d6:	3901      	subs	r1, #1
 80166d8:	eeb0 6a62 	vmov.f32	s12, s5
 80166dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80166e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80166e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80166e8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80166ec:	eeb0 6a43 	vmov.f32	s12, s6
 80166f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80166f4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80166f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80166fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016700:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016704:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016708:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801670c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016710:	ee12 2a90 	vmov	r2, s5
 8016714:	eef0 2a47 	vmov.f32	s5, s14
 8016718:	fb92 fef3 	sdiv	lr, r2, r3
 801671c:	ee13 2a10 	vmov	r2, s6
 8016720:	eeb0 3a67 	vmov.f32	s6, s15
 8016724:	fb92 fcf3 	sdiv	ip, r2, r3
 8016728:	9a01      	ldr	r2, [sp, #4]
 801672a:	bf08      	it	eq
 801672c:	4613      	moveq	r3, r2
 801672e:	e772      	b.n	8016616 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016730:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016734:	d420      	bmi.n	8016778 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016736:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801673a:	45cb      	cmp	fp, r9
 801673c:	dd1c      	ble.n	8016778 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801673e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016742:	d419      	bmi.n	8016778 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016744:	68fd      	ldr	r5, [r7, #12]
 8016746:	4555      	cmp	r5, sl
 8016748:	dd16      	ble.n	8016778 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801674a:	fa0f f58b 	sxth.w	r5, fp
 801674e:	fb0a 9505 	mla	r5, sl, r5, r9
 8016752:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016756:	f818 9005 	ldrb.w	r9, [r8, r5]
 801675a:	eb08 0b05 	add.w	fp, r8, r5
 801675e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8016762:	f804 9005 	strb.w	r9, [r4, r5]
 8016766:	4425      	add	r5, r4
 8016768:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801676c:	f885 9001 	strb.w	r9, [r5, #1]
 8016770:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8016774:	f885 9002 	strb.w	r9, [r5, #2]
 8016778:	4470      	add	r0, lr
 801677a:	4462      	add	r2, ip
 801677c:	3601      	adds	r6, #1
 801677e:	e79b      	b.n	80166b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8016780:	b003      	add	sp, #12
 8016782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016786 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016786:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801678a:	b085      	sub	sp, #20
 801678c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016790:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016792:	9202      	str	r2, [sp, #8]
 8016794:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8016798:	6860      	ldr	r0, [r4, #4]
 801679a:	9203      	str	r2, [sp, #12]
 801679c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80167a0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80167a4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80167a8:	fb00 2505 	mla	r5, r0, r5, r2
 80167ac:	6822      	ldr	r2, [r4, #0]
 80167ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80167b2:	4415      	add	r5, r2
 80167b4:	f8dc 2000 	ldr.w	r2, [ip]
 80167b8:	9201      	str	r2, [sp, #4]
 80167ba:	2900      	cmp	r1, #0
 80167bc:	dc03      	bgt.n	80167c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80167be:	9a02      	ldr	r2, [sp, #8]
 80167c0:	2a00      	cmp	r2, #0
 80167c2:	f340 8122 	ble.w	8016a0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80167c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80167c8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80167cc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80167d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80167d2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80167d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80167da:	2b00      	cmp	r3, #0
 80167dc:	dd0d      	ble.n	80167fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80167de:	1422      	asrs	r2, r4, #16
 80167e0:	d405      	bmi.n	80167ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80167e2:	4542      	cmp	r2, r8
 80167e4:	da03      	bge.n	80167ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80167e6:	1402      	asrs	r2, r0, #16
 80167e8:	d401      	bmi.n	80167ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80167ea:	42ba      	cmp	r2, r7
 80167ec:	db06      	blt.n	80167fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80167ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80167f0:	4474      	add	r4, lr
 80167f2:	3b01      	subs	r3, #1
 80167f4:	3503      	adds	r5, #3
 80167f6:	4410      	add	r0, r2
 80167f8:	e7ef      	b.n	80167da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80167fa:	d072      	beq.n	80168e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80167fc:	1e5a      	subs	r2, r3, #1
 80167fe:	fb0e 4602 	mla	r6, lr, r2, r4
 8016802:	1436      	asrs	r6, r6, #16
 8016804:	d462      	bmi.n	80168cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016806:	4546      	cmp	r6, r8
 8016808:	da60      	bge.n	80168cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801680a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801680c:	fb06 0202 	mla	r2, r6, r2, r0
 8016810:	1412      	asrs	r2, r2, #16
 8016812:	d45b      	bmi.n	80168cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016814:	42ba      	cmp	r2, r7
 8016816:	da59      	bge.n	80168cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016818:	1cef      	adds	r7, r5, #3
 801681a:	4699      	mov	r9, r3
 801681c:	f1b9 0f00 	cmp.w	r9, #0
 8016820:	dd5a      	ble.n	80168d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016822:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016826:	1426      	asrs	r6, r4, #16
 8016828:	1402      	asrs	r2, r0, #16
 801682a:	fb08 6202 	mla	r2, r8, r2, r6
 801682e:	9e01      	ldr	r6, [sp, #4]
 8016830:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016834:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016838:	d041      	beq.n	80168be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801683a:	9a03      	ldr	r2, [sp, #12]
 801683c:	fa5f fb86 	uxtb.w	fp, r6
 8016840:	fb02 f808 	mul.w	r8, r2, r8
 8016844:	f108 0201 	add.w	r2, r8, #1
 8016848:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801684c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016850:	1212      	asrs	r2, r2, #8
 8016852:	fa1f fa82 	uxth.w	sl, r2
 8016856:	43d2      	mvns	r2, r2
 8016858:	fb1b fb0a 	smulbb	fp, fp, sl
 801685c:	b2d2      	uxtb	r2, r2
 801685e:	fb08 b802 	mla	r8, r8, r2, fp
 8016862:	fa1f f888 	uxth.w	r8, r8
 8016866:	f108 0b01 	add.w	fp, r8, #1
 801686a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801686e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016872:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016876:	fb1b fb0a 	smulbb	fp, fp, sl
 801687a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801687e:	fb16 fa0a 	smulbb	sl, r6, sl
 8016882:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016886:	f807 8c03 	strb.w	r8, [r7, #-3]
 801688a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801688e:	fb06 aa02 	mla	sl, r6, r2, sl
 8016892:	fb08 b802 	mla	r8, r8, r2, fp
 8016896:	fa1f fa8a 	uxth.w	sl, sl
 801689a:	fa1f f888 	uxth.w	r8, r8
 801689e:	f10a 0601 	add.w	r6, sl, #1
 80168a2:	f108 0b01 	add.w	fp, r8, #1
 80168a6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80168aa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80168ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80168b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80168b6:	f807 ac01 	strb.w	sl, [r7, #-1]
 80168ba:	f807 8c02 	strb.w	r8, [r7, #-2]
 80168be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80168c0:	4474      	add	r4, lr
 80168c2:	3703      	adds	r7, #3
 80168c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80168c8:	4410      	add	r0, r2
 80168ca:	e7a7      	b.n	801681c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80168cc:	f04f 0800 	mov.w	r8, #0
 80168d0:	eba3 0208 	sub.w	r2, r3, r8
 80168d4:	2a00      	cmp	r2, #0
 80168d6:	dc3b      	bgt.n	8016950 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80168d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80168dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80168e0:	441d      	add	r5, r3
 80168e2:	2900      	cmp	r1, #0
 80168e4:	f340 8091 	ble.w	8016a0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80168e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80168ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80168f2:	3901      	subs	r1, #1
 80168f4:	eeb0 6a62 	vmov.f32	s12, s5
 80168f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80168fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016900:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016904:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016908:	eeb0 6a43 	vmov.f32	s12, s6
 801690c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016910:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016914:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016918:	ee61 7a27 	vmul.f32	s15, s2, s15
 801691c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016920:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016924:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016928:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801692c:	ee12 2a90 	vmov	r2, s5
 8016930:	eef0 2a47 	vmov.f32	s5, s14
 8016934:	fb92 fef3 	sdiv	lr, r2, r3
 8016938:	ee13 2a10 	vmov	r2, s6
 801693c:	eeb0 3a67 	vmov.f32	s6, s15
 8016940:	fb92 f3f3 	sdiv	r3, r2, r3
 8016944:	9a02      	ldr	r2, [sp, #8]
 8016946:	9312      	str	r3, [sp, #72]	; 0x48
 8016948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801694a:	bf08      	it	eq
 801694c:	4613      	moveq	r3, r2
 801694e:	e734      	b.n	80167ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016950:	1427      	asrs	r7, r4, #16
 8016952:	d454      	bmi.n	80169fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016954:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016958:	42be      	cmp	r6, r7
 801695a:	dd50      	ble.n	80169fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801695c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016960:	d44d      	bmi.n	80169fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016962:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016966:	454a      	cmp	r2, r9
 8016968:	dd49      	ble.n	80169fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801696a:	b236      	sxth	r6, r6
 801696c:	9a01      	ldr	r2, [sp, #4]
 801696e:	fb09 7606 	mla	r6, r9, r6, r7
 8016972:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016976:	0e3a      	lsrs	r2, r7, #24
 8016978:	d041      	beq.n	80169fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801697a:	9e03      	ldr	r6, [sp, #12]
 801697c:	fa5f fb87 	uxtb.w	fp, r7
 8016980:	4372      	muls	r2, r6
 8016982:	1c56      	adds	r6, r2, #1
 8016984:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016988:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801698c:	1212      	asrs	r2, r2, #8
 801698e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016992:	fa1f fa82 	uxth.w	sl, r2
 8016996:	43d2      	mvns	r2, r2
 8016998:	fb1b fb0a 	smulbb	fp, fp, sl
 801699c:	b2d2      	uxtb	r2, r2
 801699e:	fb09 b902 	mla	r9, r9, r2, fp
 80169a2:	fa1f f989 	uxth.w	r9, r9
 80169a6:	f109 0b01 	add.w	fp, r9, #1
 80169aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80169ae:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80169b2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80169b6:	fb1b fb0a 	smulbb	fp, fp, sl
 80169ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80169be:	fb17 fa0a 	smulbb	sl, r7, sl
 80169c2:	f805 9006 	strb.w	r9, [r5, r6]
 80169c6:	442e      	add	r6, r5
 80169c8:	78b7      	ldrb	r7, [r6, #2]
 80169ca:	f896 9001 	ldrb.w	r9, [r6, #1]
 80169ce:	fb07 aa02 	mla	sl, r7, r2, sl
 80169d2:	fb09 b902 	mla	r9, r9, r2, fp
 80169d6:	fa1f fa8a 	uxth.w	sl, sl
 80169da:	fa1f f989 	uxth.w	r9, r9
 80169de:	f10a 0701 	add.w	r7, sl, #1
 80169e2:	f109 0b01 	add.w	fp, r9, #1
 80169e6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80169ea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80169ee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80169f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80169f6:	f886 a002 	strb.w	sl, [r6, #2]
 80169fa:	f886 9001 	strb.w	r9, [r6, #1]
 80169fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a00:	4474      	add	r4, lr
 8016a02:	f108 0801 	add.w	r8, r8, #1
 8016a06:	4410      	add	r0, r2
 8016a08:	e762      	b.n	80168d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016a0a:	b005      	add	sp, #20
 8016a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a14:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016a1a:	9201      	str	r2, [sp, #4]
 8016a1c:	6860      	ldr	r0, [r4, #4]
 8016a1e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8016a22:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8016a26:	fb00 2505 	mla	r5, r0, r5, r2
 8016a2a:	6822      	ldr	r2, [r4, #0]
 8016a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a30:	4415      	add	r5, r2
 8016a32:	f8dc 2000 	ldr.w	r2, [ip]
 8016a36:	9200      	str	r2, [sp, #0]
 8016a38:	2900      	cmp	r1, #0
 8016a3a:	dc03      	bgt.n	8016a44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016a3c:	9a01      	ldr	r2, [sp, #4]
 8016a3e:	2a00      	cmp	r2, #0
 8016a40:	f340 812b 	ble.w	8016c9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016a44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a46:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016a4a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a50:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016a54:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	dd0e      	ble.n	8016a7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016a5c:	1422      	asrs	r2, r4, #16
 8016a5e:	d405      	bmi.n	8016a6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a60:	4572      	cmp	r2, lr
 8016a62:	da03      	bge.n	8016a6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a64:	1402      	asrs	r2, r0, #16
 8016a66:	d401      	bmi.n	8016a6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a68:	42ba      	cmp	r2, r7
 8016a6a:	db07      	blt.n	8016a7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016a6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a6e:	3b01      	subs	r3, #1
 8016a70:	3503      	adds	r5, #3
 8016a72:	4414      	add	r4, r2
 8016a74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016a76:	4410      	add	r0, r2
 8016a78:	e7ee      	b.n	8016a58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016a7a:	d06f      	beq.n	8016b5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016a7c:	1e5a      	subs	r2, r3, #1
 8016a7e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016a80:	fb06 4602 	mla	r6, r6, r2, r4
 8016a84:	1436      	asrs	r6, r6, #16
 8016a86:	d45e      	bmi.n	8016b46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a88:	4576      	cmp	r6, lr
 8016a8a:	da5c      	bge.n	8016b46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a8c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016a8e:	fb06 0202 	mla	r2, r6, r2, r0
 8016a92:	1412      	asrs	r2, r2, #16
 8016a94:	d457      	bmi.n	8016b46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a96:	42ba      	cmp	r2, r7
 8016a98:	da55      	bge.n	8016b46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a9a:	1cee      	adds	r6, r5, #3
 8016a9c:	469a      	mov	sl, r3
 8016a9e:	f1ba 0f00 	cmp.w	sl, #0
 8016aa2:	dd56      	ble.n	8016b52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016aa4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016aa8:	1427      	asrs	r7, r4, #16
 8016aaa:	1402      	asrs	r2, r0, #16
 8016aac:	fb0e 7202 	mla	r2, lr, r2, r7
 8016ab0:	9f00      	ldr	r7, [sp, #0]
 8016ab2:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016ab6:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016aba:	d03c      	beq.n	8016b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016abc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016ac0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016ac4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016ac8:	fa5f f28e 	uxtb.w	r2, lr
 8016acc:	b2ff      	uxtb	r7, r7
 8016ace:	f000 80dd 	beq.w	8016c8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016ad2:	fa1f f882 	uxth.w	r8, r2
 8016ad6:	43d2      	mvns	r2, r2
 8016ad8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016adc:	fb17 f708 	smulbb	r7, r7, r8
 8016ae0:	b2d2      	uxtb	r2, r2
 8016ae2:	fb19 f908 	smulbb	r9, r9, r8
 8016ae6:	fb0e 7702 	mla	r7, lr, r2, r7
 8016aea:	fb1b f808 	smulbb	r8, fp, r8
 8016aee:	b2bf      	uxth	r7, r7
 8016af0:	f107 0e01 	add.w	lr, r7, #1
 8016af4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016af8:	123f      	asrs	r7, r7, #8
 8016afa:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016afe:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016b02:	fb07 9902 	mla	r9, r7, r2, r9
 8016b06:	fa1f f989 	uxth.w	r9, r9
 8016b0a:	f109 0701 	add.w	r7, r9, #1
 8016b0e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016b12:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016b16:	fb07 8802 	mla	r8, r7, r2, r8
 8016b1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016b1e:	fa1f f888 	uxth.w	r8, r8
 8016b22:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016b26:	f108 0201 	add.w	r2, r8, #1
 8016b2a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016b2e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016b32:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016b36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016b38:	3603      	adds	r6, #3
 8016b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b3e:	4414      	add	r4, r2
 8016b40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016b42:	4410      	add	r0, r2
 8016b44:	e7ab      	b.n	8016a9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016b46:	f04f 0e00 	mov.w	lr, #0
 8016b4a:	eba3 020e 	sub.w	r2, r3, lr
 8016b4e:	2a00      	cmp	r2, #0
 8016b50:	dc3d      	bgt.n	8016bce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016b52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016b56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016b5a:	441d      	add	r5, r3
 8016b5c:	2900      	cmp	r1, #0
 8016b5e:	f340 809c 	ble.w	8016c9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016b62:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016b6c:	3901      	subs	r1, #1
 8016b6e:	eeb0 6a62 	vmov.f32	s12, s5
 8016b72:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016b76:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b7e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016b82:	eeb0 6a43 	vmov.f32	s12, s6
 8016b86:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b8a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016b8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016b92:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b96:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016ba2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016ba6:	ee12 2a90 	vmov	r2, s5
 8016baa:	eef0 2a47 	vmov.f32	s5, s14
 8016bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8016bb2:	ee13 2a10 	vmov	r2, s6
 8016bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bba:	eeb0 3a67 	vmov.f32	s6, s15
 8016bbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8016bc2:	9a01      	ldr	r2, [sp, #4]
 8016bc4:	9310      	str	r3, [sp, #64]	; 0x40
 8016bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bc8:	bf08      	it	eq
 8016bca:	4613      	moveq	r3, r2
 8016bcc:	e734      	b.n	8016a38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016bce:	1427      	asrs	r7, r4, #16
 8016bd0:	d44d      	bmi.n	8016c6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016bd2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016bd6:	42be      	cmp	r6, r7
 8016bd8:	dd49      	ble.n	8016c6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016bda:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016bde:	d446      	bmi.n	8016c6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016be0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016be4:	4542      	cmp	r2, r8
 8016be6:	dd42      	ble.n	8016c6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016be8:	b236      	sxth	r6, r6
 8016bea:	9a00      	ldr	r2, [sp, #0]
 8016bec:	fb08 7606 	mla	r6, r8, r6, r7
 8016bf0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016bf4:	0e3a      	lsrs	r2, r7, #24
 8016bf6:	d03a      	beq.n	8016c6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016bf8:	2aff      	cmp	r2, #255	; 0xff
 8016bfa:	b2d6      	uxtb	r6, r2
 8016bfc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016c00:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016c04:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8016c08:	b2ff      	uxtb	r7, r7
 8016c0a:	d037      	beq.n	8016c7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016c0c:	fa1f f986 	uxth.w	r9, r6
 8016c10:	4472      	add	r2, lr
 8016c12:	43f6      	mvns	r6, r6
 8016c14:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016c18:	fb17 f709 	smulbb	r7, r7, r9
 8016c1c:	fb1a fa09 	smulbb	sl, sl, r9
 8016c20:	b2f6      	uxtb	r6, r6
 8016c22:	fb1b f909 	smulbb	r9, fp, r9
 8016c26:	fb08 7706 	mla	r7, r8, r6, r7
 8016c2a:	b2bf      	uxth	r7, r7
 8016c2c:	f107 0801 	add.w	r8, r7, #1
 8016c30:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016c34:	123f      	asrs	r7, r7, #8
 8016c36:	54af      	strb	r7, [r5, r2]
 8016c38:	442a      	add	r2, r5
 8016c3a:	7857      	ldrb	r7, [r2, #1]
 8016c3c:	fb07 aa06 	mla	sl, r7, r6, sl
 8016c40:	fa1f fa8a 	uxth.w	sl, sl
 8016c44:	f10a 0701 	add.w	r7, sl, #1
 8016c48:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016c4c:	7897      	ldrb	r7, [r2, #2]
 8016c4e:	fb07 9906 	mla	r9, r7, r6, r9
 8016c52:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016c56:	fa1f f989 	uxth.w	r9, r9
 8016c5a:	f882 a001 	strb.w	sl, [r2, #1]
 8016c5e:	f109 0601 	add.w	r6, r9, #1
 8016c62:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8016c66:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016c6a:	f882 9002 	strb.w	r9, [r2, #2]
 8016c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c70:	f10e 0e01 	add.w	lr, lr, #1
 8016c74:	4414      	add	r4, r2
 8016c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016c78:	4410      	add	r0, r2
 8016c7a:	e766      	b.n	8016b4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016c7c:	4472      	add	r2, lr
 8016c7e:	54af      	strb	r7, [r5, r2]
 8016c80:	442a      	add	r2, r5
 8016c82:	f882 a001 	strb.w	sl, [r2, #1]
 8016c86:	f882 b002 	strb.w	fp, [r2, #2]
 8016c8a:	e7f0      	b.n	8016c6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016c8c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016c90:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016c94:	f806 bc01 	strb.w	fp, [r6, #-1]
 8016c98:	e74d      	b.n	8016b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016c9a:	b003      	add	sp, #12
 8016c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ca0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca4:	b087      	sub	sp, #28
 8016ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016caa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016cac:	9204      	str	r2, [sp, #16]
 8016cae:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016cb2:	6860      	ldr	r0, [r4, #4]
 8016cb4:	9205      	str	r2, [sp, #20]
 8016cb6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016cba:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8016cbe:	9101      	str	r1, [sp, #4]
 8016cc0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8016cc4:	fb00 2505 	mla	r5, r0, r5, r2
 8016cc8:	6822      	ldr	r2, [r4, #0]
 8016cca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016cce:	4415      	add	r5, r2
 8016cd0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016cd4:	3201      	adds	r2, #1
 8016cd6:	f022 0201 	bic.w	r2, r2, #1
 8016cda:	9202      	str	r2, [sp, #8]
 8016cdc:	f8dc 2000 	ldr.w	r2, [ip]
 8016ce0:	9203      	str	r2, [sp, #12]
 8016ce2:	9a01      	ldr	r2, [sp, #4]
 8016ce4:	2a00      	cmp	r2, #0
 8016ce6:	dc03      	bgt.n	8016cf0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016ce8:	9a04      	ldr	r2, [sp, #16]
 8016cea:	2a00      	cmp	r2, #0
 8016cec:	f340 8135 	ble.w	8016f5a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016cf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016cf2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016cf6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016cfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016cfc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016d00:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	dd0d      	ble.n	8016d24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016d08:	1422      	asrs	r2, r4, #16
 8016d0a:	d405      	bmi.n	8016d18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016d0c:	4542      	cmp	r2, r8
 8016d0e:	da03      	bge.n	8016d18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016d10:	1402      	asrs	r2, r0, #16
 8016d12:	d401      	bmi.n	8016d18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016d14:	42ba      	cmp	r2, r7
 8016d16:	db06      	blt.n	8016d26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016d18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d1a:	4474      	add	r4, lr
 8016d1c:	3b01      	subs	r3, #1
 8016d1e:	3503      	adds	r5, #3
 8016d20:	4410      	add	r0, r2
 8016d22:	e7ef      	b.n	8016d04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016d24:	d077      	beq.n	8016e16 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8016d26:	1e5a      	subs	r2, r3, #1
 8016d28:	fb0e 4602 	mla	r6, lr, r2, r4
 8016d2c:	1436      	asrs	r6, r6, #16
 8016d2e:	d469      	bmi.n	8016e04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016d30:	4546      	cmp	r6, r8
 8016d32:	da67      	bge.n	8016e04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016d34:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8016d36:	fb06 0202 	mla	r2, r6, r2, r0
 8016d3a:	1412      	asrs	r2, r2, #16
 8016d3c:	d462      	bmi.n	8016e04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016d3e:	42ba      	cmp	r2, r7
 8016d40:	da60      	bge.n	8016e04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016d42:	1cee      	adds	r6, r5, #3
 8016d44:	4699      	mov	r9, r3
 8016d46:	f1b9 0f00 	cmp.w	r9, #0
 8016d4a:	dd5f      	ble.n	8016e0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016d4c:	1422      	asrs	r2, r4, #16
 8016d4e:	9902      	ldr	r1, [sp, #8]
 8016d50:	1407      	asrs	r7, r0, #16
 8016d52:	fb01 2707 	mla	r7, r1, r7, r2
 8016d56:	9903      	ldr	r1, [sp, #12]
 8016d58:	087a      	lsrs	r2, r7, #1
 8016d5a:	5c8a      	ldrb	r2, [r1, r2]
 8016d5c:	07f9      	lsls	r1, r7, #31
 8016d5e:	bf54      	ite	pl
 8016d60:	f002 020f 	andpl.w	r2, r2, #15
 8016d64:	1112      	asrmi	r2, r2, #4
 8016d66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016d6a:	b2d2      	uxtb	r2, r2
 8016d6c:	2a00      	cmp	r2, #0
 8016d6e:	d042      	beq.n	8016df6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016d70:	497b      	ldr	r1, [pc, #492]	; (8016f60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016d72:	680f      	ldr	r7, [r1, #0]
 8016d74:	9905      	ldr	r1, [sp, #20]
 8016d76:	fa5f fb87 	uxtb.w	fp, r7
 8016d7a:	434a      	muls	r2, r1
 8016d7c:	f102 0801 	add.w	r8, r2, #1
 8016d80:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8016d84:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8016d88:	1212      	asrs	r2, r2, #8
 8016d8a:	fa1f fa82 	uxth.w	sl, r2
 8016d8e:	43d2      	mvns	r2, r2
 8016d90:	fb1b fb0a 	smulbb	fp, fp, sl
 8016d94:	b2d2      	uxtb	r2, r2
 8016d96:	fb08 b802 	mla	r8, r8, r2, fp
 8016d9a:	fa1f f888 	uxth.w	r8, r8
 8016d9e:	f108 0b01 	add.w	fp, r8, #1
 8016da2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016da6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016daa:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016dae:	fb1b fb0a 	smulbb	fp, fp, sl
 8016db2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016db6:	fb17 fa0a 	smulbb	sl, r7, sl
 8016dba:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016dbe:	f806 8c03 	strb.w	r8, [r6, #-3]
 8016dc2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8016dc6:	fb07 aa02 	mla	sl, r7, r2, sl
 8016dca:	fb08 b802 	mla	r8, r8, r2, fp
 8016dce:	fa1f fa8a 	uxth.w	sl, sl
 8016dd2:	fa1f f888 	uxth.w	r8, r8
 8016dd6:	f10a 0701 	add.w	r7, sl, #1
 8016dda:	f108 0b01 	add.w	fp, r8, #1
 8016dde:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016de2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016de6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016dea:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016dee:	f806 ac01 	strb.w	sl, [r6, #-1]
 8016df2:	f806 8c02 	strb.w	r8, [r6, #-2]
 8016df6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016df8:	4474      	add	r4, lr
 8016dfa:	3603      	adds	r6, #3
 8016dfc:	f109 39ff 	add.w	r9, r9, #4294967295
 8016e00:	4410      	add	r0, r2
 8016e02:	e7a0      	b.n	8016d46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016e04:	2700      	movs	r7, #0
 8016e06:	1bda      	subs	r2, r3, r7
 8016e08:	2a00      	cmp	r2, #0
 8016e0a:	dc3e      	bgt.n	8016e8a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016e0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016e10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e14:	441d      	add	r5, r3
 8016e16:	9b01      	ldr	r3, [sp, #4]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	f340 809e 	ble.w	8016f5a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016e1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016e28:	eeb0 6a62 	vmov.f32	s12, s5
 8016e2c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016e30:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016e34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e38:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016e3c:	eeb0 6a43 	vmov.f32	s12, s6
 8016e40:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e44:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016e48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016e4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016e50:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016e54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016e58:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016e5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016e60:	ee12 2a90 	vmov	r2, s5
 8016e64:	eef0 2a47 	vmov.f32	s5, s14
 8016e68:	fb92 fef3 	sdiv	lr, r2, r3
 8016e6c:	ee13 2a10 	vmov	r2, s6
 8016e70:	eeb0 3a67 	vmov.f32	s6, s15
 8016e74:	fb92 f3f3 	sdiv	r3, r2, r3
 8016e78:	9314      	str	r3, [sp, #80]	; 0x50
 8016e7a:	9b01      	ldr	r3, [sp, #4]
 8016e7c:	9a04      	ldr	r2, [sp, #16]
 8016e7e:	3b01      	subs	r3, #1
 8016e80:	9301      	str	r3, [sp, #4]
 8016e82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e84:	bf08      	it	eq
 8016e86:	4613      	moveq	r3, r2
 8016e88:	e72b      	b.n	8016ce2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016e8a:	1426      	asrs	r6, r4, #16
 8016e8c:	d460      	bmi.n	8016f50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e8e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016e92:	42b2      	cmp	r2, r6
 8016e94:	dd5c      	ble.n	8016f50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e96:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016e9a:	d459      	bmi.n	8016f50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e9c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016ea0:	4542      	cmp	r2, r8
 8016ea2:	dd55      	ble.n	8016f50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016ea4:	9a02      	ldr	r2, [sp, #8]
 8016ea6:	9903      	ldr	r1, [sp, #12]
 8016ea8:	fb08 6602 	mla	r6, r8, r2, r6
 8016eac:	0872      	lsrs	r2, r6, #1
 8016eae:	07f6      	lsls	r6, r6, #31
 8016eb0:	5c8a      	ldrb	r2, [r1, r2]
 8016eb2:	bf54      	ite	pl
 8016eb4:	f002 020f 	andpl.w	r2, r2, #15
 8016eb8:	1112      	asrmi	r2, r2, #4
 8016eba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016ebe:	b2d2      	uxtb	r2, r2
 8016ec0:	2a00      	cmp	r2, #0
 8016ec2:	d045      	beq.n	8016f50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016ec4:	4926      	ldr	r1, [pc, #152]	; (8016f60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016ec6:	f8d1 8000 	ldr.w	r8, [r1]
 8016eca:	9905      	ldr	r1, [sp, #20]
 8016ecc:	fa5f fb88 	uxtb.w	fp, r8
 8016ed0:	434a      	muls	r2, r1
 8016ed2:	1c56      	adds	r6, r2, #1
 8016ed4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016ed8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016edc:	1212      	asrs	r2, r2, #8
 8016ede:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016ee2:	fa1f fa82 	uxth.w	sl, r2
 8016ee6:	43d2      	mvns	r2, r2
 8016ee8:	fb1b fb0a 	smulbb	fp, fp, sl
 8016eec:	b2d2      	uxtb	r2, r2
 8016eee:	fb09 b902 	mla	r9, r9, r2, fp
 8016ef2:	fa1f f989 	uxth.w	r9, r9
 8016ef6:	f109 0b01 	add.w	fp, r9, #1
 8016efa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016efe:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8016f02:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8016f06:	fb1b fb0a 	smulbb	fp, fp, sl
 8016f0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016f0e:	fb18 fa0a 	smulbb	sl, r8, sl
 8016f12:	f805 9006 	strb.w	r9, [r5, r6]
 8016f16:	442e      	add	r6, r5
 8016f18:	f896 8002 	ldrb.w	r8, [r6, #2]
 8016f1c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016f20:	fb08 aa02 	mla	sl, r8, r2, sl
 8016f24:	fb09 b902 	mla	r9, r9, r2, fp
 8016f28:	fa1f fa8a 	uxth.w	sl, sl
 8016f2c:	fa1f f989 	uxth.w	r9, r9
 8016f30:	f10a 0801 	add.w	r8, sl, #1
 8016f34:	f109 0b01 	add.w	fp, r9, #1
 8016f38:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8016f3c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016f40:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016f44:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016f48:	f886 a002 	strb.w	sl, [r6, #2]
 8016f4c:	f886 9001 	strb.w	r9, [r6, #1]
 8016f50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016f52:	4474      	add	r4, lr
 8016f54:	3701      	adds	r7, #1
 8016f56:	4410      	add	r0, r2
 8016f58:	e755      	b.n	8016e06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8016f5a:	b007      	add	sp, #28
 8016f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f60:	2000df78 	.word	0x2000df78

08016f64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f68:	b085      	sub	sp, #20
 8016f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016f70:	9203      	str	r2, [sp, #12]
 8016f72:	6860      	ldr	r0, [r4, #4]
 8016f74:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016f78:	9100      	str	r1, [sp, #0]
 8016f7a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8016f7e:	fb00 2606 	mla	r6, r0, r6, r2
 8016f82:	6822      	ldr	r2, [r4, #0]
 8016f84:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016f88:	4416      	add	r6, r2
 8016f8a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016f8e:	3201      	adds	r2, #1
 8016f90:	f022 0201 	bic.w	r2, r2, #1
 8016f94:	9201      	str	r2, [sp, #4]
 8016f96:	f8dc 2000 	ldr.w	r2, [ip]
 8016f9a:	9202      	str	r2, [sp, #8]
 8016f9c:	9a00      	ldr	r2, [sp, #0]
 8016f9e:	2a00      	cmp	r2, #0
 8016fa0:	dc03      	bgt.n	8016faa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8016fa2:	9a03      	ldr	r2, [sp, #12]
 8016fa4:	2a00      	cmp	r2, #0
 8016fa6:	f340 8140 	ble.w	801722a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8016faa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fac:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016fb0:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8016fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016fb6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016fba:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	dd0e      	ble.n	8016fe0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016fc2:	142a      	asrs	r2, r5, #16
 8016fc4:	d405      	bmi.n	8016fd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016fc6:	4572      	cmp	r2, lr
 8016fc8:	da03      	bge.n	8016fd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016fca:	1422      	asrs	r2, r4, #16
 8016fcc:	d401      	bmi.n	8016fd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016fce:	42ba      	cmp	r2, r7
 8016fd0:	db07      	blt.n	8016fe2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016fd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016fd4:	3b01      	subs	r3, #1
 8016fd6:	3603      	adds	r6, #3
 8016fd8:	4415      	add	r5, r2
 8016fda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016fdc:	4414      	add	r4, r2
 8016fde:	e7ee      	b.n	8016fbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016fe0:	d072      	beq.n	80170c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016fe2:	1e5a      	subs	r2, r3, #1
 8016fe4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016fe6:	fb00 5002 	mla	r0, r0, r2, r5
 8016fea:	1400      	asrs	r0, r0, #16
 8016fec:	d463      	bmi.n	80170b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016fee:	4570      	cmp	r0, lr
 8016ff0:	da61      	bge.n	80170b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016ff2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016ff4:	fb00 4202 	mla	r2, r0, r2, r4
 8016ff8:	1412      	asrs	r2, r2, #16
 8016ffa:	d45c      	bmi.n	80170b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016ffc:	42ba      	cmp	r2, r7
 8016ffe:	da5a      	bge.n	80170b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017000:	1cf0      	adds	r0, r6, #3
 8017002:	469a      	mov	sl, r3
 8017004:	f1ba 0f00 	cmp.w	sl, #0
 8017008:	dd59      	ble.n	80170be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801700a:	142a      	asrs	r2, r5, #16
 801700c:	9901      	ldr	r1, [sp, #4]
 801700e:	1427      	asrs	r7, r4, #16
 8017010:	fb01 2707 	mla	r7, r1, r7, r2
 8017014:	9902      	ldr	r1, [sp, #8]
 8017016:	087a      	lsrs	r2, r7, #1
 8017018:	5c8a      	ldrb	r2, [r1, r2]
 801701a:	07f9      	lsls	r1, r7, #31
 801701c:	bf54      	ite	pl
 801701e:	f002 020f 	andpl.w	r2, r2, #15
 8017022:	1112      	asrmi	r2, r2, #4
 8017024:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017028:	b2d2      	uxtb	r2, r2
 801702a:	2a00      	cmp	r2, #0
 801702c:	d03b      	beq.n	80170a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801702e:	4980      	ldr	r1, [pc, #512]	; (8017230 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017030:	2aff      	cmp	r2, #255	; 0xff
 8017032:	680f      	ldr	r7, [r1, #0]
 8017034:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017038:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801703c:	b2ff      	uxtb	r7, r7
 801703e:	f000 80ed 	beq.w	801721c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8017042:	fa1f f882 	uxth.w	r8, r2
 8017046:	43d2      	mvns	r2, r2
 8017048:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801704c:	fb17 f708 	smulbb	r7, r7, r8
 8017050:	b2d2      	uxtb	r2, r2
 8017052:	fb19 f908 	smulbb	r9, r9, r8
 8017056:	fb0e 7702 	mla	r7, lr, r2, r7
 801705a:	fb1b f808 	smulbb	r8, fp, r8
 801705e:	b2bf      	uxth	r7, r7
 8017060:	f107 0e01 	add.w	lr, r7, #1
 8017064:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017068:	123f      	asrs	r7, r7, #8
 801706a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801706e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8017072:	fb07 9902 	mla	r9, r7, r2, r9
 8017076:	fa1f f989 	uxth.w	r9, r9
 801707a:	f109 0701 	add.w	r7, r9, #1
 801707e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017082:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8017086:	fb07 8802 	mla	r8, r7, r2, r8
 801708a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801708e:	fa1f f888 	uxth.w	r8, r8
 8017092:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017096:	f108 0201 	add.w	r2, r8, #1
 801709a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801709e:	ea4f 2828 	mov.w	r8, r8, asr #8
 80170a2:	f800 8c01 	strb.w	r8, [r0, #-1]
 80170a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80170a8:	3003      	adds	r0, #3
 80170aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80170ae:	4415      	add	r5, r2
 80170b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80170b2:	4414      	add	r4, r2
 80170b4:	e7a6      	b.n	8017004 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80170b6:	2700      	movs	r7, #0
 80170b8:	1bda      	subs	r2, r3, r7
 80170ba:	2a00      	cmp	r2, #0
 80170bc:	dc40      	bgt.n	8017140 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80170be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80170c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80170c6:	441e      	add	r6, r3
 80170c8:	9b00      	ldr	r3, [sp, #0]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	f340 80ad 	ble.w	801722a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80170d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80170d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80170da:	eeb0 6a62 	vmov.f32	s12, s5
 80170de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80170e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80170e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80170ea:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80170ee:	eeb0 6a43 	vmov.f32	s12, s6
 80170f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80170f6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80170fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80170fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017102:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017106:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801710a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801710e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017112:	ee12 2a90 	vmov	r2, s5
 8017116:	eef0 2a47 	vmov.f32	s5, s14
 801711a:	fb92 f3f3 	sdiv	r3, r2, r3
 801711e:	ee13 2a10 	vmov	r2, s6
 8017122:	9311      	str	r3, [sp, #68]	; 0x44
 8017124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017126:	eeb0 3a67 	vmov.f32	s6, s15
 801712a:	fb92 f3f3 	sdiv	r3, r2, r3
 801712e:	9312      	str	r3, [sp, #72]	; 0x48
 8017130:	9b00      	ldr	r3, [sp, #0]
 8017132:	9a03      	ldr	r2, [sp, #12]
 8017134:	3b01      	subs	r3, #1
 8017136:	9300      	str	r3, [sp, #0]
 8017138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801713a:	bf08      	it	eq
 801713c:	4613      	moveq	r3, r2
 801713e:	e72d      	b.n	8016f9c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017140:	1428      	asrs	r0, r5, #16
 8017142:	d45c      	bmi.n	80171fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017144:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017148:	4282      	cmp	r2, r0
 801714a:	dd58      	ble.n	80171fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801714c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8017150:	d455      	bmi.n	80171fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017152:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017156:	4572      	cmp	r2, lr
 8017158:	dd51      	ble.n	80171fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801715a:	9a01      	ldr	r2, [sp, #4]
 801715c:	9902      	ldr	r1, [sp, #8]
 801715e:	fb0e 0002 	mla	r0, lr, r2, r0
 8017162:	0842      	lsrs	r2, r0, #1
 8017164:	07c0      	lsls	r0, r0, #31
 8017166:	5c8a      	ldrb	r2, [r1, r2]
 8017168:	bf54      	ite	pl
 801716a:	f002 020f 	andpl.w	r2, r2, #15
 801716e:	1112      	asrmi	r2, r2, #4
 8017170:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017174:	b2d2      	uxtb	r2, r2
 8017176:	2a00      	cmp	r2, #0
 8017178:	d041      	beq.n	80171fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801717a:	492d      	ldr	r1, [pc, #180]	; (8017230 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801717c:	2aff      	cmp	r2, #255	; 0xff
 801717e:	6808      	ldr	r0, [r1, #0]
 8017180:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8017184:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017188:	fa5f fe80 	uxtb.w	lr, r0
 801718c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8017190:	d03b      	beq.n	801720a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8017192:	fa1f f982 	uxth.w	r9, r2
 8017196:	4438      	add	r0, r7
 8017198:	43d2      	mvns	r2, r2
 801719a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801719e:	fb1e fe09 	smulbb	lr, lr, r9
 80171a2:	fb1a fa09 	smulbb	sl, sl, r9
 80171a6:	b2d2      	uxtb	r2, r2
 80171a8:	fb1b f909 	smulbb	r9, fp, r9
 80171ac:	fb08 ee02 	mla	lr, r8, r2, lr
 80171b0:	fa1f fe8e 	uxth.w	lr, lr
 80171b4:	f10e 0801 	add.w	r8, lr, #1
 80171b8:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80171bc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80171c0:	f806 e000 	strb.w	lr, [r6, r0]
 80171c4:	4430      	add	r0, r6
 80171c6:	f890 e001 	ldrb.w	lr, [r0, #1]
 80171ca:	fb0e aa02 	mla	sl, lr, r2, sl
 80171ce:	fa1f fa8a 	uxth.w	sl, sl
 80171d2:	f10a 0e01 	add.w	lr, sl, #1
 80171d6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80171da:	f890 e002 	ldrb.w	lr, [r0, #2]
 80171de:	fb0e 9902 	mla	r9, lr, r2, r9
 80171e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80171e6:	fa1f f989 	uxth.w	r9, r9
 80171ea:	f880 a001 	strb.w	sl, [r0, #1]
 80171ee:	f109 0201 	add.w	r2, r9, #1
 80171f2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80171f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80171fa:	f880 9002 	strb.w	r9, [r0, #2]
 80171fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017200:	3701      	adds	r7, #1
 8017202:	4415      	add	r5, r2
 8017204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017206:	4414      	add	r4, r2
 8017208:	e756      	b.n	80170b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801720a:	4438      	add	r0, r7
 801720c:	f806 e000 	strb.w	lr, [r6, r0]
 8017210:	4430      	add	r0, r6
 8017212:	f880 a001 	strb.w	sl, [r0, #1]
 8017216:	f880 b002 	strb.w	fp, [r0, #2]
 801721a:	e7f0      	b.n	80171fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801721c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8017220:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017224:	f800 bc01 	strb.w	fp, [r0, #-1]
 8017228:	e73d      	b.n	80170a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801722a:	b005      	add	sp, #20
 801722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017230:	2000df78 	.word	0x2000df78

08017234 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8017234:	4770      	bx	lr

08017236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8017236:	4770      	bx	lr

08017238 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8017238:	4770      	bx	lr

0801723a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801723a:	4770      	bx	lr

0801723c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801723c:	4770      	bx	lr

0801723e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801723e:	4770      	bx	lr

08017240 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017240:	4770      	bx	lr

08017242 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017242:	4770      	bx	lr

08017244 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017244:	4770      	bx	lr

08017246 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8017246:	4770      	bx	lr

08017248 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017248:	4770      	bx	lr

0801724a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801724a:	4770      	bx	lr

0801724c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801724c:	4770      	bx	lr

0801724e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801724e:	4770      	bx	lr

08017250 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017250:	4770      	bx	lr

08017252 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017252:	4770      	bx	lr

08017254 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017254:	4770      	bx	lr

08017256 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8017256:	4770      	bx	lr

08017258 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017258:	4770      	bx	lr

0801725a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801725a:	4770      	bx	lr

0801725c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801725c:	2bff      	cmp	r3, #255	; 0xff
 801725e:	b508      	push	{r3, lr}
 8017260:	d04f      	beq.n	8017302 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8017262:	2a2c      	cmp	r2, #44	; 0x2c
 8017264:	d032      	beq.n	80172cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8017266:	d80f      	bhi.n	8017288 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8017268:	2a08      	cmp	r2, #8
 801726a:	d046      	beq.n	80172fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801726c:	d805      	bhi.n	801727a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801726e:	2a04      	cmp	r2, #4
 8017270:	d041      	beq.n	80172f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017272:	2a05      	cmp	r2, #5
 8017274:	d03d      	beq.n	80172f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017276:	2000      	movs	r0, #0
 8017278:	e027      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801727a:	2a0a      	cmp	r2, #10
 801727c:	d03d      	beq.n	80172fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801727e:	d301      	bcc.n	8017284 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017280:	2a0b      	cmp	r2, #11
 8017282:	d1f8      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017284:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8017286:	e020      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017288:	2a30      	cmp	r2, #48	; 0x30
 801728a:	d038      	beq.n	80172fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801728c:	d808      	bhi.n	80172a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801728e:	2a2e      	cmp	r2, #46	; 0x2e
 8017290:	684b      	ldr	r3, [r1, #4]
 8017292:	d029      	beq.n	80172e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8017294:	d90b      	bls.n	80172ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d1ec      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801729c:	6a00      	ldr	r0, [r0, #32]
 801729e:	e014      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172a0:	2a32      	cmp	r2, #50	; 0x32
 80172a2:	d02c      	beq.n	80172fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80172a4:	d301      	bcc.n	80172aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 80172a6:	2a33      	cmp	r2, #51	; 0x33
 80172a8:	d1e5      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80172aa:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80172ac:	e00d      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	2b01      	cmp	r3, #1
 80172b2:	d009      	beq.n	80172c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80172b4:	d3f2      	bcc.n	801729c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 80172b6:	2b02      	cmp	r3, #2
 80172b8:	d1dd      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80172ba:	4b39      	ldr	r3, [pc, #228]	; (80173a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80172bc:	f240 4186 	movw	r1, #1158	; 0x486
 80172c0:	4a38      	ldr	r2, [pc, #224]	; (80173a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80172c2:	4839      	ldr	r0, [pc, #228]	; (80173a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 80172c4:	f006 fd76 	bl	801ddb4 <__assert_func>
 80172c8:	6900      	ldr	r0, [r0, #16]
 80172ca:	bd08      	pop	{r3, pc}
 80172cc:	684b      	ldr	r3, [r1, #4]
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	2b01      	cmp	r3, #1
 80172d2:	d007      	beq.n	80172e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80172d4:	d30b      	bcc.n	80172ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80172d6:	2b02      	cmp	r3, #2
 80172d8:	d1cd      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80172da:	4b31      	ldr	r3, [pc, #196]	; (80173a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80172dc:	f240 4192 	movw	r1, #1170	; 0x492
 80172e0:	4a30      	ldr	r2, [pc, #192]	; (80173a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80172e2:	e7ee      	b.n	80172c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80172e4:	6880      	ldr	r0, [r0, #8]
 80172e6:	e7f0      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172e8:	781b      	ldrb	r3, [r3, #0]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d1c3      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80172ee:	6980      	ldr	r0, [r0, #24]
 80172f0:	e7eb      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80172f4:	e7e9      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80172f8:	e7e7      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80172fc:	e7e5      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172fe:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8017300:	e7e3      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017302:	2a2c      	cmp	r2, #44	; 0x2c
 8017304:	d030      	beq.n	8017368 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8017306:	d80f      	bhi.n	8017328 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8017308:	2a08      	cmp	r2, #8
 801730a:	d044      	beq.n	8017396 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801730c:	d805      	bhi.n	801731a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801730e:	2a04      	cmp	r2, #4
 8017310:	d03f      	beq.n	8017392 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8017312:	2a05      	cmp	r2, #5
 8017314:	d1af      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017316:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017318:	e7d7      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801731a:	2a0a      	cmp	r2, #10
 801731c:	d03b      	beq.n	8017396 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801731e:	d301      	bcc.n	8017324 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8017320:	2a0b      	cmp	r2, #11
 8017322:	d1a8      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017324:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8017326:	e7d0      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017328:	2a30      	cmp	r2, #48	; 0x30
 801732a:	d036      	beq.n	801739a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801732c:	d808      	bhi.n	8017340 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801732e:	2a2e      	cmp	r2, #46	; 0x2e
 8017330:	684b      	ldr	r3, [r1, #4]
 8017332:	d028      	beq.n	8017386 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8017334:	d90b      	bls.n	801734e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8017336:	781b      	ldrb	r3, [r3, #0]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d19c      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801733c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801733e:	e7c4      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017340:	2a32      	cmp	r2, #50	; 0x32
 8017342:	d02a      	beq.n	801739a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017344:	d301      	bcc.n	801734a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8017346:	2a33      	cmp	r2, #51	; 0x33
 8017348:	d195      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801734a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801734c:	e7bd      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	2b01      	cmp	r3, #1
 8017352:	d007      	beq.n	8017364 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8017354:	d3f2      	bcc.n	801733c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8017356:	2b02      	cmp	r3, #2
 8017358:	d18d      	bne.n	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801735a:	4b11      	ldr	r3, [pc, #68]	; (80173a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801735c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8017360:	4a10      	ldr	r2, [pc, #64]	; (80173a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8017362:	e7ae      	b.n	80172c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017364:	6940      	ldr	r0, [r0, #20]
 8017366:	e7b0      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017368:	684b      	ldr	r3, [r1, #4]
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	2b01      	cmp	r3, #1
 801736e:	d008      	beq.n	8017382 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8017370:	d30d      	bcc.n	801738e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017372:	2b02      	cmp	r3, #2
 8017374:	f47f af7f 	bne.w	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017378:	4b09      	ldr	r3, [pc, #36]	; (80173a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801737a:	f240 41cf 	movw	r1, #1231	; 0x4cf
 801737e:	4a09      	ldr	r2, [pc, #36]	; (80173a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8017380:	e79f      	b.n	80172c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017382:	68c0      	ldr	r0, [r0, #12]
 8017384:	e7a1      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	2b00      	cmp	r3, #0
 801738a:	f47f af74 	bne.w	8017276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801738e:	69c0      	ldr	r0, [r0, #28]
 8017390:	e79b      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017392:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017394:	e799      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017396:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8017398:	e797      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801739a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801739c:	e795      	b.n	80172ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801739e:	bf00      	nop
 80173a0:	08021d83 	.word	0x08021d83
 80173a4:	080225a8 	.word	0x080225a8
 80173a8:	08021dcf 	.word	0x08021dcf

080173ac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80173ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b0:	b085      	sub	sp, #20
 80173b2:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 80173b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80173b8:	f1be 0f00 	cmp.w	lr, #0
 80173bc:	f000 8114 	beq.w	80175e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 80173c0:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 80173c4:	f1bc 0f00 	cmp.w	ip, #0
 80173c8:	f340 810e 	ble.w	80175e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 80173cc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80173d0:	2800      	cmp	r0, #0
 80173d2:	f340 8109 	ble.w	80175e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 80173d6:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 80173da:	4350      	muls	r0, r2
 80173dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173e0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80173e4:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 80173e8:	eba2 060c 	sub.w	r6, r2, ip
 80173ec:	fb02 3305 	mla	r3, r2, r5, r3
 80173f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80173f4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80173f8:	fa5f f88b 	uxtb.w	r8, fp
 80173fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017400:	fa5f f78a 	uxtb.w	r7, sl
 8017404:	4419      	add	r1, r3
 8017406:	fa5f f984 	uxtb.w	r9, r4
 801740a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801740e:	4408      	add	r0, r1
 8017410:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8017414:	d03e      	beq.n	8017494 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 8017416:	fa1f f58e 	uxth.w	r5, lr
 801741a:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801741e:	4463      	add	r3, ip
 8017420:	fb08 f405 	mul.w	r4, r8, r5
 8017424:	b292      	uxth	r2, r2
 8017426:	436f      	muls	r7, r5
 8017428:	fb09 f505 	mul.w	r5, r9, r5
 801742c:	4281      	cmp	r1, r0
 801742e:	f080 80db 	bcs.w	80175e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 8017432:	eb01 0c03 	add.w	ip, r1, r3
 8017436:	458c      	cmp	ip, r1
 8017438:	f101 0e03 	add.w	lr, r1, #3
 801743c:	d928      	bls.n	8017490 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801743e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8017442:	fb11 f102 	smulbb	r1, r1, r2
 8017446:	4429      	add	r1, r5
 8017448:	b289      	uxth	r1, r1
 801744a:	f101 0801 	add.w	r8, r1, #1
 801744e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017452:	1209      	asrs	r1, r1, #8
 8017454:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8017458:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801745c:	fb11 f102 	smulbb	r1, r1, r2
 8017460:	4439      	add	r1, r7
 8017462:	b289      	uxth	r1, r1
 8017464:	f101 0801 	add.w	r8, r1, #1
 8017468:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801746c:	1209      	asrs	r1, r1, #8
 801746e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8017472:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8017476:	fb11 f102 	smulbb	r1, r1, r2
 801747a:	4421      	add	r1, r4
 801747c:	b289      	uxth	r1, r1
 801747e:	f101 0801 	add.w	r8, r1, #1
 8017482:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017486:	1209      	asrs	r1, r1, #8
 8017488:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801748c:	4671      	mov	r1, lr
 801748e:	e7d2      	b.n	8017436 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 8017490:	4431      	add	r1, r6
 8017492:	e7cb      	b.n	801742c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 8017494:	f012 0503 	ands.w	r5, r2, #3
 8017498:	d00f      	beq.n	80174ba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801749a:	4463      	add	r3, ip
 801749c:	4281      	cmp	r1, r0
 801749e:	f080 80a3 	bcs.w	80175e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 80174a2:	18ca      	adds	r2, r1, r3
 80174a4:	4291      	cmp	r1, r2
 80174a6:	f080 809d 	bcs.w	80175e4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 80174aa:	f881 9000 	strb.w	r9, [r1]
 80174ae:	3103      	adds	r1, #3
 80174b0:	f801 7c02 	strb.w	r7, [r1, #-2]
 80174b4:	f801 8c01 	strb.w	r8, [r1, #-1]
 80174b8:	e7f4      	b.n	80174a4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 80174ba:	f001 0603 	and.w	r6, r1, #3
 80174be:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 80174c2:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 80174c6:	4463      	add	r3, ip
 80174c8:	2e02      	cmp	r6, #2
 80174ca:	b2bf      	uxth	r7, r7
 80174cc:	fa1f fa8a 	uxth.w	sl, sl
 80174d0:	d017      	beq.n	8017502 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 80174d2:	2e03      	cmp	r6, #3
 80174d4:	d00c      	beq.n	80174f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 80174d6:	2e01      	cmp	r6, #1
 80174d8:	d11f      	bne.n	801751a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 80174da:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 80174de:	460d      	mov	r5, r1
 80174e0:	4285      	cmp	r5, r0
 80174e2:	d230      	bcs.n	8017546 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 80174e4:	f885 9000 	strb.w	r9, [r5]
 80174e8:	f8a5 7001 	strh.w	r7, [r5, #1]
 80174ec:	4435      	add	r5, r6
 80174ee:	e7f7      	b.n	80174e0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 80174f0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 80174f4:	460d      	mov	r5, r1
 80174f6:	4285      	cmp	r5, r0
 80174f8:	d20c      	bcs.n	8017514 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80174fa:	f885 9000 	strb.w	r9, [r5]
 80174fe:	4435      	add	r5, r6
 8017500:	e7f9      	b.n	80174f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8017502:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8017506:	460d      	mov	r5, r1
 8017508:	4285      	cmp	r5, r0
 801750a:	d218      	bcs.n	801753e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801750c:	f8a5 a000 	strh.w	sl, [r5]
 8017510:	4435      	add	r5, r6
 8017512:	e7f9      	b.n	8017508 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 8017514:	3b01      	subs	r3, #1
 8017516:	3101      	adds	r1, #1
 8017518:	2501      	movs	r5, #1
 801751a:	f003 0603 	and.w	r6, r3, #3
 801751e:	2e02      	cmp	r6, #2
 8017520:	d021      	beq.n	8017566 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 8017522:	2e03      	cmp	r6, #3
 8017524:	d013      	beq.n	801754e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 8017526:	2e01      	cmp	r6, #1
 8017528:	d126      	bne.n	8017578 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801752a:	3b01      	subs	r3, #1
 801752c:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8017530:	18ce      	adds	r6, r1, r3
 8017532:	4286      	cmp	r6, r0
 8017534:	d220      	bcs.n	8017578 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 8017536:	f886 8000 	strb.w	r8, [r6]
 801753a:	443e      	add	r6, r7
 801753c:	e7f9      	b.n	8017532 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801753e:	3b02      	subs	r3, #2
 8017540:	3102      	adds	r1, #2
 8017542:	2502      	movs	r5, #2
 8017544:	e7e9      	b.n	801751a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 8017546:	3b03      	subs	r3, #3
 8017548:	3103      	adds	r1, #3
 801754a:	2500      	movs	r5, #0
 801754c:	e7e5      	b.n	801751a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801754e:	3b03      	subs	r3, #3
 8017550:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8017554:	18ce      	adds	r6, r1, r3
 8017556:	4286      	cmp	r6, r0
 8017558:	d20e      	bcs.n	8017578 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801755a:	f8a6 a000 	strh.w	sl, [r6]
 801755e:	f886 8002 	strb.w	r8, [r6, #2]
 8017562:	443e      	add	r6, r7
 8017564:	e7f7      	b.n	8017556 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 8017566:	3b02      	subs	r3, #2
 8017568:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801756c:	18ce      	adds	r6, r1, r3
 801756e:	4286      	cmp	r6, r0
 8017570:	d202      	bcs.n	8017578 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 8017572:	8037      	strh	r7, [r6, #0]
 8017574:	4466      	add	r6, ip
 8017576:	e7fa      	b.n	801756e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 8017578:	079e      	lsls	r6, r3, #30
 801757a:	d006      	beq.n	801758a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801757c:	4b1c      	ldr	r3, [pc, #112]	; (80175f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801757e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8017582:	4a1c      	ldr	r2, [pc, #112]	; (80175f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 8017584:	481c      	ldr	r0, [pc, #112]	; (80175f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 8017586:	f006 fc15 	bl	801ddb4 <__assert_func>
 801758a:	b36b      	cbz	r3, 80175e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801758c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8017590:	109b      	asrs	r3, r3, #2
 8017592:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017596:	2703      	movs	r7, #3
 8017598:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 801759c:	9601      	str	r6, [sp, #4]
 801759e:	0426      	lsls	r6, r4, #16
 80175a0:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 80175a4:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 80175a8:	9602      	str	r6, [sp, #8]
 80175aa:	009e      	lsls	r6, r3, #2
 80175ac:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 80175b0:	9403      	str	r4, [sp, #12]
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	4281      	cmp	r1, r0
 80175b6:	d217      	bcs.n	80175e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 80175b8:	eb01 0c06 	add.w	ip, r1, r6
 80175bc:	462a      	mov	r2, r5
 80175be:	4561      	cmp	r1, ip
 80175c0:	d20e      	bcs.n	80175e0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 80175c2:	f10d 0e10 	add.w	lr, sp, #16
 80175c6:	1c54      	adds	r4, r2, #1
 80175c8:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 80175cc:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 80175d0:	f841 2b04 	str.w	r2, [r1], #4
 80175d4:	fb94 f2f7 	sdiv	r2, r4, r7
 80175d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80175dc:	1aa2      	subs	r2, r4, r2
 80175de:	e7ee      	b.n	80175be <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 80175e0:	4419      	add	r1, r3
 80175e2:	e7e7      	b.n	80175b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 80175e4:	4431      	add	r1, r6
 80175e6:	e759      	b.n	801749c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 80175e8:	b005      	add	sp, #20
 80175ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175ee:	bf00      	nop
 80175f0:	08021c9f 	.word	0x08021c9f
 80175f4:	080222f2 	.word	0x080222f2
 80175f8:	08021dcf 	.word	0x08021dcf

080175fc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80175fc:	b508      	push	{r3, lr}
 80175fe:	4b06      	ldr	r3, [pc, #24]	; (8017618 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8017600:	8818      	ldrh	r0, [r3, #0]
 8017602:	b928      	cbnz	r0, 8017610 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8017604:	4b05      	ldr	r3, [pc, #20]	; (801761c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8017606:	214d      	movs	r1, #77	; 0x4d
 8017608:	4a05      	ldr	r2, [pc, #20]	; (8017620 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801760a:	4806      	ldr	r0, [pc, #24]	; (8017624 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801760c:	f006 fbd2 	bl	801ddb4 <__assert_func>
 8017610:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017614:	b280      	uxth	r0, r0
 8017616:	bd08      	pop	{r3, pc}
 8017618:	2000df6a 	.word	0x2000df6a
 801761c:	0802201c 	.word	0x0802201c
 8017620:	0802256d 	.word	0x0802256d
 8017624:	0802205e 	.word	0x0802205e

08017628 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8017628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801762c:	b08b      	sub	sp, #44	; 0x2c
 801762e:	460d      	mov	r5, r1
 8017630:	4616      	mov	r6, r2
 8017632:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8017636:	f1b8 0f00 	cmp.w	r8, #0
 801763a:	d045      	beq.n	80176c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801763c:	6810      	ldr	r0, [r2, #0]
 801763e:	ac06      	add	r4, sp, #24
 8017640:	6851      	ldr	r1, [r2, #4]
 8017642:	4f50      	ldr	r7, [pc, #320]	; (8017784 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 8017644:	c403      	stmia	r4!, {r0, r1}
 8017646:	6818      	ldr	r0, [r3, #0]
 8017648:	ac08      	add	r4, sp, #32
 801764a:	6859      	ldr	r1, [r3, #4]
 801764c:	c403      	stmia	r4!, {r0, r1}
 801764e:	a806      	add	r0, sp, #24
 8017650:	f7fb f9ba 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017654:	4631      	mov	r1, r6
 8017656:	a808      	add	r0, sp, #32
 8017658:	f7fb f99e 	bl	8012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801765c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017660:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017664:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017668:	6838      	ldr	r0, [r7, #0]
 801766a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801766e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8017672:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8017676:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801767a:	440d      	add	r5, r1
 801767c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017680:	440a      	add	r2, r1
 8017682:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017686:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801768a:	4413      	add	r3, r2
 801768c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017690:	6803      	ldr	r3, [r0, #0]
 8017692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017694:	4798      	blx	r3
 8017696:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801769a:	d018      	beq.n	80176ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801769c:	f010 0f04 	tst.w	r0, #4
 80176a0:	6838      	ldr	r0, [r7, #0]
 80176a2:	d017      	beq.n	80176d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80176a4:	2700      	movs	r7, #0
 80176a6:	6801      	ldr	r1, [r0, #0]
 80176a8:	b2a4      	uxth	r4, r4
 80176aa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80176ae:	b2b6      	uxth	r6, r6
 80176b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80176b4:	9401      	str	r4, [sp, #4]
 80176b6:	9600      	str	r6, [sp, #0]
 80176b8:	e9cd 8703 	strd	r8, r7, [sp, #12]
 80176bc:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80176c0:	9702      	str	r7, [sp, #8]
 80176c2:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 80176c4:	4629      	mov	r1, r5
 80176c6:	47a0      	blx	r4
 80176c8:	b00b      	add	sp, #44	; 0x2c
 80176ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176ce:	f010 0f01 	tst.w	r0, #1
 80176d2:	e7e5      	b.n	80176a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80176d4:	6803      	ldr	r3, [r0, #0]
 80176d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176d8:	4798      	blx	r3
 80176da:	4a2b      	ldr	r2, [pc, #172]	; (8017788 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80176dc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80176e0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80176e4:	8813      	ldrh	r3, [r2, #0]
 80176e6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80176ea:	fb03 f404 	mul.w	r4, r3, r4
 80176ee:	fb03 c101 	mla	r1, r3, r1, ip
 80176f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80176f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80176fa:	4408      	add	r0, r1
 80176fc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8017700:	4404      	add	r4, r0
 8017702:	d02e      	beq.n	8017762 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 8017704:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8017708:	1b9b      	subs	r3, r3, r6
 801770a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801770e:	1b96      	subs	r6, r2, r6
 8017710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017714:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017718:	42a0      	cmp	r0, r4
 801771a:	d22d      	bcs.n	8017778 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801771c:	eb00 0e01 	add.w	lr, r0, r1
 8017720:	4570      	cmp	r0, lr
 8017722:	d210      	bcs.n	8017746 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8017724:	f890 9000 	ldrb.w	r9, [r0]
 8017728:	f815 2b01 	ldrb.w	r2, [r5], #1
 801772c:	fb19 f90c 	smulbb	r9, r9, ip
 8017730:	fb02 9208 	mla	r2, r2, r8, r9
 8017734:	b292      	uxth	r2, r2
 8017736:	f102 0901 	add.w	r9, r2, #1
 801773a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801773e:	1212      	asrs	r2, r2, #8
 8017740:	f800 2b01 	strb.w	r2, [r0], #1
 8017744:	e7ec      	b.n	8017720 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 8017746:	4418      	add	r0, r3
 8017748:	4435      	add	r5, r6
 801774a:	e7e5      	b.n	8017718 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801774c:	8813      	ldrh	r3, [r2, #0]
 801774e:	1b9b      	subs	r3, r3, r6
 8017750:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017754:	4418      	add	r0, r3
 8017756:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801775a:	1b9b      	subs	r3, r3, r6
 801775c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017760:	441d      	add	r5, r3
 8017762:	42a0      	cmp	r0, r4
 8017764:	d208      	bcs.n	8017778 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 8017766:	eb00 0c01 	add.w	ip, r0, r1
 801776a:	4560      	cmp	r0, ip
 801776c:	d2ee      	bcs.n	801774c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801776e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017772:	f800 3b01 	strb.w	r3, [r0], #1
 8017776:	e7f8      	b.n	801776a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 8017778:	6838      	ldr	r0, [r7, #0]
 801777a:	6803      	ldr	r3, [r0, #0]
 801777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801777e:	4798      	blx	r3
 8017780:	e7a2      	b.n	80176c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 8017782:	bf00      	nop
 8017784:	2000df70 	.word	0x2000df70
 8017788:	2000df6a 	.word	0x2000df6a

0801778c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801778c:	b510      	push	{r4, lr}
 801778e:	4604      	mov	r4, r0
 8017790:	2104      	movs	r1, #4
 8017792:	f006 fae0 	bl	801dd56 <_ZdlPvj>
 8017796:	4620      	mov	r0, r4
 8017798:	bd10      	pop	{r4, pc}

0801779a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801779a:	b510      	push	{r4, lr}
 801779c:	4604      	mov	r4, r0
 801779e:	2104      	movs	r1, #4
 80177a0:	f006 fad9 	bl	801dd56 <_ZdlPvj>
 80177a4:	4620      	mov	r0, r4
 80177a6:	bd10      	pop	{r4, pc}

080177a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80177a8:	b510      	push	{r4, lr}
 80177aa:	4604      	mov	r4, r0
 80177ac:	2104      	movs	r1, #4
 80177ae:	f006 fad2 	bl	801dd56 <_ZdlPvj>
 80177b2:	4620      	mov	r0, r4
 80177b4:	bd10      	pop	{r4, pc}

080177b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80177b6:	b510      	push	{r4, lr}
 80177b8:	4604      	mov	r4, r0
 80177ba:	2104      	movs	r1, #4
 80177bc:	f006 facb 	bl	801dd56 <_ZdlPvj>
 80177c0:	4620      	mov	r0, r4
 80177c2:	bd10      	pop	{r4, pc}

080177c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80177c4:	b510      	push	{r4, lr}
 80177c6:	4604      	mov	r4, r0
 80177c8:	2104      	movs	r1, #4
 80177ca:	f006 fac4 	bl	801dd56 <_ZdlPvj>
 80177ce:	4620      	mov	r0, r4
 80177d0:	bd10      	pop	{r4, pc}

080177d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80177d2:	b510      	push	{r4, lr}
 80177d4:	4604      	mov	r4, r0
 80177d6:	2104      	movs	r1, #4
 80177d8:	f006 fabd 	bl	801dd56 <_ZdlPvj>
 80177dc:	4620      	mov	r0, r4
 80177de:	bd10      	pop	{r4, pc}

080177e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80177e0:	b510      	push	{r4, lr}
 80177e2:	4604      	mov	r4, r0
 80177e4:	2104      	movs	r1, #4
 80177e6:	f006 fab6 	bl	801dd56 <_ZdlPvj>
 80177ea:	4620      	mov	r0, r4
 80177ec:	bd10      	pop	{r4, pc}

080177ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80177ee:	b510      	push	{r4, lr}
 80177f0:	4604      	mov	r4, r0
 80177f2:	2104      	movs	r1, #4
 80177f4:	f006 faaf 	bl	801dd56 <_ZdlPvj>
 80177f8:	4620      	mov	r0, r4
 80177fa:	bd10      	pop	{r4, pc}

080177fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80177fc:	b510      	push	{r4, lr}
 80177fe:	4604      	mov	r4, r0
 8017800:	2104      	movs	r1, #4
 8017802:	f006 faa8 	bl	801dd56 <_ZdlPvj>
 8017806:	4620      	mov	r0, r4
 8017808:	bd10      	pop	{r4, pc}

0801780a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801780a:	b510      	push	{r4, lr}
 801780c:	4604      	mov	r4, r0
 801780e:	2104      	movs	r1, #4
 8017810:	f006 faa1 	bl	801dd56 <_ZdlPvj>
 8017814:	4620      	mov	r0, r4
 8017816:	bd10      	pop	{r4, pc}

08017818 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017818:	b510      	push	{r4, lr}
 801781a:	4604      	mov	r4, r0
 801781c:	2104      	movs	r1, #4
 801781e:	f006 fa9a 	bl	801dd56 <_ZdlPvj>
 8017822:	4620      	mov	r0, r4
 8017824:	bd10      	pop	{r4, pc}

08017826 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017826:	b510      	push	{r4, lr}
 8017828:	4604      	mov	r4, r0
 801782a:	2104      	movs	r1, #4
 801782c:	f006 fa93 	bl	801dd56 <_ZdlPvj>
 8017830:	4620      	mov	r0, r4
 8017832:	bd10      	pop	{r4, pc}

08017834 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017834:	b510      	push	{r4, lr}
 8017836:	4604      	mov	r4, r0
 8017838:	2104      	movs	r1, #4
 801783a:	f006 fa8c 	bl	801dd56 <_ZdlPvj>
 801783e:	4620      	mov	r0, r4
 8017840:	bd10      	pop	{r4, pc}

08017842 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017842:	b510      	push	{r4, lr}
 8017844:	4604      	mov	r4, r0
 8017846:	2104      	movs	r1, #4
 8017848:	f006 fa85 	bl	801dd56 <_ZdlPvj>
 801784c:	4620      	mov	r0, r4
 801784e:	bd10      	pop	{r4, pc}

08017850 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017850:	b510      	push	{r4, lr}
 8017852:	4604      	mov	r4, r0
 8017854:	2104      	movs	r1, #4
 8017856:	f006 fa7e 	bl	801dd56 <_ZdlPvj>
 801785a:	4620      	mov	r0, r4
 801785c:	bd10      	pop	{r4, pc}

0801785e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801785e:	b510      	push	{r4, lr}
 8017860:	4604      	mov	r4, r0
 8017862:	2104      	movs	r1, #4
 8017864:	f006 fa77 	bl	801dd56 <_ZdlPvj>
 8017868:	4620      	mov	r0, r4
 801786a:	bd10      	pop	{r4, pc}

0801786c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801786c:	b510      	push	{r4, lr}
 801786e:	4604      	mov	r4, r0
 8017870:	2104      	movs	r1, #4
 8017872:	f006 fa70 	bl	801dd56 <_ZdlPvj>
 8017876:	4620      	mov	r0, r4
 8017878:	bd10      	pop	{r4, pc}

0801787a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801787a:	b510      	push	{r4, lr}
 801787c:	4604      	mov	r4, r0
 801787e:	2104      	movs	r1, #4
 8017880:	f006 fa69 	bl	801dd56 <_ZdlPvj>
 8017884:	4620      	mov	r0, r4
 8017886:	bd10      	pop	{r4, pc}

08017888 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8017888:	b510      	push	{r4, lr}
 801788a:	4604      	mov	r4, r0
 801788c:	2104      	movs	r1, #4
 801788e:	f006 fa62 	bl	801dd56 <_ZdlPvj>
 8017892:	4620      	mov	r0, r4
 8017894:	bd10      	pop	{r4, pc}

08017896 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8017896:	b510      	push	{r4, lr}
 8017898:	4604      	mov	r4, r0
 801789a:	2104      	movs	r1, #4
 801789c:	f006 fa5b 	bl	801dd56 <_ZdlPvj>
 80178a0:	4620      	mov	r0, r4
 80178a2:	bd10      	pop	{r4, pc}

080178a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80178a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178a6:	4606      	mov	r6, r0
 80178a8:	b087      	sub	sp, #28
 80178aa:	4615      	mov	r5, r2
 80178ac:	461f      	mov	r7, r3
 80178ae:	b343      	cbz	r3, 8017902 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 80178b0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	dd24      	ble.n	8017902 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 80178b8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	dd20      	ble.n	8017902 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 80178c0:	6808      	ldr	r0, [r1, #0]
 80178c2:	aa04      	add	r2, sp, #16
 80178c4:	6849      	ldr	r1, [r1, #4]
 80178c6:	4c1a      	ldr	r4, [pc, #104]	; (8017930 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80178c8:	c203      	stmia	r2!, {r0, r1}
 80178ca:	a804      	add	r0, sp, #16
 80178cc:	f7fb f87c 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80178d0:	6820      	ldr	r0, [r4, #0]
 80178d2:	6803      	ldr	r3, [r0, #0]
 80178d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178d6:	4798      	blx	r3
 80178d8:	2fff      	cmp	r7, #255	; 0xff
 80178da:	d014      	beq.n	8017906 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80178dc:	f010 0f08 	tst.w	r0, #8
 80178e0:	6820      	ldr	r0, [r4, #0]
 80178e2:	d013      	beq.n	801790c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 80178e4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80178e8:	6801      	ldr	r1, [r0, #0]
 80178ea:	9401      	str	r4, [sp, #4]
 80178ec:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80178f0:	9702      	str	r7, [sp, #8]
 80178f2:	9400      	str	r4, [sp, #0]
 80178f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80178f8:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 80178fa:	4629      	mov	r1, r5
 80178fc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017900:	47a0      	blx	r4
 8017902:	b007      	add	sp, #28
 8017904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017906:	f010 0f02 	tst.w	r0, #2
 801790a:	e7e9      	b.n	80178e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801790c:	6803      	ldr	r3, [r0, #0]
 801790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017910:	4798      	blx	r3
 8017912:	4b08      	ldr	r3, [pc, #32]	; (8017934 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8017914:	4601      	mov	r1, r0
 8017916:	4630      	mov	r0, r6
 8017918:	881a      	ldrh	r2, [r3, #0]
 801791a:	6833      	ldr	r3, [r6, #0]
 801791c:	e9cd 5700 	strd	r5, r7, [sp]
 8017920:	69dd      	ldr	r5, [r3, #28]
 8017922:	ab04      	add	r3, sp, #16
 8017924:	47a8      	blx	r5
 8017926:	6820      	ldr	r0, [r4, #0]
 8017928:	6803      	ldr	r3, [r0, #0]
 801792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801792c:	4798      	blx	r3
 801792e:	e7e8      	b.n	8017902 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 8017930:	2000df70 	.word	0x2000df70
 8017934:	2000df6a 	.word	0x2000df6a

08017938 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8017938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801793c:	4db4      	ldr	r5, [pc, #720]	; (8017c10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801793e:	4690      	mov	r8, r2
 8017940:	b08d      	sub	sp, #52	; 0x34
 8017942:	4604      	mov	r4, r0
 8017944:	682a      	ldr	r2, [r5, #0]
 8017946:	4689      	mov	r9, r1
 8017948:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801794c:	2a02      	cmp	r2, #2
 801794e:	d106      	bne.n	801795e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8017950:	4bb0      	ldr	r3, [pc, #704]	; (8017c14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 8017952:	f240 11ed 	movw	r1, #493	; 0x1ed
 8017956:	4ab0      	ldr	r2, [pc, #704]	; (8017c18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8017958:	48b0      	ldr	r0, [pc, #704]	; (8017c1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801795a:	f006 fa2b 	bl	801ddb4 <__assert_func>
 801795e:	ae0c      	add	r6, sp, #48	; 0x30
 8017960:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 8017964:	4630      	mov	r0, r6
 8017966:	f7fe f815 	bl	8015994 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801796a:	6823      	ldr	r3, [r4, #0]
 801796c:	4607      	mov	r7, r0
 801796e:	4620      	mov	r0, r4
 8017970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017972:	4798      	blx	r3
 8017974:	4287      	cmp	r7, r0
 8017976:	d004      	beq.n	8017982 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8017978:	4ba9      	ldr	r3, [pc, #676]	; (8017c20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801797a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801797e:	4aa6      	ldr	r2, [pc, #664]	; (8017c18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8017980:	e7ea      	b.n	8017958 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8017982:	4630      	mov	r0, r6
 8017984:	f7fd ff7c 	bl	8015880 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017988:	4607      	mov	r7, r0
 801798a:	b920      	cbnz	r0, 8017996 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801798c:	4ba5      	ldr	r3, [pc, #660]	; (8017c24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801798e:	f240 11f1 	movw	r1, #497	; 0x1f1
 8017992:	4aa1      	ldr	r2, [pc, #644]	; (8017c18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8017994:	e7e0      	b.n	8017958 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8017996:	f8d8 0000 	ldr.w	r0, [r8]
 801799a:	ab06      	add	r3, sp, #24
 801799c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80179a0:	f9b8 a000 	ldrsh.w	sl, [r8]
 80179a4:	c303      	stmia	r3!, {r0, r1}
 80179a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80179aa:	ab08      	add	r3, sp, #32
 80179ac:	f8d9 0000 	ldr.w	r0, [r9]
 80179b0:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 80179b4:	c303      	stmia	r3!, {r0, r1}
 80179b6:	4630      	mov	r0, r6
 80179b8:	f7fd fe5a 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80179bc:	4680      	mov	r8, r0
 80179be:	4630      	mov	r0, r6
 80179c0:	f7fd fe90 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80179c4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80179c8:	f10d 0920 	add.w	r9, sp, #32
 80179cc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80179d0:	a806      	add	r0, sp, #24
 80179d2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80179d6:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 80179da:	f7fa fff5 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179de:	4648      	mov	r0, r9
 80179e0:	f7fa fff2 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179e4:	a80a      	add	r0, sp, #40	; 0x28
 80179e6:	f7fa ffef 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179ea:	4b8f      	ldr	r3, [pc, #572]	; (8017c28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 80179ec:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80179f0:	881e      	ldrh	r6, [r3, #0]
 80179f2:	4b8e      	ldr	r3, [pc, #568]	; (8017c2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 80179f4:	fa0f fb86 	sxth.w	fp, r6
 80179f8:	8819      	ldrh	r1, [r3, #0]
 80179fa:	4593      	cmp	fp, r2
 80179fc:	dd75      	ble.n	8017aea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 80179fe:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8017a02:	4494      	add	ip, r2
 8017a04:	fa1f fc8c 	uxth.w	ip, ip
 8017a08:	fa0f fa8c 	sxth.w	sl, ip
 8017a0c:	f1ba 0f00 	cmp.w	sl, #0
 8017a10:	dd6b      	ble.n	8017aea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8017a12:	fa0f f881 	sxth.w	r8, r1
 8017a16:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017a1a:	4598      	cmp	r8, r3
 8017a1c:	dd65      	ble.n	8017aea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8017a1e:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8017a22:	4418      	add	r0, r3
 8017a24:	b280      	uxth	r0, r0
 8017a26:	fa0f fe80 	sxth.w	lr, r0
 8017a2a:	f1be 0f00 	cmp.w	lr, #0
 8017a2e:	dd5c      	ble.n	8017aea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8017a30:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8017a34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017a38:	45d3      	cmp	fp, sl
 8017a3a:	bfc8      	it	gt
 8017a3c:	4666      	movgt	r6, ip
 8017a3e:	45f0      	cmp	r8, lr
 8017a40:	bfc8      	it	gt
 8017a42:	4601      	movgt	r1, r0
 8017a44:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017a48:	1ab6      	subs	r6, r6, r2
 8017a4a:	1ac9      	subs	r1, r1, r3
 8017a4c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017a50:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8017a54:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8017a58:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8017a5c:	f1bc 0f00 	cmp.w	ip, #0
 8017a60:	f340 80aa 	ble.w	8017bb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017a64:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8017a68:	2e00      	cmp	r6, #0
 8017a6a:	f340 80a5 	ble.w	8017bb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017a6e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8017a72:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8017a76:	4288      	cmp	r0, r1
 8017a78:	db3b      	blt.n	8017af2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8017a7a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8017a7e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	db35      	blt.n	8017af2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8017a86:	4460      	add	r0, ip
 8017a88:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8017a8c:	4461      	add	r1, ip
 8017a8e:	b200      	sxth	r0, r0
 8017a90:	b209      	sxth	r1, r1
 8017a92:	4288      	cmp	r0, r1
 8017a94:	dc2d      	bgt.n	8017af2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8017a96:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8017a9a:	4432      	add	r2, r6
 8017a9c:	440b      	add	r3, r1
 8017a9e:	b212      	sxth	r2, r2
 8017aa0:	b21b      	sxth	r3, r3
 8017aa2:	429a      	cmp	r2, r3
 8017aa4:	dc25      	bgt.n	8017af2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8017aa6:	6823      	ldr	r3, [r4, #0]
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aac:	4798      	blx	r3
 8017aae:	4682      	mov	sl, r0
 8017ab0:	6828      	ldr	r0, [r5, #0]
 8017ab2:	6803      	ldr	r3, [r0, #0]
 8017ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ab6:	4798      	blx	r3
 8017ab8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8017abc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8017ac0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8017ac4:	9303      	str	r3, [sp, #12]
 8017ac6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017aca:	1a9b      	subs	r3, r3, r2
 8017acc:	b29b      	uxth	r3, r3
 8017ace:	b21c      	sxth	r4, r3
 8017ad0:	2c00      	cmp	r4, #0
 8017ad2:	dc13      	bgt.n	8017afc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 8017ad4:	bf18      	it	ne
 8017ad6:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8017ada:	463c      	mov	r4, r7
 8017adc:	bf1e      	ittt	ne
 8017ade:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 8017ae2:	189b      	addne	r3, r3, r2
 8017ae4:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8017ae8:	e00f      	b.n	8017b0a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8017aea:	2300      	movs	r3, #0
 8017aec:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017af0:	e7b2      	b.n	8017a58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 8017af2:	4b4f      	ldr	r3, [pc, #316]	; (8017c30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 8017af4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8017af8:	4a47      	ldr	r2, [pc, #284]	; (8017c18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8017afa:	e72d      	b.n	8017958 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8017afc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017b00:	ebab 0303 	sub.w	r3, fp, r3
 8017b04:	443c      	add	r4, r7
 8017b06:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8017b0a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8017b0e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017b12:	1a9b      	subs	r3, r3, r2
 8017b14:	b29b      	uxth	r3, r3
 8017b16:	b219      	sxth	r1, r3
 8017b18:	2900      	cmp	r1, #0
 8017b1a:	dd51      	ble.n	8017bc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 8017b1c:	9a03      	ldr	r2, [sp, #12]
 8017b1e:	fb02 4401 	mla	r4, r2, r1, r4
 8017b22:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8017b26:	1ad3      	subs	r3, r2, r3
 8017b28:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017b2c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	dd41      	ble.n	8017bb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017b34:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8017b38:	2e00      	cmp	r6, #0
 8017b3a:	dd3d      	ble.n	8017bb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017b3c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8017b40:	f04f 0803 	mov.w	r8, #3
 8017b44:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017b48:	fb0a f10c 	mul.w	r1, sl, ip
 8017b4c:	fb12 1808 	smlabb	r8, r2, r8, r1
 8017b50:	4935      	ldr	r1, [pc, #212]	; (8017c28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8017b52:	4480      	add	r8, r0
 8017b54:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8017b58:	8809      	ldrh	r1, [r1, #0]
 8017b5a:	4283      	cmp	r3, r0
 8017b5c:	eba1 0202 	sub.w	r2, r1, r2
 8017b60:	bfa8      	it	ge
 8017b62:	4603      	movge	r3, r0
 8017b64:	4293      	cmp	r3, r2
 8017b66:	bfa8      	it	ge
 8017b68:	4613      	movge	r3, r2
 8017b6a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8017b6e:	4296      	cmp	r6, r2
 8017b70:	bfa8      	it	ge
 8017b72:	4616      	movge	r6, r2
 8017b74:	4a2d      	ldr	r2, [pc, #180]	; (8017c2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8017b76:	8812      	ldrh	r2, [r2, #0]
 8017b78:	eba2 0c0c 	sub.w	ip, r2, ip
 8017b7c:	4632      	mov	r2, r6
 8017b7e:	4566      	cmp	r6, ip
 8017b80:	bfa8      	it	ge
 8017b82:	4662      	movge	r2, ip
 8017b84:	4299      	cmp	r1, r3
 8017b86:	9202      	str	r2, [sp, #8]
 8017b88:	d12d      	bne.n	8017be6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8017b8a:	4559      	cmp	r1, fp
 8017b8c:	d12b      	bne.n	8017be6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8017b8e:	6828      	ldr	r0, [r5, #0]
 8017b90:	6803      	ldr	r3, [r0, #0]
 8017b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b94:	4798      	blx	r3
 8017b96:	07c3      	lsls	r3, r0, #31
 8017b98:	d51b      	bpl.n	8017bd2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 8017b9a:	6828      	ldr	r0, [r5, #0]
 8017b9c:	9b02      	ldr	r3, [sp, #8]
 8017b9e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8017ba2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017ba6:	6803      	ldr	r3, [r0, #0]
 8017ba8:	f8cd b000 	str.w	fp, [sp]
 8017bac:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8017bae:	4623      	mov	r3, r4
 8017bb0:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017bb4:	47a8      	blx	r5
 8017bb6:	4607      	mov	r7, r0
 8017bb8:	4638      	mov	r0, r7
 8017bba:	b00d      	add	sp, #52	; 0x34
 8017bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc0:	bf1f      	itttt	ne
 8017bc2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8017bc6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8017bca:	189b      	addne	r3, r3, r2
 8017bcc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8017bd0:	e7ac      	b.n	8017b2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 8017bd2:	6828      	ldr	r0, [r5, #0]
 8017bd4:	4642      	mov	r2, r8
 8017bd6:	4621      	mov	r1, r4
 8017bd8:	6803      	ldr	r3, [r0, #0]
 8017bda:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8017bdc:	9b02      	ldr	r3, [sp, #8]
 8017bde:	fb03 f30a 	mul.w	r3, r3, sl
 8017be2:	47a8      	blx	r5
 8017be4:	e7e8      	b.n	8017bb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017be6:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8017bea:	f04f 0900 	mov.w	r9, #0
 8017bee:	9b02      	ldr	r3, [sp, #8]
 8017bf0:	454b      	cmp	r3, r9
 8017bf2:	dde1      	ble.n	8017bb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017bf4:	6828      	ldr	r0, [r5, #0]
 8017bf6:	4642      	mov	r2, r8
 8017bf8:	4621      	mov	r1, r4
 8017bfa:	44d0      	add	r8, sl
 8017bfc:	6803      	ldr	r3, [r0, #0]
 8017bfe:	f109 0901 	add.w	r9, r9, #1
 8017c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c04:	461e      	mov	r6, r3
 8017c06:	465b      	mov	r3, fp
 8017c08:	47b0      	blx	r6
 8017c0a:	9b03      	ldr	r3, [sp, #12]
 8017c0c:	441c      	add	r4, r3
 8017c0e:	e7ee      	b.n	8017bee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 8017c10:	2000df70 	.word	0x2000df70
 8017c14:	08021e01 	.word	0x08021e01
 8017c18:	08022652 	.word	0x08022652
 8017c1c:	08021dcf 	.word	0x08021dcf
 8017c20:	08021eb3 	.word	0x08021eb3
 8017c24:	08021f08 	.word	0x08021f08
 8017c28:	2000df6a 	.word	0x2000df6a
 8017c2c:	2000df6c 	.word	0x2000df6c
 8017c30:	08021f46 	.word	0x08021f46

08017c34 <_ZN8touchgfx8LCD24bppC1Ev>:
 8017c34:	2200      	movs	r2, #0
 8017c36:	490c      	ldr	r1, [pc, #48]	; (8017c68 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8017c38:	6042      	str	r2, [r0, #4]
 8017c3a:	6001      	str	r1, [r0, #0]
 8017c3c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017c40:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8017c44:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8017c48:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8017c4c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8017c50:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8017c54:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8017c58:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8017c5c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8017c60:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8017c64:	4770      	bx	lr
 8017c66:	bf00      	nop
 8017c68:	0802222c 	.word	0x0802222c

08017c6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8017c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c70:	4616      	mov	r6, r2
 8017c72:	b091      	sub	sp, #68	; 0x44
 8017c74:	880a      	ldrh	r2, [r1, #0]
 8017c76:	4607      	mov	r7, r0
 8017c78:	4688      	mov	r8, r1
 8017c7a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8017c7e:	b12a      	cbz	r2, 8017c8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8017c80:	4b67      	ldr	r3, [pc, #412]	; (8017e20 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8017c82:	2160      	movs	r1, #96	; 0x60
 8017c84:	4a67      	ldr	r2, [pc, #412]	; (8017e24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 8017c86:	4868      	ldr	r0, [pc, #416]	; (8017e28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8017c88:	f006 f894 	bl	801ddb4 <__assert_func>
 8017c8c:	6830      	ldr	r0, [r6, #0]
 8017c8e:	ac0c      	add	r4, sp, #48	; 0x30
 8017c90:	6871      	ldr	r1, [r6, #4]
 8017c92:	4d66      	ldr	r5, [pc, #408]	; (8017e2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8017c94:	f8df a198 	ldr.w	sl, [pc, #408]	; 8017e30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 8017c98:	c403      	stmia	r4!, {r0, r1}
 8017c9a:	6818      	ldr	r0, [r3, #0]
 8017c9c:	ac0e      	add	r4, sp, #56	; 0x38
 8017c9e:	6859      	ldr	r1, [r3, #4]
 8017ca0:	c403      	stmia	r4!, {r0, r1}
 8017ca2:	a80c      	add	r0, sp, #48	; 0x30
 8017ca4:	f7fa fe90 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ca8:	4631      	mov	r1, r6
 8017caa:	a80e      	add	r0, sp, #56	; 0x38
 8017cac:	f7fa fe74 	bl	8012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017cb0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017cb4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017cb8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017cbc:	6828      	ldr	r0, [r5, #0]
 8017cbe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017cc2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8017cc6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8017cca:	440f      	add	r7, r1
 8017ccc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017cd0:	440a      	add	r2, r1
 8017cd2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017cd6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017cda:	4413      	add	r3, r2
 8017cdc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017ce0:	6803      	ldr	r3, [r0, #0]
 8017ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ce4:	4798      	blx	r3
 8017ce6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017cea:	6828      	ldr	r0, [r5, #0]
 8017cec:	d01d      	beq.n	8017d2a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8017cee:	2201      	movs	r2, #1
 8017cf0:	250b      	movs	r5, #11
 8017cf2:	6801      	ldr	r1, [r0, #0]
 8017cf4:	b2a4      	uxth	r4, r4
 8017cf6:	b2b6      	uxth	r6, r6
 8017cf8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017cfc:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8017d00:	f8ba 5000 	ldrh.w	r5, [sl]
 8017d04:	f8cd 9010 	str.w	r9, [sp, #16]
 8017d08:	9602      	str	r6, [sp, #8]
 8017d0a:	9401      	str	r4, [sp, #4]
 8017d0c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8017d10:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017d14:	9203      	str	r2, [sp, #12]
 8017d16:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017d1a:	9200      	str	r2, [sp, #0]
 8017d1c:	4642      	mov	r2, r8
 8017d1e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8017d20:	4639      	mov	r1, r7
 8017d22:	47a0      	blx	r4
 8017d24:	b011      	add	sp, #68	; 0x44
 8017d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d2a:	6803      	ldr	r3, [r0, #0]
 8017d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d2e:	4798      	blx	r3
 8017d30:	f8ba 5000 	ldrh.w	r5, [sl]
 8017d34:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017d38:	f04f 0e04 	mov.w	lr, #4
 8017d3c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017d40:	436e      	muls	r6, r5
 8017d42:	fb05 2303 	mla	r3, r5, r3, r2
 8017d46:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017d4a:	1b2d      	subs	r5, r5, r4
 8017d4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d54:	4418      	add	r0, r3
 8017d56:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017d5a:	1982      	adds	r2, r0, r6
 8017d5c:	1b1b      	subs	r3, r3, r4
 8017d5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d64:	4290      	cmp	r0, r2
 8017d66:	d254      	bcs.n	8017e12 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8017d68:	eb00 0a04 	add.w	sl, r0, r4
 8017d6c:	4550      	cmp	r0, sl
 8017d6e:	d24c      	bcs.n	8017e0a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 8017d70:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017d74:	fb1e e101 	smlabb	r1, lr, r1, lr
 8017d78:	eb08 0c01 	add.w	ip, r8, r1
 8017d7c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8017d80:	b173      	cbz	r3, 8017da0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 8017d82:	2bff      	cmp	r3, #255	; 0xff
 8017d84:	f818 b001 	ldrb.w	fp, [r8, r1]
 8017d88:	d10c      	bne.n	8017da4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8017d8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017d8e:	d109      	bne.n	8017da4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8017d90:	f880 b000 	strb.w	fp, [r0]
 8017d94:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8017d98:	7043      	strb	r3, [r0, #1]
 8017d9a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8017d9e:	7083      	strb	r3, [r0, #2]
 8017da0:	3003      	adds	r0, #3
 8017da2:	e7e3      	b.n	8017d6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8017da4:	fb09 f103 	mul.w	r1, r9, r3
 8017da8:	1c4b      	adds	r3, r1, #1
 8017daa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017dae:	7801      	ldrb	r1, [r0, #0]
 8017db0:	121b      	asrs	r3, r3, #8
 8017db2:	b29e      	uxth	r6, r3
 8017db4:	43db      	mvns	r3, r3
 8017db6:	fb1b fb06 	smulbb	fp, fp, r6
 8017dba:	b2db      	uxtb	r3, r3
 8017dbc:	fb01 b103 	mla	r1, r1, r3, fp
 8017dc0:	b289      	uxth	r1, r1
 8017dc2:	f101 0b01 	add.w	fp, r1, #1
 8017dc6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017dca:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017dce:	fb1b fb03 	smulbb	fp, fp, r3
 8017dd2:	1209      	asrs	r1, r1, #8
 8017dd4:	7001      	strb	r1, [r0, #0]
 8017dd6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017dda:	fb01 b106 	mla	r1, r1, r6, fp
 8017dde:	b289      	uxth	r1, r1
 8017de0:	f101 0b01 	add.w	fp, r1, #1
 8017de4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017de8:	1209      	asrs	r1, r1, #8
 8017dea:	7041      	strb	r1, [r0, #1]
 8017dec:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8017df0:	f890 c002 	ldrb.w	ip, [r0, #2]
 8017df4:	fb1c f303 	smulbb	r3, ip, r3
 8017df8:	fb01 3606 	mla	r6, r1, r6, r3
 8017dfc:	b2b6      	uxth	r6, r6
 8017dfe:	1c73      	adds	r3, r6, #1
 8017e00:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017e04:	1236      	asrs	r6, r6, #8
 8017e06:	7086      	strb	r6, [r0, #2]
 8017e08:	e7ca      	b.n	8017da0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 8017e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e0c:	4428      	add	r0, r5
 8017e0e:	441f      	add	r7, r3
 8017e10:	e7a8      	b.n	8017d64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8017e12:	4b06      	ldr	r3, [pc, #24]	; (8017e2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8017e14:	6818      	ldr	r0, [r3, #0]
 8017e16:	6803      	ldr	r3, [r0, #0]
 8017e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e1a:	4798      	blx	r3
 8017e1c:	e782      	b.n	8017d24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8017e1e:	bf00      	nop
 8017e20:	08021d33 	.word	0x08021d33
 8017e24:	08022474 	.word	0x08022474
 8017e28:	08021dcf 	.word	0x08021dcf
 8017e2c:	2000df70 	.word	0x2000df70
 8017e30:	2000df6a 	.word	0x2000df6a

08017e34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8017e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e38:	f8b1 9000 	ldrh.w	r9, [r1]
 8017e3c:	b091      	sub	sp, #68	; 0x44
 8017e3e:	4604      	mov	r4, r0
 8017e40:	460e      	mov	r6, r1
 8017e42:	f1b9 0f01 	cmp.w	r9, #1
 8017e46:	4690      	mov	r8, r2
 8017e48:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017e4c:	d005      	beq.n	8017e5a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8017e4e:	4b68      	ldr	r3, [pc, #416]	; (8017ff0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8017e50:	21ae      	movs	r1, #174	; 0xae
 8017e52:	4a68      	ldr	r2, [pc, #416]	; (8017ff4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8017e54:	4868      	ldr	r0, [pc, #416]	; (8017ff8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8017e56:	f005 ffad 	bl	801ddb4 <__assert_func>
 8017e5a:	6810      	ldr	r0, [r2, #0]
 8017e5c:	ad0c      	add	r5, sp, #48	; 0x30
 8017e5e:	6851      	ldr	r1, [r2, #4]
 8017e60:	f8df a198 	ldr.w	sl, [pc, #408]	; 8017ffc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8017e64:	f8df b198 	ldr.w	fp, [pc, #408]	; 8018000 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8017e68:	c503      	stmia	r5!, {r0, r1}
 8017e6a:	6818      	ldr	r0, [r3, #0]
 8017e6c:	ad0e      	add	r5, sp, #56	; 0x38
 8017e6e:	6859      	ldr	r1, [r3, #4]
 8017e70:	c503      	stmia	r5!, {r0, r1}
 8017e72:	a80c      	add	r0, sp, #48	; 0x30
 8017e74:	f7fa fda8 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017e78:	4641      	mov	r1, r8
 8017e7a:	a80e      	add	r0, sp, #56	; 0x38
 8017e7c:	f7fa fd8c 	bl	8012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017e80:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017e84:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017e88:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017e8c:	f8da 0000 	ldr.w	r0, [sl]
 8017e90:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017e94:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8017e98:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8017e9c:	440c      	add	r4, r1
 8017e9e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017ea2:	440a      	add	r2, r1
 8017ea4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017ea8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017eac:	4413      	add	r3, r2
 8017eae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017eb2:	6803      	ldr	r3, [r0, #0]
 8017eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017eb6:	4798      	blx	r3
 8017eb8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017ebc:	f8da 0000 	ldr.w	r0, [sl]
 8017ec0:	d01e      	beq.n	8017f00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8017ec2:	220b      	movs	r2, #11
 8017ec4:	6801      	ldr	r1, [r0, #0]
 8017ec6:	f8cd 9020 	str.w	r9, [sp, #32]
 8017eca:	b2ad      	uxth	r5, r5
 8017ecc:	9207      	str	r2, [sp, #28]
 8017ece:	f8bb 2000 	ldrh.w	r2, [fp]
 8017ed2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017ed6:	9206      	str	r2, [sp, #24]
 8017ed8:	2200      	movs	r2, #0
 8017eda:	9502      	str	r5, [sp, #8]
 8017edc:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8017ee0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017ee4:	9203      	str	r2, [sp, #12]
 8017ee6:	fa1f f288 	uxth.w	r2, r8
 8017eea:	9201      	str	r2, [sp, #4]
 8017eec:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017ef0:	9200      	str	r2, [sp, #0]
 8017ef2:	4632      	mov	r2, r6
 8017ef4:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8017ef6:	4621      	mov	r1, r4
 8017ef8:	47a8      	blx	r5
 8017efa:	b011      	add	sp, #68	; 0x44
 8017efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f00:	6803      	ldr	r3, [r0, #0]
 8017f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f04:	4798      	blx	r3
 8017f06:	f8bb 2000 	ldrh.w	r2, [fp]
 8017f0a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017f0e:	f04f 0e03 	mov.w	lr, #3
 8017f12:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8017f16:	4355      	muls	r5, r2
 8017f18:	fa1f fc87 	uxth.w	ip, r7
 8017f1c:	fb02 1303 	mla	r3, r2, r3, r1
 8017f20:	eba2 0208 	sub.w	r2, r2, r8
 8017f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017f2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017f30:	4418      	add	r0, r3
 8017f32:	920b      	str	r2, [sp, #44]	; 0x2c
 8017f34:	1943      	adds	r3, r0, r5
 8017f36:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8017f3a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8017f3e:	eba2 0208 	sub.w	r2, r2, r8
 8017f42:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017f46:	b2ad      	uxth	r5, r5
 8017f48:	4298      	cmp	r0, r3
 8017f4a:	d24a      	bcs.n	8017fe2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8017f4c:	eb00 0908 	add.w	r9, r0, r8
 8017f50:	4621      	mov	r1, r4
 8017f52:	4548      	cmp	r0, r9
 8017f54:	460c      	mov	r4, r1
 8017f56:	d240      	bcs.n	8017fda <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8017f58:	f04f 0a04 	mov.w	sl, #4
 8017f5c:	7824      	ldrb	r4, [r4, #0]
 8017f5e:	2fff      	cmp	r7, #255	; 0xff
 8017f60:	f101 0101 	add.w	r1, r1, #1
 8017f64:	fb1e a404 	smlabb	r4, lr, r4, sl
 8017f68:	eb06 0a04 	add.w	sl, r6, r4
 8017f6c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8017f70:	d02b      	beq.n	8017fca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8017f72:	7804      	ldrb	r4, [r0, #0]
 8017f74:	fb14 f405 	smulbb	r4, r4, r5
 8017f78:	fb0b 440c 	mla	r4, fp, ip, r4
 8017f7c:	b2a4      	uxth	r4, r4
 8017f7e:	f104 0b01 	add.w	fp, r4, #1
 8017f82:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8017f86:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017f8a:	fb1b fb05 	smulbb	fp, fp, r5
 8017f8e:	1224      	asrs	r4, r4, #8
 8017f90:	7004      	strb	r4, [r0, #0]
 8017f92:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017f96:	fb04 b40c 	mla	r4, r4, ip, fp
 8017f9a:	b2a4      	uxth	r4, r4
 8017f9c:	f104 0b01 	add.w	fp, r4, #1
 8017fa0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8017fa4:	1224      	asrs	r4, r4, #8
 8017fa6:	7044      	strb	r4, [r0, #1]
 8017fa8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8017fac:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017fb0:	fb1a fa05 	smulbb	sl, sl, r5
 8017fb4:	fb04 a40c 	mla	r4, r4, ip, sl
 8017fb8:	b2a4      	uxth	r4, r4
 8017fba:	f104 0a01 	add.w	sl, r4, #1
 8017fbe:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8017fc2:	1224      	asrs	r4, r4, #8
 8017fc4:	7084      	strb	r4, [r0, #2]
 8017fc6:	3003      	adds	r0, #3
 8017fc8:	e7c3      	b.n	8017f52 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 8017fca:	f880 b000 	strb.w	fp, [r0]
 8017fce:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017fd2:	7044      	strb	r4, [r0, #1]
 8017fd4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8017fd8:	e7f4      	b.n	8017fc4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 8017fda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017fdc:	4420      	add	r0, r4
 8017fde:	188c      	adds	r4, r1, r2
 8017fe0:	e7b2      	b.n	8017f48 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 8017fe2:	4b06      	ldr	r3, [pc, #24]	; (8017ffc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8017fe4:	6818      	ldr	r0, [r3, #0]
 8017fe6:	6803      	ldr	r3, [r0, #0]
 8017fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fea:	4798      	blx	r3
 8017fec:	e785      	b.n	8017efa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8017fee:	bf00      	nop
 8017ff0:	08021cb2 	.word	0x08021cb2
 8017ff4:	08022367 	.word	0x08022367
 8017ff8:	08021dcf 	.word	0x08021dcf
 8017ffc:	2000df70 	.word	0x2000df70
 8018000:	2000df6a 	.word	0x2000df6a

08018004 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8018004:	b570      	push	{r4, r5, r6, lr}
 8018006:	780d      	ldrb	r5, [r1, #0]
 8018008:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801800c:	2d01      	cmp	r5, #1
 801800e:	d00d      	beq.n	801802c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8018010:	d307      	bcc.n	8018022 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8018012:	2d02      	cmp	r5, #2
 8018014:	d10f      	bne.n	8018036 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8018016:	4b08      	ldr	r3, [pc, #32]	; (8018038 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8018018:	2153      	movs	r1, #83	; 0x53
 801801a:	4a08      	ldr	r2, [pc, #32]	; (801803c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801801c:	4808      	ldr	r0, [pc, #32]	; (8018040 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801801e:	f005 fec9 	bl	801ddb4 <__assert_func>
 8018022:	9404      	str	r4, [sp, #16]
 8018024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018028:	f7ff be20 	b.w	8017c6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801802c:	9404      	str	r4, [sp, #16]
 801802e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018032:	f7ff beff 	b.w	8017e34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8018036:	bd70      	pop	{r4, r5, r6, pc}
 8018038:	08021c54 	.word	0x08021c54
 801803c:	08022270 	.word	0x08022270
 8018040:	08021dcf 	.word	0x08021dcf

08018044 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8018044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018048:	4605      	mov	r5, r0
 801804a:	b08d      	sub	sp, #52	; 0x34
 801804c:	460c      	mov	r4, r1
 801804e:	461f      	mov	r7, r3
 8018050:	2b00      	cmp	r3, #0
 8018052:	d051      	beq.n	80180f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 8018054:	6808      	ldr	r0, [r1, #0]
 8018056:	ab08      	add	r3, sp, #32
 8018058:	6849      	ldr	r1, [r1, #4]
 801805a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8018224 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801805e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8018228 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8018062:	c303      	stmia	r3!, {r0, r1}
 8018064:	6810      	ldr	r0, [r2, #0]
 8018066:	ab0a      	add	r3, sp, #40	; 0x28
 8018068:	6851      	ldr	r1, [r2, #4]
 801806a:	c303      	stmia	r3!, {r0, r1}
 801806c:	a808      	add	r0, sp, #32
 801806e:	f7fa fcab 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018072:	4621      	mov	r1, r4
 8018074:	a80a      	add	r0, sp, #40	; 0x28
 8018076:	f7fa fc8f 	bl	8012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801807a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801807e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8018082:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8018086:	f8d8 0000 	ldr.w	r0, [r8]
 801808a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801808e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8018092:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 8018096:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801809a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801809e:	440a      	add	r2, r1
 80180a0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80180a4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80180a8:	4413      	add	r3, r2
 80180aa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80180ae:	6803      	ldr	r3, [r0, #0]
 80180b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180b2:	4798      	blx	r3
 80180b4:	2fff      	cmp	r7, #255	; 0xff
 80180b6:	d022      	beq.n	80180fe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 80180b8:	f010 0f04 	tst.w	r0, #4
 80180bc:	f8d8 0000 	ldr.w	r0, [r8]
 80180c0:	d020      	beq.n	8018104 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 80180c2:	2100      	movs	r1, #0
 80180c4:	f04f 0e01 	mov.w	lr, #1
 80180c8:	f8d0 c000 	ldr.w	ip, [r0]
 80180cc:	b2a4      	uxth	r4, r4
 80180ce:	b2b6      	uxth	r6, r6
 80180d0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80180d4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80180d8:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 80180dc:	f8b9 e000 	ldrh.w	lr, [r9]
 80180e0:	9703      	str	r7, [sp, #12]
 80180e2:	9401      	str	r4, [sp, #4]
 80180e4:	9600      	str	r6, [sp, #0]
 80180e6:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80180ea:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80180ee:	9102      	str	r1, [sp, #8]
 80180f0:	4629      	mov	r1, r5
 80180f2:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 80180f6:	47a0      	blx	r4
 80180f8:	b00d      	add	sp, #52	; 0x34
 80180fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180fe:	f010 0f01 	tst.w	r0, #1
 8018102:	e7db      	b.n	80180bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8018104:	6803      	ldr	r3, [r0, #0]
 8018106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018108:	4798      	blx	r3
 801810a:	f8b9 1000 	ldrh.w	r1, [r9]
 801810e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8018112:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8018116:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801811a:	434c      	muls	r4, r1
 801811c:	2fff      	cmp	r7, #255	; 0xff
 801811e:	fb01 2303 	mla	r3, r1, r3, r2
 8018122:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018126:	eba1 0106 	sub.w	r1, r1, r6
 801812a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801812e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018132:	4418      	add	r0, r3
 8018134:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8018138:	eba3 0606 	sub.w	r6, r3, r6
 801813c:	4404      	add	r4, r0
 801813e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8018142:	d04a      	beq.n	80181da <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 8018144:	43fa      	mvns	r2, r7
 8018146:	b2bb      	uxth	r3, r7
 8018148:	b2d7      	uxtb	r7, r2
 801814a:	42a0      	cmp	r0, r4
 801814c:	d263      	bcs.n	8018216 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801814e:	eb00 0e0c 	add.w	lr, r0, ip
 8018152:	4586      	cmp	lr, r0
 8018154:	f100 0803 	add.w	r8, r0, #3
 8018158:	d93a      	bls.n	80181d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 801815a:	f835 2b02 	ldrh.w	r2, [r5], #2
 801815e:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8018162:	00d0      	lsls	r0, r2, #3
 8018164:	fb19 f907 	smulbb	r9, r9, r7
 8018168:	b2c0      	uxtb	r0, r0
 801816a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801816e:	fb00 9003 	mla	r0, r0, r3, r9
 8018172:	b280      	uxth	r0, r0
 8018174:	f100 0901 	add.w	r9, r0, #1
 8018178:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801817c:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8018180:	fb19 f907 	smulbb	r9, r9, r7
 8018184:	1200      	asrs	r0, r0, #8
 8018186:	f808 0c03 	strb.w	r0, [r8, #-3]
 801818a:	10d0      	asrs	r0, r2, #3
 801818c:	1212      	asrs	r2, r2, #8
 801818e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8018192:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8018196:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801819a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801819e:	fb00 9003 	mla	r0, r0, r3, r9
 80181a2:	b280      	uxth	r0, r0
 80181a4:	f100 0901 	add.w	r9, r0, #1
 80181a8:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80181ac:	1200      	asrs	r0, r0, #8
 80181ae:	f808 0c02 	strb.w	r0, [r8, #-2]
 80181b2:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80181b6:	fb10 f007 	smulbb	r0, r0, r7
 80181ba:	fb02 0203 	mla	r2, r2, r3, r0
 80181be:	b292      	uxth	r2, r2
 80181c0:	1c50      	adds	r0, r2, #1
 80181c2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80181c6:	4640      	mov	r0, r8
 80181c8:	1212      	asrs	r2, r2, #8
 80181ca:	f808 2c01 	strb.w	r2, [r8, #-1]
 80181ce:	e7c0      	b.n	8018152 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 80181d0:	4408      	add	r0, r1
 80181d2:	4435      	add	r5, r6
 80181d4:	e7b9      	b.n	801814a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 80181d6:	4408      	add	r0, r1
 80181d8:	4435      	add	r5, r6
 80181da:	42a0      	cmp	r0, r4
 80181dc:	d21b      	bcs.n	8018216 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 80181de:	eb00 070c 	add.w	r7, r0, ip
 80181e2:	42b8      	cmp	r0, r7
 80181e4:	d2f7      	bcs.n	80181d6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 80181e6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80181ea:	3003      	adds	r0, #3
 80181ec:	00da      	lsls	r2, r3, #3
 80181ee:	b2d2      	uxtb	r2, r2
 80181f0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80181f4:	f800 2c03 	strb.w	r2, [r0, #-3]
 80181f8:	10da      	asrs	r2, r3, #3
 80181fa:	121b      	asrs	r3, r3, #8
 80181fc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8018200:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8018204:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8018208:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801820c:	f800 2c02 	strb.w	r2, [r0, #-2]
 8018210:	f800 3c01 	strb.w	r3, [r0, #-1]
 8018214:	e7e5      	b.n	80181e2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 8018216:	4b03      	ldr	r3, [pc, #12]	; (8018224 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8018218:	6818      	ldr	r0, [r3, #0]
 801821a:	6803      	ldr	r3, [r0, #0]
 801821c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801821e:	4798      	blx	r3
 8018220:	e76a      	b.n	80180f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 8018222:	bf00      	nop
 8018224:	2000df70 	.word	0x2000df70
 8018228:	2000df6a 	.word	0x2000df6a

0801822c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801822c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018230:	b088      	sub	sp, #32
 8018232:	460d      	mov	r5, r1
 8018234:	4604      	mov	r4, r0
 8018236:	461e      	mov	r6, r3
 8018238:	6808      	ldr	r0, [r1, #0]
 801823a:	ab04      	add	r3, sp, #16
 801823c:	6849      	ldr	r1, [r1, #4]
 801823e:	4f5c      	ldr	r7, [pc, #368]	; (80183b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 8018240:	c303      	stmia	r3!, {r0, r1}
 8018242:	6810      	ldr	r0, [r2, #0]
 8018244:	ab06      	add	r3, sp, #24
 8018246:	6851      	ldr	r1, [r2, #4]
 8018248:	c303      	stmia	r3!, {r0, r1}
 801824a:	a804      	add	r0, sp, #16
 801824c:	f7fa fbbc 	bl	80129c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018250:	4629      	mov	r1, r5
 8018252:	a806      	add	r0, sp, #24
 8018254:	f7fa fba0 	bl	8012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018258:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801825c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8018260:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8018264:	6838      	ldr	r0, [r7, #0]
 8018266:	fb11 2103 	smlabb	r1, r1, r3, r2
 801826a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801826e:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 8018272:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8018276:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801827a:	440a      	add	r2, r1
 801827c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018280:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8018284:	4413      	add	r3, r2
 8018286:	f8ad 301a 	strh.w	r3, [sp, #26]
 801828a:	6803      	ldr	r3, [r0, #0]
 801828c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801828e:	4798      	blx	r3
 8018290:	2eff      	cmp	r6, #255	; 0xff
 8018292:	d117      	bne.n	80182c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8018294:	f010 0f20 	tst.w	r0, #32
 8018298:	6838      	ldr	r0, [r7, #0]
 801829a:	d016      	beq.n	80182ca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801829c:	b2ad      	uxth	r5, r5
 801829e:	6801      	ldr	r1, [r0, #0]
 80182a0:	9603      	str	r6, [sp, #12]
 80182a2:	9501      	str	r5, [sp, #4]
 80182a4:	fa1f f588 	uxth.w	r5, r8
 80182a8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 80182ac:	9500      	str	r5, [sp, #0]
 80182ae:	9602      	str	r6, [sp, #8]
 80182b0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80182b4:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 80182b6:	4621      	mov	r1, r4
 80182b8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80182bc:	47a8      	blx	r5
 80182be:	b008      	add	sp, #32
 80182c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80182c8:	e7e6      	b.n	8018298 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80182ca:	6803      	ldr	r3, [r0, #0]
 80182cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182ce:	4798      	blx	r3
 80182d0:	4b38      	ldr	r3, [pc, #224]	; (80183b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80182d2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80182d6:	f8b3 c000 	ldrh.w	ip, [r3]
 80182da:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80182de:	fb0c f505 	mul.w	r5, ip, r5
 80182e2:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 80182e6:	fb0c 2303 	mla	r3, ip, r3, r2
 80182ea:	ebac 0c08 	sub.w	ip, ip, r8
 80182ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80182f2:	ebae 0e08 	sub.w	lr, lr, r8
 80182f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80182fa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80182fe:	4418      	add	r0, r3
 8018300:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8018304:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8018308:	4405      	add	r5, r0
 801830a:	42a8      	cmp	r0, r5
 801830c:	d24a      	bcs.n	80183a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 801830e:	eb00 0803 	add.w	r8, r0, r3
 8018312:	4540      	cmp	r0, r8
 8018314:	d243      	bcs.n	801839e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 8018316:	78e2      	ldrb	r2, [r4, #3]
 8018318:	b15a      	cbz	r2, 8018332 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801831a:	2aff      	cmp	r2, #255	; 0xff
 801831c:	f894 9000 	ldrb.w	r9, [r4]
 8018320:	d10a      	bne.n	8018338 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8018322:	2eff      	cmp	r6, #255	; 0xff
 8018324:	d108      	bne.n	8018338 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8018326:	f880 9000 	strb.w	r9, [r0]
 801832a:	7862      	ldrb	r2, [r4, #1]
 801832c:	7042      	strb	r2, [r0, #1]
 801832e:	78a2      	ldrb	r2, [r4, #2]
 8018330:	7082      	strb	r2, [r0, #2]
 8018332:	3003      	adds	r0, #3
 8018334:	3404      	adds	r4, #4
 8018336:	e7ec      	b.n	8018312 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 8018338:	4372      	muls	r2, r6
 801833a:	1c51      	adds	r1, r2, #1
 801833c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8018340:	1209      	asrs	r1, r1, #8
 8018342:	fa1f fa81 	uxth.w	sl, r1
 8018346:	43c9      	mvns	r1, r1
 8018348:	fb19 f90a 	smulbb	r9, r9, sl
 801834c:	b2ca      	uxtb	r2, r1
 801834e:	7801      	ldrb	r1, [r0, #0]
 8018350:	fb01 9902 	mla	r9, r1, r2, r9
 8018354:	fa1f f989 	uxth.w	r9, r9
 8018358:	f109 0101 	add.w	r1, r9, #1
 801835c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8018360:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018364:	f880 9000 	strb.w	r9, [r0]
 8018368:	f890 9001 	ldrb.w	r9, [r0, #1]
 801836c:	7861      	ldrb	r1, [r4, #1]
 801836e:	fb19 f902 	smulbb	r9, r9, r2
 8018372:	fb01 910a 	mla	r1, r1, sl, r9
 8018376:	b289      	uxth	r1, r1
 8018378:	f101 0901 	add.w	r9, r1, #1
 801837c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8018380:	1209      	asrs	r1, r1, #8
 8018382:	7041      	strb	r1, [r0, #1]
 8018384:	7881      	ldrb	r1, [r0, #2]
 8018386:	f894 9002 	ldrb.w	r9, [r4, #2]
 801838a:	fb11 f202 	smulbb	r2, r1, r2
 801838e:	fb09 220a 	mla	r2, r9, sl, r2
 8018392:	b292      	uxth	r2, r2
 8018394:	1c51      	adds	r1, r2, #1
 8018396:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801839a:	1212      	asrs	r2, r2, #8
 801839c:	e7c8      	b.n	8018330 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 801839e:	4460      	add	r0, ip
 80183a0:	4474      	add	r4, lr
 80183a2:	e7b2      	b.n	801830a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 80183a4:	6838      	ldr	r0, [r7, #0]
 80183a6:	6803      	ldr	r3, [r0, #0]
 80183a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183aa:	4798      	blx	r3
 80183ac:	e787      	b.n	80182be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 80183ae:	bf00      	nop
 80183b0:	2000df70 	.word	0x2000df70
 80183b4:	2000df6a 	.word	0x2000df6a

080183b8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80183b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183bc:	b085      	sub	sp, #20
 80183be:	4606      	mov	r6, r0
 80183c0:	460c      	mov	r4, r1
 80183c2:	4691      	mov	r9, r2
 80183c4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80183c8:	4698      	mov	r8, r3
 80183ca:	b31d      	cbz	r5, 8018414 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80183cc:	4608      	mov	r0, r1
 80183ce:	f7fd f94f 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80183d2:	4607      	mov	r7, r0
 80183d4:	4620      	mov	r0, r4
 80183d6:	f7fd f985 	bl	80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80183da:	f8ad 000e 	strh.w	r0, [sp, #14]
 80183de:	4620      	mov	r0, r4
 80183e0:	f8ad 9008 	strh.w	r9, [sp, #8]
 80183e4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80183e8:	f8ad 700c 	strh.w	r7, [sp, #12]
 80183ec:	f7fd fad2 	bl	8015994 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80183f0:	280b      	cmp	r0, #11
 80183f2:	d838      	bhi.n	8018466 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 80183f4:	e8df f000 	tbb	[pc, r0]
 80183f8:	37062920 	.word	0x37062920
 80183fc:	37373737 	.word	0x37373737
 8018400:	11373737 	.word	0x11373737
 8018404:	4620      	mov	r0, r4
 8018406:	f7fd fa3b 	bl	8015880 <_ZNK8touchgfx6Bitmap7getDataEv>
 801840a:	462b      	mov	r3, r5
 801840c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801840e:	a902      	add	r1, sp, #8
 8018410:	f7ff ff0c 	bl	801822c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018414:	b005      	add	sp, #20
 8018416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801841a:	4620      	mov	r0, r4
 801841c:	f7fd fa30 	bl	8015880 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018420:	4606      	mov	r6, r0
 8018422:	4620      	mov	r0, r4
 8018424:	f7fd fa5e 	bl	80158e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8018428:	9500      	str	r5, [sp, #0]
 801842a:	4601      	mov	r1, r0
 801842c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801842e:	aa02      	add	r2, sp, #8
 8018430:	4630      	mov	r0, r6
 8018432:	f7ff fde7 	bl	8018004 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8018436:	e7ed      	b.n	8018414 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018438:	4620      	mov	r0, r4
 801843a:	f7fd fa21 	bl	8015880 <_ZNK8touchgfx6Bitmap7getDataEv>
 801843e:	462b      	mov	r3, r5
 8018440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018442:	a902      	add	r1, sp, #8
 8018444:	f7ff fdfe 	bl	8018044 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8018448:	e7e4      	b.n	8018414 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801844a:	6833      	ldr	r3, [r6, #0]
 801844c:	4620      	mov	r0, r4
 801844e:	68df      	ldr	r7, [r3, #12]
 8018450:	f7fd fa16 	bl	8015880 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018454:	2300      	movs	r3, #0
 8018456:	4601      	mov	r1, r0
 8018458:	aa02      	add	r2, sp, #8
 801845a:	4630      	mov	r0, r6
 801845c:	e9cd 5300 	strd	r5, r3, [sp]
 8018460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018462:	47b8      	blx	r7
 8018464:	e7d6      	b.n	8018414 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018466:	4b03      	ldr	r3, [pc, #12]	; (8018474 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 8018468:	2147      	movs	r1, #71	; 0x47
 801846a:	4a03      	ldr	r2, [pc, #12]	; (8018478 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801846c:	4803      	ldr	r0, [pc, #12]	; (801847c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801846e:	f005 fca1 	bl	801ddb4 <__assert_func>
 8018472:	bf00      	nop
 8018474:	08021d00 	.word	0x08021d00
 8018478:	080223f0 	.word	0x080223f0
 801847c:	08021dcf 	.word	0x08021dcf

08018480 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8018480:	b570      	push	{r4, r5, r6, lr}
 8018482:	9d04      	ldr	r5, [sp, #16]
 8018484:	460c      	mov	r4, r1
 8018486:	4619      	mov	r1, r3
 8018488:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801848c:	2a0d      	cmp	r2, #13
 801848e:	d826      	bhi.n	80184de <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8018490:	e8df f002 	tbb	[pc, r2]
 8018494:	200e1407 	.word	0x200e1407
 8018498:	20202020 	.word	0x20202020
 801849c:	20202020 	.word	0x20202020
 80184a0:	2020      	.short	0x2020
 80184a2:	4b0f      	ldr	r3, [pc, #60]	; (80184e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80184a4:	f240 11d3 	movw	r1, #467	; 0x1d3
 80184a8:	4a0e      	ldr	r2, [pc, #56]	; (80184e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80184aa:	480f      	ldr	r0, [pc, #60]	; (80184e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80184ac:	f005 fc82 	bl	801ddb4 <__assert_func>
 80184b0:	462a      	mov	r2, r5
 80184b2:	4620      	mov	r0, r4
 80184b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184b8:	f7ff beb8 	b.w	801822c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80184bc:	6802      	ldr	r2, [r0, #0]
 80184be:	2600      	movs	r6, #0
 80184c0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80184c4:	68d6      	ldr	r6, [r2, #12]
 80184c6:	462b      	mov	r3, r5
 80184c8:	460a      	mov	r2, r1
 80184ca:	4621      	mov	r1, r4
 80184cc:	46b4      	mov	ip, r6
 80184ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184d2:	4760      	bx	ip
 80184d4:	4b05      	ldr	r3, [pc, #20]	; (80184ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80184d6:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 80184da:	4a02      	ldr	r2, [pc, #8]	; (80184e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80184dc:	e7e5      	b.n	80184aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 80184de:	bd70      	pop	{r4, r5, r6, pc}
 80184e0:	08021fa6 	.word	0x08021fa6
 80184e4:	080226d8 	.word	0x080226d8
 80184e8:	08021dcf 	.word	0x08021dcf
 80184ec:	08021fe7 	.word	0x08021fe7

080184f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80184f0:	b158      	cbz	r0, 801850a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80184f2:	2902      	cmp	r1, #2
 80184f4:	d00f      	beq.n	8018516 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80184f6:	2903      	cmp	r1, #3
 80184f8:	d010      	beq.n	801851c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80184fa:	2901      	cmp	r1, #1
 80184fc:	d101      	bne.n	8018502 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80184fe:	2001      	movs	r0, #1
 8018500:	4770      	bx	lr
 8018502:	4b08      	ldr	r3, [pc, #32]	; (8018524 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8018504:	8819      	ldrh	r1, [r3, #0]
 8018506:	4248      	negs	r0, r1
 8018508:	4770      	bx	lr
 801850a:	2902      	cmp	r1, #2
 801850c:	d006      	beq.n	801851c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801850e:	2903      	cmp	r1, #3
 8018510:	d0f7      	beq.n	8018502 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8018512:	2901      	cmp	r1, #1
 8018514:	d1f3      	bne.n	80184fe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8018516:	4b03      	ldr	r3, [pc, #12]	; (8018524 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8018518:	8818      	ldrh	r0, [r3, #0]
 801851a:	4770      	bx	lr
 801851c:	f04f 30ff 	mov.w	r0, #4294967295
 8018520:	4770      	bx	lr
 8018522:	bf00      	nop
 8018524:	2000df6a 	.word	0x2000df6a

08018528 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8018528:	b170      	cbz	r0, 8018548 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801852a:	2902      	cmp	r1, #2
 801852c:	d012      	beq.n	8018554 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801852e:	2903      	cmp	r1, #3
 8018530:	d006      	beq.n	8018540 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8018532:	2901      	cmp	r1, #1
 8018534:	d001      	beq.n	801853a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8018536:	2001      	movs	r0, #1
 8018538:	4770      	bx	lr
 801853a:	4b08      	ldr	r3, [pc, #32]	; (801855c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801853c:	8818      	ldrh	r0, [r3, #0]
 801853e:	4770      	bx	lr
 8018540:	4b06      	ldr	r3, [pc, #24]	; (801855c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8018542:	8818      	ldrh	r0, [r3, #0]
 8018544:	4240      	negs	r0, r0
 8018546:	4770      	bx	lr
 8018548:	2902      	cmp	r1, #2
 801854a:	d0f9      	beq.n	8018540 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801854c:	2903      	cmp	r1, #3
 801854e:	d0f2      	beq.n	8018536 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8018550:	2901      	cmp	r1, #1
 8018552:	d1f2      	bne.n	801853a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8018554:	f04f 30ff 	mov.w	r0, #4294967295
 8018558:	4770      	bx	lr
 801855a:	bf00      	nop
 801855c:	2000df6a 	.word	0x2000df6a

08018560 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8018560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018564:	b095      	sub	sp, #84	; 0x54
 8018566:	9109      	str	r1, [sp, #36]	; 0x24
 8018568:	a910      	add	r1, sp, #64	; 0x40
 801856a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801856e:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 8018572:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 8018576:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801857a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801857e:	e881 000c 	stmia.w	r1, {r2, r3}
 8018582:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 8018586:	9308      	str	r3, [sp, #32]
 8018588:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801858c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 8018590:	930f      	str	r3, [sp, #60]	; 0x3c
 8018592:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 8018596:	798d      	ldrb	r5, [r1, #6]
 8018598:	930a      	str	r3, [sp, #40]	; 0x28
 801859a:	7b4b      	ldrb	r3, [r1, #13]
 801859c:	0158      	lsls	r0, r3, #5
 801859e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80185a2:	4328      	orrs	r0, r5
 80185a4:	9007      	str	r0, [sp, #28]
 80185a6:	f000 817a 	beq.w	801889e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80185aa:	011b      	lsls	r3, r3, #4
 80185ac:	79c8      	ldrb	r0, [r1, #7]
 80185ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80185b2:	4303      	orrs	r3, r0
 80185b4:	930c      	str	r3, [sp, #48]	; 0x30
 80185b6:	f000 8172 	beq.w	801889e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80185ba:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80185be:	b29b      	uxth	r3, r3
 80185c0:	2f00      	cmp	r7, #0
 80185c2:	f000 8117 	beq.w	80187f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 80185c6:	1aff      	subs	r7, r7, r3
 80185c8:	b2bf      	uxth	r7, r7
 80185ca:	043b      	lsls	r3, r7, #16
 80185cc:	d502      	bpl.n	80185d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80185ce:	1bf6      	subs	r6, r6, r7
 80185d0:	2700      	movs	r7, #0
 80185d2:	b236      	sxth	r6, r6
 80185d4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80185d8:	a810      	add	r0, sp, #64	; 0x40
 80185da:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80185de:	428e      	cmp	r6, r1
 80185e0:	b28b      	uxth	r3, r1
 80185e2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 80185e6:	bfbf      	itttt	lt
 80185e8:	18ff      	addlt	r7, r7, r3
 80185ea:	1bbe      	sublt	r6, r7, r6
 80185ec:	b2b7      	uxthlt	r7, r6
 80185ee:	460e      	movlt	r6, r1
 80185f0:	8891      	ldrh	r1, [r2, #4]
 80185f2:	440b      	add	r3, r1
 80185f4:	4631      	mov	r1, r6
 80185f6:	b21b      	sxth	r3, r3
 80185f8:	930e      	str	r3, [sp, #56]	; 0x38
 80185fa:	88d3      	ldrh	r3, [r2, #6]
 80185fc:	9a08      	ldr	r2, [sp, #32]
 80185fe:	449a      	add	sl, r3
 8018600:	fa0f f38a 	sxth.w	r3, sl
 8018604:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8018608:	930d      	str	r3, [sp, #52]	; 0x34
 801860a:	4bb4      	ldr	r3, [pc, #720]	; (80188dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801860c:	f893 b000 	ldrb.w	fp, [r3]
 8018610:	f10b 3cff 	add.w	ip, fp, #4294967295
 8018614:	f1dc 0300 	rsbs	r3, ip, #0
 8018618:	eb43 030c 	adc.w	r3, r3, ip
 801861c:	930b      	str	r3, [sp, #44]	; 0x2c
 801861e:	464b      	mov	r3, r9
 8018620:	f7fa f80e 	bl	8012640 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8018624:	4631      	mov	r1, r6
 8018626:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801862a:	464b      	mov	r3, r9
 801862c:	9a08      	ldr	r2, [sp, #32]
 801862e:	a810      	add	r0, sp, #64	; 0x40
 8018630:	f7fa f81e 	bl	8012670 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8018634:	a914      	add	r1, sp, #80	; 0x50
 8018636:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801863a:	a813      	add	r0, sp, #76	; 0x4c
 801863c:	f7fa f97a 	bl	8012934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8018640:	f1b9 0f00 	cmp.w	r9, #0
 8018644:	f040 80d9 	bne.w	80187fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 8018648:	f1bb 0f01 	cmp.w	fp, #1
 801864c:	f040 80dd 	bne.w	801880a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8018650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018652:	b153      	cbz	r3, 801866a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8018654:	2508      	movs	r5, #8
 8018656:	9a07      	ldr	r2, [sp, #28]
 8018658:	fb95 f3f8 	sdiv	r3, r5, r8
 801865c:	1e5d      	subs	r5, r3, #1
 801865e:	4415      	add	r5, r2
 8018660:	fb95 f5f3 	sdiv	r5, r5, r3
 8018664:	fb15 f503 	smulbb	r5, r5, r3
 8018668:	b2ad      	uxth	r5, r5
 801866a:	b907      	cbnz	r7, 801866e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801866c:	b16c      	cbz	r4, 801868a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801866e:	fb04 7305 	mla	r3, r4, r5, r7
 8018672:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018674:	ebaa 0a04 	sub.w	sl, sl, r4
 8018678:	fb08 f303 	mul.w	r3, r8, r3
 801867c:	fa1f fa8a 	uxth.w	sl, sl
 8018680:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8018684:	f003 0407 	and.w	r4, r3, #7
 8018688:	9224      	str	r2, [sp, #144]	; 0x90
 801868a:	4649      	mov	r1, r9
 801868c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801868e:	f7ff ff2f 	bl	80184f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8018692:	4649      	mov	r1, r9
 8018694:	4683      	mov	fp, r0
 8018696:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018698:	f7ff ff46 	bl	8018528 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801869c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801869e:	9a08      	ldr	r2, [sp, #32]
 80186a0:	4681      	mov	r9, r0
 80186a2:	1a9b      	subs	r3, r3, r2
 80186a4:	459a      	cmp	sl, r3
 80186a6:	bfa8      	it	ge
 80186a8:	469a      	movge	sl, r3
 80186aa:	f1ba 0f00 	cmp.w	sl, #0
 80186ae:	f340 80f6 	ble.w	801889e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80186b2:	1bf6      	subs	r6, r6, r7
 80186b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80186b6:	1b9e      	subs	r6, r3, r6
 80186b8:	9b07      	ldr	r3, [sp, #28]
 80186ba:	429e      	cmp	r6, r3
 80186bc:	bfd4      	ite	le
 80186be:	ebc7 0706 	rsble	r7, r7, r6
 80186c2:	ebc7 0703 	rsbgt	r7, r7, r3
 80186c6:	2f00      	cmp	r7, #0
 80186c8:	f340 80e9 	ble.w	801889e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80186cc:	1bed      	subs	r5, r5, r7
 80186ce:	fb08 f305 	mul.w	r3, r8, r5
 80186d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80186d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80186d6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80186da:	930c      	str	r3, [sp, #48]	; 0x30
 80186dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80186de:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80186e2:	930d      	str	r3, [sp, #52]	; 0x34
 80186e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	930e      	str	r3, [sp, #56]	; 0x38
 80186ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	f040 80db 	bne.w	80188a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80186f2:	4b7b      	ldr	r3, [pc, #492]	; (80188e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80186f4:	6818      	ldr	r0, [r3, #0]
 80186f6:	6803      	ldr	r3, [r0, #0]
 80186f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186fa:	4798      	blx	r3
 80186fc:	2301      	movs	r3, #1
 80186fe:	4a79      	ldr	r2, [pc, #484]	; (80188e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8018700:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8018704:	fb07 9b1b 	mls	fp, r7, fp, r9
 8018708:	fa03 f308 	lsl.w	r3, r3, r8
 801870c:	8811      	ldrh	r1, [r2, #0]
 801870e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8018712:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8018716:	3b01      	subs	r3, #1
 8018718:	fb06 bb07 	mla	fp, r6, r7, fp
 801871c:	b2db      	uxtb	r3, r3
 801871e:	9308      	str	r3, [sp, #32]
 8018720:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8018724:	fb01 2303 	mla	r3, r1, r3, r2
 8018728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801872c:	18c3      	adds	r3, r0, r3
 801872e:	9307      	str	r3, [sp, #28]
 8018730:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018732:	781a      	ldrb	r2, [r3, #0]
 8018734:	4122      	asrs	r2, r4
 8018736:	b2d2      	uxtb	r2, r2
 8018738:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801873c:	f0c0 80d4 	bcc.w	80188e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 8018740:	46be      	mov	lr, r7
 8018742:	9907      	ldr	r1, [sp, #28]
 8018744:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8018748:	f0c0 80b7 	bcc.w	80188ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801874c:	9b08      	ldr	r3, [sp, #32]
 801874e:	4013      	ands	r3, r2
 8018750:	d041      	beq.n	80187d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8018752:	20ff      	movs	r0, #255	; 0xff
 8018754:	9d08      	ldr	r5, [sp, #32]
 8018756:	fb90 f5f5 	sdiv	r5, r0, r5
 801875a:	436b      	muls	r3, r5
 801875c:	2bfe      	cmp	r3, #254	; 0xfe
 801875e:	dd03      	ble.n	8018768 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8018760:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018762:	4285      	cmp	r5, r0
 8018764:	f000 80a2 	beq.w	80188ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8018768:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801876a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801876c:	fb15 f303 	smulbb	r3, r5, r3
 8018770:	b29b      	uxth	r3, r3
 8018772:	1c5d      	adds	r5, r3, #1
 8018774:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8018778:	780d      	ldrb	r5, [r1, #0]
 801877a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801877e:	fa1f fc83 	uxth.w	ip, r3
 8018782:	43db      	mvns	r3, r3
 8018784:	fb10 f90c 	smulbb	r9, r0, ip
 8018788:	b2db      	uxtb	r3, r3
 801878a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801878c:	fb05 9503 	mla	r5, r5, r3, r9
 8018790:	b2ad      	uxth	r5, r5
 8018792:	f105 0901 	add.w	r9, r5, #1
 8018796:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801879a:	fb10 f90c 	smulbb	r9, r0, ip
 801879e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80187a0:	122d      	asrs	r5, r5, #8
 80187a2:	fb10 fc0c 	smulbb	ip, r0, ip
 80187a6:	700d      	strb	r5, [r1, #0]
 80187a8:	784d      	ldrb	r5, [r1, #1]
 80187aa:	fb05 9503 	mla	r5, r5, r3, r9
 80187ae:	b2ad      	uxth	r5, r5
 80187b0:	f105 0901 	add.w	r9, r5, #1
 80187b4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80187b8:	122d      	asrs	r5, r5, #8
 80187ba:	704d      	strb	r5, [r1, #1]
 80187bc:	788d      	ldrb	r5, [r1, #2]
 80187be:	fb05 cc03 	mla	ip, r5, r3, ip
 80187c2:	fa1f fc8c 	uxth.w	ip, ip
 80187c6:	f10c 0301 	add.w	r3, ip, #1
 80187ca:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80187ce:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80187d2:	f881 c002 	strb.w	ip, [r1, #2]
 80187d6:	4444      	add	r4, r8
 80187d8:	4431      	add	r1, r6
 80187da:	b2a4      	uxth	r4, r4
 80187dc:	2c07      	cmp	r4, #7
 80187de:	bf89      	itett	hi
 80187e0:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 80187e2:	fa42 f208 	asrls.w	r2, r2, r8
 80187e6:	2400      	movhi	r4, #0
 80187e8:	785a      	ldrbhi	r2, [r3, #1]
 80187ea:	bf8a      	itet	hi
 80187ec:	3301      	addhi	r3, #1
 80187ee:	b2d2      	uxtbls	r2, r2
 80187f0:	9324      	strhi	r3, [sp, #144]	; 0x90
 80187f2:	e7a7      	b.n	8018744 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 80187f4:	441e      	add	r6, r3
 80187f6:	b236      	sxth	r6, r6
 80187f8:	e6ec      	b.n	80185d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80187fa:	f1b9 0f01 	cmp.w	r9, #1
 80187fe:	f47f af27 	bne.w	8018650 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018802:	f1bb 0f01 	cmp.w	fp, #1
 8018806:	f47f af23 	bne.w	8018650 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801880a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80188e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801880e:	f8db 0000 	ldr.w	r0, [fp]
 8018812:	6803      	ldr	r3, [r0, #0]
 8018814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018816:	4798      	blx	r3
 8018818:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801881c:	465a      	mov	r2, fp
 801881e:	d006      	beq.n	801882e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8018820:	f1b8 0f04 	cmp.w	r8, #4
 8018824:	d13e      	bne.n	80188a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8018826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018828:	3300      	adds	r3, #0
 801882a:	bf18      	it	ne
 801882c:	2301      	movne	r3, #1
 801882e:	0580      	lsls	r0, r0, #22
 8018830:	d563      	bpl.n	80188fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8018832:	f1b8 0f08 	cmp.w	r8, #8
 8018836:	d160      	bne.n	80188fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8018838:	2b00      	cmp	r3, #0
 801883a:	bf0c      	ite	eq
 801883c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8018840:	f44f 7180 	movne.w	r1, #256	; 0x100
 8018844:	2f00      	cmp	r7, #0
 8018846:	f47f af03 	bne.w	8018650 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801884a:	2c00      	cmp	r4, #0
 801884c:	f47f af00 	bne.w	8018650 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018850:	9b07      	ldr	r3, [sp, #28]
 8018852:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018854:	18f3      	adds	r3, r6, r3
 8018856:	4283      	cmp	r3, r0
 8018858:	f73f aefa 	bgt.w	8018650 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801885c:	9808      	ldr	r0, [sp, #32]
 801885e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018860:	4403      	add	r3, r0
 8018862:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018864:	4283      	cmp	r3, r0
 8018866:	f73f aef3 	bgt.w	8018650 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801886a:	f1b8 0f08 	cmp.w	r8, #8
 801886e:	6810      	ldr	r0, [r2, #0]
 8018870:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8018874:	bf18      	it	ne
 8018876:	3501      	addne	r5, #1
 8018878:	6804      	ldr	r4, [r0, #0]
 801887a:	9105      	str	r1, [sp, #20]
 801887c:	bf18      	it	ne
 801887e:	f025 0501 	bicne.w	r5, r5, #1
 8018882:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018884:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8018888:	bf18      	it	ne
 801888a:	b2ad      	uxthne	r5, r5
 801888c:	9104      	str	r1, [sp, #16]
 801888e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018890:	e9cd 5a00 	strd	r5, sl, [sp]
 8018894:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8018898:	9924      	ldr	r1, [sp, #144]	; 0x90
 801889a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801889c:	47a0      	blx	r4
 801889e:	b015      	add	sp, #84	; 0x54
 80188a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188a4:	2300      	movs	r3, #0
 80188a6:	e7c2      	b.n	801882e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80188a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80188aa:	e727      	b.n	80186fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 80188ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188ae:	700b      	strb	r3, [r1, #0]
 80188b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188b2:	704b      	strb	r3, [r1, #1]
 80188b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188b6:	708b      	strb	r3, [r1, #2]
 80188b8:	e78d      	b.n	80187d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 80188ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188bc:	b153      	cbz	r3, 80188d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80188be:	441c      	add	r4, r3
 80188c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80188c2:	b2a4      	uxth	r4, r4
 80188c4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80188c8:	f004 0407 	and.w	r4, r4, #7
 80188cc:	781a      	ldrb	r2, [r3, #0]
 80188ce:	9324      	str	r3, [sp, #144]	; 0x90
 80188d0:	4122      	asrs	r2, r4
 80188d2:	b2d2      	uxtb	r2, r2
 80188d4:	9b07      	ldr	r3, [sp, #28]
 80188d6:	445b      	add	r3, fp
 80188d8:	9307      	str	r3, [sp, #28]
 80188da:	e72d      	b.n	8018738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 80188dc:	2000df68 	.word	0x2000df68
 80188e0:	2000df70 	.word	0x2000df70
 80188e4:	2000df6a 	.word	0x2000df6a
 80188e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d1d7      	bne.n	801889e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80188ee:	4b06      	ldr	r3, [pc, #24]	; (8018908 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80188f0:	6818      	ldr	r0, [r3, #0]
 80188f2:	6803      	ldr	r3, [r0, #0]
 80188f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188f6:	4798      	blx	r3
 80188f8:	e7d1      	b.n	801889e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	f43f aea8 	beq.w	8018650 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018904:	e79e      	b.n	8018844 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8018906:	bf00      	nop
 8018908:	2000df70 	.word	0x2000df70

0801890c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801890c:	b538      	push	{r3, r4, r5, lr}
 801890e:	4c15      	ldr	r4, [pc, #84]	; (8018964 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8018910:	4605      	mov	r5, r0
 8018912:	7823      	ldrb	r3, [r4, #0]
 8018914:	f3bf 8f5b 	dmb	ish
 8018918:	07da      	lsls	r2, r3, #31
 801891a:	d40b      	bmi.n	8018934 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801891c:	4620      	mov	r0, r4
 801891e:	f005 fa1c 	bl	801dd5a <__cxa_guard_acquire>
 8018922:	b138      	cbz	r0, 8018934 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8018924:	4620      	mov	r0, r4
 8018926:	f005 fa24 	bl	801dd72 <__cxa_guard_release>
 801892a:	4a0f      	ldr	r2, [pc, #60]	; (8018968 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801892c:	490f      	ldr	r1, [pc, #60]	; (801896c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801892e:	4810      	ldr	r0, [pc, #64]	; (8018970 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018930:	f005 fa0c 	bl	801dd4c <__aeabi_atexit>
 8018934:	4c0f      	ldr	r4, [pc, #60]	; (8018974 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8018936:	7823      	ldrb	r3, [r4, #0]
 8018938:	f3bf 8f5b 	dmb	ish
 801893c:	07db      	lsls	r3, r3, #31
 801893e:	d40b      	bmi.n	8018958 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018940:	4620      	mov	r0, r4
 8018942:	f005 fa0a 	bl	801dd5a <__cxa_guard_acquire>
 8018946:	b138      	cbz	r0, 8018958 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018948:	4620      	mov	r0, r4
 801894a:	f005 fa12 	bl	801dd72 <__cxa_guard_release>
 801894e:	4a06      	ldr	r2, [pc, #24]	; (8018968 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018950:	4909      	ldr	r1, [pc, #36]	; (8018978 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8018952:	480a      	ldr	r0, [pc, #40]	; (801897c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018954:	f005 f9fa 	bl	801dd4c <__aeabi_atexit>
 8018958:	4b05      	ldr	r3, [pc, #20]	; (8018970 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801895a:	612b      	str	r3, [r5, #16]
 801895c:	4b07      	ldr	r3, [pc, #28]	; (801897c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801895e:	616b      	str	r3, [r5, #20]
 8018960:	bd38      	pop	{r3, r4, r5, pc}
 8018962:	bf00      	nop
 8018964:	2000e03c 	.word	0x2000e03c
 8018968:	20000000 	.word	0x20000000
 801896c:	08017257 	.word	0x08017257
 8018970:	20000060 	.word	0x20000060
 8018974:	2000e040 	.word	0x2000e040
 8018978:	08017255 	.word	0x08017255
 801897c:	20000064 	.word	0x20000064

08018980 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8018980:	b538      	push	{r3, r4, r5, lr}
 8018982:	4c15      	ldr	r4, [pc, #84]	; (80189d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8018984:	4605      	mov	r5, r0
 8018986:	7823      	ldrb	r3, [r4, #0]
 8018988:	f3bf 8f5b 	dmb	ish
 801898c:	07da      	lsls	r2, r3, #31
 801898e:	d40b      	bmi.n	80189a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018990:	4620      	mov	r0, r4
 8018992:	f005 f9e2 	bl	801dd5a <__cxa_guard_acquire>
 8018996:	b138      	cbz	r0, 80189a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018998:	4620      	mov	r0, r4
 801899a:	f005 f9ea 	bl	801dd72 <__cxa_guard_release>
 801899e:	4a0f      	ldr	r2, [pc, #60]	; (80189dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80189a0:	490f      	ldr	r1, [pc, #60]	; (80189e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80189a2:	4810      	ldr	r0, [pc, #64]	; (80189e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80189a4:	f005 f9d2 	bl	801dd4c <__aeabi_atexit>
 80189a8:	4c0f      	ldr	r4, [pc, #60]	; (80189e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80189aa:	7823      	ldrb	r3, [r4, #0]
 80189ac:	f3bf 8f5b 	dmb	ish
 80189b0:	07db      	lsls	r3, r3, #31
 80189b2:	d40b      	bmi.n	80189cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80189b4:	4620      	mov	r0, r4
 80189b6:	f005 f9d0 	bl	801dd5a <__cxa_guard_acquire>
 80189ba:	b138      	cbz	r0, 80189cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80189bc:	4620      	mov	r0, r4
 80189be:	f005 f9d8 	bl	801dd72 <__cxa_guard_release>
 80189c2:	4a06      	ldr	r2, [pc, #24]	; (80189dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80189c4:	4909      	ldr	r1, [pc, #36]	; (80189ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80189c6:	480a      	ldr	r0, [pc, #40]	; (80189f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80189c8:	f005 f9c0 	bl	801dd4c <__aeabi_atexit>
 80189cc:	4b05      	ldr	r3, [pc, #20]	; (80189e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80189ce:	60ab      	str	r3, [r5, #8]
 80189d0:	4b07      	ldr	r3, [pc, #28]	; (80189f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80189d2:	60eb      	str	r3, [r5, #12]
 80189d4:	bd38      	pop	{r3, r4, r5, pc}
 80189d6:	bf00      	nop
 80189d8:	2000e01c 	.word	0x2000e01c
 80189dc:	20000000 	.word	0x20000000
 80189e0:	0801725b 	.word	0x0801725b
 80189e4:	20000040 	.word	0x20000040
 80189e8:	2000e020 	.word	0x2000e020
 80189ec:	08017259 	.word	0x08017259
 80189f0:	20000044 	.word	0x20000044

080189f4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80189f4:	b510      	push	{r4, lr}
 80189f6:	4604      	mov	r4, r0
 80189f8:	f7ff ff88 	bl	801890c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80189fc:	4620      	mov	r0, r4
 80189fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a02:	f7ff bfbd 	b.w	8018980 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08018a08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8018a08:	b538      	push	{r3, r4, r5, lr}
 8018a0a:	4c15      	ldr	r4, [pc, #84]	; (8018a60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8018a0c:	4605      	mov	r5, r0
 8018a0e:	7823      	ldrb	r3, [r4, #0]
 8018a10:	f3bf 8f5b 	dmb	ish
 8018a14:	07da      	lsls	r2, r3, #31
 8018a16:	d40b      	bmi.n	8018a30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8018a18:	4620      	mov	r0, r4
 8018a1a:	f005 f99e 	bl	801dd5a <__cxa_guard_acquire>
 8018a1e:	b138      	cbz	r0, 8018a30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8018a20:	4620      	mov	r0, r4
 8018a22:	f005 f9a6 	bl	801dd72 <__cxa_guard_release>
 8018a26:	4a0f      	ldr	r2, [pc, #60]	; (8018a64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018a28:	490f      	ldr	r1, [pc, #60]	; (8018a68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8018a2a:	4810      	ldr	r0, [pc, #64]	; (8018a6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018a2c:	f005 f98e 	bl	801dd4c <__aeabi_atexit>
 8018a30:	4c0f      	ldr	r4, [pc, #60]	; (8018a70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8018a32:	7823      	ldrb	r3, [r4, #0]
 8018a34:	f3bf 8f5b 	dmb	ish
 8018a38:	07db      	lsls	r3, r3, #31
 8018a3a:	d40b      	bmi.n	8018a54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018a3c:	4620      	mov	r0, r4
 8018a3e:	f005 f98c 	bl	801dd5a <__cxa_guard_acquire>
 8018a42:	b138      	cbz	r0, 8018a54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018a44:	4620      	mov	r0, r4
 8018a46:	f005 f994 	bl	801dd72 <__cxa_guard_release>
 8018a4a:	4a06      	ldr	r2, [pc, #24]	; (8018a64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018a4c:	4909      	ldr	r1, [pc, #36]	; (8018a74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8018a4e:	480a      	ldr	r0, [pc, #40]	; (8018a78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018a50:	f005 f97c 	bl	801dd4c <__aeabi_atexit>
 8018a54:	4b05      	ldr	r3, [pc, #20]	; (8018a6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018a56:	622b      	str	r3, [r5, #32]
 8018a58:	4b07      	ldr	r3, [pc, #28]	; (8018a78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018a5a:	626b      	str	r3, [r5, #36]	; 0x24
 8018a5c:	bd38      	pop	{r3, r4, r5, pc}
 8018a5e:	bf00      	nop
 8018a60:	2000e044 	.word	0x2000e044
 8018a64:	20000000 	.word	0x20000000
 8018a68:	0801724f 	.word	0x0801724f
 8018a6c:	20000068 	.word	0x20000068
 8018a70:	2000e048 	.word	0x2000e048
 8018a74:	0801724d 	.word	0x0801724d
 8018a78:	2000006c 	.word	0x2000006c

08018a7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8018a7c:	b538      	push	{r3, r4, r5, lr}
 8018a7e:	4c15      	ldr	r4, [pc, #84]	; (8018ad4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8018a80:	4605      	mov	r5, r0
 8018a82:	7823      	ldrb	r3, [r4, #0]
 8018a84:	f3bf 8f5b 	dmb	ish
 8018a88:	07da      	lsls	r2, r3, #31
 8018a8a:	d40b      	bmi.n	8018aa4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018a8c:	4620      	mov	r0, r4
 8018a8e:	f005 f964 	bl	801dd5a <__cxa_guard_acquire>
 8018a92:	b138      	cbz	r0, 8018aa4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018a94:	4620      	mov	r0, r4
 8018a96:	f005 f96c 	bl	801dd72 <__cxa_guard_release>
 8018a9a:	4a0f      	ldr	r2, [pc, #60]	; (8018ad8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018a9c:	490f      	ldr	r1, [pc, #60]	; (8018adc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8018a9e:	4810      	ldr	r0, [pc, #64]	; (8018ae0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018aa0:	f005 f954 	bl	801dd4c <__aeabi_atexit>
 8018aa4:	4c0f      	ldr	r4, [pc, #60]	; (8018ae4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8018aa6:	7823      	ldrb	r3, [r4, #0]
 8018aa8:	f3bf 8f5b 	dmb	ish
 8018aac:	07db      	lsls	r3, r3, #31
 8018aae:	d40b      	bmi.n	8018ac8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	f005 f952 	bl	801dd5a <__cxa_guard_acquire>
 8018ab6:	b138      	cbz	r0, 8018ac8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018ab8:	4620      	mov	r0, r4
 8018aba:	f005 f95a 	bl	801dd72 <__cxa_guard_release>
 8018abe:	4a06      	ldr	r2, [pc, #24]	; (8018ad8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018ac0:	4909      	ldr	r1, [pc, #36]	; (8018ae8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8018ac2:	480a      	ldr	r0, [pc, #40]	; (8018aec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018ac4:	f005 f942 	bl	801dd4c <__aeabi_atexit>
 8018ac8:	4b05      	ldr	r3, [pc, #20]	; (8018ae0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018aca:	61ab      	str	r3, [r5, #24]
 8018acc:	4b07      	ldr	r3, [pc, #28]	; (8018aec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018ace:	61eb      	str	r3, [r5, #28]
 8018ad0:	bd38      	pop	{r3, r4, r5, pc}
 8018ad2:	bf00      	nop
 8018ad4:	2000e024 	.word	0x2000e024
 8018ad8:	20000000 	.word	0x20000000
 8018adc:	08017253 	.word	0x08017253
 8018ae0:	20000048 	.word	0x20000048
 8018ae4:	2000e028 	.word	0x2000e028
 8018ae8:	08017251 	.word	0x08017251
 8018aec:	2000004c 	.word	0x2000004c

08018af0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8018af0:	b510      	push	{r4, lr}
 8018af2:	4604      	mov	r4, r0
 8018af4:	f7ff ff88 	bl	8018a08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8018af8:	4620      	mov	r0, r4
 8018afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018afe:	f7ff bfbd 	b.w	8018a7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08018b04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8018b04:	b538      	push	{r3, r4, r5, lr}
 8018b06:	4c15      	ldr	r4, [pc, #84]	; (8018b5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8018b08:	4605      	mov	r5, r0
 8018b0a:	7823      	ldrb	r3, [r4, #0]
 8018b0c:	f3bf 8f5b 	dmb	ish
 8018b10:	07da      	lsls	r2, r3, #31
 8018b12:	d40b      	bmi.n	8018b2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018b14:	4620      	mov	r0, r4
 8018b16:	f005 f920 	bl	801dd5a <__cxa_guard_acquire>
 8018b1a:	b138      	cbz	r0, 8018b2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	f005 f928 	bl	801dd72 <__cxa_guard_release>
 8018b22:	4a0f      	ldr	r2, [pc, #60]	; (8018b60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018b24:	490f      	ldr	r1, [pc, #60]	; (8018b64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8018b26:	4810      	ldr	r0, [pc, #64]	; (8018b68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018b28:	f005 f910 	bl	801dd4c <__aeabi_atexit>
 8018b2c:	4c0f      	ldr	r4, [pc, #60]	; (8018b6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8018b2e:	7823      	ldrb	r3, [r4, #0]
 8018b30:	f3bf 8f5b 	dmb	ish
 8018b34:	07db      	lsls	r3, r3, #31
 8018b36:	d40b      	bmi.n	8018b50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018b38:	4620      	mov	r0, r4
 8018b3a:	f005 f90e 	bl	801dd5a <__cxa_guard_acquire>
 8018b3e:	b138      	cbz	r0, 8018b50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018b40:	4620      	mov	r0, r4
 8018b42:	f005 f916 	bl	801dd72 <__cxa_guard_release>
 8018b46:	4a06      	ldr	r2, [pc, #24]	; (8018b60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018b48:	4909      	ldr	r1, [pc, #36]	; (8018b70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8018b4a:	480a      	ldr	r0, [pc, #40]	; (8018b74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018b4c:	f005 f8fe 	bl	801dd4c <__aeabi_atexit>
 8018b50:	4b05      	ldr	r3, [pc, #20]	; (8018b68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018b52:	632b      	str	r3, [r5, #48]	; 0x30
 8018b54:	4b07      	ldr	r3, [pc, #28]	; (8018b74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018b56:	636b      	str	r3, [r5, #52]	; 0x34
 8018b58:	bd38      	pop	{r3, r4, r5, pc}
 8018b5a:	bf00      	nop
 8018b5c:	2000e02c 	.word	0x2000e02c
 8018b60:	20000000 	.word	0x20000000
 8018b64:	08017247 	.word	0x08017247
 8018b68:	20000050 	.word	0x20000050
 8018b6c:	2000e030 	.word	0x2000e030
 8018b70:	08017245 	.word	0x08017245
 8018b74:	20000054 	.word	0x20000054

08018b78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8018b78:	b538      	push	{r3, r4, r5, lr}
 8018b7a:	4c15      	ldr	r4, [pc, #84]	; (8018bd0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8018b7c:	4605      	mov	r5, r0
 8018b7e:	7823      	ldrb	r3, [r4, #0]
 8018b80:	f3bf 8f5b 	dmb	ish
 8018b84:	07da      	lsls	r2, r3, #31
 8018b86:	d40b      	bmi.n	8018ba0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018b88:	4620      	mov	r0, r4
 8018b8a:	f005 f8e6 	bl	801dd5a <__cxa_guard_acquire>
 8018b8e:	b138      	cbz	r0, 8018ba0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018b90:	4620      	mov	r0, r4
 8018b92:	f005 f8ee 	bl	801dd72 <__cxa_guard_release>
 8018b96:	4a0f      	ldr	r2, [pc, #60]	; (8018bd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018b98:	490f      	ldr	r1, [pc, #60]	; (8018bd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8018b9a:	4810      	ldr	r0, [pc, #64]	; (8018bdc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018b9c:	f005 f8d6 	bl	801dd4c <__aeabi_atexit>
 8018ba0:	4c0f      	ldr	r4, [pc, #60]	; (8018be0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8018ba2:	7823      	ldrb	r3, [r4, #0]
 8018ba4:	f3bf 8f5b 	dmb	ish
 8018ba8:	07db      	lsls	r3, r3, #31
 8018baa:	d40b      	bmi.n	8018bc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018bac:	4620      	mov	r0, r4
 8018bae:	f005 f8d4 	bl	801dd5a <__cxa_guard_acquire>
 8018bb2:	b138      	cbz	r0, 8018bc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018bb4:	4620      	mov	r0, r4
 8018bb6:	f005 f8dc 	bl	801dd72 <__cxa_guard_release>
 8018bba:	4a06      	ldr	r2, [pc, #24]	; (8018bd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018bbc:	4909      	ldr	r1, [pc, #36]	; (8018be4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8018bbe:	480a      	ldr	r0, [pc, #40]	; (8018be8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018bc0:	f005 f8c4 	bl	801dd4c <__aeabi_atexit>
 8018bc4:	4b05      	ldr	r3, [pc, #20]	; (8018bdc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018bc6:	62ab      	str	r3, [r5, #40]	; 0x28
 8018bc8:	4b07      	ldr	r3, [pc, #28]	; (8018be8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018bca:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018bcc:	bd38      	pop	{r3, r4, r5, pc}
 8018bce:	bf00      	nop
 8018bd0:	2000e004 	.word	0x2000e004
 8018bd4:	20000000 	.word	0x20000000
 8018bd8:	0801724b 	.word	0x0801724b
 8018bdc:	20000028 	.word	0x20000028
 8018be0:	2000e008 	.word	0x2000e008
 8018be4:	08017249 	.word	0x08017249
 8018be8:	2000002c 	.word	0x2000002c

08018bec <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8018bec:	b510      	push	{r4, lr}
 8018bee:	4604      	mov	r4, r0
 8018bf0:	f7ff ff88 	bl	8018b04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bfa:	f7ff bfbd 	b.w	8018b78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08018c00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8018c00:	b538      	push	{r3, r4, r5, lr}
 8018c02:	4c15      	ldr	r4, [pc, #84]	; (8018c58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8018c04:	4605      	mov	r5, r0
 8018c06:	7823      	ldrb	r3, [r4, #0]
 8018c08:	f3bf 8f5b 	dmb	ish
 8018c0c:	07da      	lsls	r2, r3, #31
 8018c0e:	d40b      	bmi.n	8018c28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018c10:	4620      	mov	r0, r4
 8018c12:	f005 f8a2 	bl	801dd5a <__cxa_guard_acquire>
 8018c16:	b138      	cbz	r0, 8018c28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018c18:	4620      	mov	r0, r4
 8018c1a:	f005 f8aa 	bl	801dd72 <__cxa_guard_release>
 8018c1e:	4a0f      	ldr	r2, [pc, #60]	; (8018c5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018c20:	490f      	ldr	r1, [pc, #60]	; (8018c60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8018c22:	4810      	ldr	r0, [pc, #64]	; (8018c64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018c24:	f005 f892 	bl	801dd4c <__aeabi_atexit>
 8018c28:	4c0f      	ldr	r4, [pc, #60]	; (8018c68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018c2a:	7823      	ldrb	r3, [r4, #0]
 8018c2c:	f3bf 8f5b 	dmb	ish
 8018c30:	07db      	lsls	r3, r3, #31
 8018c32:	d40b      	bmi.n	8018c4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018c34:	4620      	mov	r0, r4
 8018c36:	f005 f890 	bl	801dd5a <__cxa_guard_acquire>
 8018c3a:	b138      	cbz	r0, 8018c4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	f005 f898 	bl	801dd72 <__cxa_guard_release>
 8018c42:	4a06      	ldr	r2, [pc, #24]	; (8018c5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018c44:	4909      	ldr	r1, [pc, #36]	; (8018c6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8018c46:	480a      	ldr	r0, [pc, #40]	; (8018c70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018c48:	f005 f880 	bl	801dd4c <__aeabi_atexit>
 8018c4c:	4b05      	ldr	r3, [pc, #20]	; (8018c64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018c4e:	642b      	str	r3, [r5, #64]	; 0x40
 8018c50:	4b07      	ldr	r3, [pc, #28]	; (8018c70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018c52:	646b      	str	r3, [r5, #68]	; 0x44
 8018c54:	bd38      	pop	{r3, r4, r5, pc}
 8018c56:	bf00      	nop
 8018c58:	2000e034 	.word	0x2000e034
 8018c5c:	20000000 	.word	0x20000000
 8018c60:	0801723f 	.word	0x0801723f
 8018c64:	20000058 	.word	0x20000058
 8018c68:	2000e038 	.word	0x2000e038
 8018c6c:	0801723d 	.word	0x0801723d
 8018c70:	2000005c 	.word	0x2000005c

08018c74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8018c74:	b538      	push	{r3, r4, r5, lr}
 8018c76:	4c15      	ldr	r4, [pc, #84]	; (8018ccc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018c78:	4605      	mov	r5, r0
 8018c7a:	7823      	ldrb	r3, [r4, #0]
 8018c7c:	f3bf 8f5b 	dmb	ish
 8018c80:	07da      	lsls	r2, r3, #31
 8018c82:	d40b      	bmi.n	8018c9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018c84:	4620      	mov	r0, r4
 8018c86:	f005 f868 	bl	801dd5a <__cxa_guard_acquire>
 8018c8a:	b138      	cbz	r0, 8018c9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f005 f870 	bl	801dd72 <__cxa_guard_release>
 8018c92:	4a0f      	ldr	r2, [pc, #60]	; (8018cd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018c94:	490f      	ldr	r1, [pc, #60]	; (8018cd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8018c96:	4810      	ldr	r0, [pc, #64]	; (8018cd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018c98:	f005 f858 	bl	801dd4c <__aeabi_atexit>
 8018c9c:	4c0f      	ldr	r4, [pc, #60]	; (8018cdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8018c9e:	7823      	ldrb	r3, [r4, #0]
 8018ca0:	f3bf 8f5b 	dmb	ish
 8018ca4:	07db      	lsls	r3, r3, #31
 8018ca6:	d40b      	bmi.n	8018cc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018ca8:	4620      	mov	r0, r4
 8018caa:	f005 f856 	bl	801dd5a <__cxa_guard_acquire>
 8018cae:	b138      	cbz	r0, 8018cc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018cb0:	4620      	mov	r0, r4
 8018cb2:	f005 f85e 	bl	801dd72 <__cxa_guard_release>
 8018cb6:	4a06      	ldr	r2, [pc, #24]	; (8018cd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018cb8:	4909      	ldr	r1, [pc, #36]	; (8018ce0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018cba:	480a      	ldr	r0, [pc, #40]	; (8018ce4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018cbc:	f005 f846 	bl	801dd4c <__aeabi_atexit>
 8018cc0:	4b05      	ldr	r3, [pc, #20]	; (8018cd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018cc2:	63ab      	str	r3, [r5, #56]	; 0x38
 8018cc4:	4b07      	ldr	r3, [pc, #28]	; (8018ce4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018cc6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018cc8:	bd38      	pop	{r3, r4, r5, pc}
 8018cca:	bf00      	nop
 8018ccc:	2000e014 	.word	0x2000e014
 8018cd0:	20000000 	.word	0x20000000
 8018cd4:	08017243 	.word	0x08017243
 8018cd8:	20000038 	.word	0x20000038
 8018cdc:	2000e018 	.word	0x2000e018
 8018ce0:	08017241 	.word	0x08017241
 8018ce4:	2000003c 	.word	0x2000003c

08018ce8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	4604      	mov	r4, r0
 8018cec:	f7ff ff88 	bl	8018c00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8018cf0:	4620      	mov	r0, r4
 8018cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cf6:	f7ff bfbd 	b.w	8018c74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08018cfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8018cfc:	b538      	push	{r3, r4, r5, lr}
 8018cfe:	4c15      	ldr	r4, [pc, #84]	; (8018d54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8018d00:	4605      	mov	r5, r0
 8018d02:	7823      	ldrb	r3, [r4, #0]
 8018d04:	f3bf 8f5b 	dmb	ish
 8018d08:	07da      	lsls	r2, r3, #31
 8018d0a:	d40b      	bmi.n	8018d24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018d0c:	4620      	mov	r0, r4
 8018d0e:	f005 f824 	bl	801dd5a <__cxa_guard_acquire>
 8018d12:	b138      	cbz	r0, 8018d24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018d14:	4620      	mov	r0, r4
 8018d16:	f005 f82c 	bl	801dd72 <__cxa_guard_release>
 8018d1a:	4a0f      	ldr	r2, [pc, #60]	; (8018d58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018d1c:	490f      	ldr	r1, [pc, #60]	; (8018d5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8018d1e:	4810      	ldr	r0, [pc, #64]	; (8018d60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018d20:	f005 f814 	bl	801dd4c <__aeabi_atexit>
 8018d24:	4c0f      	ldr	r4, [pc, #60]	; (8018d64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8018d26:	7823      	ldrb	r3, [r4, #0]
 8018d28:	f3bf 8f5b 	dmb	ish
 8018d2c:	07db      	lsls	r3, r3, #31
 8018d2e:	d40b      	bmi.n	8018d48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018d30:	4620      	mov	r0, r4
 8018d32:	f005 f812 	bl	801dd5a <__cxa_guard_acquire>
 8018d36:	b138      	cbz	r0, 8018d48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018d38:	4620      	mov	r0, r4
 8018d3a:	f005 f81a 	bl	801dd72 <__cxa_guard_release>
 8018d3e:	4a06      	ldr	r2, [pc, #24]	; (8018d58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018d40:	4909      	ldr	r1, [pc, #36]	; (8018d68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8018d42:	480a      	ldr	r0, [pc, #40]	; (8018d6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018d44:	f005 f802 	bl	801dd4c <__aeabi_atexit>
 8018d48:	4b05      	ldr	r3, [pc, #20]	; (8018d60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018d4a:	652b      	str	r3, [r5, #80]	; 0x50
 8018d4c:	4b07      	ldr	r3, [pc, #28]	; (8018d6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018d4e:	656b      	str	r3, [r5, #84]	; 0x54
 8018d50:	bd38      	pop	{r3, r4, r5, pc}
 8018d52:	bf00      	nop
 8018d54:	2000e00c 	.word	0x2000e00c
 8018d58:	20000000 	.word	0x20000000
 8018d5c:	08017237 	.word	0x08017237
 8018d60:	20000030 	.word	0x20000030
 8018d64:	2000e010 	.word	0x2000e010
 8018d68:	08017235 	.word	0x08017235
 8018d6c:	20000034 	.word	0x20000034

08018d70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8018d70:	b538      	push	{r3, r4, r5, lr}
 8018d72:	4c15      	ldr	r4, [pc, #84]	; (8018dc8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8018d74:	4605      	mov	r5, r0
 8018d76:	7823      	ldrb	r3, [r4, #0]
 8018d78:	f3bf 8f5b 	dmb	ish
 8018d7c:	07da      	lsls	r2, r3, #31
 8018d7e:	d40b      	bmi.n	8018d98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018d80:	4620      	mov	r0, r4
 8018d82:	f004 ffea 	bl	801dd5a <__cxa_guard_acquire>
 8018d86:	b138      	cbz	r0, 8018d98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018d88:	4620      	mov	r0, r4
 8018d8a:	f004 fff2 	bl	801dd72 <__cxa_guard_release>
 8018d8e:	4a0f      	ldr	r2, [pc, #60]	; (8018dcc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018d90:	490f      	ldr	r1, [pc, #60]	; (8018dd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8018d92:	4810      	ldr	r0, [pc, #64]	; (8018dd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018d94:	f004 ffda 	bl	801dd4c <__aeabi_atexit>
 8018d98:	4c0f      	ldr	r4, [pc, #60]	; (8018dd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018d9a:	7823      	ldrb	r3, [r4, #0]
 8018d9c:	f3bf 8f5b 	dmb	ish
 8018da0:	07db      	lsls	r3, r3, #31
 8018da2:	d40b      	bmi.n	8018dbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018da4:	4620      	mov	r0, r4
 8018da6:	f004 ffd8 	bl	801dd5a <__cxa_guard_acquire>
 8018daa:	b138      	cbz	r0, 8018dbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018dac:	4620      	mov	r0, r4
 8018dae:	f004 ffe0 	bl	801dd72 <__cxa_guard_release>
 8018db2:	4a06      	ldr	r2, [pc, #24]	; (8018dcc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018db4:	4909      	ldr	r1, [pc, #36]	; (8018ddc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018db6:	480a      	ldr	r0, [pc, #40]	; (8018de0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018db8:	f004 ffc8 	bl	801dd4c <__aeabi_atexit>
 8018dbc:	4b05      	ldr	r3, [pc, #20]	; (8018dd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018dbe:	64ab      	str	r3, [r5, #72]	; 0x48
 8018dc0:	4b07      	ldr	r3, [pc, #28]	; (8018de0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018dc2:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018dc4:	bd38      	pop	{r3, r4, r5, pc}
 8018dc6:	bf00      	nop
 8018dc8:	2000dffc 	.word	0x2000dffc
 8018dcc:	20000000 	.word	0x20000000
 8018dd0:	0801723b 	.word	0x0801723b
 8018dd4:	20000020 	.word	0x20000020
 8018dd8:	2000e000 	.word	0x2000e000
 8018ddc:	08017239 	.word	0x08017239
 8018de0:	20000024 	.word	0x20000024

08018de4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8018de4:	b510      	push	{r4, lr}
 8018de6:	4604      	mov	r4, r0
 8018de8:	f7ff ff88 	bl	8018cfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8018dec:	4620      	mov	r0, r4
 8018dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018df2:	f7ff bfbd 	b.w	8018d70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08018df6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8018df6:	b510      	push	{r4, lr}
 8018df8:	4604      	mov	r4, r0
 8018dfa:	f7ff fff3 	bl	8018de4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8018dfe:	4620      	mov	r0, r4
 8018e00:	f7ff ff72 	bl	8018ce8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8018e04:	4620      	mov	r0, r4
 8018e06:	f7ff fe73 	bl	8018af0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8018e0a:	4620      	mov	r0, r4
 8018e0c:	f7ff fdf2 	bl	80189f4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8018e10:	4620      	mov	r0, r4
 8018e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e16:	f7ff bee9 	b.w	8018bec <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08018e1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8018e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e20:	b087      	sub	sp, #28
 8018e22:	7888      	ldrb	r0, [r1, #2]
 8018e24:	4616      	mov	r6, r2
 8018e26:	9001      	str	r0, [sp, #4]
 8018e28:	7848      	ldrb	r0, [r1, #1]
 8018e2a:	9100      	str	r1, [sp, #0]
 8018e2c:	9002      	str	r0, [sp, #8]
 8018e2e:	7808      	ldrb	r0, [r1, #0]
 8018e30:	9901      	ldr	r1, [sp, #4]
 8018e32:	9003      	str	r0, [sp, #12]
 8018e34:	9802      	ldr	r0, [sp, #8]
 8018e36:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8018e3a:	0200      	lsls	r0, r0, #8
 8018e3c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8018e40:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8018e44:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8018e48:	9903      	ldr	r1, [sp, #12]
 8018e4a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8018e4e:	4308      	orrs	r0, r1
 8018e50:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018e54:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8018e58:	9005      	str	r0, [sp, #20]
 8018e5a:	fb05 ca0e 	mla	sl, r5, lr, ip
 8018e5e:	2d00      	cmp	r5, #0
 8018e60:	eb06 080a 	add.w	r8, r6, sl
 8018e64:	db4a      	blt.n	8018efc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8018e66:	45a9      	cmp	r9, r5
 8018e68:	dd48      	ble.n	8018efc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8018e6a:	f1bc 0f00 	cmp.w	ip, #0
 8018e6e:	db43      	blt.n	8018ef8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8018e70:	45e6      	cmp	lr, ip
 8018e72:	dd41      	ble.n	8018ef8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8018e74:	f816 600a 	ldrb.w	r6, [r6, sl]
 8018e78:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018e7c:	441e      	add	r6, r3
 8018e7e:	f11c 0001 	adds.w	r0, ip, #1
 8018e82:	d43e      	bmi.n	8018f02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8018e84:	4586      	cmp	lr, r0
 8018e86:	dd3c      	ble.n	8018f02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8018e88:	2a00      	cmp	r2, #0
 8018e8a:	d03a      	beq.n	8018f02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8018e8c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018e90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018e94:	4418      	add	r0, r3
 8018e96:	3501      	adds	r5, #1
 8018e98:	d437      	bmi.n	8018f0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8018e9a:	45a9      	cmp	r9, r5
 8018e9c:	dd35      	ble.n	8018f0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8018e9e:	b3a4      	cbz	r4, 8018f0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8018ea0:	f1bc 0f00 	cmp.w	ip, #0
 8018ea4:	db2f      	blt.n	8018f06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8018ea6:	45e6      	cmp	lr, ip
 8018ea8:	dd2d      	ble.n	8018f06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8018eaa:	f818 500e 	ldrb.w	r5, [r8, lr]
 8018eae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018eb2:	441d      	add	r5, r3
 8018eb4:	f11c 0c01 	adds.w	ip, ip, #1
 8018eb8:	d42a      	bmi.n	8018f10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8018eba:	45e6      	cmp	lr, ip
 8018ebc:	dd28      	ble.n	8018f10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8018ebe:	b33a      	cbz	r2, 8018f10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8018ec0:	44c6      	add	lr, r8
 8018ec2:	f89e c001 	ldrb.w	ip, [lr, #1]
 8018ec6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018eca:	4463      	add	r3, ip
 8018ecc:	ea6f 0c07 	mvn.w	ip, r7
 8018ed0:	2a0f      	cmp	r2, #15
 8018ed2:	f896 a000 	ldrb.w	sl, [r6]
 8018ed6:	fa5f fc8c 	uxtb.w	ip, ip
 8018eda:	f890 b000 	ldrb.w	fp, [r0]
 8018ede:	f895 9000 	ldrb.w	r9, [r5]
 8018ee2:	7819      	ldrb	r1, [r3, #0]
 8018ee4:	d801      	bhi.n	8018eea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8018ee6:	2c0f      	cmp	r4, #15
 8018ee8:	d914      	bls.n	8018f14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8018eea:	4b40      	ldr	r3, [pc, #256]	; (8018fec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8018eec:	f240 1157 	movw	r1, #343	; 0x157
 8018ef0:	4a3f      	ldr	r2, [pc, #252]	; (8018ff0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8018ef2:	4840      	ldr	r0, [pc, #256]	; (8018ff4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8018ef4:	f004 ff5e 	bl	801ddb4 <__assert_func>
 8018ef8:	ae05      	add	r6, sp, #20
 8018efa:	e7c0      	b.n	8018e7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8018efc:	a805      	add	r0, sp, #20
 8018efe:	4606      	mov	r6, r0
 8018f00:	e7c9      	b.n	8018e96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8018f02:	a805      	add	r0, sp, #20
 8018f04:	e7c7      	b.n	8018e96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8018f06:	ad05      	add	r5, sp, #20
 8018f08:	e7d4      	b.n	8018eb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8018f0a:	ab05      	add	r3, sp, #20
 8018f0c:	461d      	mov	r5, r3
 8018f0e:	e7dd      	b.n	8018ecc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8018f10:	ab05      	add	r3, sp, #20
 8018f12:	e7db      	b.n	8018ecc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8018f14:	b292      	uxth	r2, r2
 8018f16:	b2a4      	uxth	r4, r4
 8018f18:	fa1f fc8c 	uxth.w	ip, ip
 8018f1c:	fb02 f804 	mul.w	r8, r2, r4
 8018f20:	0112      	lsls	r2, r2, #4
 8018f22:	b2bf      	uxth	r7, r7
 8018f24:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8018f28:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8018f2c:	eba2 0208 	sub.w	r2, r2, r8
 8018f30:	b2a4      	uxth	r4, r4
 8018f32:	b292      	uxth	r2, r2
 8018f34:	ebae 0e04 	sub.w	lr, lr, r4
 8018f38:	fb02 fb0b 	mul.w	fp, r2, fp
 8018f3c:	fa1f fe8e 	uxth.w	lr, lr
 8018f40:	fb0e ba0a 	mla	sl, lr, sl, fp
 8018f44:	fb04 aa09 	mla	sl, r4, r9, sl
 8018f48:	fb08 aa01 	mla	sl, r8, r1, sl
 8018f4c:	9903      	ldr	r1, [sp, #12]
 8018f4e:	fb11 f90c 	smulbb	r9, r1, ip
 8018f52:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8018f56:	9900      	ldr	r1, [sp, #0]
 8018f58:	fb0a 9a07 	mla	sl, sl, r7, r9
 8018f5c:	fa1f fa8a 	uxth.w	sl, sl
 8018f60:	f10a 0901 	add.w	r9, sl, #1
 8018f64:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8018f68:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018f6c:	f881 a000 	strb.w	sl, [r1]
 8018f70:	f890 a001 	ldrb.w	sl, [r0, #1]
 8018f74:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018f78:	fb02 fa0a 	mul.w	sl, r2, sl
 8018f7c:	9902      	ldr	r1, [sp, #8]
 8018f7e:	fb0e aa09 	mla	sl, lr, r9, sl
 8018f82:	f895 9001 	ldrb.w	r9, [r5, #1]
 8018f86:	fb04 aa09 	mla	sl, r4, r9, sl
 8018f8a:	f893 9001 	ldrb.w	r9, [r3, #1]
 8018f8e:	fb08 a909 	mla	r9, r8, r9, sl
 8018f92:	fb11 fa0c 	smulbb	sl, r1, ip
 8018f96:	9900      	ldr	r1, [sp, #0]
 8018f98:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8018f9c:	fb09 a907 	mla	r9, r9, r7, sl
 8018fa0:	fa1f f989 	uxth.w	r9, r9
 8018fa4:	f109 0a01 	add.w	sl, r9, #1
 8018fa8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018fac:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018fb0:	f881 9001 	strb.w	r9, [r1, #1]
 8018fb4:	7880      	ldrb	r0, [r0, #2]
 8018fb6:	78b6      	ldrb	r6, [r6, #2]
 8018fb8:	4342      	muls	r2, r0
 8018fba:	78a8      	ldrb	r0, [r5, #2]
 8018fbc:	789b      	ldrb	r3, [r3, #2]
 8018fbe:	fb0e 2206 	mla	r2, lr, r6, r2
 8018fc2:	fb04 2400 	mla	r4, r4, r0, r2
 8018fc6:	fb08 4803 	mla	r8, r8, r3, r4
 8018fca:	9b01      	ldr	r3, [sp, #4]
 8018fcc:	fb13 fc0c 	smulbb	ip, r3, ip
 8018fd0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018fd4:	fb08 c707 	mla	r7, r8, r7, ip
 8018fd8:	b2bf      	uxth	r7, r7
 8018fda:	f107 0c01 	add.w	ip, r7, #1
 8018fde:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8018fe2:	123f      	asrs	r7, r7, #8
 8018fe4:	708f      	strb	r7, [r1, #2]
 8018fe6:	b007      	add	sp, #28
 8018fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fec:	08021f95 	.word	0x08021f95
 8018ff0:	080224ff 	.word	0x080224ff
 8018ff4:	0802205e 	.word	0x0802205e

08018ff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ffc:	ed2d 8b08 	vpush	{d8-d11}
 8019000:	b093      	sub	sp, #76	; 0x4c
 8019002:	eeb0 aa40 	vmov.f32	s20, s0
 8019006:	eef0 9a60 	vmov.f32	s19, s1
 801900a:	9210      	str	r2, [sp, #64]	; 0x40
 801900c:	eeb0 9a41 	vmov.f32	s18, s2
 8019010:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019012:	eeb0 8a62 	vmov.f32	s16, s5
 8019016:	9309      	str	r3, [sp, #36]	; 0x24
 8019018:	eef0 8a43 	vmov.f32	s17, s6
 801901c:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8019020:	eef0 ba44 	vmov.f32	s23, s8
 8019024:	9011      	str	r0, [sp, #68]	; 0x44
 8019026:	eeb0 ba64 	vmov.f32	s22, s9
 801902a:	930e      	str	r3, [sp, #56]	; 0x38
 801902c:	eef0 aa45 	vmov.f32	s21, s10
 8019030:	6850      	ldr	r0, [r2, #4]
 8019032:	910d      	str	r1, [sp, #52]	; 0x34
 8019034:	6812      	ldr	r2, [r2, #0]
 8019036:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801903a:	fb00 1303 	mla	r3, r0, r3, r1
 801903e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019042:	18d3      	adds	r3, r2, r3
 8019044:	930a      	str	r3, [sp, #40]	; 0x28
 8019046:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	930c      	str	r3, [sp, #48]	; 0x30
 801904c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801904e:	685c      	ldr	r4, [r3, #4]
 8019050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019052:	3404      	adds	r4, #4
 8019054:	43db      	mvns	r3, r3
 8019056:	b2db      	uxtb	r3, r3
 8019058:	930b      	str	r3, [sp, #44]	; 0x2c
 801905a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801905c:	2b00      	cmp	r3, #0
 801905e:	dc03      	bgt.n	8019068 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019060:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019062:	2b00      	cmp	r3, #0
 8019064:	f340 8250 	ble.w	8019508 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8019068:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801906a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801906e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019072:	1e48      	subs	r0, r1, #1
 8019074:	1e55      	subs	r5, r2, #1
 8019076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019078:	2b00      	cmp	r3, #0
 801907a:	f340 80ee 	ble.w	801925a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801907e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8019080:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019082:	1436      	asrs	r6, r6, #16
 8019084:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019088:	d406      	bmi.n	8019098 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801908a:	4286      	cmp	r6, r0
 801908c:	da04      	bge.n	8019098 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801908e:	2b00      	cmp	r3, #0
 8019090:	db02      	blt.n	8019098 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019092:	42ab      	cmp	r3, r5
 8019094:	f2c0 80e2 	blt.w	801925c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8019098:	3601      	adds	r6, #1
 801909a:	f100 80cf 	bmi.w	801923c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801909e:	42b1      	cmp	r1, r6
 80190a0:	f2c0 80cc 	blt.w	801923c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80190a4:	3301      	adds	r3, #1
 80190a6:	f100 80c9 	bmi.w	801923c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80190aa:	429a      	cmp	r2, r3
 80190ac:	f2c0 80c6 	blt.w	801923c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80190b0:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80190b4:	f1bb 0f00 	cmp.w	fp, #0
 80190b8:	f340 80f1 	ble.w	801929e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80190bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80190be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80190c0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80190c2:	141d      	asrs	r5, r3, #16
 80190c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80190c6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80190ca:	68c7      	ldr	r7, [r0, #12]
 80190cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80190ce:	1418      	asrs	r0, r3, #16
 80190d0:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80190d4:	6892      	ldr	r2, [r2, #8]
 80190d6:	f100 8137 	bmi.w	8019348 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80190da:	f102 3cff 	add.w	ip, r2, #4294967295
 80190de:	4560      	cmp	r0, ip
 80190e0:	f280 8132 	bge.w	8019348 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80190e4:	2d00      	cmp	r5, #0
 80190e6:	f2c0 812f 	blt.w	8019348 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80190ea:	f107 3cff 	add.w	ip, r7, #4294967295
 80190ee:	4565      	cmp	r5, ip
 80190f0:	f280 812a 	bge.w	8019348 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80190f4:	b212      	sxth	r2, r2
 80190f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80190f8:	fb05 0002 	mla	r0, r5, r2, r0
 80190fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80190fe:	f817 c000 	ldrb.w	ip, [r7, r0]
 8019102:	4405      	add	r5, r0
 8019104:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019108:	eb04 0e0c 	add.w	lr, r4, ip
 801910c:	f1b8 0f00 	cmp.w	r8, #0
 8019110:	f000 810c 	beq.w	801932c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8019114:	786f      	ldrb	r7, [r5, #1]
 8019116:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801911a:	4427      	add	r7, r4
 801911c:	2900      	cmp	r1, #0
 801911e:	f000 810d 	beq.w	801933c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8019122:	18a8      	adds	r0, r5, r2
 8019124:	5caa      	ldrb	r2, [r5, r2]
 8019126:	7840      	ldrb	r0, [r0, #1]
 8019128:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801912c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019130:	4422      	add	r2, r4
 8019132:	4420      	add	r0, r4
 8019134:	fa1f f388 	uxth.w	r3, r8
 8019138:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801913c:	b289      	uxth	r1, r1
 801913e:	f897 c000 	ldrb.w	ip, [r7]
 8019142:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8019146:	fb03 f901 	mul.w	r9, r3, r1
 801914a:	011b      	lsls	r3, r3, #4
 801914c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019150:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8019154:	eba3 0309 	sub.w	r3, r3, r9
 8019158:	b289      	uxth	r1, r1
 801915a:	b29b      	uxth	r3, r3
 801915c:	eba8 0801 	sub.w	r8, r8, r1
 8019160:	fb03 fc0c 	mul.w	ip, r3, ip
 8019164:	fa1f f888 	uxth.w	r8, r8
 8019168:	930f      	str	r3, [sp, #60]	; 0x3c
 801916a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801916c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8019170:	f892 a000 	ldrb.w	sl, [r2]
 8019174:	fb01 cc0a 	mla	ip, r1, sl, ip
 8019178:	f890 a000 	ldrb.w	sl, [r0]
 801917c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8019180:	f896 a000 	ldrb.w	sl, [r6]
 8019184:	fb1a fa03 	smulbb	sl, sl, r3
 8019188:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801918c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801918e:	fb0c ac05 	mla	ip, ip, r5, sl
 8019192:	fa1f fc8c 	uxth.w	ip, ip
 8019196:	f10c 0a01 	add.w	sl, ip, #1
 801919a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801919e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80191a2:	f886 a000 	strb.w	sl, [r6]
 80191a6:	f897 c001 	ldrb.w	ip, [r7, #1]
 80191aa:	f89e a001 	ldrb.w	sl, [lr, #1]
 80191ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80191b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80191b4:	fb08 cc0a 	mla	ip, r8, sl, ip
 80191b8:	f892 a001 	ldrb.w	sl, [r2, #1]
 80191bc:	fb01 cc0a 	mla	ip, r1, sl, ip
 80191c0:	f890 a001 	ldrb.w	sl, [r0, #1]
 80191c4:	fb09 cc0a 	mla	ip, r9, sl, ip
 80191c8:	f896 a001 	ldrb.w	sl, [r6, #1]
 80191cc:	fb1a fa03 	smulbb	sl, sl, r3
 80191d0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80191d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80191d6:	fb0c ac05 	mla	ip, ip, r5, sl
 80191da:	fa1f fc8c 	uxth.w	ip, ip
 80191de:	f10c 0a01 	add.w	sl, ip, #1
 80191e2:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80191e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80191ea:	f886 c001 	strb.w	ip, [r6, #1]
 80191ee:	78bf      	ldrb	r7, [r7, #2]
 80191f0:	f89e c002 	ldrb.w	ip, [lr, #2]
 80191f4:	437b      	muls	r3, r7
 80191f6:	fb08 330c 	mla	r3, r8, ip, r3
 80191fa:	f892 c002 	ldrb.w	ip, [r2, #2]
 80191fe:	7882      	ldrb	r2, [r0, #2]
 8019200:	fb01 310c 	mla	r1, r1, ip, r3
 8019204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019206:	fb09 1902 	mla	r9, r9, r2, r1
 801920a:	78b1      	ldrb	r1, [r6, #2]
 801920c:	fb11 f103 	smulbb	r1, r1, r3
 8019210:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8019214:	fb09 1505 	mla	r5, r9, r5, r1
 8019218:	b2ad      	uxth	r5, r5
 801921a:	1c6b      	adds	r3, r5, #1
 801921c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019220:	122d      	asrs	r5, r5, #8
 8019222:	70b5      	strb	r5, [r6, #2]
 8019224:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019226:	3603      	adds	r6, #3
 8019228:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801922a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801922e:	4413      	add	r3, r2
 8019230:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019232:	9325      	str	r3, [sp, #148]	; 0x94
 8019234:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019236:	4413      	add	r3, r2
 8019238:	9326      	str	r3, [sp, #152]	; 0x98
 801923a:	e73b      	b.n	80190b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801923c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801923e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8019240:	4433      	add	r3, r6
 8019242:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8019244:	9325      	str	r3, [sp, #148]	; 0x94
 8019246:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019248:	4433      	add	r3, r6
 801924a:	9326      	str	r3, [sp, #152]	; 0x98
 801924c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801924e:	3b01      	subs	r3, #1
 8019250:	9309      	str	r3, [sp, #36]	; 0x24
 8019252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019254:	3303      	adds	r3, #3
 8019256:	930a      	str	r3, [sp, #40]	; 0x28
 8019258:	e70d      	b.n	8019076 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801925a:	d028      	beq.n	80192ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801925c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801925e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8019260:	3b01      	subs	r3, #1
 8019262:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8019264:	fb00 5003 	mla	r0, r0, r3, r5
 8019268:	1400      	asrs	r0, r0, #16
 801926a:	f53f af21 	bmi.w	80190b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801926e:	3901      	subs	r1, #1
 8019270:	4288      	cmp	r0, r1
 8019272:	f6bf af1d 	bge.w	80190b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8019276:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019278:	9826      	ldr	r0, [sp, #152]	; 0x98
 801927a:	fb01 0303 	mla	r3, r1, r3, r0
 801927e:	141b      	asrs	r3, r3, #16
 8019280:	f53f af16 	bmi.w	80190b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8019284:	3a01      	subs	r2, #1
 8019286:	4293      	cmp	r3, r2
 8019288:	f6bf af12 	bge.w	80190b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801928c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801928e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019292:	1cdf      	adds	r7, r3, #3
 8019294:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8019298:	f1b9 0f00 	cmp.w	r9, #0
 801929c:	dc73      	bgt.n	8019386 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801929e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80192a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80192a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192aa:	441a      	add	r2, r3
 80192ac:	920a      	str	r2, [sp, #40]	; 0x28
 80192ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	f340 8129 	ble.w	8019508 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80192b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80192ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80192bc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80192c0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80192c4:	eef0 6a48 	vmov.f32	s13, s16
 80192c8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80192cc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80192d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80192d4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80192d8:	eef0 6a68 	vmov.f32	s13, s17
 80192dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80192e0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80192e4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80192e8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80192ec:	ee37 8a48 	vsub.f32	s16, s14, s16
 80192f0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80192f4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80192f8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80192fc:	ee18 2a10 	vmov	r2, s16
 8019300:	eeb0 8a47 	vmov.f32	s16, s14
 8019304:	fb92 f3f3 	sdiv	r3, r2, r3
 8019308:	ee18 2a90 	vmov	r2, s17
 801930c:	9327      	str	r3, [sp, #156]	; 0x9c
 801930e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019310:	eef0 8a67 	vmov.f32	s17, s15
 8019314:	fb92 f3f3 	sdiv	r3, r2, r3
 8019318:	9328      	str	r3, [sp, #160]	; 0xa0
 801931a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801931c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801931e:	3b01      	subs	r3, #1
 8019320:	930d      	str	r3, [sp, #52]	; 0x34
 8019322:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019324:	bf08      	it	eq
 8019326:	4613      	moveq	r3, r2
 8019328:	9309      	str	r3, [sp, #36]	; 0x24
 801932a:	e696      	b.n	801905a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801932c:	b149      	cbz	r1, 8019342 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801932e:	5caa      	ldrb	r2, [r5, r2]
 8019330:	4670      	mov	r0, lr
 8019332:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019336:	4422      	add	r2, r4
 8019338:	4677      	mov	r7, lr
 801933a:	e6fb      	b.n	8019134 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801933c:	4670      	mov	r0, lr
 801933e:	4672      	mov	r2, lr
 8019340:	e6f8      	b.n	8019134 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8019342:	4670      	mov	r0, lr
 8019344:	4672      	mov	r2, lr
 8019346:	e7f7      	b.n	8019338 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8019348:	f110 0c01 	adds.w	ip, r0, #1
 801934c:	f53f af6a 	bmi.w	8019224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8019350:	4562      	cmp	r2, ip
 8019352:	f6ff af67 	blt.w	8019224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8019356:	f115 0c01 	adds.w	ip, r5, #1
 801935a:	f53f af63 	bmi.w	8019224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801935e:	4567      	cmp	r7, ip
 8019360:	f6ff af60 	blt.w	8019224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8019364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019366:	b23f      	sxth	r7, r7
 8019368:	b212      	sxth	r2, r2
 801936a:	9002      	str	r0, [sp, #8]
 801936c:	9701      	str	r7, [sp, #4]
 801936e:	9200      	str	r2, [sp, #0]
 8019370:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019374:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8019378:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801937c:	4623      	mov	r3, r4
 801937e:	4631      	mov	r1, r6
 8019380:	f7ff fd4c 	bl	8018e1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8019384:	e74e      	b.n	8019224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8019386:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019388:	9826      	ldr	r0, [sp, #152]	; 0x98
 801938a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801938e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8019390:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019392:	1400      	asrs	r0, r0, #16
 8019394:	142d      	asrs	r5, r5, #16
 8019396:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019398:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801939c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80193a0:	fb02 5000 	mla	r0, r2, r0, r5
 80193a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80193a6:	f815 e000 	ldrb.w	lr, [r5, r0]
 80193aa:	eb05 0c00 	add.w	ip, r5, r0
 80193ae:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80193b2:	eb04 060e 	add.w	r6, r4, lr
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	f000 8097 	beq.w	80194ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80193bc:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80193c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80193c4:	4425      	add	r5, r4
 80193c6:	2900      	cmp	r1, #0
 80193c8:	f000 8098 	beq.w	80194fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80193cc:	eb0c 0002 	add.w	r0, ip, r2
 80193d0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80193d4:	7840      	ldrb	r0, [r0, #1]
 80193d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80193da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80193de:	4422      	add	r2, r4
 80193e0:	4420      	add	r0, r4
 80193e2:	b29b      	uxth	r3, r3
 80193e4:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80193e8:	b289      	uxth	r1, r1
 80193ea:	f895 e000 	ldrb.w	lr, [r5]
 80193ee:	3703      	adds	r7, #3
 80193f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80193f4:	fb03 f801 	mul.w	r8, r3, r1
 80193f8:	011b      	lsls	r3, r3, #4
 80193fa:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80193fe:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8019402:	eba3 0308 	sub.w	r3, r3, r8
 8019406:	b289      	uxth	r1, r1
 8019408:	b29b      	uxth	r3, r3
 801940a:	ebac 0c01 	sub.w	ip, ip, r1
 801940e:	fb03 fe0e 	mul.w	lr, r3, lr
 8019412:	fa1f fc8c 	uxth.w	ip, ip
 8019416:	930f      	str	r3, [sp, #60]	; 0x3c
 8019418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801941a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801941e:	f892 b000 	ldrb.w	fp, [r2]
 8019422:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019426:	f890 b000 	ldrb.w	fp, [r0]
 801942a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801942e:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8019432:	fb1b fb03 	smulbb	fp, fp, r3
 8019436:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801943a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801943c:	fb0e be0a 	mla	lr, lr, sl, fp
 8019440:	fa1f fe8e 	uxth.w	lr, lr
 8019444:	f10e 0b01 	add.w	fp, lr, #1
 8019448:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801944c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019450:	f807 ec06 	strb.w	lr, [r7, #-6]
 8019454:	f895 e001 	ldrb.w	lr, [r5, #1]
 8019458:	f896 b001 	ldrb.w	fp, [r6, #1]
 801945c:	fb03 fe0e 	mul.w	lr, r3, lr
 8019460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019462:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019466:	f892 b001 	ldrb.w	fp, [r2, #1]
 801946a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801946e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019472:	fb08 ee0b 	mla	lr, r8, fp, lr
 8019476:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801947a:	fb1b fb03 	smulbb	fp, fp, r3
 801947e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8019482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019484:	fb0e be0a 	mla	lr, lr, sl, fp
 8019488:	fa1f fe8e 	uxth.w	lr, lr
 801948c:	f10e 0b01 	add.w	fp, lr, #1
 8019490:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019494:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019498:	f807 ec05 	strb.w	lr, [r7, #-5]
 801949c:	78ad      	ldrb	r5, [r5, #2]
 801949e:	78b6      	ldrb	r6, [r6, #2]
 80194a0:	436b      	muls	r3, r5
 80194a2:	7895      	ldrb	r5, [r2, #2]
 80194a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80194a6:	fb0c 3306 	mla	r3, ip, r6, r3
 80194aa:	fb01 3305 	mla	r3, r1, r5, r3
 80194ae:	7885      	ldrb	r5, [r0, #2]
 80194b0:	fb08 3805 	mla	r8, r8, r5, r3
 80194b4:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80194b8:	fb13 f302 	smulbb	r3, r3, r2
 80194bc:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80194c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80194c2:	fb08 380a 	mla	r8, r8, sl, r3
 80194c6:	fa1f f888 	uxth.w	r8, r8
 80194ca:	f108 0301 	add.w	r3, r8, #1
 80194ce:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80194d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80194d4:	4413      	add	r3, r2
 80194d6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80194d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80194dc:	9325      	str	r3, [sp, #148]	; 0x94
 80194de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80194e0:	f807 8c04 	strb.w	r8, [r7, #-4]
 80194e4:	4413      	add	r3, r2
 80194e6:	9326      	str	r3, [sp, #152]	; 0x98
 80194e8:	e6d6      	b.n	8019298 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80194ea:	b151      	cbz	r1, 8019502 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80194ec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80194f0:	4630      	mov	r0, r6
 80194f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80194f6:	4422      	add	r2, r4
 80194f8:	4635      	mov	r5, r6
 80194fa:	e772      	b.n	80193e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80194fc:	4630      	mov	r0, r6
 80194fe:	4632      	mov	r2, r6
 8019500:	e76f      	b.n	80193e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8019502:	4630      	mov	r0, r6
 8019504:	4632      	mov	r2, r6
 8019506:	e7f7      	b.n	80194f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8019508:	b013      	add	sp, #76	; 0x4c
 801950a:	ecbd 8b08 	vpop	{d8-d11}
 801950e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019514 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8019514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019518:	784d      	ldrb	r5, [r1, #1]
 801951a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801951e:	022d      	lsls	r5, r5, #8
 8019520:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8019524:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8019528:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801952c:	f891 9000 	ldrb.w	r9, [r1]
 8019530:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8019534:	ea45 0509 	orr.w	r5, r5, r9
 8019538:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801953c:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8019540:	9501      	str	r5, [sp, #4]
 8019542:	fb06 470c 	mla	r7, r6, ip, r4
 8019546:	2e00      	cmp	r6, #0
 8019548:	eb02 0e07 	add.w	lr, r2, r7
 801954c:	db46      	blt.n	80195dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801954e:	45b0      	cmp	r8, r6
 8019550:	dd44      	ble.n	80195dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8019552:	2c00      	cmp	r4, #0
 8019554:	db40      	blt.n	80195d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8019556:	45a4      	cmp	ip, r4
 8019558:	dd3e      	ble.n	80195d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801955a:	5dd7      	ldrb	r7, [r2, r7]
 801955c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019560:	441f      	add	r7, r3
 8019562:	1c62      	adds	r2, r4, #1
 8019564:	d43d      	bmi.n	80195e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8019566:	4594      	cmp	ip, r2
 8019568:	dd3b      	ble.n	80195e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801956a:	f1ba 0f00 	cmp.w	sl, #0
 801956e:	d038      	beq.n	80195e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8019570:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8019574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019578:	441d      	add	r5, r3
 801957a:	3601      	adds	r6, #1
 801957c:	d435      	bmi.n	80195ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801957e:	45b0      	cmp	r8, r6
 8019580:	dd33      	ble.n	80195ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8019582:	b390      	cbz	r0, 80195ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8019584:	2c00      	cmp	r4, #0
 8019586:	db2e      	blt.n	80195e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8019588:	45a4      	cmp	ip, r4
 801958a:	dd2c      	ble.n	80195e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801958c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8019590:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019594:	441e      	add	r6, r3
 8019596:	1c62      	adds	r2, r4, #1
 8019598:	d42a      	bmi.n	80195f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801959a:	4594      	cmp	ip, r2
 801959c:	dd28      	ble.n	80195f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801959e:	f1ba 0f00 	cmp.w	sl, #0
 80195a2:	d025      	beq.n	80195f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80195a4:	44f4      	add	ip, lr
 80195a6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80195aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80195ae:	4413      	add	r3, r2
 80195b0:	f1ba 0f0f 	cmp.w	sl, #15
 80195b4:	f897 8000 	ldrb.w	r8, [r7]
 80195b8:	f895 9000 	ldrb.w	r9, [r5]
 80195bc:	f896 e000 	ldrb.w	lr, [r6]
 80195c0:	f893 c000 	ldrb.w	ip, [r3]
 80195c4:	d801      	bhi.n	80195ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 80195c6:	280f      	cmp	r0, #15
 80195c8:	d914      	bls.n	80195f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 80195ca:	4b29      	ldr	r3, [pc, #164]	; (8019670 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 80195cc:	f240 1157 	movw	r1, #343	; 0x157
 80195d0:	4a28      	ldr	r2, [pc, #160]	; (8019674 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80195d2:	4829      	ldr	r0, [pc, #164]	; (8019678 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80195d4:	f004 fbee 	bl	801ddb4 <__assert_func>
 80195d8:	af01      	add	r7, sp, #4
 80195da:	e7c2      	b.n	8019562 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80195dc:	ad01      	add	r5, sp, #4
 80195de:	462f      	mov	r7, r5
 80195e0:	e7cb      	b.n	801957a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80195e2:	ad01      	add	r5, sp, #4
 80195e4:	e7c9      	b.n	801957a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80195e6:	ae01      	add	r6, sp, #4
 80195e8:	e7d5      	b.n	8019596 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80195ea:	ab01      	add	r3, sp, #4
 80195ec:	461e      	mov	r6, r3
 80195ee:	e7df      	b.n	80195b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80195f0:	ab01      	add	r3, sp, #4
 80195f2:	e7dd      	b.n	80195b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80195f4:	fa1f f48a 	uxth.w	r4, sl
 80195f8:	b280      	uxth	r0, r0
 80195fa:	fb04 fa00 	mul.w	sl, r4, r0
 80195fe:	0124      	lsls	r4, r4, #4
 8019600:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8019604:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8019608:	b282      	uxth	r2, r0
 801960a:	eba4 000a 	sub.w	r0, r4, sl
 801960e:	ebab 0b02 	sub.w	fp, fp, r2
 8019612:	b280      	uxth	r0, r0
 8019614:	fa1f fb8b 	uxth.w	fp, fp
 8019618:	fb00 f909 	mul.w	r9, r0, r9
 801961c:	fb0b 9808 	mla	r8, fp, r8, r9
 8019620:	fb02 8e0e 	mla	lr, r2, lr, r8
 8019624:	fb0a ec0c 	mla	ip, sl, ip, lr
 8019628:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801962c:	f881 c000 	strb.w	ip, [r1]
 8019630:	786c      	ldrb	r4, [r5, #1]
 8019632:	f897 c001 	ldrb.w	ip, [r7, #1]
 8019636:	4344      	muls	r4, r0
 8019638:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801963c:	7874      	ldrb	r4, [r6, #1]
 801963e:	fb02 cc04 	mla	ip, r2, r4, ip
 8019642:	785c      	ldrb	r4, [r3, #1]
 8019644:	fb0a c404 	mla	r4, sl, r4, ip
 8019648:	1224      	asrs	r4, r4, #8
 801964a:	704c      	strb	r4, [r1, #1]
 801964c:	78ad      	ldrb	r5, [r5, #2]
 801964e:	78bc      	ldrb	r4, [r7, #2]
 8019650:	4368      	muls	r0, r5
 8019652:	fb0b 0b04 	mla	fp, fp, r4, r0
 8019656:	78b0      	ldrb	r0, [r6, #2]
 8019658:	fb02 b000 	mla	r0, r2, r0, fp
 801965c:	789a      	ldrb	r2, [r3, #2]
 801965e:	fb0a 0a02 	mla	sl, sl, r2, r0
 8019662:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019666:	f881 a002 	strb.w	sl, [r1, #2]
 801966a:	b003      	add	sp, #12
 801966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019670:	08021f95 	.word	0x08021f95
 8019674:	080224ff 	.word	0x080224ff
 8019678:	0802205e 	.word	0x0802205e

0801967c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801967c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019680:	ed2d 8b0a 	vpush	{d8-d12}
 8019684:	b08d      	sub	sp, #52	; 0x34
 8019686:	eeb0 aa40 	vmov.f32	s20, s0
 801968a:	eef0 9a60 	vmov.f32	s19, s1
 801968e:	900b      	str	r0, [sp, #44]	; 0x2c
 8019690:	eeb0 9a41 	vmov.f32	s18, s2
 8019694:	9306      	str	r3, [sp, #24]
 8019696:	eeb0 8a62 	vmov.f32	s16, s5
 801969a:	eef0 8a43 	vmov.f32	s17, s6
 801969e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80196a0:	eeb0 ca44 	vmov.f32	s24, s8
 80196a4:	eef0 ba64 	vmov.f32	s23, s9
 80196a8:	eeb0 ba45 	vmov.f32	s22, s10
 80196ac:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80196b0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80196b4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80196b6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80196ba:	6850      	ldr	r0, [r2, #4]
 80196bc:	6812      	ldr	r2, [r2, #0]
 80196be:	fb00 1303 	mla	r3, r0, r3, r1
 80196c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80196c6:	18d3      	adds	r3, r2, r3
 80196c8:	9307      	str	r3, [sp, #28]
 80196ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	9308      	str	r3, [sp, #32]
 80196d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80196d2:	685d      	ldr	r5, [r3, #4]
 80196d4:	3504      	adds	r5, #4
 80196d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196d8:	2b00      	cmp	r3, #0
 80196da:	dc03      	bgt.n	80196e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80196dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196de:	2b00      	cmp	r3, #0
 80196e0:	f340 81e6 	ble.w	8019ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80196e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80196e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80196ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80196ee:	1e48      	subs	r0, r1, #1
 80196f0:	1e56      	subs	r6, r2, #1
 80196f2:	9b06      	ldr	r3, [sp, #24]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	f340 80bd 	ble.w	8019874 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80196fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80196fc:	1427      	asrs	r7, r4, #16
 80196fe:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019702:	d406      	bmi.n	8019712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019704:	4287      	cmp	r7, r0
 8019706:	da04      	bge.n	8019712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019708:	2b00      	cmp	r3, #0
 801970a:	db02      	blt.n	8019712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801970c:	42b3      	cmp	r3, r6
 801970e:	f2c0 80b2 	blt.w	8019876 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8019712:	3701      	adds	r7, #1
 8019714:	f100 80a1 	bmi.w	801985a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8019718:	42b9      	cmp	r1, r7
 801971a:	f2c0 809e 	blt.w	801985a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801971e:	3301      	adds	r3, #1
 8019720:	f100 809b 	bmi.w	801985a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8019724:	429a      	cmp	r2, r3
 8019726:	f2c0 8098 	blt.w	801985a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801972a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801972e:	f1bb 0f00 	cmp.w	fp, #0
 8019732:	f340 80bf 	ble.w	80198b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8019736:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019738:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801973a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801973c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019740:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8019744:	1420      	asrs	r0, r4, #16
 8019746:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019748:	ea4f 4723 	mov.w	r7, r3, asr #16
 801974c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8019750:	6892      	ldr	r2, [r2, #8]
 8019752:	f100 8103 	bmi.w	801995c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019756:	f102 3eff 	add.w	lr, r2, #4294967295
 801975a:	4570      	cmp	r0, lr
 801975c:	f280 80fe 	bge.w	801995c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019760:	2f00      	cmp	r7, #0
 8019762:	f2c0 80fb 	blt.w	801995c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019766:	f10c 3eff 	add.w	lr, ip, #4294967295
 801976a:	4577      	cmp	r7, lr
 801976c:	f280 80f6 	bge.w	801995c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019770:	b212      	sxth	r2, r2
 8019772:	fb07 0002 	mla	r0, r7, r2, r0
 8019776:	9f08      	ldr	r7, [sp, #32]
 8019778:	f817 8000 	ldrb.w	r8, [r7, r0]
 801977c:	eb07 0e00 	add.w	lr, r7, r0
 8019780:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019784:	eb05 0c08 	add.w	ip, r5, r8
 8019788:	2b00      	cmp	r3, #0
 801978a:	f000 80d8 	beq.w	801993e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801978e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8019792:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019796:	442f      	add	r7, r5
 8019798:	2900      	cmp	r1, #0
 801979a:	f000 80d9 	beq.w	8019950 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801979e:	eb0e 0002 	add.w	r0, lr, r2
 80197a2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80197a6:	7840      	ldrb	r0, [r0, #1]
 80197a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80197ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80197b0:	442a      	add	r2, r5
 80197b2:	4428      	add	r0, r5
 80197b4:	b29b      	uxth	r3, r3
 80197b6:	f815 a008 	ldrb.w	sl, [r5, r8]
 80197ba:	b289      	uxth	r1, r1
 80197bc:	f897 8000 	ldrb.w	r8, [r7]
 80197c0:	fb03 f901 	mul.w	r9, r3, r1
 80197c4:	011b      	lsls	r3, r3, #4
 80197c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80197ca:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80197ce:	eba3 0309 	sub.w	r3, r3, r9
 80197d2:	b289      	uxth	r1, r1
 80197d4:	b29b      	uxth	r3, r3
 80197d6:	ebae 0e01 	sub.w	lr, lr, r1
 80197da:	fb03 f808 	mul.w	r8, r3, r8
 80197de:	fa1f fe8e 	uxth.w	lr, lr
 80197e2:	fb0e 880a 	mla	r8, lr, sl, r8
 80197e6:	f892 a000 	ldrb.w	sl, [r2]
 80197ea:	fb01 880a 	mla	r8, r1, sl, r8
 80197ee:	f890 a000 	ldrb.w	sl, [r0]
 80197f2:	fb09 880a 	mla	r8, r9, sl, r8
 80197f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80197fa:	f886 8000 	strb.w	r8, [r6]
 80197fe:	f897 8001 	ldrb.w	r8, [r7, #1]
 8019802:	f89c a001 	ldrb.w	sl, [ip, #1]
 8019806:	fb03 f808 	mul.w	r8, r3, r8
 801980a:	fb0e 880a 	mla	r8, lr, sl, r8
 801980e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8019812:	fb01 880a 	mla	r8, r1, sl, r8
 8019816:	f890 a001 	ldrb.w	sl, [r0, #1]
 801981a:	fb09 880a 	mla	r8, r9, sl, r8
 801981e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019822:	f886 8001 	strb.w	r8, [r6, #1]
 8019826:	78bf      	ldrb	r7, [r7, #2]
 8019828:	f89c c002 	ldrb.w	ip, [ip, #2]
 801982c:	437b      	muls	r3, r7
 801982e:	7892      	ldrb	r2, [r2, #2]
 8019830:	fb0e 330c 	mla	r3, lr, ip, r3
 8019834:	fb01 3102 	mla	r1, r1, r2, r3
 8019838:	7882      	ldrb	r2, [r0, #2]
 801983a:	fb09 1902 	mla	r9, r9, r2, r1
 801983e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019842:	f886 9002 	strb.w	r9, [r6, #2]
 8019846:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019848:	3603      	adds	r6, #3
 801984a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801984c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019850:	441c      	add	r4, r3
 8019852:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019854:	4413      	add	r3, r2
 8019856:	9322      	str	r3, [sp, #136]	; 0x88
 8019858:	e769      	b.n	801972e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801985a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801985c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801985e:	441c      	add	r4, r3
 8019860:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019862:	443b      	add	r3, r7
 8019864:	9322      	str	r3, [sp, #136]	; 0x88
 8019866:	9b06      	ldr	r3, [sp, #24]
 8019868:	3b01      	subs	r3, #1
 801986a:	9306      	str	r3, [sp, #24]
 801986c:	9b07      	ldr	r3, [sp, #28]
 801986e:	3303      	adds	r3, #3
 8019870:	9307      	str	r3, [sp, #28]
 8019872:	e73e      	b.n	80196f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019874:	d026      	beq.n	80198c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019876:	9b06      	ldr	r3, [sp, #24]
 8019878:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801987a:	3b01      	subs	r3, #1
 801987c:	fb00 4003 	mla	r0, r0, r3, r4
 8019880:	1400      	asrs	r0, r0, #16
 8019882:	f53f af52 	bmi.w	801972a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019886:	3901      	subs	r1, #1
 8019888:	4288      	cmp	r0, r1
 801988a:	f6bf af4e 	bge.w	801972a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801988e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8019890:	9822      	ldr	r0, [sp, #136]	; 0x88
 8019892:	fb01 0303 	mla	r3, r1, r3, r0
 8019896:	141b      	asrs	r3, r3, #16
 8019898:	f53f af47 	bmi.w	801972a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801989c:	3a01      	subs	r2, #1
 801989e:	4293      	cmp	r3, r2
 80198a0:	f6bf af43 	bge.w	801972a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80198a4:	9b07      	ldr	r3, [sp, #28]
 80198a6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80198aa:	f103 0803 	add.w	r8, r3, #3
 80198ae:	f1ba 0f00 	cmp.w	sl, #0
 80198b2:	dc71      	bgt.n	8019998 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80198b4:	9b06      	ldr	r3, [sp, #24]
 80198b6:	9a07      	ldr	r2, [sp, #28]
 80198b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80198bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80198c0:	441a      	add	r2, r3
 80198c2:	9207      	str	r2, [sp, #28]
 80198c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	f340 80f2 	ble.w	8019ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80198cc:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80198d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80198d2:	ee79 9aab 	vadd.f32	s19, s19, s23
 80198d6:	eef0 6a48 	vmov.f32	s13, s16
 80198da:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80198de:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80198e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80198e6:	ee16 4a90 	vmov	r4, s13
 80198ea:	eef0 6a68 	vmov.f32	s13, s17
 80198ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80198f2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80198f6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80198fa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80198fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019902:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019906:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801990a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801990e:	ee18 2a10 	vmov	r2, s16
 8019912:	eeb0 8a47 	vmov.f32	s16, s14
 8019916:	fb92 f3f3 	sdiv	r3, r2, r3
 801991a:	ee18 2a90 	vmov	r2, s17
 801991e:	9323      	str	r3, [sp, #140]	; 0x8c
 8019920:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019922:	eef0 8a67 	vmov.f32	s17, s15
 8019926:	fb92 f3f3 	sdiv	r3, r2, r3
 801992a:	9324      	str	r3, [sp, #144]	; 0x90
 801992c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801992e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019930:	3b01      	subs	r3, #1
 8019932:	9309      	str	r3, [sp, #36]	; 0x24
 8019934:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019936:	bf08      	it	eq
 8019938:	4613      	moveq	r3, r2
 801993a:	9306      	str	r3, [sp, #24]
 801993c:	e6cb      	b.n	80196d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801993e:	b151      	cbz	r1, 8019956 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8019940:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8019944:	4660      	mov	r0, ip
 8019946:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801994a:	442a      	add	r2, r5
 801994c:	4667      	mov	r7, ip
 801994e:	e731      	b.n	80197b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019950:	4660      	mov	r0, ip
 8019952:	4662      	mov	r2, ip
 8019954:	e72e      	b.n	80197b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019956:	4660      	mov	r0, ip
 8019958:	4662      	mov	r2, ip
 801995a:	e7f7      	b.n	801994c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801995c:	f110 0e01 	adds.w	lr, r0, #1
 8019960:	f53f af71 	bmi.w	8019846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019964:	4572      	cmp	r2, lr
 8019966:	f6ff af6e 	blt.w	8019846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801996a:	f117 0e01 	adds.w	lr, r7, #1
 801996e:	f53f af6a 	bmi.w	8019846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019972:	45f4      	cmp	ip, lr
 8019974:	f6ff af67 	blt.w	8019846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019978:	b212      	sxth	r2, r2
 801997a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801997e:	fa0f f38c 	sxth.w	r3, ip
 8019982:	9200      	str	r2, [sp, #0]
 8019984:	4631      	mov	r1, r6
 8019986:	9a08      	ldr	r2, [sp, #32]
 8019988:	9301      	str	r3, [sp, #4]
 801998a:	462b      	mov	r3, r5
 801998c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8019990:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019992:	f7ff fdbf 	bl	8019514 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8019996:	e756      	b.n	8019846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019998:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801999a:	1426      	asrs	r6, r4, #16
 801999c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801999e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80199a2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80199a6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80199a8:	1400      	asrs	r0, r0, #16
 80199aa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80199ae:	fb02 6000 	mla	r0, r2, r0, r6
 80199b2:	9e08      	ldr	r6, [sp, #32]
 80199b4:	f816 e000 	ldrb.w	lr, [r6, r0]
 80199b8:	eb06 0c00 	add.w	ip, r6, r0
 80199bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80199c0:	eb05 070e 	add.w	r7, r5, lr
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d064      	beq.n	8019a92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 80199c8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80199cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80199d0:	442e      	add	r6, r5
 80199d2:	2900      	cmp	r1, #0
 80199d4:	d066      	beq.n	8019aa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80199d6:	eb0c 0002 	add.w	r0, ip, r2
 80199da:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80199de:	7840      	ldrb	r0, [r0, #1]
 80199e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80199e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80199e8:	442a      	add	r2, r5
 80199ea:	4428      	add	r0, r5
 80199ec:	b29b      	uxth	r3, r3
 80199ee:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80199f2:	b289      	uxth	r1, r1
 80199f4:	f896 e000 	ldrb.w	lr, [r6]
 80199f8:	f108 0803 	add.w	r8, r8, #3
 80199fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019a00:	fb03 f901 	mul.w	r9, r3, r1
 8019a04:	011b      	lsls	r3, r3, #4
 8019a06:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019a0a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8019a0e:	eba3 0309 	sub.w	r3, r3, r9
 8019a12:	b289      	uxth	r1, r1
 8019a14:	b29b      	uxth	r3, r3
 8019a16:	ebac 0c01 	sub.w	ip, ip, r1
 8019a1a:	fb03 fe0e 	mul.w	lr, r3, lr
 8019a1e:	fa1f fc8c 	uxth.w	ip, ip
 8019a22:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019a26:	f892 b000 	ldrb.w	fp, [r2]
 8019a2a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019a2e:	f890 b000 	ldrb.w	fp, [r0]
 8019a32:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019a36:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019a3a:	f808 ec06 	strb.w	lr, [r8, #-6]
 8019a3e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8019a42:	f897 b001 	ldrb.w	fp, [r7, #1]
 8019a46:	fb03 fe0e 	mul.w	lr, r3, lr
 8019a4a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019a4e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019a52:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019a56:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019a5a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019a5e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019a62:	f808 ec05 	strb.w	lr, [r8, #-5]
 8019a66:	78b6      	ldrb	r6, [r6, #2]
 8019a68:	78bf      	ldrb	r7, [r7, #2]
 8019a6a:	4373      	muls	r3, r6
 8019a6c:	7896      	ldrb	r6, [r2, #2]
 8019a6e:	7882      	ldrb	r2, [r0, #2]
 8019a70:	fb0c 3307 	mla	r3, ip, r7, r3
 8019a74:	fb01 3306 	mla	r3, r1, r6, r3
 8019a78:	fb09 3902 	mla	r9, r9, r2, r3
 8019a7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019a7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019a80:	441c      	add	r4, r3
 8019a82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019a84:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019a88:	4413      	add	r3, r2
 8019a8a:	f808 9c04 	strb.w	r9, [r8, #-4]
 8019a8e:	9322      	str	r3, [sp, #136]	; 0x88
 8019a90:	e70d      	b.n	80198ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8019a92:	b151      	cbz	r1, 8019aaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8019a94:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019a98:	4638      	mov	r0, r7
 8019a9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019a9e:	442a      	add	r2, r5
 8019aa0:	463e      	mov	r6, r7
 8019aa2:	e7a3      	b.n	80199ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8019aa4:	4638      	mov	r0, r7
 8019aa6:	463a      	mov	r2, r7
 8019aa8:	e7a0      	b.n	80199ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8019aaa:	4638      	mov	r0, r7
 8019aac:	463a      	mov	r2, r7
 8019aae:	e7f7      	b.n	8019aa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8019ab0:	b00d      	add	sp, #52	; 0x34
 8019ab2:	ecbd 8b0a 	vpop	{d8-d12}
 8019ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019abc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8019abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac0:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8019ac4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019ac8:	2d00      	cmp	r5, #0
 8019aca:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8019ace:	fb05 040e 	mla	r4, r5, lr, r0
 8019ad2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019ad6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8019ada:	eb02 0804 	add.w	r8, r2, r4
 8019ade:	db40      	blt.n	8019b62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8019ae0:	45a9      	cmp	r9, r5
 8019ae2:	dd3e      	ble.n	8019b62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8019ae4:	2800      	cmp	r0, #0
 8019ae6:	db3a      	blt.n	8019b5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8019ae8:	4586      	cmp	lr, r0
 8019aea:	dd38      	ble.n	8019b5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8019aec:	5d12      	ldrb	r2, [r2, r4]
 8019aee:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019af2:	1c42      	adds	r2, r0, #1
 8019af4:	d438      	bmi.n	8019b68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8019af6:	4596      	cmp	lr, r2
 8019af8:	dd36      	ble.n	8019b68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8019afa:	b3bf      	cbz	r7, 8019b6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8019afc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019b00:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8019b04:	3501      	adds	r5, #1
 8019b06:	d435      	bmi.n	8019b74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8019b08:	45a9      	cmp	r9, r5
 8019b0a:	dd33      	ble.n	8019b74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8019b0c:	f1bc 0f00 	cmp.w	ip, #0
 8019b10:	d033      	beq.n	8019b7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8019b12:	2800      	cmp	r0, #0
 8019b14:	db2c      	blt.n	8019b70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8019b16:	4586      	cmp	lr, r0
 8019b18:	dd2a      	ble.n	8019b70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8019b1a:	f818 200e 	ldrb.w	r2, [r8, lr]
 8019b1e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019b22:	3001      	adds	r0, #1
 8019b24:	d42c      	bmi.n	8019b80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8019b26:	4586      	cmp	lr, r0
 8019b28:	dd2a      	ble.n	8019b80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8019b2a:	b35f      	cbz	r7, 8019b84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8019b2c:	44c6      	add	lr, r8
 8019b2e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8019b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019b36:	2f0f      	cmp	r7, #15
 8019b38:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019b3c:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8019b40:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019b44:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8019b48:	d802      	bhi.n	8019b50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8019b4a:	f1bc 0f0f 	cmp.w	ip, #15
 8019b4e:	d91b      	bls.n	8019b88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8019b50:	4b77      	ldr	r3, [pc, #476]	; (8019d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8019b52:	f240 1157 	movw	r1, #343	; 0x157
 8019b56:	4a77      	ldr	r2, [pc, #476]	; (8019d34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8019b58:	4877      	ldr	r0, [pc, #476]	; (8019d38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8019b5a:	f004 f92b 	bl	801ddb4 <__assert_func>
 8019b5e:	2600      	movs	r6, #0
 8019b60:	e7c7      	b.n	8019af2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8019b62:	2400      	movs	r4, #0
 8019b64:	4626      	mov	r6, r4
 8019b66:	e7cd      	b.n	8019b04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8019b68:	2400      	movs	r4, #0
 8019b6a:	e7cb      	b.n	8019b04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8019b6c:	463c      	mov	r4, r7
 8019b6e:	e7c9      	b.n	8019b04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8019b70:	2500      	movs	r5, #0
 8019b72:	e7d6      	b.n	8019b22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8019b74:	2200      	movs	r2, #0
 8019b76:	4615      	mov	r5, r2
 8019b78:	e7dd      	b.n	8019b36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019b7a:	4662      	mov	r2, ip
 8019b7c:	4665      	mov	r5, ip
 8019b7e:	e7da      	b.n	8019b36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019b80:	2200      	movs	r2, #0
 8019b82:	e7d8      	b.n	8019b36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019b84:	463a      	mov	r2, r7
 8019b86:	e7d6      	b.n	8019b36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019b88:	b2bf      	uxth	r7, r7
 8019b8a:	fa1f f08c 	uxth.w	r0, ip
 8019b8e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8019b92:	fb00 fe07 	mul.w	lr, r0, r7
 8019b96:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8019b9a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8019b9e:	ebac 070e 	sub.w	r7, ip, lr
 8019ba2:	b280      	uxth	r0, r0
 8019ba4:	b2bf      	uxth	r7, r7
 8019ba6:	1a1b      	subs	r3, r3, r0
 8019ba8:	fb07 fc0a 	mul.w	ip, r7, sl
 8019bac:	b29b      	uxth	r3, r3
 8019bae:	fb03 cc0b 	mla	ip, r3, fp, ip
 8019bb2:	9300      	str	r3, [sp, #0]
 8019bb4:	fb00 cc09 	mla	ip, r0, r9, ip
 8019bb8:	fb0e cc08 	mla	ip, lr, r8, ip
 8019bbc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019bc0:	9301      	str	r3, [sp, #4]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	f000 80b0 	beq.w	8019d28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8019bc8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019bcc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019bd0:	fb0b fc0c 	mul.w	ip, fp, ip
 8019bd4:	fb0b f606 	mul.w	r6, fp, r6
 8019bd8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019bdc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019be0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019be4:	44dc      	add	ip, fp
 8019be6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019bea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019bee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019bf2:	fb0a fb0b 	mul.w	fp, sl, fp
 8019bf6:	fb0a fa04 	mul.w	sl, sl, r4
 8019bfa:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019bfe:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019c02:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8019c06:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019c0a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019c0e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019c12:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8019c16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019c1a:	0a36      	lsrs	r6, r6, #8
 8019c1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019c20:	44dc      	add	ip, fp
 8019c22:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019c26:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019c2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019c2e:	fb09 fb0b 	mul.w	fp, r9, fp
 8019c32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019c36:	fb09 f905 	mul.w	r9, r9, r5
 8019c3a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019c3e:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8019c42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019c46:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019c4a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019c4e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019c52:	fb0c fc07 	mul.w	ip, ip, r7
 8019c56:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019c5a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8019c5e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019c62:	445c      	add	r4, fp
 8019c64:	fb08 f505 	mul.w	r5, r8, r5
 8019c68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019c6c:	fb08 f802 	mul.w	r8, r8, r2
 8019c70:	0a24      	lsrs	r4, r4, #8
 8019c72:	0a2a      	lsrs	r2, r5, #8
 8019c74:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019c78:	fb07 f70a 	mul.w	r7, r7, sl
 8019c7c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019c80:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019c84:	4415      	add	r5, r2
 8019c86:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019c8a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019c8e:	9a00      	ldr	r2, [sp, #0]
 8019c90:	0a2d      	lsrs	r5, r5, #8
 8019c92:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019c96:	fb03 cc02 	mla	ip, r3, r2, ip
 8019c9a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019c9e:	fb02 7306 	mla	r3, r2, r6, r7
 8019ca2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019ca6:	9a01      	ldr	r2, [sp, #4]
 8019ca8:	fb05 c50e 	mla	r5, r5, lr, ip
 8019cac:	fb0e 3e08 	mla	lr, lr, r8, r3
 8019cb0:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8019cb4:	fb04 5400 	mla	r4, r4, r0, r5
 8019cb8:	fb00 e303 	mla	r3, r0, r3, lr
 8019cbc:	0a24      	lsrs	r4, r4, #8
 8019cbe:	0a1b      	lsrs	r3, r3, #8
 8019cc0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019cc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019cc8:	431c      	orrs	r4, r3
 8019cca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019cce:	b29b      	uxth	r3, r3
 8019cd0:	b2e0      	uxtb	r0, r4
 8019cd2:	435a      	muls	r2, r3
 8019cd4:	fb10 f003 	smulbb	r0, r0, r3
 8019cd8:	1c55      	adds	r5, r2, #1
 8019cda:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8019cde:	780a      	ldrb	r2, [r1, #0]
 8019ce0:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8019ce4:	b2ed      	uxtb	r5, r5
 8019ce6:	fb02 0205 	mla	r2, r2, r5, r0
 8019cea:	b292      	uxth	r2, r2
 8019cec:	1c50      	adds	r0, r2, #1
 8019cee:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019cf2:	7848      	ldrb	r0, [r1, #1]
 8019cf4:	fb10 f005 	smulbb	r0, r0, r5
 8019cf8:	1212      	asrs	r2, r2, #8
 8019cfa:	700a      	strb	r2, [r1, #0]
 8019cfc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8019d00:	0c24      	lsrs	r4, r4, #16
 8019d02:	fb02 0203 	mla	r2, r2, r3, r0
 8019d06:	b292      	uxth	r2, r2
 8019d08:	1c50      	adds	r0, r2, #1
 8019d0a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019d0e:	1212      	asrs	r2, r2, #8
 8019d10:	704a      	strb	r2, [r1, #1]
 8019d12:	788a      	ldrb	r2, [r1, #2]
 8019d14:	fb12 f505 	smulbb	r5, r2, r5
 8019d18:	fb04 5303 	mla	r3, r4, r3, r5
 8019d1c:	b29b      	uxth	r3, r3
 8019d1e:	1c5a      	adds	r2, r3, #1
 8019d20:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019d24:	121b      	asrs	r3, r3, #8
 8019d26:	708b      	strb	r3, [r1, #2]
 8019d28:	b003      	add	sp, #12
 8019d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d2e:	bf00      	nop
 8019d30:	08021f95 	.word	0x08021f95
 8019d34:	080224ff 	.word	0x080224ff
 8019d38:	0802205e 	.word	0x0802205e

08019d3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d40:	ed2d 8b08 	vpush	{d8-d11}
 8019d44:	b09f      	sub	sp, #124	; 0x7c
 8019d46:	eeb0 aa40 	vmov.f32	s20, s0
 8019d4a:	eef0 9a60 	vmov.f32	s19, s1
 8019d4e:	921b      	str	r2, [sp, #108]	; 0x6c
 8019d50:	eeb0 9a41 	vmov.f32	s18, s2
 8019d54:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8019d56:	eeb0 8a62 	vmov.f32	s16, s5
 8019d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8019d5c:	eef0 8a43 	vmov.f32	s17, s6
 8019d60:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8019d64:	eef0 ba44 	vmov.f32	s23, s8
 8019d68:	901d      	str	r0, [sp, #116]	; 0x74
 8019d6a:	eeb0 ba64 	vmov.f32	s22, s9
 8019d6e:	931c      	str	r3, [sp, #112]	; 0x70
 8019d70:	eef0 aa45 	vmov.f32	s21, s10
 8019d74:	6850      	ldr	r0, [r2, #4]
 8019d76:	9119      	str	r1, [sp, #100]	; 0x64
 8019d78:	6812      	ldr	r2, [r2, #0]
 8019d7a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8019d7c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8019d80:	fb00 1303 	mla	r3, r0, r3, r1
 8019d84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d88:	18d3      	adds	r3, r2, r3
 8019d8a:	930c      	str	r3, [sp, #48]	; 0x30
 8019d8c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	9312      	str	r3, [sp, #72]	; 0x48
 8019d92:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019d94:	685e      	ldr	r6, [r3, #4]
 8019d96:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019d9a:	3604      	adds	r6, #4
 8019d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8019d9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	dc03      	bgt.n	8019dac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019da4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	f340 8378 	ble.w	801a49c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8019dac:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019dae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019db2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019db6:	1e48      	subs	r0, r1, #1
 8019db8:	1e57      	subs	r7, r2, #1
 8019dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	f340 818c 	ble.w	801a0da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8019dc2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8019dc4:	142b      	asrs	r3, r5, #16
 8019dc6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019dca:	d406      	bmi.n	8019dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019dcc:	4584      	cmp	ip, r0
 8019dce:	da04      	bge.n	8019dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	db02      	blt.n	8019dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019dd4:	42bb      	cmp	r3, r7
 8019dd6:	f2c0 8181 	blt.w	801a0dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8019dda:	f11c 0c01 	adds.w	ip, ip, #1
 8019dde:	f100 816f 	bmi.w	801a0c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019de2:	4561      	cmp	r1, ip
 8019de4:	f2c0 816c 	blt.w	801a0c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019de8:	3301      	adds	r3, #1
 8019dea:	f100 8169 	bmi.w	801a0c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019dee:	429a      	cmp	r2, r3
 8019df0:	f2c0 8166 	blt.w	801a0c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019df6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019df8:	931a      	str	r3, [sp, #104]	; 0x68
 8019dfa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	f340 818c 	ble.w	801a11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8019e02:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019e04:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019e08:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019e0c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019e10:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019e12:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8019e16:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019e18:	141b      	asrs	r3, r3, #16
 8019e1a:	f100 81d0 	bmi.w	801a1be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8019e22:	4543      	cmp	r3, r8
 8019e24:	f280 81cb 	bge.w	801a1be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019e28:	f1bc 0f00 	cmp.w	ip, #0
 8019e2c:	f2c0 81c7 	blt.w	801a1be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019e30:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019e34:	45c4      	cmp	ip, r8
 8019e36:	f280 81c2 	bge.w	801a1be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019e3a:	b200      	sxth	r0, r0
 8019e3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019e3e:	fb0c 3300 	mla	r3, ip, r0, r3
 8019e42:	eb04 0803 	add.w	r8, r4, r3
 8019e46:	5ce3      	ldrb	r3, [r4, r3]
 8019e48:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019e4c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019e50:	2a00      	cmp	r2, #0
 8019e52:	f000 81a9 	beq.w	801a1a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8019e56:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019e5a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019e5e:	940e      	str	r4, [sp, #56]	; 0x38
 8019e60:	0e24      	lsrs	r4, r4, #24
 8019e62:	9415      	str	r4, [sp, #84]	; 0x54
 8019e64:	b179      	cbz	r1, 8019e86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019e66:	eb08 0c00 	add.w	ip, r8, r0
 8019e6a:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019e6e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019e72:	900a      	str	r0, [sp, #40]	; 0x28
 8019e74:	0e00      	lsrs	r0, r0, #24
 8019e76:	9013      	str	r0, [sp, #76]	; 0x4c
 8019e78:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8019e7c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019e80:	900f      	str	r0, [sp, #60]	; 0x3c
 8019e82:	0e00      	lsrs	r0, r0, #24
 8019e84:	9016      	str	r0, [sp, #88]	; 0x58
 8019e86:	b292      	uxth	r2, r2
 8019e88:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019e8a:	b289      	uxth	r1, r1
 8019e8c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019e8e:	fb02 f901 	mul.w	r9, r2, r1
 8019e92:	0112      	lsls	r2, r2, #4
 8019e94:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019e98:	eba2 0809 	sub.w	r8, r2, r9
 8019e9c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019ea0:	b289      	uxth	r1, r1
 8019ea2:	fa1f f888 	uxth.w	r8, r8
 8019ea6:	1a52      	subs	r2, r2, r1
 8019ea8:	fb08 f000 	mul.w	r0, r8, r0
 8019eac:	b292      	uxth	r2, r2
 8019eae:	fb02 000e 	mla	r0, r2, lr, r0
 8019eb2:	fb01 0004 	mla	r0, r1, r4, r0
 8019eb6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019eb8:	fb09 0004 	mla	r0, r9, r4, r0
 8019ebc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019ec0:	2800      	cmp	r0, #0
 8019ec2:	f000 80f2 	beq.w	801a0aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8019ec6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019eca:	d01b      	beq.n	8019f04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019ecc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019ed0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019ed4:	fb0e fa0a 	mul.w	sl, lr, sl
 8019ed8:	fb0e fe03 	mul.w	lr, lr, r3
 8019edc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019ee0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019ee4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019ee8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019eec:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019ef0:	4453      	add	r3, sl
 8019ef2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019ef6:	0a1b      	lsrs	r3, r3, #8
 8019ef8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019efc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019f00:	ea43 030c 	orr.w	r3, r3, ip
 8019f04:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019f06:	2cff      	cmp	r4, #255	; 0xff
 8019f08:	d021      	beq.n	8019f4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8019f0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019f0c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019f10:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019f12:	fb04 fb0b 	mul.w	fp, r4, fp
 8019f16:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019f18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019f1c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019f1e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019f22:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019f26:	fb04 fa0a 	mul.w	sl, r4, sl
 8019f2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019f2e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019f32:	44de      	add	lr, fp
 8019f34:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019f38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019f3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019f40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019f44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019f48:	ea4e 040a 	orr.w	r4, lr, sl
 8019f4c:	940e      	str	r4, [sp, #56]	; 0x38
 8019f4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019f50:	2cff      	cmp	r4, #255	; 0xff
 8019f52:	d021      	beq.n	8019f98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8019f54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019f56:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019f5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019f5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8019f60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019f62:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019f66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019f68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019f6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019f70:	fb04 fa0a 	mul.w	sl, r4, sl
 8019f74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019f78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019f7c:	44de      	add	lr, fp
 8019f7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019f82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019f86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019f8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019f8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019f92:	ea4e 040a 	orr.w	r4, lr, sl
 8019f96:	940a      	str	r4, [sp, #40]	; 0x28
 8019f98:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019f9a:	2cff      	cmp	r4, #255	; 0xff
 8019f9c:	d021      	beq.n	8019fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019f9e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019fa0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019fa4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019fa6:	fb04 fb0b 	mul.w	fp, r4, fp
 8019faa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019fac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019fb0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019fb2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019fb6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019fba:	fb04 fa0a 	mul.w	sl, r4, sl
 8019fbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019fc2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019fc6:	44de      	add	lr, fp
 8019fc8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019fcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019fd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019fd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019fd8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019fdc:	ea4e 040a 	orr.w	r4, lr, sl
 8019fe0:	940f      	str	r4, [sp, #60]	; 0x3c
 8019fe2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019fe4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019fe8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019fec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019ff0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019ff2:	fb08 fc0c 	mul.w	ip, r8, ip
 8019ff6:	fb02 cc0e 	mla	ip, r2, lr, ip
 8019ffa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019ffe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a000:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a004:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a008:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a00a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a00e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a012:	fb08 f80e 	mul.w	r8, r8, lr
 801a016:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a01a:	fb02 8303 	mla	r3, r2, r3, r8
 801a01e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a020:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a024:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a028:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a02a:	fb01 330a 	mla	r3, r1, sl, r3
 801a02e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801a032:	fb09 3901 	mla	r9, r9, r1, r3
 801a036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a038:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a03a:	4343      	muls	r3, r0
 801a03c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a040:	1c58      	adds	r0, r3, #1
 801a042:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a046:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a04a:	ea4c 0c09 	orr.w	ip, ip, r9
 801a04e:	783b      	ldrb	r3, [r7, #0]
 801a050:	fa5f f28c 	uxtb.w	r2, ip
 801a054:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a058:	fb12 f201 	smulbb	r2, r2, r1
 801a05c:	b2c0      	uxtb	r0, r0
 801a05e:	fb03 2300 	mla	r3, r3, r0, r2
 801a062:	b29b      	uxth	r3, r3
 801a064:	1c5a      	adds	r2, r3, #1
 801a066:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a06a:	787a      	ldrb	r2, [r7, #1]
 801a06c:	fb12 f200 	smulbb	r2, r2, r0
 801a070:	121b      	asrs	r3, r3, #8
 801a072:	703b      	strb	r3, [r7, #0]
 801a074:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a078:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a07c:	fb03 2301 	mla	r3, r3, r1, r2
 801a080:	b29b      	uxth	r3, r3
 801a082:	1c5a      	adds	r2, r3, #1
 801a084:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a088:	121b      	asrs	r3, r3, #8
 801a08a:	707b      	strb	r3, [r7, #1]
 801a08c:	78bb      	ldrb	r3, [r7, #2]
 801a08e:	fb13 f000 	smulbb	r0, r3, r0
 801a092:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a096:	fa1f fc8c 	uxth.w	ip, ip
 801a09a:	f10c 0301 	add.w	r3, ip, #1
 801a09e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a0a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a0a6:	f887 c002 	strb.w	ip, [r7, #2]
 801a0aa:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a0ac:	3703      	adds	r7, #3
 801a0ae:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801a0b0:	441a      	add	r2, r3
 801a0b2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a0b4:	441d      	add	r5, r3
 801a0b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a0b8:	9231      	str	r2, [sp, #196]	; 0xc4
 801a0ba:	3b01      	subs	r3, #1
 801a0bc:	931a      	str	r3, [sp, #104]	; 0x68
 801a0be:	e69c      	b.n	8019dfa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801a0c0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a0c2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801a0c4:	441c      	add	r4, r3
 801a0c6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a0c8:	441d      	add	r5, r3
 801a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0cc:	9431      	str	r4, [sp, #196]	; 0xc4
 801a0ce:	3b01      	subs	r3, #1
 801a0d0:	9309      	str	r3, [sp, #36]	; 0x24
 801a0d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a0d4:	3303      	adds	r3, #3
 801a0d6:	930c      	str	r3, [sp, #48]	; 0x30
 801a0d8:	e66f      	b.n	8019dba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a0da:	d026      	beq.n	801a12a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801a0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0de:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801a0e0:	3b01      	subs	r3, #1
 801a0e2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801a0e4:	fb00 4003 	mla	r0, r0, r3, r4
 801a0e8:	1400      	asrs	r0, r0, #16
 801a0ea:	f53f ae83 	bmi.w	8019df4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a0ee:	3901      	subs	r1, #1
 801a0f0:	4288      	cmp	r0, r1
 801a0f2:	f6bf ae7f 	bge.w	8019df4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a0f6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801a0f8:	fb01 5303 	mla	r3, r1, r3, r5
 801a0fc:	141b      	asrs	r3, r3, #16
 801a0fe:	f53f ae79 	bmi.w	8019df4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a102:	3a01      	subs	r2, #1
 801a104:	4293      	cmp	r3, r2
 801a106:	f6bf ae75 	bge.w	8019df4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a10c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801a110:	f103 0e03 	add.w	lr, r3, #3
 801a114:	f1bb 0f00 	cmp.w	fp, #0
 801a118:	dc71      	bgt.n	801a1fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a11c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a122:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a126:	4423      	add	r3, r4
 801a128:	930c      	str	r3, [sp, #48]	; 0x30
 801a12a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	f340 81b5 	ble.w	801a49c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801a132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a136:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a138:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a13c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a140:	eef0 6a48 	vmov.f32	s13, s16
 801a144:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a148:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a14c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a150:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801a154:	eef0 6a68 	vmov.f32	s13, s17
 801a158:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a15c:	ee16 5a90 	vmov	r5, s13
 801a160:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a164:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a168:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a16c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a170:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a174:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a178:	ee18 2a10 	vmov	r2, s16
 801a17c:	eeb0 8a47 	vmov.f32	s16, s14
 801a180:	fb92 f3f3 	sdiv	r3, r2, r3
 801a184:	ee18 2a90 	vmov	r2, s17
 801a188:	9333      	str	r3, [sp, #204]	; 0xcc
 801a18a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a18c:	eef0 8a67 	vmov.f32	s17, s15
 801a190:	fb92 f3f3 	sdiv	r3, r2, r3
 801a194:	9334      	str	r3, [sp, #208]	; 0xd0
 801a196:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a198:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a19a:	3b01      	subs	r3, #1
 801a19c:	9319      	str	r3, [sp, #100]	; 0x64
 801a19e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a1a0:	bf08      	it	eq
 801a1a2:	4613      	moveq	r3, r2
 801a1a4:	9309      	str	r3, [sp, #36]	; 0x24
 801a1a6:	e5fa      	b.n	8019d9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a1a8:	2900      	cmp	r1, #0
 801a1aa:	f43f ae6c 	beq.w	8019e86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a1ae:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a1b2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a1b6:	900a      	str	r0, [sp, #40]	; 0x28
 801a1b8:	0e00      	lsrs	r0, r0, #24
 801a1ba:	9013      	str	r0, [sp, #76]	; 0x4c
 801a1bc:	e663      	b.n	8019e86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a1be:	f113 0801 	adds.w	r8, r3, #1
 801a1c2:	f53f af72 	bmi.w	801a0aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a1c6:	4540      	cmp	r0, r8
 801a1c8:	f6ff af6f 	blt.w	801a0aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a1cc:	f11c 0801 	adds.w	r8, ip, #1
 801a1d0:	f53f af6b 	bmi.w	801a0aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a1d4:	45c6      	cmp	lr, r8
 801a1d6:	f6ff af68 	blt.w	801a0aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a1da:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a1dc:	b200      	sxth	r0, r0
 801a1de:	9302      	str	r3, [sp, #8]
 801a1e0:	fa0f f38e 	sxth.w	r3, lr
 801a1e4:	9000      	str	r0, [sp, #0]
 801a1e6:	9301      	str	r3, [sp, #4]
 801a1e8:	4633      	mov	r3, r6
 801a1ea:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a1ec:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a1f0:	e9cd c203 	strd	ip, r2, [sp, #12]
 801a1f4:	4639      	mov	r1, r7
 801a1f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a1f8:	f7ff fc60 	bl	8019abc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801a1fc:	e755      	b.n	801a0aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a1fe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a200:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a204:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801a206:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a20a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801a20c:	1427      	asrs	r7, r4, #16
 801a20e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a210:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a214:	142b      	asrs	r3, r5, #16
 801a216:	fb01 7303 	mla	r3, r1, r3, r7
 801a21a:	18e7      	adds	r7, r4, r3
 801a21c:	5ce3      	ldrb	r3, [r4, r3]
 801a21e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a222:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a226:	2a00      	cmp	r2, #0
 801a228:	f000 812e 	beq.w	801a488 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 801a22c:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a230:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a234:	9410      	str	r4, [sp, #64]	; 0x40
 801a236:	0e24      	lsrs	r4, r4, #24
 801a238:	9417      	str	r4, [sp, #92]	; 0x5c
 801a23a:	b170      	cbz	r0, 801a25a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801a23c:	eb07 0801 	add.w	r8, r7, r1
 801a240:	5c79      	ldrb	r1, [r7, r1]
 801a242:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a246:	910b      	str	r1, [sp, #44]	; 0x2c
 801a248:	0e09      	lsrs	r1, r1, #24
 801a24a:	9114      	str	r1, [sp, #80]	; 0x50
 801a24c:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a250:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a254:	9111      	str	r1, [sp, #68]	; 0x44
 801a256:	0e09      	lsrs	r1, r1, #24
 801a258:	9118      	str	r1, [sp, #96]	; 0x60
 801a25a:	b292      	uxth	r2, r2
 801a25c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a25e:	b280      	uxth	r0, r0
 801a260:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a262:	fb02 f900 	mul.w	r9, r2, r0
 801a266:	0112      	lsls	r2, r2, #4
 801a268:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a26c:	eba2 0809 	sub.w	r8, r2, r9
 801a270:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a274:	b280      	uxth	r0, r0
 801a276:	fa1f f888 	uxth.w	r8, r8
 801a27a:	1a12      	subs	r2, r2, r0
 801a27c:	fb08 f101 	mul.w	r1, r8, r1
 801a280:	b292      	uxth	r2, r2
 801a282:	fb02 110c 	mla	r1, r2, ip, r1
 801a286:	fb00 1104 	mla	r1, r0, r4, r1
 801a28a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a28c:	fb09 1104 	mla	r1, r9, r4, r1
 801a290:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a294:	2900      	cmp	r1, #0
 801a296:	f000 80ec 	beq.w	801a472 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801a29a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a29e:	d019      	beq.n	801a2d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801a2a0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a2a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a2a8:	fb0c fa0a 	mul.w	sl, ip, sl
 801a2ac:	fb0c fc03 	mul.w	ip, ip, r3
 801a2b0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a2b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a2b8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a2bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a2c0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a2c4:	4453      	add	r3, sl
 801a2c6:	0a3f      	lsrs	r7, r7, #8
 801a2c8:	0a1b      	lsrs	r3, r3, #8
 801a2ca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a2ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a2d2:	433b      	orrs	r3, r7
 801a2d4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a2d6:	2cff      	cmp	r4, #255	; 0xff
 801a2d8:	d020      	beq.n	801a31c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 801a2da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a2dc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a2e0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a2e2:	4367      	muls	r7, r4
 801a2e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a2e6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a2ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a2ee:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a2f0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a2f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a2f8:	fb04 fa0a 	mul.w	sl, r4, sl
 801a2fc:	44bc      	add	ip, r7
 801a2fe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a302:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a306:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a30a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a30e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a312:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a316:	ea4c 040a 	orr.w	r4, ip, sl
 801a31a:	9410      	str	r4, [sp, #64]	; 0x40
 801a31c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a31e:	2cff      	cmp	r4, #255	; 0xff
 801a320:	d020      	beq.n	801a364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 801a322:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a324:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a328:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a32a:	4367      	muls	r7, r4
 801a32c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a32e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a332:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a336:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a338:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a33c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a340:	fb04 fa0a 	mul.w	sl, r4, sl
 801a344:	44bc      	add	ip, r7
 801a346:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a34a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a34e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a352:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a356:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a35a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a35e:	ea4c 040a 	orr.w	r4, ip, sl
 801a362:	940b      	str	r4, [sp, #44]	; 0x2c
 801a364:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a366:	2cff      	cmp	r4, #255	; 0xff
 801a368:	d020      	beq.n	801a3ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801a36a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a36c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a370:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a372:	4367      	muls	r7, r4
 801a374:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a376:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a37a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a37e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a380:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a384:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a388:	fb04 fa0a 	mul.w	sl, r4, sl
 801a38c:	44bc      	add	ip, r7
 801a38e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a392:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a396:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a39a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a39e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a3a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a3a6:	ea4c 040a 	orr.w	r4, ip, sl
 801a3aa:	9411      	str	r4, [sp, #68]	; 0x44
 801a3ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a3ae:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a3b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a3b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a3ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a3bc:	fb08 f707 	mul.w	r7, r8, r7
 801a3c0:	fb02 770c 	mla	r7, r2, ip, r7
 801a3c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a3c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a3ca:	fb00 770c 	mla	r7, r0, ip, r7
 801a3ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a3d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a3d4:	fb09 770c 	mla	r7, r9, ip, r7
 801a3d8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a3dc:	fb08 f80c 	mul.w	r8, r8, ip
 801a3e0:	0a3f      	lsrs	r7, r7, #8
 801a3e2:	fb02 8303 	mla	r3, r2, r3, r8
 801a3e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a3e8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a3ec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a3f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a3f2:	fb00 330a 	mla	r3, r0, sl, r3
 801a3f6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a3fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a3fc:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a402:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a406:	434b      	muls	r3, r1
 801a408:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a40c:	1c59      	adds	r1, r3, #1
 801a40e:	ea47 070c 	orr.w	r7, r7, ip
 801a412:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a416:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a41a:	b2fa      	uxtb	r2, r7
 801a41c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a420:	fb12 f200 	smulbb	r2, r2, r0
 801a424:	b2c9      	uxtb	r1, r1
 801a426:	fb03 2301 	mla	r3, r3, r1, r2
 801a42a:	b29b      	uxth	r3, r3
 801a42c:	1c5a      	adds	r2, r3, #1
 801a42e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a432:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a436:	fb12 f201 	smulbb	r2, r2, r1
 801a43a:	121b      	asrs	r3, r3, #8
 801a43c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a440:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a444:	0c3f      	lsrs	r7, r7, #16
 801a446:	fb03 2300 	mla	r3, r3, r0, r2
 801a44a:	b29b      	uxth	r3, r3
 801a44c:	1c5a      	adds	r2, r3, #1
 801a44e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a452:	121b      	asrs	r3, r3, #8
 801a454:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a458:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a45c:	fb13 f101 	smulbb	r1, r3, r1
 801a460:	fb07 1700 	mla	r7, r7, r0, r1
 801a464:	b2bf      	uxth	r7, r7
 801a466:	1c7b      	adds	r3, r7, #1
 801a468:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801a46c:	123f      	asrs	r7, r7, #8
 801a46e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a472:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a474:	f10e 0e03 	add.w	lr, lr, #3
 801a478:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801a47a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a47e:	441a      	add	r2, r3
 801a480:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a482:	9231      	str	r2, [sp, #196]	; 0xc4
 801a484:	441d      	add	r5, r3
 801a486:	e645      	b.n	801a114 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 801a488:	2800      	cmp	r0, #0
 801a48a:	f43f aee6 	beq.w	801a25a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801a48e:	5c79      	ldrb	r1, [r7, r1]
 801a490:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a494:	910b      	str	r1, [sp, #44]	; 0x2c
 801a496:	0e09      	lsrs	r1, r1, #24
 801a498:	9114      	str	r1, [sp, #80]	; 0x50
 801a49a:	e6de      	b.n	801a25a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801a49c:	b01f      	add	sp, #124	; 0x7c
 801a49e:	ecbd 8b08 	vpop	{d8-d11}
 801a4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a4a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801a4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4ac:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801a4b0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801a4b4:	2c00      	cmp	r4, #0
 801a4b6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801a4ba:	fb04 060c 	mla	r6, r4, ip, r0
 801a4be:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801a4c2:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801a4c6:	eb02 0e06 	add.w	lr, r2, r6
 801a4ca:	db3d      	blt.n	801a548 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801a4cc:	45a0      	cmp	r8, r4
 801a4ce:	dd3b      	ble.n	801a548 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801a4d0:	2800      	cmp	r0, #0
 801a4d2:	db37      	blt.n	801a544 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a4d4:	4584      	cmp	ip, r0
 801a4d6:	dd35      	ble.n	801a544 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a4d8:	5d92      	ldrb	r2, [r2, r6]
 801a4da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a4de:	1c46      	adds	r6, r0, #1
 801a4e0:	d435      	bmi.n	801a54e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801a4e2:	45b4      	cmp	ip, r6
 801a4e4:	dd33      	ble.n	801a54e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801a4e6:	b3a5      	cbz	r5, 801a552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 801a4e8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801a4ec:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801a4f0:	3401      	adds	r4, #1
 801a4f2:	d432      	bmi.n	801a55a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801a4f4:	45a0      	cmp	r8, r4
 801a4f6:	dd30      	ble.n	801a55a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801a4f8:	b397      	cbz	r7, 801a560 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	db2b      	blt.n	801a556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801a4fe:	4584      	cmp	ip, r0
 801a500:	dd29      	ble.n	801a556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801a502:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801a506:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801a50a:	3001      	adds	r0, #1
 801a50c:	d42b      	bmi.n	801a566 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801a50e:	4584      	cmp	ip, r0
 801a510:	dd29      	ble.n	801a566 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801a512:	b355      	cbz	r5, 801a56a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 801a514:	44f4      	add	ip, lr
 801a516:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801a51a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a51e:	2d0f      	cmp	r5, #15
 801a520:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a524:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a528:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a52c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801a530:	d801      	bhi.n	801a536 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 801a532:	2f0f      	cmp	r7, #15
 801a534:	d91b      	bls.n	801a56e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 801a536:	4b7f      	ldr	r3, [pc, #508]	; (801a734 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801a538:	f240 1157 	movw	r1, #343	; 0x157
 801a53c:	4a7e      	ldr	r2, [pc, #504]	; (801a738 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801a53e:	487f      	ldr	r0, [pc, #508]	; (801a73c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801a540:	f003 fc38 	bl	801ddb4 <__assert_func>
 801a544:	2200      	movs	r2, #0
 801a546:	e7ca      	b.n	801a4de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 801a548:	2600      	movs	r6, #0
 801a54a:	4632      	mov	r2, r6
 801a54c:	e7d0      	b.n	801a4f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801a54e:	2600      	movs	r6, #0
 801a550:	e7ce      	b.n	801a4f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801a552:	462e      	mov	r6, r5
 801a554:	e7cc      	b.n	801a4f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801a556:	2400      	movs	r4, #0
 801a558:	e7d7      	b.n	801a50a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 801a55a:	2300      	movs	r3, #0
 801a55c:	461c      	mov	r4, r3
 801a55e:	e7de      	b.n	801a51e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a560:	463b      	mov	r3, r7
 801a562:	463c      	mov	r4, r7
 801a564:	e7db      	b.n	801a51e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a566:	2300      	movs	r3, #0
 801a568:	e7d9      	b.n	801a51e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a56a:	462b      	mov	r3, r5
 801a56c:	e7d7      	b.n	801a51e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a56e:	b2a8      	uxth	r0, r5
 801a570:	b2bf      	uxth	r7, r7
 801a572:	fb07 fe00 	mul.w	lr, r7, r0
 801a576:	0100      	lsls	r0, r0, #4
 801a578:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a57c:	eba0 0c0e 	sub.w	ip, r0, lr
 801a580:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801a584:	b2bf      	uxth	r7, r7
 801a586:	fa1f fc8c 	uxth.w	ip, ip
 801a58a:	1bc5      	subs	r5, r0, r7
 801a58c:	fb0c f00a 	mul.w	r0, ip, sl
 801a590:	b2ad      	uxth	r5, r5
 801a592:	fb05 000b 	mla	r0, r5, fp, r0
 801a596:	fb07 0009 	mla	r0, r7, r9, r0
 801a59a:	fb0e 0008 	mla	r0, lr, r8, r0
 801a59e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a5a2:	9001      	str	r0, [sp, #4]
 801a5a4:	2800      	cmp	r0, #0
 801a5a6:	f000 80c2 	beq.w	801a72e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 801a5aa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a5ae:	d018      	beq.n	801a5e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801a5b0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801a5b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a5b8:	fb0b f000 	mul.w	r0, fp, r0
 801a5bc:	fb0b fb02 	mul.w	fp, fp, r2
 801a5c0:	0a02      	lsrs	r2, r0, #8
 801a5c2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a5c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a5ca:	4402      	add	r2, r0
 801a5cc:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801a5d0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a5d4:	0a12      	lsrs	r2, r2, #8
 801a5d6:	0a00      	lsrs	r0, r0, #8
 801a5d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a5dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a5e0:	4302      	orrs	r2, r0
 801a5e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a5e6:	d01a      	beq.n	801a61e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 801a5e8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a5ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a5f0:	fb0a f000 	mul.w	r0, sl, r0
 801a5f4:	fb0a fa06 	mul.w	sl, sl, r6
 801a5f8:	0a06      	lsrs	r6, r0, #8
 801a5fa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a5fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a602:	4406      	add	r6, r0
 801a604:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a608:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a60c:	0a36      	lsrs	r6, r6, #8
 801a60e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a612:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a616:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a61a:	ea46 060a 	orr.w	r6, r6, sl
 801a61e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a622:	d01b      	beq.n	801a65c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 801a624:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a628:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a62c:	fb09 fa0a 	mul.w	sl, r9, sl
 801a630:	fb09 f004 	mul.w	r0, r9, r4
 801a634:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a638:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a63c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801a640:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a644:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801a648:	4454      	add	r4, sl
 801a64a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a64e:	0a24      	lsrs	r4, r4, #8
 801a650:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a654:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a658:	ea44 0409 	orr.w	r4, r4, r9
 801a65c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a660:	d01b      	beq.n	801a69a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801a662:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801a666:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a66a:	fb08 f909 	mul.w	r9, r8, r9
 801a66e:	fb08 f003 	mul.w	r0, r8, r3
 801a672:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a676:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a67a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801a67e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a682:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801a686:	444b      	add	r3, r9
 801a688:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a68c:	0a1b      	lsrs	r3, r3, #8
 801a68e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a692:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a696:	ea43 0308 	orr.w	r3, r3, r8
 801a69a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a69e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a6a2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801a6a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a6aa:	fb0c f000 	mul.w	r0, ip, r0
 801a6ae:	fb0c f606 	mul.w	r6, ip, r6
 801a6b2:	fb05 0808 	mla	r8, r5, r8, r0
 801a6b6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801a6ba:	fb05 6502 	mla	r5, r5, r2, r6
 801a6be:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a6c2:	fb07 8800 	mla	r8, r7, r0, r8
 801a6c6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801a6ca:	fb07 5704 	mla	r7, r7, r4, r5
 801a6ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a6d2:	fb0e 8000 	mla	r0, lr, r0, r8
 801a6d6:	780a      	ldrb	r2, [r1, #0]
 801a6d8:	fb0e 7e03 	mla	lr, lr, r3, r7
 801a6dc:	9b01      	ldr	r3, [sp, #4]
 801a6de:	0a00      	lsrs	r0, r0, #8
 801a6e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a6e4:	43db      	mvns	r3, r3
 801a6e6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a6ea:	b2db      	uxtb	r3, r3
 801a6ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a6f0:	ea40 0e0e 	orr.w	lr, r0, lr
 801a6f4:	fb02 f003 	mul.w	r0, r2, r3
 801a6f8:	1c42      	adds	r2, r0, #1
 801a6fa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a6fe:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801a702:	700a      	strb	r2, [r1, #0]
 801a704:	784a      	ldrb	r2, [r1, #1]
 801a706:	435a      	muls	r2, r3
 801a708:	1c50      	adds	r0, r2, #1
 801a70a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a70e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801a712:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a716:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a71a:	704a      	strb	r2, [r1, #1]
 801a71c:	788a      	ldrb	r2, [r1, #2]
 801a71e:	4353      	muls	r3, r2
 801a720:	1c5a      	adds	r2, r3, #1
 801a722:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a726:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a72a:	f881 e002 	strb.w	lr, [r1, #2]
 801a72e:	b003      	add	sp, #12
 801a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a734:	08021f95 	.word	0x08021f95
 801a738:	080224ff 	.word	0x080224ff
 801a73c:	0802205e 	.word	0x0802205e

0801a740 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a744:	ed2d 8b0a 	vpush	{d8-d12}
 801a748:	b09b      	sub	sp, #108	; 0x6c
 801a74a:	eeb0 aa40 	vmov.f32	s20, s0
 801a74e:	eef0 9a60 	vmov.f32	s19, s1
 801a752:	9218      	str	r2, [sp, #96]	; 0x60
 801a754:	eeb0 9a41 	vmov.f32	s18, s2
 801a758:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801a75a:	eeb0 8a62 	vmov.f32	s16, s5
 801a75e:	9019      	str	r0, [sp, #100]	; 0x64
 801a760:	eef0 8a43 	vmov.f32	s17, s6
 801a764:	6850      	ldr	r0, [r2, #4]
 801a766:	eeb0 ca44 	vmov.f32	s24, s8
 801a76a:	9116      	str	r1, [sp, #88]	; 0x58
 801a76c:	eef0 ba64 	vmov.f32	s23, s9
 801a770:	9307      	str	r3, [sp, #28]
 801a772:	eeb0 ba45 	vmov.f32	s22, s10
 801a776:	6812      	ldr	r2, [r2, #0]
 801a778:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801a77c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801a77e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801a782:	fb00 1303 	mla	r3, r0, r3, r1
 801a786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a78a:	18d3      	adds	r3, r2, r3
 801a78c:	930a      	str	r3, [sp, #40]	; 0x28
 801a78e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	930f      	str	r3, [sp, #60]	; 0x3c
 801a794:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a796:	685e      	ldr	r6, [r3, #4]
 801a798:	3604      	adds	r6, #4
 801a79a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	dc03      	bgt.n	801a7a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a7a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	f340 834f 	ble.w	801ae46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801a7a8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a7aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a7ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a7b2:	1e48      	subs	r0, r1, #1
 801a7b4:	1e57      	subs	r7, r2, #1
 801a7b6:	9b07      	ldr	r3, [sp, #28]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	f340 8178 	ble.w	801aaae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a7be:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801a7c0:	142b      	asrs	r3, r5, #16
 801a7c2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801a7c6:	d406      	bmi.n	801a7d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a7c8:	4584      	cmp	ip, r0
 801a7ca:	da04      	bge.n	801a7d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	db02      	blt.n	801a7d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a7d0:	42bb      	cmp	r3, r7
 801a7d2:	f2c0 816d 	blt.w	801aab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801a7d6:	f11c 0c01 	adds.w	ip, ip, #1
 801a7da:	f100 815b 	bmi.w	801aa94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a7de:	4561      	cmp	r1, ip
 801a7e0:	f2c0 8158 	blt.w	801aa94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a7e4:	3301      	adds	r3, #1
 801a7e6:	f100 8155 	bmi.w	801aa94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a7ea:	429a      	cmp	r2, r3
 801a7ec:	f2c0 8152 	blt.w	801aa94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a7f0:	9b07      	ldr	r3, [sp, #28]
 801a7f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a7f4:	9317      	str	r3, [sp, #92]	; 0x5c
 801a7f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	f340 8178 	ble.w	801aaee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801a7fe:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801a800:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801a804:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a808:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a80c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a80e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801a812:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801a814:	141b      	asrs	r3, r3, #16
 801a816:	f100 81ba 	bmi.w	801ab8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a81a:	f101 38ff 	add.w	r8, r1, #4294967295
 801a81e:	4543      	cmp	r3, r8
 801a820:	f280 81b5 	bge.w	801ab8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a824:	f1bc 0f00 	cmp.w	ip, #0
 801a828:	f2c0 81b1 	blt.w	801ab8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a82c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a830:	45c4      	cmp	ip, r8
 801a832:	f280 81ac 	bge.w	801ab8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a836:	b209      	sxth	r1, r1
 801a838:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a83a:	fb0c 3301 	mla	r3, ip, r1, r3
 801a83e:	eb04 0803 	add.w	r8, r4, r3
 801a842:	5ce3      	ldrb	r3, [r4, r3]
 801a844:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a848:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a84c:	2a00      	cmp	r2, #0
 801a84e:	f000 8193 	beq.w	801ab78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801a852:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a856:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801a85a:	940b      	str	r4, [sp, #44]	; 0x2c
 801a85c:	0e24      	lsrs	r4, r4, #24
 801a85e:	9412      	str	r4, [sp, #72]	; 0x48
 801a860:	b178      	cbz	r0, 801a882 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a862:	eb08 0c01 	add.w	ip, r8, r1
 801a866:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a86a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a86e:	9108      	str	r1, [sp, #32]
 801a870:	0e09      	lsrs	r1, r1, #24
 801a872:	9110      	str	r1, [sp, #64]	; 0x40
 801a874:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a878:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a87c:	910c      	str	r1, [sp, #48]	; 0x30
 801a87e:	0e09      	lsrs	r1, r1, #24
 801a880:	9113      	str	r1, [sp, #76]	; 0x4c
 801a882:	b292      	uxth	r2, r2
 801a884:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a886:	b280      	uxth	r0, r0
 801a888:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a88a:	fb02 f900 	mul.w	r9, r2, r0
 801a88e:	0112      	lsls	r2, r2, #4
 801a890:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a894:	eba2 0809 	sub.w	r8, r2, r9
 801a898:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a89c:	b280      	uxth	r0, r0
 801a89e:	fa1f f888 	uxth.w	r8, r8
 801a8a2:	1a12      	subs	r2, r2, r0
 801a8a4:	fb08 f101 	mul.w	r1, r8, r1
 801a8a8:	b292      	uxth	r2, r2
 801a8aa:	fb02 110e 	mla	r1, r2, lr, r1
 801a8ae:	fb00 1104 	mla	r1, r0, r4, r1
 801a8b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a8b4:	fb09 1104 	mla	r1, r9, r4, r1
 801a8b8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a8bc:	2900      	cmp	r1, #0
 801a8be:	f000 80de 	beq.w	801aa7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a8c2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a8c6:	d01b      	beq.n	801a900 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801a8c8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a8cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a8d0:	fb0e fa0a 	mul.w	sl, lr, sl
 801a8d4:	fb0e fe03 	mul.w	lr, lr, r3
 801a8d8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a8dc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a8e0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a8e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a8e8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a8ec:	4453      	add	r3, sl
 801a8ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a8f2:	0a1b      	lsrs	r3, r3, #8
 801a8f4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a8f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a8fc:	ea43 030c 	orr.w	r3, r3, ip
 801a900:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a902:	2cff      	cmp	r4, #255	; 0xff
 801a904:	d021      	beq.n	801a94a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801a906:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a908:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a90c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a90e:	fb04 fb0b 	mul.w	fp, r4, fp
 801a912:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a914:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a918:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a91a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a91e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a922:	fb04 fa0a 	mul.w	sl, r4, sl
 801a926:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a92a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a92e:	44de      	add	lr, fp
 801a930:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a934:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a938:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a93c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a940:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a944:	ea4e 040a 	orr.w	r4, lr, sl
 801a948:	940b      	str	r4, [sp, #44]	; 0x2c
 801a94a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a94c:	2cff      	cmp	r4, #255	; 0xff
 801a94e:	d021      	beq.n	801a994 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a950:	9c08      	ldr	r4, [sp, #32]
 801a952:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a956:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a958:	fb04 fb0b 	mul.w	fp, r4, fp
 801a95c:	9c08      	ldr	r4, [sp, #32]
 801a95e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a962:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a964:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a968:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a96c:	fb04 fa0a 	mul.w	sl, r4, sl
 801a970:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a974:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a978:	44de      	add	lr, fp
 801a97a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a97e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a982:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a986:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a98a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a98e:	ea4e 040a 	orr.w	r4, lr, sl
 801a992:	9408      	str	r4, [sp, #32]
 801a994:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a996:	2cff      	cmp	r4, #255	; 0xff
 801a998:	d021      	beq.n	801a9de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a99a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a99c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a9a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a9a2:	fb04 fb0b 	mul.w	fp, r4, fp
 801a9a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a9a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a9ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a9ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a9b2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a9b6:	fb04 fa0a 	mul.w	sl, r4, sl
 801a9ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a9be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a9c2:	44de      	add	lr, fp
 801a9c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a9c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a9cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a9d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a9d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a9d8:	ea4e 040a 	orr.w	r4, lr, sl
 801a9dc:	940c      	str	r4, [sp, #48]	; 0x30
 801a9de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a9e0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a9e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a9e8:	43c9      	mvns	r1, r1
 801a9ea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a9ee:	9c08      	ldr	r4, [sp, #32]
 801a9f0:	b2c9      	uxtb	r1, r1
 801a9f2:	fb08 fc0c 	mul.w	ip, r8, ip
 801a9f6:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a9fa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a9fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801aa00:	fb00 cc0e 	mla	ip, r0, lr, ip
 801aa04:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801aa08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801aa0a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801aa0e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801aa12:	fb08 f80e 	mul.w	r8, r8, lr
 801aa16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aa1a:	fb02 8303 	mla	r3, r2, r3, r8
 801aa1e:	9a08      	ldr	r2, [sp, #32]
 801aa20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aa24:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801aa28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa2a:	fb00 330a 	mla	r3, r0, sl, r3
 801aa2e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801aa32:	fb09 3900 	mla	r9, r9, r0, r3
 801aa36:	783b      	ldrb	r3, [r7, #0]
 801aa38:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801aa3c:	fb03 f201 	mul.w	r2, r3, r1
 801aa40:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801aa44:	1c53      	adds	r3, r2, #1
 801aa46:	ea4c 0c09 	orr.w	ip, ip, r9
 801aa4a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801aa4e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801aa52:	703b      	strb	r3, [r7, #0]
 801aa54:	787b      	ldrb	r3, [r7, #1]
 801aa56:	434b      	muls	r3, r1
 801aa58:	1c5a      	adds	r2, r3, #1
 801aa5a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801aa5e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801aa62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801aa66:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801aa6a:	707b      	strb	r3, [r7, #1]
 801aa6c:	78bb      	ldrb	r3, [r7, #2]
 801aa6e:	4359      	muls	r1, r3
 801aa70:	1c4b      	adds	r3, r1, #1
 801aa72:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801aa76:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801aa7a:	f887 c002 	strb.w	ip, [r7, #2]
 801aa7e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801aa80:	3703      	adds	r7, #3
 801aa82:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801aa84:	441a      	add	r2, r3
 801aa86:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa88:	441d      	add	r5, r3
 801aa8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa8c:	922f      	str	r2, [sp, #188]	; 0xbc
 801aa8e:	3b01      	subs	r3, #1
 801aa90:	9317      	str	r3, [sp, #92]	; 0x5c
 801aa92:	e6b0      	b.n	801a7f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801aa94:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801aa96:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801aa98:	441c      	add	r4, r3
 801aa9a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa9c:	441d      	add	r5, r3
 801aa9e:	9b07      	ldr	r3, [sp, #28]
 801aaa0:	942f      	str	r4, [sp, #188]	; 0xbc
 801aaa2:	3b01      	subs	r3, #1
 801aaa4:	9307      	str	r3, [sp, #28]
 801aaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaa8:	3303      	adds	r3, #3
 801aaaa:	930a      	str	r3, [sp, #40]	; 0x28
 801aaac:	e683      	b.n	801a7b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801aaae:	d026      	beq.n	801aafe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801aab0:	9b07      	ldr	r3, [sp, #28]
 801aab2:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801aab4:	3b01      	subs	r3, #1
 801aab6:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801aab8:	fb00 4003 	mla	r0, r0, r3, r4
 801aabc:	1400      	asrs	r0, r0, #16
 801aabe:	f53f ae97 	bmi.w	801a7f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aac2:	3901      	subs	r1, #1
 801aac4:	4288      	cmp	r0, r1
 801aac6:	f6bf ae93 	bge.w	801a7f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aaca:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801aacc:	fb01 5303 	mla	r3, r1, r3, r5
 801aad0:	141b      	asrs	r3, r3, #16
 801aad2:	f53f ae8d 	bmi.w	801a7f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aad6:	3a01      	subs	r2, #1
 801aad8:	4293      	cmp	r3, r2
 801aada:	f6bf ae89 	bge.w	801a7f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aae0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801aae4:	f103 0e03 	add.w	lr, r3, #3
 801aae8:	f1bb 0f00 	cmp.w	fp, #0
 801aaec:	dc6d      	bgt.n	801abca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 801aaee:	9b07      	ldr	r3, [sp, #28]
 801aaf0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801aaf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaf6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aafa:	4423      	add	r3, r4
 801aafc:	930a      	str	r3, [sp, #40]	; 0x28
 801aafe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	f340 81a0 	ble.w	801ae46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801ab06:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801ab0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ab0c:	ee79 9aab 	vadd.f32	s19, s19, s23
 801ab10:	eef0 6a48 	vmov.f32	s13, s16
 801ab14:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801ab18:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801ab1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ab20:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 801ab24:	eef0 6a68 	vmov.f32	s13, s17
 801ab28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ab2c:	ee16 5a90 	vmov	r5, s13
 801ab30:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ab34:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ab38:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ab3c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ab40:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ab44:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ab48:	ee18 2a10 	vmov	r2, s16
 801ab4c:	eeb0 8a47 	vmov.f32	s16, s14
 801ab50:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab54:	ee18 2a90 	vmov	r2, s17
 801ab58:	9331      	str	r3, [sp, #196]	; 0xc4
 801ab5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ab5c:	eef0 8a67 	vmov.f32	s17, s15
 801ab60:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab64:	9332      	str	r3, [sp, #200]	; 0xc8
 801ab66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ab68:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ab6a:	3b01      	subs	r3, #1
 801ab6c:	9316      	str	r3, [sp, #88]	; 0x58
 801ab6e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ab70:	bf08      	it	eq
 801ab72:	4613      	moveq	r3, r2
 801ab74:	9307      	str	r3, [sp, #28]
 801ab76:	e610      	b.n	801a79a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ab78:	2800      	cmp	r0, #0
 801ab7a:	f43f ae82 	beq.w	801a882 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ab7e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ab82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ab86:	9108      	str	r1, [sp, #32]
 801ab88:	0e09      	lsrs	r1, r1, #24
 801ab8a:	9110      	str	r1, [sp, #64]	; 0x40
 801ab8c:	e679      	b.n	801a882 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ab8e:	f113 0801 	adds.w	r8, r3, #1
 801ab92:	f53f af74 	bmi.w	801aa7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ab96:	4541      	cmp	r1, r8
 801ab98:	f6ff af71 	blt.w	801aa7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ab9c:	f11c 0801 	adds.w	r8, ip, #1
 801aba0:	f53f af6d 	bmi.w	801aa7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801aba4:	45c6      	cmp	lr, r8
 801aba6:	f6ff af6a 	blt.w	801aa7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801abaa:	b209      	sxth	r1, r1
 801abac:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801abb0:	fa0f f38e 	sxth.w	r3, lr
 801abb4:	9100      	str	r1, [sp, #0]
 801abb6:	4639      	mov	r1, r7
 801abb8:	9301      	str	r3, [sp, #4]
 801abba:	4633      	mov	r3, r6
 801abbc:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801abc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801abc2:	9819      	ldr	r0, [sp, #100]	; 0x64
 801abc4:	f7ff fc70 	bl	801a4a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801abc8:	e759      	b.n	801aa7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801abca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801abcc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801abd0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801abd2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801abd6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801abd8:	1427      	asrs	r7, r4, #16
 801abda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801abdc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801abe0:	142b      	asrs	r3, r5, #16
 801abe2:	fb01 7303 	mla	r3, r1, r3, r7
 801abe6:	18e7      	adds	r7, r4, r3
 801abe8:	5ce3      	ldrb	r3, [r4, r3]
 801abea:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801abee:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801abf2:	2a00      	cmp	r2, #0
 801abf4:	f000 811d 	beq.w	801ae32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801abf8:	f897 8001 	ldrb.w	r8, [r7, #1]
 801abfc:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801ac00:	940d      	str	r4, [sp, #52]	; 0x34
 801ac02:	0e24      	lsrs	r4, r4, #24
 801ac04:	9414      	str	r4, [sp, #80]	; 0x50
 801ac06:	b170      	cbz	r0, 801ac26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ac08:	eb07 0801 	add.w	r8, r7, r1
 801ac0c:	5c79      	ldrb	r1, [r7, r1]
 801ac0e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ac12:	9109      	str	r1, [sp, #36]	; 0x24
 801ac14:	0e09      	lsrs	r1, r1, #24
 801ac16:	9111      	str	r1, [sp, #68]	; 0x44
 801ac18:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ac1c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ac20:	910e      	str	r1, [sp, #56]	; 0x38
 801ac22:	0e09      	lsrs	r1, r1, #24
 801ac24:	9115      	str	r1, [sp, #84]	; 0x54
 801ac26:	b292      	uxth	r2, r2
 801ac28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ac2a:	b280      	uxth	r0, r0
 801ac2c:	fb02 f900 	mul.w	r9, r2, r0
 801ac30:	0112      	lsls	r2, r2, #4
 801ac32:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ac36:	eba2 0809 	sub.w	r8, r2, r9
 801ac3a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ac3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac40:	b280      	uxth	r0, r0
 801ac42:	fa1f f888 	uxth.w	r8, r8
 801ac46:	1a09      	subs	r1, r1, r0
 801ac48:	fb08 f202 	mul.w	r2, r8, r2
 801ac4c:	b289      	uxth	r1, r1
 801ac4e:	fb01 220c 	mla	r2, r1, ip, r2
 801ac52:	fb00 2204 	mla	r2, r0, r4, r2
 801ac56:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ac58:	fb09 2204 	mla	r2, r9, r4, r2
 801ac5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ac60:	2a00      	cmp	r2, #0
 801ac62:	f000 80db 	beq.w	801ae1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 801ac66:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ac6a:	d019      	beq.n	801aca0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 801ac6c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ac70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ac74:	fb0c fa0a 	mul.w	sl, ip, sl
 801ac78:	fb0c fc03 	mul.w	ip, ip, r3
 801ac7c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ac80:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ac84:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ac88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ac8c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ac90:	4453      	add	r3, sl
 801ac92:	0a3f      	lsrs	r7, r7, #8
 801ac94:	0a1b      	lsrs	r3, r3, #8
 801ac96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ac9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ac9e:	433b      	orrs	r3, r7
 801aca0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aca2:	2cff      	cmp	r4, #255	; 0xff
 801aca4:	d020      	beq.n	801ace8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 801aca6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801aca8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801acac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801acae:	4367      	muls	r7, r4
 801acb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801acb2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801acb6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801acba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801acbc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801acc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801acc4:	fb04 fa0a 	mul.w	sl, r4, sl
 801acc8:	44bc      	add	ip, r7
 801acca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801acce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801acd2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801acd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801acda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801acde:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ace2:	ea4c 040a 	orr.w	r4, ip, sl
 801ace6:	940d      	str	r4, [sp, #52]	; 0x34
 801ace8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801acea:	2cff      	cmp	r4, #255	; 0xff
 801acec:	d020      	beq.n	801ad30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 801acee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801acf0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801acf4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801acf6:	4367      	muls	r7, r4
 801acf8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801acfa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801acfe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ad02:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ad04:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ad08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad0c:	fb04 fa0a 	mul.w	sl, r4, sl
 801ad10:	44bc      	add	ip, r7
 801ad12:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ad16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ad1a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ad1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ad26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ad2a:	ea4c 040a 	orr.w	r4, ip, sl
 801ad2e:	9409      	str	r4, [sp, #36]	; 0x24
 801ad30:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad32:	2cff      	cmp	r4, #255	; 0xff
 801ad34:	d020      	beq.n	801ad78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 801ad36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad38:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ad3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad3e:	4367      	muls	r7, r4
 801ad40:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad42:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ad46:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ad4a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad4c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ad50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad54:	fb04 fa0a 	mul.w	sl, r4, sl
 801ad58:	44bc      	add	ip, r7
 801ad5a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ad5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ad62:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ad66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ad6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ad72:	ea4c 040a 	orr.w	r4, ip, sl
 801ad76:	940e      	str	r4, [sp, #56]	; 0x38
 801ad78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ad7a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ad7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ad82:	43d2      	mvns	r2, r2
 801ad84:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ad88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ad8a:	b2d2      	uxtb	r2, r2
 801ad8c:	fb08 f707 	mul.w	r7, r8, r7
 801ad90:	fb01 770c 	mla	r7, r1, ip, r7
 801ad94:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ad98:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad9a:	fb00 770c 	mla	r7, r0, ip, r7
 801ad9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ada2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ada4:	fb09 770c 	mla	r7, r9, ip, r7
 801ada8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801adac:	fb08 f80c 	mul.w	r8, r8, ip
 801adb0:	0a3f      	lsrs	r7, r7, #8
 801adb2:	fb01 8303 	mla	r3, r1, r3, r8
 801adb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801adb8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801adbc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801adc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801adc2:	fb00 330a 	mla	r3, r0, sl, r3
 801adc6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801adca:	fb09 3c0c 	mla	ip, r9, ip, r3
 801adce:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801add2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801add6:	fb03 f102 	mul.w	r1, r3, r2
 801adda:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801adde:	1c4b      	adds	r3, r1, #1
 801ade0:	ea47 070c 	orr.w	r7, r7, ip
 801ade4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ade8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801adec:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801adf0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801adf4:	4353      	muls	r3, r2
 801adf6:	1c59      	adds	r1, r3, #1
 801adf8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801adfc:	0a3b      	lsrs	r3, r7, #8
 801adfe:	0c3f      	lsrs	r7, r7, #16
 801ae00:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ae04:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ae08:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ae0c:	435a      	muls	r2, r3
 801ae0e:	1c53      	adds	r3, r2, #1
 801ae10:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ae14:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ae18:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ae1c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801ae1e:	f10e 0e03 	add.w	lr, lr, #3
 801ae22:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ae24:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ae28:	441a      	add	r2, r3
 801ae2a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ae2c:	922f      	str	r2, [sp, #188]	; 0xbc
 801ae2e:	441d      	add	r5, r3
 801ae30:	e65a      	b.n	801aae8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801ae32:	2800      	cmp	r0, #0
 801ae34:	f43f aef7 	beq.w	801ac26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ae38:	5c79      	ldrb	r1, [r7, r1]
 801ae3a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ae3e:	9109      	str	r1, [sp, #36]	; 0x24
 801ae40:	0e09      	lsrs	r1, r1, #24
 801ae42:	9111      	str	r1, [sp, #68]	; 0x44
 801ae44:	e6ef      	b.n	801ac26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ae46:	b01b      	add	sp, #108	; 0x6c
 801ae48:	ecbd 8b0a 	vpop	{d8-d12}
 801ae4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae54:	b08d      	sub	sp, #52	; 0x34
 801ae56:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801ae5a:	9103      	str	r1, [sp, #12]
 801ae5c:	fb07 5803 	mla	r8, r7, r3, r5
 801ae60:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801ae64:	9803      	ldr	r0, [sp, #12]
 801ae66:	2f00      	cmp	r7, #0
 801ae68:	910b      	str	r1, [sp, #44]	; 0x2c
 801ae6a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ae6e:	9903      	ldr	r1, [sp, #12]
 801ae70:	9c03      	ldr	r4, [sp, #12]
 801ae72:	eb02 0608 	add.w	r6, r2, r8
 801ae76:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ae7a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801ae7e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801ae82:	7809      	ldrb	r1, [r1, #0]
 801ae84:	7840      	ldrb	r0, [r0, #1]
 801ae86:	78a4      	ldrb	r4, [r4, #2]
 801ae88:	db51      	blt.n	801af2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ae8a:	45be      	cmp	lr, r7
 801ae8c:	dd4f      	ble.n	801af2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ae8e:	2d00      	cmp	r5, #0
 801ae90:	db49      	blt.n	801af26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ae92:	42ab      	cmp	r3, r5
 801ae94:	dd47      	ble.n	801af26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ae96:	f812 2008 	ldrb.w	r2, [r2, r8]
 801ae9a:	9204      	str	r2, [sp, #16]
 801ae9c:	7872      	ldrb	r2, [r6, #1]
 801ae9e:	9205      	str	r2, [sp, #20]
 801aea0:	78b2      	ldrb	r2, [r6, #2]
 801aea2:	9206      	str	r2, [sp, #24]
 801aea4:	1c6a      	adds	r2, r5, #1
 801aea6:	d449      	bmi.n	801af3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801aea8:	4293      	cmp	r3, r2
 801aeaa:	dd47      	ble.n	801af3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801aeac:	f1bc 0f00 	cmp.w	ip, #0
 801aeb0:	d044      	beq.n	801af3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801aeb2:	7972      	ldrb	r2, [r6, #5]
 801aeb4:	f896 b003 	ldrb.w	fp, [r6, #3]
 801aeb8:	f896 a004 	ldrb.w	sl, [r6, #4]
 801aebc:	9201      	str	r2, [sp, #4]
 801aebe:	3701      	adds	r7, #1
 801aec0:	d444      	bmi.n	801af4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801aec2:	45be      	cmp	lr, r7
 801aec4:	dd42      	ble.n	801af4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801aec6:	f1b9 0f00 	cmp.w	r9, #0
 801aeca:	f000 80c1 	beq.w	801b050 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801aece:	2d00      	cmp	r5, #0
 801aed0:	db38      	blt.n	801af44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801aed2:	42ab      	cmp	r3, r5
 801aed4:	dd36      	ble.n	801af44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801aed6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801aeda:	f816 8002 	ldrb.w	r8, [r6, r2]
 801aede:	2203      	movs	r2, #3
 801aee0:	fb03 6702 	mla	r7, r3, r2, r6
 801aee4:	fb03 6202 	mla	r2, r3, r2, r6
 801aee8:	787f      	ldrb	r7, [r7, #1]
 801aeea:	f892 e002 	ldrb.w	lr, [r2, #2]
 801aeee:	9702      	str	r7, [sp, #8]
 801aef0:	3501      	adds	r5, #1
 801aef2:	d432      	bmi.n	801af5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801aef4:	42ab      	cmp	r3, r5
 801aef6:	dd30      	ble.n	801af5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801aef8:	f1bc 0f00 	cmp.w	ip, #0
 801aefc:	d031      	beq.n	801af62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801aefe:	2703      	movs	r7, #3
 801af00:	fb13 7207 	smlabb	r2, r3, r7, r7
 801af04:	5cb5      	ldrb	r5, [r6, r2]
 801af06:	fb03 6207 	mla	r2, r3, r7, r6
 801af0a:	fb03 6307 	mla	r3, r3, r7, r6
 801af0e:	7912      	ldrb	r2, [r2, #4]
 801af10:	795e      	ldrb	r6, [r3, #5]
 801af12:	f1bc 0f0f 	cmp.w	ip, #15
 801af16:	d927      	bls.n	801af68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801af18:	4b53      	ldr	r3, [pc, #332]	; (801b068 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801af1a:	f240 1157 	movw	r1, #343	; 0x157
 801af1e:	4a53      	ldr	r2, [pc, #332]	; (801b06c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801af20:	4853      	ldr	r0, [pc, #332]	; (801b070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801af22:	f002 ff47 	bl	801ddb4 <__assert_func>
 801af26:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801af2a:	9104      	str	r1, [sp, #16]
 801af2c:	e7ba      	b.n	801aea4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801af2e:	9401      	str	r4, [sp, #4]
 801af30:	4682      	mov	sl, r0
 801af32:	468b      	mov	fp, r1
 801af34:	9104      	str	r1, [sp, #16]
 801af36:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801af3a:	e7c0      	b.n	801aebe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801af3c:	9401      	str	r4, [sp, #4]
 801af3e:	4682      	mov	sl, r0
 801af40:	468b      	mov	fp, r1
 801af42:	e7bc      	b.n	801aebe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801af44:	46a6      	mov	lr, r4
 801af46:	9002      	str	r0, [sp, #8]
 801af48:	4688      	mov	r8, r1
 801af4a:	e7d1      	b.n	801aef0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801af4c:	4626      	mov	r6, r4
 801af4e:	4602      	mov	r2, r0
 801af50:	460d      	mov	r5, r1
 801af52:	46a6      	mov	lr, r4
 801af54:	9002      	str	r0, [sp, #8]
 801af56:	4688      	mov	r8, r1
 801af58:	e7db      	b.n	801af12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801af5a:	4626      	mov	r6, r4
 801af5c:	4602      	mov	r2, r0
 801af5e:	460d      	mov	r5, r1
 801af60:	e7d7      	b.n	801af12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801af62:	4626      	mov	r6, r4
 801af64:	4602      	mov	r2, r0
 801af66:	460d      	mov	r5, r1
 801af68:	f1b9 0f0f 	cmp.w	r9, #15
 801af6c:	d8d4      	bhi.n	801af18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801af6e:	fa1f f38c 	uxth.w	r3, ip
 801af72:	fa1f fc89 	uxth.w	ip, r9
 801af76:	fb03 f70c 	mul.w	r7, r3, ip
 801af7a:	011b      	lsls	r3, r3, #4
 801af7c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801af80:	9707      	str	r7, [sp, #28]
 801af82:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801af86:	fa1f fc8c 	uxth.w	ip, ip
 801af8a:	eba7 070c 	sub.w	r7, r7, ip
 801af8e:	b2bf      	uxth	r7, r7
 801af90:	9709      	str	r7, [sp, #36]	; 0x24
 801af92:	9f07      	ldr	r7, [sp, #28]
 801af94:	1bdb      	subs	r3, r3, r7
 801af96:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801af9a:	b29b      	uxth	r3, r3
 801af9c:	9708      	str	r7, [sp, #32]
 801af9e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801afa0:	930a      	str	r3, [sp, #40]	; 0x28
 801afa2:	ea6f 0907 	mvn.w	r9, r7
 801afa6:	fb03 fb0b 	mul.w	fp, r3, fp
 801afaa:	9f04      	ldr	r7, [sp, #16]
 801afac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afae:	fa5f f989 	uxtb.w	r9, r9
 801afb2:	fb03 bb07 	mla	fp, r3, r7, fp
 801afb6:	9f07      	ldr	r7, [sp, #28]
 801afb8:	fb11 f109 	smulbb	r1, r1, r9
 801afbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afbe:	fb0c b808 	mla	r8, ip, r8, fp
 801afc2:	fb10 f009 	smulbb	r0, r0, r9
 801afc6:	fb14 f409 	smulbb	r4, r4, r9
 801afca:	fb07 8805 	mla	r8, r7, r5, r8
 801afce:	9d08      	ldr	r5, [sp, #32]
 801afd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801afd2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801afd6:	fb08 1805 	mla	r8, r8, r5, r1
 801afda:	9d05      	ldr	r5, [sp, #20]
 801afdc:	fa1f f888 	uxth.w	r8, r8
 801afe0:	f108 0101 	add.w	r1, r8, #1
 801afe4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801afe8:	9903      	ldr	r1, [sp, #12]
 801afea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801afee:	f881 8000 	strb.w	r8, [r1]
 801aff2:	fb03 f10a 	mul.w	r1, r3, sl
 801aff6:	fb07 1105 	mla	r1, r7, r5, r1
 801affa:	9d02      	ldr	r5, [sp, #8]
 801affc:	fb0c 1105 	mla	r1, ip, r5, r1
 801b000:	9d07      	ldr	r5, [sp, #28]
 801b002:	fb05 1102 	mla	r1, r5, r2, r1
 801b006:	9a08      	ldr	r2, [sp, #32]
 801b008:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b00c:	fb01 0102 	mla	r1, r1, r2, r0
 801b010:	9a03      	ldr	r2, [sp, #12]
 801b012:	b289      	uxth	r1, r1
 801b014:	1c48      	adds	r0, r1, #1
 801b016:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801b01a:	1209      	asrs	r1, r1, #8
 801b01c:	7051      	strb	r1, [r2, #1]
 801b01e:	9a01      	ldr	r2, [sp, #4]
 801b020:	4353      	muls	r3, r2
 801b022:	9a06      	ldr	r2, [sp, #24]
 801b024:	fb07 3702 	mla	r7, r7, r2, r3
 801b028:	9b08      	ldr	r3, [sp, #32]
 801b02a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801b02e:	fb05 c606 	mla	r6, r5, r6, ip
 801b032:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b036:	fb06 4603 	mla	r6, r6, r3, r4
 801b03a:	9b03      	ldr	r3, [sp, #12]
 801b03c:	b2b6      	uxth	r6, r6
 801b03e:	f106 0e01 	add.w	lr, r6, #1
 801b042:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801b046:	1236      	asrs	r6, r6, #8
 801b048:	709e      	strb	r6, [r3, #2]
 801b04a:	b00d      	add	sp, #52	; 0x34
 801b04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b050:	f1bc 0f0f 	cmp.w	ip, #15
 801b054:	f63f af60 	bhi.w	801af18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801b058:	4626      	mov	r6, r4
 801b05a:	4602      	mov	r2, r0
 801b05c:	460d      	mov	r5, r1
 801b05e:	46a6      	mov	lr, r4
 801b060:	9002      	str	r0, [sp, #8]
 801b062:	4688      	mov	r8, r1
 801b064:	e783      	b.n	801af6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801b066:	bf00      	nop
 801b068:	08021f95 	.word	0x08021f95
 801b06c:	080224ff 	.word	0x080224ff
 801b070:	0802205e 	.word	0x0802205e

0801b074 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b078:	ed2d 8b08 	vpush	{d8-d11}
 801b07c:	b09f      	sub	sp, #124	; 0x7c
 801b07e:	eeb0 aa40 	vmov.f32	s20, s0
 801b082:	eef0 9a60 	vmov.f32	s19, s1
 801b086:	920e      	str	r2, [sp, #56]	; 0x38
 801b088:	eeb0 9a41 	vmov.f32	s18, s2
 801b08c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801b08e:	eeb0 8a62 	vmov.f32	s16, s5
 801b092:	9307      	str	r3, [sp, #28]
 801b094:	eef0 8a43 	vmov.f32	s17, s6
 801b098:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801b09c:	eef0 ba44 	vmov.f32	s23, s8
 801b0a0:	901d      	str	r0, [sp, #116]	; 0x74
 801b0a2:	eeb0 ba64 	vmov.f32	s22, s9
 801b0a6:	930c      	str	r3, [sp, #48]	; 0x30
 801b0a8:	eef0 aa45 	vmov.f32	s21, s10
 801b0ac:	6850      	ldr	r0, [r2, #4]
 801b0ae:	910b      	str	r1, [sp, #44]	; 0x2c
 801b0b0:	6812      	ldr	r2, [r2, #0]
 801b0b2:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801b0b6:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 801b0ba:	fb00 1303 	mla	r3, r0, r3, r1
 801b0be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0c2:	18d3      	adds	r3, r2, r3
 801b0c4:	9308      	str	r3, [sp, #32]
 801b0c6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	930a      	str	r3, [sp, #40]	; 0x28
 801b0cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b0ce:	43db      	mvns	r3, r3
 801b0d0:	b2db      	uxtb	r3, r3
 801b0d2:	9309      	str	r3, [sp, #36]	; 0x24
 801b0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	dc03      	bgt.n	801b0e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	f340 81f5 	ble.w	801b4cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801b0e2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801b0e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b0e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b0ec:	1e48      	subs	r0, r1, #1
 801b0ee:	1e54      	subs	r4, r2, #1
 801b0f0:	9b07      	ldr	r3, [sp, #28]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	f340 80d5 	ble.w	801b2a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801b0f8:	ea5f 452a 	movs.w	r5, sl, asr #16
 801b0fc:	ea4f 4328 	mov.w	r3, r8, asr #16
 801b100:	d406      	bmi.n	801b110 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b102:	4285      	cmp	r5, r0
 801b104:	da04      	bge.n	801b110 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b106:	2b00      	cmp	r3, #0
 801b108:	db02      	blt.n	801b110 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b10a:	42a3      	cmp	r3, r4
 801b10c:	f2c0 80ca 	blt.w	801b2a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b110:	3501      	adds	r5, #1
 801b112:	f100 80bb 	bmi.w	801b28c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b116:	42a9      	cmp	r1, r5
 801b118:	f2c0 80b8 	blt.w	801b28c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b11c:	3301      	adds	r3, #1
 801b11e:	f100 80b5 	bmi.w	801b28c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b122:	429a      	cmp	r2, r3
 801b124:	f2c0 80b2 	blt.w	801b28c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b128:	9b07      	ldr	r3, [sp, #28]
 801b12a:	9d08      	ldr	r5, [sp, #32]
 801b12c:	930d      	str	r3, [sp, #52]	; 0x34
 801b12e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b130:	2b00      	cmp	r3, #0
 801b132:	f340 80d6 	ble.w	801b2e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801b136:	9838      	ldr	r0, [sp, #224]	; 0xe0
 801b138:	ea4f 4428 	mov.w	r4, r8, asr #16
 801b13c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801b13e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801b142:	68c6      	ldr	r6, [r0, #12]
 801b144:	ea5f 402a 	movs.w	r0, sl, asr #16
 801b148:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801b14c:	689b      	ldr	r3, [r3, #8]
 801b14e:	f100 810f 	bmi.w	801b370 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b152:	1e5f      	subs	r7, r3, #1
 801b154:	42b8      	cmp	r0, r7
 801b156:	f280 810b 	bge.w	801b370 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b15a:	2c00      	cmp	r4, #0
 801b15c:	f2c0 8108 	blt.w	801b370 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b160:	1e77      	subs	r7, r6, #1
 801b162:	42bc      	cmp	r4, r7
 801b164:	f280 8104 	bge.w	801b370 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b168:	b21b      	sxth	r3, r3
 801b16a:	fb04 0003 	mla	r0, r4, r3, r0
 801b16e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b170:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b174:	1826      	adds	r6, r4, r0
 801b176:	5c24      	ldrb	r4, [r4, r0]
 801b178:	78b7      	ldrb	r7, [r6, #2]
 801b17a:	7870      	ldrb	r0, [r6, #1]
 801b17c:	970f      	str	r7, [sp, #60]	; 0x3c
 801b17e:	7977      	ldrb	r7, [r6, #5]
 801b180:	f896 e003 	ldrb.w	lr, [r6, #3]
 801b184:	f896 c004 	ldrb.w	ip, [r6, #4]
 801b188:	9710      	str	r7, [sp, #64]	; 0x40
 801b18a:	b1c9      	cbz	r1, 801b1c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b18c:	f04f 0b03 	mov.w	fp, #3
 801b190:	f06f 0904 	mvn.w	r9, #4
 801b194:	3605      	adds	r6, #5
 801b196:	fb13 930b 	smlabb	r3, r3, fp, r9
 801b19a:	eb06 0b03 	add.w	fp, r6, r3
 801b19e:	5cf3      	ldrb	r3, [r6, r3]
 801b1a0:	9311      	str	r3, [sp, #68]	; 0x44
 801b1a2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801b1a6:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1a8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801b1ac:	9315      	str	r3, [sp, #84]	; 0x54
 801b1ae:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801b1b2:	9312      	str	r3, [sp, #72]	; 0x48
 801b1b4:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801b1b8:	9314      	str	r3, [sp, #80]	; 0x50
 801b1ba:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801b1be:	9316      	str	r3, [sp, #88]	; 0x58
 801b1c0:	b292      	uxth	r2, r2
 801b1c2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b1c4:	b289      	uxth	r1, r1
 801b1c6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b1ca:	fb02 f601 	mul.w	r6, r2, r1
 801b1ce:	0112      	lsls	r2, r2, #4
 801b1d0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801b1d4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801b1d8:	1b92      	subs	r2, r2, r6
 801b1da:	b289      	uxth	r1, r1
 801b1dc:	b292      	uxth	r2, r2
 801b1de:	eba9 0901 	sub.w	r9, r9, r1
 801b1e2:	fb02 fe0e 	mul.w	lr, r2, lr
 801b1e6:	fa1f f989 	uxth.w	r9, r9
 801b1ea:	fb02 fc0c 	mul.w	ip, r2, ip
 801b1ee:	fb09 e404 	mla	r4, r9, r4, lr
 801b1f2:	f895 e000 	ldrb.w	lr, [r5]
 801b1f6:	fb09 c000 	mla	r0, r9, r0, ip
 801b1fa:	fb01 4407 	mla	r4, r1, r7, r4
 801b1fe:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801b200:	fb06 4407 	mla	r4, r6, r7, r4
 801b204:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b206:	fb1e fe07 	smulbb	lr, lr, r7
 801b20a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b20e:	fb04 e403 	mla	r4, r4, r3, lr
 801b212:	b2a4      	uxth	r4, r4
 801b214:	f104 0e01 	add.w	lr, r4, #1
 801b218:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801b21c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b21e:	fb01 0004 	mla	r0, r1, r4, r0
 801b222:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b224:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b228:	fb06 0004 	mla	r0, r6, r4, r0
 801b22c:	786c      	ldrb	r4, [r5, #1]
 801b22e:	f885 e000 	strb.w	lr, [r5]
 801b232:	fb14 f407 	smulbb	r4, r4, r7
 801b236:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b23a:	fb00 4003 	mla	r0, r0, r3, r4
 801b23e:	b280      	uxth	r0, r0
 801b240:	1c44      	adds	r4, r0, #1
 801b242:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801b246:	1200      	asrs	r0, r0, #8
 801b248:	7068      	strb	r0, [r5, #1]
 801b24a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b24c:	4342      	muls	r2, r0
 801b24e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b250:	fb09 2200 	mla	r2, r9, r0, r2
 801b254:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b256:	fb01 2100 	mla	r1, r1, r0, r2
 801b25a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b25c:	fb06 1602 	mla	r6, r6, r2, r1
 801b260:	78a9      	ldrb	r1, [r5, #2]
 801b262:	fb11 f107 	smulbb	r1, r1, r7
 801b266:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b26a:	fb06 1303 	mla	r3, r6, r3, r1
 801b26e:	b29b      	uxth	r3, r3
 801b270:	1c5e      	adds	r6, r3, #1
 801b272:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801b276:	121b      	asrs	r3, r3, #8
 801b278:	70ab      	strb	r3, [r5, #2]
 801b27a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b27c:	3503      	adds	r5, #3
 801b27e:	449a      	add	sl, r3
 801b280:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b282:	4498      	add	r8, r3
 801b284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b286:	3b01      	subs	r3, #1
 801b288:	930d      	str	r3, [sp, #52]	; 0x34
 801b28a:	e750      	b.n	801b12e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b28c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b28e:	449a      	add	sl, r3
 801b290:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b292:	4498      	add	r8, r3
 801b294:	9b07      	ldr	r3, [sp, #28]
 801b296:	3b01      	subs	r3, #1
 801b298:	9307      	str	r3, [sp, #28]
 801b29a:	9b08      	ldr	r3, [sp, #32]
 801b29c:	3303      	adds	r3, #3
 801b29e:	9308      	str	r3, [sp, #32]
 801b2a0:	e726      	b.n	801b0f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b2a2:	d026      	beq.n	801b2f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b2a4:	9b07      	ldr	r3, [sp, #28]
 801b2a6:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801b2a8:	3b01      	subs	r3, #1
 801b2aa:	fb00 a003 	mla	r0, r0, r3, sl
 801b2ae:	1400      	asrs	r0, r0, #16
 801b2b0:	f53f af3a 	bmi.w	801b128 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b2b4:	3901      	subs	r1, #1
 801b2b6:	4288      	cmp	r0, r1
 801b2b8:	f6bf af36 	bge.w	801b128 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b2bc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801b2be:	fb01 8303 	mla	r3, r1, r3, r8
 801b2c2:	141b      	asrs	r3, r3, #16
 801b2c4:	f53f af30 	bmi.w	801b128 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b2c8:	3a01      	subs	r2, #1
 801b2ca:	4293      	cmp	r3, r2
 801b2cc:	f6bf af2c 	bge.w	801b128 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b2d0:	9b08      	ldr	r3, [sp, #32]
 801b2d2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b2d6:	1cdd      	adds	r5, r3, #3
 801b2d8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801b2dc:	f1bc 0f00 	cmp.w	ip, #0
 801b2e0:	dc5f      	bgt.n	801b3a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801b2e2:	9b07      	ldr	r3, [sp, #28]
 801b2e4:	9a08      	ldr	r2, [sp, #32]
 801b2e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b2ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2ee:	441a      	add	r2, r3
 801b2f0:	9208      	str	r2, [sp, #32]
 801b2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	f340 80e9 	ble.w	801b4cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801b2fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b2fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b300:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b304:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b308:	eef0 6a48 	vmov.f32	s13, s16
 801b30c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b310:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b314:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b318:	ee16 aa90 	vmov	sl, s13
 801b31c:	eef0 6a68 	vmov.f32	s13, s17
 801b320:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b324:	ee16 8a90 	vmov	r8, s13
 801b328:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b32c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b330:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b334:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b338:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b33c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b340:	ee18 2a10 	vmov	r2, s16
 801b344:	eeb0 8a47 	vmov.f32	s16, s14
 801b348:	fb92 f3f3 	sdiv	r3, r2, r3
 801b34c:	ee18 2a90 	vmov	r2, s17
 801b350:	9333      	str	r3, [sp, #204]	; 0xcc
 801b352:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b354:	eef0 8a67 	vmov.f32	s17, s15
 801b358:	fb92 f3f3 	sdiv	r3, r2, r3
 801b35c:	9334      	str	r3, [sp, #208]	; 0xd0
 801b35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b362:	3b01      	subs	r3, #1
 801b364:	930b      	str	r3, [sp, #44]	; 0x2c
 801b366:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b368:	bf08      	it	eq
 801b36a:	4613      	moveq	r3, r2
 801b36c:	9307      	str	r3, [sp, #28]
 801b36e:	e6b1      	b.n	801b0d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b370:	1c47      	adds	r7, r0, #1
 801b372:	d482      	bmi.n	801b27a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b374:	42bb      	cmp	r3, r7
 801b376:	db80      	blt.n	801b27a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b378:	1c67      	adds	r7, r4, #1
 801b37a:	f53f af7e 	bmi.w	801b27a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b37e:	42be      	cmp	r6, r7
 801b380:	f6ff af7b 	blt.w	801b27a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b384:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b386:	b236      	sxth	r6, r6
 801b388:	9001      	str	r0, [sp, #4]
 801b38a:	b21b      	sxth	r3, r3
 801b38c:	9600      	str	r6, [sp, #0]
 801b38e:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b390:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801b394:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801b398:	4629      	mov	r1, r5
 801b39a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b39c:	f7ff fd58 	bl	801ae50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801b3a0:	e76b      	b.n	801b27a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b3a2:	9938      	ldr	r1, [sp, #224]	; 0xe0
 801b3a4:	ea4f 402a 	mov.w	r0, sl, asr #16
 801b3a8:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801b3ac:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801b3b0:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801b3b4:	ea4f 4128 	mov.w	r1, r8, asr #16
 801b3b8:	fb07 0101 	mla	r1, r7, r1, r0
 801b3bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b3be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b3c2:	1844      	adds	r4, r0, r1
 801b3c4:	5c40      	ldrb	r0, [r0, r1]
 801b3c6:	78a6      	ldrb	r6, [r4, #2]
 801b3c8:	7861      	ldrb	r1, [r4, #1]
 801b3ca:	960f      	str	r6, [sp, #60]	; 0x3c
 801b3cc:	78e6      	ldrb	r6, [r4, #3]
 801b3ce:	910d      	str	r1, [sp, #52]	; 0x34
 801b3d0:	9610      	str	r6, [sp, #64]	; 0x40
 801b3d2:	f894 9004 	ldrb.w	r9, [r4, #4]
 801b3d6:	f894 b005 	ldrb.w	fp, [r4, #5]
 801b3da:	b192      	cbz	r2, 801b402 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801b3dc:	f06f 0604 	mvn.w	r6, #4
 801b3e0:	2103      	movs	r1, #3
 801b3e2:	3405      	adds	r4, #5
 801b3e4:	fb17 6701 	smlabb	r7, r7, r1, r6
 801b3e8:	19e6      	adds	r6, r4, r7
 801b3ea:	5de4      	ldrb	r4, [r4, r7]
 801b3ec:	9417      	str	r4, [sp, #92]	; 0x5c
 801b3ee:	7874      	ldrb	r4, [r6, #1]
 801b3f0:	9419      	str	r4, [sp, #100]	; 0x64
 801b3f2:	78b4      	ldrb	r4, [r6, #2]
 801b3f4:	941b      	str	r4, [sp, #108]	; 0x6c
 801b3f6:	78f4      	ldrb	r4, [r6, #3]
 801b3f8:	9418      	str	r4, [sp, #96]	; 0x60
 801b3fa:	7934      	ldrb	r4, [r6, #4]
 801b3fc:	941a      	str	r4, [sp, #104]	; 0x68
 801b3fe:	7974      	ldrb	r4, [r6, #5]
 801b400:	941c      	str	r4, [sp, #112]	; 0x70
 801b402:	b29b      	uxth	r3, r3
 801b404:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b406:	b292      	uxth	r2, r2
 801b408:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b40a:	3503      	adds	r5, #3
 801b40c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b410:	fb03 f402 	mul.w	r4, r3, r2
 801b414:	011b      	lsls	r3, r3, #4
 801b416:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801b41a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801b41e:	1b1b      	subs	r3, r3, r4
 801b420:	b292      	uxth	r2, r2
 801b422:	b29b      	uxth	r3, r3
 801b424:	1ab6      	subs	r6, r6, r2
 801b426:	435f      	muls	r7, r3
 801b428:	b2b6      	uxth	r6, r6
 801b42a:	fb03 f909 	mul.w	r9, r3, r9
 801b42e:	fb03 fb0b 	mul.w	fp, r3, fp
 801b432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b434:	fb06 7000 	mla	r0, r6, r0, r7
 801b438:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b43a:	fb06 bb03 	mla	fp, r6, r3, fp
 801b43e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b440:	fb02 0007 	mla	r0, r2, r7, r0
 801b444:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b446:	fb02 bb03 	mla	fp, r2, r3, fp
 801b44a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b44c:	fb04 0007 	mla	r0, r4, r7, r0
 801b450:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801b454:	fb17 f701 	smulbb	r7, r7, r1
 801b458:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b45c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b45e:	fb00 700e 	mla	r0, r0, lr, r7
 801b462:	fb06 9101 	mla	r1, r6, r1, r9
 801b466:	b280      	uxth	r0, r0
 801b468:	1c47      	adds	r7, r0, #1
 801b46a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b46e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b470:	1200      	asrs	r0, r0, #8
 801b472:	f805 0c06 	strb.w	r0, [r5, #-6]
 801b476:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b478:	fb02 1100 	mla	r1, r2, r0, r1
 801b47c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b47e:	fb04 1100 	mla	r1, r4, r0, r1
 801b482:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801b486:	fb04 b403 	mla	r4, r4, r3, fp
 801b48a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801b48e:	fb10 f007 	smulbb	r0, r0, r7
 801b492:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b496:	fb13 f307 	smulbb	r3, r3, r7
 801b49a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b49e:	fb01 010e 	mla	r1, r1, lr, r0
 801b4a2:	fb04 340e 	mla	r4, r4, lr, r3
 801b4a6:	b289      	uxth	r1, r1
 801b4a8:	b2a4      	uxth	r4, r4
 801b4aa:	1c48      	adds	r0, r1, #1
 801b4ac:	1c63      	adds	r3, r4, #1
 801b4ae:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801b4b2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b4b6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b4b8:	1209      	asrs	r1, r1, #8
 801b4ba:	1224      	asrs	r4, r4, #8
 801b4bc:	449a      	add	sl, r3
 801b4be:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b4c0:	f805 1c05 	strb.w	r1, [r5, #-5]
 801b4c4:	f805 4c04 	strb.w	r4, [r5, #-4]
 801b4c8:	4498      	add	r8, r3
 801b4ca:	e707      	b.n	801b2dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801b4cc:	b01f      	add	sp, #124	; 0x7c
 801b4ce:	ecbd 8b08 	vpop	{d8-d11}
 801b4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b4d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4dc:	b085      	sub	sp, #20
 801b4de:	784d      	ldrb	r5, [r1, #1]
 801b4e0:	788e      	ldrb	r6, [r1, #2]
 801b4e2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801b4e6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801b4ea:	9403      	str	r4, [sp, #12]
 801b4ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801b4f0:	780c      	ldrb	r4, [r1, #0]
 801b4f2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801b4f6:	fb07 ce03 	mla	lr, r7, r3, ip
 801b4fa:	2f00      	cmp	r7, #0
 801b4fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b500:	eb02 0b0e 	add.w	fp, r2, lr
 801b504:	db56      	blt.n	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801b506:	45b9      	cmp	r9, r7
 801b508:	dd54      	ble.n	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801b50a:	f1bc 0f00 	cmp.w	ip, #0
 801b50e:	db4d      	blt.n	801b5ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801b510:	4563      	cmp	r3, ip
 801b512:	dd4b      	ble.n	801b5ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801b514:	f812 200e 	ldrb.w	r2, [r2, lr]
 801b518:	9200      	str	r2, [sp, #0]
 801b51a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801b51e:	9201      	str	r2, [sp, #4]
 801b520:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801b524:	9202      	str	r2, [sp, #8]
 801b526:	f11c 0201 	adds.w	r2, ip, #1
 801b52a:	d44a      	bmi.n	801b5c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801b52c:	4293      	cmp	r3, r2
 801b52e:	dd48      	ble.n	801b5c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801b530:	2800      	cmp	r0, #0
 801b532:	d046      	beq.n	801b5c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801b534:	f89b e003 	ldrb.w	lr, [fp, #3]
 801b538:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801b53c:	f89b a005 	ldrb.w	sl, [fp, #5]
 801b540:	3701      	adds	r7, #1
 801b542:	d446      	bmi.n	801b5d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801b544:	45b9      	cmp	r9, r7
 801b546:	dd44      	ble.n	801b5d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801b548:	9a03      	ldr	r2, [sp, #12]
 801b54a:	2a00      	cmp	r2, #0
 801b54c:	d045      	beq.n	801b5da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801b54e:	f1bc 0f00 	cmp.w	ip, #0
 801b552:	db3a      	blt.n	801b5ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801b554:	4563      	cmp	r3, ip
 801b556:	dd38      	ble.n	801b5ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801b558:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b55c:	f04f 0903 	mov.w	r9, #3
 801b560:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801b564:	fb03 b209 	mla	r2, r3, r9, fp
 801b568:	fb03 b909 	mla	r9, r3, r9, fp
 801b56c:	7852      	ldrb	r2, [r2, #1]
 801b56e:	f899 9002 	ldrb.w	r9, [r9, #2]
 801b572:	f11c 0c01 	adds.w	ip, ip, #1
 801b576:	d40d      	bmi.n	801b594 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b578:	4563      	cmp	r3, ip
 801b57a:	dd0b      	ble.n	801b594 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b57c:	b160      	cbz	r0, 801b598 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801b57e:	2603      	movs	r6, #3
 801b580:	fb13 6406 	smlabb	r4, r3, r6, r6
 801b584:	fb03 b506 	mla	r5, r3, r6, fp
 801b588:	fb03 b306 	mla	r3, r3, r6, fp
 801b58c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801b590:	792d      	ldrb	r5, [r5, #4]
 801b592:	795e      	ldrb	r6, [r3, #5]
 801b594:	280f      	cmp	r0, #15
 801b596:	d802      	bhi.n	801b59e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801b598:	9b03      	ldr	r3, [sp, #12]
 801b59a:	2b0f      	cmp	r3, #15
 801b59c:	d922      	bls.n	801b5e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801b59e:	4b2f      	ldr	r3, [pc, #188]	; (801b65c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801b5a0:	f240 1157 	movw	r1, #343	; 0x157
 801b5a4:	4a2e      	ldr	r2, [pc, #184]	; (801b660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801b5a6:	482f      	ldr	r0, [pc, #188]	; (801b664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801b5a8:	f002 fc04 	bl	801ddb4 <__assert_func>
 801b5ac:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801b5b0:	9400      	str	r4, [sp, #0]
 801b5b2:	e7b8      	b.n	801b526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801b5b4:	46b2      	mov	sl, r6
 801b5b6:	46a8      	mov	r8, r5
 801b5b8:	46a6      	mov	lr, r4
 801b5ba:	9400      	str	r4, [sp, #0]
 801b5bc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801b5c0:	e7be      	b.n	801b540 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801b5c2:	46b2      	mov	sl, r6
 801b5c4:	46a8      	mov	r8, r5
 801b5c6:	46a6      	mov	lr, r4
 801b5c8:	e7ba      	b.n	801b540 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801b5ca:	46b1      	mov	r9, r6
 801b5cc:	462a      	mov	r2, r5
 801b5ce:	4627      	mov	r7, r4
 801b5d0:	e7cf      	b.n	801b572 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801b5d2:	46b1      	mov	r9, r6
 801b5d4:	462a      	mov	r2, r5
 801b5d6:	4627      	mov	r7, r4
 801b5d8:	e7dc      	b.n	801b594 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b5da:	280f      	cmp	r0, #15
 801b5dc:	d8df      	bhi.n	801b59e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801b5de:	46b1      	mov	r9, r6
 801b5e0:	462a      	mov	r2, r5
 801b5e2:	4627      	mov	r7, r4
 801b5e4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801b5e8:	b280      	uxth	r0, r0
 801b5ea:	fb00 f30b 	mul.w	r3, r0, fp
 801b5ee:	0100      	lsls	r0, r0, #4
 801b5f0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801b5f4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801b5f8:	1ac0      	subs	r0, r0, r3
 801b5fa:	fa1f fb8b 	uxth.w	fp, fp
 801b5fe:	b280      	uxth	r0, r0
 801b600:	ebac 0c0b 	sub.w	ip, ip, fp
 801b604:	9003      	str	r0, [sp, #12]
 801b606:	fa1f fc8c 	uxth.w	ip, ip
 801b60a:	fb00 fe0e 	mul.w	lr, r0, lr
 801b60e:	9800      	ldr	r0, [sp, #0]
 801b610:	fb0c ee00 	mla	lr, ip, r0, lr
 801b614:	9803      	ldr	r0, [sp, #12]
 801b616:	fb00 f808 	mul.w	r8, r0, r8
 801b61a:	9801      	ldr	r0, [sp, #4]
 801b61c:	fb0b ee07 	mla	lr, fp, r7, lr
 801b620:	fb0c 8800 	mla	r8, ip, r0, r8
 801b624:	fb03 ee04 	mla	lr, r3, r4, lr
 801b628:	fb0b 8202 	mla	r2, fp, r2, r8
 801b62c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b630:	fb03 2505 	mla	r5, r3, r5, r2
 801b634:	9a03      	ldr	r2, [sp, #12]
 801b636:	f881 e000 	strb.w	lr, [r1]
 801b63a:	fb02 f00a 	mul.w	r0, r2, sl
 801b63e:	9a02      	ldr	r2, [sp, #8]
 801b640:	122d      	asrs	r5, r5, #8
 801b642:	fb0c 0c02 	mla	ip, ip, r2, r0
 801b646:	704d      	strb	r5, [r1, #1]
 801b648:	fb0b c909 	mla	r9, fp, r9, ip
 801b64c:	fb03 9606 	mla	r6, r3, r6, r9
 801b650:	1236      	asrs	r6, r6, #8
 801b652:	708e      	strb	r6, [r1, #2]
 801b654:	b005      	add	sp, #20
 801b656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b65a:	bf00      	nop
 801b65c:	08021f95 	.word	0x08021f95
 801b660:	080224ff 	.word	0x080224ff
 801b664:	0802205e 	.word	0x0802205e

0801b668 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b66c:	ed2d 8b08 	vpush	{d8-d11}
 801b670:	b09b      	sub	sp, #108	; 0x6c
 801b672:	eeb0 aa40 	vmov.f32	s20, s0
 801b676:	eef0 9a60 	vmov.f32	s19, s1
 801b67a:	920b      	str	r2, [sp, #44]	; 0x2c
 801b67c:	eeb0 9a41 	vmov.f32	s18, s2
 801b680:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801b682:	eeb0 8a62 	vmov.f32	s16, s5
 801b686:	9019      	str	r0, [sp, #100]	; 0x64
 801b688:	eef0 8a43 	vmov.f32	s17, s6
 801b68c:	6850      	ldr	r0, [r2, #4]
 801b68e:	eef0 ba44 	vmov.f32	s23, s8
 801b692:	9109      	str	r1, [sp, #36]	; 0x24
 801b694:	eeb0 ba64 	vmov.f32	s22, s9
 801b698:	9306      	str	r3, [sp, #24]
 801b69a:	eef0 aa45 	vmov.f32	s21, s10
 801b69e:	6812      	ldr	r2, [r2, #0]
 801b6a0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801b6a4:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 801b6a8:	fb00 1303 	mla	r3, r0, r3, r1
 801b6ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b6b0:	18d3      	adds	r3, r2, r3
 801b6b2:	9307      	str	r3, [sp, #28]
 801b6b4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	9308      	str	r3, [sp, #32]
 801b6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	dc03      	bgt.n	801b6c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	f340 81ab 	ble.w	801ba1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 801b6c8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b6ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b6ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b6d2:	1e48      	subs	r0, r1, #1
 801b6d4:	1e55      	subs	r5, r2, #1
 801b6d6:	9b06      	ldr	r3, [sp, #24]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	f340 80b1 	ble.w	801b840 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801b6de:	ea5f 462b 	movs.w	r6, fp, asr #16
 801b6e2:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b6e6:	d406      	bmi.n	801b6f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b6e8:	4286      	cmp	r6, r0
 801b6ea:	da04      	bge.n	801b6f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	db02      	blt.n	801b6f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b6f0:	42ab      	cmp	r3, r5
 801b6f2:	f2c0 80a6 	blt.w	801b842 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801b6f6:	3601      	adds	r6, #1
 801b6f8:	f100 8097 	bmi.w	801b82a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b6fc:	42b1      	cmp	r1, r6
 801b6fe:	f2c0 8094 	blt.w	801b82a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b702:	3301      	adds	r3, #1
 801b704:	f100 8091 	bmi.w	801b82a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b708:	429a      	cmp	r2, r3
 801b70a:	f2c0 808e 	blt.w	801b82a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b70e:	9b06      	ldr	r3, [sp, #24]
 801b710:	9e07      	ldr	r6, [sp, #28]
 801b712:	930a      	str	r3, [sp, #40]	; 0x28
 801b714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b716:	2b00      	cmp	r3, #0
 801b718:	f340 80b0 	ble.w	801b87c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b71c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801b71e:	1425      	asrs	r5, r4, #16
 801b720:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b722:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801b726:	68c7      	ldr	r7, [r0, #12]
 801b728:	ea5f 402b 	movs.w	r0, fp, asr #16
 801b72c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b730:	689b      	ldr	r3, [r3, #8]
 801b732:	f100 80ea 	bmi.w	801b90a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b736:	f103 3cff 	add.w	ip, r3, #4294967295
 801b73a:	4560      	cmp	r0, ip
 801b73c:	f280 80e5 	bge.w	801b90a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b740:	2d00      	cmp	r5, #0
 801b742:	f2c0 80e2 	blt.w	801b90a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b746:	f107 3cff 	add.w	ip, r7, #4294967295
 801b74a:	4565      	cmp	r5, ip
 801b74c:	f280 80dd 	bge.w	801b90a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b750:	b21b      	sxth	r3, r3
 801b752:	fb05 0003 	mla	r0, r5, r3, r0
 801b756:	9d08      	ldr	r5, [sp, #32]
 801b758:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b75c:	182f      	adds	r7, r5, r0
 801b75e:	5c2d      	ldrb	r5, [r5, r0]
 801b760:	7878      	ldrb	r0, [r7, #1]
 801b762:	f897 e002 	ldrb.w	lr, [r7, #2]
 801b766:	900c      	str	r0, [sp, #48]	; 0x30
 801b768:	f897 9003 	ldrb.w	r9, [r7, #3]
 801b76c:	f897 8004 	ldrb.w	r8, [r7, #4]
 801b770:	f897 a005 	ldrb.w	sl, [r7, #5]
 801b774:	b1c9      	cbz	r1, 801b7aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b776:	f04f 0c03 	mov.w	ip, #3
 801b77a:	f06f 0004 	mvn.w	r0, #4
 801b77e:	3705      	adds	r7, #5
 801b780:	fb13 030c 	smlabb	r3, r3, ip, r0
 801b784:	eb07 0c03 	add.w	ip, r7, r3
 801b788:	5cfb      	ldrb	r3, [r7, r3]
 801b78a:	930d      	str	r3, [sp, #52]	; 0x34
 801b78c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b790:	930f      	str	r3, [sp, #60]	; 0x3c
 801b792:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b796:	9311      	str	r3, [sp, #68]	; 0x44
 801b798:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b79c:	930e      	str	r3, [sp, #56]	; 0x38
 801b79e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801b7a2:	9310      	str	r3, [sp, #64]	; 0x40
 801b7a4:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801b7a8:	9312      	str	r3, [sp, #72]	; 0x48
 801b7aa:	b292      	uxth	r2, r2
 801b7ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b7ae:	b289      	uxth	r1, r1
 801b7b0:	fb02 f301 	mul.w	r3, r2, r1
 801b7b4:	0112      	lsls	r2, r2, #4
 801b7b6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b7ba:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801b7be:	1ad2      	subs	r2, r2, r3
 801b7c0:	b289      	uxth	r1, r1
 801b7c2:	b292      	uxth	r2, r2
 801b7c4:	1a7f      	subs	r7, r7, r1
 801b7c6:	fb02 f909 	mul.w	r9, r2, r9
 801b7ca:	b2bf      	uxth	r7, r7
 801b7cc:	fb02 f808 	mul.w	r8, r2, r8
 801b7d0:	fb02 fa0a 	mul.w	sl, r2, sl
 801b7d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b7d6:	fb07 9905 	mla	r9, r7, r5, r9
 801b7da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b7dc:	fb07 8800 	mla	r8, r7, r0, r8
 801b7e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b7e2:	fb07 aa0e 	mla	sl, r7, lr, sl
 801b7e6:	fb01 9905 	mla	r9, r1, r5, r9
 801b7ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b7ec:	fb01 8800 	mla	r8, r1, r0, r8
 801b7f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b7f2:	fb01 a102 	mla	r1, r1, r2, sl
 801b7f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b7f8:	fb03 9905 	mla	r9, r3, r5, r9
 801b7fc:	fb03 8800 	mla	r8, r3, r0, r8
 801b800:	fb03 1302 	mla	r3, r3, r2, r1
 801b804:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b808:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b80c:	121b      	asrs	r3, r3, #8
 801b80e:	f886 9000 	strb.w	r9, [r6]
 801b812:	f886 8001 	strb.w	r8, [r6, #1]
 801b816:	70b3      	strb	r3, [r6, #2]
 801b818:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801b81a:	3603      	adds	r6, #3
 801b81c:	449b      	add	fp, r3
 801b81e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b820:	441c      	add	r4, r3
 801b822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b824:	3b01      	subs	r3, #1
 801b826:	930a      	str	r3, [sp, #40]	; 0x28
 801b828:	e774      	b.n	801b714 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801b82a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801b82c:	449b      	add	fp, r3
 801b82e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b830:	441c      	add	r4, r3
 801b832:	9b06      	ldr	r3, [sp, #24]
 801b834:	3b01      	subs	r3, #1
 801b836:	9306      	str	r3, [sp, #24]
 801b838:	9b07      	ldr	r3, [sp, #28]
 801b83a:	3303      	adds	r3, #3
 801b83c:	9307      	str	r3, [sp, #28]
 801b83e:	e74a      	b.n	801b6d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b840:	d024      	beq.n	801b88c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801b842:	9b06      	ldr	r3, [sp, #24]
 801b844:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801b846:	3b01      	subs	r3, #1
 801b848:	fb00 b003 	mla	r0, r0, r3, fp
 801b84c:	1400      	asrs	r0, r0, #16
 801b84e:	f53f af5e 	bmi.w	801b70e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b852:	3901      	subs	r1, #1
 801b854:	4288      	cmp	r0, r1
 801b856:	f6bf af5a 	bge.w	801b70e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b85a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801b85c:	fb01 4303 	mla	r3, r1, r3, r4
 801b860:	141b      	asrs	r3, r3, #16
 801b862:	f53f af54 	bmi.w	801b70e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b866:	3a01      	subs	r2, #1
 801b868:	4293      	cmp	r3, r2
 801b86a:	f6bf af50 	bge.w	801b70e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b86e:	9b07      	ldr	r3, [sp, #28]
 801b870:	f8dd e018 	ldr.w	lr, [sp, #24]
 801b874:	1cde      	adds	r6, r3, #3
 801b876:	f1be 0f00 	cmp.w	lr, #0
 801b87a:	dc5f      	bgt.n	801b93c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801b87c:	9b06      	ldr	r3, [sp, #24]
 801b87e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b882:	9b07      	ldr	r3, [sp, #28]
 801b884:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b888:	4423      	add	r3, r4
 801b88a:	9307      	str	r3, [sp, #28]
 801b88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b88e:	2b00      	cmp	r3, #0
 801b890:	f340 80c5 	ble.w	801ba1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 801b894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b898:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b89a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b89e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b8a2:	eef0 6a48 	vmov.f32	s13, s16
 801b8a6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b8aa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b8ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8b2:	ee16 ba90 	vmov	fp, s13
 801b8b6:	eef0 6a68 	vmov.f32	s13, s17
 801b8ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8be:	ee16 4a90 	vmov	r4, s13
 801b8c2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b8c6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b8ca:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b8ce:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b8d2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b8d6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b8da:	ee18 2a10 	vmov	r2, s16
 801b8de:	eeb0 8a47 	vmov.f32	s16, s14
 801b8e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8e6:	ee18 2a90 	vmov	r2, s17
 801b8ea:	932f      	str	r3, [sp, #188]	; 0xbc
 801b8ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b8ee:	eef0 8a67 	vmov.f32	s17, s15
 801b8f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8f6:	9330      	str	r3, [sp, #192]	; 0xc0
 801b8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b8fc:	3b01      	subs	r3, #1
 801b8fe:	9309      	str	r3, [sp, #36]	; 0x24
 801b900:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b902:	bf08      	it	eq
 801b904:	4613      	moveq	r3, r2
 801b906:	9306      	str	r3, [sp, #24]
 801b908:	e6d7      	b.n	801b6ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b90a:	f110 0c01 	adds.w	ip, r0, #1
 801b90e:	d483      	bmi.n	801b818 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b910:	4563      	cmp	r3, ip
 801b912:	db81      	blt.n	801b818 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b914:	f115 0c01 	adds.w	ip, r5, #1
 801b918:	f53f af7e 	bmi.w	801b818 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b91c:	4567      	cmp	r7, ip
 801b91e:	f6ff af7b 	blt.w	801b818 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b922:	b23f      	sxth	r7, r7
 801b924:	b21b      	sxth	r3, r3
 801b926:	9700      	str	r7, [sp, #0]
 801b928:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801b92c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801b930:	9a08      	ldr	r2, [sp, #32]
 801b932:	4631      	mov	r1, r6
 801b934:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b936:	f7ff fdcf 	bl	801b4d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801b93a:	e76d      	b.n	801b818 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b93c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801b93e:	ea4f 402b 	mov.w	r0, fp, asr #16
 801b942:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801b946:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801b94a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801b94e:	1421      	asrs	r1, r4, #16
 801b950:	930a      	str	r3, [sp, #40]	; 0x28
 801b952:	fb0c 0101 	mla	r1, ip, r1, r0
 801b956:	9808      	ldr	r0, [sp, #32]
 801b958:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b95c:	1845      	adds	r5, r0, r1
 801b95e:	5c40      	ldrb	r0, [r0, r1]
 801b960:	796f      	ldrb	r7, [r5, #5]
 801b962:	7869      	ldrb	r1, [r5, #1]
 801b964:	f895 8002 	ldrb.w	r8, [r5, #2]
 801b968:	f895 a003 	ldrb.w	sl, [r5, #3]
 801b96c:	f895 9004 	ldrb.w	r9, [r5, #4]
 801b970:	970c      	str	r7, [sp, #48]	; 0x30
 801b972:	b1a2      	cbz	r2, 801b99e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 801b974:	2703      	movs	r7, #3
 801b976:	f06f 0304 	mvn.w	r3, #4
 801b97a:	3505      	adds	r5, #5
 801b97c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801b980:	eb05 070c 	add.w	r7, r5, ip
 801b984:	f815 500c 	ldrb.w	r5, [r5, ip]
 801b988:	9513      	str	r5, [sp, #76]	; 0x4c
 801b98a:	787d      	ldrb	r5, [r7, #1]
 801b98c:	9515      	str	r5, [sp, #84]	; 0x54
 801b98e:	78bd      	ldrb	r5, [r7, #2]
 801b990:	9517      	str	r5, [sp, #92]	; 0x5c
 801b992:	78fd      	ldrb	r5, [r7, #3]
 801b994:	9514      	str	r5, [sp, #80]	; 0x50
 801b996:	793d      	ldrb	r5, [r7, #4]
 801b998:	9516      	str	r5, [sp, #88]	; 0x58
 801b99a:	797d      	ldrb	r5, [r7, #5]
 801b99c:	9518      	str	r5, [sp, #96]	; 0x60
 801b99e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b9a2:	b292      	uxth	r2, r2
 801b9a4:	3603      	adds	r6, #3
 801b9a6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b9aa:	fb03 f502 	mul.w	r5, r3, r2
 801b9ae:	011b      	lsls	r3, r3, #4
 801b9b0:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801b9b4:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801b9b8:	1b5b      	subs	r3, r3, r5
 801b9ba:	b292      	uxth	r2, r2
 801b9bc:	b29b      	uxth	r3, r3
 801b9be:	1abf      	subs	r7, r7, r2
 801b9c0:	fb03 f909 	mul.w	r9, r3, r9
 801b9c4:	b2bf      	uxth	r7, r7
 801b9c6:	fb03 fa0a 	mul.w	sl, r3, sl
 801b9ca:	fb07 9901 	mla	r9, r7, r1, r9
 801b9ce:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b9d0:	fb07 aa00 	mla	sl, r7, r0, sl
 801b9d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b9d6:	fb02 9901 	mla	r9, r2, r1, r9
 801b9da:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b9dc:	fb02 aa00 	mla	sl, r2, r0, sl
 801b9e0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b9e2:	fb05 9901 	mla	r9, r5, r1, r9
 801b9e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b9e8:	fb05 aa00 	mla	sl, r5, r0, sl
 801b9ec:	434b      	muls	r3, r1
 801b9ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801b9f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b9f4:	fb07 3308 	mla	r3, r7, r8, r3
 801b9f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b9fc:	f806 ac06 	strb.w	sl, [r6, #-6]
 801ba00:	fb02 3201 	mla	r2, r2, r1, r3
 801ba04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ba06:	f806 9c05 	strb.w	r9, [r6, #-5]
 801ba0a:	fb05 2503 	mla	r5, r5, r3, r2
 801ba0e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801ba10:	122d      	asrs	r5, r5, #8
 801ba12:	449b      	add	fp, r3
 801ba14:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ba16:	f806 5c04 	strb.w	r5, [r6, #-4]
 801ba1a:	441c      	add	r4, r3
 801ba1c:	e72b      	b.n	801b876 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801ba1e:	b01b      	add	sp, #108	; 0x6c
 801ba20:	ecbd 8b08 	vpop	{d8-d11}
 801ba24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801ba28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba2c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801ba30:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801ba34:	fb04 5603 	mla	r6, r4, r3, r5
 801ba38:	2c00      	cmp	r4, #0
 801ba3a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801ba3e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801ba42:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801ba46:	db36      	blt.n	801bab6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 801ba48:	45a6      	cmp	lr, r4
 801ba4a:	dd34      	ble.n	801bab6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 801ba4c:	2d00      	cmp	r5, #0
 801ba4e:	db30      	blt.n	801bab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801ba50:	42ab      	cmp	r3, r5
 801ba52:	dd2e      	ble.n	801bab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801ba54:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801ba58:	1c6e      	adds	r6, r5, #1
 801ba5a:	d42f      	bmi.n	801babc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801ba5c:	42b3      	cmp	r3, r6
 801ba5e:	dd2d      	ble.n	801babc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801ba60:	b370      	cbz	r0, 801bac0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 801ba62:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801ba66:	3401      	adds	r4, #1
 801ba68:	d42e      	bmi.n	801bac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801ba6a:	45a6      	cmp	lr, r4
 801ba6c:	dd2c      	ble.n	801bac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801ba6e:	b377      	cbz	r7, 801bace <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 801ba70:	2d00      	cmp	r5, #0
 801ba72:	db27      	blt.n	801bac4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 801ba74:	42ab      	cmp	r3, r5
 801ba76:	dd25      	ble.n	801bac4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 801ba78:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801ba7c:	3501      	adds	r5, #1
 801ba7e:	d429      	bmi.n	801bad4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801ba80:	42ab      	cmp	r3, r5
 801ba82:	dd27      	ble.n	801bad4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801ba84:	b340      	cbz	r0, 801bad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 801ba86:	3301      	adds	r3, #1
 801ba88:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801ba8c:	280f      	cmp	r0, #15
 801ba8e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801ba92:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ba96:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ba9a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801ba9e:	d801      	bhi.n	801baa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 801baa0:	2f0f      	cmp	r7, #15
 801baa2:	d91b      	bls.n	801badc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 801baa4:	4b89      	ldr	r3, [pc, #548]	; (801bccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 801baa6:	f240 1157 	movw	r1, #343	; 0x157
 801baaa:	4a89      	ldr	r2, [pc, #548]	; (801bcd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801baac:	4889      	ldr	r0, [pc, #548]	; (801bcd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801baae:	f002 f981 	bl	801ddb4 <__assert_func>
 801bab2:	2200      	movs	r2, #0
 801bab4:	e7d0      	b.n	801ba58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 801bab6:	2600      	movs	r6, #0
 801bab8:	4632      	mov	r2, r6
 801baba:	e7d4      	b.n	801ba66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801babc:	2600      	movs	r6, #0
 801babe:	e7d2      	b.n	801ba66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801bac0:	4606      	mov	r6, r0
 801bac2:	e7d0      	b.n	801ba66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801bac4:	2400      	movs	r4, #0
 801bac6:	e7d9      	b.n	801ba7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 801bac8:	2300      	movs	r3, #0
 801baca:	461c      	mov	r4, r3
 801bacc:	e7de      	b.n	801ba8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801bace:	463b      	mov	r3, r7
 801bad0:	463c      	mov	r4, r7
 801bad2:	e7db      	b.n	801ba8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801bad4:	2300      	movs	r3, #0
 801bad6:	e7d9      	b.n	801ba8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801bad8:	4603      	mov	r3, r0
 801bada:	e7d7      	b.n	801ba8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801badc:	b280      	uxth	r0, r0
 801bade:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801bae2:	b2bf      	uxth	r7, r7
 801bae4:	fb00 fe07 	mul.w	lr, r0, r7
 801bae8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801baec:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801baf0:	eba0 0c0e 	sub.w	ip, r0, lr
 801baf4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801baf8:	b2bf      	uxth	r7, r7
 801bafa:	fa1f fc8c 	uxth.w	ip, ip
 801bafe:	eba5 0507 	sub.w	r5, r5, r7
 801bb02:	fb0c f00a 	mul.w	r0, ip, sl
 801bb06:	b2ad      	uxth	r5, r5
 801bb08:	fb05 000b 	mla	r0, r5, fp, r0
 801bb0c:	fb07 0009 	mla	r0, r7, r9, r0
 801bb10:	fb0e 0008 	mla	r0, lr, r8, r0
 801bb14:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bb18:	9001      	str	r0, [sp, #4]
 801bb1a:	d018      	beq.n	801bb4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 801bb1c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801bb20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bb24:	fb0b f000 	mul.w	r0, fp, r0
 801bb28:	fb0b fb02 	mul.w	fp, fp, r2
 801bb2c:	0a02      	lsrs	r2, r0, #8
 801bb2e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801bb32:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bb36:	4402      	add	r2, r0
 801bb38:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801bb3c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801bb40:	0a12      	lsrs	r2, r2, #8
 801bb42:	0a00      	lsrs	r0, r0, #8
 801bb44:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bb48:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bb4c:	4302      	orrs	r2, r0
 801bb4e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801bb52:	d01a      	beq.n	801bb8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 801bb54:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801bb58:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bb5c:	fb0a f000 	mul.w	r0, sl, r0
 801bb60:	fb0a fa06 	mul.w	sl, sl, r6
 801bb64:	0a06      	lsrs	r6, r0, #8
 801bb66:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801bb6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bb6e:	4406      	add	r6, r0
 801bb70:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801bb74:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801bb78:	0a36      	lsrs	r6, r6, #8
 801bb7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bb7e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bb82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bb86:	ea46 060a 	orr.w	r6, r6, sl
 801bb8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bb8e:	d01b      	beq.n	801bbc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 801bb90:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801bb94:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801bb98:	fb09 fa0a 	mul.w	sl, r9, sl
 801bb9c:	fb09 f004 	mul.w	r0, r9, r4
 801bba0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801bba4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bba8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801bbac:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bbb0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801bbb4:	4454      	add	r4, sl
 801bbb6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bbba:	0a24      	lsrs	r4, r4, #8
 801bbbc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801bbc0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bbc4:	ea44 0409 	orr.w	r4, r4, r9
 801bbc8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bbcc:	d01b      	beq.n	801bc06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 801bbce:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801bbd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bbd6:	fb08 f909 	mul.w	r9, r8, r9
 801bbda:	fb08 f003 	mul.w	r0, r8, r3
 801bbde:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801bbe2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801bbe6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801bbea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bbee:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801bbf2:	444b      	add	r3, r9
 801bbf4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801bbf8:	0a1b      	lsrs	r3, r3, #8
 801bbfa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801bbfe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bc02:	ea43 0308 	orr.w	r3, r3, r8
 801bc06:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801bc0a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bc0e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801bc12:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bc16:	fb0c f000 	mul.w	r0, ip, r0
 801bc1a:	fb0c f606 	mul.w	r6, ip, r6
 801bc1e:	fb05 0808 	mla	r8, r5, r8, r0
 801bc22:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801bc26:	fb05 6502 	mla	r5, r5, r2, r6
 801bc2a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801bc2e:	fb07 8800 	mla	r8, r7, r0, r8
 801bc32:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801bc36:	fb07 5704 	mla	r7, r7, r4, r5
 801bc3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bc3e:	fb0e 8000 	mla	r0, lr, r0, r8
 801bc42:	fb0e 7e03 	mla	lr, lr, r3, r7
 801bc46:	9b01      	ldr	r3, [sp, #4]
 801bc48:	0a00      	lsrs	r0, r0, #8
 801bc4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bc4e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bc52:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801bc56:	ea40 0e0e 	orr.w	lr, r0, lr
 801bc5a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801bc5e:	b280      	uxth	r0, r0
 801bc60:	fa5f f48e 	uxtb.w	r4, lr
 801bc64:	4343      	muls	r3, r0
 801bc66:	fb14 f400 	smulbb	r4, r4, r0
 801bc6a:	1c5a      	adds	r2, r3, #1
 801bc6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801bc70:	780b      	ldrb	r3, [r1, #0]
 801bc72:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801bc76:	b2d2      	uxtb	r2, r2
 801bc78:	fb03 4302 	mla	r3, r3, r2, r4
 801bc7c:	b29b      	uxth	r3, r3
 801bc7e:	1c5c      	adds	r4, r3, #1
 801bc80:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801bc84:	784c      	ldrb	r4, [r1, #1]
 801bc86:	fb14 f402 	smulbb	r4, r4, r2
 801bc8a:	121b      	asrs	r3, r3, #8
 801bc8c:	700b      	strb	r3, [r1, #0]
 801bc8e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801bc92:	fb03 4300 	mla	r3, r3, r0, r4
 801bc96:	b29b      	uxth	r3, r3
 801bc98:	1c5c      	adds	r4, r3, #1
 801bc9a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801bc9e:	121b      	asrs	r3, r3, #8
 801bca0:	704b      	strb	r3, [r1, #1]
 801bca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801bca6:	f891 e002 	ldrb.w	lr, [r1, #2]
 801bcaa:	fb1e fe02 	smulbb	lr, lr, r2
 801bcae:	fb03 ee00 	mla	lr, r3, r0, lr
 801bcb2:	fa1f fe8e 	uxth.w	lr, lr
 801bcb6:	f10e 0301 	add.w	r3, lr, #1
 801bcba:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801bcbe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bcc2:	f881 e002 	strb.w	lr, [r1, #2]
 801bcc6:	b003      	add	sp, #12
 801bcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bccc:	08021f95 	.word	0x08021f95
 801bcd0:	080224ff 	.word	0x080224ff
 801bcd4:	0802205e 	.word	0x0802205e

0801bcd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcdc:	ed2d 8b08 	vpush	{d8-d11}
 801bce0:	b09d      	sub	sp, #116	; 0x74
 801bce2:	eeb0 aa40 	vmov.f32	s20, s0
 801bce6:	eef0 9a60 	vmov.f32	s19, s1
 801bcea:	9219      	str	r2, [sp, #100]	; 0x64
 801bcec:	eeb0 9a41 	vmov.f32	s18, s2
 801bcf0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801bcf2:	eeb0 8a62 	vmov.f32	s16, s5
 801bcf6:	9307      	str	r3, [sp, #28]
 801bcf8:	eef0 8a43 	vmov.f32	s17, s6
 801bcfc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801bd00:	eef0 ba44 	vmov.f32	s23, s8
 801bd04:	901b      	str	r0, [sp, #108]	; 0x6c
 801bd06:	eeb0 ba64 	vmov.f32	s22, s9
 801bd0a:	931a      	str	r3, [sp, #104]	; 0x68
 801bd0c:	eef0 aa45 	vmov.f32	s21, s10
 801bd10:	6850      	ldr	r0, [r2, #4]
 801bd12:	9117      	str	r1, [sp, #92]	; 0x5c
 801bd14:	6812      	ldr	r2, [r2, #0]
 801bd16:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801bd1a:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 801bd1e:	fb00 1303 	mla	r3, r0, r3, r1
 801bd22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd26:	18d3      	adds	r3, r2, r3
 801bd28:	930a      	str	r3, [sp, #40]	; 0x28
 801bd2a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	9310      	str	r3, [sp, #64]	; 0x40
 801bd30:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801bd34:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	dc03      	bgt.n	801bd44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bd3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	f340 8368 	ble.w	801c414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801bd44:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801bd46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bd4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bd4e:	1e48      	subs	r0, r1, #1
 801bd50:	1e57      	subs	r7, r2, #1
 801bd52:	9b07      	ldr	r3, [sp, #28]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	f340 8187 	ble.w	801c068 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801bd5a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801bd5e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bd62:	d406      	bmi.n	801bd72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bd64:	4584      	cmp	ip, r0
 801bd66:	da04      	bge.n	801bd72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	db02      	blt.n	801bd72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bd6c:	42bb      	cmp	r3, r7
 801bd6e:	f2c0 817c 	blt.w	801c06a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801bd72:	f11c 0c01 	adds.w	ip, ip, #1
 801bd76:	f100 816c 	bmi.w	801c052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bd7a:	4561      	cmp	r1, ip
 801bd7c:	f2c0 8169 	blt.w	801c052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bd80:	3301      	adds	r3, #1
 801bd82:	f100 8166 	bmi.w	801c052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bd86:	429a      	cmp	r2, r3
 801bd88:	f2c0 8163 	blt.w	801c052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bd8c:	9b07      	ldr	r3, [sp, #28]
 801bd8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801bd90:	9318      	str	r3, [sp, #96]	; 0x60
 801bd92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	f340 8186 	ble.w	801c0a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801bd9a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801bd9c:	142a      	asrs	r2, r5, #16
 801bd9e:	ea4f 4026 	mov.w	r0, r6, asr #16
 801bda2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801bda6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801bdaa:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801bdae:	f100 81cb 	bmi.w	801c148 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bdb2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801bdb6:	4542      	cmp	r2, r8
 801bdb8:	f280 81c6 	bge.w	801c148 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bdbc:	2800      	cmp	r0, #0
 801bdbe:	f2c0 81c3 	blt.w	801c148 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bdc2:	f103 38ff 	add.w	r8, r3, #4294967295
 801bdc6:	4540      	cmp	r0, r8
 801bdc8:	f280 81be 	bge.w	801c148 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bdcc:	fa0f f38e 	sxth.w	r3, lr
 801bdd0:	fb00 2203 	mla	r2, r0, r3, r2
 801bdd4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bdd6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801bdda:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801bdde:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801bde2:	2900      	cmp	r1, #0
 801bde4:	f000 81a6 	beq.w	801c134 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 801bde8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bdec:	900c      	str	r0, [sp, #48]	; 0x30
 801bdee:	0e00      	lsrs	r0, r0, #24
 801bdf0:	9013      	str	r0, [sp, #76]	; 0x4c
 801bdf2:	f1bc 0f00 	cmp.w	ip, #0
 801bdf6:	d00f      	beq.n	801be18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801bdf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bdfc:	3b01      	subs	r3, #1
 801bdfe:	009b      	lsls	r3, r3, #2
 801be00:	3304      	adds	r3, #4
 801be02:	eb08 0003 	add.w	r0, r8, r3
 801be06:	f858 3003 	ldr.w	r3, [r8, r3]
 801be0a:	9308      	str	r3, [sp, #32]
 801be0c:	0e1b      	lsrs	r3, r3, #24
 801be0e:	9311      	str	r3, [sp, #68]	; 0x44
 801be10:	6843      	ldr	r3, [r0, #4]
 801be12:	930d      	str	r3, [sp, #52]	; 0x34
 801be14:	0e1b      	lsrs	r3, r3, #24
 801be16:	9314      	str	r3, [sp, #80]	; 0x50
 801be18:	b289      	uxth	r1, r1
 801be1a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801be1c:	fa1f fc8c 	uxth.w	ip, ip
 801be20:	0108      	lsls	r0, r1, #4
 801be22:	fb01 f90c 	mul.w	r9, r1, ip
 801be26:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801be2a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801be2e:	eba0 0809 	sub.w	r8, r0, r9
 801be32:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801be34:	fa1f f18c 	uxth.w	r1, ip
 801be38:	fa1f f888 	uxth.w	r8, r8
 801be3c:	1a5b      	subs	r3, r3, r1
 801be3e:	fb08 f000 	mul.w	r0, r8, r0
 801be42:	b29b      	uxth	r3, r3
 801be44:	fb03 000e 	mla	r0, r3, lr, r0
 801be48:	fb01 0004 	mla	r0, r1, r4, r0
 801be4c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801be4e:	fb09 0004 	mla	r0, r9, r4, r0
 801be52:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801be56:	2800      	cmp	r0, #0
 801be58:	f000 80f2 	beq.w	801c040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801be5c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801be60:	d01b      	beq.n	801be9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801be62:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801be66:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801be6a:	fb0e fa0a 	mul.w	sl, lr, sl
 801be6e:	fb0e fe02 	mul.w	lr, lr, r2
 801be72:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801be76:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801be7a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801be7e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801be82:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801be86:	4452      	add	r2, sl
 801be88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801be8c:	0a12      	lsrs	r2, r2, #8
 801be8e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801be92:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801be96:	ea42 020c 	orr.w	r2, r2, ip
 801be9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801be9c:	2cff      	cmp	r4, #255	; 0xff
 801be9e:	d021      	beq.n	801bee4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801bea0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bea2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bea6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bea8:	fb04 fb0b 	mul.w	fp, r4, fp
 801beac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801beae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801beb2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801beb4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801beb8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bebc:	fb04 fa0a 	mul.w	sl, r4, sl
 801bec0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bec4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bec8:	44de      	add	lr, fp
 801beca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bece:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bed2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bed6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801beda:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bede:	ea4e 040a 	orr.w	r4, lr, sl
 801bee2:	940c      	str	r4, [sp, #48]	; 0x30
 801bee4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bee6:	2cff      	cmp	r4, #255	; 0xff
 801bee8:	d021      	beq.n	801bf2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 801beea:	9c08      	ldr	r4, [sp, #32]
 801beec:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bef0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bef2:	fb04 fb0b 	mul.w	fp, r4, fp
 801bef6:	9c08      	ldr	r4, [sp, #32]
 801bef8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801befc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801befe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bf02:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bf06:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf0e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bf12:	44de      	add	lr, fp
 801bf14:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bf18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf24:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bf28:	ea4e 040a 	orr.w	r4, lr, sl
 801bf2c:	9408      	str	r4, [sp, #32]
 801bf2e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf30:	2cff      	cmp	r4, #255	; 0xff
 801bf32:	d021      	beq.n	801bf78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801bf34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bf36:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bf3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf3c:	fb04 fb0b 	mul.w	fp, r4, fp
 801bf40:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bf42:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bf46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf48:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bf4c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bf50:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf58:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bf5c:	44de      	add	lr, fp
 801bf5e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bf62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf6a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bf72:	ea4e 040a 	orr.w	r4, lr, sl
 801bf76:	940d      	str	r4, [sp, #52]	; 0x34
 801bf78:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bf7a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801bf7e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bf82:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bf86:	9c08      	ldr	r4, [sp, #32]
 801bf88:	fb08 fc0c 	mul.w	ip, r8, ip
 801bf8c:	fb03 cc0e 	mla	ip, r3, lr, ip
 801bf90:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bf94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bf96:	fb01 cc0e 	mla	ip, r1, lr, ip
 801bf9a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bf9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bfa0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801bfa4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bfa8:	fb08 f80e 	mul.w	r8, r8, lr
 801bfac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bfb0:	fb03 8202 	mla	r2, r3, r2, r8
 801bfb4:	9b08      	ldr	r3, [sp, #32]
 801bfb6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bfba:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801bfbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bfc0:	fb01 220a 	mla	r2, r1, sl, r2
 801bfc4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801bfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bfca:	fb09 2901 	mla	r9, r9, r1, r2
 801bfce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bfd0:	4343      	muls	r3, r0
 801bfd2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bfd6:	1c58      	adds	r0, r3, #1
 801bfd8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801bfdc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801bfe0:	783b      	ldrb	r3, [r7, #0]
 801bfe2:	ea4c 0c09 	orr.w	ip, ip, r9
 801bfe6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801bfea:	fa5f f28c 	uxtb.w	r2, ip
 801bfee:	b2c0      	uxtb	r0, r0
 801bff0:	fb12 f201 	smulbb	r2, r2, r1
 801bff4:	fb03 2300 	mla	r3, r3, r0, r2
 801bff8:	b29b      	uxth	r3, r3
 801bffa:	1c5a      	adds	r2, r3, #1
 801bffc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c000:	787a      	ldrb	r2, [r7, #1]
 801c002:	fb12 f200 	smulbb	r2, r2, r0
 801c006:	121b      	asrs	r3, r3, #8
 801c008:	703b      	strb	r3, [r7, #0]
 801c00a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c00e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c012:	fb03 2301 	mla	r3, r3, r1, r2
 801c016:	b29b      	uxth	r3, r3
 801c018:	1c5a      	adds	r2, r3, #1
 801c01a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c01e:	121b      	asrs	r3, r3, #8
 801c020:	707b      	strb	r3, [r7, #1]
 801c022:	78bb      	ldrb	r3, [r7, #2]
 801c024:	fb13 f000 	smulbb	r0, r3, r0
 801c028:	fb0c 0c01 	mla	ip, ip, r1, r0
 801c02c:	fa1f fc8c 	uxth.w	ip, ip
 801c030:	f10c 0301 	add.w	r3, ip, #1
 801c034:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c038:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c03c:	f887 c002 	strb.w	ip, [r7, #2]
 801c040:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801c042:	3703      	adds	r7, #3
 801c044:	441d      	add	r5, r3
 801c046:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c048:	441e      	add	r6, r3
 801c04a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c04c:	3b01      	subs	r3, #1
 801c04e:	9318      	str	r3, [sp, #96]	; 0x60
 801c050:	e69f      	b.n	801bd92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801c052:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801c054:	441d      	add	r5, r3
 801c056:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c058:	441e      	add	r6, r3
 801c05a:	9b07      	ldr	r3, [sp, #28]
 801c05c:	3b01      	subs	r3, #1
 801c05e:	9307      	str	r3, [sp, #28]
 801c060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c062:	3303      	adds	r3, #3
 801c064:	930a      	str	r3, [sp, #40]	; 0x28
 801c066:	e674      	b.n	801bd52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c068:	d025      	beq.n	801c0b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801c06a:	9b07      	ldr	r3, [sp, #28]
 801c06c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801c06e:	3b01      	subs	r3, #1
 801c070:	fb00 5003 	mla	r0, r0, r3, r5
 801c074:	1400      	asrs	r0, r0, #16
 801c076:	f53f ae89 	bmi.w	801bd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c07a:	3901      	subs	r1, #1
 801c07c:	4288      	cmp	r0, r1
 801c07e:	f6bf ae85 	bge.w	801bd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c082:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801c084:	fb01 6303 	mla	r3, r1, r3, r6
 801c088:	141b      	asrs	r3, r3, #16
 801c08a:	f53f ae7f 	bmi.w	801bd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c08e:	3a01      	subs	r2, #1
 801c090:	4293      	cmp	r3, r2
 801c092:	f6bf ae7b 	bge.w	801bd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c098:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c09c:	f103 0e03 	add.w	lr, r3, #3
 801c0a0:	f1bb 0f00 	cmp.w	fp, #0
 801c0a4:	dc6e      	bgt.n	801c184 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801c0a6:	9b07      	ldr	r3, [sp, #28]
 801c0a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c0b2:	4423      	add	r3, r4
 801c0b4:	930a      	str	r3, [sp, #40]	; 0x28
 801c0b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	f340 81ab 	ble.w	801c414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c0be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c0c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c0c4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c0c8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c0cc:	eef0 6a48 	vmov.f32	s13, s16
 801c0d0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c0d4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c0d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0dc:	ee16 5a90 	vmov	r5, s13
 801c0e0:	eef0 6a68 	vmov.f32	s13, s17
 801c0e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0e8:	ee16 6a90 	vmov	r6, s13
 801c0ec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c0f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c0f4:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c0f8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c0fc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c100:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c104:	ee18 2a10 	vmov	r2, s16
 801c108:	eeb0 8a47 	vmov.f32	s16, s14
 801c10c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c110:	ee18 2a90 	vmov	r2, s17
 801c114:	9331      	str	r3, [sp, #196]	; 0xc4
 801c116:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c118:	eef0 8a67 	vmov.f32	s17, s15
 801c11c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c120:	9332      	str	r3, [sp, #200]	; 0xc8
 801c122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c124:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c126:	3b01      	subs	r3, #1
 801c128:	9317      	str	r3, [sp, #92]	; 0x5c
 801c12a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c12c:	bf08      	it	eq
 801c12e:	4613      	moveq	r3, r2
 801c130:	9307      	str	r3, [sp, #28]
 801c132:	e600      	b.n	801bd36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c134:	f1bc 0f00 	cmp.w	ip, #0
 801c138:	f43f ae6e 	beq.w	801be18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c13c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801c140:	9308      	str	r3, [sp, #32]
 801c142:	0e1b      	lsrs	r3, r3, #24
 801c144:	9311      	str	r3, [sp, #68]	; 0x44
 801c146:	e667      	b.n	801be18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c148:	f112 0801 	adds.w	r8, r2, #1
 801c14c:	f53f af78 	bmi.w	801c040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c150:	45c6      	cmp	lr, r8
 801c152:	f6ff af75 	blt.w	801c040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c156:	f110 0801 	adds.w	r8, r0, #1
 801c15a:	f53f af71 	bmi.w	801c040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c15e:	4543      	cmp	r3, r8
 801c160:	f6ff af6e 	blt.w	801c040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c164:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c166:	b21b      	sxth	r3, r3
 801c168:	9201      	str	r2, [sp, #4]
 801c16a:	9300      	str	r3, [sp, #0]
 801c16c:	fa0f f38e 	sxth.w	r3, lr
 801c170:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c176:	e9cd c404 	strd	ip, r4, [sp, #16]
 801c17a:	4639      	mov	r1, r7
 801c17c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c17e:	f7ff fc53 	bl	801ba28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801c182:	e75d      	b.n	801c040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c184:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801c186:	142f      	asrs	r7, r5, #16
 801c188:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c18a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c18e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801c192:	1433      	asrs	r3, r6, #16
 801c194:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c198:	fb02 7303 	mla	r3, r2, r3, r7
 801c19c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801c1a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c1a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c1a8:	2900      	cmp	r1, #0
 801c1aa:	f000 812a 	beq.w	801c402 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801c1ae:	687c      	ldr	r4, [r7, #4]
 801c1b0:	940e      	str	r4, [sp, #56]	; 0x38
 801c1b2:	0e24      	lsrs	r4, r4, #24
 801c1b4:	9415      	str	r4, [sp, #84]	; 0x54
 801c1b6:	b178      	cbz	r0, 801c1d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801c1b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801c1bc:	3a01      	subs	r2, #1
 801c1be:	0092      	lsls	r2, r2, #2
 801c1c0:	3204      	adds	r2, #4
 801c1c2:	eb07 0802 	add.w	r8, r7, r2
 801c1c6:	58ba      	ldr	r2, [r7, r2]
 801c1c8:	9209      	str	r2, [sp, #36]	; 0x24
 801c1ca:	0e12      	lsrs	r2, r2, #24
 801c1cc:	9212      	str	r2, [sp, #72]	; 0x48
 801c1ce:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c1d2:	920f      	str	r2, [sp, #60]	; 0x3c
 801c1d4:	0e12      	lsrs	r2, r2, #24
 801c1d6:	9216      	str	r2, [sp, #88]	; 0x58
 801c1d8:	b289      	uxth	r1, r1
 801c1da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c1dc:	b280      	uxth	r0, r0
 801c1de:	fb01 f900 	mul.w	r9, r1, r0
 801c1e2:	0109      	lsls	r1, r1, #4
 801c1e4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c1e8:	eba1 0809 	sub.w	r8, r1, r9
 801c1ec:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801c1f0:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c1f2:	b280      	uxth	r0, r0
 801c1f4:	fa1f f888 	uxth.w	r8, r8
 801c1f8:	1a12      	subs	r2, r2, r0
 801c1fa:	fb08 f101 	mul.w	r1, r8, r1
 801c1fe:	b292      	uxth	r2, r2
 801c200:	fb02 110c 	mla	r1, r2, ip, r1
 801c204:	fb00 1104 	mla	r1, r0, r4, r1
 801c208:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c20a:	fb09 1104 	mla	r1, r9, r4, r1
 801c20e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c212:	2900      	cmp	r1, #0
 801c214:	f000 80ec 	beq.w	801c3f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801c218:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c21c:	d019      	beq.n	801c252 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 801c21e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c222:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c226:	fb0c fa0a 	mul.w	sl, ip, sl
 801c22a:	fb0c fc03 	mul.w	ip, ip, r3
 801c22e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c232:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c236:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801c23a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c23e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c242:	4453      	add	r3, sl
 801c244:	0a3f      	lsrs	r7, r7, #8
 801c246:	0a1b      	lsrs	r3, r3, #8
 801c248:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c24c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c250:	433b      	orrs	r3, r7
 801c252:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c254:	2cff      	cmp	r4, #255	; 0xff
 801c256:	d020      	beq.n	801c29a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 801c258:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c25a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c25e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c260:	4367      	muls	r7, r4
 801c262:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c264:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c268:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c26c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c26e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c272:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c276:	fb04 fa0a 	mul.w	sl, r4, sl
 801c27a:	44bc      	add	ip, r7
 801c27c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c280:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c284:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c288:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c28c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c290:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c294:	ea4c 040a 	orr.w	r4, ip, sl
 801c298:	940e      	str	r4, [sp, #56]	; 0x38
 801c29a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c29c:	2cff      	cmp	r4, #255	; 0xff
 801c29e:	d020      	beq.n	801c2e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801c2a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c2a2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c2a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c2a8:	4367      	muls	r7, r4
 801c2aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c2ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c2b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c2b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c2b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c2ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c2be:	fb04 fa0a 	mul.w	sl, r4, sl
 801c2c2:	44bc      	add	ip, r7
 801c2c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c2c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c2cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c2d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c2d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c2d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c2dc:	ea4c 040a 	orr.w	r4, ip, sl
 801c2e0:	9409      	str	r4, [sp, #36]	; 0x24
 801c2e2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c2e4:	2cff      	cmp	r4, #255	; 0xff
 801c2e6:	d020      	beq.n	801c32a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 801c2e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c2ea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c2ee:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c2f0:	4367      	muls	r7, r4
 801c2f2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c2f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c2f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c2fc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c2fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c302:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c306:	fb04 fa0a 	mul.w	sl, r4, sl
 801c30a:	44bc      	add	ip, r7
 801c30c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c310:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c314:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c318:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c31c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c320:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c324:	ea4c 040a 	orr.w	r4, ip, sl
 801c328:	940f      	str	r4, [sp, #60]	; 0x3c
 801c32a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c32c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c330:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c334:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c338:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c33a:	fb08 f707 	mul.w	r7, r8, r7
 801c33e:	fb02 770c 	mla	r7, r2, ip, r7
 801c342:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c346:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c348:	fb00 770c 	mla	r7, r0, ip, r7
 801c34c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c350:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c352:	fb09 770c 	mla	r7, r9, ip, r7
 801c356:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c35a:	fb08 f80c 	mul.w	r8, r8, ip
 801c35e:	0a3f      	lsrs	r7, r7, #8
 801c360:	fb02 8303 	mla	r3, r2, r3, r8
 801c364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c366:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c36a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c36e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c370:	fb00 330a 	mla	r3, r0, sl, r3
 801c374:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c378:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c37a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c37e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c380:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c384:	434b      	muls	r3, r1
 801c386:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c38a:	1c59      	adds	r1, r3, #1
 801c38c:	ea47 070c 	orr.w	r7, r7, ip
 801c390:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c394:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c398:	b2fa      	uxtb	r2, r7
 801c39a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c39e:	fb12 f200 	smulbb	r2, r2, r0
 801c3a2:	b2c9      	uxtb	r1, r1
 801c3a4:	fb03 2301 	mla	r3, r3, r1, r2
 801c3a8:	b29b      	uxth	r3, r3
 801c3aa:	1c5a      	adds	r2, r3, #1
 801c3ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c3b0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801c3b4:	fb12 f201 	smulbb	r2, r2, r1
 801c3b8:	121b      	asrs	r3, r3, #8
 801c3ba:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c3be:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801c3c2:	0c3f      	lsrs	r7, r7, #16
 801c3c4:	fb03 2300 	mla	r3, r3, r0, r2
 801c3c8:	b29b      	uxth	r3, r3
 801c3ca:	1c5a      	adds	r2, r3, #1
 801c3cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c3d0:	121b      	asrs	r3, r3, #8
 801c3d2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c3d6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c3da:	fb13 f101 	smulbb	r1, r3, r1
 801c3de:	fb07 1700 	mla	r7, r7, r0, r1
 801c3e2:	b2bf      	uxth	r7, r7
 801c3e4:	1c79      	adds	r1, r7, #1
 801c3e6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801c3ea:	123f      	asrs	r7, r7, #8
 801c3ec:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801c3f0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801c3f2:	f10e 0e03 	add.w	lr, lr, #3
 801c3f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c3fa:	441d      	add	r5, r3
 801c3fc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c3fe:	441e      	add	r6, r3
 801c400:	e64e      	b.n	801c0a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801c402:	2800      	cmp	r0, #0
 801c404:	f43f aee8 	beq.w	801c1d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801c408:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801c40c:	9209      	str	r2, [sp, #36]	; 0x24
 801c40e:	0e12      	lsrs	r2, r2, #24
 801c410:	9212      	str	r2, [sp, #72]	; 0x48
 801c412:	e6e1      	b.n	801c1d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801c414:	b01d      	add	sp, #116	; 0x74
 801c416:	ecbd 8b08 	vpop	{d8-d11}
 801c41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c420 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801c420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c424:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801c428:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801c42c:	fb04 5603 	mla	r6, r4, r3, r5
 801c430:	2c00      	cmp	r4, #0
 801c432:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801c436:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801c43a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801c43e:	db36      	blt.n	801c4ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801c440:	45a6      	cmp	lr, r4
 801c442:	dd34      	ble.n	801c4ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801c444:	2d00      	cmp	r5, #0
 801c446:	db30      	blt.n	801c4aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801c448:	42ab      	cmp	r3, r5
 801c44a:	dd2e      	ble.n	801c4aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801c44c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801c450:	1c6e      	adds	r6, r5, #1
 801c452:	d42f      	bmi.n	801c4b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801c454:	42b3      	cmp	r3, r6
 801c456:	dd2d      	ble.n	801c4b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801c458:	b370      	cbz	r0, 801c4b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 801c45a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801c45e:	3401      	adds	r4, #1
 801c460:	d42e      	bmi.n	801c4c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801c462:	45a6      	cmp	lr, r4
 801c464:	dd2c      	ble.n	801c4c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801c466:	b377      	cbz	r7, 801c4c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 801c468:	2d00      	cmp	r5, #0
 801c46a:	db27      	blt.n	801c4bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801c46c:	42ab      	cmp	r3, r5
 801c46e:	dd25      	ble.n	801c4bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801c470:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801c474:	3501      	adds	r5, #1
 801c476:	d429      	bmi.n	801c4cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801c478:	42ab      	cmp	r3, r5
 801c47a:	dd27      	ble.n	801c4cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801c47c:	b340      	cbz	r0, 801c4d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801c47e:	3301      	adds	r3, #1
 801c480:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801c484:	280f      	cmp	r0, #15
 801c486:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801c48a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c48e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801c492:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801c496:	d801      	bhi.n	801c49c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 801c498:	2f0f      	cmp	r7, #15
 801c49a:	d91b      	bls.n	801c4d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 801c49c:	4b7e      	ldr	r3, [pc, #504]	; (801c698 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801c49e:	f240 1157 	movw	r1, #343	; 0x157
 801c4a2:	4a7e      	ldr	r2, [pc, #504]	; (801c69c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 801c4a4:	487e      	ldr	r0, [pc, #504]	; (801c6a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801c4a6:	f001 fc85 	bl	801ddb4 <__assert_func>
 801c4aa:	2200      	movs	r2, #0
 801c4ac:	e7d0      	b.n	801c450 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801c4ae:	2600      	movs	r6, #0
 801c4b0:	4632      	mov	r2, r6
 801c4b2:	e7d4      	b.n	801c45e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801c4b4:	2600      	movs	r6, #0
 801c4b6:	e7d2      	b.n	801c45e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801c4b8:	4606      	mov	r6, r0
 801c4ba:	e7d0      	b.n	801c45e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801c4bc:	2400      	movs	r4, #0
 801c4be:	e7d9      	b.n	801c474 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801c4c0:	2300      	movs	r3, #0
 801c4c2:	461c      	mov	r4, r3
 801c4c4:	e7de      	b.n	801c484 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c4c6:	463b      	mov	r3, r7
 801c4c8:	463c      	mov	r4, r7
 801c4ca:	e7db      	b.n	801c484 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	e7d9      	b.n	801c484 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c4d0:	4603      	mov	r3, r0
 801c4d2:	e7d7      	b.n	801c484 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c4d4:	b280      	uxth	r0, r0
 801c4d6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c4da:	b2bf      	uxth	r7, r7
 801c4dc:	fb00 fe07 	mul.w	lr, r0, r7
 801c4e0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c4e4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801c4e8:	eba0 0c0e 	sub.w	ip, r0, lr
 801c4ec:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801c4f0:	b2bf      	uxth	r7, r7
 801c4f2:	fa1f fc8c 	uxth.w	ip, ip
 801c4f6:	eba0 0507 	sub.w	r5, r0, r7
 801c4fa:	fb0c f00a 	mul.w	r0, ip, sl
 801c4fe:	b2ad      	uxth	r5, r5
 801c500:	fb05 000b 	mla	r0, r5, fp, r0
 801c504:	fb07 0009 	mla	r0, r7, r9, r0
 801c508:	fb0e 0008 	mla	r0, lr, r8, r0
 801c50c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c510:	9001      	str	r0, [sp, #4]
 801c512:	d018      	beq.n	801c546 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 801c514:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801c518:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c51c:	fb0b f000 	mul.w	r0, fp, r0
 801c520:	fb0b fb02 	mul.w	fp, fp, r2
 801c524:	0a02      	lsrs	r2, r0, #8
 801c526:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801c52a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c52e:	4402      	add	r2, r0
 801c530:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801c534:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801c538:	0a12      	lsrs	r2, r2, #8
 801c53a:	0a00      	lsrs	r0, r0, #8
 801c53c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c540:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c544:	4302      	orrs	r2, r0
 801c546:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c54a:	d01a      	beq.n	801c582 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 801c54c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801c550:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c554:	fb0a f000 	mul.w	r0, sl, r0
 801c558:	fb0a fa06 	mul.w	sl, sl, r6
 801c55c:	0a06      	lsrs	r6, r0, #8
 801c55e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801c562:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c566:	4406      	add	r6, r0
 801c568:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801c56c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801c570:	0a36      	lsrs	r6, r6, #8
 801c572:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c576:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c57a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c57e:	ea46 060a 	orr.w	r6, r6, sl
 801c582:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c586:	d01b      	beq.n	801c5c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 801c588:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801c58c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c590:	fb09 fa0a 	mul.w	sl, r9, sl
 801c594:	fb09 f004 	mul.w	r0, r9, r4
 801c598:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801c59c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c5a0:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801c5a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c5a8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801c5ac:	4454      	add	r4, sl
 801c5ae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c5b2:	0a24      	lsrs	r4, r4, #8
 801c5b4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c5b8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c5bc:	ea44 0409 	orr.w	r4, r4, r9
 801c5c0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c5c4:	d01b      	beq.n	801c5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 801c5c6:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801c5ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c5ce:	fb08 f909 	mul.w	r9, r8, r9
 801c5d2:	fb08 f003 	mul.w	r0, r8, r3
 801c5d6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801c5da:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801c5de:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801c5e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c5e6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801c5ea:	444b      	add	r3, r9
 801c5ec:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c5f0:	0a1b      	lsrs	r3, r3, #8
 801c5f2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c5f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c5fa:	ea43 0308 	orr.w	r3, r3, r8
 801c5fe:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801c602:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c606:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801c60a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c60e:	fb0c f000 	mul.w	r0, ip, r0
 801c612:	fb0c f606 	mul.w	r6, ip, r6
 801c616:	fb05 0808 	mla	r8, r5, r8, r0
 801c61a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801c61e:	fb05 6502 	mla	r5, r5, r2, r6
 801c622:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c626:	fb07 8800 	mla	r8, r7, r0, r8
 801c62a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801c62e:	fb07 5704 	mla	r7, r7, r4, r5
 801c632:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c636:	fb0e 8000 	mla	r0, lr, r0, r8
 801c63a:	780a      	ldrb	r2, [r1, #0]
 801c63c:	fb0e 7e03 	mla	lr, lr, r3, r7
 801c640:	9b01      	ldr	r3, [sp, #4]
 801c642:	0a00      	lsrs	r0, r0, #8
 801c644:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c648:	43db      	mvns	r3, r3
 801c64a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c64e:	b2db      	uxtb	r3, r3
 801c650:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c654:	ea40 0e0e 	orr.w	lr, r0, lr
 801c658:	fb02 f003 	mul.w	r0, r2, r3
 801c65c:	1c42      	adds	r2, r0, #1
 801c65e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c662:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801c666:	700a      	strb	r2, [r1, #0]
 801c668:	784a      	ldrb	r2, [r1, #1]
 801c66a:	435a      	muls	r2, r3
 801c66c:	1c50      	adds	r0, r2, #1
 801c66e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801c672:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801c676:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801c67a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c67e:	704a      	strb	r2, [r1, #1]
 801c680:	788a      	ldrb	r2, [r1, #2]
 801c682:	4353      	muls	r3, r2
 801c684:	1c5a      	adds	r2, r3, #1
 801c686:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c68a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801c68e:	f881 e002 	strb.w	lr, [r1, #2]
 801c692:	b003      	add	sp, #12
 801c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c698:	08021f95 	.word	0x08021f95
 801c69c:	080224ff 	.word	0x080224ff
 801c6a0:	0802205e 	.word	0x0802205e

0801c6a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6a8:	ed2d 8b08 	vpush	{d8-d11}
 801c6ac:	b099      	sub	sp, #100	; 0x64
 801c6ae:	eeb0 aa40 	vmov.f32	s20, s0
 801c6b2:	eef0 9a60 	vmov.f32	s19, s1
 801c6b6:	9017      	str	r0, [sp, #92]	; 0x5c
 801c6b8:	eeb0 9a41 	vmov.f32	s18, s2
 801c6bc:	9306      	str	r3, [sp, #24]
 801c6be:	eeb0 8a62 	vmov.f32	s16, s5
 801c6c2:	eef0 8a43 	vmov.f32	s17, s6
 801c6c6:	eef0 ba44 	vmov.f32	s23, s8
 801c6ca:	eeb0 ba64 	vmov.f32	s22, s9
 801c6ce:	eef0 aa45 	vmov.f32	s21, s10
 801c6d2:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801c6d6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c6d8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801c6dc:	6850      	ldr	r0, [r2, #4]
 801c6de:	6812      	ldr	r2, [r2, #0]
 801c6e0:	fb00 1303 	mla	r3, r0, r3, r1
 801c6e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c6e8:	18d3      	adds	r3, r2, r3
 801c6ea:	9309      	str	r3, [sp, #36]	; 0x24
 801c6ec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c6ee:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	930e      	str	r3, [sp, #56]	; 0x38
 801c6f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	dc03      	bgt.n	801c704 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c6fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	f340 8360 	ble.w	801cdc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801c704:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c706:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c70a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c70e:	1e48      	subs	r0, r1, #1
 801c710:	1e57      	subs	r7, r2, #1
 801c712:	9b06      	ldr	r3, [sp, #24]
 801c714:	2b00      	cmp	r3, #0
 801c716:	f340 817b 	ble.w	801ca10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801c71a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801c71e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c722:	d406      	bmi.n	801c732 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c724:	4584      	cmp	ip, r0
 801c726:	da04      	bge.n	801c732 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c728:	2b00      	cmp	r3, #0
 801c72a:	db02      	blt.n	801c732 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c72c:	42bb      	cmp	r3, r7
 801c72e:	f2c0 8170 	blt.w	801ca12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c732:	f11c 0c01 	adds.w	ip, ip, #1
 801c736:	f100 8160 	bmi.w	801c9fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c73a:	4561      	cmp	r1, ip
 801c73c:	f2c0 815d 	blt.w	801c9fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c740:	3301      	adds	r3, #1
 801c742:	f100 815a 	bmi.w	801c9fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c746:	429a      	cmp	r2, r3
 801c748:	f2c0 8157 	blt.w	801c9fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c74c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c750:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c752:	f1b8 0f00 	cmp.w	r8, #0
 801c756:	f340 8179 	ble.w	801ca4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801c75a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801c75c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c760:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c762:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c766:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c76a:	142a      	asrs	r2, r5, #16
 801c76c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c770:	689b      	ldr	r3, [r3, #8]
 801c772:	f100 81be 	bmi.w	801caf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c776:	f103 39ff 	add.w	r9, r3, #4294967295
 801c77a:	454a      	cmp	r2, r9
 801c77c:	f280 81b9 	bge.w	801caf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c780:	f1bc 0f00 	cmp.w	ip, #0
 801c784:	f2c0 81b5 	blt.w	801caf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c788:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c78c:	45cc      	cmp	ip, r9
 801c78e:	f280 81b0 	bge.w	801caf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c792:	b21b      	sxth	r3, r3
 801c794:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c796:	fb0c 2203 	mla	r2, ip, r3, r2
 801c79a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801c79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c7a2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801c7a6:	2900      	cmp	r1, #0
 801c7a8:	f000 8197 	beq.w	801cada <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 801c7ac:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801c7b0:	940a      	str	r4, [sp, #40]	; 0x28
 801c7b2:	0e24      	lsrs	r4, r4, #24
 801c7b4:	9411      	str	r4, [sp, #68]	; 0x44
 801c7b6:	b180      	cbz	r0, 801c7da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c7b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801c7bc:	3b01      	subs	r3, #1
 801c7be:	009b      	lsls	r3, r3, #2
 801c7c0:	3304      	adds	r3, #4
 801c7c2:	eb09 0c03 	add.w	ip, r9, r3
 801c7c6:	f859 3003 	ldr.w	r3, [r9, r3]
 801c7ca:	9307      	str	r3, [sp, #28]
 801c7cc:	0e1b      	lsrs	r3, r3, #24
 801c7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801c7d0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801c7d4:	930b      	str	r3, [sp, #44]	; 0x2c
 801c7d6:	0e1b      	lsrs	r3, r3, #24
 801c7d8:	9312      	str	r3, [sp, #72]	; 0x48
 801c7da:	b289      	uxth	r1, r1
 801c7dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c7de:	b280      	uxth	r0, r0
 801c7e0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c7e2:	fb01 fa00 	mul.w	sl, r1, r0
 801c7e6:	0109      	lsls	r1, r1, #4
 801c7e8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c7ec:	eba1 090a 	sub.w	r9, r1, sl
 801c7f0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801c7f4:	b280      	uxth	r0, r0
 801c7f6:	fa1f f989 	uxth.w	r9, r9
 801c7fa:	1a09      	subs	r1, r1, r0
 801c7fc:	fb09 f303 	mul.w	r3, r9, r3
 801c800:	b289      	uxth	r1, r1
 801c802:	fb01 330e 	mla	r3, r1, lr, r3
 801c806:	fb00 3304 	mla	r3, r0, r4, r3
 801c80a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c80c:	fb0a 3304 	mla	r3, sl, r4, r3
 801c810:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c814:	2b00      	cmp	r3, #0
 801c816:	f000 80e8 	beq.w	801c9ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801c81a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c81e:	d01b      	beq.n	801c858 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c820:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801c824:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c828:	fb0e fb0b 	mul.w	fp, lr, fp
 801c82c:	fb0e fe02 	mul.w	lr, lr, r2
 801c830:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801c834:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c838:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c83c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c840:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c844:	445a      	add	r2, fp
 801c846:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c84a:	0a12      	lsrs	r2, r2, #8
 801c84c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c850:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c854:	ea42 020c 	orr.w	r2, r2, ip
 801c858:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c85a:	2cff      	cmp	r4, #255	; 0xff
 801c85c:	d021      	beq.n	801c8a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801c85e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c860:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c864:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c866:	fb04 fc0c 	mul.w	ip, r4, ip
 801c86a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c86c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c870:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c874:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c876:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c87a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c87e:	fb04 fb0b 	mul.w	fp, r4, fp
 801c882:	44e6      	add	lr, ip
 801c884:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c888:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c88c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c890:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c894:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c898:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c89c:	ea4e 040b 	orr.w	r4, lr, fp
 801c8a0:	940a      	str	r4, [sp, #40]	; 0x28
 801c8a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c8a4:	2cff      	cmp	r4, #255	; 0xff
 801c8a6:	d021      	beq.n	801c8ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c8a8:	9c07      	ldr	r4, [sp, #28]
 801c8aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c8ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c8b0:	fb04 fc0c 	mul.w	ip, r4, ip
 801c8b4:	9c07      	ldr	r4, [sp, #28]
 801c8b6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c8ba:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c8be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c8c0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c8c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8c8:	fb04 fb0b 	mul.w	fp, r4, fp
 801c8cc:	44e6      	add	lr, ip
 801c8ce:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c8d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c8d6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c8da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8de:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c8e2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c8e6:	ea4e 040b 	orr.w	r4, lr, fp
 801c8ea:	9407      	str	r4, [sp, #28]
 801c8ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c8ee:	2cff      	cmp	r4, #255	; 0xff
 801c8f0:	d021      	beq.n	801c936 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801c8f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c8f4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c8f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c8fa:	fb04 fc0c 	mul.w	ip, r4, ip
 801c8fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c900:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c904:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c908:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c90a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c90e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c912:	fb04 fb0b 	mul.w	fp, r4, fp
 801c916:	44e6      	add	lr, ip
 801c918:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c91c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c920:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c924:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c928:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c92c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c930:	ea4e 040b 	orr.w	r4, lr, fp
 801c934:	940b      	str	r4, [sp, #44]	; 0x2c
 801c936:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c938:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801c93c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c940:	2bff      	cmp	r3, #255	; 0xff
 801c942:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c946:	9c07      	ldr	r4, [sp, #28]
 801c948:	fb09 fc0c 	mul.w	ip, r9, ip
 801c94c:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c950:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c954:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c956:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c95a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c95e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c960:	fb0a cc0e 	mla	ip, sl, lr, ip
 801c964:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c968:	fb09 f90e 	mul.w	r9, r9, lr
 801c96c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c970:	fb01 9202 	mla	r2, r1, r2, r9
 801c974:	9907      	ldr	r1, [sp, #28]
 801c976:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c97a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801c97e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c980:	fb00 220b 	mla	r2, r0, fp, r2
 801c984:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801c988:	fb0a 2a00 	mla	sl, sl, r0, r2
 801c98c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c990:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c994:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c998:	fa5f f08c 	uxtb.w	r0, ip
 801c99c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801c9a0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c9a4:	f000 80a2 	beq.w	801caec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801c9a8:	43db      	mvns	r3, r3
 801c9aa:	783a      	ldrb	r2, [r7, #0]
 801c9ac:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c9b0:	b2db      	uxtb	r3, r3
 801c9b2:	fb02 fe03 	mul.w	lr, r2, r3
 801c9b6:	fb0a fa03 	mul.w	sl, sl, r3
 801c9ba:	f10e 0201 	add.w	r2, lr, #1
 801c9be:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801c9c2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c9c6:	703a      	strb	r2, [r7, #0]
 801c9c8:	787a      	ldrb	r2, [r7, #1]
 801c9ca:	fb02 f003 	mul.w	r0, r2, r3
 801c9ce:	f10a 0301 	add.w	r3, sl, #1
 801c9d2:	1c42      	adds	r2, r0, #1
 801c9d4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801c9d8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c9dc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c9e0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c9e4:	707a      	strb	r2, [r7, #1]
 801c9e6:	f887 c002 	strb.w	ip, [r7, #2]
 801c9ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c9ec:	3703      	adds	r7, #3
 801c9ee:	f108 38ff 	add.w	r8, r8, #4294967295
 801c9f2:	441d      	add	r5, r3
 801c9f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c9f6:	441e      	add	r6, r3
 801c9f8:	e6ab      	b.n	801c752 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801c9fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c9fc:	441d      	add	r5, r3
 801c9fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ca00:	441e      	add	r6, r3
 801ca02:	9b06      	ldr	r3, [sp, #24]
 801ca04:	3b01      	subs	r3, #1
 801ca06:	9306      	str	r3, [sp, #24]
 801ca08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca0a:	3303      	adds	r3, #3
 801ca0c:	9309      	str	r3, [sp, #36]	; 0x24
 801ca0e:	e680      	b.n	801c712 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ca10:	d024      	beq.n	801ca5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 801ca12:	9b06      	ldr	r3, [sp, #24]
 801ca14:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801ca16:	3b01      	subs	r3, #1
 801ca18:	fb00 5003 	mla	r0, r0, r3, r5
 801ca1c:	1400      	asrs	r0, r0, #16
 801ca1e:	f53f ae95 	bmi.w	801c74c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ca22:	3901      	subs	r1, #1
 801ca24:	4288      	cmp	r0, r1
 801ca26:	f6bf ae91 	bge.w	801c74c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ca2a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801ca2c:	fb01 6303 	mla	r3, r1, r3, r6
 801ca30:	141b      	asrs	r3, r3, #16
 801ca32:	f53f ae8b 	bmi.w	801c74c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ca36:	3a01      	subs	r2, #1
 801ca38:	4293      	cmp	r3, r2
 801ca3a:	f6bf ae87 	bge.w	801c74c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ca3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca40:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ca44:	1cdf      	adds	r7, r3, #3
 801ca46:	f1bb 0f00 	cmp.w	fp, #0
 801ca4a:	dc6e      	bgt.n	801cb2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801ca4c:	9b06      	ldr	r3, [sp, #24]
 801ca4e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ca52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca58:	4423      	add	r3, r4
 801ca5a:	9309      	str	r3, [sp, #36]	; 0x24
 801ca5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	f340 81b0 	ble.w	801cdc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801ca64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ca68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ca6a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ca6e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ca72:	eef0 6a48 	vmov.f32	s13, s16
 801ca76:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ca7a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ca7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca82:	ee16 5a90 	vmov	r5, s13
 801ca86:	eef0 6a68 	vmov.f32	s13, s17
 801ca8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca8e:	ee16 6a90 	vmov	r6, s13
 801ca92:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ca96:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ca9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ca9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801caa2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801caa6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801caaa:	ee18 2a10 	vmov	r2, s16
 801caae:	eeb0 8a47 	vmov.f32	s16, s14
 801cab2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cab6:	ee18 2a90 	vmov	r2, s17
 801caba:	932d      	str	r3, [sp, #180]	; 0xb4
 801cabc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cabe:	eef0 8a67 	vmov.f32	s17, s15
 801cac2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cac6:	932e      	str	r3, [sp, #184]	; 0xb8
 801cac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801caca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cacc:	3b01      	subs	r3, #1
 801cace:	9315      	str	r3, [sp, #84]	; 0x54
 801cad0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cad2:	bf08      	it	eq
 801cad4:	4613      	moveq	r3, r2
 801cad6:	9306      	str	r3, [sp, #24]
 801cad8:	e60d      	b.n	801c6f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801cada:	2800      	cmp	r0, #0
 801cadc:	f43f ae7d 	beq.w	801c7da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801cae0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801cae4:	9307      	str	r3, [sp, #28]
 801cae6:	0e1b      	lsrs	r3, r3, #24
 801cae8:	930f      	str	r3, [sp, #60]	; 0x3c
 801caea:	e676      	b.n	801c7da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801caec:	7038      	strb	r0, [r7, #0]
 801caee:	7079      	strb	r1, [r7, #1]
 801caf0:	e779      	b.n	801c9e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801caf2:	f112 0901 	adds.w	r9, r2, #1
 801caf6:	f53f af78 	bmi.w	801c9ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cafa:	454b      	cmp	r3, r9
 801cafc:	f6ff af75 	blt.w	801c9ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cb00:	f11c 0901 	adds.w	r9, ip, #1
 801cb04:	f53f af71 	bmi.w	801c9ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cb08:	45ce      	cmp	lr, r9
 801cb0a:	f6ff af6e 	blt.w	801c9ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cb0e:	b21b      	sxth	r3, r3
 801cb10:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801cb14:	fa0f f28e 	sxth.w	r2, lr
 801cb18:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801cb1c:	9200      	str	r2, [sp, #0]
 801cb1e:	4639      	mov	r1, r7
 801cb20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb22:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801cb24:	f7ff fc7c 	bl	801c420 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801cb28:	e75f      	b.n	801c9ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cb2a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801cb2c:	1429      	asrs	r1, r5, #16
 801cb2e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cb30:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801cb34:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801cb38:	1433      	asrs	r3, r6, #16
 801cb3a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cb3e:	fb0c 1303 	mla	r3, ip, r3, r1
 801cb42:	990e      	ldr	r1, [sp, #56]	; 0x38
 801cb44:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801cb48:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801cb4c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801cb50:	2a00      	cmp	r2, #0
 801cb52:	f000 8129 	beq.w	801cda8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801cb56:	684c      	ldr	r4, [r1, #4]
 801cb58:	940c      	str	r4, [sp, #48]	; 0x30
 801cb5a:	0e24      	lsrs	r4, r4, #24
 801cb5c:	9413      	str	r4, [sp, #76]	; 0x4c
 801cb5e:	b198      	cbz	r0, 801cb88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801cb60:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801cb64:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cb68:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801cb6c:	f10c 0c04 	add.w	ip, ip, #4
 801cb70:	eb01 080c 	add.w	r8, r1, ip
 801cb74:	f851 100c 	ldr.w	r1, [r1, ip]
 801cb78:	9108      	str	r1, [sp, #32]
 801cb7a:	0e09      	lsrs	r1, r1, #24
 801cb7c:	9110      	str	r1, [sp, #64]	; 0x40
 801cb7e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cb82:	910d      	str	r1, [sp, #52]	; 0x34
 801cb84:	0e09      	lsrs	r1, r1, #24
 801cb86:	9114      	str	r1, [sp, #80]	; 0x50
 801cb88:	b292      	uxth	r2, r2
 801cb8a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cb8c:	b280      	uxth	r0, r0
 801cb8e:	fb02 f900 	mul.w	r9, r2, r0
 801cb92:	0112      	lsls	r2, r2, #4
 801cb94:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801cb98:	eba2 0809 	sub.w	r8, r2, r9
 801cb9c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801cba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cba2:	b280      	uxth	r0, r0
 801cba4:	fa1f f888 	uxth.w	r8, r8
 801cba8:	1a09      	subs	r1, r1, r0
 801cbaa:	fb08 f202 	mul.w	r2, r8, r2
 801cbae:	b289      	uxth	r1, r1
 801cbb0:	fb01 220e 	mla	r2, r1, lr, r2
 801cbb4:	fb00 2204 	mla	r2, r0, r4, r2
 801cbb8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cbba:	fb09 2204 	mla	r2, r9, r4, r2
 801cbbe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cbc2:	2a00      	cmp	r2, #0
 801cbc4:	f000 80e8 	beq.w	801cd98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801cbc8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801cbcc:	d01b      	beq.n	801cc06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 801cbce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cbd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cbd6:	fb0e fa0a 	mul.w	sl, lr, sl
 801cbda:	fb0e fe03 	mul.w	lr, lr, r3
 801cbde:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cbe2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cbe6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801cbea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cbee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cbf2:	4453      	add	r3, sl
 801cbf4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cbf8:	0a1b      	lsrs	r3, r3, #8
 801cbfa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cbfe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cc02:	ea43 030c 	orr.w	r3, r3, ip
 801cc06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cc08:	2cff      	cmp	r4, #255	; 0xff
 801cc0a:	d021      	beq.n	801cc50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 801cc0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cc0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cc12:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cc14:	fb04 fc0c 	mul.w	ip, r4, ip
 801cc18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cc1a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cc1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cc22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cc24:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cc28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc2c:	fb04 fa0a 	mul.w	sl, r4, sl
 801cc30:	44e6      	add	lr, ip
 801cc32:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cc36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cc3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cc3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc4a:	ea4e 040a 	orr.w	r4, lr, sl
 801cc4e:	940c      	str	r4, [sp, #48]	; 0x30
 801cc50:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc52:	2cff      	cmp	r4, #255	; 0xff
 801cc54:	d021      	beq.n	801cc9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 801cc56:	9c08      	ldr	r4, [sp, #32]
 801cc58:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cc5c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc5e:	fb04 fc0c 	mul.w	ip, r4, ip
 801cc62:	9c08      	ldr	r4, [sp, #32]
 801cc64:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801cc68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc6a:	fb04 fa0e 	mul.w	sl, r4, lr
 801cc6e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cc72:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cc76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc7a:	44e6      	add	lr, ip
 801cc7c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cc80:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cc84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cc88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc94:	ea4e 040a 	orr.w	r4, lr, sl
 801cc98:	9408      	str	r4, [sp, #32]
 801cc9a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc9c:	2cff      	cmp	r4, #255	; 0xff
 801cc9e:	d021      	beq.n	801cce4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801cca0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cca2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cca6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cca8:	fb04 fc0c 	mul.w	ip, r4, ip
 801ccac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ccae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ccb2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ccb6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ccb8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ccbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ccc0:	fb04 fa0a 	mul.w	sl, r4, sl
 801ccc4:	44e6      	add	lr, ip
 801ccc6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ccca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ccce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ccd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ccd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ccda:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ccde:	ea4e 040a 	orr.w	r4, lr, sl
 801cce2:	940d      	str	r4, [sp, #52]	; 0x34
 801cce4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cce6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ccea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ccee:	2aff      	cmp	r2, #255	; 0xff
 801ccf0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ccf4:	9c08      	ldr	r4, [sp, #32]
 801ccf6:	fb08 fc0c 	mul.w	ip, r8, ip
 801ccfa:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ccfe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cd02:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cd04:	fb00 cc0e 	mla	ip, r0, lr, ip
 801cd08:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cd0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cd0e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801cd12:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801cd16:	fb08 f80e 	mul.w	r8, r8, lr
 801cd1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cd1e:	fb01 8303 	mla	r3, r1, r3, r8
 801cd22:	9908      	ldr	r1, [sp, #32]
 801cd24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cd28:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801cd2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801cd2e:	fb00 330a 	mla	r3, r0, sl, r3
 801cd32:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801cd36:	fb09 3e0e 	mla	lr, r9, lr, r3
 801cd3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cd3e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cd42:	ea4c 0c0e 	orr.w	ip, ip, lr
 801cd46:	fa5f f08c 	uxtb.w	r0, ip
 801cd4a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801cd4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801cd52:	d032      	beq.n	801cdba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 801cd54:	43d2      	mvns	r2, r2
 801cd56:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801cd5a:	b2d2      	uxtb	r2, r2
 801cd5c:	fb0e fe02 	mul.w	lr, lr, r2
 801cd60:	f10e 0301 	add.w	r3, lr, #1
 801cd64:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801cd68:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801cd6c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801cd70:	4350      	muls	r0, r2
 801cd72:	f807 3c03 	strb.w	r3, [r7, #-3]
 801cd76:	1c43      	adds	r3, r0, #1
 801cd78:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801cd7c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801cd80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801cd84:	4353      	muls	r3, r2
 801cd86:	f807 1c02 	strb.w	r1, [r7, #-2]
 801cd8a:	1c5a      	adds	r2, r3, #1
 801cd8c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cd90:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801cd94:	f807 cc01 	strb.w	ip, [r7, #-1]
 801cd98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cd9a:	3703      	adds	r7, #3
 801cd9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cda0:	441d      	add	r5, r3
 801cda2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cda4:	441e      	add	r6, r3
 801cda6:	e64e      	b.n	801ca46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801cda8:	2800      	cmp	r0, #0
 801cdaa:	f43f aeed 	beq.w	801cb88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801cdae:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801cdb2:	9108      	str	r1, [sp, #32]
 801cdb4:	0e09      	lsrs	r1, r1, #24
 801cdb6:	9110      	str	r1, [sp, #64]	; 0x40
 801cdb8:	e6e6      	b.n	801cb88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801cdba:	f807 0c03 	strb.w	r0, [r7, #-3]
 801cdbe:	f807 1c02 	strb.w	r1, [r7, #-2]
 801cdc2:	e7e7      	b.n	801cd94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 801cdc4:	b019      	add	sp, #100	; 0x64
 801cdc6:	ecbd 8b08 	vpop	{d8-d11}
 801cdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cdd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801cdd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdd4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801cdd8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801cddc:	2800      	cmp	r0, #0
 801cdde:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801cde2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801cde6:	fb0c 0e03 	mla	lr, ip, r3, r0
 801cdea:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801cdee:	db6b      	blt.n	801cec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cdf0:	4580      	cmp	r8, r0
 801cdf2:	dd69      	ble.n	801cec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cdf4:	f1bc 0f00 	cmp.w	ip, #0
 801cdf8:	db66      	blt.n	801cec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cdfa:	45e1      	cmp	r9, ip
 801cdfc:	dd64      	ble.n	801cec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cdfe:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801ce02:	f01e 0f01 	tst.w	lr, #1
 801ce06:	5d16      	ldrb	r6, [r2, r4]
 801ce08:	bf0c      	ite	eq
 801ce0a:	f006 060f 	andeq.w	r6, r6, #15
 801ce0e:	1136      	asrne	r6, r6, #4
 801ce10:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801ce14:	b2f6      	uxtb	r6, r6
 801ce16:	f110 0a01 	adds.w	sl, r0, #1
 801ce1a:	d457      	bmi.n	801cecc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801ce1c:	45d0      	cmp	r8, sl
 801ce1e:	dd55      	ble.n	801cecc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801ce20:	f1bc 0f00 	cmp.w	ip, #0
 801ce24:	db52      	blt.n	801cecc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801ce26:	45e1      	cmp	r9, ip
 801ce28:	dd50      	ble.n	801cecc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801ce2a:	2f00      	cmp	r7, #0
 801ce2c:	f000 80ac 	beq.w	801cf88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801ce30:	f10e 0b01 	add.w	fp, lr, #1
 801ce34:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801ce38:	f01b 0f01 	tst.w	fp, #1
 801ce3c:	5d14      	ldrb	r4, [r2, r4]
 801ce3e:	bf0c      	ite	eq
 801ce40:	f004 040f 	andeq.w	r4, r4, #15
 801ce44:	1124      	asrne	r4, r4, #4
 801ce46:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ce4a:	b2e4      	uxtb	r4, r4
 801ce4c:	2d00      	cmp	r5, #0
 801ce4e:	f000 8096 	beq.w	801cf7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801ce52:	2800      	cmp	r0, #0
 801ce54:	f10c 0c01 	add.w	ip, ip, #1
 801ce58:	db3c      	blt.n	801ced4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801ce5a:	4580      	cmp	r8, r0
 801ce5c:	dd3a      	ble.n	801ced4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801ce5e:	f1bc 0f00 	cmp.w	ip, #0
 801ce62:	db37      	blt.n	801ced4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801ce64:	45e1      	cmp	r9, ip
 801ce66:	dd35      	ble.n	801ced4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801ce68:	eb03 0b0e 	add.w	fp, r3, lr
 801ce6c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801ce70:	f01b 0f01 	tst.w	fp, #1
 801ce74:	5c10      	ldrb	r0, [r2, r0]
 801ce76:	bf0c      	ite	eq
 801ce78:	f000 000f 	andeq.w	r0, r0, #15
 801ce7c:	1100      	asrne	r0, r0, #4
 801ce7e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ce82:	b2c0      	uxtb	r0, r0
 801ce84:	f1ba 0f00 	cmp.w	sl, #0
 801ce88:	db26      	blt.n	801ced8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801ce8a:	45d0      	cmp	r8, sl
 801ce8c:	dd24      	ble.n	801ced8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801ce8e:	f1bc 0f00 	cmp.w	ip, #0
 801ce92:	db21      	blt.n	801ced8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801ce94:	45e1      	cmp	r9, ip
 801ce96:	dd1f      	ble.n	801ced8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801ce98:	b307      	cbz	r7, 801cedc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801ce9a:	3301      	adds	r3, #1
 801ce9c:	449e      	add	lr, r3
 801ce9e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801cea2:	f01e 0f01 	tst.w	lr, #1
 801cea6:	5cd3      	ldrb	r3, [r2, r3]
 801cea8:	bf0c      	ite	eq
 801ceaa:	f003 030f 	andeq.w	r3, r3, #15
 801ceae:	111b      	asrne	r3, r3, #4
 801ceb0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ceb4:	b2db      	uxtb	r3, r3
 801ceb6:	2f0f      	cmp	r7, #15
 801ceb8:	d911      	bls.n	801cede <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801ceba:	4b35      	ldr	r3, [pc, #212]	; (801cf90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801cebc:	f240 1157 	movw	r1, #343	; 0x157
 801cec0:	4a34      	ldr	r2, [pc, #208]	; (801cf94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801cec2:	4835      	ldr	r0, [pc, #212]	; (801cf98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801cec4:	f000 ff76 	bl	801ddb4 <__assert_func>
 801cec8:	2600      	movs	r6, #0
 801ceca:	e7a4      	b.n	801ce16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801cecc:	2400      	movs	r4, #0
 801cece:	e7bd      	b.n	801ce4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801ced0:	463c      	mov	r4, r7
 801ced2:	e7be      	b.n	801ce52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801ced4:	2000      	movs	r0, #0
 801ced6:	e7d5      	b.n	801ce84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801ced8:	2300      	movs	r3, #0
 801ceda:	e7ec      	b.n	801ceb6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801cedc:	463b      	mov	r3, r7
 801cede:	2d0f      	cmp	r5, #15
 801cee0:	d8eb      	bhi.n	801ceba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801cee2:	b2bf      	uxth	r7, r7
 801cee4:	b2ad      	uxth	r5, r5
 801cee6:	fb07 f205 	mul.w	r2, r7, r5
 801ceea:	013f      	lsls	r7, r7, #4
 801ceec:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801cef0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801cef4:	1abf      	subs	r7, r7, r2
 801cef6:	b2ad      	uxth	r5, r5
 801cef8:	b2bf      	uxth	r7, r7
 801cefa:	ebac 0c05 	sub.w	ip, ip, r5
 801cefe:	437c      	muls	r4, r7
 801cf00:	fa1f fc8c 	uxth.w	ip, ip
 801cf04:	fb06 440c 	mla	r4, r6, ip, r4
 801cf08:	fb05 4400 	mla	r4, r5, r0, r4
 801cf0c:	fb02 4203 	mla	r2, r2, r3, r4
 801cf10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cf14:	b38a      	cbz	r2, 801cf7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801cf16:	4b21      	ldr	r3, [pc, #132]	; (801cf9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801cf18:	681c      	ldr	r4, [r3, #0]
 801cf1a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801cf1e:	b2e5      	uxtb	r5, r4
 801cf20:	4353      	muls	r3, r2
 801cf22:	1c5a      	adds	r2, r3, #1
 801cf24:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cf28:	1212      	asrs	r2, r2, #8
 801cf2a:	b290      	uxth	r0, r2
 801cf2c:	43d2      	mvns	r2, r2
 801cf2e:	fb15 f500 	smulbb	r5, r5, r0
 801cf32:	b2d3      	uxtb	r3, r2
 801cf34:	780a      	ldrb	r2, [r1, #0]
 801cf36:	fb02 5203 	mla	r2, r2, r3, r5
 801cf3a:	b292      	uxth	r2, r2
 801cf3c:	1c55      	adds	r5, r2, #1
 801cf3e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cf42:	784d      	ldrb	r5, [r1, #1]
 801cf44:	fb15 f503 	smulbb	r5, r5, r3
 801cf48:	1212      	asrs	r2, r2, #8
 801cf4a:	700a      	strb	r2, [r1, #0]
 801cf4c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801cf50:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801cf54:	fb02 5200 	mla	r2, r2, r0, r5
 801cf58:	b292      	uxth	r2, r2
 801cf5a:	1c55      	adds	r5, r2, #1
 801cf5c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cf60:	1212      	asrs	r2, r2, #8
 801cf62:	704a      	strb	r2, [r1, #1]
 801cf64:	788a      	ldrb	r2, [r1, #2]
 801cf66:	fb12 f303 	smulbb	r3, r2, r3
 801cf6a:	fb04 3300 	mla	r3, r4, r0, r3
 801cf6e:	b29b      	uxth	r3, r3
 801cf70:	1c5a      	adds	r2, r3, #1
 801cf72:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cf76:	121b      	asrs	r3, r3, #8
 801cf78:	708b      	strb	r3, [r1, #2]
 801cf7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf7e:	2f0f      	cmp	r7, #15
 801cf80:	d89b      	bhi.n	801ceba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801cf82:	462b      	mov	r3, r5
 801cf84:	4628      	mov	r0, r5
 801cf86:	e7ac      	b.n	801cee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801cf88:	2d00      	cmp	r5, #0
 801cf8a:	d1a1      	bne.n	801ced0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801cf8c:	462c      	mov	r4, r5
 801cf8e:	e7f8      	b.n	801cf82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801cf90:	08021f95 	.word	0x08021f95
 801cf94:	080224ff 	.word	0x080224ff
 801cf98:	0802205e 	.word	0x0802205e
 801cf9c:	2000df78 	.word	0x2000df78

0801cfa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfa4:	ed2d 8b08 	vpush	{d8-d11}
 801cfa8:	b097      	sub	sp, #92	; 0x5c
 801cfaa:	eeb0 aa40 	vmov.f32	s20, s0
 801cfae:	eef0 9a60 	vmov.f32	s19, s1
 801cfb2:	9214      	str	r2, [sp, #80]	; 0x50
 801cfb4:	eeb0 9a41 	vmov.f32	s18, s2
 801cfb8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801cfba:	eeb0 8a62 	vmov.f32	s16, s5
 801cfbe:	9309      	str	r3, [sp, #36]	; 0x24
 801cfc0:	eef0 8a43 	vmov.f32	s17, s6
 801cfc4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801cfc8:	eef0 ba44 	vmov.f32	s23, s8
 801cfcc:	9015      	str	r0, [sp, #84]	; 0x54
 801cfce:	eeb0 ba64 	vmov.f32	s22, s9
 801cfd2:	6850      	ldr	r0, [r2, #4]
 801cfd4:	eef0 aa45 	vmov.f32	s21, s10
 801cfd8:	910c      	str	r1, [sp, #48]	; 0x30
 801cfda:	930e      	str	r3, [sp, #56]	; 0x38
 801cfdc:	6812      	ldr	r2, [r2, #0]
 801cfde:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801cfe2:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801cfe6:	fb00 1303 	mla	r3, r0, r3, r1
 801cfea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfee:	eb02 0a03 	add.w	sl, r2, r3
 801cff2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cff4:	689b      	ldr	r3, [r3, #8]
 801cff6:	3301      	adds	r3, #1
 801cff8:	f023 0301 	bic.w	r3, r3, #1
 801cffc:	930f      	str	r3, [sp, #60]	; 0x3c
 801cffe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d000:	681f      	ldr	r7, [r3, #0]
 801d002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d004:	2b00      	cmp	r3, #0
 801d006:	dc03      	bgt.n	801d010 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d008:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	f340 8247 	ble.w	801d49e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801d010:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d012:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d016:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d01a:	1e48      	subs	r0, r1, #1
 801d01c:	f102 3cff 	add.w	ip, r2, #4294967295
 801d020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d022:	2b00      	cmp	r3, #0
 801d024:	f340 80e5 	ble.w	801d1f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801d028:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801d02c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d030:	d406      	bmi.n	801d040 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d032:	4586      	cmp	lr, r0
 801d034:	da04      	bge.n	801d040 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d036:	2b00      	cmp	r3, #0
 801d038:	db02      	blt.n	801d040 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d03a:	4563      	cmp	r3, ip
 801d03c:	f2c0 80da 	blt.w	801d1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d040:	f11e 0e01 	adds.w	lr, lr, #1
 801d044:	f100 80cb 	bmi.w	801d1de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d048:	4571      	cmp	r1, lr
 801d04a:	f2c0 80c8 	blt.w	801d1de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d04e:	3301      	adds	r3, #1
 801d050:	f100 80c5 	bmi.w	801d1de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d054:	429a      	cmp	r2, r3
 801d056:	f2c0 80c2 	blt.w	801d1de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d05c:	46d0      	mov	r8, sl
 801d05e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801d062:	930d      	str	r3, [sp, #52]	; 0x34
 801d064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d066:	2b00      	cmp	r3, #0
 801d068:	f340 80e3 	ble.w	801d232 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801d06c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d06e:	1430      	asrs	r0, r6, #16
 801d070:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801d074:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d078:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d07c:	142b      	asrs	r3, r5, #16
 801d07e:	f100 812e 	bmi.w	801d2de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d082:	f10c 3bff 	add.w	fp, ip, #4294967295
 801d086:	455b      	cmp	r3, fp
 801d088:	f280 8129 	bge.w	801d2de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d08c:	2800      	cmp	r0, #0
 801d08e:	f2c0 8126 	blt.w	801d2de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d092:	f10e 3bff 	add.w	fp, lr, #4294967295
 801d096:	4558      	cmp	r0, fp
 801d098:	f280 8121 	bge.w	801d2de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d09c:	fb00 3309 	mla	r3, r0, r9, r3
 801d0a0:	0858      	lsrs	r0, r3, #1
 801d0a2:	07dc      	lsls	r4, r3, #31
 801d0a4:	f817 c000 	ldrb.w	ip, [r7, r0]
 801d0a8:	bf54      	ite	pl
 801d0aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d0ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d0b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d0b6:	fa5f fc8c 	uxtb.w	ip, ip
 801d0ba:	2a00      	cmp	r2, #0
 801d0bc:	f000 80fe 	beq.w	801d2bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d0c0:	1c58      	adds	r0, r3, #1
 801d0c2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d0c6:	07c0      	lsls	r0, r0, #31
 801d0c8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d0cc:	bf54      	ite	pl
 801d0ce:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d0d2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d0d6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d0da:	fa5f f08e 	uxtb.w	r0, lr
 801d0de:	9010      	str	r0, [sp, #64]	; 0x40
 801d0e0:	b1d9      	cbz	r1, 801d11a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801d0e2:	444b      	add	r3, r9
 801d0e4:	0858      	lsrs	r0, r3, #1
 801d0e6:	07dc      	lsls	r4, r3, #31
 801d0e8:	f103 0301 	add.w	r3, r3, #1
 801d0ec:	5c38      	ldrb	r0, [r7, r0]
 801d0ee:	bf54      	ite	pl
 801d0f0:	f000 000f 	andpl.w	r0, r0, #15
 801d0f4:	1100      	asrmi	r0, r0, #4
 801d0f6:	07dc      	lsls	r4, r3, #31
 801d0f8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d0fc:	b2c0      	uxtb	r0, r0
 801d0fe:	900a      	str	r0, [sp, #40]	; 0x28
 801d100:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801d104:	f817 e000 	ldrb.w	lr, [r7, r0]
 801d108:	bf54      	ite	pl
 801d10a:	f00e 030f 	andpl.w	r3, lr, #15
 801d10e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801d112:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d116:	b2db      	uxtb	r3, r3
 801d118:	9311      	str	r3, [sp, #68]	; 0x44
 801d11a:	b292      	uxth	r2, r2
 801d11c:	b289      	uxth	r1, r1
 801d11e:	0113      	lsls	r3, r2, #4
 801d120:	fb02 f001 	mul.w	r0, r2, r1
 801d124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d126:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d12a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801d12e:	1a1b      	subs	r3, r3, r0
 801d130:	b289      	uxth	r1, r1
 801d132:	b29b      	uxth	r3, r3
 801d134:	ebae 0e01 	sub.w	lr, lr, r1
 801d138:	4353      	muls	r3, r2
 801d13a:	fa1f fe8e 	uxth.w	lr, lr
 801d13e:	fb0c 320e 	mla	r2, ip, lr, r3
 801d142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d144:	fb01 2203 	mla	r2, r1, r3, r2
 801d148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d14a:	fb00 2203 	mla	r2, r0, r3, r2
 801d14e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d152:	2a00      	cmp	r2, #0
 801d154:	d039      	beq.n	801d1ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d156:	4bc7      	ldr	r3, [pc, #796]	; (801d474 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801d158:	6819      	ldr	r1, [r3, #0]
 801d15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d15c:	fa5f fc81 	uxtb.w	ip, r1
 801d160:	435a      	muls	r2, r3
 801d162:	1c53      	adds	r3, r2, #1
 801d164:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d168:	1212      	asrs	r2, r2, #8
 801d16a:	b290      	uxth	r0, r2
 801d16c:	43d2      	mvns	r2, r2
 801d16e:	fb1c fc00 	smulbb	ip, ip, r0
 801d172:	b2d3      	uxtb	r3, r2
 801d174:	f898 2000 	ldrb.w	r2, [r8]
 801d178:	fb02 c203 	mla	r2, r2, r3, ip
 801d17c:	b292      	uxth	r2, r2
 801d17e:	f102 0c01 	add.w	ip, r2, #1
 801d182:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d186:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d18a:	fb1c fc03 	smulbb	ip, ip, r3
 801d18e:	1212      	asrs	r2, r2, #8
 801d190:	f888 2000 	strb.w	r2, [r8]
 801d194:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801d198:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801d19c:	fb02 c200 	mla	r2, r2, r0, ip
 801d1a0:	b292      	uxth	r2, r2
 801d1a2:	f102 0c01 	add.w	ip, r2, #1
 801d1a6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d1aa:	1212      	asrs	r2, r2, #8
 801d1ac:	f888 2001 	strb.w	r2, [r8, #1]
 801d1b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d1b4:	fb12 f303 	smulbb	r3, r2, r3
 801d1b8:	fb01 3300 	mla	r3, r1, r0, r3
 801d1bc:	b29b      	uxth	r3, r3
 801d1be:	1c5a      	adds	r2, r3, #1
 801d1c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d1c4:	121b      	asrs	r3, r3, #8
 801d1c6:	f888 3002 	strb.w	r3, [r8, #2]
 801d1ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d1cc:	f108 0803 	add.w	r8, r8, #3
 801d1d0:	441d      	add	r5, r3
 801d1d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d1d4:	441e      	add	r6, r3
 801d1d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d1d8:	3b01      	subs	r3, #1
 801d1da:	930d      	str	r3, [sp, #52]	; 0x34
 801d1dc:	e742      	b.n	801d064 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801d1de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d1e0:	f10a 0a03 	add.w	sl, sl, #3
 801d1e4:	441d      	add	r5, r3
 801d1e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d1e8:	441e      	add	r6, r3
 801d1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1ec:	3b01      	subs	r3, #1
 801d1ee:	9309      	str	r3, [sp, #36]	; 0x24
 801d1f0:	e716      	b.n	801d020 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d1f2:	d024      	beq.n	801d23e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1f6:	982b      	ldr	r0, [sp, #172]	; 0xac
 801d1f8:	3b01      	subs	r3, #1
 801d1fa:	fb00 5003 	mla	r0, r0, r3, r5
 801d1fe:	1400      	asrs	r0, r0, #16
 801d200:	f53f af2b 	bmi.w	801d05a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d204:	3901      	subs	r1, #1
 801d206:	4288      	cmp	r0, r1
 801d208:	f6bf af27 	bge.w	801d05a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d20c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801d20e:	fb01 6303 	mla	r3, r1, r3, r6
 801d212:	141b      	asrs	r3, r3, #16
 801d214:	f53f af21 	bmi.w	801d05a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d218:	3a01      	subs	r2, #1
 801d21a:	4293      	cmp	r3, r2
 801d21c:	f6bf af1d 	bge.w	801d05a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d220:	f10a 0e03 	add.w	lr, sl, #3
 801d224:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801d228:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801d22c:	f1b8 0f00 	cmp.w	r8, #0
 801d230:	dc76      	bgt.n	801d320 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801d232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d234:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d238:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d23c:	44a2      	add	sl, r4
 801d23e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d240:	2b00      	cmp	r3, #0
 801d242:	f340 812c 	ble.w	801d49e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801d246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d24a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d24c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d250:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d254:	eef0 6a48 	vmov.f32	s13, s16
 801d258:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d25c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d260:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d264:	ee16 5a90 	vmov	r5, s13
 801d268:	eef0 6a68 	vmov.f32	s13, s17
 801d26c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d270:	ee16 6a90 	vmov	r6, s13
 801d274:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d278:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d27c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d280:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d284:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d288:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d28c:	ee18 2a10 	vmov	r2, s16
 801d290:	eeb0 8a47 	vmov.f32	s16, s14
 801d294:	fb92 f3f3 	sdiv	r3, r2, r3
 801d298:	ee18 2a90 	vmov	r2, s17
 801d29c:	932b      	str	r3, [sp, #172]	; 0xac
 801d29e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d2a0:	eef0 8a67 	vmov.f32	s17, s15
 801d2a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2a8:	932c      	str	r3, [sp, #176]	; 0xb0
 801d2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d2ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d2ae:	3b01      	subs	r3, #1
 801d2b0:	930c      	str	r3, [sp, #48]	; 0x30
 801d2b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d2b4:	bf08      	it	eq
 801d2b6:	4613      	moveq	r3, r2
 801d2b8:	9309      	str	r3, [sp, #36]	; 0x24
 801d2ba:	e6a2      	b.n	801d002 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d2bc:	2900      	cmp	r1, #0
 801d2be:	f43f af2c 	beq.w	801d11a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801d2c2:	eb09 0003 	add.w	r0, r9, r3
 801d2c6:	0843      	lsrs	r3, r0, #1
 801d2c8:	07c0      	lsls	r0, r0, #31
 801d2ca:	5cfb      	ldrb	r3, [r7, r3]
 801d2cc:	bf54      	ite	pl
 801d2ce:	f003 030f 	andpl.w	r3, r3, #15
 801d2d2:	111b      	asrmi	r3, r3, #4
 801d2d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d2d8:	b2db      	uxtb	r3, r3
 801d2da:	930a      	str	r3, [sp, #40]	; 0x28
 801d2dc:	e71d      	b.n	801d11a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801d2de:	f113 0b01 	adds.w	fp, r3, #1
 801d2e2:	f53f af72 	bmi.w	801d1ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2e6:	45dc      	cmp	ip, fp
 801d2e8:	f6ff af6f 	blt.w	801d1ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2ec:	f110 0b01 	adds.w	fp, r0, #1
 801d2f0:	f53f af6b 	bmi.w	801d1ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2f4:	45de      	cmp	lr, fp
 801d2f6:	f6ff af68 	blt.w	801d1ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2fa:	9302      	str	r3, [sp, #8]
 801d2fc:	fa0f f38e 	sxth.w	r3, lr
 801d300:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d302:	9301      	str	r3, [sp, #4]
 801d304:	fa0f f38c 	sxth.w	r3, ip
 801d308:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d30c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d310:	9300      	str	r3, [sp, #0]
 801d312:	463a      	mov	r2, r7
 801d314:	464b      	mov	r3, r9
 801d316:	4641      	mov	r1, r8
 801d318:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d31a:	f7ff fd59 	bl	801cdd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801d31e:	e754      	b.n	801d1ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d320:	142a      	asrs	r2, r5, #16
 801d322:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d326:	1433      	asrs	r3, r6, #16
 801d328:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d32c:	fb09 2303 	mla	r3, r9, r3, r2
 801d330:	085a      	lsrs	r2, r3, #1
 801d332:	07dc      	lsls	r4, r3, #31
 801d334:	5cba      	ldrb	r2, [r7, r2]
 801d336:	bf54      	ite	pl
 801d338:	f002 020f 	andpl.w	r2, r2, #15
 801d33c:	1112      	asrmi	r2, r2, #4
 801d33e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d342:	b2d2      	uxtb	r2, r2
 801d344:	2900      	cmp	r1, #0
 801d346:	f000 8097 	beq.w	801d478 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801d34a:	f103 0b01 	add.w	fp, r3, #1
 801d34e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801d352:	f01b 0f01 	tst.w	fp, #1
 801d356:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d35a:	bf0c      	ite	eq
 801d35c:	f00c 0c0f 	andeq.w	ip, ip, #15
 801d360:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801d364:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d368:	fa5f f48c 	uxtb.w	r4, ip
 801d36c:	9412      	str	r4, [sp, #72]	; 0x48
 801d36e:	b300      	cbz	r0, 801d3b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d370:	444b      	add	r3, r9
 801d372:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d376:	07dc      	lsls	r4, r3, #31
 801d378:	f103 0301 	add.w	r3, r3, #1
 801d37c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d380:	bf54      	ite	pl
 801d382:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d386:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d38a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d38e:	fa5f f48c 	uxtb.w	r4, ip
 801d392:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d396:	940b      	str	r4, [sp, #44]	; 0x2c
 801d398:	07dc      	lsls	r4, r3, #31
 801d39a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d39e:	bf54      	ite	pl
 801d3a0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d3a4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d3a8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d3ac:	fa5f f38c 	uxtb.w	r3, ip
 801d3b0:	9313      	str	r3, [sp, #76]	; 0x4c
 801d3b2:	b289      	uxth	r1, r1
 801d3b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d3b6:	b280      	uxth	r0, r0
 801d3b8:	fb01 f300 	mul.w	r3, r1, r0
 801d3bc:	0109      	lsls	r1, r1, #4
 801d3be:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801d3c2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801d3c6:	1ac9      	subs	r1, r1, r3
 801d3c8:	b280      	uxth	r0, r0
 801d3ca:	b289      	uxth	r1, r1
 801d3cc:	ebac 0c00 	sub.w	ip, ip, r0
 801d3d0:	4361      	muls	r1, r4
 801d3d2:	fa1f fc8c 	uxth.w	ip, ip
 801d3d6:	fb02 120c 	mla	r2, r2, ip, r1
 801d3da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d3dc:	fb00 2001 	mla	r0, r0, r1, r2
 801d3e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d3e2:	fb03 0302 	mla	r3, r3, r2, r0
 801d3e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d039      	beq.n	801d462 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d3ee:	4a21      	ldr	r2, [pc, #132]	; (801d474 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801d3f0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d3f4:	6810      	ldr	r0, [r2, #0]
 801d3f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d3f8:	fa5f fc80 	uxtb.w	ip, r0
 801d3fc:	4353      	muls	r3, r2
 801d3fe:	1c5a      	adds	r2, r3, #1
 801d400:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d404:	121b      	asrs	r3, r3, #8
 801d406:	b29a      	uxth	r2, r3
 801d408:	43db      	mvns	r3, r3
 801d40a:	fb1c fc02 	smulbb	ip, ip, r2
 801d40e:	b2db      	uxtb	r3, r3
 801d410:	fb01 c103 	mla	r1, r1, r3, ip
 801d414:	b289      	uxth	r1, r1
 801d416:	f101 0c01 	add.w	ip, r1, #1
 801d41a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d41e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801d422:	fb1c fc03 	smulbb	ip, ip, r3
 801d426:	1209      	asrs	r1, r1, #8
 801d428:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d42c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801d430:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801d434:	fb01 c102 	mla	r1, r1, r2, ip
 801d438:	b289      	uxth	r1, r1
 801d43a:	f101 0c01 	add.w	ip, r1, #1
 801d43e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d442:	1209      	asrs	r1, r1, #8
 801d444:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d448:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d44c:	fb11 f303 	smulbb	r3, r1, r3
 801d450:	fb00 3002 	mla	r0, r0, r2, r3
 801d454:	b280      	uxth	r0, r0
 801d456:	1c42      	adds	r2, r0, #1
 801d458:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d45c:	1200      	asrs	r0, r0, #8
 801d45e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801d462:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d464:	f10e 0e03 	add.w	lr, lr, #3
 801d468:	f108 38ff 	add.w	r8, r8, #4294967295
 801d46c:	441d      	add	r5, r3
 801d46e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d470:	441e      	add	r6, r3
 801d472:	e6db      	b.n	801d22c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d474:	2000df78 	.word	0x2000df78
 801d478:	2800      	cmp	r0, #0
 801d47a:	d09a      	beq.n	801d3b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d47c:	444b      	add	r3, r9
 801d47e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d482:	07db      	lsls	r3, r3, #31
 801d484:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d488:	bf54      	ite	pl
 801d48a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d48e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d492:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d496:	fa5f f38c 	uxtb.w	r3, ip
 801d49a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d49c:	e789      	b.n	801d3b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d49e:	b017      	add	sp, #92	; 0x5c
 801d4a0:	ecbd 8b08 	vpop	{d8-d11}
 801d4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d4a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801d4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4ac:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801d4b0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801d4b4:	2800      	cmp	r0, #0
 801d4b6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801d4ba:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801d4be:	fb0c 0e03 	mla	lr, ip, r3, r0
 801d4c2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801d4c6:	db6b      	blt.n	801d5a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d4c8:	4580      	cmp	r8, r0
 801d4ca:	dd69      	ble.n	801d5a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d4cc:	f1bc 0f00 	cmp.w	ip, #0
 801d4d0:	db66      	blt.n	801d5a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d4d2:	45e1      	cmp	r9, ip
 801d4d4:	dd64      	ble.n	801d5a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d4d6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801d4da:	f01e 0f01 	tst.w	lr, #1
 801d4de:	5d16      	ldrb	r6, [r2, r4]
 801d4e0:	bf0c      	ite	eq
 801d4e2:	f006 060f 	andeq.w	r6, r6, #15
 801d4e6:	1136      	asrne	r6, r6, #4
 801d4e8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801d4ec:	b2f6      	uxtb	r6, r6
 801d4ee:	f110 0a01 	adds.w	sl, r0, #1
 801d4f2:	d457      	bmi.n	801d5a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d4f4:	45d0      	cmp	r8, sl
 801d4f6:	dd55      	ble.n	801d5a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d4f8:	f1bc 0f00 	cmp.w	ip, #0
 801d4fc:	db52      	blt.n	801d5a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d4fe:	45e1      	cmp	r9, ip
 801d500:	dd50      	ble.n	801d5a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d502:	2f00      	cmp	r7, #0
 801d504:	f000 80a5 	beq.w	801d652 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801d508:	f10e 0b01 	add.w	fp, lr, #1
 801d50c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801d510:	f01b 0f01 	tst.w	fp, #1
 801d514:	5d14      	ldrb	r4, [r2, r4]
 801d516:	bf0c      	ite	eq
 801d518:	f004 040f 	andeq.w	r4, r4, #15
 801d51c:	1124      	asrne	r4, r4, #4
 801d51e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801d522:	b2e4      	uxtb	r4, r4
 801d524:	2d00      	cmp	r5, #0
 801d526:	f000 808f 	beq.w	801d648 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801d52a:	2800      	cmp	r0, #0
 801d52c:	f10c 0c01 	add.w	ip, ip, #1
 801d530:	db3c      	blt.n	801d5ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d532:	4580      	cmp	r8, r0
 801d534:	dd3a      	ble.n	801d5ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d536:	f1bc 0f00 	cmp.w	ip, #0
 801d53a:	db37      	blt.n	801d5ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d53c:	45e1      	cmp	r9, ip
 801d53e:	dd35      	ble.n	801d5ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d540:	eb03 0b0e 	add.w	fp, r3, lr
 801d544:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801d548:	f01b 0f01 	tst.w	fp, #1
 801d54c:	5c10      	ldrb	r0, [r2, r0]
 801d54e:	bf0c      	ite	eq
 801d550:	f000 000f 	andeq.w	r0, r0, #15
 801d554:	1100      	asrne	r0, r0, #4
 801d556:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d55a:	b2c0      	uxtb	r0, r0
 801d55c:	f1ba 0f00 	cmp.w	sl, #0
 801d560:	db26      	blt.n	801d5b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d562:	45d0      	cmp	r8, sl
 801d564:	dd24      	ble.n	801d5b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d566:	f1bc 0f00 	cmp.w	ip, #0
 801d56a:	db21      	blt.n	801d5b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d56c:	45e1      	cmp	r9, ip
 801d56e:	dd1f      	ble.n	801d5b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d570:	b307      	cbz	r7, 801d5b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801d572:	3301      	adds	r3, #1
 801d574:	449e      	add	lr, r3
 801d576:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801d57a:	f01e 0f01 	tst.w	lr, #1
 801d57e:	5cd3      	ldrb	r3, [r2, r3]
 801d580:	bf0c      	ite	eq
 801d582:	f003 030f 	andeq.w	r3, r3, #15
 801d586:	111b      	asrne	r3, r3, #4
 801d588:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d58c:	b2db      	uxtb	r3, r3
 801d58e:	2f0f      	cmp	r7, #15
 801d590:	d911      	bls.n	801d5b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801d592:	4b32      	ldr	r3, [pc, #200]	; (801d65c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801d594:	f240 1157 	movw	r1, #343	; 0x157
 801d598:	4a31      	ldr	r2, [pc, #196]	; (801d660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801d59a:	4832      	ldr	r0, [pc, #200]	; (801d664 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801d59c:	f000 fc0a 	bl	801ddb4 <__assert_func>
 801d5a0:	2600      	movs	r6, #0
 801d5a2:	e7a4      	b.n	801d4ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801d5a4:	2400      	movs	r4, #0
 801d5a6:	e7bd      	b.n	801d524 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801d5a8:	463c      	mov	r4, r7
 801d5aa:	e7be      	b.n	801d52a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801d5ac:	2000      	movs	r0, #0
 801d5ae:	e7d5      	b.n	801d55c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	e7ec      	b.n	801d58e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801d5b4:	463b      	mov	r3, r7
 801d5b6:	2d0f      	cmp	r5, #15
 801d5b8:	d8eb      	bhi.n	801d592 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801d5ba:	b2bf      	uxth	r7, r7
 801d5bc:	b2ad      	uxth	r5, r5
 801d5be:	fb07 f205 	mul.w	r2, r7, r5
 801d5c2:	013f      	lsls	r7, r7, #4
 801d5c4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801d5c8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801d5cc:	1abf      	subs	r7, r7, r2
 801d5ce:	b2ad      	uxth	r5, r5
 801d5d0:	b2bf      	uxth	r7, r7
 801d5d2:	ebac 0c05 	sub.w	ip, ip, r5
 801d5d6:	437c      	muls	r4, r7
 801d5d8:	fa1f fc8c 	uxth.w	ip, ip
 801d5dc:	fb06 440c 	mla	r4, r6, ip, r4
 801d5e0:	fb05 4400 	mla	r4, r5, r0, r4
 801d5e4:	fb02 4303 	mla	r3, r2, r3, r4
 801d5e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d5ec:	b353      	cbz	r3, 801d644 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801d5ee:	4a1e      	ldr	r2, [pc, #120]	; (801d668 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801d5f0:	7808      	ldrb	r0, [r1, #0]
 801d5f2:	6814      	ldr	r4, [r2, #0]
 801d5f4:	b29a      	uxth	r2, r3
 801d5f6:	43db      	mvns	r3, r3
 801d5f8:	b2e5      	uxtb	r5, r4
 801d5fa:	b2db      	uxtb	r3, r3
 801d5fc:	fb15 f502 	smulbb	r5, r5, r2
 801d600:	fb00 5003 	mla	r0, r0, r3, r5
 801d604:	b280      	uxth	r0, r0
 801d606:	1c45      	adds	r5, r0, #1
 801d608:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d60c:	784d      	ldrb	r5, [r1, #1]
 801d60e:	fb15 f503 	smulbb	r5, r5, r3
 801d612:	1200      	asrs	r0, r0, #8
 801d614:	7008      	strb	r0, [r1, #0]
 801d616:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801d61a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801d61e:	fb00 5002 	mla	r0, r0, r2, r5
 801d622:	b280      	uxth	r0, r0
 801d624:	1c45      	adds	r5, r0, #1
 801d626:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d62a:	1200      	asrs	r0, r0, #8
 801d62c:	7048      	strb	r0, [r1, #1]
 801d62e:	7888      	ldrb	r0, [r1, #2]
 801d630:	fb10 f303 	smulbb	r3, r0, r3
 801d634:	fb04 3202 	mla	r2, r4, r2, r3
 801d638:	b292      	uxth	r2, r2
 801d63a:	1c53      	adds	r3, r2, #1
 801d63c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d640:	1212      	asrs	r2, r2, #8
 801d642:	708a      	strb	r2, [r1, #2]
 801d644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d648:	2f0f      	cmp	r7, #15
 801d64a:	d8a2      	bhi.n	801d592 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801d64c:	462b      	mov	r3, r5
 801d64e:	4628      	mov	r0, r5
 801d650:	e7b3      	b.n	801d5ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801d652:	2d00      	cmp	r5, #0
 801d654:	d1a8      	bne.n	801d5a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801d656:	462c      	mov	r4, r5
 801d658:	e7f8      	b.n	801d64c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801d65a:	bf00      	nop
 801d65c:	08021f95 	.word	0x08021f95
 801d660:	080224ff 	.word	0x080224ff
 801d664:	0802205e 	.word	0x0802205e
 801d668:	2000df78 	.word	0x2000df78

0801d66c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d670:	ed2d 8b08 	vpush	{d8-d11}
 801d674:	b093      	sub	sp, #76	; 0x4c
 801d676:	461c      	mov	r4, r3
 801d678:	eeb0 aa40 	vmov.f32	s20, s0
 801d67c:	920c      	str	r2, [sp, #48]	; 0x30
 801d67e:	eef0 9a60 	vmov.f32	s19, s1
 801d682:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d684:	eeb0 9a41 	vmov.f32	s18, s2
 801d688:	9011      	str	r0, [sp, #68]	; 0x44
 801d68a:	eeb0 8a62 	vmov.f32	s16, s5
 801d68e:	6850      	ldr	r0, [r2, #4]
 801d690:	eef0 8a43 	vmov.f32	s17, s6
 801d694:	9107      	str	r1, [sp, #28]
 801d696:	eef0 ba44 	vmov.f32	s23, s8
 801d69a:	6812      	ldr	r2, [r2, #0]
 801d69c:	eeb0 ba64 	vmov.f32	s22, s9
 801d6a0:	eef0 aa45 	vmov.f32	s21, s10
 801d6a4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801d6a8:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801d6ac:	fb00 1303 	mla	r3, r0, r3, r1
 801d6b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6b4:	eb02 0b03 	add.w	fp, r2, r3
 801d6b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d6ba:	689b      	ldr	r3, [r3, #8]
 801d6bc:	3301      	adds	r3, #1
 801d6be:	f023 0301 	bic.w	r3, r3, #1
 801d6c2:	9309      	str	r3, [sp, #36]	; 0x24
 801d6c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d6c6:	f8d3 8000 	ldr.w	r8, [r3]
 801d6ca:	9b07      	ldr	r3, [sp, #28]
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	dc03      	bgt.n	801d6d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	f340 822b 	ble.w	801db2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d6d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d6da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d6de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d6e2:	1e48      	subs	r0, r1, #1
 801d6e4:	1e57      	subs	r7, r2, #1
 801d6e6:	2c00      	cmp	r4, #0
 801d6e8:	f340 80d7 	ble.w	801d89a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801d6ec:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d6f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d6f4:	d406      	bmi.n	801d704 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d6f6:	4584      	cmp	ip, r0
 801d6f8:	da04      	bge.n	801d704 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	db02      	blt.n	801d704 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d6fe:	42bb      	cmp	r3, r7
 801d700:	f2c0 80cc 	blt.w	801d89c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801d704:	f11c 0c01 	adds.w	ip, ip, #1
 801d708:	f100 80bf 	bmi.w	801d88a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d70c:	4561      	cmp	r1, ip
 801d70e:	f2c0 80bc 	blt.w	801d88a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d712:	3301      	adds	r3, #1
 801d714:	f100 80b9 	bmi.w	801d88a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d718:	429a      	cmp	r2, r3
 801d71a:	f2c0 80b6 	blt.w	801d88a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d71e:	46a2      	mov	sl, r4
 801d720:	465f      	mov	r7, fp
 801d722:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d726:	f1ba 0f00 	cmp.w	sl, #0
 801d72a:	f340 80d4 	ble.w	801d8d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d72e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801d732:	1430      	asrs	r0, r6, #16
 801d734:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d738:	9308      	str	r3, [sp, #32]
 801d73a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d73c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d740:	142b      	asrs	r3, r5, #16
 801d742:	f100 8124 	bmi.w	801d98e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d746:	f10c 32ff 	add.w	r2, ip, #4294967295
 801d74a:	4293      	cmp	r3, r2
 801d74c:	f280 811f 	bge.w	801d98e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d750:	2800      	cmp	r0, #0
 801d752:	f2c0 811c 	blt.w	801d98e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d756:	f10e 32ff 	add.w	r2, lr, #4294967295
 801d75a:	4290      	cmp	r0, r2
 801d75c:	f280 8117 	bge.w	801d98e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d760:	fb00 3309 	mla	r3, r0, r9, r3
 801d764:	0858      	lsrs	r0, r3, #1
 801d766:	07da      	lsls	r2, r3, #31
 801d768:	9a08      	ldr	r2, [sp, #32]
 801d76a:	f818 c000 	ldrb.w	ip, [r8, r0]
 801d76e:	bf54      	ite	pl
 801d770:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d774:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d778:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d77c:	fa5f fc8c 	uxtb.w	ip, ip
 801d780:	2a00      	cmp	r2, #0
 801d782:	f000 80ed 	beq.w	801d960 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801d786:	1c58      	adds	r0, r3, #1
 801d788:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d78c:	07c0      	lsls	r0, r0, #31
 801d78e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801d792:	bf54      	ite	pl
 801d794:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d798:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d79c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d7a0:	fa5f fe8e 	uxtb.w	lr, lr
 801d7a4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801d7a8:	b1c9      	cbz	r1, 801d7de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801d7aa:	444b      	add	r3, r9
 801d7ac:	0858      	lsrs	r0, r3, #1
 801d7ae:	07da      	lsls	r2, r3, #31
 801d7b0:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d7b4:	bf54      	ite	pl
 801d7b6:	f000 000f 	andpl.w	r0, r0, #15
 801d7ba:	1100      	asrmi	r0, r0, #4
 801d7bc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d7c0:	b2c0      	uxtb	r0, r0
 801d7c2:	900a      	str	r0, [sp, #40]	; 0x28
 801d7c4:	1c58      	adds	r0, r3, #1
 801d7c6:	0843      	lsrs	r3, r0, #1
 801d7c8:	07c2      	lsls	r2, r0, #31
 801d7ca:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d7ce:	bf54      	ite	pl
 801d7d0:	f003 030f 	andpl.w	r3, r3, #15
 801d7d4:	111b      	asrmi	r3, r3, #4
 801d7d6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d7da:	b2db      	uxtb	r3, r3
 801d7dc:	930e      	str	r3, [sp, #56]	; 0x38
 801d7de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d7e2:	b289      	uxth	r1, r1
 801d7e4:	fb02 f301 	mul.w	r3, r2, r1
 801d7e8:	0112      	lsls	r2, r2, #4
 801d7ea:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d7ee:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801d7f2:	1ad2      	subs	r2, r2, r3
 801d7f4:	b289      	uxth	r1, r1
 801d7f6:	b292      	uxth	r2, r2
 801d7f8:	1a40      	subs	r0, r0, r1
 801d7fa:	fa1f fe80 	uxth.w	lr, r0
 801d7fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d800:	4342      	muls	r2, r0
 801d802:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801d806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d808:	fb01 c102 	mla	r1, r1, r2, ip
 801d80c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d80e:	fb03 1302 	mla	r3, r3, r2, r1
 801d812:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d816:	b383      	cbz	r3, 801d87a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d818:	4ac7      	ldr	r2, [pc, #796]	; (801db38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801d81a:	2bff      	cmp	r3, #255	; 0xff
 801d81c:	6812      	ldr	r2, [r2, #0]
 801d81e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801d822:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801d826:	b2d2      	uxtb	r2, r2
 801d828:	f000 80ac 	beq.w	801d984 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801d82c:	b299      	uxth	r1, r3
 801d82e:	43db      	mvns	r3, r3
 801d830:	f897 c000 	ldrb.w	ip, [r7]
 801d834:	fb12 f201 	smulbb	r2, r2, r1
 801d838:	b2db      	uxtb	r3, r3
 801d83a:	fb10 f001 	smulbb	r0, r0, r1
 801d83e:	fb0c 2203 	mla	r2, ip, r3, r2
 801d842:	fb1e f101 	smulbb	r1, lr, r1
 801d846:	b292      	uxth	r2, r2
 801d848:	f102 0c01 	add.w	ip, r2, #1
 801d84c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d850:	1212      	asrs	r2, r2, #8
 801d852:	703a      	strb	r2, [r7, #0]
 801d854:	787a      	ldrb	r2, [r7, #1]
 801d856:	fb02 0003 	mla	r0, r2, r3, r0
 801d85a:	b280      	uxth	r0, r0
 801d85c:	1c42      	adds	r2, r0, #1
 801d85e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d862:	78ba      	ldrb	r2, [r7, #2]
 801d864:	fb02 1303 	mla	r3, r2, r3, r1
 801d868:	1200      	asrs	r0, r0, #8
 801d86a:	b29b      	uxth	r3, r3
 801d86c:	7078      	strb	r0, [r7, #1]
 801d86e:	f103 0e01 	add.w	lr, r3, #1
 801d872:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801d876:	121b      	asrs	r3, r3, #8
 801d878:	70bb      	strb	r3, [r7, #2]
 801d87a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d87c:	3703      	adds	r7, #3
 801d87e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d882:	441d      	add	r5, r3
 801d884:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d886:	441e      	add	r6, r3
 801d888:	e74d      	b.n	801d726 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d88a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d88c:	3c01      	subs	r4, #1
 801d88e:	f10b 0b03 	add.w	fp, fp, #3
 801d892:	441d      	add	r5, r3
 801d894:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d896:	441e      	add	r6, r3
 801d898:	e725      	b.n	801d6e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d89a:	d021      	beq.n	801d8e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801d89c:	1e63      	subs	r3, r4, #1
 801d89e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d8a0:	fb00 5003 	mla	r0, r0, r3, r5
 801d8a4:	1400      	asrs	r0, r0, #16
 801d8a6:	f53f af3a 	bmi.w	801d71e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d8aa:	3901      	subs	r1, #1
 801d8ac:	4288      	cmp	r0, r1
 801d8ae:	f6bf af36 	bge.w	801d71e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d8b2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d8b4:	fb01 6303 	mla	r3, r1, r3, r6
 801d8b8:	141b      	asrs	r3, r3, #16
 801d8ba:	f53f af30 	bmi.w	801d71e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d8be:	3a01      	subs	r2, #1
 801d8c0:	4293      	cmp	r3, r2
 801d8c2:	f6bf af2c 	bge.w	801d71e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d8c6:	f10b 0c03 	add.w	ip, fp, #3
 801d8ca:	46a6      	mov	lr, r4
 801d8cc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d8d0:	f1be 0f00 	cmp.w	lr, #0
 801d8d4:	dc79      	bgt.n	801d9ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801d8d6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801d8da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d8de:	44a3      	add	fp, r4
 801d8e0:	9b07      	ldr	r3, [sp, #28]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	f340 8123 	ble.w	801db2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d8e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d8ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d8ee:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d8f2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d8f6:	eef0 6a48 	vmov.f32	s13, s16
 801d8fa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d8fe:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d902:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d906:	ee16 5a90 	vmov	r5, s13
 801d90a:	eef0 6a68 	vmov.f32	s13, s17
 801d90e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d912:	ee16 6a90 	vmov	r6, s13
 801d916:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d91a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d91e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d922:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d926:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d92a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d92e:	ee18 2a10 	vmov	r2, s16
 801d932:	eeb0 8a47 	vmov.f32	s16, s14
 801d936:	fb92 f3f3 	sdiv	r3, r2, r3
 801d93a:	ee18 2a90 	vmov	r2, s17
 801d93e:	9327      	str	r3, [sp, #156]	; 0x9c
 801d940:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d942:	eef0 8a67 	vmov.f32	s17, s15
 801d946:	fb92 f3f3 	sdiv	r3, r2, r3
 801d94a:	9328      	str	r3, [sp, #160]	; 0xa0
 801d94c:	9b07      	ldr	r3, [sp, #28]
 801d94e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d950:	3b01      	subs	r3, #1
 801d952:	9307      	str	r3, [sp, #28]
 801d954:	bf08      	it	eq
 801d956:	4614      	moveq	r4, r2
 801d958:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d95a:	bf18      	it	ne
 801d95c:	461c      	movne	r4, r3
 801d95e:	e6b4      	b.n	801d6ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d960:	2900      	cmp	r1, #0
 801d962:	f43f af3c 	beq.w	801d7de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801d966:	eb09 0003 	add.w	r0, r9, r3
 801d96a:	0843      	lsrs	r3, r0, #1
 801d96c:	07c0      	lsls	r0, r0, #31
 801d96e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d972:	bf54      	ite	pl
 801d974:	f003 030f 	andpl.w	r3, r3, #15
 801d978:	111b      	asrmi	r3, r3, #4
 801d97a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d97e:	b2db      	uxtb	r3, r3
 801d980:	930a      	str	r3, [sp, #40]	; 0x28
 801d982:	e72c      	b.n	801d7de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801d984:	703a      	strb	r2, [r7, #0]
 801d986:	7078      	strb	r0, [r7, #1]
 801d988:	f887 e002 	strb.w	lr, [r7, #2]
 801d98c:	e775      	b.n	801d87a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d98e:	1c5a      	adds	r2, r3, #1
 801d990:	f53f af73 	bmi.w	801d87a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d994:	4594      	cmp	ip, r2
 801d996:	f6ff af70 	blt.w	801d87a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d99a:	1c42      	adds	r2, r0, #1
 801d99c:	f53f af6d 	bmi.w	801d87a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d9a0:	4596      	cmp	lr, r2
 801d9a2:	f6ff af6a 	blt.w	801d87a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d9a6:	9302      	str	r3, [sp, #8]
 801d9a8:	fa0f f38e 	sxth.w	r3, lr
 801d9ac:	9a08      	ldr	r2, [sp, #32]
 801d9ae:	9301      	str	r3, [sp, #4]
 801d9b0:	fa0f f38c 	sxth.w	r3, ip
 801d9b4:	9105      	str	r1, [sp, #20]
 801d9b6:	4639      	mov	r1, r7
 801d9b8:	9300      	str	r3, [sp, #0]
 801d9ba:	464b      	mov	r3, r9
 801d9bc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d9c0:	4642      	mov	r2, r8
 801d9c2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d9c4:	f7ff fd70 	bl	801d4a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801d9c8:	e757      	b.n	801d87a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d9ca:	142a      	asrs	r2, r5, #16
 801d9cc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d9d0:	1433      	asrs	r3, r6, #16
 801d9d2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801d9d6:	fb09 2303 	mla	r3, r9, r3, r2
 801d9da:	085a      	lsrs	r2, r3, #1
 801d9dc:	07d9      	lsls	r1, r3, #31
 801d9de:	f818 2002 	ldrb.w	r2, [r8, r2]
 801d9e2:	bf54      	ite	pl
 801d9e4:	f002 020f 	andpl.w	r2, r2, #15
 801d9e8:	1112      	asrmi	r2, r2, #4
 801d9ea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d9ee:	b2d2      	uxtb	r2, r2
 801d9f0:	2800      	cmp	r0, #0
 801d9f2:	f000 8085 	beq.w	801db00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801d9f6:	f103 0a01 	add.w	sl, r3, #1
 801d9fa:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801d9fe:	f01a 0f01 	tst.w	sl, #1
 801da02:	f818 1001 	ldrb.w	r1, [r8, r1]
 801da06:	bf0c      	ite	eq
 801da08:	f001 010f 	andeq.w	r1, r1, #15
 801da0c:	1109      	asrne	r1, r1, #4
 801da0e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801da12:	b2c9      	uxtb	r1, r1
 801da14:	910f      	str	r1, [sp, #60]	; 0x3c
 801da16:	b1df      	cbz	r7, 801da50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801da18:	444b      	add	r3, r9
 801da1a:	0859      	lsrs	r1, r3, #1
 801da1c:	f013 0f01 	tst.w	r3, #1
 801da20:	f103 0301 	add.w	r3, r3, #1
 801da24:	f818 1001 	ldrb.w	r1, [r8, r1]
 801da28:	bf0c      	ite	eq
 801da2a:	f001 010f 	andeq.w	r1, r1, #15
 801da2e:	1109      	asrne	r1, r1, #4
 801da30:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801da34:	b2c9      	uxtb	r1, r1
 801da36:	910b      	str	r1, [sp, #44]	; 0x2c
 801da38:	0859      	lsrs	r1, r3, #1
 801da3a:	07db      	lsls	r3, r3, #31
 801da3c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801da40:	bf54      	ite	pl
 801da42:	f001 010f 	andpl.w	r1, r1, #15
 801da46:	1109      	asrmi	r1, r1, #4
 801da48:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801da4c:	b2c9      	uxtb	r1, r1
 801da4e:	9110      	str	r1, [sp, #64]	; 0x40
 801da50:	b280      	uxth	r0, r0
 801da52:	b2bf      	uxth	r7, r7
 801da54:	fb00 f307 	mul.w	r3, r0, r7
 801da58:	0100      	lsls	r0, r0, #4
 801da5a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801da5e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801da62:	1ac0      	subs	r0, r0, r3
 801da64:	b2bf      	uxth	r7, r7
 801da66:	b280      	uxth	r0, r0
 801da68:	1bc9      	subs	r1, r1, r7
 801da6a:	fa1f fa81 	uxth.w	sl, r1
 801da6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801da70:	4348      	muls	r0, r1
 801da72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801da74:	fb02 020a 	mla	r2, r2, sl, r0
 801da78:	fb07 2701 	mla	r7, r7, r1, r2
 801da7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801da7e:	fb03 7302 	mla	r3, r3, r2, r7
 801da82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801da86:	b393      	cbz	r3, 801daee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801da88:	4a2b      	ldr	r2, [pc, #172]	; (801db38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801da8a:	2bff      	cmp	r3, #255	; 0xff
 801da8c:	6811      	ldr	r1, [r2, #0]
 801da8e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801da92:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801da96:	b2c9      	uxtb	r1, r1
 801da98:	d042      	beq.n	801db20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801da9a:	b298      	uxth	r0, r3
 801da9c:	43db      	mvns	r3, r3
 801da9e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801daa2:	fb11 f100 	smulbb	r1, r1, r0
 801daa6:	b2db      	uxtb	r3, r3
 801daa8:	fb17 f700 	smulbb	r7, r7, r0
 801daac:	fb02 1103 	mla	r1, r2, r3, r1
 801dab0:	fb1a f000 	smulbb	r0, sl, r0
 801dab4:	b289      	uxth	r1, r1
 801dab6:	1c4a      	adds	r2, r1, #1
 801dab8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801dabc:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801dac0:	fb02 7703 	mla	r7, r2, r3, r7
 801dac4:	1209      	asrs	r1, r1, #8
 801dac6:	b2bf      	uxth	r7, r7
 801dac8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801dacc:	1c7a      	adds	r2, r7, #1
 801dace:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801dad2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801dad6:	fb02 0303 	mla	r3, r2, r3, r0
 801dada:	123f      	asrs	r7, r7, #8
 801dadc:	b29b      	uxth	r3, r3
 801dade:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801dae2:	1c5a      	adds	r2, r3, #1
 801dae4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dae8:	121b      	asrs	r3, r3, #8
 801daea:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801daee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801daf0:	f10c 0c03 	add.w	ip, ip, #3
 801daf4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801daf8:	441d      	add	r5, r3
 801dafa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dafc:	441e      	add	r6, r3
 801dafe:	e6e7      	b.n	801d8d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801db00:	2f00      	cmp	r7, #0
 801db02:	d0a5      	beq.n	801da50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801db04:	444b      	add	r3, r9
 801db06:	0859      	lsrs	r1, r3, #1
 801db08:	07db      	lsls	r3, r3, #31
 801db0a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801db0e:	bf54      	ite	pl
 801db10:	f001 010f 	andpl.w	r1, r1, #15
 801db14:	1109      	asrmi	r1, r1, #4
 801db16:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801db1a:	b2c9      	uxtb	r1, r1
 801db1c:	910b      	str	r1, [sp, #44]	; 0x2c
 801db1e:	e797      	b.n	801da50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801db20:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801db24:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801db28:	f80c ac01 	strb.w	sl, [ip, #-1]
 801db2c:	e7df      	b.n	801daee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801db2e:	b013      	add	sp, #76	; 0x4c
 801db30:	ecbd 8b08 	vpop	{d8-d11}
 801db34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db38:	2000df78 	.word	0x2000df78

0801db3c <CRC_Lock>:
 801db3c:	4a20      	ldr	r2, [pc, #128]	; (801dbc0 <CRC_Lock+0x84>)
 801db3e:	b530      	push	{r4, r5, lr}
 801db40:	6813      	ldr	r3, [r2, #0]
 801db42:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801db46:	f24c 2540 	movw	r5, #49728	; 0xc240
 801db4a:	f023 0301 	bic.w	r3, r3, #1
 801db4e:	6013      	str	r3, [r2, #0]
 801db50:	4b1c      	ldr	r3, [pc, #112]	; (801dbc4 <CRC_Lock+0x88>)
 801db52:	681a      	ldr	r2, [r3, #0]
 801db54:	4022      	ands	r2, r4
 801db56:	42aa      	cmp	r2, r5
 801db58:	d005      	beq.n	801db66 <CRC_Lock+0x2a>
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	f24c 2270 	movw	r2, #49776	; 0xc270
 801db60:	4023      	ands	r3, r4
 801db62:	4293      	cmp	r3, r2
 801db64:	d124      	bne.n	801dbb0 <CRC_Lock+0x74>
 801db66:	4b18      	ldr	r3, [pc, #96]	; (801dbc8 <CRC_Lock+0x8c>)
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	bb0b      	cbnz	r3, 801dbb0 <CRC_Lock+0x74>
 801db6c:	4b17      	ldr	r3, [pc, #92]	; (801dbcc <CRC_Lock+0x90>)
 801db6e:	681a      	ldr	r2, [r3, #0]
 801db70:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801db74:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801db78:	d00d      	beq.n	801db96 <CRC_Lock+0x5a>
 801db7a:	681a      	ldr	r2, [r3, #0]
 801db7c:	f240 4483 	movw	r4, #1155	; 0x483
 801db80:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801db84:	42a2      	cmp	r2, r4
 801db86:	d006      	beq.n	801db96 <CRC_Lock+0x5a>
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	f240 4285 	movw	r2, #1157	; 0x485
 801db8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801db92:	4293      	cmp	r3, r2
 801db94:	d10c      	bne.n	801dbb0 <CRC_Lock+0x74>
 801db96:	4b0e      	ldr	r3, [pc, #56]	; (801dbd0 <CRC_Lock+0x94>)
 801db98:	2201      	movs	r2, #1
 801db9a:	601a      	str	r2, [r3, #0]
 801db9c:	681a      	ldr	r2, [r3, #0]
 801db9e:	2a00      	cmp	r2, #0
 801dba0:	d1fc      	bne.n	801db9c <CRC_Lock+0x60>
 801dba2:	4b0c      	ldr	r3, [pc, #48]	; (801dbd4 <CRC_Lock+0x98>)
 801dba4:	6018      	str	r0, [r3, #0]
 801dba6:	6818      	ldr	r0, [r3, #0]
 801dba8:	1a43      	subs	r3, r0, r1
 801dbaa:	4258      	negs	r0, r3
 801dbac:	4158      	adcs	r0, r3
 801dbae:	bd30      	pop	{r4, r5, pc}
 801dbb0:	4b09      	ldr	r3, [pc, #36]	; (801dbd8 <CRC_Lock+0x9c>)
 801dbb2:	2201      	movs	r2, #1
 801dbb4:	601a      	str	r2, [r3, #0]
 801dbb6:	681a      	ldr	r2, [r3, #0]
 801dbb8:	2a00      	cmp	r2, #0
 801dbba:	d1fc      	bne.n	801dbb6 <CRC_Lock+0x7a>
 801dbbc:	4b07      	ldr	r3, [pc, #28]	; (801dbdc <CRC_Lock+0xa0>)
 801dbbe:	e7f1      	b.n	801dba4 <CRC_Lock+0x68>
 801dbc0:	e0002000 	.word	0xe0002000
 801dbc4:	e000ed00 	.word	0xe000ed00
 801dbc8:	e0042000 	.word	0xe0042000
 801dbcc:	5c001000 	.word	0x5c001000
 801dbd0:	58024c08 	.word	0x58024c08
 801dbd4:	58024c00 	.word	0x58024c00
 801dbd8:	40023008 	.word	0x40023008
 801dbdc:	40023000 	.word	0x40023000

0801dbe0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801dbe0:	6101      	str	r1, [r0, #16]
 801dbe2:	4770      	bx	lr

0801dbe4 <_ZN8touchgfx8Gestures4tickEv>:
 801dbe4:	7b83      	ldrb	r3, [r0, #14]
 801dbe6:	b14b      	cbz	r3, 801dbfc <_ZN8touchgfx8Gestures4tickEv+0x18>
 801dbe8:	8903      	ldrh	r3, [r0, #8]
 801dbea:	3301      	adds	r3, #1
 801dbec:	b29b      	uxth	r3, r3
 801dbee:	2b07      	cmp	r3, #7
 801dbf0:	8103      	strh	r3, [r0, #8]
 801dbf2:	bf81      	itttt	hi
 801dbf4:	2300      	movhi	r3, #0
 801dbf6:	8143      	strhhi	r3, [r0, #10]
 801dbf8:	8183      	strhhi	r3, [r0, #12]
 801dbfa:	7383      	strbhi	r3, [r0, #14]
 801dbfc:	4770      	bx	lr
	...

0801dc00 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801dc00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801dc04:	4604      	mov	r4, r0
 801dc06:	4698      	mov	r8, r3
 801dc08:	8880      	ldrh	r0, [r0, #4]
 801dc0a:	4617      	mov	r7, r2
 801dc0c:	4b1d      	ldr	r3, [pc, #116]	; (801dc84 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801dc0e:	460e      	mov	r6, r1
 801dc10:	f8ad 0006 	strh.w	r0, [sp, #6]
 801dc14:	eba8 0000 	sub.w	r0, r8, r0
 801dc18:	9300      	str	r3, [sp, #0]
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	b280      	uxth	r0, r0
 801dc1e:	8aa2      	ldrh	r2, [r4, #20]
 801dc20:	f88d 3004 	strb.w	r3, [sp, #4]
 801dc24:	b203      	sxth	r3, r0
 801dc26:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801dc2a:	88e1      	ldrh	r1, [r4, #6]
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dc32:	f8ad 1008 	strh.w	r1, [sp, #8]
 801dc36:	bfb8      	it	lt
 801dc38:	4240      	neglt	r0, r0
 801dc3a:	f8ad 500c 	strh.w	r5, [sp, #12]
 801dc3e:	bfb8      	it	lt
 801dc40:	b203      	sxthlt	r3, r0
 801dc42:	4293      	cmp	r3, r2
 801dc44:	dc08      	bgt.n	801dc58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801dc46:	1a69      	subs	r1, r5, r1
 801dc48:	b289      	uxth	r1, r1
 801dc4a:	b20b      	sxth	r3, r1
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	bfbc      	itt	lt
 801dc50:	4249      	neglt	r1, r1
 801dc52:	b20b      	sxthlt	r3, r1
 801dc54:	429a      	cmp	r2, r3
 801dc56:	da13      	bge.n	801dc80 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801dc58:	6920      	ldr	r0, [r4, #16]
 801dc5a:	4669      	mov	r1, sp
 801dc5c:	eba8 0606 	sub.w	r6, r8, r6
 801dc60:	1bef      	subs	r7, r5, r7
 801dc62:	6803      	ldr	r3, [r0, #0]
 801dc64:	685b      	ldr	r3, [r3, #4]
 801dc66:	4798      	blx	r3
 801dc68:	2300      	movs	r3, #0
 801dc6a:	2001      	movs	r0, #1
 801dc6c:	8166      	strh	r6, [r4, #10]
 801dc6e:	8123      	strh	r3, [r4, #8]
 801dc70:	81a7      	strh	r7, [r4, #12]
 801dc72:	f8a4 8004 	strh.w	r8, [r4, #4]
 801dc76:	80e5      	strh	r5, [r4, #6]
 801dc78:	73a0      	strb	r0, [r4, #14]
 801dc7a:	b004      	add	sp, #16
 801dc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc80:	2000      	movs	r0, #0
 801dc82:	e7fa      	b.n	801dc7a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801dc84:	080213f8 	.word	0x080213f8

0801dc88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801dc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc8a:	461e      	mov	r6, r3
 801dc8c:	1e4b      	subs	r3, r1, #1
 801dc8e:	b085      	sub	sp, #20
 801dc90:	4604      	mov	r4, r0
 801dc92:	2b01      	cmp	r3, #1
 801dc94:	460d      	mov	r5, r1
 801dc96:	4617      	mov	r7, r2
 801dc98:	d84b      	bhi.n	801dd32 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801dc9a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801dc9e:	1cd3      	adds	r3, r2, #3
 801dca0:	b29b      	uxth	r3, r3
 801dca2:	2b06      	cmp	r3, #6
 801dca4:	d916      	bls.n	801dcd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801dca6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801dd48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801dcaa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dcae:	f8cd c004 	str.w	ip, [sp, #4]
 801dcb2:	f04f 0c00 	mov.w	ip, #0
 801dcb6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dcba:	6900      	ldr	r0, [r0, #16]
 801dcbc:	f8ad 100c 	strh.w	r1, [sp, #12]
 801dcc0:	a901      	add	r1, sp, #4
 801dcc2:	f88d c008 	strb.w	ip, [sp, #8]
 801dcc6:	f8ad 200a 	strh.w	r2, [sp, #10]
 801dcca:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dcce:	6803      	ldr	r3, [r0, #0]
 801dcd0:	689b      	ldr	r3, [r3, #8]
 801dcd2:	4798      	blx	r3
 801dcd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dcd8:	1cd3      	adds	r3, r2, #3
 801dcda:	b29b      	uxth	r3, r3
 801dcdc:	2b06      	cmp	r3, #6
 801dcde:	d916      	bls.n	801dd0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801dce0:	f8df c064 	ldr.w	ip, [pc, #100]	; 801dd48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801dce4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dce8:	f8cd c004 	str.w	ip, [sp, #4]
 801dcec:	f04f 0c01 	mov.w	ip, #1
 801dcf0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dcf4:	6920      	ldr	r0, [r4, #16]
 801dcf6:	f8ad 100c 	strh.w	r1, [sp, #12]
 801dcfa:	a901      	add	r1, sp, #4
 801dcfc:	f88d c008 	strb.w	ip, [sp, #8]
 801dd00:	f8ad 200a 	strh.w	r2, [sp, #10]
 801dd04:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dd08:	6803      	ldr	r3, [r0, #0]
 801dd0a:	689b      	ldr	r3, [r3, #8]
 801dd0c:	4798      	blx	r3
 801dd0e:	4b0d      	ldr	r3, [pc, #52]	; (801dd44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801dd10:	a901      	add	r1, sp, #4
 801dd12:	6920      	ldr	r0, [r4, #16]
 801dd14:	9301      	str	r3, [sp, #4]
 801dd16:	2300      	movs	r3, #0
 801dd18:	f88d 5008 	strb.w	r5, [sp, #8]
 801dd1c:	f8ad 700a 	strh.w	r7, [sp, #10]
 801dd20:	f8ad 600c 	strh.w	r6, [sp, #12]
 801dd24:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dd28:	6803      	ldr	r3, [r0, #0]
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	4798      	blx	r3
 801dd2e:	b005      	add	sp, #20
 801dd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd32:	2900      	cmp	r1, #0
 801dd34:	d1eb      	bne.n	801dd0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801dd36:	80a2      	strh	r2, [r4, #4]
 801dd38:	80c6      	strh	r6, [r0, #6]
 801dd3a:	60a1      	str	r1, [r4, #8]
 801dd3c:	81a1      	strh	r1, [r4, #12]
 801dd3e:	73a1      	strb	r1, [r4, #14]
 801dd40:	e7e5      	b.n	801dd0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801dd42:	bf00      	nop
 801dd44:	080213e4 	.word	0x080213e4
 801dd48:	0802140c 	.word	0x0802140c

0801dd4c <__aeabi_atexit>:
 801dd4c:	460b      	mov	r3, r1
 801dd4e:	4601      	mov	r1, r0
 801dd50:	4618      	mov	r0, r3
 801dd52:	f000 b853 	b.w	801ddfc <__cxa_atexit>

0801dd56 <_ZdlPvj>:
 801dd56:	f000 b812 	b.w	801dd7e <_ZdlPv>

0801dd5a <__cxa_guard_acquire>:
 801dd5a:	6803      	ldr	r3, [r0, #0]
 801dd5c:	07db      	lsls	r3, r3, #31
 801dd5e:	d406      	bmi.n	801dd6e <__cxa_guard_acquire+0x14>
 801dd60:	7843      	ldrb	r3, [r0, #1]
 801dd62:	b103      	cbz	r3, 801dd66 <__cxa_guard_acquire+0xc>
 801dd64:	deff      	udf	#255	; 0xff
 801dd66:	2301      	movs	r3, #1
 801dd68:	7043      	strb	r3, [r0, #1]
 801dd6a:	4618      	mov	r0, r3
 801dd6c:	4770      	bx	lr
 801dd6e:	2000      	movs	r0, #0
 801dd70:	4770      	bx	lr

0801dd72 <__cxa_guard_release>:
 801dd72:	2301      	movs	r3, #1
 801dd74:	6003      	str	r3, [r0, #0]
 801dd76:	4770      	bx	lr

0801dd78 <__cxa_pure_virtual>:
 801dd78:	b508      	push	{r3, lr}
 801dd7a:	f000 f80f 	bl	801dd9c <_ZSt9terminatev>

0801dd7e <_ZdlPv>:
 801dd7e:	f000 b88f 	b.w	801dea0 <free>

0801dd82 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801dd82:	b508      	push	{r3, lr}
 801dd84:	4780      	blx	r0
 801dd86:	f000 f80e 	bl	801dda6 <abort>
	...

0801dd8c <_ZSt13get_terminatev>:
 801dd8c:	4b02      	ldr	r3, [pc, #8]	; (801dd98 <_ZSt13get_terminatev+0xc>)
 801dd8e:	6818      	ldr	r0, [r3, #0]
 801dd90:	f3bf 8f5b 	dmb	ish
 801dd94:	4770      	bx	lr
 801dd96:	bf00      	nop
 801dd98:	20000070 	.word	0x20000070

0801dd9c <_ZSt9terminatev>:
 801dd9c:	b508      	push	{r3, lr}
 801dd9e:	f7ff fff5 	bl	801dd8c <_ZSt13get_terminatev>
 801dda2:	f7ff ffee 	bl	801dd82 <_ZN10__cxxabiv111__terminateEPFvvE>

0801dda6 <abort>:
 801dda6:	b508      	push	{r3, lr}
 801dda8:	2006      	movs	r0, #6
 801ddaa:	f000 fc67 	bl	801e67c <raise>
 801ddae:	2001      	movs	r0, #1
 801ddb0:	f7e4 f860 	bl	8001e74 <_exit>

0801ddb4 <__assert_func>:
 801ddb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ddb6:	4614      	mov	r4, r2
 801ddb8:	461a      	mov	r2, r3
 801ddba:	4b09      	ldr	r3, [pc, #36]	; (801dde0 <__assert_func+0x2c>)
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	4605      	mov	r5, r0
 801ddc0:	68d8      	ldr	r0, [r3, #12]
 801ddc2:	b14c      	cbz	r4, 801ddd8 <__assert_func+0x24>
 801ddc4:	4b07      	ldr	r3, [pc, #28]	; (801dde4 <__assert_func+0x30>)
 801ddc6:	9100      	str	r1, [sp, #0]
 801ddc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ddcc:	4906      	ldr	r1, [pc, #24]	; (801dde8 <__assert_func+0x34>)
 801ddce:	462b      	mov	r3, r5
 801ddd0:	f000 f828 	bl	801de24 <fiprintf>
 801ddd4:	f7ff ffe7 	bl	801dda6 <abort>
 801ddd8:	4b04      	ldr	r3, [pc, #16]	; (801ddec <__assert_func+0x38>)
 801ddda:	461c      	mov	r4, r3
 801dddc:	e7f3      	b.n	801ddc6 <__assert_func+0x12>
 801ddde:	bf00      	nop
 801dde0:	20000074 	.word	0x20000074
 801dde4:	0802276f 	.word	0x0802276f
 801dde8:	0802277c 	.word	0x0802277c
 801ddec:	080227aa 	.word	0x080227aa

0801ddf0 <atexit>:
 801ddf0:	2300      	movs	r3, #0
 801ddf2:	4601      	mov	r1, r0
 801ddf4:	461a      	mov	r2, r3
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	f000 bd1c 	b.w	801e834 <__register_exitproc>

0801ddfc <__cxa_atexit>:
 801ddfc:	b510      	push	{r4, lr}
 801ddfe:	4c05      	ldr	r4, [pc, #20]	; (801de14 <__cxa_atexit+0x18>)
 801de00:	4613      	mov	r3, r2
 801de02:	b12c      	cbz	r4, 801de10 <__cxa_atexit+0x14>
 801de04:	460a      	mov	r2, r1
 801de06:	4601      	mov	r1, r0
 801de08:	2002      	movs	r0, #2
 801de0a:	f000 fd13 	bl	801e834 <__register_exitproc>
 801de0e:	bd10      	pop	{r4, pc}
 801de10:	4620      	mov	r0, r4
 801de12:	e7fc      	b.n	801de0e <__cxa_atexit+0x12>
 801de14:	0801e835 	.word	0x0801e835

0801de18 <__errno>:
 801de18:	4b01      	ldr	r3, [pc, #4]	; (801de20 <__errno+0x8>)
 801de1a:	6818      	ldr	r0, [r3, #0]
 801de1c:	4770      	bx	lr
 801de1e:	bf00      	nop
 801de20:	20000074 	.word	0x20000074

0801de24 <fiprintf>:
 801de24:	b40e      	push	{r1, r2, r3}
 801de26:	b503      	push	{r0, r1, lr}
 801de28:	4601      	mov	r1, r0
 801de2a:	ab03      	add	r3, sp, #12
 801de2c:	4805      	ldr	r0, [pc, #20]	; (801de44 <fiprintf+0x20>)
 801de2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801de32:	6800      	ldr	r0, [r0, #0]
 801de34:	9301      	str	r3, [sp, #4]
 801de36:	f000 f925 	bl	801e084 <_vfiprintf_r>
 801de3a:	b002      	add	sp, #8
 801de3c:	f85d eb04 	ldr.w	lr, [sp], #4
 801de40:	b003      	add	sp, #12
 801de42:	4770      	bx	lr
 801de44:	20000074 	.word	0x20000074

0801de48 <__libc_init_array>:
 801de48:	b570      	push	{r4, r5, r6, lr}
 801de4a:	4d0d      	ldr	r5, [pc, #52]	; (801de80 <__libc_init_array+0x38>)
 801de4c:	4c0d      	ldr	r4, [pc, #52]	; (801de84 <__libc_init_array+0x3c>)
 801de4e:	1b64      	subs	r4, r4, r5
 801de50:	10a4      	asrs	r4, r4, #2
 801de52:	2600      	movs	r6, #0
 801de54:	42a6      	cmp	r6, r4
 801de56:	d109      	bne.n	801de6c <__libc_init_array+0x24>
 801de58:	4d0b      	ldr	r5, [pc, #44]	; (801de88 <__libc_init_array+0x40>)
 801de5a:	4c0c      	ldr	r4, [pc, #48]	; (801de8c <__libc_init_array+0x44>)
 801de5c:	f001 f824 	bl	801eea8 <_init>
 801de60:	1b64      	subs	r4, r4, r5
 801de62:	10a4      	asrs	r4, r4, #2
 801de64:	2600      	movs	r6, #0
 801de66:	42a6      	cmp	r6, r4
 801de68:	d105      	bne.n	801de76 <__libc_init_array+0x2e>
 801de6a:	bd70      	pop	{r4, r5, r6, pc}
 801de6c:	f855 3b04 	ldr.w	r3, [r5], #4
 801de70:	4798      	blx	r3
 801de72:	3601      	adds	r6, #1
 801de74:	e7ee      	b.n	801de54 <__libc_init_array+0xc>
 801de76:	f855 3b04 	ldr.w	r3, [r5], #4
 801de7a:	4798      	blx	r3
 801de7c:	3601      	adds	r6, #1
 801de7e:	e7f2      	b.n	801de66 <__libc_init_array+0x1e>
 801de80:	08030a58 	.word	0x08030a58
 801de84:	08030a58 	.word	0x08030a58
 801de88:	08030a58 	.word	0x08030a58
 801de8c:	08030a6c 	.word	0x08030a6c

0801de90 <malloc>:
 801de90:	4b02      	ldr	r3, [pc, #8]	; (801de9c <malloc+0xc>)
 801de92:	4601      	mov	r1, r0
 801de94:	6818      	ldr	r0, [r3, #0]
 801de96:	f000 b871 	b.w	801df7c <_malloc_r>
 801de9a:	bf00      	nop
 801de9c:	20000074 	.word	0x20000074

0801dea0 <free>:
 801dea0:	4b02      	ldr	r3, [pc, #8]	; (801deac <free+0xc>)
 801dea2:	4601      	mov	r1, r0
 801dea4:	6818      	ldr	r0, [r3, #0]
 801dea6:	f000 b819 	b.w	801dedc <_free_r>
 801deaa:	bf00      	nop
 801deac:	20000074 	.word	0x20000074

0801deb0 <memcpy>:
 801deb0:	440a      	add	r2, r1
 801deb2:	4291      	cmp	r1, r2
 801deb4:	f100 33ff 	add.w	r3, r0, #4294967295
 801deb8:	d100      	bne.n	801debc <memcpy+0xc>
 801deba:	4770      	bx	lr
 801debc:	b510      	push	{r4, lr}
 801debe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dec6:	4291      	cmp	r1, r2
 801dec8:	d1f9      	bne.n	801debe <memcpy+0xe>
 801deca:	bd10      	pop	{r4, pc}

0801decc <memset>:
 801decc:	4402      	add	r2, r0
 801dece:	4603      	mov	r3, r0
 801ded0:	4293      	cmp	r3, r2
 801ded2:	d100      	bne.n	801ded6 <memset+0xa>
 801ded4:	4770      	bx	lr
 801ded6:	f803 1b01 	strb.w	r1, [r3], #1
 801deda:	e7f9      	b.n	801ded0 <memset+0x4>

0801dedc <_free_r>:
 801dedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dede:	2900      	cmp	r1, #0
 801dee0:	d048      	beq.n	801df74 <_free_r+0x98>
 801dee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dee6:	9001      	str	r0, [sp, #4]
 801dee8:	2b00      	cmp	r3, #0
 801deea:	f1a1 0404 	sub.w	r4, r1, #4
 801deee:	bfb8      	it	lt
 801def0:	18e4      	addlt	r4, r4, r3
 801def2:	f000 ff21 	bl	801ed38 <__malloc_lock>
 801def6:	4a20      	ldr	r2, [pc, #128]	; (801df78 <_free_r+0x9c>)
 801def8:	9801      	ldr	r0, [sp, #4]
 801defa:	6813      	ldr	r3, [r2, #0]
 801defc:	4615      	mov	r5, r2
 801defe:	b933      	cbnz	r3, 801df0e <_free_r+0x32>
 801df00:	6063      	str	r3, [r4, #4]
 801df02:	6014      	str	r4, [r2, #0]
 801df04:	b003      	add	sp, #12
 801df06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df0a:	f000 bf1b 	b.w	801ed44 <__malloc_unlock>
 801df0e:	42a3      	cmp	r3, r4
 801df10:	d90b      	bls.n	801df2a <_free_r+0x4e>
 801df12:	6821      	ldr	r1, [r4, #0]
 801df14:	1862      	adds	r2, r4, r1
 801df16:	4293      	cmp	r3, r2
 801df18:	bf04      	itt	eq
 801df1a:	681a      	ldreq	r2, [r3, #0]
 801df1c:	685b      	ldreq	r3, [r3, #4]
 801df1e:	6063      	str	r3, [r4, #4]
 801df20:	bf04      	itt	eq
 801df22:	1852      	addeq	r2, r2, r1
 801df24:	6022      	streq	r2, [r4, #0]
 801df26:	602c      	str	r4, [r5, #0]
 801df28:	e7ec      	b.n	801df04 <_free_r+0x28>
 801df2a:	461a      	mov	r2, r3
 801df2c:	685b      	ldr	r3, [r3, #4]
 801df2e:	b10b      	cbz	r3, 801df34 <_free_r+0x58>
 801df30:	42a3      	cmp	r3, r4
 801df32:	d9fa      	bls.n	801df2a <_free_r+0x4e>
 801df34:	6811      	ldr	r1, [r2, #0]
 801df36:	1855      	adds	r5, r2, r1
 801df38:	42a5      	cmp	r5, r4
 801df3a:	d10b      	bne.n	801df54 <_free_r+0x78>
 801df3c:	6824      	ldr	r4, [r4, #0]
 801df3e:	4421      	add	r1, r4
 801df40:	1854      	adds	r4, r2, r1
 801df42:	42a3      	cmp	r3, r4
 801df44:	6011      	str	r1, [r2, #0]
 801df46:	d1dd      	bne.n	801df04 <_free_r+0x28>
 801df48:	681c      	ldr	r4, [r3, #0]
 801df4a:	685b      	ldr	r3, [r3, #4]
 801df4c:	6053      	str	r3, [r2, #4]
 801df4e:	4421      	add	r1, r4
 801df50:	6011      	str	r1, [r2, #0]
 801df52:	e7d7      	b.n	801df04 <_free_r+0x28>
 801df54:	d902      	bls.n	801df5c <_free_r+0x80>
 801df56:	230c      	movs	r3, #12
 801df58:	6003      	str	r3, [r0, #0]
 801df5a:	e7d3      	b.n	801df04 <_free_r+0x28>
 801df5c:	6825      	ldr	r5, [r4, #0]
 801df5e:	1961      	adds	r1, r4, r5
 801df60:	428b      	cmp	r3, r1
 801df62:	bf04      	itt	eq
 801df64:	6819      	ldreq	r1, [r3, #0]
 801df66:	685b      	ldreq	r3, [r3, #4]
 801df68:	6063      	str	r3, [r4, #4]
 801df6a:	bf04      	itt	eq
 801df6c:	1949      	addeq	r1, r1, r5
 801df6e:	6021      	streq	r1, [r4, #0]
 801df70:	6054      	str	r4, [r2, #4]
 801df72:	e7c7      	b.n	801df04 <_free_r+0x28>
 801df74:	b003      	add	sp, #12
 801df76:	bd30      	pop	{r4, r5, pc}
 801df78:	2000e04c 	.word	0x2000e04c

0801df7c <_malloc_r>:
 801df7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df7e:	1ccd      	adds	r5, r1, #3
 801df80:	f025 0503 	bic.w	r5, r5, #3
 801df84:	3508      	adds	r5, #8
 801df86:	2d0c      	cmp	r5, #12
 801df88:	bf38      	it	cc
 801df8a:	250c      	movcc	r5, #12
 801df8c:	2d00      	cmp	r5, #0
 801df8e:	4606      	mov	r6, r0
 801df90:	db01      	blt.n	801df96 <_malloc_r+0x1a>
 801df92:	42a9      	cmp	r1, r5
 801df94:	d903      	bls.n	801df9e <_malloc_r+0x22>
 801df96:	230c      	movs	r3, #12
 801df98:	6033      	str	r3, [r6, #0]
 801df9a:	2000      	movs	r0, #0
 801df9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df9e:	f000 fecb 	bl	801ed38 <__malloc_lock>
 801dfa2:	4921      	ldr	r1, [pc, #132]	; (801e028 <_malloc_r+0xac>)
 801dfa4:	680a      	ldr	r2, [r1, #0]
 801dfa6:	4614      	mov	r4, r2
 801dfa8:	b99c      	cbnz	r4, 801dfd2 <_malloc_r+0x56>
 801dfaa:	4f20      	ldr	r7, [pc, #128]	; (801e02c <_malloc_r+0xb0>)
 801dfac:	683b      	ldr	r3, [r7, #0]
 801dfae:	b923      	cbnz	r3, 801dfba <_malloc_r+0x3e>
 801dfb0:	4621      	mov	r1, r4
 801dfb2:	4630      	mov	r0, r6
 801dfb4:	f000 fb2a 	bl	801e60c <_sbrk_r>
 801dfb8:	6038      	str	r0, [r7, #0]
 801dfba:	4629      	mov	r1, r5
 801dfbc:	4630      	mov	r0, r6
 801dfbe:	f000 fb25 	bl	801e60c <_sbrk_r>
 801dfc2:	1c43      	adds	r3, r0, #1
 801dfc4:	d123      	bne.n	801e00e <_malloc_r+0x92>
 801dfc6:	230c      	movs	r3, #12
 801dfc8:	6033      	str	r3, [r6, #0]
 801dfca:	4630      	mov	r0, r6
 801dfcc:	f000 feba 	bl	801ed44 <__malloc_unlock>
 801dfd0:	e7e3      	b.n	801df9a <_malloc_r+0x1e>
 801dfd2:	6823      	ldr	r3, [r4, #0]
 801dfd4:	1b5b      	subs	r3, r3, r5
 801dfd6:	d417      	bmi.n	801e008 <_malloc_r+0x8c>
 801dfd8:	2b0b      	cmp	r3, #11
 801dfda:	d903      	bls.n	801dfe4 <_malloc_r+0x68>
 801dfdc:	6023      	str	r3, [r4, #0]
 801dfde:	441c      	add	r4, r3
 801dfe0:	6025      	str	r5, [r4, #0]
 801dfe2:	e004      	b.n	801dfee <_malloc_r+0x72>
 801dfe4:	6863      	ldr	r3, [r4, #4]
 801dfe6:	42a2      	cmp	r2, r4
 801dfe8:	bf0c      	ite	eq
 801dfea:	600b      	streq	r3, [r1, #0]
 801dfec:	6053      	strne	r3, [r2, #4]
 801dfee:	4630      	mov	r0, r6
 801dff0:	f000 fea8 	bl	801ed44 <__malloc_unlock>
 801dff4:	f104 000b 	add.w	r0, r4, #11
 801dff8:	1d23      	adds	r3, r4, #4
 801dffa:	f020 0007 	bic.w	r0, r0, #7
 801dffe:	1ac2      	subs	r2, r0, r3
 801e000:	d0cc      	beq.n	801df9c <_malloc_r+0x20>
 801e002:	1a1b      	subs	r3, r3, r0
 801e004:	50a3      	str	r3, [r4, r2]
 801e006:	e7c9      	b.n	801df9c <_malloc_r+0x20>
 801e008:	4622      	mov	r2, r4
 801e00a:	6864      	ldr	r4, [r4, #4]
 801e00c:	e7cc      	b.n	801dfa8 <_malloc_r+0x2c>
 801e00e:	1cc4      	adds	r4, r0, #3
 801e010:	f024 0403 	bic.w	r4, r4, #3
 801e014:	42a0      	cmp	r0, r4
 801e016:	d0e3      	beq.n	801dfe0 <_malloc_r+0x64>
 801e018:	1a21      	subs	r1, r4, r0
 801e01a:	4630      	mov	r0, r6
 801e01c:	f000 faf6 	bl	801e60c <_sbrk_r>
 801e020:	3001      	adds	r0, #1
 801e022:	d1dd      	bne.n	801dfe0 <_malloc_r+0x64>
 801e024:	e7cf      	b.n	801dfc6 <_malloc_r+0x4a>
 801e026:	bf00      	nop
 801e028:	2000e04c 	.word	0x2000e04c
 801e02c:	2000e050 	.word	0x2000e050

0801e030 <__sfputc_r>:
 801e030:	6893      	ldr	r3, [r2, #8]
 801e032:	3b01      	subs	r3, #1
 801e034:	2b00      	cmp	r3, #0
 801e036:	b410      	push	{r4}
 801e038:	6093      	str	r3, [r2, #8]
 801e03a:	da08      	bge.n	801e04e <__sfputc_r+0x1e>
 801e03c:	6994      	ldr	r4, [r2, #24]
 801e03e:	42a3      	cmp	r3, r4
 801e040:	db01      	blt.n	801e046 <__sfputc_r+0x16>
 801e042:	290a      	cmp	r1, #10
 801e044:	d103      	bne.n	801e04e <__sfputc_r+0x1e>
 801e046:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e04a:	f000 bb33 	b.w	801e6b4 <__swbuf_r>
 801e04e:	6813      	ldr	r3, [r2, #0]
 801e050:	1c58      	adds	r0, r3, #1
 801e052:	6010      	str	r0, [r2, #0]
 801e054:	7019      	strb	r1, [r3, #0]
 801e056:	4608      	mov	r0, r1
 801e058:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e05c:	4770      	bx	lr

0801e05e <__sfputs_r>:
 801e05e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e060:	4606      	mov	r6, r0
 801e062:	460f      	mov	r7, r1
 801e064:	4614      	mov	r4, r2
 801e066:	18d5      	adds	r5, r2, r3
 801e068:	42ac      	cmp	r4, r5
 801e06a:	d101      	bne.n	801e070 <__sfputs_r+0x12>
 801e06c:	2000      	movs	r0, #0
 801e06e:	e007      	b.n	801e080 <__sfputs_r+0x22>
 801e070:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e074:	463a      	mov	r2, r7
 801e076:	4630      	mov	r0, r6
 801e078:	f7ff ffda 	bl	801e030 <__sfputc_r>
 801e07c:	1c43      	adds	r3, r0, #1
 801e07e:	d1f3      	bne.n	801e068 <__sfputs_r+0xa>
 801e080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e084 <_vfiprintf_r>:
 801e084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e088:	460d      	mov	r5, r1
 801e08a:	b09d      	sub	sp, #116	; 0x74
 801e08c:	4614      	mov	r4, r2
 801e08e:	4698      	mov	r8, r3
 801e090:	4606      	mov	r6, r0
 801e092:	b118      	cbz	r0, 801e09c <_vfiprintf_r+0x18>
 801e094:	6983      	ldr	r3, [r0, #24]
 801e096:	b90b      	cbnz	r3, 801e09c <_vfiprintf_r+0x18>
 801e098:	f000 fd48 	bl	801eb2c <__sinit>
 801e09c:	4b89      	ldr	r3, [pc, #548]	; (801e2c4 <_vfiprintf_r+0x240>)
 801e09e:	429d      	cmp	r5, r3
 801e0a0:	d11b      	bne.n	801e0da <_vfiprintf_r+0x56>
 801e0a2:	6875      	ldr	r5, [r6, #4]
 801e0a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e0a6:	07d9      	lsls	r1, r3, #31
 801e0a8:	d405      	bmi.n	801e0b6 <_vfiprintf_r+0x32>
 801e0aa:	89ab      	ldrh	r3, [r5, #12]
 801e0ac:	059a      	lsls	r2, r3, #22
 801e0ae:	d402      	bmi.n	801e0b6 <_vfiprintf_r+0x32>
 801e0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e0b2:	f000 fdd9 	bl	801ec68 <__retarget_lock_acquire_recursive>
 801e0b6:	89ab      	ldrh	r3, [r5, #12]
 801e0b8:	071b      	lsls	r3, r3, #28
 801e0ba:	d501      	bpl.n	801e0c0 <_vfiprintf_r+0x3c>
 801e0bc:	692b      	ldr	r3, [r5, #16]
 801e0be:	b9eb      	cbnz	r3, 801e0fc <_vfiprintf_r+0x78>
 801e0c0:	4629      	mov	r1, r5
 801e0c2:	4630      	mov	r0, r6
 801e0c4:	f000 fb48 	bl	801e758 <__swsetup_r>
 801e0c8:	b1c0      	cbz	r0, 801e0fc <_vfiprintf_r+0x78>
 801e0ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e0cc:	07dc      	lsls	r4, r3, #31
 801e0ce:	d50e      	bpl.n	801e0ee <_vfiprintf_r+0x6a>
 801e0d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e0d4:	b01d      	add	sp, #116	; 0x74
 801e0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0da:	4b7b      	ldr	r3, [pc, #492]	; (801e2c8 <_vfiprintf_r+0x244>)
 801e0dc:	429d      	cmp	r5, r3
 801e0de:	d101      	bne.n	801e0e4 <_vfiprintf_r+0x60>
 801e0e0:	68b5      	ldr	r5, [r6, #8]
 801e0e2:	e7df      	b.n	801e0a4 <_vfiprintf_r+0x20>
 801e0e4:	4b79      	ldr	r3, [pc, #484]	; (801e2cc <_vfiprintf_r+0x248>)
 801e0e6:	429d      	cmp	r5, r3
 801e0e8:	bf08      	it	eq
 801e0ea:	68f5      	ldreq	r5, [r6, #12]
 801e0ec:	e7da      	b.n	801e0a4 <_vfiprintf_r+0x20>
 801e0ee:	89ab      	ldrh	r3, [r5, #12]
 801e0f0:	0598      	lsls	r0, r3, #22
 801e0f2:	d4ed      	bmi.n	801e0d0 <_vfiprintf_r+0x4c>
 801e0f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e0f6:	f000 fdb9 	bl	801ec6c <__retarget_lock_release_recursive>
 801e0fa:	e7e9      	b.n	801e0d0 <_vfiprintf_r+0x4c>
 801e0fc:	2300      	movs	r3, #0
 801e0fe:	9309      	str	r3, [sp, #36]	; 0x24
 801e100:	2320      	movs	r3, #32
 801e102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e106:	f8cd 800c 	str.w	r8, [sp, #12]
 801e10a:	2330      	movs	r3, #48	; 0x30
 801e10c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e2d0 <_vfiprintf_r+0x24c>
 801e110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e114:	f04f 0901 	mov.w	r9, #1
 801e118:	4623      	mov	r3, r4
 801e11a:	469a      	mov	sl, r3
 801e11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e120:	b10a      	cbz	r2, 801e126 <_vfiprintf_r+0xa2>
 801e122:	2a25      	cmp	r2, #37	; 0x25
 801e124:	d1f9      	bne.n	801e11a <_vfiprintf_r+0x96>
 801e126:	ebba 0b04 	subs.w	fp, sl, r4
 801e12a:	d00b      	beq.n	801e144 <_vfiprintf_r+0xc0>
 801e12c:	465b      	mov	r3, fp
 801e12e:	4622      	mov	r2, r4
 801e130:	4629      	mov	r1, r5
 801e132:	4630      	mov	r0, r6
 801e134:	f7ff ff93 	bl	801e05e <__sfputs_r>
 801e138:	3001      	adds	r0, #1
 801e13a:	f000 80aa 	beq.w	801e292 <_vfiprintf_r+0x20e>
 801e13e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e140:	445a      	add	r2, fp
 801e142:	9209      	str	r2, [sp, #36]	; 0x24
 801e144:	f89a 3000 	ldrb.w	r3, [sl]
 801e148:	2b00      	cmp	r3, #0
 801e14a:	f000 80a2 	beq.w	801e292 <_vfiprintf_r+0x20e>
 801e14e:	2300      	movs	r3, #0
 801e150:	f04f 32ff 	mov.w	r2, #4294967295
 801e154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e158:	f10a 0a01 	add.w	sl, sl, #1
 801e15c:	9304      	str	r3, [sp, #16]
 801e15e:	9307      	str	r3, [sp, #28]
 801e160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e164:	931a      	str	r3, [sp, #104]	; 0x68
 801e166:	4654      	mov	r4, sl
 801e168:	2205      	movs	r2, #5
 801e16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e16e:	4858      	ldr	r0, [pc, #352]	; (801e2d0 <_vfiprintf_r+0x24c>)
 801e170:	f7e2 f866 	bl	8000240 <memchr>
 801e174:	9a04      	ldr	r2, [sp, #16]
 801e176:	b9d8      	cbnz	r0, 801e1b0 <_vfiprintf_r+0x12c>
 801e178:	06d1      	lsls	r1, r2, #27
 801e17a:	bf44      	itt	mi
 801e17c:	2320      	movmi	r3, #32
 801e17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e182:	0713      	lsls	r3, r2, #28
 801e184:	bf44      	itt	mi
 801e186:	232b      	movmi	r3, #43	; 0x2b
 801e188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e18c:	f89a 3000 	ldrb.w	r3, [sl]
 801e190:	2b2a      	cmp	r3, #42	; 0x2a
 801e192:	d015      	beq.n	801e1c0 <_vfiprintf_r+0x13c>
 801e194:	9a07      	ldr	r2, [sp, #28]
 801e196:	4654      	mov	r4, sl
 801e198:	2000      	movs	r0, #0
 801e19a:	f04f 0c0a 	mov.w	ip, #10
 801e19e:	4621      	mov	r1, r4
 801e1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e1a4:	3b30      	subs	r3, #48	; 0x30
 801e1a6:	2b09      	cmp	r3, #9
 801e1a8:	d94e      	bls.n	801e248 <_vfiprintf_r+0x1c4>
 801e1aa:	b1b0      	cbz	r0, 801e1da <_vfiprintf_r+0x156>
 801e1ac:	9207      	str	r2, [sp, #28]
 801e1ae:	e014      	b.n	801e1da <_vfiprintf_r+0x156>
 801e1b0:	eba0 0308 	sub.w	r3, r0, r8
 801e1b4:	fa09 f303 	lsl.w	r3, r9, r3
 801e1b8:	4313      	orrs	r3, r2
 801e1ba:	9304      	str	r3, [sp, #16]
 801e1bc:	46a2      	mov	sl, r4
 801e1be:	e7d2      	b.n	801e166 <_vfiprintf_r+0xe2>
 801e1c0:	9b03      	ldr	r3, [sp, #12]
 801e1c2:	1d19      	adds	r1, r3, #4
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	9103      	str	r1, [sp, #12]
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	bfbb      	ittet	lt
 801e1cc:	425b      	neglt	r3, r3
 801e1ce:	f042 0202 	orrlt.w	r2, r2, #2
 801e1d2:	9307      	strge	r3, [sp, #28]
 801e1d4:	9307      	strlt	r3, [sp, #28]
 801e1d6:	bfb8      	it	lt
 801e1d8:	9204      	strlt	r2, [sp, #16]
 801e1da:	7823      	ldrb	r3, [r4, #0]
 801e1dc:	2b2e      	cmp	r3, #46	; 0x2e
 801e1de:	d10c      	bne.n	801e1fa <_vfiprintf_r+0x176>
 801e1e0:	7863      	ldrb	r3, [r4, #1]
 801e1e2:	2b2a      	cmp	r3, #42	; 0x2a
 801e1e4:	d135      	bne.n	801e252 <_vfiprintf_r+0x1ce>
 801e1e6:	9b03      	ldr	r3, [sp, #12]
 801e1e8:	1d1a      	adds	r2, r3, #4
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	9203      	str	r2, [sp, #12]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	bfb8      	it	lt
 801e1f2:	f04f 33ff 	movlt.w	r3, #4294967295
 801e1f6:	3402      	adds	r4, #2
 801e1f8:	9305      	str	r3, [sp, #20]
 801e1fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e2e0 <_vfiprintf_r+0x25c>
 801e1fe:	7821      	ldrb	r1, [r4, #0]
 801e200:	2203      	movs	r2, #3
 801e202:	4650      	mov	r0, sl
 801e204:	f7e2 f81c 	bl	8000240 <memchr>
 801e208:	b140      	cbz	r0, 801e21c <_vfiprintf_r+0x198>
 801e20a:	2340      	movs	r3, #64	; 0x40
 801e20c:	eba0 000a 	sub.w	r0, r0, sl
 801e210:	fa03 f000 	lsl.w	r0, r3, r0
 801e214:	9b04      	ldr	r3, [sp, #16]
 801e216:	4303      	orrs	r3, r0
 801e218:	3401      	adds	r4, #1
 801e21a:	9304      	str	r3, [sp, #16]
 801e21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e220:	482c      	ldr	r0, [pc, #176]	; (801e2d4 <_vfiprintf_r+0x250>)
 801e222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e226:	2206      	movs	r2, #6
 801e228:	f7e2 f80a 	bl	8000240 <memchr>
 801e22c:	2800      	cmp	r0, #0
 801e22e:	d03f      	beq.n	801e2b0 <_vfiprintf_r+0x22c>
 801e230:	4b29      	ldr	r3, [pc, #164]	; (801e2d8 <_vfiprintf_r+0x254>)
 801e232:	bb1b      	cbnz	r3, 801e27c <_vfiprintf_r+0x1f8>
 801e234:	9b03      	ldr	r3, [sp, #12]
 801e236:	3307      	adds	r3, #7
 801e238:	f023 0307 	bic.w	r3, r3, #7
 801e23c:	3308      	adds	r3, #8
 801e23e:	9303      	str	r3, [sp, #12]
 801e240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e242:	443b      	add	r3, r7
 801e244:	9309      	str	r3, [sp, #36]	; 0x24
 801e246:	e767      	b.n	801e118 <_vfiprintf_r+0x94>
 801e248:	fb0c 3202 	mla	r2, ip, r2, r3
 801e24c:	460c      	mov	r4, r1
 801e24e:	2001      	movs	r0, #1
 801e250:	e7a5      	b.n	801e19e <_vfiprintf_r+0x11a>
 801e252:	2300      	movs	r3, #0
 801e254:	3401      	adds	r4, #1
 801e256:	9305      	str	r3, [sp, #20]
 801e258:	4619      	mov	r1, r3
 801e25a:	f04f 0c0a 	mov.w	ip, #10
 801e25e:	4620      	mov	r0, r4
 801e260:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e264:	3a30      	subs	r2, #48	; 0x30
 801e266:	2a09      	cmp	r2, #9
 801e268:	d903      	bls.n	801e272 <_vfiprintf_r+0x1ee>
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d0c5      	beq.n	801e1fa <_vfiprintf_r+0x176>
 801e26e:	9105      	str	r1, [sp, #20]
 801e270:	e7c3      	b.n	801e1fa <_vfiprintf_r+0x176>
 801e272:	fb0c 2101 	mla	r1, ip, r1, r2
 801e276:	4604      	mov	r4, r0
 801e278:	2301      	movs	r3, #1
 801e27a:	e7f0      	b.n	801e25e <_vfiprintf_r+0x1da>
 801e27c:	ab03      	add	r3, sp, #12
 801e27e:	9300      	str	r3, [sp, #0]
 801e280:	462a      	mov	r2, r5
 801e282:	4b16      	ldr	r3, [pc, #88]	; (801e2dc <_vfiprintf_r+0x258>)
 801e284:	a904      	add	r1, sp, #16
 801e286:	4630      	mov	r0, r6
 801e288:	f3af 8000 	nop.w
 801e28c:	4607      	mov	r7, r0
 801e28e:	1c78      	adds	r0, r7, #1
 801e290:	d1d6      	bne.n	801e240 <_vfiprintf_r+0x1bc>
 801e292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e294:	07d9      	lsls	r1, r3, #31
 801e296:	d405      	bmi.n	801e2a4 <_vfiprintf_r+0x220>
 801e298:	89ab      	ldrh	r3, [r5, #12]
 801e29a:	059a      	lsls	r2, r3, #22
 801e29c:	d402      	bmi.n	801e2a4 <_vfiprintf_r+0x220>
 801e29e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e2a0:	f000 fce4 	bl	801ec6c <__retarget_lock_release_recursive>
 801e2a4:	89ab      	ldrh	r3, [r5, #12]
 801e2a6:	065b      	lsls	r3, r3, #25
 801e2a8:	f53f af12 	bmi.w	801e0d0 <_vfiprintf_r+0x4c>
 801e2ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e2ae:	e711      	b.n	801e0d4 <_vfiprintf_r+0x50>
 801e2b0:	ab03      	add	r3, sp, #12
 801e2b2:	9300      	str	r3, [sp, #0]
 801e2b4:	462a      	mov	r2, r5
 801e2b6:	4b09      	ldr	r3, [pc, #36]	; (801e2dc <_vfiprintf_r+0x258>)
 801e2b8:	a904      	add	r1, sp, #16
 801e2ba:	4630      	mov	r0, r6
 801e2bc:	f000 f880 	bl	801e3c0 <_printf_i>
 801e2c0:	e7e4      	b.n	801e28c <_vfiprintf_r+0x208>
 801e2c2:	bf00      	nop
 801e2c4:	08022808 	.word	0x08022808
 801e2c8:	08022828 	.word	0x08022828
 801e2cc:	080227e8 	.word	0x080227e8
 801e2d0:	080227b0 	.word	0x080227b0
 801e2d4:	080227ba 	.word	0x080227ba
 801e2d8:	00000000 	.word	0x00000000
 801e2dc:	0801e05f 	.word	0x0801e05f
 801e2e0:	080227b6 	.word	0x080227b6

0801e2e4 <_printf_common>:
 801e2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2e8:	4616      	mov	r6, r2
 801e2ea:	4699      	mov	r9, r3
 801e2ec:	688a      	ldr	r2, [r1, #8]
 801e2ee:	690b      	ldr	r3, [r1, #16]
 801e2f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e2f4:	4293      	cmp	r3, r2
 801e2f6:	bfb8      	it	lt
 801e2f8:	4613      	movlt	r3, r2
 801e2fa:	6033      	str	r3, [r6, #0]
 801e2fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e300:	4607      	mov	r7, r0
 801e302:	460c      	mov	r4, r1
 801e304:	b10a      	cbz	r2, 801e30a <_printf_common+0x26>
 801e306:	3301      	adds	r3, #1
 801e308:	6033      	str	r3, [r6, #0]
 801e30a:	6823      	ldr	r3, [r4, #0]
 801e30c:	0699      	lsls	r1, r3, #26
 801e30e:	bf42      	ittt	mi
 801e310:	6833      	ldrmi	r3, [r6, #0]
 801e312:	3302      	addmi	r3, #2
 801e314:	6033      	strmi	r3, [r6, #0]
 801e316:	6825      	ldr	r5, [r4, #0]
 801e318:	f015 0506 	ands.w	r5, r5, #6
 801e31c:	d106      	bne.n	801e32c <_printf_common+0x48>
 801e31e:	f104 0a19 	add.w	sl, r4, #25
 801e322:	68e3      	ldr	r3, [r4, #12]
 801e324:	6832      	ldr	r2, [r6, #0]
 801e326:	1a9b      	subs	r3, r3, r2
 801e328:	42ab      	cmp	r3, r5
 801e32a:	dc26      	bgt.n	801e37a <_printf_common+0x96>
 801e32c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e330:	1e13      	subs	r3, r2, #0
 801e332:	6822      	ldr	r2, [r4, #0]
 801e334:	bf18      	it	ne
 801e336:	2301      	movne	r3, #1
 801e338:	0692      	lsls	r2, r2, #26
 801e33a:	d42b      	bmi.n	801e394 <_printf_common+0xb0>
 801e33c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e340:	4649      	mov	r1, r9
 801e342:	4638      	mov	r0, r7
 801e344:	47c0      	blx	r8
 801e346:	3001      	adds	r0, #1
 801e348:	d01e      	beq.n	801e388 <_printf_common+0xa4>
 801e34a:	6823      	ldr	r3, [r4, #0]
 801e34c:	68e5      	ldr	r5, [r4, #12]
 801e34e:	6832      	ldr	r2, [r6, #0]
 801e350:	f003 0306 	and.w	r3, r3, #6
 801e354:	2b04      	cmp	r3, #4
 801e356:	bf08      	it	eq
 801e358:	1aad      	subeq	r5, r5, r2
 801e35a:	68a3      	ldr	r3, [r4, #8]
 801e35c:	6922      	ldr	r2, [r4, #16]
 801e35e:	bf0c      	ite	eq
 801e360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e364:	2500      	movne	r5, #0
 801e366:	4293      	cmp	r3, r2
 801e368:	bfc4      	itt	gt
 801e36a:	1a9b      	subgt	r3, r3, r2
 801e36c:	18ed      	addgt	r5, r5, r3
 801e36e:	2600      	movs	r6, #0
 801e370:	341a      	adds	r4, #26
 801e372:	42b5      	cmp	r5, r6
 801e374:	d11a      	bne.n	801e3ac <_printf_common+0xc8>
 801e376:	2000      	movs	r0, #0
 801e378:	e008      	b.n	801e38c <_printf_common+0xa8>
 801e37a:	2301      	movs	r3, #1
 801e37c:	4652      	mov	r2, sl
 801e37e:	4649      	mov	r1, r9
 801e380:	4638      	mov	r0, r7
 801e382:	47c0      	blx	r8
 801e384:	3001      	adds	r0, #1
 801e386:	d103      	bne.n	801e390 <_printf_common+0xac>
 801e388:	f04f 30ff 	mov.w	r0, #4294967295
 801e38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e390:	3501      	adds	r5, #1
 801e392:	e7c6      	b.n	801e322 <_printf_common+0x3e>
 801e394:	18e1      	adds	r1, r4, r3
 801e396:	1c5a      	adds	r2, r3, #1
 801e398:	2030      	movs	r0, #48	; 0x30
 801e39a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e39e:	4422      	add	r2, r4
 801e3a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e3a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e3a8:	3302      	adds	r3, #2
 801e3aa:	e7c7      	b.n	801e33c <_printf_common+0x58>
 801e3ac:	2301      	movs	r3, #1
 801e3ae:	4622      	mov	r2, r4
 801e3b0:	4649      	mov	r1, r9
 801e3b2:	4638      	mov	r0, r7
 801e3b4:	47c0      	blx	r8
 801e3b6:	3001      	adds	r0, #1
 801e3b8:	d0e6      	beq.n	801e388 <_printf_common+0xa4>
 801e3ba:	3601      	adds	r6, #1
 801e3bc:	e7d9      	b.n	801e372 <_printf_common+0x8e>
	...

0801e3c0 <_printf_i>:
 801e3c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e3c4:	460c      	mov	r4, r1
 801e3c6:	4691      	mov	r9, r2
 801e3c8:	7e27      	ldrb	r7, [r4, #24]
 801e3ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e3cc:	2f78      	cmp	r7, #120	; 0x78
 801e3ce:	4680      	mov	r8, r0
 801e3d0:	469a      	mov	sl, r3
 801e3d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e3d6:	d807      	bhi.n	801e3e8 <_printf_i+0x28>
 801e3d8:	2f62      	cmp	r7, #98	; 0x62
 801e3da:	d80a      	bhi.n	801e3f2 <_printf_i+0x32>
 801e3dc:	2f00      	cmp	r7, #0
 801e3de:	f000 80d8 	beq.w	801e592 <_printf_i+0x1d2>
 801e3e2:	2f58      	cmp	r7, #88	; 0x58
 801e3e4:	f000 80a3 	beq.w	801e52e <_printf_i+0x16e>
 801e3e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e3ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e3f0:	e03a      	b.n	801e468 <_printf_i+0xa8>
 801e3f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e3f6:	2b15      	cmp	r3, #21
 801e3f8:	d8f6      	bhi.n	801e3e8 <_printf_i+0x28>
 801e3fa:	a001      	add	r0, pc, #4	; (adr r0, 801e400 <_printf_i+0x40>)
 801e3fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801e400:	0801e459 	.word	0x0801e459
 801e404:	0801e46d 	.word	0x0801e46d
 801e408:	0801e3e9 	.word	0x0801e3e9
 801e40c:	0801e3e9 	.word	0x0801e3e9
 801e410:	0801e3e9 	.word	0x0801e3e9
 801e414:	0801e3e9 	.word	0x0801e3e9
 801e418:	0801e46d 	.word	0x0801e46d
 801e41c:	0801e3e9 	.word	0x0801e3e9
 801e420:	0801e3e9 	.word	0x0801e3e9
 801e424:	0801e3e9 	.word	0x0801e3e9
 801e428:	0801e3e9 	.word	0x0801e3e9
 801e42c:	0801e579 	.word	0x0801e579
 801e430:	0801e49d 	.word	0x0801e49d
 801e434:	0801e55b 	.word	0x0801e55b
 801e438:	0801e3e9 	.word	0x0801e3e9
 801e43c:	0801e3e9 	.word	0x0801e3e9
 801e440:	0801e59b 	.word	0x0801e59b
 801e444:	0801e3e9 	.word	0x0801e3e9
 801e448:	0801e49d 	.word	0x0801e49d
 801e44c:	0801e3e9 	.word	0x0801e3e9
 801e450:	0801e3e9 	.word	0x0801e3e9
 801e454:	0801e563 	.word	0x0801e563
 801e458:	680b      	ldr	r3, [r1, #0]
 801e45a:	1d1a      	adds	r2, r3, #4
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	600a      	str	r2, [r1, #0]
 801e460:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e468:	2301      	movs	r3, #1
 801e46a:	e0a3      	b.n	801e5b4 <_printf_i+0x1f4>
 801e46c:	6825      	ldr	r5, [r4, #0]
 801e46e:	6808      	ldr	r0, [r1, #0]
 801e470:	062e      	lsls	r6, r5, #24
 801e472:	f100 0304 	add.w	r3, r0, #4
 801e476:	d50a      	bpl.n	801e48e <_printf_i+0xce>
 801e478:	6805      	ldr	r5, [r0, #0]
 801e47a:	600b      	str	r3, [r1, #0]
 801e47c:	2d00      	cmp	r5, #0
 801e47e:	da03      	bge.n	801e488 <_printf_i+0xc8>
 801e480:	232d      	movs	r3, #45	; 0x2d
 801e482:	426d      	negs	r5, r5
 801e484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e488:	485e      	ldr	r0, [pc, #376]	; (801e604 <_printf_i+0x244>)
 801e48a:	230a      	movs	r3, #10
 801e48c:	e019      	b.n	801e4c2 <_printf_i+0x102>
 801e48e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801e492:	6805      	ldr	r5, [r0, #0]
 801e494:	600b      	str	r3, [r1, #0]
 801e496:	bf18      	it	ne
 801e498:	b22d      	sxthne	r5, r5
 801e49a:	e7ef      	b.n	801e47c <_printf_i+0xbc>
 801e49c:	680b      	ldr	r3, [r1, #0]
 801e49e:	6825      	ldr	r5, [r4, #0]
 801e4a0:	1d18      	adds	r0, r3, #4
 801e4a2:	6008      	str	r0, [r1, #0]
 801e4a4:	0628      	lsls	r0, r5, #24
 801e4a6:	d501      	bpl.n	801e4ac <_printf_i+0xec>
 801e4a8:	681d      	ldr	r5, [r3, #0]
 801e4aa:	e002      	b.n	801e4b2 <_printf_i+0xf2>
 801e4ac:	0669      	lsls	r1, r5, #25
 801e4ae:	d5fb      	bpl.n	801e4a8 <_printf_i+0xe8>
 801e4b0:	881d      	ldrh	r5, [r3, #0]
 801e4b2:	4854      	ldr	r0, [pc, #336]	; (801e604 <_printf_i+0x244>)
 801e4b4:	2f6f      	cmp	r7, #111	; 0x6f
 801e4b6:	bf0c      	ite	eq
 801e4b8:	2308      	moveq	r3, #8
 801e4ba:	230a      	movne	r3, #10
 801e4bc:	2100      	movs	r1, #0
 801e4be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e4c2:	6866      	ldr	r6, [r4, #4]
 801e4c4:	60a6      	str	r6, [r4, #8]
 801e4c6:	2e00      	cmp	r6, #0
 801e4c8:	bfa2      	ittt	ge
 801e4ca:	6821      	ldrge	r1, [r4, #0]
 801e4cc:	f021 0104 	bicge.w	r1, r1, #4
 801e4d0:	6021      	strge	r1, [r4, #0]
 801e4d2:	b90d      	cbnz	r5, 801e4d8 <_printf_i+0x118>
 801e4d4:	2e00      	cmp	r6, #0
 801e4d6:	d04d      	beq.n	801e574 <_printf_i+0x1b4>
 801e4d8:	4616      	mov	r6, r2
 801e4da:	fbb5 f1f3 	udiv	r1, r5, r3
 801e4de:	fb03 5711 	mls	r7, r3, r1, r5
 801e4e2:	5dc7      	ldrb	r7, [r0, r7]
 801e4e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e4e8:	462f      	mov	r7, r5
 801e4ea:	42bb      	cmp	r3, r7
 801e4ec:	460d      	mov	r5, r1
 801e4ee:	d9f4      	bls.n	801e4da <_printf_i+0x11a>
 801e4f0:	2b08      	cmp	r3, #8
 801e4f2:	d10b      	bne.n	801e50c <_printf_i+0x14c>
 801e4f4:	6823      	ldr	r3, [r4, #0]
 801e4f6:	07df      	lsls	r7, r3, #31
 801e4f8:	d508      	bpl.n	801e50c <_printf_i+0x14c>
 801e4fa:	6923      	ldr	r3, [r4, #16]
 801e4fc:	6861      	ldr	r1, [r4, #4]
 801e4fe:	4299      	cmp	r1, r3
 801e500:	bfde      	ittt	le
 801e502:	2330      	movle	r3, #48	; 0x30
 801e504:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e508:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e50c:	1b92      	subs	r2, r2, r6
 801e50e:	6122      	str	r2, [r4, #16]
 801e510:	f8cd a000 	str.w	sl, [sp]
 801e514:	464b      	mov	r3, r9
 801e516:	aa03      	add	r2, sp, #12
 801e518:	4621      	mov	r1, r4
 801e51a:	4640      	mov	r0, r8
 801e51c:	f7ff fee2 	bl	801e2e4 <_printf_common>
 801e520:	3001      	adds	r0, #1
 801e522:	d14c      	bne.n	801e5be <_printf_i+0x1fe>
 801e524:	f04f 30ff 	mov.w	r0, #4294967295
 801e528:	b004      	add	sp, #16
 801e52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e52e:	4835      	ldr	r0, [pc, #212]	; (801e604 <_printf_i+0x244>)
 801e530:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e534:	6823      	ldr	r3, [r4, #0]
 801e536:	680e      	ldr	r6, [r1, #0]
 801e538:	061f      	lsls	r7, r3, #24
 801e53a:	f856 5b04 	ldr.w	r5, [r6], #4
 801e53e:	600e      	str	r6, [r1, #0]
 801e540:	d514      	bpl.n	801e56c <_printf_i+0x1ac>
 801e542:	07d9      	lsls	r1, r3, #31
 801e544:	bf44      	itt	mi
 801e546:	f043 0320 	orrmi.w	r3, r3, #32
 801e54a:	6023      	strmi	r3, [r4, #0]
 801e54c:	b91d      	cbnz	r5, 801e556 <_printf_i+0x196>
 801e54e:	6823      	ldr	r3, [r4, #0]
 801e550:	f023 0320 	bic.w	r3, r3, #32
 801e554:	6023      	str	r3, [r4, #0]
 801e556:	2310      	movs	r3, #16
 801e558:	e7b0      	b.n	801e4bc <_printf_i+0xfc>
 801e55a:	6823      	ldr	r3, [r4, #0]
 801e55c:	f043 0320 	orr.w	r3, r3, #32
 801e560:	6023      	str	r3, [r4, #0]
 801e562:	2378      	movs	r3, #120	; 0x78
 801e564:	4828      	ldr	r0, [pc, #160]	; (801e608 <_printf_i+0x248>)
 801e566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e56a:	e7e3      	b.n	801e534 <_printf_i+0x174>
 801e56c:	065e      	lsls	r6, r3, #25
 801e56e:	bf48      	it	mi
 801e570:	b2ad      	uxthmi	r5, r5
 801e572:	e7e6      	b.n	801e542 <_printf_i+0x182>
 801e574:	4616      	mov	r6, r2
 801e576:	e7bb      	b.n	801e4f0 <_printf_i+0x130>
 801e578:	680b      	ldr	r3, [r1, #0]
 801e57a:	6826      	ldr	r6, [r4, #0]
 801e57c:	6960      	ldr	r0, [r4, #20]
 801e57e:	1d1d      	adds	r5, r3, #4
 801e580:	600d      	str	r5, [r1, #0]
 801e582:	0635      	lsls	r5, r6, #24
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	d501      	bpl.n	801e58c <_printf_i+0x1cc>
 801e588:	6018      	str	r0, [r3, #0]
 801e58a:	e002      	b.n	801e592 <_printf_i+0x1d2>
 801e58c:	0671      	lsls	r1, r6, #25
 801e58e:	d5fb      	bpl.n	801e588 <_printf_i+0x1c8>
 801e590:	8018      	strh	r0, [r3, #0]
 801e592:	2300      	movs	r3, #0
 801e594:	6123      	str	r3, [r4, #16]
 801e596:	4616      	mov	r6, r2
 801e598:	e7ba      	b.n	801e510 <_printf_i+0x150>
 801e59a:	680b      	ldr	r3, [r1, #0]
 801e59c:	1d1a      	adds	r2, r3, #4
 801e59e:	600a      	str	r2, [r1, #0]
 801e5a0:	681e      	ldr	r6, [r3, #0]
 801e5a2:	6862      	ldr	r2, [r4, #4]
 801e5a4:	2100      	movs	r1, #0
 801e5a6:	4630      	mov	r0, r6
 801e5a8:	f7e1 fe4a 	bl	8000240 <memchr>
 801e5ac:	b108      	cbz	r0, 801e5b2 <_printf_i+0x1f2>
 801e5ae:	1b80      	subs	r0, r0, r6
 801e5b0:	6060      	str	r0, [r4, #4]
 801e5b2:	6863      	ldr	r3, [r4, #4]
 801e5b4:	6123      	str	r3, [r4, #16]
 801e5b6:	2300      	movs	r3, #0
 801e5b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e5bc:	e7a8      	b.n	801e510 <_printf_i+0x150>
 801e5be:	6923      	ldr	r3, [r4, #16]
 801e5c0:	4632      	mov	r2, r6
 801e5c2:	4649      	mov	r1, r9
 801e5c4:	4640      	mov	r0, r8
 801e5c6:	47d0      	blx	sl
 801e5c8:	3001      	adds	r0, #1
 801e5ca:	d0ab      	beq.n	801e524 <_printf_i+0x164>
 801e5cc:	6823      	ldr	r3, [r4, #0]
 801e5ce:	079b      	lsls	r3, r3, #30
 801e5d0:	d413      	bmi.n	801e5fa <_printf_i+0x23a>
 801e5d2:	68e0      	ldr	r0, [r4, #12]
 801e5d4:	9b03      	ldr	r3, [sp, #12]
 801e5d6:	4298      	cmp	r0, r3
 801e5d8:	bfb8      	it	lt
 801e5da:	4618      	movlt	r0, r3
 801e5dc:	e7a4      	b.n	801e528 <_printf_i+0x168>
 801e5de:	2301      	movs	r3, #1
 801e5e0:	4632      	mov	r2, r6
 801e5e2:	4649      	mov	r1, r9
 801e5e4:	4640      	mov	r0, r8
 801e5e6:	47d0      	blx	sl
 801e5e8:	3001      	adds	r0, #1
 801e5ea:	d09b      	beq.n	801e524 <_printf_i+0x164>
 801e5ec:	3501      	adds	r5, #1
 801e5ee:	68e3      	ldr	r3, [r4, #12]
 801e5f0:	9903      	ldr	r1, [sp, #12]
 801e5f2:	1a5b      	subs	r3, r3, r1
 801e5f4:	42ab      	cmp	r3, r5
 801e5f6:	dcf2      	bgt.n	801e5de <_printf_i+0x21e>
 801e5f8:	e7eb      	b.n	801e5d2 <_printf_i+0x212>
 801e5fa:	2500      	movs	r5, #0
 801e5fc:	f104 0619 	add.w	r6, r4, #25
 801e600:	e7f5      	b.n	801e5ee <_printf_i+0x22e>
 801e602:	bf00      	nop
 801e604:	080227c1 	.word	0x080227c1
 801e608:	080227d2 	.word	0x080227d2

0801e60c <_sbrk_r>:
 801e60c:	b538      	push	{r3, r4, r5, lr}
 801e60e:	4d06      	ldr	r5, [pc, #24]	; (801e628 <_sbrk_r+0x1c>)
 801e610:	2300      	movs	r3, #0
 801e612:	4604      	mov	r4, r0
 801e614:	4608      	mov	r0, r1
 801e616:	602b      	str	r3, [r5, #0]
 801e618:	f7e3 fca4 	bl	8001f64 <_sbrk>
 801e61c:	1c43      	adds	r3, r0, #1
 801e61e:	d102      	bne.n	801e626 <_sbrk_r+0x1a>
 801e620:	682b      	ldr	r3, [r5, #0]
 801e622:	b103      	cbz	r3, 801e626 <_sbrk_r+0x1a>
 801e624:	6023      	str	r3, [r4, #0]
 801e626:	bd38      	pop	{r3, r4, r5, pc}
 801e628:	2000e5c8 	.word	0x2000e5c8

0801e62c <_raise_r>:
 801e62c:	291f      	cmp	r1, #31
 801e62e:	b538      	push	{r3, r4, r5, lr}
 801e630:	4604      	mov	r4, r0
 801e632:	460d      	mov	r5, r1
 801e634:	d904      	bls.n	801e640 <_raise_r+0x14>
 801e636:	2316      	movs	r3, #22
 801e638:	6003      	str	r3, [r0, #0]
 801e63a:	f04f 30ff 	mov.w	r0, #4294967295
 801e63e:	bd38      	pop	{r3, r4, r5, pc}
 801e640:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e642:	b112      	cbz	r2, 801e64a <_raise_r+0x1e>
 801e644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e648:	b94b      	cbnz	r3, 801e65e <_raise_r+0x32>
 801e64a:	4620      	mov	r0, r4
 801e64c:	f000 f830 	bl	801e6b0 <_getpid_r>
 801e650:	462a      	mov	r2, r5
 801e652:	4601      	mov	r1, r0
 801e654:	4620      	mov	r0, r4
 801e656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e65a:	f000 b817 	b.w	801e68c <_kill_r>
 801e65e:	2b01      	cmp	r3, #1
 801e660:	d00a      	beq.n	801e678 <_raise_r+0x4c>
 801e662:	1c59      	adds	r1, r3, #1
 801e664:	d103      	bne.n	801e66e <_raise_r+0x42>
 801e666:	2316      	movs	r3, #22
 801e668:	6003      	str	r3, [r0, #0]
 801e66a:	2001      	movs	r0, #1
 801e66c:	e7e7      	b.n	801e63e <_raise_r+0x12>
 801e66e:	2400      	movs	r4, #0
 801e670:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e674:	4628      	mov	r0, r5
 801e676:	4798      	blx	r3
 801e678:	2000      	movs	r0, #0
 801e67a:	e7e0      	b.n	801e63e <_raise_r+0x12>

0801e67c <raise>:
 801e67c:	4b02      	ldr	r3, [pc, #8]	; (801e688 <raise+0xc>)
 801e67e:	4601      	mov	r1, r0
 801e680:	6818      	ldr	r0, [r3, #0]
 801e682:	f7ff bfd3 	b.w	801e62c <_raise_r>
 801e686:	bf00      	nop
 801e688:	20000074 	.word	0x20000074

0801e68c <_kill_r>:
 801e68c:	b538      	push	{r3, r4, r5, lr}
 801e68e:	4d07      	ldr	r5, [pc, #28]	; (801e6ac <_kill_r+0x20>)
 801e690:	2300      	movs	r3, #0
 801e692:	4604      	mov	r4, r0
 801e694:	4608      	mov	r0, r1
 801e696:	4611      	mov	r1, r2
 801e698:	602b      	str	r3, [r5, #0]
 801e69a:	f7e3 fbdb 	bl	8001e54 <_kill>
 801e69e:	1c43      	adds	r3, r0, #1
 801e6a0:	d102      	bne.n	801e6a8 <_kill_r+0x1c>
 801e6a2:	682b      	ldr	r3, [r5, #0]
 801e6a4:	b103      	cbz	r3, 801e6a8 <_kill_r+0x1c>
 801e6a6:	6023      	str	r3, [r4, #0]
 801e6a8:	bd38      	pop	{r3, r4, r5, pc}
 801e6aa:	bf00      	nop
 801e6ac:	2000e5c8 	.word	0x2000e5c8

0801e6b0 <_getpid_r>:
 801e6b0:	f7e3 bbc8 	b.w	8001e44 <_getpid>

0801e6b4 <__swbuf_r>:
 801e6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6b6:	460e      	mov	r6, r1
 801e6b8:	4614      	mov	r4, r2
 801e6ba:	4605      	mov	r5, r0
 801e6bc:	b118      	cbz	r0, 801e6c6 <__swbuf_r+0x12>
 801e6be:	6983      	ldr	r3, [r0, #24]
 801e6c0:	b90b      	cbnz	r3, 801e6c6 <__swbuf_r+0x12>
 801e6c2:	f000 fa33 	bl	801eb2c <__sinit>
 801e6c6:	4b21      	ldr	r3, [pc, #132]	; (801e74c <__swbuf_r+0x98>)
 801e6c8:	429c      	cmp	r4, r3
 801e6ca:	d12b      	bne.n	801e724 <__swbuf_r+0x70>
 801e6cc:	686c      	ldr	r4, [r5, #4]
 801e6ce:	69a3      	ldr	r3, [r4, #24]
 801e6d0:	60a3      	str	r3, [r4, #8]
 801e6d2:	89a3      	ldrh	r3, [r4, #12]
 801e6d4:	071a      	lsls	r2, r3, #28
 801e6d6:	d52f      	bpl.n	801e738 <__swbuf_r+0x84>
 801e6d8:	6923      	ldr	r3, [r4, #16]
 801e6da:	b36b      	cbz	r3, 801e738 <__swbuf_r+0x84>
 801e6dc:	6923      	ldr	r3, [r4, #16]
 801e6de:	6820      	ldr	r0, [r4, #0]
 801e6e0:	1ac0      	subs	r0, r0, r3
 801e6e2:	6963      	ldr	r3, [r4, #20]
 801e6e4:	b2f6      	uxtb	r6, r6
 801e6e6:	4283      	cmp	r3, r0
 801e6e8:	4637      	mov	r7, r6
 801e6ea:	dc04      	bgt.n	801e6f6 <__swbuf_r+0x42>
 801e6ec:	4621      	mov	r1, r4
 801e6ee:	4628      	mov	r0, r5
 801e6f0:	f000 f988 	bl	801ea04 <_fflush_r>
 801e6f4:	bb30      	cbnz	r0, 801e744 <__swbuf_r+0x90>
 801e6f6:	68a3      	ldr	r3, [r4, #8]
 801e6f8:	3b01      	subs	r3, #1
 801e6fa:	60a3      	str	r3, [r4, #8]
 801e6fc:	6823      	ldr	r3, [r4, #0]
 801e6fe:	1c5a      	adds	r2, r3, #1
 801e700:	6022      	str	r2, [r4, #0]
 801e702:	701e      	strb	r6, [r3, #0]
 801e704:	6963      	ldr	r3, [r4, #20]
 801e706:	3001      	adds	r0, #1
 801e708:	4283      	cmp	r3, r0
 801e70a:	d004      	beq.n	801e716 <__swbuf_r+0x62>
 801e70c:	89a3      	ldrh	r3, [r4, #12]
 801e70e:	07db      	lsls	r3, r3, #31
 801e710:	d506      	bpl.n	801e720 <__swbuf_r+0x6c>
 801e712:	2e0a      	cmp	r6, #10
 801e714:	d104      	bne.n	801e720 <__swbuf_r+0x6c>
 801e716:	4621      	mov	r1, r4
 801e718:	4628      	mov	r0, r5
 801e71a:	f000 f973 	bl	801ea04 <_fflush_r>
 801e71e:	b988      	cbnz	r0, 801e744 <__swbuf_r+0x90>
 801e720:	4638      	mov	r0, r7
 801e722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e724:	4b0a      	ldr	r3, [pc, #40]	; (801e750 <__swbuf_r+0x9c>)
 801e726:	429c      	cmp	r4, r3
 801e728:	d101      	bne.n	801e72e <__swbuf_r+0x7a>
 801e72a:	68ac      	ldr	r4, [r5, #8]
 801e72c:	e7cf      	b.n	801e6ce <__swbuf_r+0x1a>
 801e72e:	4b09      	ldr	r3, [pc, #36]	; (801e754 <__swbuf_r+0xa0>)
 801e730:	429c      	cmp	r4, r3
 801e732:	bf08      	it	eq
 801e734:	68ec      	ldreq	r4, [r5, #12]
 801e736:	e7ca      	b.n	801e6ce <__swbuf_r+0x1a>
 801e738:	4621      	mov	r1, r4
 801e73a:	4628      	mov	r0, r5
 801e73c:	f000 f80c 	bl	801e758 <__swsetup_r>
 801e740:	2800      	cmp	r0, #0
 801e742:	d0cb      	beq.n	801e6dc <__swbuf_r+0x28>
 801e744:	f04f 37ff 	mov.w	r7, #4294967295
 801e748:	e7ea      	b.n	801e720 <__swbuf_r+0x6c>
 801e74a:	bf00      	nop
 801e74c:	08022808 	.word	0x08022808
 801e750:	08022828 	.word	0x08022828
 801e754:	080227e8 	.word	0x080227e8

0801e758 <__swsetup_r>:
 801e758:	4b32      	ldr	r3, [pc, #200]	; (801e824 <__swsetup_r+0xcc>)
 801e75a:	b570      	push	{r4, r5, r6, lr}
 801e75c:	681d      	ldr	r5, [r3, #0]
 801e75e:	4606      	mov	r6, r0
 801e760:	460c      	mov	r4, r1
 801e762:	b125      	cbz	r5, 801e76e <__swsetup_r+0x16>
 801e764:	69ab      	ldr	r3, [r5, #24]
 801e766:	b913      	cbnz	r3, 801e76e <__swsetup_r+0x16>
 801e768:	4628      	mov	r0, r5
 801e76a:	f000 f9df 	bl	801eb2c <__sinit>
 801e76e:	4b2e      	ldr	r3, [pc, #184]	; (801e828 <__swsetup_r+0xd0>)
 801e770:	429c      	cmp	r4, r3
 801e772:	d10f      	bne.n	801e794 <__swsetup_r+0x3c>
 801e774:	686c      	ldr	r4, [r5, #4]
 801e776:	89a3      	ldrh	r3, [r4, #12]
 801e778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e77c:	0719      	lsls	r1, r3, #28
 801e77e:	d42c      	bmi.n	801e7da <__swsetup_r+0x82>
 801e780:	06dd      	lsls	r5, r3, #27
 801e782:	d411      	bmi.n	801e7a8 <__swsetup_r+0x50>
 801e784:	2309      	movs	r3, #9
 801e786:	6033      	str	r3, [r6, #0]
 801e788:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e78c:	81a3      	strh	r3, [r4, #12]
 801e78e:	f04f 30ff 	mov.w	r0, #4294967295
 801e792:	e03e      	b.n	801e812 <__swsetup_r+0xba>
 801e794:	4b25      	ldr	r3, [pc, #148]	; (801e82c <__swsetup_r+0xd4>)
 801e796:	429c      	cmp	r4, r3
 801e798:	d101      	bne.n	801e79e <__swsetup_r+0x46>
 801e79a:	68ac      	ldr	r4, [r5, #8]
 801e79c:	e7eb      	b.n	801e776 <__swsetup_r+0x1e>
 801e79e:	4b24      	ldr	r3, [pc, #144]	; (801e830 <__swsetup_r+0xd8>)
 801e7a0:	429c      	cmp	r4, r3
 801e7a2:	bf08      	it	eq
 801e7a4:	68ec      	ldreq	r4, [r5, #12]
 801e7a6:	e7e6      	b.n	801e776 <__swsetup_r+0x1e>
 801e7a8:	0758      	lsls	r0, r3, #29
 801e7aa:	d512      	bpl.n	801e7d2 <__swsetup_r+0x7a>
 801e7ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e7ae:	b141      	cbz	r1, 801e7c2 <__swsetup_r+0x6a>
 801e7b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e7b4:	4299      	cmp	r1, r3
 801e7b6:	d002      	beq.n	801e7be <__swsetup_r+0x66>
 801e7b8:	4630      	mov	r0, r6
 801e7ba:	f7ff fb8f 	bl	801dedc <_free_r>
 801e7be:	2300      	movs	r3, #0
 801e7c0:	6363      	str	r3, [r4, #52]	; 0x34
 801e7c2:	89a3      	ldrh	r3, [r4, #12]
 801e7c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e7c8:	81a3      	strh	r3, [r4, #12]
 801e7ca:	2300      	movs	r3, #0
 801e7cc:	6063      	str	r3, [r4, #4]
 801e7ce:	6923      	ldr	r3, [r4, #16]
 801e7d0:	6023      	str	r3, [r4, #0]
 801e7d2:	89a3      	ldrh	r3, [r4, #12]
 801e7d4:	f043 0308 	orr.w	r3, r3, #8
 801e7d8:	81a3      	strh	r3, [r4, #12]
 801e7da:	6923      	ldr	r3, [r4, #16]
 801e7dc:	b94b      	cbnz	r3, 801e7f2 <__swsetup_r+0x9a>
 801e7de:	89a3      	ldrh	r3, [r4, #12]
 801e7e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e7e8:	d003      	beq.n	801e7f2 <__swsetup_r+0x9a>
 801e7ea:	4621      	mov	r1, r4
 801e7ec:	4630      	mov	r0, r6
 801e7ee:	f000 fa63 	bl	801ecb8 <__smakebuf_r>
 801e7f2:	89a0      	ldrh	r0, [r4, #12]
 801e7f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e7f8:	f010 0301 	ands.w	r3, r0, #1
 801e7fc:	d00a      	beq.n	801e814 <__swsetup_r+0xbc>
 801e7fe:	2300      	movs	r3, #0
 801e800:	60a3      	str	r3, [r4, #8]
 801e802:	6963      	ldr	r3, [r4, #20]
 801e804:	425b      	negs	r3, r3
 801e806:	61a3      	str	r3, [r4, #24]
 801e808:	6923      	ldr	r3, [r4, #16]
 801e80a:	b943      	cbnz	r3, 801e81e <__swsetup_r+0xc6>
 801e80c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e810:	d1ba      	bne.n	801e788 <__swsetup_r+0x30>
 801e812:	bd70      	pop	{r4, r5, r6, pc}
 801e814:	0781      	lsls	r1, r0, #30
 801e816:	bf58      	it	pl
 801e818:	6963      	ldrpl	r3, [r4, #20]
 801e81a:	60a3      	str	r3, [r4, #8]
 801e81c:	e7f4      	b.n	801e808 <__swsetup_r+0xb0>
 801e81e:	2000      	movs	r0, #0
 801e820:	e7f7      	b.n	801e812 <__swsetup_r+0xba>
 801e822:	bf00      	nop
 801e824:	20000074 	.word	0x20000074
 801e828:	08022808 	.word	0x08022808
 801e82c:	08022828 	.word	0x08022828
 801e830:	080227e8 	.word	0x080227e8

0801e834 <__register_exitproc>:
 801e834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e838:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801e8f4 <__register_exitproc+0xc0>
 801e83c:	4606      	mov	r6, r0
 801e83e:	f8d8 0000 	ldr.w	r0, [r8]
 801e842:	461f      	mov	r7, r3
 801e844:	460d      	mov	r5, r1
 801e846:	4691      	mov	r9, r2
 801e848:	f000 fa0e 	bl	801ec68 <__retarget_lock_acquire_recursive>
 801e84c:	4b25      	ldr	r3, [pc, #148]	; (801e8e4 <__register_exitproc+0xb0>)
 801e84e:	681c      	ldr	r4, [r3, #0]
 801e850:	b934      	cbnz	r4, 801e860 <__register_exitproc+0x2c>
 801e852:	4c25      	ldr	r4, [pc, #148]	; (801e8e8 <__register_exitproc+0xb4>)
 801e854:	601c      	str	r4, [r3, #0]
 801e856:	4b25      	ldr	r3, [pc, #148]	; (801e8ec <__register_exitproc+0xb8>)
 801e858:	b113      	cbz	r3, 801e860 <__register_exitproc+0x2c>
 801e85a:	681b      	ldr	r3, [r3, #0]
 801e85c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801e860:	6863      	ldr	r3, [r4, #4]
 801e862:	2b1f      	cmp	r3, #31
 801e864:	dd07      	ble.n	801e876 <__register_exitproc+0x42>
 801e866:	f8d8 0000 	ldr.w	r0, [r8]
 801e86a:	f000 f9ff 	bl	801ec6c <__retarget_lock_release_recursive>
 801e86e:	f04f 30ff 	mov.w	r0, #4294967295
 801e872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e876:	b34e      	cbz	r6, 801e8cc <__register_exitproc+0x98>
 801e878:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801e87c:	b988      	cbnz	r0, 801e8a2 <__register_exitproc+0x6e>
 801e87e:	4b1c      	ldr	r3, [pc, #112]	; (801e8f0 <__register_exitproc+0xbc>)
 801e880:	b923      	cbnz	r3, 801e88c <__register_exitproc+0x58>
 801e882:	f8d8 0000 	ldr.w	r0, [r8]
 801e886:	f000 f9f0 	bl	801ec6a <__retarget_lock_release>
 801e88a:	e7f0      	b.n	801e86e <__register_exitproc+0x3a>
 801e88c:	f44f 7084 	mov.w	r0, #264	; 0x108
 801e890:	f7ff fafe 	bl	801de90 <malloc>
 801e894:	2800      	cmp	r0, #0
 801e896:	d0f4      	beq.n	801e882 <__register_exitproc+0x4e>
 801e898:	2300      	movs	r3, #0
 801e89a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801e89e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801e8a2:	6863      	ldr	r3, [r4, #4]
 801e8a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801e8a8:	2201      	movs	r2, #1
 801e8aa:	409a      	lsls	r2, r3
 801e8ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801e8b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801e8b4:	4313      	orrs	r3, r2
 801e8b6:	2e02      	cmp	r6, #2
 801e8b8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801e8bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801e8c0:	bf02      	ittt	eq
 801e8c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801e8c6:	431a      	orreq	r2, r3
 801e8c8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801e8cc:	6863      	ldr	r3, [r4, #4]
 801e8ce:	f8d8 0000 	ldr.w	r0, [r8]
 801e8d2:	1c5a      	adds	r2, r3, #1
 801e8d4:	3302      	adds	r3, #2
 801e8d6:	6062      	str	r2, [r4, #4]
 801e8d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801e8dc:	f000 f9c6 	bl	801ec6c <__retarget_lock_release_recursive>
 801e8e0:	2000      	movs	r0, #0
 801e8e2:	e7c6      	b.n	801e872 <__register_exitproc+0x3e>
 801e8e4:	2000e1e8 	.word	0x2000e1e8
 801e8e8:	2000e15c 	.word	0x2000e15c
 801e8ec:	080227e4 	.word	0x080227e4
 801e8f0:	0801de91 	.word	0x0801de91
 801e8f4:	200000d8 	.word	0x200000d8

0801e8f8 <__sflush_r>:
 801e8f8:	898a      	ldrh	r2, [r1, #12]
 801e8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8fe:	4605      	mov	r5, r0
 801e900:	0710      	lsls	r0, r2, #28
 801e902:	460c      	mov	r4, r1
 801e904:	d458      	bmi.n	801e9b8 <__sflush_r+0xc0>
 801e906:	684b      	ldr	r3, [r1, #4]
 801e908:	2b00      	cmp	r3, #0
 801e90a:	dc05      	bgt.n	801e918 <__sflush_r+0x20>
 801e90c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e90e:	2b00      	cmp	r3, #0
 801e910:	dc02      	bgt.n	801e918 <__sflush_r+0x20>
 801e912:	2000      	movs	r0, #0
 801e914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e91a:	2e00      	cmp	r6, #0
 801e91c:	d0f9      	beq.n	801e912 <__sflush_r+0x1a>
 801e91e:	2300      	movs	r3, #0
 801e920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e924:	682f      	ldr	r7, [r5, #0]
 801e926:	602b      	str	r3, [r5, #0]
 801e928:	d032      	beq.n	801e990 <__sflush_r+0x98>
 801e92a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e92c:	89a3      	ldrh	r3, [r4, #12]
 801e92e:	075a      	lsls	r2, r3, #29
 801e930:	d505      	bpl.n	801e93e <__sflush_r+0x46>
 801e932:	6863      	ldr	r3, [r4, #4]
 801e934:	1ac0      	subs	r0, r0, r3
 801e936:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e938:	b10b      	cbz	r3, 801e93e <__sflush_r+0x46>
 801e93a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e93c:	1ac0      	subs	r0, r0, r3
 801e93e:	2300      	movs	r3, #0
 801e940:	4602      	mov	r2, r0
 801e942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e944:	6a21      	ldr	r1, [r4, #32]
 801e946:	4628      	mov	r0, r5
 801e948:	47b0      	blx	r6
 801e94a:	1c43      	adds	r3, r0, #1
 801e94c:	89a3      	ldrh	r3, [r4, #12]
 801e94e:	d106      	bne.n	801e95e <__sflush_r+0x66>
 801e950:	6829      	ldr	r1, [r5, #0]
 801e952:	291d      	cmp	r1, #29
 801e954:	d82c      	bhi.n	801e9b0 <__sflush_r+0xb8>
 801e956:	4a2a      	ldr	r2, [pc, #168]	; (801ea00 <__sflush_r+0x108>)
 801e958:	40ca      	lsrs	r2, r1
 801e95a:	07d6      	lsls	r6, r2, #31
 801e95c:	d528      	bpl.n	801e9b0 <__sflush_r+0xb8>
 801e95e:	2200      	movs	r2, #0
 801e960:	6062      	str	r2, [r4, #4]
 801e962:	04d9      	lsls	r1, r3, #19
 801e964:	6922      	ldr	r2, [r4, #16]
 801e966:	6022      	str	r2, [r4, #0]
 801e968:	d504      	bpl.n	801e974 <__sflush_r+0x7c>
 801e96a:	1c42      	adds	r2, r0, #1
 801e96c:	d101      	bne.n	801e972 <__sflush_r+0x7a>
 801e96e:	682b      	ldr	r3, [r5, #0]
 801e970:	b903      	cbnz	r3, 801e974 <__sflush_r+0x7c>
 801e972:	6560      	str	r0, [r4, #84]	; 0x54
 801e974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e976:	602f      	str	r7, [r5, #0]
 801e978:	2900      	cmp	r1, #0
 801e97a:	d0ca      	beq.n	801e912 <__sflush_r+0x1a>
 801e97c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e980:	4299      	cmp	r1, r3
 801e982:	d002      	beq.n	801e98a <__sflush_r+0x92>
 801e984:	4628      	mov	r0, r5
 801e986:	f7ff faa9 	bl	801dedc <_free_r>
 801e98a:	2000      	movs	r0, #0
 801e98c:	6360      	str	r0, [r4, #52]	; 0x34
 801e98e:	e7c1      	b.n	801e914 <__sflush_r+0x1c>
 801e990:	6a21      	ldr	r1, [r4, #32]
 801e992:	2301      	movs	r3, #1
 801e994:	4628      	mov	r0, r5
 801e996:	47b0      	blx	r6
 801e998:	1c41      	adds	r1, r0, #1
 801e99a:	d1c7      	bne.n	801e92c <__sflush_r+0x34>
 801e99c:	682b      	ldr	r3, [r5, #0]
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	d0c4      	beq.n	801e92c <__sflush_r+0x34>
 801e9a2:	2b1d      	cmp	r3, #29
 801e9a4:	d001      	beq.n	801e9aa <__sflush_r+0xb2>
 801e9a6:	2b16      	cmp	r3, #22
 801e9a8:	d101      	bne.n	801e9ae <__sflush_r+0xb6>
 801e9aa:	602f      	str	r7, [r5, #0]
 801e9ac:	e7b1      	b.n	801e912 <__sflush_r+0x1a>
 801e9ae:	89a3      	ldrh	r3, [r4, #12]
 801e9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e9b4:	81a3      	strh	r3, [r4, #12]
 801e9b6:	e7ad      	b.n	801e914 <__sflush_r+0x1c>
 801e9b8:	690f      	ldr	r7, [r1, #16]
 801e9ba:	2f00      	cmp	r7, #0
 801e9bc:	d0a9      	beq.n	801e912 <__sflush_r+0x1a>
 801e9be:	0793      	lsls	r3, r2, #30
 801e9c0:	680e      	ldr	r6, [r1, #0]
 801e9c2:	bf08      	it	eq
 801e9c4:	694b      	ldreq	r3, [r1, #20]
 801e9c6:	600f      	str	r7, [r1, #0]
 801e9c8:	bf18      	it	ne
 801e9ca:	2300      	movne	r3, #0
 801e9cc:	eba6 0807 	sub.w	r8, r6, r7
 801e9d0:	608b      	str	r3, [r1, #8]
 801e9d2:	f1b8 0f00 	cmp.w	r8, #0
 801e9d6:	dd9c      	ble.n	801e912 <__sflush_r+0x1a>
 801e9d8:	6a21      	ldr	r1, [r4, #32]
 801e9da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e9dc:	4643      	mov	r3, r8
 801e9de:	463a      	mov	r2, r7
 801e9e0:	4628      	mov	r0, r5
 801e9e2:	47b0      	blx	r6
 801e9e4:	2800      	cmp	r0, #0
 801e9e6:	dc06      	bgt.n	801e9f6 <__sflush_r+0xfe>
 801e9e8:	89a3      	ldrh	r3, [r4, #12]
 801e9ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e9ee:	81a3      	strh	r3, [r4, #12]
 801e9f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e9f4:	e78e      	b.n	801e914 <__sflush_r+0x1c>
 801e9f6:	4407      	add	r7, r0
 801e9f8:	eba8 0800 	sub.w	r8, r8, r0
 801e9fc:	e7e9      	b.n	801e9d2 <__sflush_r+0xda>
 801e9fe:	bf00      	nop
 801ea00:	20400001 	.word	0x20400001

0801ea04 <_fflush_r>:
 801ea04:	b538      	push	{r3, r4, r5, lr}
 801ea06:	690b      	ldr	r3, [r1, #16]
 801ea08:	4605      	mov	r5, r0
 801ea0a:	460c      	mov	r4, r1
 801ea0c:	b913      	cbnz	r3, 801ea14 <_fflush_r+0x10>
 801ea0e:	2500      	movs	r5, #0
 801ea10:	4628      	mov	r0, r5
 801ea12:	bd38      	pop	{r3, r4, r5, pc}
 801ea14:	b118      	cbz	r0, 801ea1e <_fflush_r+0x1a>
 801ea16:	6983      	ldr	r3, [r0, #24]
 801ea18:	b90b      	cbnz	r3, 801ea1e <_fflush_r+0x1a>
 801ea1a:	f000 f887 	bl	801eb2c <__sinit>
 801ea1e:	4b14      	ldr	r3, [pc, #80]	; (801ea70 <_fflush_r+0x6c>)
 801ea20:	429c      	cmp	r4, r3
 801ea22:	d11b      	bne.n	801ea5c <_fflush_r+0x58>
 801ea24:	686c      	ldr	r4, [r5, #4]
 801ea26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	d0ef      	beq.n	801ea0e <_fflush_r+0xa>
 801ea2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ea30:	07d0      	lsls	r0, r2, #31
 801ea32:	d404      	bmi.n	801ea3e <_fflush_r+0x3a>
 801ea34:	0599      	lsls	r1, r3, #22
 801ea36:	d402      	bmi.n	801ea3e <_fflush_r+0x3a>
 801ea38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea3a:	f000 f915 	bl	801ec68 <__retarget_lock_acquire_recursive>
 801ea3e:	4628      	mov	r0, r5
 801ea40:	4621      	mov	r1, r4
 801ea42:	f7ff ff59 	bl	801e8f8 <__sflush_r>
 801ea46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ea48:	07da      	lsls	r2, r3, #31
 801ea4a:	4605      	mov	r5, r0
 801ea4c:	d4e0      	bmi.n	801ea10 <_fflush_r+0xc>
 801ea4e:	89a3      	ldrh	r3, [r4, #12]
 801ea50:	059b      	lsls	r3, r3, #22
 801ea52:	d4dd      	bmi.n	801ea10 <_fflush_r+0xc>
 801ea54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea56:	f000 f909 	bl	801ec6c <__retarget_lock_release_recursive>
 801ea5a:	e7d9      	b.n	801ea10 <_fflush_r+0xc>
 801ea5c:	4b05      	ldr	r3, [pc, #20]	; (801ea74 <_fflush_r+0x70>)
 801ea5e:	429c      	cmp	r4, r3
 801ea60:	d101      	bne.n	801ea66 <_fflush_r+0x62>
 801ea62:	68ac      	ldr	r4, [r5, #8]
 801ea64:	e7df      	b.n	801ea26 <_fflush_r+0x22>
 801ea66:	4b04      	ldr	r3, [pc, #16]	; (801ea78 <_fflush_r+0x74>)
 801ea68:	429c      	cmp	r4, r3
 801ea6a:	bf08      	it	eq
 801ea6c:	68ec      	ldreq	r4, [r5, #12]
 801ea6e:	e7da      	b.n	801ea26 <_fflush_r+0x22>
 801ea70:	08022808 	.word	0x08022808
 801ea74:	08022828 	.word	0x08022828
 801ea78:	080227e8 	.word	0x080227e8

0801ea7c <std>:
 801ea7c:	2300      	movs	r3, #0
 801ea7e:	b510      	push	{r4, lr}
 801ea80:	4604      	mov	r4, r0
 801ea82:	e9c0 3300 	strd	r3, r3, [r0]
 801ea86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ea8a:	6083      	str	r3, [r0, #8]
 801ea8c:	8181      	strh	r1, [r0, #12]
 801ea8e:	6643      	str	r3, [r0, #100]	; 0x64
 801ea90:	81c2      	strh	r2, [r0, #14]
 801ea92:	6183      	str	r3, [r0, #24]
 801ea94:	4619      	mov	r1, r3
 801ea96:	2208      	movs	r2, #8
 801ea98:	305c      	adds	r0, #92	; 0x5c
 801ea9a:	f7ff fa17 	bl	801decc <memset>
 801ea9e:	4b05      	ldr	r3, [pc, #20]	; (801eab4 <std+0x38>)
 801eaa0:	6263      	str	r3, [r4, #36]	; 0x24
 801eaa2:	4b05      	ldr	r3, [pc, #20]	; (801eab8 <std+0x3c>)
 801eaa4:	62a3      	str	r3, [r4, #40]	; 0x28
 801eaa6:	4b05      	ldr	r3, [pc, #20]	; (801eabc <std+0x40>)
 801eaa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801eaaa:	4b05      	ldr	r3, [pc, #20]	; (801eac0 <std+0x44>)
 801eaac:	6224      	str	r4, [r4, #32]
 801eaae:	6323      	str	r3, [r4, #48]	; 0x30
 801eab0:	bd10      	pop	{r4, pc}
 801eab2:	bf00      	nop
 801eab4:	0801ed51 	.word	0x0801ed51
 801eab8:	0801ed73 	.word	0x0801ed73
 801eabc:	0801edab 	.word	0x0801edab
 801eac0:	0801edcf 	.word	0x0801edcf

0801eac4 <_cleanup_r>:
 801eac4:	4901      	ldr	r1, [pc, #4]	; (801eacc <_cleanup_r+0x8>)
 801eac6:	f000 b8af 	b.w	801ec28 <_fwalk_reent>
 801eaca:	bf00      	nop
 801eacc:	0801ea05 	.word	0x0801ea05

0801ead0 <__sfmoreglue>:
 801ead0:	b570      	push	{r4, r5, r6, lr}
 801ead2:	1e4a      	subs	r2, r1, #1
 801ead4:	2568      	movs	r5, #104	; 0x68
 801ead6:	4355      	muls	r5, r2
 801ead8:	460e      	mov	r6, r1
 801eada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801eade:	f7ff fa4d 	bl	801df7c <_malloc_r>
 801eae2:	4604      	mov	r4, r0
 801eae4:	b140      	cbz	r0, 801eaf8 <__sfmoreglue+0x28>
 801eae6:	2100      	movs	r1, #0
 801eae8:	e9c0 1600 	strd	r1, r6, [r0]
 801eaec:	300c      	adds	r0, #12
 801eaee:	60a0      	str	r0, [r4, #8]
 801eaf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801eaf4:	f7ff f9ea 	bl	801decc <memset>
 801eaf8:	4620      	mov	r0, r4
 801eafa:	bd70      	pop	{r4, r5, r6, pc}

0801eafc <__sfp_lock_acquire>:
 801eafc:	4801      	ldr	r0, [pc, #4]	; (801eb04 <__sfp_lock_acquire+0x8>)
 801eafe:	f000 b8b3 	b.w	801ec68 <__retarget_lock_acquire_recursive>
 801eb02:	bf00      	nop
 801eb04:	2000e5c4 	.word	0x2000e5c4

0801eb08 <__sfp_lock_release>:
 801eb08:	4801      	ldr	r0, [pc, #4]	; (801eb10 <__sfp_lock_release+0x8>)
 801eb0a:	f000 b8af 	b.w	801ec6c <__retarget_lock_release_recursive>
 801eb0e:	bf00      	nop
 801eb10:	2000e5c4 	.word	0x2000e5c4

0801eb14 <__sinit_lock_acquire>:
 801eb14:	4801      	ldr	r0, [pc, #4]	; (801eb1c <__sinit_lock_acquire+0x8>)
 801eb16:	f000 b8a7 	b.w	801ec68 <__retarget_lock_acquire_recursive>
 801eb1a:	bf00      	nop
 801eb1c:	2000e5bf 	.word	0x2000e5bf

0801eb20 <__sinit_lock_release>:
 801eb20:	4801      	ldr	r0, [pc, #4]	; (801eb28 <__sinit_lock_release+0x8>)
 801eb22:	f000 b8a3 	b.w	801ec6c <__retarget_lock_release_recursive>
 801eb26:	bf00      	nop
 801eb28:	2000e5bf 	.word	0x2000e5bf

0801eb2c <__sinit>:
 801eb2c:	b510      	push	{r4, lr}
 801eb2e:	4604      	mov	r4, r0
 801eb30:	f7ff fff0 	bl	801eb14 <__sinit_lock_acquire>
 801eb34:	69a3      	ldr	r3, [r4, #24]
 801eb36:	b11b      	cbz	r3, 801eb40 <__sinit+0x14>
 801eb38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb3c:	f7ff bff0 	b.w	801eb20 <__sinit_lock_release>
 801eb40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801eb44:	6523      	str	r3, [r4, #80]	; 0x50
 801eb46:	4b13      	ldr	r3, [pc, #76]	; (801eb94 <__sinit+0x68>)
 801eb48:	4a13      	ldr	r2, [pc, #76]	; (801eb98 <__sinit+0x6c>)
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	62a2      	str	r2, [r4, #40]	; 0x28
 801eb4e:	42a3      	cmp	r3, r4
 801eb50:	bf04      	itt	eq
 801eb52:	2301      	moveq	r3, #1
 801eb54:	61a3      	streq	r3, [r4, #24]
 801eb56:	4620      	mov	r0, r4
 801eb58:	f000 f820 	bl	801eb9c <__sfp>
 801eb5c:	6060      	str	r0, [r4, #4]
 801eb5e:	4620      	mov	r0, r4
 801eb60:	f000 f81c 	bl	801eb9c <__sfp>
 801eb64:	60a0      	str	r0, [r4, #8]
 801eb66:	4620      	mov	r0, r4
 801eb68:	f000 f818 	bl	801eb9c <__sfp>
 801eb6c:	2200      	movs	r2, #0
 801eb6e:	60e0      	str	r0, [r4, #12]
 801eb70:	2104      	movs	r1, #4
 801eb72:	6860      	ldr	r0, [r4, #4]
 801eb74:	f7ff ff82 	bl	801ea7c <std>
 801eb78:	68a0      	ldr	r0, [r4, #8]
 801eb7a:	2201      	movs	r2, #1
 801eb7c:	2109      	movs	r1, #9
 801eb7e:	f7ff ff7d 	bl	801ea7c <std>
 801eb82:	68e0      	ldr	r0, [r4, #12]
 801eb84:	2202      	movs	r2, #2
 801eb86:	2112      	movs	r1, #18
 801eb88:	f7ff ff78 	bl	801ea7c <std>
 801eb8c:	2301      	movs	r3, #1
 801eb8e:	61a3      	str	r3, [r4, #24]
 801eb90:	e7d2      	b.n	801eb38 <__sinit+0xc>
 801eb92:	bf00      	nop
 801eb94:	080227ac 	.word	0x080227ac
 801eb98:	0801eac5 	.word	0x0801eac5

0801eb9c <__sfp>:
 801eb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb9e:	4607      	mov	r7, r0
 801eba0:	f7ff ffac 	bl	801eafc <__sfp_lock_acquire>
 801eba4:	4b1e      	ldr	r3, [pc, #120]	; (801ec20 <__sfp+0x84>)
 801eba6:	681e      	ldr	r6, [r3, #0]
 801eba8:	69b3      	ldr	r3, [r6, #24]
 801ebaa:	b913      	cbnz	r3, 801ebb2 <__sfp+0x16>
 801ebac:	4630      	mov	r0, r6
 801ebae:	f7ff ffbd 	bl	801eb2c <__sinit>
 801ebb2:	3648      	adds	r6, #72	; 0x48
 801ebb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ebb8:	3b01      	subs	r3, #1
 801ebba:	d503      	bpl.n	801ebc4 <__sfp+0x28>
 801ebbc:	6833      	ldr	r3, [r6, #0]
 801ebbe:	b30b      	cbz	r3, 801ec04 <__sfp+0x68>
 801ebc0:	6836      	ldr	r6, [r6, #0]
 801ebc2:	e7f7      	b.n	801ebb4 <__sfp+0x18>
 801ebc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ebc8:	b9d5      	cbnz	r5, 801ec00 <__sfp+0x64>
 801ebca:	4b16      	ldr	r3, [pc, #88]	; (801ec24 <__sfp+0x88>)
 801ebcc:	60e3      	str	r3, [r4, #12]
 801ebce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ebd2:	6665      	str	r5, [r4, #100]	; 0x64
 801ebd4:	f000 f847 	bl	801ec66 <__retarget_lock_init_recursive>
 801ebd8:	f7ff ff96 	bl	801eb08 <__sfp_lock_release>
 801ebdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ebe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ebe4:	6025      	str	r5, [r4, #0]
 801ebe6:	61a5      	str	r5, [r4, #24]
 801ebe8:	2208      	movs	r2, #8
 801ebea:	4629      	mov	r1, r5
 801ebec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ebf0:	f7ff f96c 	bl	801decc <memset>
 801ebf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ebf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ebfc:	4620      	mov	r0, r4
 801ebfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec00:	3468      	adds	r4, #104	; 0x68
 801ec02:	e7d9      	b.n	801ebb8 <__sfp+0x1c>
 801ec04:	2104      	movs	r1, #4
 801ec06:	4638      	mov	r0, r7
 801ec08:	f7ff ff62 	bl	801ead0 <__sfmoreglue>
 801ec0c:	4604      	mov	r4, r0
 801ec0e:	6030      	str	r0, [r6, #0]
 801ec10:	2800      	cmp	r0, #0
 801ec12:	d1d5      	bne.n	801ebc0 <__sfp+0x24>
 801ec14:	f7ff ff78 	bl	801eb08 <__sfp_lock_release>
 801ec18:	230c      	movs	r3, #12
 801ec1a:	603b      	str	r3, [r7, #0]
 801ec1c:	e7ee      	b.n	801ebfc <__sfp+0x60>
 801ec1e:	bf00      	nop
 801ec20:	080227ac 	.word	0x080227ac
 801ec24:	ffff0001 	.word	0xffff0001

0801ec28 <_fwalk_reent>:
 801ec28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec2c:	4606      	mov	r6, r0
 801ec2e:	4688      	mov	r8, r1
 801ec30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ec34:	2700      	movs	r7, #0
 801ec36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ec3a:	f1b9 0901 	subs.w	r9, r9, #1
 801ec3e:	d505      	bpl.n	801ec4c <_fwalk_reent+0x24>
 801ec40:	6824      	ldr	r4, [r4, #0]
 801ec42:	2c00      	cmp	r4, #0
 801ec44:	d1f7      	bne.n	801ec36 <_fwalk_reent+0xe>
 801ec46:	4638      	mov	r0, r7
 801ec48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec4c:	89ab      	ldrh	r3, [r5, #12]
 801ec4e:	2b01      	cmp	r3, #1
 801ec50:	d907      	bls.n	801ec62 <_fwalk_reent+0x3a>
 801ec52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ec56:	3301      	adds	r3, #1
 801ec58:	d003      	beq.n	801ec62 <_fwalk_reent+0x3a>
 801ec5a:	4629      	mov	r1, r5
 801ec5c:	4630      	mov	r0, r6
 801ec5e:	47c0      	blx	r8
 801ec60:	4307      	orrs	r7, r0
 801ec62:	3568      	adds	r5, #104	; 0x68
 801ec64:	e7e9      	b.n	801ec3a <_fwalk_reent+0x12>

0801ec66 <__retarget_lock_init_recursive>:
 801ec66:	4770      	bx	lr

0801ec68 <__retarget_lock_acquire_recursive>:
 801ec68:	4770      	bx	lr

0801ec6a <__retarget_lock_release>:
 801ec6a:	4770      	bx	lr

0801ec6c <__retarget_lock_release_recursive>:
 801ec6c:	4770      	bx	lr

0801ec6e <__swhatbuf_r>:
 801ec6e:	b570      	push	{r4, r5, r6, lr}
 801ec70:	460e      	mov	r6, r1
 801ec72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec76:	2900      	cmp	r1, #0
 801ec78:	b096      	sub	sp, #88	; 0x58
 801ec7a:	4614      	mov	r4, r2
 801ec7c:	461d      	mov	r5, r3
 801ec7e:	da07      	bge.n	801ec90 <__swhatbuf_r+0x22>
 801ec80:	2300      	movs	r3, #0
 801ec82:	602b      	str	r3, [r5, #0]
 801ec84:	89b3      	ldrh	r3, [r6, #12]
 801ec86:	061a      	lsls	r2, r3, #24
 801ec88:	d410      	bmi.n	801ecac <__swhatbuf_r+0x3e>
 801ec8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ec8e:	e00e      	b.n	801ecae <__swhatbuf_r+0x40>
 801ec90:	466a      	mov	r2, sp
 801ec92:	f000 f8c3 	bl	801ee1c <_fstat_r>
 801ec96:	2800      	cmp	r0, #0
 801ec98:	dbf2      	blt.n	801ec80 <__swhatbuf_r+0x12>
 801ec9a:	9a01      	ldr	r2, [sp, #4]
 801ec9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801eca0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801eca4:	425a      	negs	r2, r3
 801eca6:	415a      	adcs	r2, r3
 801eca8:	602a      	str	r2, [r5, #0]
 801ecaa:	e7ee      	b.n	801ec8a <__swhatbuf_r+0x1c>
 801ecac:	2340      	movs	r3, #64	; 0x40
 801ecae:	2000      	movs	r0, #0
 801ecb0:	6023      	str	r3, [r4, #0]
 801ecb2:	b016      	add	sp, #88	; 0x58
 801ecb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ecb8 <__smakebuf_r>:
 801ecb8:	898b      	ldrh	r3, [r1, #12]
 801ecba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ecbc:	079d      	lsls	r5, r3, #30
 801ecbe:	4606      	mov	r6, r0
 801ecc0:	460c      	mov	r4, r1
 801ecc2:	d507      	bpl.n	801ecd4 <__smakebuf_r+0x1c>
 801ecc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ecc8:	6023      	str	r3, [r4, #0]
 801ecca:	6123      	str	r3, [r4, #16]
 801eccc:	2301      	movs	r3, #1
 801ecce:	6163      	str	r3, [r4, #20]
 801ecd0:	b002      	add	sp, #8
 801ecd2:	bd70      	pop	{r4, r5, r6, pc}
 801ecd4:	ab01      	add	r3, sp, #4
 801ecd6:	466a      	mov	r2, sp
 801ecd8:	f7ff ffc9 	bl	801ec6e <__swhatbuf_r>
 801ecdc:	9900      	ldr	r1, [sp, #0]
 801ecde:	4605      	mov	r5, r0
 801ece0:	4630      	mov	r0, r6
 801ece2:	f7ff f94b 	bl	801df7c <_malloc_r>
 801ece6:	b948      	cbnz	r0, 801ecfc <__smakebuf_r+0x44>
 801ece8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ecec:	059a      	lsls	r2, r3, #22
 801ecee:	d4ef      	bmi.n	801ecd0 <__smakebuf_r+0x18>
 801ecf0:	f023 0303 	bic.w	r3, r3, #3
 801ecf4:	f043 0302 	orr.w	r3, r3, #2
 801ecf8:	81a3      	strh	r3, [r4, #12]
 801ecfa:	e7e3      	b.n	801ecc4 <__smakebuf_r+0xc>
 801ecfc:	4b0d      	ldr	r3, [pc, #52]	; (801ed34 <__smakebuf_r+0x7c>)
 801ecfe:	62b3      	str	r3, [r6, #40]	; 0x28
 801ed00:	89a3      	ldrh	r3, [r4, #12]
 801ed02:	6020      	str	r0, [r4, #0]
 801ed04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ed08:	81a3      	strh	r3, [r4, #12]
 801ed0a:	9b00      	ldr	r3, [sp, #0]
 801ed0c:	6163      	str	r3, [r4, #20]
 801ed0e:	9b01      	ldr	r3, [sp, #4]
 801ed10:	6120      	str	r0, [r4, #16]
 801ed12:	b15b      	cbz	r3, 801ed2c <__smakebuf_r+0x74>
 801ed14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ed18:	4630      	mov	r0, r6
 801ed1a:	f000 f891 	bl	801ee40 <_isatty_r>
 801ed1e:	b128      	cbz	r0, 801ed2c <__smakebuf_r+0x74>
 801ed20:	89a3      	ldrh	r3, [r4, #12]
 801ed22:	f023 0303 	bic.w	r3, r3, #3
 801ed26:	f043 0301 	orr.w	r3, r3, #1
 801ed2a:	81a3      	strh	r3, [r4, #12]
 801ed2c:	89a0      	ldrh	r0, [r4, #12]
 801ed2e:	4305      	orrs	r5, r0
 801ed30:	81a5      	strh	r5, [r4, #12]
 801ed32:	e7cd      	b.n	801ecd0 <__smakebuf_r+0x18>
 801ed34:	0801eac5 	.word	0x0801eac5

0801ed38 <__malloc_lock>:
 801ed38:	4801      	ldr	r0, [pc, #4]	; (801ed40 <__malloc_lock+0x8>)
 801ed3a:	f7ff bf95 	b.w	801ec68 <__retarget_lock_acquire_recursive>
 801ed3e:	bf00      	nop
 801ed40:	2000e5c0 	.word	0x2000e5c0

0801ed44 <__malloc_unlock>:
 801ed44:	4801      	ldr	r0, [pc, #4]	; (801ed4c <__malloc_unlock+0x8>)
 801ed46:	f7ff bf91 	b.w	801ec6c <__retarget_lock_release_recursive>
 801ed4a:	bf00      	nop
 801ed4c:	2000e5c0 	.word	0x2000e5c0

0801ed50 <__sread>:
 801ed50:	b510      	push	{r4, lr}
 801ed52:	460c      	mov	r4, r1
 801ed54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed58:	f000 f894 	bl	801ee84 <_read_r>
 801ed5c:	2800      	cmp	r0, #0
 801ed5e:	bfab      	itete	ge
 801ed60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ed62:	89a3      	ldrhlt	r3, [r4, #12]
 801ed64:	181b      	addge	r3, r3, r0
 801ed66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ed6a:	bfac      	ite	ge
 801ed6c:	6563      	strge	r3, [r4, #84]	; 0x54
 801ed6e:	81a3      	strhlt	r3, [r4, #12]
 801ed70:	bd10      	pop	{r4, pc}

0801ed72 <__swrite>:
 801ed72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed76:	461f      	mov	r7, r3
 801ed78:	898b      	ldrh	r3, [r1, #12]
 801ed7a:	05db      	lsls	r3, r3, #23
 801ed7c:	4605      	mov	r5, r0
 801ed7e:	460c      	mov	r4, r1
 801ed80:	4616      	mov	r6, r2
 801ed82:	d505      	bpl.n	801ed90 <__swrite+0x1e>
 801ed84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed88:	2302      	movs	r3, #2
 801ed8a:	2200      	movs	r2, #0
 801ed8c:	f000 f868 	bl	801ee60 <_lseek_r>
 801ed90:	89a3      	ldrh	r3, [r4, #12]
 801ed92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ed96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ed9a:	81a3      	strh	r3, [r4, #12]
 801ed9c:	4632      	mov	r2, r6
 801ed9e:	463b      	mov	r3, r7
 801eda0:	4628      	mov	r0, r5
 801eda2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eda6:	f000 b817 	b.w	801edd8 <_write_r>

0801edaa <__sseek>:
 801edaa:	b510      	push	{r4, lr}
 801edac:	460c      	mov	r4, r1
 801edae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edb2:	f000 f855 	bl	801ee60 <_lseek_r>
 801edb6:	1c43      	adds	r3, r0, #1
 801edb8:	89a3      	ldrh	r3, [r4, #12]
 801edba:	bf15      	itete	ne
 801edbc:	6560      	strne	r0, [r4, #84]	; 0x54
 801edbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801edc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801edc6:	81a3      	strheq	r3, [r4, #12]
 801edc8:	bf18      	it	ne
 801edca:	81a3      	strhne	r3, [r4, #12]
 801edcc:	bd10      	pop	{r4, pc}

0801edce <__sclose>:
 801edce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edd2:	f000 b813 	b.w	801edfc <_close_r>
	...

0801edd8 <_write_r>:
 801edd8:	b538      	push	{r3, r4, r5, lr}
 801edda:	4d07      	ldr	r5, [pc, #28]	; (801edf8 <_write_r+0x20>)
 801eddc:	4604      	mov	r4, r0
 801edde:	4608      	mov	r0, r1
 801ede0:	4611      	mov	r1, r2
 801ede2:	2200      	movs	r2, #0
 801ede4:	602a      	str	r2, [r5, #0]
 801ede6:	461a      	mov	r2, r3
 801ede8:	f7e3 f86b 	bl	8001ec2 <_write>
 801edec:	1c43      	adds	r3, r0, #1
 801edee:	d102      	bne.n	801edf6 <_write_r+0x1e>
 801edf0:	682b      	ldr	r3, [r5, #0]
 801edf2:	b103      	cbz	r3, 801edf6 <_write_r+0x1e>
 801edf4:	6023      	str	r3, [r4, #0]
 801edf6:	bd38      	pop	{r3, r4, r5, pc}
 801edf8:	2000e5c8 	.word	0x2000e5c8

0801edfc <_close_r>:
 801edfc:	b538      	push	{r3, r4, r5, lr}
 801edfe:	4d06      	ldr	r5, [pc, #24]	; (801ee18 <_close_r+0x1c>)
 801ee00:	2300      	movs	r3, #0
 801ee02:	4604      	mov	r4, r0
 801ee04:	4608      	mov	r0, r1
 801ee06:	602b      	str	r3, [r5, #0]
 801ee08:	f7e3 f877 	bl	8001efa <_close>
 801ee0c:	1c43      	adds	r3, r0, #1
 801ee0e:	d102      	bne.n	801ee16 <_close_r+0x1a>
 801ee10:	682b      	ldr	r3, [r5, #0]
 801ee12:	b103      	cbz	r3, 801ee16 <_close_r+0x1a>
 801ee14:	6023      	str	r3, [r4, #0]
 801ee16:	bd38      	pop	{r3, r4, r5, pc}
 801ee18:	2000e5c8 	.word	0x2000e5c8

0801ee1c <_fstat_r>:
 801ee1c:	b538      	push	{r3, r4, r5, lr}
 801ee1e:	4d07      	ldr	r5, [pc, #28]	; (801ee3c <_fstat_r+0x20>)
 801ee20:	2300      	movs	r3, #0
 801ee22:	4604      	mov	r4, r0
 801ee24:	4608      	mov	r0, r1
 801ee26:	4611      	mov	r1, r2
 801ee28:	602b      	str	r3, [r5, #0]
 801ee2a:	f7e3 f872 	bl	8001f12 <_fstat>
 801ee2e:	1c43      	adds	r3, r0, #1
 801ee30:	d102      	bne.n	801ee38 <_fstat_r+0x1c>
 801ee32:	682b      	ldr	r3, [r5, #0]
 801ee34:	b103      	cbz	r3, 801ee38 <_fstat_r+0x1c>
 801ee36:	6023      	str	r3, [r4, #0]
 801ee38:	bd38      	pop	{r3, r4, r5, pc}
 801ee3a:	bf00      	nop
 801ee3c:	2000e5c8 	.word	0x2000e5c8

0801ee40 <_isatty_r>:
 801ee40:	b538      	push	{r3, r4, r5, lr}
 801ee42:	4d06      	ldr	r5, [pc, #24]	; (801ee5c <_isatty_r+0x1c>)
 801ee44:	2300      	movs	r3, #0
 801ee46:	4604      	mov	r4, r0
 801ee48:	4608      	mov	r0, r1
 801ee4a:	602b      	str	r3, [r5, #0]
 801ee4c:	f7e3 f871 	bl	8001f32 <_isatty>
 801ee50:	1c43      	adds	r3, r0, #1
 801ee52:	d102      	bne.n	801ee5a <_isatty_r+0x1a>
 801ee54:	682b      	ldr	r3, [r5, #0]
 801ee56:	b103      	cbz	r3, 801ee5a <_isatty_r+0x1a>
 801ee58:	6023      	str	r3, [r4, #0]
 801ee5a:	bd38      	pop	{r3, r4, r5, pc}
 801ee5c:	2000e5c8 	.word	0x2000e5c8

0801ee60 <_lseek_r>:
 801ee60:	b538      	push	{r3, r4, r5, lr}
 801ee62:	4d07      	ldr	r5, [pc, #28]	; (801ee80 <_lseek_r+0x20>)
 801ee64:	4604      	mov	r4, r0
 801ee66:	4608      	mov	r0, r1
 801ee68:	4611      	mov	r1, r2
 801ee6a:	2200      	movs	r2, #0
 801ee6c:	602a      	str	r2, [r5, #0]
 801ee6e:	461a      	mov	r2, r3
 801ee70:	f7e3 f86a 	bl	8001f48 <_lseek>
 801ee74:	1c43      	adds	r3, r0, #1
 801ee76:	d102      	bne.n	801ee7e <_lseek_r+0x1e>
 801ee78:	682b      	ldr	r3, [r5, #0]
 801ee7a:	b103      	cbz	r3, 801ee7e <_lseek_r+0x1e>
 801ee7c:	6023      	str	r3, [r4, #0]
 801ee7e:	bd38      	pop	{r3, r4, r5, pc}
 801ee80:	2000e5c8 	.word	0x2000e5c8

0801ee84 <_read_r>:
 801ee84:	b538      	push	{r3, r4, r5, lr}
 801ee86:	4d07      	ldr	r5, [pc, #28]	; (801eea4 <_read_r+0x20>)
 801ee88:	4604      	mov	r4, r0
 801ee8a:	4608      	mov	r0, r1
 801ee8c:	4611      	mov	r1, r2
 801ee8e:	2200      	movs	r2, #0
 801ee90:	602a      	str	r2, [r5, #0]
 801ee92:	461a      	mov	r2, r3
 801ee94:	f7e2 fff8 	bl	8001e88 <_read>
 801ee98:	1c43      	adds	r3, r0, #1
 801ee9a:	d102      	bne.n	801eea2 <_read_r+0x1e>
 801ee9c:	682b      	ldr	r3, [r5, #0]
 801ee9e:	b103      	cbz	r3, 801eea2 <_read_r+0x1e>
 801eea0:	6023      	str	r3, [r4, #0]
 801eea2:	bd38      	pop	{r3, r4, r5, pc}
 801eea4:	2000e5c8 	.word	0x2000e5c8

0801eea8 <_init>:
 801eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeaa:	bf00      	nop
 801eeac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eeae:	bc08      	pop	{r3}
 801eeb0:	469e      	mov	lr, r3
 801eeb2:	4770      	bx	lr

0801eeb4 <_fini>:
 801eeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeb6:	bf00      	nop
 801eeb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eeba:	bc08      	pop	{r3}
 801eebc:	469e      	mov	lr, r3
 801eebe:	4770      	bx	lr
