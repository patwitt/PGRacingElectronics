
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c8d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003898  0801cad0  0801cad0  0002cad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000e1a0  08020368  08020368  00030368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  0802e508  0802e508  0003e508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000005c  0802e514  0802e514  0003e514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0802e570  0802e570  00062530  2**0
                  CONTENTS
  7 .ARM          00000008  0802e570  0802e570  0003e570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0802e578  0802e578  00062530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0802e578  0802e578  0003e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0802e58c  0802e58c  0003e58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000dc  20000000  0802e594  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000e474  200000dc  0802e670  000700dc  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000e550  0802e670  0006e550  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00062530  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00013ec0  0802e670  0802e670  0004e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   0008e5b7  00000000  00000000  0006255e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00011242  00000000  00000000  000f0b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003620  00000000  00000000  00101d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003188  00000000  00000000  00105378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003574c  00000000  00000000  00108500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000405c2  00000000  00000000  0013dc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001284fe  00000000  00000000  0017e20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  002a670c  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000eb14  00000000  00000000  002a67e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000dc 	.word	0x200000dc
 800021c:	00000000 	.word	0x00000000
 8000220:	0801cab8 	.word	0x0801cab8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000e0 	.word	0x200000e0
 800023c:	0801cab8 	.word	0x0801cab8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_CRC_Init+0x3c>)
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <MX_CRC_Init+0x40>)
 80005e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_CRC_Init+0x3c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_CRC_Init+0x3c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_CRC_Init+0x3c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_CRC_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_CRC_Init+0x3c>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_CRC_Init+0x3c>)
 8000602:	f005 fc0b 	bl	8005e1c <HAL_CRC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800060c:	f000 fe24 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000e1e8 	.word	0x2000e1e8
 8000618:	40023000 	.word	0x40023000

0800061c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <HAL_CRC_MspInit+0x38>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d10b      	bne.n	8000646 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_CRC_MspInit+0x3c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <HAL_CRC_MspInit+0x3c>)
 8000634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <HAL_CRC_MspInit+0x3c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023000 	.word	0x40023000
 8000658:	40023800 	.word	0x40023800

0800065c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_DMA2D_Init+0x68>)
 8000662:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <MX_DMA2D_Init+0x6c>)
 8000664:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_DMA2D_Init+0x68>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_DMA2D_Init+0x68>)
 800066e:	2201      	movs	r2, #1
 8000670:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_DMA2D_Init+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_DMA2D_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_DMA2D_Init+0x68>)
 8000680:	2201      	movs	r2, #1
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_DMA2D_Init+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_DMA2D_Init+0x68>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_DMA2D_Init+0x68>)
 8000692:	2200      	movs	r2, #0
 8000694:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_DMA2D_Init+0x68>)
 8000698:	2200      	movs	r2, #0
 800069a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_DMA2D_Init+0x68>)
 800069e:	f005 fca7 	bl	8005ff0 <HAL_DMA2D_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80006a8:	f000 fdd6 	bl	8001258 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006ac:	2101      	movs	r1, #1
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_DMA2D_Init+0x68>)
 80006b0:	f005 fe08 	bl	80062c4 <HAL_DMA2D_ConfigLayer>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80006ba:	f000 fdcd 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000e20c 	.word	0x2000e20c
 80006c8:	4002b000 	.word	0x4002b000

080006cc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <HAL_DMA2D_MspInit+0x44>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d113      	bne.n	8000706 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_DMA2D_MspInit+0x48>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <HAL_DMA2D_MspInit+0x48>)
 80006e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_DMA2D_MspInit+0x48>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2105      	movs	r1, #5
 80006fa:	205a      	movs	r0, #90	; 0x5a
 80006fc:	f005 fb64 	bl	8005dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000700:	205a      	movs	r0, #90	; 0x5a
 8000702:	f005 fb7d 	bl	8005e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	4002b000 	.word	0x4002b000
 8000714:	40023800 	.word	0x40023800

08000718 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000730:	4b49      	ldr	r3, [pc, #292]	; (8000858 <MX_FMC_Init+0x140>)
 8000732:	4a4a      	ldr	r2, [pc, #296]	; (800085c <MX_FMC_Init+0x144>)
 8000734:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000736:	4b48      	ldr	r3, [pc, #288]	; (8000858 <MX_FMC_Init+0x140>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800073c:	4b46      	ldr	r3, [pc, #280]	; (8000858 <MX_FMC_Init+0x140>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000742:	4b45      	ldr	r3, [pc, #276]	; (8000858 <MX_FMC_Init+0x140>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000748:	4b43      	ldr	r3, [pc, #268]	; (8000858 <MX_FMC_Init+0x140>)
 800074a:	2210      	movs	r2, #16
 800074c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 800074e:	4b42      	ldr	r3, [pc, #264]	; (8000858 <MX_FMC_Init+0x140>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000754:	4b40      	ldr	r3, [pc, #256]	; (8000858 <MX_FMC_Init+0x140>)
 8000756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800075c:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <MX_FMC_Init+0x140>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000762:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <MX_FMC_Init+0x140>)
 8000764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000768:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800076a:	4b3b      	ldr	r3, [pc, #236]	; (8000858 <MX_FMC_Init+0x140>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000770:	4b39      	ldr	r3, [pc, #228]	; (8000858 <MX_FMC_Init+0x140>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800077a:	2307      	movs	r3, #7
 800077c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800077e:	2304      	movs	r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000782:	2306      	movs	r3, #6
 8000784:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000786:	2303      	movs	r3, #3
 8000788:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4830      	ldr	r0, [pc, #192]	; (8000858 <MX_FMC_Init+0x140>)
 8000798:	f007 fe6a 	bl	8008470 <HAL_SDRAM_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 80007a2:	f000 fd59 	bl	8001258 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_FMC_Init+0x148>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_FMC_Init+0x148>)
 80007b2:	2210      	movs	r2, #16
 80007b4:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_FMC_Init+0x148>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_FMC_Init+0x148>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80007c2:	f04f 32ff 	mov.w	r2, #4294967295
 80007c6:	4926      	ldr	r1, [pc, #152]	; (8000860 <MX_FMC_Init+0x148>)
 80007c8:	4823      	ldr	r0, [pc, #140]	; (8000858 <MX_FMC_Init+0x140>)
 80007ca:	f007 fe85 	bl	80084d8 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f005 fa1e 	bl	8005c10 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_FMC_Init+0x148>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_FMC_Init+0x148>)
 80007dc:	2210      	movs	r2, #16
 80007de:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_FMC_Init+0x148>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_FMC_Init+0x148>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	491b      	ldr	r1, [pc, #108]	; (8000860 <MX_FMC_Init+0x148>)
 80007f2:	4819      	ldr	r0, [pc, #100]	; (8000858 <MX_FMC_Init+0x140>)
 80007f4:	f007 fe70 	bl	80084d8 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_FMC_Init+0x148>)
 80007fa:	2203      	movs	r2, #3
 80007fc:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_FMC_Init+0x148>)
 8000800:	2210      	movs	r2, #16
 8000802:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_FMC_Init+0x148>)
 8000806:	2208      	movs	r2, #8
 8000808:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_FMC_Init+0x148>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	4912      	ldr	r1, [pc, #72]	; (8000860 <MX_FMC_Init+0x148>)
 8000816:	4810      	ldr	r0, [pc, #64]	; (8000858 <MX_FMC_Init+0x140>)
 8000818:	f007 fe5e 	bl	80084d8 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 800081c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000820:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_FMC_Init+0x148>)
 8000824:	2204      	movs	r2, #4
 8000826:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MX_FMC_Init+0x148>)
 800082a:	2210      	movs	r2, #16
 800082c:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_FMC_Init+0x148>)
 8000830:	2201      	movs	r2, #1
 8000832:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <MX_FMC_Init+0x148>)
 8000838:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 800083a:	f04f 32ff 	mov.w	r2, #4294967295
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <MX_FMC_Init+0x148>)
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_FMC_Init+0x140>)
 8000842:	f007 fe49 	bl	80084d8 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000846:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800084a:	4803      	ldr	r0, [pc, #12]	; (8000858 <MX_FMC_Init+0x140>)
 800084c:	f007 fe6f 	bl	800852e <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000e264 	.word	0x2000e264
 800085c:	a0000140 	.word	0xa0000140
 8000860:	200000fc 	.word	0x200000fc

08000864 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000878:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <HAL_FMC_MspInit+0x100>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d16d      	bne.n	800095c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <HAL_FMC_MspInit+0x100>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000886:	4b38      	ldr	r3, [pc, #224]	; (8000968 <HAL_FMC_MspInit+0x104>)
 8000888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800088a:	4a37      	ldr	r2, [pc, #220]	; (8000968 <HAL_FMC_MspInit+0x104>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6393      	str	r3, [r2, #56]	; 0x38
 8000892:	4b35      	ldr	r3, [pc, #212]	; (8000968 <HAL_FMC_MspInit+0x104>)
 8000894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800089e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b0:	230c      	movs	r3, #12
 80008b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	482c      	ldr	r0, [pc, #176]	; (800096c <HAL_FMC_MspInit+0x108>)
 80008ba:	f005 fda1 	bl	8006400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008be:	230c      	movs	r3, #12
 80008c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ce:	230c      	movs	r3, #12
 80008d0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	4826      	ldr	r0, [pc, #152]	; (8000970 <HAL_FMC_MspInit+0x10c>)
 80008d8:	f005 fd92 	bl	8006400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ec:	230c      	movs	r3, #12
 80008ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	481f      	ldr	r0, [pc, #124]	; (8000974 <HAL_FMC_MspInit+0x110>)
 80008f6:	f005 fd83 	bl	8006400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80008fa:	f248 1311 	movw	r3, #33041	; 0x8111
 80008fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800090c:	230c      	movs	r3, #12
 800090e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4619      	mov	r1, r3
 8000914:	4818      	ldr	r0, [pc, #96]	; (8000978 <HAL_FMC_MspInit+0x114>)
 8000916:	f005 fd73 	bl	8006400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800091a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800091e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800092c:	230c      	movs	r3, #12
 800092e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <HAL_FMC_MspInit+0x118>)
 8000936:	f005 fd63 	bl	8006400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800093a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800093e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800094c:	230c      	movs	r3, #12
 800094e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4619      	mov	r1, r3
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <HAL_FMC_MspInit+0x11c>)
 8000956:	f005 fd53 	bl	8006400 <HAL_GPIO_Init>
 800095a:	e000      	b.n	800095e <HAL_FMC_MspInit+0xfa>
    return;
 800095c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000f8 	.word	0x200000f8
 8000968:	40023800 	.word	0x40023800
 800096c:	40021400 	.word	0x40021400
 8000970:	40020800 	.word	0x40020800
 8000974:	40020000 	.word	0x40020000
 8000978:	40021800 	.word	0x40021800
 800097c:	40021000 	.word	0x40021000
 8000980:	40020c00 	.word	0x40020c00

08000984 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800098c:	f7ff ff6a 	bl	8000864 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hardwareTASK */
  hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL, &hardwareTASK_attributes);
 800099c:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <MX_FREERTOS_Init+0x28>)
 800099e:	2100      	movs	r1, #0
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <MX_FREERTOS_Init+0x2c>)
 80009a2:	f009 fac7 	bl	8009f34 <osThreadNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <MX_FREERTOS_Init+0x30>)
 80009aa:	6013      	str	r3, [r2, #0]

  /* creation of touchGFXTask */
  touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL, &touchGFXTask_attributes);
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <MX_FREERTOS_Init+0x34>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4807      	ldr	r0, [pc, #28]	; (80009d0 <MX_FREERTOS_Init+0x38>)
 80009b2:	f009 fabf 	bl	8009f34 <osThreadNew>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <MX_FREERTOS_Init+0x3c>)
 80009ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	0801d5c0 	.word	0x0801d5c0
 80009c4:	080009d9 	.word	0x080009d9
 80009c8:	2000e29c 	.word	0x2000e29c
 80009cc:	0801d5e4 	.word	0x0801d5e4
 80009d0:	080009e9 	.word	0x080009e9
 80009d4:	2000e298 	.word	0x2000e298

080009d8 <StartHardwareTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardwareTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f009 fb7f 	bl	800a0e4 <osDelay>
 80009e6:	e7fb      	b.n	80009e0 <StartHardwareTask+0x8>

080009e8 <StartTouchGFXTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 80009f0:	f000 fff1 	bl	80019d6 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f009 fb75 	bl	800a0e4 <osDelay>
 80009fa:	e7fb      	b.n	80009f4 <StartTouchGFXTask+0xc>

080009fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a02:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a32      	ldr	r2, [pc, #200]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2c      	ldr	r2, [pc, #176]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a20      	ldr	r2, [pc, #128]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_GPIO_Init+0xd4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

}
 8000ac2:	bf00      	nop
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_I2C3_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00808CD2;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <MX_I2C3_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b10:	f005 fe22 	bl	8006758 <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f000 fb9d 	bl	8001258 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b22:	f005 fea9 	bl	8006878 <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 fb94 	bl	8001258 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b34:	f005 feeb 	bl	800690e <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 fb8b 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000e2a0 	.word	0x2000e2a0
 8000b4c:	40005c00 	.word	0x40005c00
 8000b50:	00808cd2 	.word	0x00808cd2

08000b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ae      	sub	sp, #184	; 0xb8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2290      	movs	r2, #144	; 0x90
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f01a ffb1 	bl	801badc <memset>
  if(i2cHandle->Instance==I2C3)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a33      	ldr	r2, [pc, #204]	; (8000c4c <HAL_I2C_MspInit+0xf8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d15f      	bne.n	8000c44 <HAL_I2C_MspInit+0xf0>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 f843 	bl	8007c20 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000ba0:	f000 fb5a 	bl	8001258 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <HAL_I2C_MspInit+0xfc>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <HAL_I2C_MspInit+0xfc>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <HAL_I2C_MspInit+0xfc>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <HAL_I2C_MspInit+0xfc>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <HAL_I2C_MspInit+0xfc>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HAL_I2C_MspInit+0xfc>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bdc:	2312      	movs	r3, #18
 8000bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4816      	ldr	r0, [pc, #88]	; (8000c54 <HAL_I2C_MspInit+0x100>)
 8000bfc:	f005 fc00 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c08:	2312      	movs	r3, #18
 8000c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c24:	4619      	mov	r1, r3
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <HAL_I2C_MspInit+0x104>)
 8000c28:	f005 fbea 	bl	8006400 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_I2C_MspInit+0xfc>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_I2C_MspInit+0xfc>)
 8000c32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_I2C_MspInit+0xfc>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c44:	bf00      	nop
 8000c46:	37b8      	adds	r7, #184	; 0xb8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40005c00 	.word	0x40005c00
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020000 	.word	0x40020000

08000c5c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08e      	sub	sp, #56	; 0x38
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2234      	movs	r2, #52	; 0x34
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f01a ff37 	bl	801badc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000c70:	4a3a      	ldr	r2, [pc, #232]	; (8000d5c <MX_LTDC_Init+0x100>)
 8000c72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c74:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c7a:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c86:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 199;
 8000c8c:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000c8e:	22c7      	movs	r2, #199	; 0xc7
 8000c90:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 8000c92:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000c94:	2227      	movs	r2, #39	; 0x27
 8000c96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 207;
 8000c98:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000c9a:	22cf      	movs	r2, #207	; 0xcf
 8000c9c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000ca0:	222f      	movs	r2, #47	; 0x2f
 8000ca2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1007;
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000ca6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000cae:	f240 220f 	movw	r2, #527	; 0x20f
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1015;
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000cb6:	f240 32f7 	movw	r2, #1015	; 0x3f7
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 8000cbc:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000cbe:	f240 2217 	movw	r2, #535	; 0x217
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cc4:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cd4:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cdc:	481e      	ldr	r0, [pc, #120]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000cde:	f005 fe63 	bl	80069a8 <HAL_LTDC_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ce8:	f000 fab6 	bl	8001258 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000cf0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000cf4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000cfa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000cfe:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d00:	2301      	movs	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d04:	23ff      	movs	r3, #255	; 0xff
 8000d06:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d10:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d12:	2305      	movs	r3, #5
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d16:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8000d1c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000d22:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_LTDC_Init+0xfc>)
 8000d42:	f005 ffb9 	bl	8006cb8 <HAL_LTDC_ConfigLayer>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d4c:	f000 fa84 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3738      	adds	r7, #56	; 0x38
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000e2ec 	.word	0x2000e2ec
 8000d5c:	40016800 	.word	0x40016800

08000d60 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0b4      	sub	sp, #208	; 0xd0
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7c:	2290      	movs	r2, #144	; 0x90
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f01a feab 	bl	801badc <memset>
  if(ltdcHandle->Instance==LTDC)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4aa5      	ldr	r2, [pc, #660]	; (8001020 <HAL_LTDC_MspInit+0x2c0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	f040 8143 	bne.w	8001018 <HAL_LTDC_MspInit+0x2b8>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d92:	2308      	movs	r3, #8
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8000d96:	2360      	movs	r3, #96	; 0x60
 8000d98:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000da2:	2300      	movs	r3, #0
 8000da4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8000daa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000dae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 ff33 	bl	8007c20 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8000dc0:	f000 fa4a 	bl	8001258 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000dc4:	4b97      	ldr	r3, [pc, #604]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	4a96      	ldr	r2, [pc, #600]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dce:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd0:	4b94      	ldr	r3, [pc, #592]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dda:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ddc:	4b91      	ldr	r3, [pc, #580]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a90      	ldr	r2, [pc, #576]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b8e      	ldr	r3, [pc, #568]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df4:	4b8b      	ldr	r3, [pc, #556]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a8a      	ldr	r2, [pc, #552]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000dfa:	f043 0320 	orr.w	r3, r3, #32
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b88      	ldr	r3, [pc, #544]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0320 	and.w	r3, r3, #32
 8000e08:	623b      	str	r3, [r7, #32]
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0c:	4b85      	ldr	r3, [pc, #532]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a84      	ldr	r2, [pc, #528]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b82      	ldr	r3, [pc, #520]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b7f      	ldr	r3, [pc, #508]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a7e      	ldr	r2, [pc, #504]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b7c      	ldr	r3, [pc, #496]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b79      	ldr	r3, [pc, #484]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	4a78      	ldr	r2, [pc, #480]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	6313      	str	r3, [r2, #48]	; 0x30
 8000e48:	4b76      	ldr	r3, [pc, #472]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e54:	4b73      	ldr	r3, [pc, #460]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a72      	ldr	r2, [pc, #456]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e60:	4b70      	ldr	r3, [pc, #448]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b6d      	ldr	r3, [pc, #436]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a6c      	ldr	r2, [pc, #432]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b6a      	ldr	r3, [pc, #424]	; (8001024 <HAL_LTDC_MspInit+0x2c4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e84:	2370      	movs	r3, #112	; 0x70
 8000e86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e9c:	230e      	movs	r3, #14
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	485f      	ldr	r0, [pc, #380]	; (8001028 <HAL_LTDC_MspInit+0x2c8>)
 8000eaa:	f005 faa9 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ec8:	230e      	movs	r3, #14
 8000eca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ece:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4855      	ldr	r0, [pc, #340]	; (800102c <HAL_LTDC_MspInit+0x2cc>)
 8000ed6:	f005 fa93 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8000eda:	23c1      	movs	r3, #193	; 0xc1
 8000edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ef2:	230e      	movs	r3, #14
 8000ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000efc:	4619      	mov	r1, r3
 8000efe:	484c      	ldr	r0, [pc, #304]	; (8001030 <HAL_LTDC_MspInit+0x2d0>)
 8000f00:	f005 fa7e 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f04:	f240 437e 	movw	r3, #1150	; 0x47e
 8000f08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1e:	230e      	movs	r3, #14
 8000f20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4842      	ldr	r0, [pc, #264]	; (8001034 <HAL_LTDC_MspInit+0x2d4>)
 8000f2c:	f005 fa68 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f48:	2309      	movs	r3, #9
 8000f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f52:	4619      	mov	r1, r3
 8000f54:	4838      	ldr	r0, [pc, #224]	; (8001038 <HAL_LTDC_MspInit+0x2d8>)
 8000f56:	f005 fa53 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000f5a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f74:	230e      	movs	r3, #14
 8000f76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f7e:	4619      	mov	r1, r3
 8000f80:	482d      	ldr	r0, [pc, #180]	; (8001038 <HAL_LTDC_MspInit+0x2d8>)
 8000f82:	f005 fa3d 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8000f86:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 8000f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa0:	230e      	movs	r3, #14
 8000fa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000faa:	4619      	mov	r1, r3
 8000fac:	4823      	ldr	r0, [pc, #140]	; (800103c <HAL_LTDC_MspInit+0x2dc>)
 8000fae:	f005 fa27 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000fb2:	2348      	movs	r3, #72	; 0x48
 8000fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fca:	230e      	movs	r3, #14
 8000fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481a      	ldr	r0, [pc, #104]	; (8001040 <HAL_LTDC_MspInit+0x2e0>)
 8000fd8:	f005 fa12 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000fdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ff6:	2309      	movs	r3, #9
 8000ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001000:	4619      	mov	r1, r3
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <HAL_LTDC_MspInit+0x2dc>)
 8001004:	f005 f9fc 	bl	8006400 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2105      	movs	r1, #5
 800100c:	2058      	movs	r0, #88	; 0x58
 800100e:	f004 fedb 	bl	8005dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001012:	2058      	movs	r0, #88	; 0x58
 8001014:	f004 fef4 	bl	8005e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001018:	bf00      	nop
 800101a:	37d0      	adds	r7, #208	; 0xd0
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40016800 	.word	0x40016800
 8001024:	40023800 	.word	0x40023800
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40020800 	.word	0x40020800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40021800 	.word	0x40021800
 8001040:	40020c00 	.word	0x40020c00

08001044 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001048:	f3bf 8f4f 	dsb	sy
}
 800104c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800104e:	f3bf 8f6f 	isb	sy
}
 8001052:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <SCB_EnableICache+0x48>)
 8001056:	2200      	movs	r2, #0
 8001058:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800105c:	f3bf 8f4f 	dsb	sy
}
 8001060:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001062:	f3bf 8f6f 	isb	sy
}
 8001066:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <SCB_EnableICache+0x48>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <SCB_EnableICache+0x48>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001072:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001074:	f3bf 8f4f 	dsb	sy
}
 8001078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800107a:	f3bf 8f6f 	isb	sy
}
 800107e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <SCB_EnableDCache+0x84>)
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800109e:	f3bf 8f4f 	dsb	sy
}
 80010a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <SCB_EnableDCache+0x84>)
 80010a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	0b5b      	lsrs	r3, r3, #13
 80010b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	015a      	lsls	r2, r3, #5
 80010c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80010c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010ce:	4911      	ldr	r1, [pc, #68]	; (8001114 <SCB_EnableDCache+0x84>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1e5a      	subs	r2, r3, #1
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1ef      	bne.n	80010c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1e5a      	subs	r2, r3, #1
 80010e4:	60fa      	str	r2, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1e5      	bne.n	80010b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80010ea:	f3bf 8f4f 	dsb	sy
}
 80010ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <SCB_EnableDCache+0x84>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <SCB_EnableDCache+0x84>)
 80010f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010fc:	f3bf 8f4f 	dsb	sy
}
 8001100:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001102:	f3bf 8f6f 	isb	sy
}
 8001106:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800111c:	f7ff ff92 	bl	8001044 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001120:	f7ff ffb6 	bl	8001090 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f004 fd46 	bl	8005bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f81c 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f7ff fc66 	bl	80009fc <MX_GPIO_Init>
  MX_CRC_Init();
 8001130:	f7ff fa52 	bl	80005d8 <MX_CRC_Init>
  MX_FMC_Init();
 8001134:	f7ff faf0 	bl	8000718 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8001138:	f000 f894 	bl	8001264 <MX_QUADSPI_Init>
  MX_LTDC_Init();
 800113c:	f7ff fd8e 	bl	8000c5c <MX_LTDC_Init>
  MX_UART5_Init();
 8001140:	f000 fb68 	bl	8001814 <MX_UART5_Init>
  MX_I2C3_Init();
 8001144:	f7ff fcc6 	bl	8000ad4 <MX_I2C3_Init>
  MX_DMA2D_Init();
 8001148:	f7ff fa88 	bl	800065c <MX_DMA2D_Init>
  MX_TIM3_Init();
 800114c:	f000 fab0 	bl	80016b0 <MX_TIM3_Init>
  MX_TouchGFX_Init();
 8001150:	f000 fc3b 	bl	80019ca <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001154:	f008 fe84 	bl	8009e60 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001158:	f7ff fc1e 	bl	8000998 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800115c:	f008 feb4 	bl	8009ec8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001160:	e7fe      	b.n	8001160 <main+0x48>
	...

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2234      	movs	r2, #52	; 0x34
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f01a fcb2 	bl	801badc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <SystemClock_Config+0xc8>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <SystemClock_Config+0xc8>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <SystemClock_Config+0xc8>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <SystemClock_Config+0xcc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <SystemClock_Config+0xcc>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <SystemClock_Config+0xcc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d0:	2308      	movs	r3, #8
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 80011d4:	236c      	movs	r3, #108	; 0x6c
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80011d8:	2306      	movs	r3, #6
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 f837 	bl	800725c <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f4:	f000 f830 	bl	8001258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	2101      	movs	r1, #1
 8001212:	4618      	mov	r0, r3
 8001214:	f006 fad0 	bl	80077b8 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800121e:	f000 f81b 	bl	8001258 <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3750      	adds	r7, #80	; 0x50
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001246:	f004 fcc3 	bl	8005bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40001000 	.word	0x40001000

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <MX_QUADSPI_Init+0x54>)
 800126c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 8001270:	22ff      	movs	r2, #255	; 0xff
 8001272:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 8001276:	2201      	movs	r2, #1
 8001278:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 800127c:	2210      	movs	r2, #16
 800127e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 8001282:	2217      	movs	r2, #23
 8001284:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 8001288:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800128c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_QUADSPI_Init+0x50>)
 80012a2:	f005 ff19 	bl	80070d8 <HAL_QSPI_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f7ff ffd4 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000e394 	.word	0x2000e394
 80012b8:	a0001000 	.word	0xa0001000

080012bc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <HAL_QSPI_MspInit+0xf4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d164      	bne.n	80013a8 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012de:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <HAL_QSPI_MspInit+0xf8>)
 80012e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <HAL_QSPI_MspInit+0xf8>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6393      	str	r3, [r2, #56]	; 0x38
 80012ea:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_QSPI_MspInit+0xf8>)
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_QSPI_MspInit+0xf8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a2e      	ldr	r2, [pc, #184]	; (80013b4 <HAL_QSPI_MspInit+0xf8>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <HAL_QSPI_MspInit+0xf8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <HAL_QSPI_MspInit+0xf8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <HAL_QSPI_MspInit+0xf8>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_QSPI_MspInit+0xf8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001326:	23c0      	movs	r3, #192	; 0xc0
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001336:	2309      	movs	r3, #9
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	481d      	ldr	r0, [pc, #116]	; (80013b8 <HAL_QSPI_MspInit+0xfc>)
 8001342:	f005 f85d 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001358:	230a      	movs	r3, #10
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4815      	ldr	r0, [pc, #84]	; (80013b8 <HAL_QSPI_MspInit+0xfc>)
 8001364:	f005 f84c 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001368:	2304      	movs	r3, #4
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001378:	2309      	movs	r3, #9
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <HAL_QSPI_MspInit+0x100>)
 8001384:	f005 f83c 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001388:	2340      	movs	r3, #64	; 0x40
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001398:	230a      	movs	r3, #10
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <HAL_QSPI_MspInit+0x100>)
 80013a4:	f005 f82c 	bl	8006400 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	a0001000 	.word	0xa0001000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40021400 	.word	0x40021400
 80013bc:	40020400 	.word	0x40020400

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_MspInit+0x4c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	210f      	movs	r1, #15
 80013fa:	f06f 0001 	mvn.w	r0, #1
 80013fe:	f004 fce3 	bl	8005dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	2036      	movs	r0, #54	; 0x36
 8001426:	f004 fccf 	bl	8005dc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800142a:	2036      	movs	r0, #54	; 0x36
 800142c:	f004 fce8 	bl	8005e00 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_InitTick+0x9c>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_InitTick+0x9c>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_InitTick+0x9c>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001448:	f107 0210 	add.w	r2, r7, #16
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f006 fbb2 	bl	8007bbc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001458:	f006 fb88 	bl	8007b6c <HAL_RCC_GetPCLK1Freq>
 800145c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <HAL_InitTick+0xa0>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9b      	lsrs	r3, r3, #18
 8001468:	3b01      	subs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_InitTick+0xa4>)
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <HAL_InitTick+0xa8>)
 8001470:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_InitTick+0xa4>)
 8001474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001478:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_InitTick+0xa4>)
 800147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_InitTick+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_InitTick+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <HAL_InitTick+0xa4>)
 800148e:	f007 f86e 	bl	800856e <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d104      	bne.n	80014a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <HAL_InitTick+0xa4>)
 800149a:	f007 f8c9 	bl	8008630 <HAL_TIM_Base_Start_IT>
 800149e:	4603      	mov	r3, r0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3730      	adds	r7, #48	; 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	431bde83 	.word	0x431bde83
 80014b4:	2000e3e0 	.word	0x2000e3e0
 80014b8:	40001000 	.word	0x40001000

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler+0x4>

080014c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <TIM6_DAC_IRQHandler+0x10>)
 80014ee:	f007 f96e 	bl	80087ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000e3e0 	.word	0x2000e3e0

080014fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <LTDC_IRQHandler+0x10>)
 8001502:	f005 fb21 	bl	8006b48 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000e2ec 	.word	0x2000e2ec

08001510 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <DMA2D_IRQHandler+0x10>)
 8001516:	f004 fdc5 	bl	80060a4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000e20c 	.word	0x2000e20c

08001524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	return 1;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_kill>:

int _kill(int pid, int sig)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800153e:	f01a fa73 	bl	801ba28 <__errno>
 8001542:	4603      	mov	r3, r0
 8001544:	2216      	movs	r2, #22
 8001546:	601a      	str	r2, [r3, #0]
	return -1;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_exit>:

void _exit (int status)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ffe7 	bl	8001534 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001566:	e7fe      	b.n	8001566 <_exit+0x12>

08001568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e00a      	b.n	8001590 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800157a:	f3af 8000 	nop.w
 800157e:	4601      	mov	r1, r0
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	b2ca      	uxtb	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbf0      	blt.n	800157a <_read+0x12>
	}

return len;
 8001598:	687b      	ldr	r3, [r7, #4]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e009      	b.n	80015c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbf1      	blt.n	80015b4 <_write+0x12>
	}
	return len;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_close>:

int _close(int file)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	return -1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001602:	605a      	str	r2, [r3, #4]
	return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_isatty>:

int _isatty(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return 1;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001674:	f01a f9d8 	bl	801ba28 <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20080000 	.word	0x20080000
 80016a4:	00000400 	.word	0x00000400
 80016a8:	2000010c 	.word	0x2000010c
 80016ac:	2000e550 	.word	0x2000e550

080016b0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <MX_TIM3_Init+0xac>)
 80016d6:	4a22      	ldr	r2, [pc, #136]	; (8001760 <MX_TIM3_Init+0xb0>)
 80016d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <MX_TIM3_Init+0xac>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_TIM3_Init+0xac>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_TIM3_Init+0xac>)
 80016e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_TIM3_Init+0xac>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <MX_TIM3_Init+0xac>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016fa:	4818      	ldr	r0, [pc, #96]	; (800175c <MX_TIM3_Init+0xac>)
 80016fc:	f007 f810 	bl	8008720 <HAL_TIM_PWM_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001706:	f7ff fda7 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4810      	ldr	r0, [pc, #64]	; (800175c <MX_TIM3_Init+0xac>)
 800171a:	f007 fdad 	bl	8009278 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001724:	f7ff fd98 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001728:	2360      	movs	r3, #96	; 0x60
 800172a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <MX_TIM3_Init+0xac>)
 8001740:	f007 f964 	bl	8008a0c <HAL_TIM_PWM_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800174a:	f7ff fd85 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <MX_TIM3_Init+0xac>)
 8001750:	f000 f828 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000e42c 	.word	0x2000e42c
 8001760:	40000400 	.word	0x40000400

08001764 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_TIM_PWM_MspInit+0x38>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d10b      	bne.n	800178e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40000400 	.word	0x40000400
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a11      	ldr	r2, [pc, #68]	; (8001808 <HAL_TIM_MspPostInit+0x64>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d11b      	bne.n	80017fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_TIM_MspPostInit+0x68>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_TIM_MspPostInit+0x68>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_TIM_MspPostInit+0x68>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017de:	2310      	movs	r3, #16
 80017e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_TIM_MspPostInit+0x6c>)
 80017fa:	f004 fe01 	bl	8006400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40000400 	.word	0x40000400
 800180c:	40023800 	.word	0x40023800
 8001810:	40020400 	.word	0x40020400

08001814 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_UART5_Init+0x58>)
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <MX_UART5_Init+0x5c>)
 800181c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <MX_UART5_Init+0x58>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_UART5_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_UART5_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_UART5_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_UART5_Init+0x58>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_UART5_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_UART5_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_UART5_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_UART5_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_UART5_Init+0x58>)
 8001858:	f007 fdba 	bl	80093d0 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001862:	f7ff fcf9 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000e478 	.word	0x2000e478
 8001870:	40005000 	.word	0x40005000

08001874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0ae      	sub	sp, #184	; 0xb8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2290      	movs	r2, #144	; 0x90
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f01a f921 	bl	801badc <memset>
  if(uartHandle->Instance==UART5)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a32      	ldr	r2, [pc, #200]	; (8001968 <HAL_UART_MspInit+0xf4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d15d      	bne.n	8001960 <HAL_UART_MspInit+0xec>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80018a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4618      	mov	r0, r3
 80018b4:	f006 f9b4 	bl	8007c20 <HAL_RCCEx_PeriphCLKConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018be:	f7ff fccb 	bl	8001258 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_UART_MspInit+0xf8>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_UART_MspInit+0xf8>)
 80018c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_UART_MspInit+0xf8>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_UART_MspInit+0xf8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <HAL_UART_MspInit+0xf8>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_UART_MspInit+0xf8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_UART_MspInit+0xf8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_UART_MspInit+0xf8>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_UART_MspInit+0xf8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 800190a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001924:	2308      	movs	r3, #8
 8001926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800192e:	4619      	mov	r1, r3
 8001930:	480f      	ldr	r0, [pc, #60]	; (8001970 <HAL_UART_MspInit+0xfc>)
 8001932:	f004 fd65 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8001936:	2304      	movs	r3, #4
 8001938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800194e:	2308      	movs	r3, #8
 8001950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <HAL_UART_MspInit+0x100>)
 800195c:	f004 fd50 	bl	8006400 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001960:	bf00      	nop
 8001962:	37b8      	adds	r7, #184	; 0xb8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40005000 	.word	0x40005000
 800196c:	40023800 	.word	0x40023800
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001994:	4c0b      	ldr	r4, [pc, #44]	; (80019c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019a2:	f004 f8f5 	bl	8005b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a6:	f01a f857 	bl	801ba58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019aa:	f7ff fbb5 	bl	8001118 <main>
  bx  lr    
 80019ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80019bc:	0802e594 	.word	0x0802e594
  ldr r2, =_sbss
 80019c0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80019c4:	2000e550 	.word	0x2000e550

080019c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC_IRQHandler>

080019ca <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80019ce:	f001 fbaf 	bl	8003130 <touchgfx_init>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80019da:	f001 fbd3 	bl	8003184 <touchgfx_taskEntry>
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    {
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	601a      	str	r2, [r3, #0]
    }
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	0801d628 	.word	0x0801d628

08001a04 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
    }
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffe9 	bl	80019e4 <_ZN8touchgfx15TouchControllerD1Ev>
 8001a12:	2104      	movs	r1, #4
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f019 ffa6 	bl	801b966 <_ZdlPvj>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ffbd 	bl	80019e4 <_ZN8touchgfx15TouchControllerD1Ev>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	0801d610 	.word	0x0801d610

08001a78 <_ZN20STM32TouchControllerD0Ev>:
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe7 	bl	8001a54 <_ZN20STM32TouchControllerD1Ev>
 8001a86:	2104      	movs	r1, #4
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f019 ff6c 	bl	801b966 <_ZdlPvj>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]

}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]

}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]

}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    {
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
    }
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	0801e2e8 	.word	0x0801e2e8

08001afc <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    }
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffe9 	bl	8001adc <_ZN8touchgfx3HALD1Ev>
 8001b0a:	217c      	movs	r1, #124	; 0x7c
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f019 ff2a 	bl	801b966 <_ZdlPvj>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4610      	mov	r0, r2
 8001b64:	4798      	blx	r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	e000      	b.n	8001b6c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8001b6a:	2300      	movs	r3, #0
        }
    }
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f00c ff1b 	bl	800e9b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	33a0      	adds	r3, #160	; 0xa0
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
    }
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
    {
        return false;
 8001ba0:	2300      	movs	r3, #0
    }
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d106      	bne.n	8001bd2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001bc8:	f44f 7125 	mov.w	r1, #660	; 0x294
 8001bcc:	4811      	ldr	r0, [pc, #68]	; (8001c14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001bce:	f019 fef9 	bl	801b9c4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001bf2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001c02:	701a      	strb	r2, [r3, #0]
    }
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	0801caf0 	.word	0x0801caf0
 8001c10:	0801cb28 	.word	0x0801cb28
 8001c14:	0801cb78 	.word	0x0801cb78
 8001c18:	2000df6a 	.word	0x2000df6a
 8001c1c:	2000df6b 	.word	0x2000df6b

08001c20 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001c28:	2300      	movs	r3, #0
    }
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d004      	beq.n	8001c54 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	4610      	mov	r0, r2
 8001c52:	4798      	blx	r3
        }
    }
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3318      	adds	r3, #24
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4610      	mov	r0, r2
 8001c74:	4798      	blx	r3
 8001c76:	4603      	mov	r3, r0
    }
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d017      	beq.n	8001cc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d12a      	bne.n	8001cf6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8001ca6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8001cae:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8001cb2:	881a      	ldrh	r2, [r3, #0]
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8001cb6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8001cba:	881a      	ldrh	r2, [r3, #0]
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8001cbe:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001cc6:	e016      	b.n	8001cf6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d012      	beq.n	8001cf6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8001cd6:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8001cde:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8001ce2:	881a      	ldrh	r2, [r3, #0]
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8001ce6:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8001cea:	881a      	ldrh	r2, [r3, #0]
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8001cee:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
    }
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	2000df64 	.word	0x2000df64
 8001d08:	2000df60 	.word	0x2000df60
 8001d0c:	2000df66 	.word	0x2000df66
 8001d10:	2000df62 	.word	0x2000df62
 8001d14:	2000df68 	.word	0x2000df68

08001d18 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00c f819 	bl	800dd5a <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fecb 	bl	8001adc <_ZN8touchgfx3HALD1Ev>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	0801d98c 	.word	0x0801d98c

08001d54 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ffe7 	bl	8001d30 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001d62:	217c      	movs	r1, #124	; 0x7c
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f019 fdfe 	bl	801b966 <_ZdlPvj>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ffca 	bl	8001d18 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 fd8a 	bl	80038b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fe24 	bl	80039fc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6839      	ldr	r1, [r7, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fe23 	bl	8003a18 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6839      	ldr	r1, [r7, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fe2b 	bl	8003a44 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	f001 fe38 	bl	8003a80 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 fd75 	bl	8003914 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f001 fd79 	bl	8003934 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f001 fd7b 	bl	8003950 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f001 fd7d 	bl	800396c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_ZN11TouchGFXHALD1Ev+0x20>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff4f 	bl	8001d30 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	0801d640 	.word	0x0801d640

08001ea0 <_ZN11TouchGFXHALD0Ev>:
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ffe7 	bl	8001e7c <_ZN11TouchGFXHALD1Ev>
 8001eae:	217c      	movs	r1, #124	; 0x7c
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f019 fd58 	bl	801b966 <_ZdlPvj>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f008 f939 	bl	800a140 <osSemaphoreNew>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001ed2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001ede:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001ee0:	2126      	movs	r1, #38	; 0x26
 8001ee2:	480e      	ldr	r0, [pc, #56]	; (8001f1c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001ee4:	f019 fd6e 	bl	801b9c4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2104      	movs	r1, #4
 8001eec:	2001      	movs	r0, #1
 8001eee:	f008 fa81 	bl	800a3f4 <osMessageQueueNew>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001ef6:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001f04:	212a      	movs	r1, #42	; 0x2a
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001f08:	f019 fd5c 	bl	801b9c4 <__assert_func>
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000110 	.word	0x20000110
 8001f14:	0801cbc0 	.word	0x0801cbc0
 8001f18:	0801cc0c 	.word	0x0801cc0c
 8001f1c:	0801cc3c 	.word	0x0801cc3c
 8001f20:	20000114 	.word	0x20000114
 8001f24:	0801ccb8 	.word	0x0801ccb8

08001f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	4618      	mov	r0, r3
 8001f36:	f008 f99f 	bl	800a278 <osSemaphoreAcquire>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000110 	.word	0x20000110

08001f44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f008 f9f9 	bl	800a344 <osSemaphoreRelease>
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000110 	.word	0x20000110

08001f5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f008 f986 	bl	800a278 <osSemaphoreAcquire>
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000110 	.word	0x20000110

08001f74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f008 f9e1 	bl	800a344 <osSemaphoreRelease>
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000110 	.word	0x20000110

08001f8c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	2300      	movs	r3, #0
 8001f96:	2200      	movs	r2, #0
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001f9a:	f008 fab1 	bl	800a500 <osMessageQueuePut>
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000114 	.word	0x20000114
 8001fa8:	20000004 	.word	0x20000004

08001fac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	1d39      	adds	r1, r7, #4
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f008 fb14 	bl	800a5e8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	1d39      	adds	r1, r7, #4
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f008 fb0c 	bl	800a5e8 <osMessageQueueGet>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000114 	.word	0x20000114

08001fdc <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f008 f87b 	bl	800a0e4 <osDelay>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
    osThreadYield();
 8001ffa:	f008 f841 	bl	800a080 <osThreadYield>
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <__NVIC_EnableIRQ>:
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_DisableIRQ>:
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db12      	blt.n	8002078 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	490a      	ldr	r1, [pc, #40]	; (8002084 <__NVIC_DisableIRQ+0x44>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	3320      	adds	r3, #32
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800206c:	f3bf 8f4f 	dsb	sy
}
 8002070:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002072:	f3bf 8f6f 	isb	sy
}
 8002076:	bf00      	nop
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100

08002088 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
        : color(0)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
    {
    }
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    {
        return color;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
    }
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    {
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
    }
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	0801d75c 	.word	0x0801d75c

080020dc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    }
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ffe9 	bl	80020bc <_ZN8touchgfx9DMA_QueueD1Ev>
 80020ea:	2104      	movs	r1, #4
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f019 fc3a 	bl	801b966 <_ZdlPvj>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3344      	adds	r3, #68	; 0x44
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
    }
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    {
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	601a      	str	r2, [r3, #0]
    }
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	0801e828 	.word	0x0801e828

08002138 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    }
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ffe9 	bl	8002118 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002146:	210c      	movs	r1, #12
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f019 fc0c 	bl	801b966 <_ZdlPvj>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	721a      	strb	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	725a      	strb	r2, [r3, #9]
    {
    }
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	0801e828 	.word	0x0801e828

0800218c <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002194:	2301      	movs	r3, #1
    }
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3328      	adds	r3, #40	; 0x28
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4610      	mov	r0, r2
 80021b6:	4798      	blx	r3
    }
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
        return instance;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
    }
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000df6c 	.word	0x2000df6c

080021d8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3314      	adds	r3, #20
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4610      	mov	r0, r2
 80021f0:	4798      	blx	r3
    }
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002202:	f7ff ffdd 	bl	80021c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8002206:	4603      	mov	r3, r0
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ffe5 	bl	80021d8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	330c      	adds	r3, #12
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff30 	bl	8002088 <_ZN8touchgfx9colortypeC1Ev>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 8002234:	b5b0      	push	{r4, r5, r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	330c      	adds	r3, #12
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7ff ff87 	bl	8002158 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800224a:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <_ZN10STM32F7DMAC1Ev+0x50>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f103 000c 	add.w	r0, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3320      	adds	r3, #32
 800225a:	2260      	movs	r2, #96	; 0x60
 800225c:	4619      	mov	r1, r3
 800225e:	f00c fd15 	bl	800ec8c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3320      	adds	r3, #32
 8002266:	245f      	movs	r4, #95	; 0x5f
 8002268:	461d      	mov	r5, r3
 800226a:	2c00      	cmp	r4, #0
 800226c:	db05      	blt.n	800227a <_ZN10STM32F7DMAC1Ev+0x46>
 800226e:	4628      	mov	r0, r5
 8002270:	f7ff ffd1 	bl	8002216 <_ZN8touchgfx6BlitOpC1Ev>
 8002274:	3520      	adds	r5, #32
 8002276:	3c01      	subs	r4, #1
 8002278:	e7f7      	b.n	800226a <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bdb0      	pop	{r4, r5, r7, pc}
 8002284:	0801d70c 	.word	0x0801d70c

08002288 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <_ZN10STM32F7DMAD1Ev+0x30>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002296:	205a      	movs	r0, #90	; 0x5a
 8002298:	f7ff fed2 	bl	8002040 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	330c      	adds	r3, #12
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 faad 	bl	8002800 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff35 	bl	8002118 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	0801d70c 	.word	0x0801d70c

080022bc <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
}
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ffdf 	bl	8002288 <_ZN10STM32F7DMAD1Ev>
 80022ca:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f019 fb49 	bl	801b966 <_ZdlPvj>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80022ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022f2:	6313      	str	r3, [r2, #48]	; 0x30
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002306:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800230a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002312:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002316:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <_ZN10STM32F7DMA10initializeEv+0x50>)
 800231a:	4a06      	ldr	r2, [pc, #24]	; (8002334 <_ZN10STM32F7DMA10initializeEv+0x54>)
 800231c:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800231e:	205a      	movs	r0, #90	; 0x5a
 8002320:	f7ff fe70 	bl	8002004 <__NVIC_EnableIRQ>
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	2000e20c 	.word	0x2000e20c
 8002334:	080021fb 	.word	0x080021fb

08002338 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b0b      	cmp	r3, #11
 800234c:	d826      	bhi.n	800239c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800234e:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	08002391 	.word	0x08002391
 8002358:	0800238b 	.word	0x0800238b
 800235c:	08002385 	.word	0x08002385
 8002360:	0800239d 	.word	0x0800239d
 8002364:	0800239d 	.word	0x0800239d
 8002368:	0800239d 	.word	0x0800239d
 800236c:	0800239d 	.word	0x0800239d
 8002370:	08002397 	.word	0x08002397
 8002374:	08002397 	.word	0x08002397
 8002378:	08002397 	.word	0x08002397
 800237c:	08002397 	.word	0x08002397
 8002380:	08002397 	.word	0x08002397
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
        break;
 8002388:	e00e      	b.n	80023a8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800238a:	2301      	movs	r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
        break;
 800238e:	e00b      	b.n	80023a8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002390:	2302      	movs	r3, #2
 8002392:	60fb      	str	r3, [r7, #12]
        break;
 8002394:	e008      	b.n	80023a8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002396:	2305      	movs	r3, #5
 8002398:	60fb      	str	r3, [r7, #12]
        break;
 800239a:	e005      	b.n	80023a8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800239e:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80023a0:	2164      	movs	r1, #100	; 0x64
 80023a2:	4806      	ldr	r0, [pc, #24]	; (80023bc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80023a4:	f019 fb0e 	bl	801b9c4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	0801ccfc 	.word	0x0801ccfc
 80023b8:	0801cd18 	.word	0x0801cd18
 80023bc:	0801cd64 	.word	0x0801cd64

080023c0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]

    switch (format)
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	2b0a      	cmp	r3, #10
 80023d4:	d821      	bhi.n	800241a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	08002415 	.word	0x08002415
 80023e0:	0800240f 	.word	0x0800240f
 80023e4:	08002409 	.word	0x08002409
 80023e8:	0800241b 	.word	0x0800241b
 80023ec:	0800241b 	.word	0x0800241b
 80023f0:	0800241b 	.word	0x0800241b
 80023f4:	0800241b 	.word	0x0800241b
 80023f8:	0800240f 	.word	0x0800240f
 80023fc:	0800240f 	.word	0x0800240f
 8002400:	0800240f 	.word	0x0800240f
 8002404:	0800240f 	.word	0x0800240f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
        break;
 800240c:	e00b      	b.n	8002426 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800240e:	2301      	movs	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
        break;
 8002412:	e008      	b.n	8002426 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002414:	2302      	movs	r3, #2
 8002416:	60fb      	str	r3, [r7, #12]
        break;
 8002418:	e005      	b.n	8002426 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800241c:	4a05      	ldr	r2, [pc, #20]	; (8002434 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800241e:	2185      	movs	r1, #133	; 0x85
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8002422:	f019 facf 	bl	801b9c4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	0801ccfc 	.word	0x0801ccfc
 8002434:	0801cddc 	.word	0x0801cddc
 8002438:	0801cd64 	.word	0x0801cd64

0800243c <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002444:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	7f5b      	ldrb	r3, [r3, #29]
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff67 	bl	8002338 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800246a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	7f9b      	ldrb	r3, [r3, #30]
 8002470:	4619      	mov	r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ff60 	bl	8002338 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002478:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	7f9b      	ldrb	r3, [r3, #30]
 800247e:	4619      	mov	r1, r3
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff9d 	bl	80023c0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002486:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	8b5b      	ldrh	r3, [r3, #26]
 800248c:	461a      	mov	r2, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	8a9b      	ldrh	r3, [r3, #20]
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	4b97      	ldr	r3, [pc, #604]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002496:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	8b5b      	ldrh	r3, [r3, #26]
 800249c:	461a      	mov	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	8a9b      	ldrh	r3, [r3, #20]
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	4b93      	ldr	r3, [pc, #588]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80024a6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	8b1b      	ldrh	r3, [r3, #24]
 80024ac:	461a      	mov	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	8a9b      	ldrh	r3, [r3, #20]
 80024b2:	1ad2      	subs	r2, r2, r3
 80024b4:	4b8f      	ldr	r3, [pc, #572]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80024b6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024b8:	4a8e      	ldr	r2, [pc, #568]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	8adb      	ldrh	r3, [r3, #22]
 80024c2:	461a      	mov	r2, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	8a9b      	ldrh	r3, [r3, #20]
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	4b89      	ldr	r3, [pc, #548]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	4b87      	ldr	r3, [pc, #540]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80024de:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e8:	d037      	beq.n	800255a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 80024ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ee:	f200 80e4 	bhi.w	80026ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 80024f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f6:	d015      	beq.n	8002524 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80024f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024fc:	f200 80dd 	bhi.w	80026ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002500:	2b80      	cmp	r3, #128	; 0x80
 8002502:	d045      	beq.n	8002590 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	f200 80d8 	bhi.w	80026ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	f000 80c0 	beq.w	8002690 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	f200 80d2 	bhi.w	80026ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002516:	2b04      	cmp	r3, #4
 8002518:	f000 80a5 	beq.w	8002666 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 800251c:	2b20      	cmp	r3, #32
 800251e:	f000 80b7 	beq.w	8002690 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8002522:	e0ca      	b.n	80026ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	7f1b      	ldrb	r3, [r3, #28]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	4619      	mov	r1, r3
 800252c:	4a71      	ldr	r2, [pc, #452]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800252e:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002530:	430b      	orrs	r3, r1
 8002532:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	4c6e      	ldr	r4, [pc, #440]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fdb2 	bl	80020a4 <_ZNK8touchgfx9colortypecvmEv>
 8002540:	4603      	mov	r3, r0
 8002542:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002544:	4a6b      	ldr	r2, [pc, #428]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	4b69      	ldr	r3, [pc, #420]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002550:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002552:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002554:	4a69      	ldr	r2, [pc, #420]	; (80026fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002556:	601a      	str	r2, [r3, #0]
        break;
 8002558:	e0c8      	b.n	80026ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	7f1b      	ldrb	r3, [r3, #28]
 800255e:	061b      	lsls	r3, r3, #24
 8002560:	4619      	mov	r1, r3
 8002562:	4a64      	ldr	r2, [pc, #400]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002564:	4b66      	ldr	r3, [pc, #408]	; (8002700 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002566:	430b      	orrs	r3, r1
 8002568:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	330c      	adds	r3, #12
 800256e:	4c61      	ldr	r4, [pc, #388]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fd97 	bl	80020a4 <_ZNK8touchgfx9colortypecvmEv>
 8002576:	4603      	mov	r3, r0
 8002578:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800257a:	4a5e      	ldr	r2, [pc, #376]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002586:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002588:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800258a:	4a5c      	ldr	r2, [pc, #368]	; (80026fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800258c:	601a      	str	r2, [r3, #0]
        break;
 800258e:	e0ad      	b.n	80026ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 8002596:	2301      	movs	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	7f1b      	ldrb	r3, [r3, #28]
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	461a      	mov	r2, r3
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	4a53      	ldr	r2, [pc, #332]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80025ae:	4a51      	ldr	r2, [pc, #324]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80025ba:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1d1a      	adds	r2, r3, #4
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d00d      	beq.n	80025ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 80025d2:	e020      	b.n	8002616 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025d4:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80025da:	4013      	ands	r3, r2
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	8852      	ldrh	r2, [r2, #2]
 80025e0:	3a01      	subs	r2, #1
 80025e2:	0212      	lsls	r2, r2, #8
 80025e4:	4611      	mov	r1, r2
 80025e6:	4a43      	ldr	r2, [pc, #268]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80025e8:	430b      	orrs	r3, r1
 80025ea:	61d3      	str	r3, [r2, #28]
            break;
 80025ec:	e019      	b.n	8002622 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	7f1b      	ldrb	r3, [r3, #28]
 80025f2:	2bff      	cmp	r3, #255	; 0xff
 80025f4:	d101      	bne.n	80025fa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 80025f6:	2300      	movs	r3, #0
 80025f8:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002600:	4013      	ands	r3, r2
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	8852      	ldrh	r2, [r2, #2]
 8002606:	3a01      	subs	r2, #1
 8002608:	0212      	lsls	r2, r2, #8
 800260a:	4313      	orrs	r3, r2
 800260c:	4a39      	ldr	r2, [pc, #228]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800260e:	f043 0310 	orr.w	r3, r3, #16
 8002612:	61d3      	str	r3, [r2, #28]
            break;
 8002614:	e005      	b.n	8002622 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 8002616:	4b3c      	ldr	r3, [pc, #240]	; (8002708 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8002618:	4a3c      	ldr	r2, [pc, #240]	; (800270c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 800261a:	21ff      	movs	r1, #255	; 0xff
 800261c:	483c      	ldr	r0, [pc, #240]	; (8002710 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 800261e:	f019 f9d1 	bl	801b9c4 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002622:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a33      	ldr	r2, [pc, #204]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002628:	f043 0320 	orr.w	r3, r3, #32
 800262c:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800262e:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf14      	ite	ne
 800263a:	2301      	movne	r3, #1
 800263c:	2300      	moveq	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 8002644:	f7ff fcd7 	bl	8001ff6 <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002648:	e7f1      	b.n	800262e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800264a:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800264c:	2210      	movs	r2, #16
 800264e:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 8002650:	7ffb      	ldrb	r3, [r7, #31]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002658:	4a28      	ldr	r2, [pc, #160]	; (80026fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800265a:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 800265c:	e046      	b.n	80026ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002660:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8002662:	601a      	str	r2, [r3, #0]
      break;
 8002664:	e042      	b.n	80026ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	7f1b      	ldrb	r3, [r3, #28]
 800266a:	061b      	lsls	r3, r3, #24
 800266c:	461a      	mov	r2, r3
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002686:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800268a:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800268c:	601a      	str	r2, [r3, #0]
        break;
 800268e:	e02d      	b.n	80026ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	7f1b      	ldrb	r3, [r3, #28]
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	461a      	mov	r2, r3
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800269e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80026b0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80026b6:	601a      	str	r2, [r3, #0]
        break;
 80026b8:	e018      	b.n	80026ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	7f1b      	ldrb	r3, [r3, #28]
 80026be:	061b      	lsls	r3, r3, #24
 80026c0:	461a      	mov	r2, r3
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026cc:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	7f5a      	ldrb	r2, [r3, #29]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	7f9b      	ldrb	r3, [r3, #30]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d003      	beq.n	80026e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 80026de:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 80026e0:	e003      	b.n	80026ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80026e4:	f240 2201 	movw	r2, #513	; 0x201
 80026e8:	601a      	str	r2, [r3, #0]
        break;
 80026ea:	bf00      	nop
    }
}
 80026ec:	bf00      	nop
 80026ee:	3724      	adds	r7, #36	; 0x24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd90      	pop	{r4, r7, pc}
 80026f4:	4002b000 	.word	0x4002b000
 80026f8:	0002000a 	.word	0x0002000a
 80026fc:	00020201 	.word	0x00020201
 8002700:	00020009 	.word	0x00020009
 8002704:	ffff00ef 	.word	0xffff00ef
 8002708:	0801ce2c 	.word	0x0801ce2c
 800270c:	0801ce48 	.word	0x0801ce48
 8002710:	0801cd64 	.word	0x0801cd64
 8002714:	00010201 	.word	0x00010201

08002718 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	7f9b      	ldrb	r3, [r3, #30]
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff fe49 	bl	80023c0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800272e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002730:	4a2f      	ldr	r2, [pc, #188]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	8adb      	ldrh	r3, [r3, #22]
 800273a:	461a      	mov	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	8a9b      	ldrh	r3, [r3, #20]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002746:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	8b5b      	ldrh	r3, [r3, #26]
 8002754:	461a      	mov	r2, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	8a9b      	ldrh	r3, [r3, #20]
 800275a:	1ad2      	subs	r2, r2, r3
 800275c:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b08      	cmp	r3, #8
 8002766:	d12e      	bne.n	80027c6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	8b5b      	ldrh	r3, [r3, #26]
 800276c:	461a      	mov	r2, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	8a9b      	ldrh	r3, [r3, #20]
 8002772:	1ad2      	subs	r2, r2, r3
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002776:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	8b5b      	ldrh	r3, [r3, #26]
 800277c:	461a      	mov	r2, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	8a9b      	ldrh	r3, [r3, #20]
 8002782:	1ad2      	subs	r2, r2, r3
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002786:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	7f1b      	ldrb	r3, [r3, #28]
 8002792:	061b      	lsls	r3, r3, #24
 8002794:	4619      	mov	r1, r3
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800279a:	430b      	orrs	r3, r1
 800279c:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	4c13      	ldr	r4, [pc, #76]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fc7d 	bl	80020a4 <_ZNK8touchgfx9colortypecvmEv>
 80027aa:	4603      	mov	r3, r0
 80027ac:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80027b4:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80027bc:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80027c0:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 80027c2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80027c4:	e010      	b.n	80027e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	330c      	adds	r3, #12
 80027d6:	4c06      	ldr	r4, [pc, #24]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fc63 	bl	80020a4 <_ZNK8touchgfx9colortypecvmEv>
 80027de:	4603      	mov	r3, r0
 80027e0:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80027e2:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80027e4:	4a05      	ldr	r2, [pc, #20]	; (80027fc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 80027e6:	601a      	str	r2, [r3, #0]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}
 80027f0:	4002b000 	.word	0x4002b000
 80027f4:	00010009 	.word	0x00010009
 80027f8:	00020201 	.word	0x00020201
 80027fc:	00030201 	.word	0x00030201

08002800 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	4a05      	ldr	r2, [pc, #20]	; (8002820 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fc53 	bl	80020bc <_ZN8touchgfx9DMA_QueueD1Ev>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	0801e878 	.word	0x0801e878

08002824 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ffe7 	bl	8002800 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002832:	2114      	movs	r1, #20
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f019 f896 	bl	801b966 <_ZdlPvj>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	801a      	strh	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	805a      	strh	r2, [r3, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	809a      	strh	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	80da      	strh	r2, [r3, #6]
    {
    }
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
    }
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000dfc8 	.word	0x2000dfc8

08002894 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
    {
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
    }
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	0801d978 	.word	0x0801d978

080028b4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    }
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ffe9 	bl	8002894 <_ZN8touchgfx12FontProviderD1Ev>
 80028c2:	2104      	movs	r1, #4
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f019 f84e 	bl	801b966 <_ZdlPvj>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80028e2:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	611a      	str	r2, [r3, #16]
    {
    }
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	0801d968 	.word	0x0801d968

08002914 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
    {
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	601a      	str	r2, [r3, #0]
    }
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	0801d968 	.word	0x0801d968

08002934 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
    }
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ffe9 	bl	8002914 <_ZN8touchgfx7MVPHeapD1Ev>
 8002942:	2114      	movs	r1, #20
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f019 f80e 	bl	801b966 <_ZdlPvj>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
    {
    }
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
    {
    }
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
    {
    }
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
    {
    }
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
    {
    }
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
    {
    }
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
    {
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
    }
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	0801d940 	.word	0x0801d940

080029f8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    }
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ffe9 	bl	80029d8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002a06:	2104      	movs	r1, #4
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f018 ffac 	bl	801b966 <_ZdlPvj>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
    {
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	601a      	str	r2, [r3, #0]
    }
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	0801ec80 	.word	0x0801ec80

08002a38 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    }
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ffe9 	bl	8002a18 <_ZN8touchgfx3LCDD1Ev>
 8002a46:	2108      	movs	r1, #8
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f018 ff8c 	bl	801b966 <_ZdlPvj>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002a82:	6810      	ldr	r0, [r2, #0]
 8002a84:	6851      	ldr	r1, [r2, #4]
 8002a86:	c303      	stmia	r3!, {r0, r1}
    }
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    {
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	601a      	str	r2, [r3, #0]
    }
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	0801d928 	.word	0x0801d928

08002ab4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    }
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ffe9 	bl	8002a94 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f018 ff4e 	bl	801b966 <_ZdlPvj>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff77 	bl	80029d8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	0801ed58 	.word	0x0801ed58

08002af8 <_ZN8touchgfx11ApplicationD0Ev>:
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ffe7 	bl	8002ad4 <_ZN8touchgfx11ApplicationD1Ev>
 8002b06:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f018 ff2b 	bl	801b966 <_ZdlPvj>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f804 	bl	8002b30 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00f      	beq.n	8002b62 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4610      	mov	r0, r2
 8002b56:	4798      	blx	r3
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3308      	adds	r3, #8
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff97 	bl	8002ad4 <_ZN8touchgfx11ApplicationD1Ev>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	0801d8e4 	.word	0x0801d8e4

08002bb4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ffe7 	bl	8002b90 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002bc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f018 fecd 	bl	801b966 <_ZdlPvj>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fbdf 	bl	80033b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ffcb 	bl	8002b90 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	0801d888 	.word	0x0801d888

08002c08 <_ZN23FrontendApplicationBaseD0Ev>:
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ffe1 	bl	8002bd8 <_ZN23FrontendApplicationBaseD1Ev>
 8002c16:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f018 fea3 	bl	801b966 <_ZdlPvj>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <_ZN19FrontendApplicationD1Ev+0x20>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ffcb 	bl	8002bd8 <_ZN23FrontendApplicationBaseD1Ev>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	0801d844 	.word	0x0801d844

08002c50 <_ZN19FrontendApplicationD0Ev>:
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ffe7 	bl	8002c2c <_ZN19FrontendApplicationD1Ev>
 8002c5e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f018 fe7f 	bl	801b966 <_ZdlPvj>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 fe4d 	bl	8005920 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00d fd6d 	bl	8010768 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
    {
        app.gotostartScreenNoTransition();
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 f9fe 	bl	80040a4 <_ZN23FrontendApplicationBase27gotostartScreenNoTransitionEv>
    }
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	f7ff fe03 	bl	80028d4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]
    {

    }
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	0801d830 	.word	0x0801d830

08002ce4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4801      	ldr	r0, [pc, #4]	; (8002cf0 <__tcf_0+0xc>)
 8002cea:	f000 fa55 	bl	8003198 <_ZN12FrontendHeapD1Ev>
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000118 	.word	0x20000118

08002cf4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f3bf 8f5b 	dmb	ish
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002d14:	480b      	ldr	r0, [pc, #44]	; (8002d44 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002d16:	f018 fe28 	bl	801b96a <__cxa_guard_acquire>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002d2a:	4807      	ldr	r0, [pc, #28]	; (8002d48 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002d2c:	f000 f868 	bl	8002e00 <_ZN12FrontendHeapC1Ev>
 8002d30:	4804      	ldr	r0, [pc, #16]	; (8002d44 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002d32:	f018 fe26 	bl	801b982 <__cxa_guard_release>
 8002d36:	4805      	ldr	r0, [pc, #20]	; (8002d4c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8002d38:	f018 fe62 	bl	801ba00 <atexit>
        return instance;
 8002d3c:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8002d3e:	4618      	mov	r0, r3
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200004b4 	.word	0x200004b4
 8002d48:	20000118 	.word	0x20000118
 8002d4c:	08002ce5 	.word	0x08002ce5

08002d50 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fdd7 	bl	8002914 <_ZN8touchgfx7MVPHeapD1Ev>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	0801d830 	.word	0x0801d830

08002d74 <_ZN16FrontendHeapBaseD0Ev>:
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ffe7 	bl	8002d50 <_ZN16FrontendHeapBaseD1Ev>
 8002d82:	2114      	movs	r1, #20
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f018 fdee 	bl	801b966 <_ZdlPvj>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f00a fdf4 	bl	800d98c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002da4:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	0801d7fc 	.word	0x0801d7fc

08002db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f00a fde2 	bl	800d98c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dc8:	4a03      	ldr	r2, [pc, #12]	; (8002dd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	0801d7c8 	.word	0x0801d7c8

08002ddc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f00a fdd0 	bl	800d98c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dec:	4a03      	ldr	r2, [pc, #12]	; (8002dfc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	0801d794 	.word	0x0801d794

08002e00 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f103 0114 	add.w	r1, r3, #20
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f503 740b 	add.w	r4, r3, #556	; 0x22c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f503 7311 	add.w	r3, r3, #580	; 0x244
                     app(model, *this)
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	4623      	mov	r3, r4
 8002e26:	f7ff ff43 	bl	8002cb0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <_ZN12FrontendHeapC1Ev+0x8c>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3314      	adds	r3, #20
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ffad 	bl	8002d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	332c      	adds	r3, #44	; 0x2c
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ffba 	bl	8002db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ffc6 	bl	8002ddc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 fd54 	bl	8005904 <_ZN5ModelC1Ev>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f503 7011 	add.w	r0, r3, #580	; 0x244
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f002 fd34 	bl	80058d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7ff ff0b 	bl	8002c96 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	0801d780 	.word	0x0801d780

08002e90 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	801a      	strh	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	805a      	strh	r2, [r3, #2]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	809a      	strh	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	80da      	strh	r2, [r3, #6]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	811a      	strh	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	815a      	strh	r2, [r3, #10]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	819a      	strh	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	739a      	strb	r2, [r3, #14]
        {
        }
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ffd5 	bl	8002e90 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	829a      	strh	r2, [r3, #20]
    {
    }
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002f0a:	4a55      	ldr	r2, [pc, #340]	; (8003060 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	615a      	str	r2, [r3, #20]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	331c      	adds	r3, #28
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ffcc 	bl	8002ed6 <_ZN8touchgfx8GesturesC1Ev>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3350      	adds	r3, #80	; 0x50
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fc5b 	bl	8002844 <_ZN8touchgfx4RectC1Ev>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	659a      	str	r2, [r3, #88]	; 0x58
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	671a      	str	r2, [r3, #112]	; 0x70
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8003016:	4a13      	ldr	r2, [pc, #76]	; (8003064 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800301c:	4a12      	ldr	r2, [pc, #72]	; (8003068 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800301e:	8b3b      	ldrh	r3, [r7, #24]
 8003020:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003024:	8bbb      	ldrh	r3, [r7, #28]
 8003026:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003030:	881a      	ldrh	r2, [r3, #0]
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8003034:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800303c:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800303e:	8b3a      	ldrh	r2, [r7, #24]
 8003040:	8bbb      	ldrh	r3, [r7, #28]
 8003042:	429a      	cmp	r2, r3
 8003044:	bf34      	ite	cc
 8003046:	2301      	movcc	r3, #1
 8003048:	2300      	movcs	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	0801e2e8 	.word	0x0801e2e8
 8003064:	2000df6c 	.word	0x2000df6c
 8003068:	2000df60 	.word	0x2000df60
 800306c:	2000df62 	.word	0x2000df62
 8003070:	2000df64 	.word	0x2000df64
 8003074:	2000df66 	.word	0x2000df66
 8003078:	2000df68 	.word	0x2000df68

0800307c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	8bbb      	ldrh	r3, [r7, #28]
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	8b3b      	ldrh	r3, [r7, #24]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	f7ff ff2f 	bl	8002efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	601a      	str	r2, [r3, #0]
    }
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	0801d98c 	.word	0x0801d98c

080030b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	8bbb      	ldrh	r3, [r7, #28]
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	8b3b      	ldrh	r3, [r7, #24]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	f7ff ffd3 	bl	800307c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80030d6:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	601a      	str	r2, [r3, #0]
    }
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	0801d640 	.word	0x0801d640

080030ec <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	0801d628 	.word	0x0801d628

0800310c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ffe8 	bl	80030ec <_ZN8touchgfx15TouchControllerC1Ev>
 800311c:	4a03      	ldr	r2, [pc, #12]	; (800312c <_ZN20STM32TouchControllerC1Ev+0x20>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	0801d610 	.word	0x0801d610

08003130 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b085      	sub	sp, #20
 8003134:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003136:	f000 fd6b 	bl	8003c10 <_ZN14BitmapDatabase11getInstanceEv>
 800313a:	4604      	mov	r4, r0
 800313c:	f000 fd72 	bl	8003c24 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003140:	4603      	mov	r3, r0
 8003142:	4619      	mov	r1, r3
 8003144:	2300      	movs	r3, #0
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2300      	movs	r3, #0
 800314a:	2200      	movs	r2, #0
 800314c:	4620      	mov	r0, r4
 800314e:	f010 f8bd 	bl	80132cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003152:	4809      	ldr	r0, [pc, #36]	; (8003178 <touchgfx_init+0x48>)
 8003154:	f7ff fb8e 	bl	8002874 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003158:	2000      	movs	r0, #0
 800315a:	f001 fcbf 	bl	8004adc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800315e:	4807      	ldr	r0, [pc, #28]	; (800317c <touchgfx_init+0x4c>)
 8003160:	f00f fff6 	bl	8013150 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003164:	f7ff fdc6 	bl	8002cf4 <_ZN12FrontendHeap11getInstanceEv>
 8003168:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800316a:	4805      	ldr	r0, [pc, #20]	; (8003180 <touchgfx_init+0x50>)
 800316c:	f7fe fe0e 	bl	8001d8c <_ZN11TouchGFXHAL10initializeEv>
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bd90      	pop	{r4, r7, pc}
 8003178:	20001134 	.word	0x20001134
 800317c:	20000008 	.word	0x20000008
 8003180:	20001138 	.word	0x20001138

08003184 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <touchgfx_taskEntry+0x10>)
 800318a:	f00a fe4a 	bl	800de22 <_ZN8touchgfx3HAL9taskEntryEv>
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20001138 	.word	0x20001138

08003198 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <_ZN12FrontendHeapD1Ev+0x4c>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fd3d 	bl	8002c2c <_ZN19FrontendApplicationD1Ev>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f827 	bl	800320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	332c      	adds	r3, #44	; 0x2c
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f844 	bl	8003250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3314      	adds	r3, #20
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f863 	bl	8003298 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fdbb 	bl	8002d50 <_ZN16FrontendHeapBaseD1Ev>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	0801d780 	.word	0x0801d780

080031e8 <_ZN12FrontendHeapD0Ev>:
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ffd1 	bl	8003198 <_ZN12FrontendHeapD1Ev>
 80031f6:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f018 fbb3 	bl	801b966 <_ZdlPvj>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	4a05      	ldr	r2, [pc, #20]	; (800322c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	f00a fbb3 	bl	800d988 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	0801d794 	.word	0x0801d794

08003230 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ffe7 	bl	800320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800323e:	2114      	movs	r1, #20
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f018 fb90 	bl	801b966 <_ZdlPvj>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4a05      	ldr	r2, [pc, #20]	; (8003270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	f00a fb91 	bl	800d988 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	0801d7c8 	.word	0x0801d7c8

08003274 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ffe7 	bl	8003250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f018 fb6d 	bl	801b966 <_ZdlPvj>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f00a fb6d 	bl	800d988 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	0801d7fc 	.word	0x0801d7fc

080032bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ffe7 	bl	8003298 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032ca:	2118      	movs	r1, #24
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f018 fb4a 	bl	801b966 <_ZdlPvj>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	4a05      	ldr	r2, [pc, #20]	; (80032fc <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fb93 	bl	8002a18 <_ZN8touchgfx3LCDD1Ev>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	0801fd4c 	.word	0x0801fd4c

08003300 <_ZN8touchgfx8LCD24bppD0Ev>:
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ffe7 	bl	80032dc <_ZN8touchgfx8LCD24bppD1Ev>
 800330e:	2158      	movs	r1, #88	; 0x58
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f018 fb28 	bl	801b966 <_ZdlPvj>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <_Z41__static_initialization_and_destruction_0ii>:
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af02      	add	r7, sp, #8
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d119      	bne.n	8003364 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003336:	4293      	cmp	r3, r2
 8003338:	d114      	bne.n	8003364 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800333a:	4818      	ldr	r0, [pc, #96]	; (800339c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800333c:	f7ff fee6 	bl	800310c <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8003340:	4817      	ldr	r0, [pc, #92]	; (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003342:	f7fe ff77 	bl	8002234 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8003346:	4817      	ldr	r0, [pc, #92]	; (80033a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003348:	f012 fa7c 	bl	8015844 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 800334c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800335c:	4910      	ldr	r1, [pc, #64]	; (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800335e:	4812      	ldr	r0, [pc, #72]	; (80033a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003360:	f7ff fea8 	bl	80030b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d113      	bne.n	8003392 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003370:	4293      	cmp	r3, r2
 8003372:	d10e      	bne.n	8003392 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003376:	f7fe fd81 	bl	8001e7c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800337a:	480c      	ldr	r0, [pc, #48]	; (80033ac <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800337c:	f000 f83a 	bl	80033f4 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8003380:	4808      	ldr	r0, [pc, #32]	; (80033a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003382:	f7ff ffab 	bl	80032dc <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8003386:	4806      	ldr	r0, [pc, #24]	; (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003388:	f7fe ff7e 	bl	8002288 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 800338c:	4803      	ldr	r0, [pc, #12]	; (800339c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800338e:	f7fe fb61 	bl	8001a54 <_ZN20STM32TouchControllerD1Ev>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200004b8 	.word	0x200004b8
 80033a0:	200004bc 	.word	0x200004bc
 80033a4:	200010dc 	.word	0x200010dc
 80033a8:	20001138 	.word	0x20001138
 80033ac:	20000008 	.word	0x20000008

080033b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fb67 	bl	8002a94 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	0801d8cc 	.word	0x0801d8cc

080033d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ffe7 	bl	80033b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80033e2:	2110      	movs	r1, #16
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f018 fabe 	bl	801b966 <_ZdlPvj>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 1; // digital_7_400_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 2; // digital_7_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	4a05      	ldr	r2, [pc, #20]	; (8003414 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fa45 	bl	8002894 <_ZN8touchgfx12FontProviderD1Ev>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	0801da58 	.word	0x0801da58

08003418 <_ZN23ApplicationFontProviderD0Ev>:
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ffe7 	bl	80033f4 <_ZN23ApplicationFontProviderD1Ev>
 8003426:	2104      	movs	r1, #4
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f018 fa9c 	bl	801b966 <_ZdlPvj>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003440:	2301      	movs	r3, #1
    }
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003456:	230c      	movs	r3, #12
    }
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003470:	887a      	ldrh	r2, [r7, #2]
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	3308      	adds	r3, #8
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
    }
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003498:	887a      	ldrh	r2, [r7, #2]
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	3308      	adds	r3, #8
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
    }
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80034bc:	2301      	movs	r3, #1
    }
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80034d2:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    }
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	019b      	lsls	r3, r3, #6
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	3308      	adds	r3, #8
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
    }
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	4613      	mov	r3, r2
 800351a:	019b      	lsls	r3, r3, #6
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	3308      	adds	r3, #8
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
    }
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800353a:	2301      	movs	r3, #1
    }
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003550:	2310      	movs	r3, #16
    }
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	3308      	adds	r3, #8
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4413      	add	r3, r2
    }
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	3308      	adds	r3, #8
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
    }
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68d2      	ldr	r2, [r2, #12]
 80035b2:	1052      	asrs	r2, r2, #1
 80035b4:	1899      	adds	r1, r3, r2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	e00a      	b.n	80035de <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68d2      	ldr	r2, [r2, #12]
 80035d0:	1052      	asrs	r2, r2, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6892      	ldr	r2, [r2, #8]
 80035da:	4413      	add	r3, r2
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4608      	mov	r0, r1
 80035e0:	4798      	blx	r3
    }
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d010      	beq.n	800361c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d107      	bne.n	8003612 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003612:	2300      	movs	r3, #0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d001      	beq.n	800361c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800361c:	2300      	movs	r3, #0
    }
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_GLOBAL__sub_I_touchgfx_init>:
 800362a:	b580      	push	{r7, lr}
 800362c:	af00      	add	r7, sp, #0
 800362e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003632:	2001      	movs	r0, #1
 8003634:	f7ff fe74 	bl	8003320 <_Z41__static_initialization_and_destruction_0ii>
 8003638:	bd80      	pop	{r7, pc}

0800363a <_GLOBAL__sub_D_touchgfx_init>:
 800363a:	b580      	push	{r7, lr}
 800363c:	af00      	add	r7, sp, #0
 800363e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003642:	2000      	movs	r0, #0
 8003644:	f7ff fe6c 	bl	8003320 <_Z41__static_initialization_and_destruction_0ii>
 8003648:	bd80      	pop	{r7, pc}

0800364a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	331c      	adds	r3, #28
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
    }
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	460b      	mov	r3, r1
 8003670:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003694:	3301      	adds	r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d105      	bne.n	80036d0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e027      	b.n	8003720 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d123      	bne.n	800371e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d014      	beq.n	8003708 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3390      	adds	r3, #144	; 0x90
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d008      	beq.n	8003708 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80036f6:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f083 0301 	eor.w	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8003716:	2301      	movs	r3, #1
 8003718:	e002      	b.n	8003720 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800371e:	2300      	movs	r3, #0
    }
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	2000df6a 	.word	0x2000df6a

0800372c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <__NVIC_EnableIRQ>:
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	2b00      	cmp	r3, #0
 8003758:	db0b      	blt.n	8003772 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	f003 021f 	and.w	r2, r3, #31
 8003760:	4907      	ldr	r1, [pc, #28]	; (8003780 <__NVIC_EnableIRQ+0x38>)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2001      	movs	r0, #1
 800376a:	fa00 f202 	lsl.w	r2, r0, r2
 800376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	e000e100 	.word	0xe000e100

08003784 <__NVIC_DisableIRQ>:
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	2b00      	cmp	r3, #0
 8003794:	db12      	blt.n	80037bc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	490a      	ldr	r1, [pc, #40]	; (80037c8 <__NVIC_DisableIRQ+0x44>)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2001      	movs	r0, #1
 80037a6:	fa00 f202 	lsl.w	r2, r0, r2
 80037aa:	3320      	adds	r3, #32
 80037ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80037b0:	f3bf 8f4f 	dsb	sy
}
 80037b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037b6:	f3bf 8f6f 	isb	sy
}
 80037ba:	bf00      	nop
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000e100 	.word	0xe000e100

080037cc <__NVIC_SetPriority>:
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	db0a      	blt.n	80037f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	490c      	ldr	r1, [pc, #48]	; (8003818 <__NVIC_SetPriority+0x4c>)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	0112      	lsls	r2, r2, #4
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	440b      	add	r3, r1
 80037f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037f4:	e00a      	b.n	800380c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4908      	ldr	r1, [pc, #32]	; (800381c <__NVIC_SetPriority+0x50>)
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	3b04      	subs	r3, #4
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	440b      	add	r3, r1
 800380a:	761a      	strb	r2, [r3, #24]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000e100 	.word	0xe000e100
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003826:	4b21      	ldr	r3, [pc, #132]	; (80038ac <SCB_CleanInvalidateDCache+0x8c>)
 8003828:	2200      	movs	r2, #0
 800382a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800382e:	f3bf 8f4f 	dsb	sy
}
 8003832:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <SCB_CleanInvalidateDCache+0x8c>)
 8003836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800383a:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	0b5b      	lsrs	r3, r3, #13
 8003840:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003844:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800384e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003858:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800385e:	4913      	ldr	r1, [pc, #76]	; (80038ac <SCB_CleanInvalidateDCache+0x8c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1e5a      	subs	r2, r3, #1
 800386a:	60ba      	str	r2, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d000      	beq.n	800387c <SCB_CleanInvalidateDCache+0x5c>
      do {
 800387a:	e7e9      	b.n	8003850 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e5a      	subs	r2, r3, #1
 8003880:	60fa      	str	r2, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d000      	beq.n	8003892 <SCB_CleanInvalidateDCache+0x72>
    do {
 8003890:	e7d9      	b.n	8003846 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003892:	f3bf 8f4f 	dsb	sy
}
 8003896:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003898:	f3bf 8f6f 	isb	sy
}
 800389c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80038b0:	b5b0      	push	{r4, r5, r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f00a fa9f 	bl	800ddfe <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80038c0:	687d      	ldr	r5, [r7, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	335c      	adds	r3, #92	; 0x5c
 80038c8:	681c      	ldr	r4, [r3, #0]
 80038ca:	f00d f86b 	bl	80109a4 <_ZN8touchgfx11Application11getInstanceEv>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4619      	mov	r1, r3
 80038d2:	4628      	mov	r0, r5
 80038d4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	490d      	ldr	r1, [pc, #52]	; (8003910 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ff26 	bl	800372c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2101      	movs	r1, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fee1 	bl	80036ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3380      	adds	r3, #128	; 0x80
 80038f2:	681c      	ldr	r4, [r3, #0]
 80038f4:	2300      	movs	r3, #0
 80038f6:	2200      	movs	r2, #0
 80038f8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80038fc:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff feaf 	bl	8003666 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bdb0      	pop	{r4, r5, r7, pc}
 8003910:	08001fdd 	.word	0x08001fdd

08003914 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800391c:	2109      	movs	r1, #9
 800391e:	205a      	movs	r0, #90	; 0x5a
 8003920:	f7ff ff54 	bl	80037cc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8003924:	2109      	movs	r1, #9
 8003926:	2058      	movs	r0, #88	; 0x58
 8003928:	f7ff ff50 	bl	80037cc <__NVIC_SetPriority>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800393c:	205a      	movs	r0, #90	; 0x5a
 800393e:	f7ff ff03 	bl	8003748 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8003942:	2058      	movs	r0, #88	; 0x58
 8003944:	f7ff ff00 	bl	8003748 <__NVIC_EnableIRQ>
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003958:	205a      	movs	r0, #90	; 0x5a
 800395a:	f7ff ff13 	bl	8003784 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800395e:	2058      	movs	r0, #88	; 0x58
 8003960:	f7ff ff10 	bl	8003784 <__NVIC_DisableIRQ>
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003986:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	b29b      	uxth	r3, r3
 800398e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800399a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6353      	str	r3, [r2, #52]	; 0x34
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40016800 	.word	0x40016800
 80039c0:	200011b4 	.word	0x200011b4
 80039c4:	200011b6 	.word	0x200011b6

080039c8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f00a f9fa 	bl	800ddcc <_ZN8touchgfx3HAL10beginFrameEv>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f00a f9f9 	bl	800dde4 <_ZN8touchgfx3HAL8endFrameEv>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40016884 	.word	0x40016884

08003a18 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8003a22:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40016884 	.word	0x40016884
 8003a40:	40016800 	.word	0x40016800

08003a44 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f00a f987 	bl	800dd66 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 8003a6e:	f7ff fed7 	bl	8003820 <SCB_CleanInvalidateDCache>
    }
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	f00a face 	bl	800e036 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003a9a:	4603      	mov	r3, r0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8003aac:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8003ac2:	89fa      	ldrh	r2, [r7, #14]
 8003ac4:	89bb      	ldrh	r3, [r7, #12]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d304      	bcc.n	8003ad4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8003aca:	89fa      	ldrh	r2, [r7, #14]
 8003acc:	89bb      	ldrh	r3, [r7, #12]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	e000      	b.n	8003ad6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40016800 	.word	0x40016800

08003ae8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8003b06:	f7ff fe8b 	bl	8003820 <SCB_CleanInvalidateDCache>
    }
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8003b36:	f7ff fe73 	bl	8003820 <SCB_CleanInvalidateDCache>
    }
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_LTDC_LineEventCallback+0x74>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	4a1a      	ldr	r2, [pc, #104]	; (8003bc0 <HAL_LTDC_LineEventCallback+0x78>)
 8003b56:	8812      	ldrh	r2, [r2, #0]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d017      	beq.n	8003b96 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003b66:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <HAL_LTDC_LineEventCallback+0x7c>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f003 f8e1 	bl	8006d34 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003b72:	f7fe fb25 	bl	80021c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8003b76:	4603      	mov	r3, r0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fd84 	bl	8003686 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003b7e:	f7fe fa05 	bl	8001f8c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003b82:	f7fe fb1d 	bl	80021c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f00a ff15 	bl	800e9b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7fd ff82 	bl	8001a98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003b94:	e00e      	b.n	8003bb4 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_LTDC_LineEventCallback+0x78>)
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f003 f8c9 	bl	8006d34 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f7fd ff83 	bl	8001aae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003ba8:	f7fe fb0a 	bl	80021c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8003bac:	4603      	mov	r3, r0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fd4b 	bl	800364a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40016800 	.word	0x40016800
 8003bc0:	200011b4 	.word	0x200011b4
 8003bc4:	200011b6 	.word	0x200011b6

08003bc8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003bd4:	887b      	ldrh	r3, [r7, #2]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d010      	beq.n	8003bfc <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	dc13      	bgt.n	8003c06 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d005      	beq.n	8003bf2 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8003be6:	e00e      	b.n	8003c06 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::TYPOGRAPHY_00:
        // digital_7_200_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003be8:	f000 fff0 	bl	8004bcc <_ZN17TypedTextDatabase8getFontsEv>
 8003bec:	4603      	mov	r3, r0
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	e00a      	b.n	8003c08 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::TYPOGRAPHY_01:
        // digital_7_400_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003bf2:	f000 ffeb 	bl	8004bcc <_ZN17TypedTextDatabase8getFontsEv>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	e005      	b.n	8003c08 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::TYPOGRAPHY_02:
        // digital_7_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003bfc:	f000 ffe6 	bl	8004bcc <_ZN17TypedTextDatabase8getFontsEv>
 8003c00:	4603      	mov	r3, r0
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	e000      	b.n	8003c08 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8003c06:	2300      	movs	r3, #0
    }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003c14:	4b02      	ldr	r3, [pc, #8]	; (8003c20 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	0801da64 	.word	0x0801da64

08003c24 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003c28:	2302      	movs	r3, #2
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
    {
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	601a      	str	r2, [r3, #0]
    }
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	0801db50 	.word	0x0801db50

08003c54 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
    }
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ffe9 	bl	8003c34 <_ZN8touchgfx4FontD1Ev>
 8003c62:	2110      	movs	r1, #16
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f017 fe7e 	bl	801b966 <_ZdlPvj>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e010      	b.n	8003cac <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3308      	adds	r3, #8
 8003c98:	681c      	ldr	r4, [r3, #0]
 8003c9a:	f107 030f 	add.w	r3, r7, #15
 8003c9e:	f107 0210 	add.w	r2, r7, #16
 8003ca2:	8879      	ldrh	r1, [r7, #2]
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	47a0      	blx	r4
 8003ca8:	6178      	str	r0, [r7, #20]
        return glyph;
 8003caa:	697b      	ldr	r3, [r7, #20]
    }
 8003cac:	4618      	mov	r0, r3
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd90      	pop	{r4, r7, pc}

08003cb4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	895b      	ldrh	r3, [r3, #10]
    }
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	899b      	ldrh	r3, [r3, #12]
    }
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	889b      	ldrh	r3, [r3, #4]
    }
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	889a      	ldrh	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	799b      	ldrb	r3, [r3, #6]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	4413      	add	r3, r2
 8003d10:	b29b      	uxth	r3, r3
    }
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	79db      	ldrb	r3, [r3, #7]
 8003d2a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003d2e:	b2db      	uxtb	r3, r3
    }
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	79db      	ldrb	r3, [r3, #7]
 8003d48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d4c:	b2db      	uxtb	r3, r3
    }
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff61 	bl	8003c34 <_ZN8touchgfx4FontD1Ev>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	0801eeac 	.word	0x0801eeac

08003d80 <_ZN8touchgfx9ConstFontD0Ev>:
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ffe7 	bl	8003d5c <_ZN8touchgfx9ConstFontD1Ev>
 8003d8e:	2118      	movs	r1, #24
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f017 fde8 	bl	801b966 <_ZdlPvj>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff ffd3 	bl	8003d5c <_ZN8touchgfx9ConstFontD1Ev>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	0801daec 	.word	0x0801daec

08003dc4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ffe7 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003dd2:	2128      	movs	r1, #40	; 0x28
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f017 fdc6 	bl	801b966 <_ZdlPvj>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
    {
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
    }
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	0801da94 	.word	0x0801da94

08003e04 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    }
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ffe9 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
 8003e12:	2108      	movs	r1, #8
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f017 fda6 	bl	801b966 <_ZdlPvj>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8003e44:	4a07      	ldr	r2, [pc, #28]	; (8003e64 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	721a      	strb	r2, [r3, #8]
    {
    }
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	0801dac8 	.word	0x0801dac8

08003e68 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
    {
 8003e70:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]
    }
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	0801dac8 	.word	0x0801dac8

08003e88 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
    }
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ffe9 	bl	8003e68 <_ZN8touchgfx10TransitionD1Ev>
 8003e96:	210c      	movs	r1, #12
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f017 fd64 	bl	801b966 <_ZdlPvj>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
    {
    }
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    {
    }
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
    {
    }
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8003eec:	f00c fd5a 	bl	80109a4 <_ZN8touchgfx11Application11getInstanceEv>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	3230      	adds	r2, #48	; 0x30
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	4790      	blx	r2
    }
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	605a      	str	r2, [r3, #4]
    }
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f00c fd5c 	bl	80109e8 <_ZN8touchgfx11ApplicationC1Ev>
 8003f30:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8003f4a:	6013      	str	r3, [r2, #0]
    }
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	0801d8e4 	.word	0x0801d8e4
 8003f5c:	2000dfb8 	.word	0x2000dfb8

08003f60 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	601a      	str	r2, [r3, #0]
    }
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	721a      	strb	r2, [r3, #8]
    }
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
    }
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd4:	e002      	b.n	8003fdc <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003fd6:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
    }
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	2000df6c 	.word	0x2000df6c

08003fec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/mainView.hpp>
#include <gui/main_screen/mainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff90 	bl	8003f20 <_ZN8touchgfx14MVPApplicationC1Ev>
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f89f 	bl	8004150 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004022:	f7fe f8cd 	bl	80021c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8004026:	4603      	mov	r3, r0
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	3208      	adds	r2, #8
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004034:	2000      	movs	r0, #0
 8004036:	f000 fd51 	bl	8004adc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800403a:	f7ff ffbb 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800403e:	4603      	mov	r3, r0
 8004040:	4618      	mov	r0, r3
 8004042:	f012 fce0 	bl	8016a06 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	0801d888 	.word	0x0801d888

08004054 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ffe9 	bl	8004054 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	3308      	adds	r3, #8
 8004090:	3208      	adds	r2, #8
 8004092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004096:	e883 0003 	stmia.w	r3, {r0, r1}
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <_ZN23FrontendApplicationBase27gotostartScreenNoTransitionEv>:
 */

// start

void FrontendApplicationBase::gotostartScreenNoTransition()
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotostartScreenNoTransitionImpl);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <_ZN23FrontendApplicationBase27gotostartScreenNoTransitionEv+0x50>)
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	f107 0008 	add.w	r0, r7, #8
 80040be:	f107 0318 	add.w	r3, r7, #24
 80040c2:	cb0c      	ldmia	r3, {r2, r3}
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	f000 f85f 	bl	8004188 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	4619      	mov	r1, r3
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7ff ffcb 	bl	800406c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff f968 	bl	80033b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80040ec:	bf00      	nop
 80040ee:	3724      	adds	r7, #36	; 0x24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd90      	pop	{r4, r7, pc}
 80040f4:	080040f9 	.word	0x080040f9

080040f8 <_ZN23FrontendApplicationBase31gotostartScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotostartScreenNoTransitionImpl()
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<startView, startPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <_ZN23FrontendApplicationBase31gotostartScreenNoTransitionImplEv+0x30>)
 8004118:	4804      	ldr	r0, [pc, #16]	; (800412c <_ZN23FrontendApplicationBase31gotostartScreenNoTransitionImplEv+0x34>)
 800411a:	f000 f867 	bl	80041ec <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	2000dfac 	.word	0x2000dfac
 800412c:	2000dfa8 	.word	0x2000dfa8

08004130 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	0801d928 	.word	0x0801d928

08004150 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ffe8 	bl	8004130 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004160:	4a08      	ldr	r2, [pc, #32]	; (8004184 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	60da      	str	r2, [r3, #12]
    }
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	0801d8cc 	.word	0x0801d8cc

08004188 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	4639      	mov	r1, r7
 8004194:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ffc8 	bl	8004130 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80041a0:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	605a      	str	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3308      	adds	r3, #8
 80041b0:	463a      	mov	r2, r7
 80041b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041b6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	0801d8cc 	.word	0x0801d8cc

080041c8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fe32 	bl	8003e3c <_ZN8touchgfx10TransitionC1Ev>
 80041d8:	4a03      	ldr	r2, [pc, #12]	; (80041e8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	0801daa4 	.word	0x0801daa4

080041ec <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b08f      	sub	sp, #60	; 0x3c
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3320      	adds	r3, #32
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4610      	mov	r0, r2
 800420a:	4798      	blx	r3
 800420c:	4603      	mov	r3, r0
 800420e:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8004212:	d205      	bcs.n	8004220 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004214:	4b7e      	ldr	r3, [pc, #504]	; (8004410 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004216:	4a7f      	ldr	r2, [pc, #508]	; (8004414 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004218:	21a3      	movs	r1, #163	; 0xa3
 800421a:	487f      	ldr	r0, [pc, #508]	; (8004418 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800421c:	f017 fbd2 	bl	801b9c4 <__assert_func>
 8004220:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3320      	adds	r3, #32
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4610      	mov	r0, r2
 8004232:	4798      	blx	r3
 8004234:	4603      	mov	r3, r0
 8004236:	2b0f      	cmp	r3, #15
 8004238:	d805      	bhi.n	8004246 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800423a:	4b78      	ldr	r3, [pc, #480]	; (800441c <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800423c:	4a75      	ldr	r2, [pc, #468]	; (8004414 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800423e:	21a4      	movs	r1, #164	; 0xa4
 8004240:	4875      	ldr	r0, [pc, #468]	; (8004418 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004242:	f017 fbbf 	bl	801b9c4 <__assert_func>
 8004246:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3320      	adds	r3, #32
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4610      	mov	r0, r2
 8004258:	4798      	blx	r3
 800425a:	4603      	mov	r3, r0
 800425c:	2b0b      	cmp	r3, #11
 800425e:	d805      	bhi.n	800426c <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004260:	4b6f      	ldr	r3, [pc, #444]	; (8004420 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004262:	4a6c      	ldr	r2, [pc, #432]	; (8004414 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004264:	21a5      	movs	r1, #165	; 0xa5
 8004266:	486c      	ldr	r0, [pc, #432]	; (8004418 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004268:	f017 fbac 	bl	801b9c4 <__assert_func>
 800426c:	bf00      	nop
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800427a:	f00c fb93 	bl	80109a4 <_ZN8touchgfx11Application11getInstanceEv>
 800427e:	4603      	mov	r3, r0
 8004280:	4618      	mov	r0, r3
 8004282:	f00c fb95 	bl	80109b0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4610      	mov	r0, r2
 800429e:	4798      	blx	r3
    if (*currentTrans)
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4610      	mov	r0, r2
 80042b6:	4798      	blx	r3
    if (*currentScreen)
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4610      	mov	r0, r2
 80042d0:	4798      	blx	r3
    if (*currentPresenter)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3304      	adds	r3, #4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4610      	mov	r0, r2
 80042ea:	4798      	blx	r3
    if (*currentScreen)
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4610      	mov	r0, r2
 8004302:	4798      	blx	r3
    if (*currentPresenter)
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3308      	adds	r3, #8
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4610      	mov	r0, r2
 800431c:	4798      	blx	r3
}
 800431e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f87c 	bl	8004424 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800432c:	4603      	mov	r3, r0
 800432e:	4619      	mov	r1, r3
 8004330:	200c      	movs	r0, #12
 8004332:	f7ff fd77 	bl	8003e24 <_ZnwjPv>
 8004336:	4604      	mov	r4, r0
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff ff45 	bl	80041c8 <_ZN8touchgfx12NoTransitionC1Ev>
 800433e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f87f 	bl	800444a <_ZN8touchgfx17AbstractPartition2atI9startViewEERT_t>
 800434c:	4603      	mov	r3, r0
 800434e:	4619      	mov	r1, r3
 8004350:	f44f 708a 	mov.w	r0, #276	; 0x114
 8004354:	f7ff fd66 	bl	8003e24 <_ZnwjPv>
 8004358:	4604      	mov	r4, r0
 800435a:	4620      	mov	r0, r4
 800435c:	f001 fbee 	bl	8005b3c <_ZN9startViewC1Ev>
 8004360:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f881 	bl	8004470 <_ZN8touchgfx17AbstractPartition2atI14startPresenterEERT_t>
 800436e:	4603      	mov	r3, r0
 8004370:	4619      	mov	r1, r3
 8004372:	2010      	movs	r0, #16
 8004374:	f7ff fd56 	bl	8003e24 <_ZnwjPv>
 8004378:	4604      	mov	r4, r0
 800437a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437c:	4620      	mov	r0, r4
 800437e:	f001 fb85 	bl	8005a8c <_ZN14startPresenterC1ER9startView>
 8004382:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004388:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	3304      	adds	r3, #4
 80043a0:	e000      	b.n	80043a4 <_ZN8touchgfx14makeTransitionI9startView14startPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80043a2:	2300      	movs	r3, #0
 80043a4:	4619      	mov	r1, r3
 80043a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80043a8:	f7ff fdda 	bl	8003f60 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	3304      	adds	r3, #4
 80043b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fdef 	bl	8003f96 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f86a 	bl	8004496 <_ZN8touchgfx4ViewI14startPresenterE4bindERS1_>
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	330c      	adds	r3, #12
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69f8      	ldr	r0, [r7, #28]
 80043d8:	4798      	blx	r3
    newPresenter->activate();
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69b8      	ldr	r0, [r7, #24]
 80043e2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	69f8      	ldr	r0, [r7, #28]
 80043e8:	f00d ff09 	bl	80121fe <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3310      	adds	r3, #16
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6978      	ldr	r0, [r7, #20]
 80043f6:	4798      	blx	r3
    newTransition->invalidate();
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6978      	ldr	r0, [r7, #20]
 8004402:	4798      	blx	r3
}
 8004404:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004408:	4618      	mov	r0, r3
 800440a:	373c      	adds	r7, #60	; 0x3c
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}
 8004410:	0801ce88 	.word	0x0801ce88
 8004414:	0801cf18 	.word	0x0801cf18
 8004418:	0801d018 	.word	0x0801d018
 800441c:	0801d060 	.word	0x0801d060
 8004420:	0801d104 	.word	0x0801d104

08004424 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3324      	adds	r3, #36	; 0x24
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	887a      	ldrh	r2, [r7, #2]
 800443a:	4611      	mov	r1, r2
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
 8004440:	4603      	mov	r3, r0
    }
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <_ZN8touchgfx17AbstractPartition2atI9startViewEERT_t>:
    T& at(const uint16_t index)
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	460b      	mov	r3, r1
 8004454:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3324      	adds	r3, #36	; 0x24
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	4611      	mov	r1, r2
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
 8004466:	4603      	mov	r3, r0
    }
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <_ZN8touchgfx17AbstractPartition2atI14startPresenterEERT_t>:
    T& at(const uint16_t index)
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3324      	adds	r3, #36	; 0x24
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	887a      	ldrh	r2, [r7, #2]
 8004486:	4611      	mov	r1, r2
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	4798      	blx	r3
 800448c:	4603      	mov	r3, r0
    }
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <_ZN8touchgfx4ViewI14startPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <_ZN8touchgfx12NoTransitionD1Ev>:
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fccf 	bl	8003e68 <_ZN8touchgfx10TransitionD1Ev>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	0801daa4 	.word	0x0801daa4

080044d8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ffe7 	bl	80044b4 <_ZN8touchgfx12NoTransitionD1Ev>
 80044e6:	210c      	movs	r1, #12
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f017 fa3c 	bl	801b966 <_ZdlPvj>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
    }
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004528:	b580      	push	{r7, lr}
 800452a:	b08c      	sub	sp, #48	; 0x30
 800452c:	af08      	add	r7, sp, #32
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	4611      	mov	r1, r2
 8004534:	461a      	mov	r2, r3
 8004536:	460b      	mov	r3, r1
 8004538:	80fb      	strh	r3, [r7, #6]
 800453a:	4613      	mov	r3, r2
 800453c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	88b9      	ldrh	r1, [r7, #4]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004546:	9306      	str	r3, [sp, #24]
 8004548:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800454a:	9305      	str	r3, [sp, #20]
 800454c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004550:	9304      	str	r3, [sp, #16]
 8004552:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004556:	9303      	str	r3, [sp, #12]
 8004558:	f897 3020 	ldrb.w	r3, [r7, #32]
 800455c:	9302      	str	r3, [sp, #8]
 800455e:	7f3b      	ldrb	r3, [r7, #28]
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	7e3b      	ldrb	r3, [r7, #24]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	460b      	mov	r3, r1
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	f00d fa51 	bl	8011a10 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004578:	619a      	str	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457e:	61da      	str	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004584:	621a      	str	r2, [r3, #32]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800458a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	0801daec 	.word	0x0801daec

0800459c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	889b      	ldrh	r3, [r3, #4]
 80045b0:	0adb      	lsrs	r3, r3, #11
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4413      	add	r3, r2
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80045ce:	b480      	push	{r7}
 80045d0:	b089      	sub	sp, #36	; 0x24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	460b      	mov	r3, r1
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7b1b      	ldrb	r3, [r3, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e030      	b.n	8004650 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	7b5b      	ldrb	r3, [r3, #13]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	b21b      	sxth	r3, r3
 80045fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004602:	b219      	sxth	r1, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	7adb      	ldrb	r3, [r3, #11]
 8004608:	b21b      	sxth	r3, r3
 800460a:	430b      	orrs	r3, r1
 800460c:	b21b      	sxth	r3, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7b1b      	ldrb	r3, [r3, #12]
 800461a:	837b      	strh	r3, [r7, #26]
 800461c:	8b7b      	ldrh	r3, [r7, #26]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d015      	beq.n	800464e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	897a      	ldrh	r2, [r7, #10]
 8004628:	429a      	cmp	r2, r3
 800462a:	d103      	bne.n	8004634 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004632:	e00d      	b.n	8004650 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	897a      	ldrh	r2, [r7, #10]
 800463a:	429a      	cmp	r2, r3
 800463c:	d306      	bcc.n	800464c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800463e:	8b7b      	ldrh	r3, [r7, #26]
 8004640:	3b01      	subs	r3, #1
 8004642:	837b      	strh	r3, [r7, #26]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	3304      	adds	r3, #4
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	e7e7      	b.n	800461c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800464c:	bf00      	nop
        }
    }
    return 0;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3724      	adds	r7, #36	; 0x24
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <__tcf_0>:

touchgfx::GeneratedFont& getFont_digital_7_200_4bpp();

touchgfx::GeneratedFont& getFont_digital_7_200_4bpp()
{
    static touchgfx::GeneratedFont digital_7_200_4bpp(glyphs_digital_7_200_4bpp, 4, 200, 0, 4, 1, 0, 0, unicodes_digital_7_200_4bpp, kerning_digital_7_200_4bpp, 63, 0, 0, 0);
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__tcf_0+0xc>)
 8004662:	f7ff fb9d 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004666:	bd80      	pop	{r7, pc}
 8004668:	200011b8 	.word	0x200011b8

0800466c <_Z26getFont_digital_7_200_4bppv>:
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08c      	sub	sp, #48	; 0x30
 8004670:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont digital_7_200_4bpp(glyphs_digital_7_200_4bpp, 4, 200, 0, 4, 1, 0, 0, unicodes_digital_7_200_4bpp, kerning_digital_7_200_4bpp, 63, 0, 0, 0);
 8004672:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <_Z26getFont_digital_7_200_4bppv+0x84>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	f3bf 8f5b 	dmb	ish
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02c      	beq.n	80046e8 <_Z26getFont_digital_7_200_4bppv+0x7c>
 800468e:	4818      	ldr	r0, [pc, #96]	; (80046f0 <_Z26getFont_digital_7_200_4bppv+0x84>)
 8004690:	f017 f96b 	bl	801b96a <__cxa_guard_acquire>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d021      	beq.n	80046e8 <_Z26getFont_digital_7_200_4bppv+0x7c>
 80046a4:	2300      	movs	r3, #0
 80046a6:	930a      	str	r3, [sp, #40]	; 0x28
 80046a8:	2300      	movs	r3, #0
 80046aa:	9309      	str	r3, [sp, #36]	; 0x24
 80046ac:	2300      	movs	r3, #0
 80046ae:	9308      	str	r3, [sp, #32]
 80046b0:	233f      	movs	r3, #63	; 0x3f
 80046b2:	9307      	str	r3, [sp, #28]
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <_Z26getFont_digital_7_200_4bppv+0x88>)
 80046b6:	9306      	str	r3, [sp, #24]
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <_Z26getFont_digital_7_200_4bppv+0x8c>)
 80046ba:	9305      	str	r3, [sp, #20]
 80046bc:	2300      	movs	r3, #0
 80046be:	9304      	str	r3, [sp, #16]
 80046c0:	2300      	movs	r3, #0
 80046c2:	9303      	str	r3, [sp, #12]
 80046c4:	2301      	movs	r3, #1
 80046c6:	9302      	str	r3, [sp, #8]
 80046c8:	2304      	movs	r3, #4
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	2300      	movs	r3, #0
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	23c8      	movs	r3, #200	; 0xc8
 80046d2:	2204      	movs	r2, #4
 80046d4:	4909      	ldr	r1, [pc, #36]	; (80046fc <_Z26getFont_digital_7_200_4bppv+0x90>)
 80046d6:	480a      	ldr	r0, [pc, #40]	; (8004700 <_Z26getFont_digital_7_200_4bppv+0x94>)
 80046d8:	f7ff ff26 	bl	8004528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80046dc:	4804      	ldr	r0, [pc, #16]	; (80046f0 <_Z26getFont_digital_7_200_4bppv+0x84>)
 80046de:	f017 f950 	bl	801b982 <__cxa_guard_release>
 80046e2:	4808      	ldr	r0, [pc, #32]	; (8004704 <_Z26getFont_digital_7_200_4bppv+0x98>)
 80046e4:	f017 f98c 	bl	801ba00 <atexit>
    return digital_7_200_4bpp;
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <_Z26getFont_digital_7_200_4bppv+0x94>)
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	200011e0 	.word	0x200011e0
 80046f4:	0802e508 	.word	0x0802e508
 80046f8:	0801db3c 	.word	0x0801db3c
 80046fc:	0802e3f0 	.word	0x0802e3f0
 8004700:	200011b8 	.word	0x200011b8
 8004704:	0800465d 	.word	0x0800465d

08004708 <__tcf_0>:

touchgfx::GeneratedFont& getFont_digital_7_20_4bpp();

touchgfx::GeneratedFont& getFont_digital_7_20_4bpp()
{
    static touchgfx::GeneratedFont digital_7_20_4bpp(glyphs_digital_7_20_4bpp, 14, 20, 0, 4, 1, 0, 0, unicodes_digital_7_20_4bpp, kerning_digital_7_20_4bpp, 63, 0, 0, 0);
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
 800470c:	4801      	ldr	r0, [pc, #4]	; (8004714 <__tcf_0+0xc>)
 800470e:	f7ff fb47 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004712:	bd80      	pop	{r7, pc}
 8004714:	200011e4 	.word	0x200011e4

08004718 <_Z25getFont_digital_7_20_4bppv>:
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08c      	sub	sp, #48	; 0x30
 800471c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont digital_7_20_4bpp(glyphs_digital_7_20_4bpp, 14, 20, 0, 4, 1, 0, 0, unicodes_digital_7_20_4bpp, kerning_digital_7_20_4bpp, 63, 0, 0, 0);
 800471e:	4b1f      	ldr	r3, [pc, #124]	; (800479c <_Z25getFont_digital_7_20_4bppv+0x84>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f3bf 8f5b 	dmb	ish
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d02c      	beq.n	8004794 <_Z25getFont_digital_7_20_4bppv+0x7c>
 800473a:	4818      	ldr	r0, [pc, #96]	; (800479c <_Z25getFont_digital_7_20_4bppv+0x84>)
 800473c:	f017 f915 	bl	801b96a <__cxa_guard_acquire>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d021      	beq.n	8004794 <_Z25getFont_digital_7_20_4bppv+0x7c>
 8004750:	2300      	movs	r3, #0
 8004752:	930a      	str	r3, [sp, #40]	; 0x28
 8004754:	2300      	movs	r3, #0
 8004756:	9309      	str	r3, [sp, #36]	; 0x24
 8004758:	2300      	movs	r3, #0
 800475a:	9308      	str	r3, [sp, #32]
 800475c:	233f      	movs	r3, #63	; 0x3f
 800475e:	9307      	str	r3, [sp, #28]
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <_Z25getFont_digital_7_20_4bppv+0x88>)
 8004762:	9306      	str	r3, [sp, #24]
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <_Z25getFont_digital_7_20_4bppv+0x8c>)
 8004766:	9305      	str	r3, [sp, #20]
 8004768:	2300      	movs	r3, #0
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	2300      	movs	r3, #0
 800476e:	9303      	str	r3, [sp, #12]
 8004770:	2301      	movs	r3, #1
 8004772:	9302      	str	r3, [sp, #8]
 8004774:	2304      	movs	r3, #4
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	2300      	movs	r3, #0
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2314      	movs	r3, #20
 800477e:	220e      	movs	r2, #14
 8004780:	4909      	ldr	r1, [pc, #36]	; (80047a8 <_Z25getFont_digital_7_20_4bppv+0x90>)
 8004782:	480a      	ldr	r0, [pc, #40]	; (80047ac <_Z25getFont_digital_7_20_4bppv+0x94>)
 8004784:	f7ff fed0 	bl	8004528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004788:	4804      	ldr	r0, [pc, #16]	; (800479c <_Z25getFont_digital_7_20_4bppv+0x84>)
 800478a:	f017 f8fa 	bl	801b982 <__cxa_guard_release>
 800478e:	4808      	ldr	r0, [pc, #32]	; (80047b0 <_Z25getFont_digital_7_20_4bppv+0x98>)
 8004790:	f017 f936 	bl	801ba00 <atexit>
    return digital_7_20_4bpp;
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <_Z25getFont_digital_7_20_4bppv+0x94>)
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	2000120c 	.word	0x2000120c
 80047a0:	0802e50c 	.word	0x0802e50c
 80047a4:	0801db40 	.word	0x0801db40
 80047a8:	0802e428 	.word	0x0802e428
 80047ac:	200011e4 	.word	0x200011e4
 80047b0:	08004709 	.word	0x08004709

080047b4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_digital_7_400_4bpp();

touchgfx::GeneratedFont& getFont_digital_7_400_4bpp()
{
    static touchgfx::GeneratedFont digital_7_400_4bpp(glyphs_digital_7_400_4bpp, 2, 400, 0, 4, 1, 0, 0, unicodes_digital_7_400_4bpp, kerning_digital_7_400_4bpp, 63, 0, 0, 0);
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	4801      	ldr	r0, [pc, #4]	; (80047c0 <__tcf_0+0xc>)
 80047ba:	f7ff faf1 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20001210 	.word	0x20001210

080047c4 <_Z26getFont_digital_7_400_4bppv>:
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	; 0x30
 80047c8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont digital_7_400_4bpp(glyphs_digital_7_400_4bpp, 2, 400, 0, 4, 1, 0, 0, unicodes_digital_7_400_4bpp, kerning_digital_7_400_4bpp, 63, 0, 0, 0);
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <_Z26getFont_digital_7_400_4bppv+0x88>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f3bf 8f5b 	dmb	ish
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d02d      	beq.n	8004842 <_Z26getFont_digital_7_400_4bppv+0x7e>
 80047e6:	4819      	ldr	r0, [pc, #100]	; (800484c <_Z26getFont_digital_7_400_4bppv+0x88>)
 80047e8:	f017 f8bf 	bl	801b96a <__cxa_guard_acquire>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bf14      	ite	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	2300      	moveq	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d022      	beq.n	8004842 <_Z26getFont_digital_7_400_4bppv+0x7e>
 80047fc:	2300      	movs	r3, #0
 80047fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004800:	2300      	movs	r3, #0
 8004802:	9309      	str	r3, [sp, #36]	; 0x24
 8004804:	2300      	movs	r3, #0
 8004806:	9308      	str	r3, [sp, #32]
 8004808:	233f      	movs	r3, #63	; 0x3f
 800480a:	9307      	str	r3, [sp, #28]
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <_Z26getFont_digital_7_400_4bppv+0x8c>)
 800480e:	9306      	str	r3, [sp, #24]
 8004810:	4b10      	ldr	r3, [pc, #64]	; (8004854 <_Z26getFont_digital_7_400_4bppv+0x90>)
 8004812:	9305      	str	r3, [sp, #20]
 8004814:	2300      	movs	r3, #0
 8004816:	9304      	str	r3, [sp, #16]
 8004818:	2300      	movs	r3, #0
 800481a:	9303      	str	r3, [sp, #12]
 800481c:	2301      	movs	r3, #1
 800481e:	9302      	str	r3, [sp, #8]
 8004820:	2304      	movs	r3, #4
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	2300      	movs	r3, #0
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800482c:	2202      	movs	r2, #2
 800482e:	490a      	ldr	r1, [pc, #40]	; (8004858 <_Z26getFont_digital_7_400_4bppv+0x94>)
 8004830:	480a      	ldr	r0, [pc, #40]	; (800485c <_Z26getFont_digital_7_400_4bppv+0x98>)
 8004832:	f7ff fe79 	bl	8004528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004836:	4805      	ldr	r0, [pc, #20]	; (800484c <_Z26getFont_digital_7_400_4bppv+0x88>)
 8004838:	f017 f8a3 	bl	801b982 <__cxa_guard_release>
 800483c:	4808      	ldr	r0, [pc, #32]	; (8004860 <_Z26getFont_digital_7_400_4bppv+0x9c>)
 800483e:	f017 f8df 	bl	801ba00 <atexit>
    return digital_7_400_4bpp;
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <_Z26getFont_digital_7_400_4bppv+0x98>)
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20001238 	.word	0x20001238
 8004850:	0802e510 	.word	0x0802e510
 8004854:	0801db44 	.word	0x0801db44
 8004858:	0802e4ec 	.word	0x0802e4ec
 800485c:	20001210 	.word	0x20001210
 8004860:	080047b5 	.word	0x080047b5

08004864 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	460b      	mov	r3, r1
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8004872:	2300      	movs	r3, #0
    }
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004888:	2300      	movs	r3, #0
    }
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800489e:	2300      	movs	r3, #0
    }
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80048ba:	4a07      	ldr	r2, [pc, #28]	; (80048d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6013      	str	r3, [r2, #0]
        fonts = f;
 80048c0:	4a06      	ldr	r2, [pc, #24]	; (80048dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80048c6:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	8013      	strh	r3, [r2, #0]
    }
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	2000dfbc 	.word	0x2000dfbc
 80048dc:	2000dfc4 	.word	0x2000dfc4
 80048e0:	2000dfc0 	.word	0x2000dfc0

080048e4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80048e4:	b40e      	push	{r1, r2, r3}
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80048ee:	f107 0320 	add.w	r3, r7, #32
 80048f2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	2100      	movs	r1, #0
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f00c fea6 	bl	801164c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8004900:	4603      	mov	r3, r0
 8004902:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8004904:	89fb      	ldrh	r3, [r7, #14]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004910:	b003      	add	sp, #12
 8004912:	4770      	bx	lr

08004914 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004914:	b40c      	push	{r2, r3}
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	460b      	mov	r3, r1
 8004920:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004928:	78f9      	ldrb	r1, [r7, #3]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f00c fe8c 	bl	801164c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8004934:	4603      	mov	r3, r0
 8004936:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8004938:	89fb      	ldrh	r3, [r7, #14]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004944:	b002      	add	sp, #8
 8004946:	4770      	bx	lr

08004948 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d016      	beq.n	800498a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	331a      	adds	r3, #26
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	8adb      	ldrh	r3, [r3, #22]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800496a:	4b43      	ldr	r3, [pc, #268]	; (8004a78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800496c:	4a43      	ldr	r2, [pc, #268]	; (8004a7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800496e:	21bf      	movs	r1, #191	; 0xbf
 8004970:	4843      	ldr	r0, [pc, #268]	; (8004a80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8004972:	f017 f827 	bl	801b9c4 <__assert_func>
            return buffer[pos];
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	8a9b      	ldrh	r3, [r3, #20]
 800497a:	461a      	mov	r2, r3
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d06a      	beq.n	8004a66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f00e f997 	bl	8012cc4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	331a      	adds	r3, #26
 800499a:	623b      	str	r3, [r7, #32]
 800499c:	2301      	movs	r3, #1
 800499e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	8adb      	ldrh	r3, [r3, #22]
 80049a4:	8bfa      	ldrh	r2, [r7, #30]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d305      	bcc.n	80049b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80049ac:	4a36      	ldr	r2, [pc, #216]	; (8004a88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80049ae:	21c4      	movs	r1, #196	; 0xc4
 80049b0:	4833      	ldr	r0, [pc, #204]	; (8004a80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80049b2:	f017 f807 	bl	801b9c4 <__assert_func>
            const uint16_t index = pos + offset;
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	8a9a      	ldrh	r2, [r3, #20]
 80049ba:	8bfb      	ldrh	r3, [r7, #30]
 80049bc:	4413      	add	r3, r2
 80049be:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80049c0:	8bbb      	ldrh	r3, [r7, #28]
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	d801      	bhi.n	80049ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80049c6:	8bbb      	ldrh	r3, [r7, #28]
 80049c8:	e001      	b.n	80049ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80049ca:	8bbb      	ldrh	r3, [r7, #28]
 80049cc:	3b0a      	subs	r3, #10
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d4:	f640 123f 	movw	r2, #2367	; 0x93f
 80049d8:	4293      	cmp	r3, r2
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d03f      	beq.n	8004a66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	331a      	adds	r3, #26
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	321a      	adds	r2, #26
 80049ee:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	8ad2      	ldrh	r2, [r2, #22]
 80049f4:	2a00      	cmp	r2, #0
 80049f6:	d105      	bne.n	8004a04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80049f8:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80049fa:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80049fc:	21bf      	movs	r1, #191	; 0xbf
 80049fe:	4820      	ldr	r0, [pc, #128]	; (8004a80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8004a00:	f016 ffe0 	bl	801b9c4 <__assert_func>
            return buffer[pos];
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	8a92      	ldrh	r2, [r2, #20]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	4613      	mov	r3, r2
 8004a14:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	8adb      	ldrh	r3, [r3, #22]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d806      	bhi.n	8004a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8004a20:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8004a22:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8004a26:	4816      	ldr	r0, [pc, #88]	; (8004a80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8004a28:	f016 ffcc 	bl	801b9c4 <__assert_func>
            const uint16_t index = pos + 1;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	8a9b      	ldrh	r3, [r3, #20]
 8004a30:	3301      	adds	r3, #1
 8004a32:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8004a34:	89bb      	ldrh	r3, [r7, #12]
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	d801      	bhi.n	8004a3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8004a3a:	89bb      	ldrh	r3, [r7, #12]
 8004a3c:	e000      	b.n	8004a40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	89f9      	ldrh	r1, [r7, #14]
 8004a44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8004a48:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	331a      	adds	r3, #26
 8004a4e:	61bb      	str	r3, [r7, #24]
 8004a50:	f640 133f 	movw	r3, #2367	; 0x93f
 8004a54:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	8a9b      	ldrh	r3, [r3, #20]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	8afa      	ldrh	r2, [r7, #22]
 8004a60:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8004a64:	bf00      	nop
        }
    }
    return getNextChar();
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f00e f810 	bl	8012a8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004a6c:	4603      	mov	r3, r0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3728      	adds	r7, #40	; 0x28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	0801d1a8 	.word	0x0801d1a8
 8004a7c:	0801d1b4 	.word	0x0801d1b4
 8004a80:	0801d260 	.word	0x0801d260
 8004a84:	0801d2ac 	.word	0x0801d2ac
 8004a88:	0801d2bc 	.word	0x0801d2bc
 8004a8c:	0801d390 	.word	0x0801d390
 8004a90:	0801d39c 	.word	0x0801d39c

08004a94 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f00d ffaf 	bl	8012a00 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b088      	sub	sp, #32
 8004aae:	af02      	add	r7, sp, #8
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	1d38      	adds	r0, r7, #4
 8004ab4:	e880 0006 	stmia.w	r0, {r1, r2}
 8004ab8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8004aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004abe:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004ac0:	1d39      	adds	r1, r7, #4
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f00b faf5 	bl	80100be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004ad4:	bf00      	nop
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d127      	bne.n	8004b40 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8004af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d016      	beq.n	8004b2a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	4a1b      	ldr	r2, [pc, #108]	; (8004b6c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8004b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b04:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8004b10:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4413      	add	r3, r2
 8004b1a:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8004b1c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	4413      	add	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e00a      	b.n	8004b40 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8004b2c:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8004b2e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004b30:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8004b34:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8004b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00d      	beq.n	8004b62 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8004b46:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004b4c:	f000 f83e 	bl	8004bcc <_ZN17TypedTextDatabase8getFontsEv>
 8004b50:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004b52:	f000 f833 	bl	8004bbc <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8004b56:	4603      	mov	r3, r0
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff fea5 	bl	80048ac <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd90      	pop	{r4, r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	2000123c 	.word	0x2000123c
 8004b70:	20001244 	.word	0x20001244
 8004b74:	20001248 	.word	0x20001248
 8004b78:	0802e52c 	.word	0x0802e52c
 8004b7c:	0802e514 	.word	0x0802e514
 8004b80:	0802e56c 	.word	0x0802e56c
 8004b84:	20001240 	.word	0x20001240

08004b88 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004b94:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8004b9a:	6819      	ldr	r1, [r3, #0]
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4413      	add	r3, r2
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	20001244 	.word	0x20001244
 8004bb8:	20001248 	.word	0x20001248

08004bbc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8004bc0:	2306      	movs	r3, #6
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8004bd0:	4b02      	ldr	r3, [pc, #8]	; (8004bdc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	2000124c 	.word	0x2000124c

08004be0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_digital_7_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d113      	bne.n	8004c18 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d10e      	bne.n	8004c18 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_digital_7_200_4bpp()),
 8004bfa:	f7ff fd37 	bl	800466c <_Z26getFont_digital_7_200_4bppv>
 8004bfe:	4603      	mov	r3, r0
};
 8004c00:	4a07      	ldr	r2, [pc, #28]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004c02:	6013      	str	r3, [r2, #0]
    &(getFont_digital_7_400_4bpp()),
 8004c04:	f7ff fdde 	bl	80047c4 <_Z26getFont_digital_7_400_4bppv>
 8004c08:	4603      	mov	r3, r0
};
 8004c0a:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004c0c:	6053      	str	r3, [r2, #4]
    &(getFont_digital_7_20_4bpp())
 8004c0e:	f7ff fd83 	bl	8004718 <_Z25getFont_digital_7_20_4bppv>
 8004c12:	4603      	mov	r3, r0
};
 8004c14:	4a02      	ldr	r2, [pc, #8]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004c16:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	2000124c 	.word	0x2000124c

08004c24 <_GLOBAL__sub_I_touchgfx_fonts>:
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	f7ff ffd7 	bl	8004be0 <_Z41__static_initialization_and_destruction_0ii>
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
        : color(col)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	601a      	str	r2, [r3, #0]
    }
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd fdec 	bl	8002844 <_ZN8touchgfx4RectC1Ev>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	330c      	adds	r3, #12
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd fde7 	bl	8002844 <_ZN8touchgfx4RectC1Ev>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	615a      	str	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	619a      	str	r2, [r3, #24]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	61da      	str	r2, [r3, #28]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	841a      	strh	r2, [r3, #32]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	845a      	strh	r2, [r3, #34]	; 0x22
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	0801ee48 	.word	0x0801ee48

08004cb4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
    {
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	601a      	str	r2, [r3, #0]
    }
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	0801ee48 	.word	0x0801ee48

08004cd4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
    }
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ffe9 	bl	8004cb4 <_ZN8touchgfx8DrawableD1Ev>
 8004ce2:	2128      	movs	r1, #40	; 0x28
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f016 fe3e 	bl	801b966 <_ZdlPvj>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004cfc:	2300      	movs	r3, #0
    }
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	4608      	mov	r0, r1
 8004d14:	4611      	mov	r1, r2
 8004d16:	461a      	mov	r2, r3
 8004d18:	4603      	mov	r3, r0
 8004d1a:	817b      	strh	r3, [r7, #10]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	813b      	strh	r3, [r7, #8]
 8004d20:	4613      	mov	r3, r2
 8004d22:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8004d24:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f82a 	bl	8004d88 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004d34:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f87e 	bl	8004e40 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	809a      	strh	r2, [r3, #4]
    }
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	887a      	ldrh	r2, [r7, #2]
 8004d7a:	80da      	strh	r2, [r3, #6]
    }
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]
 8004d94:	4613      	mov	r3, r2
 8004d96:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	332c      	adds	r3, #44	; 0x2c
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004da4:	4611      	mov	r1, r2
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
        setY(y);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3330      	adds	r3, #48	; 0x30
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004db6:	4611      	mov	r1, r2
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
    }
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	887a      	ldrh	r2, [r7, #2]
 8004dd4:	811a      	strh	r2, [r3, #8]
    }
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	460b      	mov	r3, r1
 8004dec:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	887a      	ldrh	r2, [r7, #2]
 8004df2:	815a      	strh	r2, [r3, #10]
    }
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
    {
    }
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
    {
    }
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
    {
    }
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3334      	adds	r3, #52	; 0x34
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
        setHeight(height);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3338      	adds	r3, #56	; 0x38
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e6e:	4611      	mov	r1, r2
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	4798      	blx	r3
    }
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
    {
    }
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
    {
    }
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	807b      	strh	r3, [r7, #2]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3350      	adds	r3, #80	; 0x50
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	8879      	ldrh	r1, [r7, #2]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004efa:	b292      	uxth	r2, r2
 8004efc:	1a8a      	subs	r2, r1, r2
 8004efe:	b292      	uxth	r2, r2
 8004f00:	b210      	sxth	r0, r2
 8004f02:	8839      	ldrh	r1, [r7, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	1a8a      	subs	r2, r1, r2
 8004f0e:	b292      	uxth	r2, r2
 8004f10:	b212      	sxth	r2, r2
 8004f12:	4601      	mov	r1, r0
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
    }
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f2e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f36:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f3e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff ffe1 	bl	8004f20 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	601a      	str	r2, [r3, #0]
    }
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
    {
 8004f7c:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f91c 	bl	80051c4 <_ZN8touchgfx9ContainerD1Ev>
    }
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	0801ef40 	.word	0x0801ef40

08004f9c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
    }
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff ffe5 	bl	8004f74 <_ZN8touchgfx6ScreenD1Ev>
 8004faa:	213c      	movs	r1, #60	; 0x3c
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f016 fcda 	bl	801b966 <_ZdlPvj>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
    {
    }
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
    {
    }
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
    {
    }
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
    {
    }
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
    {
    }
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f008 fd4b 	bl	800dad0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	817b      	strh	r3, [r7, #10]
 8005050:	4613      	mov	r3, r2
 8005052:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff ff25 	bl	8004ea6 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff ff2b 	bl	8004ec0 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8005074:	2300      	movs	r3, #0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	601a      	str	r2, [r3, #0]
        }
    }
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fdde 	bl	8004c54 <_ZN8touchgfx8DrawableC1Ev>
 8005098:	4a03      	ldr	r2, [pc, #12]	; (80050a8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	0801dba4 	.word	0x0801dba4

080050ac <_ZN8touchgfx6WidgetD1Ev>:
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	4a05      	ldr	r2, [pc, #20]	; (80050cc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fdf9 	bl	8004cb4 <_ZN8touchgfx8DrawableD1Ev>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	0801dba4 	.word	0x0801dba4

080050d0 <_ZN8touchgfx6WidgetD0Ev>:
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff ffe7 	bl	80050ac <_ZN8touchgfx6WidgetD1Ev>
 80050de:	2128      	movs	r1, #40	; 0x28
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f016 fc40 	bl	801b966 <_ZdlPvj>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4618      	mov	r0, r3
 80050fc:	2326      	movs	r3, #38	; 0x26
 80050fe:	461a      	mov	r2, r3
 8005100:	2100      	movs	r1, #0
 8005102:	f016 fceb 	bl	801badc <memset>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff ffbd 	bl	8005088 <_ZN8touchgfx6WidgetC1Ev>
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	22ff      	movs	r2, #255	; 0xff
 8005118:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3328      	adds	r3, #40	; 0x28
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fd86 	bl	8004c34 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	0801e9b8 	.word	0x0801e9b8

08005138 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	4a05      	ldr	r2, [pc, #20]	; (8005174 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff ffa1 	bl	80050ac <_ZN8touchgfx6WidgetD1Ev>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	0801e9b8 	.word	0x0801e9b8

08005178 <_ZN8touchgfx3BoxD0Ev>:
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ffe7 	bl	8005154 <_ZN8touchgfx3BoxD1Ev>
 8005186:	212c      	movs	r1, #44	; 0x2c
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f016 fbec 	bl	801b966 <_ZdlPvj>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80051a4:	4a06      	ldr	r2, [pc, #24]	; (80051c0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	887a      	ldrh	r2, [r7, #2]
 80051ae:	809a      	strh	r2, [r3, #4]
    }
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	0801da94 	.word	0x0801da94

080051c4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	4a05      	ldr	r2, [pc, #20]	; (80051e4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fd6d 	bl	8004cb4 <_ZN8touchgfx8DrawableD1Ev>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	0801dfc4 	.word	0x0801dfc4

080051e8 <_ZN8touchgfx9ContainerD0Ev>:
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ffe7 	bl	80051c4 <_ZN8touchgfx9ContainerD1Ev>
 80051f6:	212c      	movs	r1, #44	; 0x2c
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f016 fbb4 	bl	801b966 <_ZdlPvj>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	801a      	strh	r2, [r3, #0]
    {
    }
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4618      	mov	r0, r3
 8005254:	2326      	movs	r3, #38	; 0x26
 8005256:	461a      	mov	r2, r3
 8005258:	2100      	movs	r1, #0
 800525a:	f016 fc3f 	bl	801badc <memset>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff ff11 	bl	8005088 <_ZN8touchgfx6WidgetC1Ev>
 8005266:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	629a      	str	r2, [r3, #40]	; 0x28
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2101      	movs	r1, #1
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff ffd2 	bl	8005228 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	0801e94c 	.word	0x0801e94c

08005294 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	4a05      	ldr	r2, [pc, #20]	; (80052b4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff ff01 	bl	80050ac <_ZN8touchgfx6WidgetD1Ev>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	0801e94c 	.word	0x0801e94c

080052b8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff ffe7 	bl	8005294 <_ZN8touchgfx14AbstractButtonD1Ev>
 80052c6:	2130      	movs	r1, #48	; 0x30
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f016 fb4c 	bl	801b966 <_ZdlPvj>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff ffb0 	bl	8005248 <_ZN8touchgfx14AbstractButtonC1Ev>
 80052e8:	4a0c      	ldr	r2, [pc, #48]	; (800531c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	332e      	adds	r3, #46	; 0x2e
 80052f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff ff86 	bl	8005208 <_ZN8touchgfx6BitmapC1Et>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3330      	adds	r3, #48	; 0x30
 8005300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff7f 	bl	8005208 <_ZN8touchgfx6BitmapC1Et>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	22ff      	movs	r2, #255	; 0xff
 800530e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	0801ea80 	.word	0x0801ea80

08005320 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	889a      	ldrh	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	809a      	strh	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3334      	adds	r3, #52	; 0x34
 800534e:	6839      	ldr	r1, [r7, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff ffe5 	bl	8005320 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f820 	bl	800539c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b08b      	sub	sp, #44	; 0x2c
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3334      	adds	r3, #52	; 0x34
 80053a8:	61fb      	str	r3, [r7, #28]
        return typedTextId != TYPED_TEXT_INVALID;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	889b      	ldrh	r3, [r3, #4]
 80053ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053b2:	4293      	cmp	r3, r2
 80053b4:	bf14      	ite	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	2300      	moveq	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d072      	beq.n	80054a6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10a>
        {
            const Font* f = typedText.getFont();
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3334      	adds	r3, #52	; 0x34
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	60fb      	str	r3, [r7, #12]

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80053ca:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d105      	bne.n	80053de <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 80053d2:	4b3a      	ldr	r3, [pc, #232]	; (80054bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80053d4:	4a3a      	ldr	r2, [pc, #232]	; (80054c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80053d6:	21ae      	movs	r1, #174	; 0xae
 80053d8:	483a      	ldr	r0, [pc, #232]	; (80054c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80053da:	f016 faf3 	bl	801b9c4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	889a      	ldrh	r2, [r3, #4]
 80053e2:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d305      	bcc.n	80053f6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 80053ea:	4b38      	ldr	r3, [pc, #224]	; (80054cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 80053ec:	4a34      	ldr	r2, [pc, #208]	; (80054c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80053ee:	21af      	movs	r1, #175	; 0xaf
 80053f0:	4834      	ldr	r0, [pc, #208]	; (80054c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80053f2:	f016 fae7 	bl	801b9c4 <__assert_func>
    }
 80053f6:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 80053f8:	4b35      	ldr	r3, [pc, #212]	; (80054d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	889b      	ldrh	r3, [r3, #4]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	440b      	add	r3, r1
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3334      	adds	r3, #52	; 0x34
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800541c:	4b26      	ldr	r3, [pc, #152]	; (80054b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d105      	bne.n	8005430 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8005426:	4a26      	ldr	r2, [pc, #152]	; (80054c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005428:	21ae      	movs	r1, #174	; 0xae
 800542a:	4826      	ldr	r0, [pc, #152]	; (80054c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800542c:	f016 faca 	bl	801b9c4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	889a      	ldrh	r2, [r3, #4]
 8005434:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d305      	bcc.n	8005448 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xac>
 800543c:	4b23      	ldr	r3, [pc, #140]	; (80054cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800543e:	4a20      	ldr	r2, [pc, #128]	; (80054c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005440:	21af      	movs	r1, #175	; 0xaf
 8005442:	4820      	ldr	r0, [pc, #128]	; (80054c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8005444:	f016 fabe 	bl	801b9c4 <__assert_func>
    }
 8005448:	bf00      	nop
        return texts->getText(typedTextId);
 800544a:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	889b      	ldrh	r3, [r3, #4]
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7ff fb97 	bl	8004b88 <_ZNK8touchgfx5Texts7getTextEt>
 800545a:	4603      	mov	r3, r0
 800545c:	bf00      	nop
 800545e:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3328      	adds	r3, #40	; 0x28
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6a39      	ldr	r1, [r7, #32]
 800546a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800546c:	4798      	blx	r3
 800546e:	4603      	mov	r3, r0
 8005470:	b2dc      	uxtb	r4, r3
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3340      	adds	r3, #64	; 0x40
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6a39      	ldr	r1, [r7, #32]
 800547c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800547e:	4798      	blx	r3
 8005480:	4603      	mov	r3, r0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	fb14 f303 	smulbb	r3, r4, r3
 8005488:	b2dc      	uxtb	r4, r3
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3324      	adds	r3, #36	; 0x24
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6a39      	ldr	r1, [r7, #32]
 8005494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005496:	4798      	blx	r3
 8005498:	4603      	mov	r3, r0
 800549a:	4423      	add	r3, r4
 800549c:	b2da      	uxtb	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80054a4:	e003      	b.n	80054ae <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x112>
            textHeightIncludingSpacing = 0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 80054ae:	bf00      	nop
 80054b0:	372c      	adds	r7, #44	; 0x2c
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd90      	pop	{r4, r7, pc}
 80054b6:	bf00      	nop
 80054b8:	2000dfbc 	.word	0x2000dfbc
 80054bc:	0801d450 	.word	0x0801d450
 80054c0:	0801d494 	.word	0x0801d494
 80054c4:	0801d4c4 	.word	0x0801d4c4
 80054c8:	2000dfc0 	.word	0x2000dfc0
 80054cc:	0801d50c 	.word	0x0801d50c
 80054d0:	2000dfc4 	.word	0x2000dfc4
 80054d4:	2000dfc8 	.word	0x2000dfc8

080054d8 <_ZN8touchgfx4ViewI14startPresenterED1Ev>:
class View : public Screen
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	4a05      	ldr	r2, [pc, #20]	; (80054f8 <_ZN8touchgfx4ViewI14startPresenterED1Ev+0x20>)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fd43 	bl	8004f74 <_ZN8touchgfx6ScreenD1Ev>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	0801dc3c 	.word	0x0801dc3c

080054fc <_ZN8touchgfx4ViewI14startPresenterED0Ev>:
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ffe7 	bl	80054d8 <_ZN8touchgfx4ViewI14startPresenterED1Ev>
 800550a:	2140      	movs	r1, #64	; 0x40
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f016 fa2a 	bl	801b966 <_ZdlPvj>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZN13startViewBaseD1Ev>:

class startViewBase : public touchgfx::View<startPresenter>
{
public:
    startViewBase();
    virtual ~startViewBase() {}
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	4a0f      	ldr	r2, [pc, #60]	; (8005564 <_ZN13startViewBaseD1Ev+0x48>)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	33cc      	adds	r3, #204	; 0xcc
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f9aa 	bl	8005888 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3398      	adds	r3, #152	; 0x98
 8005538:	4618      	mov	r0, r3
 800553a:	f000 f983 	bl	8005844 <_ZN8touchgfx6ButtonD1Ev>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	336c      	adds	r3, #108	; 0x6c
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff fe06 	bl	8005154 <_ZN8touchgfx3BoxD1Ev>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3340      	adds	r3, #64	; 0x40
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fe01 	bl	8005154 <_ZN8touchgfx3BoxD1Ev>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ffbf 	bl	80054d8 <_ZN8touchgfx4ViewI14startPresenterED1Ev>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	0801dc08 	.word	0x0801dc08

08005568 <_ZN13startViewBaseD0Ev>:
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff ffd3 	bl	800551c <_ZN13startViewBaseD1Ev>
 8005576:	f44f 718a 	mov.w	r1, #276	; 0x114
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f016 f9f3 	bl	801b966 <_ZdlPvj>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <_ZN13startViewBaseC1Ev>:
#include <gui_generated/start_screen/startViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

startViewBase::startViewBase()
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b093      	sub	sp, #76	; 0x4c
 8005590:	af02      	add	r7, sp, #8
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f93e 	bl	8005818 <_ZN8touchgfx4ViewI14startPresenterEC1Ev>
 800559c:	4a98      	ldr	r2, [pc, #608]	; (8005800 <_ZN13startViewBaseC1Ev+0x274>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3340      	adds	r3, #64	; 0x40
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fda2 	bl	80050f0 <_ZN8touchgfx3BoxC1Ev>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	336c      	adds	r3, #108	; 0x6c
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fd9d 	bl	80050f0 <_ZN8touchgfx3BoxC1Ev>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3398      	adds	r3, #152	; 0x98
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff fe8c 	bl	80052d8 <_ZN8touchgfx6ButtonC1Ev>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	33cc      	adds	r3, #204	; 0xcc
 80055c4:	4618      	mov	r0, r3
 80055c6:	f009 fd59 	bl	800f07c <_ZN8touchgfx15ButtonWithLabelC1Ev>
{

    __background.setPosition(0, 0, 800, 480);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80055d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80055da:	2200      	movs	r2, #0
 80055dc:	2100      	movs	r1, #0
 80055de:	f7ff fb94 	bl	8004d0a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80055fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	461a      	mov	r2, r3
 8005602:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	431a      	orrs	r2, r3
 800560a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800560e:	4313      	orrs	r3, r2
 8005610:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005614:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005618:	4611      	mov	r1, r2
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fb0a 	bl	8004c34 <_ZN8touchgfx9colortypeC1Em>
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	4619      	mov	r1, r3
 8005624:	4620      	mov	r0, r4
 8005626:	f7ff fd87 	bl	8005138 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 800, 480);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8005630:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	f44f 7348 	mov.w	r3, #800	; 0x320
 800563a:	2200      	movs	r2, #0
 800563c:	2100      	movs	r1, #0
 800563e:	f7ff fb64 	bl	8004d0a <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005648:	23ff      	movs	r3, #255	; 0xff
 800564a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800564e:	2300      	movs	r3, #0
 8005650:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005654:	2300      	movs	r3, #0
 8005656:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800565a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800565e:	041b      	lsls	r3, r3, #16
 8005660:	461a      	mov	r2, r3
 8005662:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	431a      	orrs	r2, r3
 800566a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800566e:	4313      	orrs	r3, r2
 8005670:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fada 	bl	8004c34 <_ZN8touchgfx9colortypeC1Em>
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005682:	4619      	mov	r1, r3
 8005684:	4620      	mov	r0, r4
 8005686:	f7ff fd57 	bl	8005138 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(315, 215);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3398      	adds	r3, #152	; 0x98
 800568e:	22d7      	movs	r2, #215	; 0xd7
 8005690:	f240 113b 	movw	r1, #315	; 0x13b
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff fb77 	bl	8004d88 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	2100      	movs	r1, #0
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff fdae 	bl	8005208 <_ZN8touchgfx6BitmapC1Et>
 80056ac:	f107 0310 	add.w	r3, r7, #16
 80056b0:	2101      	movs	r1, #1
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fda8 	bl	8005208 <_ZN8touchgfx6BitmapC1Et>
 80056b8:	f107 0210 	add.w	r2, r7, #16
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	4619      	mov	r1, r3
 80056c2:	4620      	mov	r0, r4
 80056c4:	f009 fb50 	bl	800ed68 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    buttonWithLabel1.setXY(387, 96);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	33cc      	adds	r3, #204	; 0xcc
 80056cc:	2260      	movs	r2, #96	; 0x60
 80056ce:	f240 1183 	movw	r1, #387	; 0x183
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fb58 	bl	8004d88 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 80056de:	f107 0314 	add.w	r3, r7, #20
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fd8f 	bl	8005208 <_ZN8touchgfx6BitmapC1Et>
 80056ea:	f107 0318 	add.w	r3, r7, #24
 80056ee:	2101      	movs	r1, #1
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fd89 	bl	8005208 <_ZN8touchgfx6BitmapC1Et>
 80056f6:	f107 0218 	add.w	r2, r7, #24
 80056fa:	f107 0314 	add.w	r3, r7, #20
 80056fe:	4619      	mov	r1, r3
 8005700:	4620      	mov	r0, r4
 8005702:	f009 fb31 	bl	800ed68 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID6));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800570c:	f107 031c 	add.w	r3, r7, #28
 8005710:	2105      	movs	r1, #5
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fd40 	bl	8005198 <_ZN8touchgfx9TypedTextC1Et>
 8005718:	f107 031c 	add.w	r3, r7, #28
 800571c:	4619      	mov	r1, r3
 800571e:	4620      	mov	r0, r4
 8005720:	f7ff fe0e 	bl	8005340 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8005724:	f107 031c 	add.w	r3, r7, #28
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe fb5b 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8005734:	23ff      	movs	r3, #255	; 0xff
 8005736:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800573a:	23ff      	movs	r3, #255	; 0xff
 800573c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005740:	23ff      	movs	r3, #255	; 0xff
 8005742:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005746:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800574a:	041b      	lsls	r3, r3, #16
 800574c:	461a      	mov	r2, r3
 800574e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	431a      	orrs	r2, r3
 8005756:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800575a:	4313      	orrs	r3, r2
 800575c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fa64 	bl	8004c34 <_ZN8touchgfx9colortypeC1Em>
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	4619      	mov	r1, r3
 8005770:	4620      	mov	r0, r4
 8005772:	f7ff fdf7 	bl	8005364 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800577c:	23ff      	movs	r3, #255	; 0xff
 800577e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005782:	23ff      	movs	r3, #255	; 0xff
 8005784:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005788:	23ff      	movs	r3, #255	; 0xff
 800578a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800578e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005792:	041b      	lsls	r3, r3, #16
 8005794:	461a      	mov	r2, r3
 8005796:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	431a      	orrs	r2, r3
 800579e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80057a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fa40 	bl	8004c34 <_ZN8touchgfx9colortypeC1Em>
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	4619      	mov	r1, r3
 80057b8:	4620      	mov	r0, r4
 80057ba:	f7ff fde1 	bl	8005380 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    add(__background);
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3340      	adds	r3, #64	; 0x40
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f7ff fc2c 	bl	8005024 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	336c      	adds	r3, #108	; 0x6c
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f7ff fc25 	bl	8005024 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3398      	adds	r3, #152	; 0x98
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f7ff fc1e 	bl	8005024 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	33cc      	adds	r3, #204	; 0xcc
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f7ff fc17 	bl	8005024 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	3744      	adds	r7, #68	; 0x44
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd90      	pop	{r4, r7, pc}
 8005800:	0801dc08 	.word	0x0801dc08

08005804 <_ZN13startViewBase11setupScreenEv>:

void startViewBase::setupScreen()
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <_ZN8touchgfx4ViewI14startPresenterEC1Ev>:
    View()
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4618      	mov	r0, r3
 8005824:	f00c fb6e 	bl	8011f04 <_ZN8touchgfx6ScreenC1Ev>
 8005828:	4a05      	ldr	r2, [pc, #20]	; (8005840 <_ZN8touchgfx4ViewI14startPresenterEC1Ev+0x28>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	0801dc3c 	.word	0x0801dc3c

08005844 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	4a05      	ldr	r2, [pc, #20]	; (8005864 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fd1d 	bl	8005294 <_ZN8touchgfx14AbstractButtonD1Ev>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	0801ea80 	.word	0x0801ea80

08005868 <_ZN8touchgfx6ButtonD0Ev>:
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff ffe7 	bl	8005844 <_ZN8touchgfx6ButtonD1Ev>
 8005876:	2134      	movs	r1, #52	; 0x34
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f016 f874 	bl	801b966 <_ZdlPvj>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3334      	adds	r3, #52	; 0x34
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe faa2 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff ffce 	bl	8005844 <_ZN8touchgfx6ButtonD1Ev>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	0801ebe0 	.word	0x0801ebe0

080058b8 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff ffe1 	bl	8005888 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80058c6:	2148      	movs	r1, #72	; 0x48
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f016 f84c 	bl	801b966 <_ZdlPvj>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fb7e 	bl	8003fec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80058f0:	4a03      	ldr	r2, [pc, #12]	; (8005900 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]
{

}
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	0801d844 	.word	0x0801d844

08005904 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
{

}
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <_ZN5Model4tickEv>:

void Model::tick()
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]

}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
    {
    }
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
    {
    }
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
    {
 8005964:	4a04      	ldr	r2, [pc, #16]	; (8005978 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]
    }
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	0801dc80 	.word	0x0801dc80

0800597c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
    }
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff ffe9 	bl	800595c <_ZN8touchgfx9PresenterD1Ev>
 800598a:	2104      	movs	r1, #4
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f015 ffea 	bl	801b966 <_ZdlPvj>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
    {
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	601a      	str	r2, [r3, #0]
    }
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	0801dc80 	.word	0x0801dc80

080059bc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	4a06      	ldr	r2, [pc, #24]	; (80059e0 <_ZN13ModelListenerC1Ev+0x24>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	0801dc70 	.word	0x0801dc70

080059e4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <_ZN13ModelListenerD1Ev+0x1c>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	0801dc70 	.word	0x0801dc70

08005a04 <_ZN13ModelListenerD0Ev>:
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ffe9 	bl	80059e4 <_ZN13ModelListenerD1Ev>
 8005a12:	2108      	movs	r1, #8
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f015 ffa6 	bl	801b966 <_ZdlPvj>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <_ZN14startPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~startPresenter() {};
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <_ZN14startPresenterD1Ev+0x30>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <_ZN14startPresenterD1Ev+0x34>)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff ffd1 	bl	80059e4 <_ZN13ModelListenerD1Ev>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff ff89 	bl	800595c <_ZN8touchgfx9PresenterD1Ev>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	0801dc98 	.word	0x0801dc98
 8005a58:	0801dcb0 	.word	0x0801dcb0

08005a5c <_ZThn4_N14startPresenterD1Ev>:
 8005a5c:	f1a0 0004 	sub.w	r0, r0, #4
 8005a60:	e7e0      	b.n	8005a24 <_ZN14startPresenterD1Ev>
 8005a62:	bf00      	nop

08005a64 <_ZN14startPresenterD0Ev>:
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ffd9 	bl	8005a24 <_ZN14startPresenterD1Ev>
 8005a72:	2110      	movs	r1, #16
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f015 ff76 	bl	801b966 <_ZdlPvj>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <_ZThn4_N14startPresenterD0Ev>:
 8005a84:	f1a0 0004 	sub.w	r0, r0, #4
 8005a88:	e7ec      	b.n	8005a64 <_ZN14startPresenterD0Ev>
	...

08005a8c <_ZN14startPresenterC1ER9startView>:
#include <gui/start_screen/startView.hpp>
#include <gui/start_screen/startPresenter.hpp>

startPresenter::startPresenter(startView& v)
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
    : view(v)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff ff7f 	bl	800599c <_ZN8touchgfx9PresenterC1Ev>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff ff8a 	bl	80059bc <_ZN13ModelListenerC1Ev>
 8005aa8:	4a06      	ldr	r2, [pc, #24]	; (8005ac4 <_ZN14startPresenterC1ER9startView+0x38>)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	4a06      	ldr	r2, [pc, #24]	; (8005ac8 <_ZN14startPresenterC1ER9startView+0x3c>)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	605a      	str	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	60da      	str	r2, [r3, #12]
{

}
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	0801dc98 	.word	0x0801dc98
 8005ac8:	0801dcb0 	.word	0x0801dcb0

08005acc <_ZN14startPresenter8activateEv>:

void startPresenter::activate()
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]

}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <_ZN14startPresenter10deactivateEv>:

void startPresenter::deactivate()
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <_ZN9startViewD1Ev>:

class startView : public startViewBase
{
public:
    startView();
    virtual ~startView() {}
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	4a05      	ldr	r2, [pc, #20]	; (8005b14 <_ZN9startViewD1Ev+0x20>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff fd09 	bl	800551c <_ZN13startViewBaseD1Ev>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	0801dcc0 	.word	0x0801dcc0

08005b18 <_ZN9startViewD0Ev>:
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff ffe7 	bl	8005af4 <_ZN9startViewD1Ev>
 8005b26:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f015 ff1b 	bl	801b966 <_ZdlPvj>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <_ZN9startViewC1Ev>:
#include <gui/start_screen/startView.hpp>

startView::startView()
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fd20 	bl	800558c <_ZN13startViewBaseC1Ev>
 8005b4c:	4a03      	ldr	r2, [pc, #12]	; (8005b5c <_ZN9startViewC1Ev+0x20>)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
{

}
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	0801dcc0 	.word	0x0801dcc0

08005b60 <_ZN9startView11setupScreenEv>:

void startView::setupScreen()
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
    startViewBase::setupScreen();
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fe4a 	bl	8005804 <_ZN13startViewBase11setupScreenEv>
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <_ZN9startView14tearDownScreenEv>:

void startView::tearDownScreen()
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
    startViewBase::tearDownScreen();
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff fa2e 	bl	8004fe4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b94:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <SystemInit+0x20>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	4a05      	ldr	r2, [pc, #20]	; (8005bb0 <SystemInit+0x20>)
 8005b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	e000ed00 	.word	0xe000ed00

08005bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bb8:	2003      	movs	r0, #3
 8005bba:	f000 f8fa 	bl	8005db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bbe:	200f      	movs	r0, #15
 8005bc0:	f7fb fc26 	bl	8001410 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005bc4:	f7fb fbfc 	bl	80013c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bd4:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <HAL_IncTick+0x20>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <HAL_IncTick+0x24>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4413      	add	r3, r2
 8005be0:	4a04      	ldr	r2, [pc, #16]	; (8005bf4 <HAL_IncTick+0x24>)
 8005be2:	6013      	str	r3, [r2, #0]
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000014 	.word	0x20000014
 8005bf4:	2000e4fc 	.word	0x2000e4fc

08005bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <HAL_GetTick+0x14>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	2000e4fc 	.word	0x2000e4fc

08005c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c18:	f7ff ffee 	bl	8005bf8 <HAL_GetTick>
 8005c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c28:	d005      	beq.n	8005c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <HAL_Delay+0x44>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c36:	bf00      	nop
 8005c38:	f7ff ffde 	bl	8005bf8 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d8f7      	bhi.n	8005c38 <HAL_Delay+0x28>
  {
  }
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000014 	.word	0x20000014

08005c58 <__NVIC_SetPriorityGrouping>:
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <__NVIC_SetPriorityGrouping+0x40>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c74:	4013      	ands	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <__NVIC_SetPriorityGrouping+0x44>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c86:	4a04      	ldr	r2, [pc, #16]	; (8005c98 <__NVIC_SetPriorityGrouping+0x40>)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	60d3      	str	r3, [r2, #12]
}
 8005c8c:	bf00      	nop
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	e000ed00 	.word	0xe000ed00
 8005c9c:	05fa0000 	.word	0x05fa0000

08005ca0 <__NVIC_GetPriorityGrouping>:
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	f003 0307 	and.w	r3, r3, #7
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	e000ed00 	.word	0xe000ed00

08005cbc <__NVIC_EnableIRQ>:
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	db0b      	blt.n	8005ce6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	f003 021f 	and.w	r2, r3, #31
 8005cd4:	4907      	ldr	r1, [pc, #28]	; (8005cf4 <__NVIC_EnableIRQ+0x38>)
 8005cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	2001      	movs	r0, #1
 8005cde:	fa00 f202 	lsl.w	r2, r0, r2
 8005ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	e000e100 	.word	0xe000e100

08005cf8 <__NVIC_SetPriority>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	6039      	str	r1, [r7, #0]
 8005d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	db0a      	blt.n	8005d22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	490c      	ldr	r1, [pc, #48]	; (8005d44 <__NVIC_SetPriority+0x4c>)
 8005d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d16:	0112      	lsls	r2, r2, #4
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d20:	e00a      	b.n	8005d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	4908      	ldr	r1, [pc, #32]	; (8005d48 <__NVIC_SetPriority+0x50>)
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	3b04      	subs	r3, #4
 8005d30:	0112      	lsls	r2, r2, #4
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	440b      	add	r3, r1
 8005d36:	761a      	strb	r2, [r3, #24]
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	e000e100 	.word	0xe000e100
 8005d48:	e000ed00 	.word	0xe000ed00

08005d4c <NVIC_EncodePriority>:
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b089      	sub	sp, #36	; 0x24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f1c3 0307 	rsb	r3, r3, #7
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	bf28      	it	cs
 8005d6a:	2304      	movcs	r3, #4
 8005d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3304      	adds	r3, #4
 8005d72:	2b06      	cmp	r3, #6
 8005d74:	d902      	bls.n	8005d7c <NVIC_EncodePriority+0x30>
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3b03      	subs	r3, #3
 8005d7a:	e000      	b.n	8005d7e <NVIC_EncodePriority+0x32>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43da      	mvns	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	401a      	ands	r2, r3
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d94:	f04f 31ff 	mov.w	r1, #4294967295
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9e:	43d9      	mvns	r1, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da4:	4313      	orrs	r3, r2
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3724      	adds	r7, #36	; 0x24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff ff4c 	bl	8005c58 <__NVIC_SetPriorityGrouping>
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dda:	f7ff ff61 	bl	8005ca0 <__NVIC_GetPriorityGrouping>
 8005dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	6978      	ldr	r0, [r7, #20]
 8005de6:	f7ff ffb1 	bl	8005d4c <NVIC_EncodePriority>
 8005dea:	4602      	mov	r2, r0
 8005dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df0:	4611      	mov	r1, r2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff ff80 	bl	8005cf8 <__NVIC_SetPriority>
}
 8005df8:	bf00      	nop
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff ff54 	bl	8005cbc <__NVIC_EnableIRQ>
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e054      	b.n	8005ed8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	7f5b      	ldrb	r3, [r3, #29]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fa fbec 	bl	800061c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	791b      	ldrb	r3, [r3, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10c      	bne.n	8005e6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a22      	ldr	r2, [pc, #136]	; (8005ee0 <HAL_CRC_Init+0xc4>)
 8005e58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0218 	bic.w	r2, r2, #24
 8005e68:	609a      	str	r2, [r3, #8]
 8005e6a:	e00c      	b.n	8005e86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6899      	ldr	r1, [r3, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f834 	bl	8005ee4 <HAL_CRCEx_Polynomial_Set>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e028      	b.n	8005ed8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	795b      	ldrb	r3, [r3, #5]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f04f 32ff 	mov.w	r2, #4294967295
 8005e96:	611a      	str	r2, [r3, #16]
 8005e98:	e004      	b.n	8005ea4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6912      	ldr	r2, [r2, #16]
 8005ea2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	04c11db7 	.word	0x04c11db7

08005ee4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005ef4:	231f      	movs	r3, #31
 8005ef6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005ef8:	bf00      	nop
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1e5a      	subs	r2, r3, #1
 8005efe:	613a      	str	r2, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <HAL_CRCEx_Polynomial_Set+0x34>
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0f0      	beq.n	8005efa <HAL_CRCEx_Polynomial_Set+0x16>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b18      	cmp	r3, #24
 8005f1c:	d846      	bhi.n	8005fac <HAL_CRCEx_Polynomial_Set+0xc8>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005fb3 	.word	0x08005fb3
 8005f28:	08005fad 	.word	0x08005fad
 8005f2c:	08005fad 	.word	0x08005fad
 8005f30:	08005fad 	.word	0x08005fad
 8005f34:	08005fad 	.word	0x08005fad
 8005f38:	08005fad 	.word	0x08005fad
 8005f3c:	08005fad 	.word	0x08005fad
 8005f40:	08005fad 	.word	0x08005fad
 8005f44:	08005fa1 	.word	0x08005fa1
 8005f48:	08005fad 	.word	0x08005fad
 8005f4c:	08005fad 	.word	0x08005fad
 8005f50:	08005fad 	.word	0x08005fad
 8005f54:	08005fad 	.word	0x08005fad
 8005f58:	08005fad 	.word	0x08005fad
 8005f5c:	08005fad 	.word	0x08005fad
 8005f60:	08005fad 	.word	0x08005fad
 8005f64:	08005f95 	.word	0x08005f95
 8005f68:	08005fad 	.word	0x08005fad
 8005f6c:	08005fad 	.word	0x08005fad
 8005f70:	08005fad 	.word	0x08005fad
 8005f74:	08005fad 	.word	0x08005fad
 8005f78:	08005fad 	.word	0x08005fad
 8005f7c:	08005fad 	.word	0x08005fad
 8005f80:	08005fad 	.word	0x08005fad
 8005f84:	08005f89 	.word	0x08005f89
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d913      	bls.n	8005fb6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005f92:	e010      	b.n	8005fb6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2b07      	cmp	r3, #7
 8005f98:	d90f      	bls.n	8005fba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005f9e:	e00c      	b.n	8005fba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b0f      	cmp	r3, #15
 8005fa4:	d90b      	bls.n	8005fbe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005faa:	e008      	b.n	8005fbe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb0:	e006      	b.n	8005fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005fb2:	bf00      	nop
 8005fb4:	e004      	b.n	8005fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005fb6:	bf00      	nop
 8005fb8:	e002      	b.n	8005fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005fba:	bf00      	nop
 8005fbc:	e000      	b.n	8005fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005fbe:	bf00      	nop
  }
  if (status == HAL_OK)
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10d      	bne.n	8005fe2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f023 0118 	bic.w	r1, r3, #24
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e049      	b.n	8006096 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fa fb58 	bl	80006cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	f023 0107 	bic.w	r1, r3, #7
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <HAL_DMA2D_Init+0xb0>)
 8006058:	4013      	ands	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68d1      	ldr	r1, [r2, #12]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	430b      	orrs	r3, r1
 8006064:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	051a      	lsls	r2, r3, #20
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	055b      	lsls	r3, r3, #21
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	ffffc000 	.word	0xffffc000

080060a4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d026      	beq.n	8006114 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d021      	beq.n	8006114 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060de:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	f043 0201 	orr.w	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2201      	movs	r2, #1
 80060f2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2204      	movs	r2, #4
 80060f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d026      	beq.n	800616c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d021      	beq.n	800616c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006136:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2220      	movs	r2, #32
 800613e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006144:	f043 0202 	orr.w	r2, r3, #2
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2204      	movs	r2, #4
 8006150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d026      	beq.n	80061c4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800617c:	2b00      	cmp	r3, #0
 800617e:	d021      	beq.n	80061c4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800618e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2208      	movs	r2, #8
 8006196:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	f043 0204 	orr.w	r2, r3, #4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2204      	movs	r2, #4
 80061a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d013      	beq.n	80061f6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00e      	beq.n	80061f6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2204      	movs	r2, #4
 80061ee:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f853 	bl	800629c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d024      	beq.n	800624a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01f      	beq.n	800624a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006218:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2202      	movs	r2, #2
 8006220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01f      	beq.n	8006294 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01a      	beq.n	8006294 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800626c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2210      	movs	r2, #16
 8006274:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f80e 	bl	80062b0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006294:	bf00      	nop
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_DMA2D_ConfigLayer+0x20>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e084      	b.n	80063ee <HAL_DMA2D_ConfigLayer+0x12a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	4613      	mov	r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4413      	add	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	3320      	adds	r3, #32
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	4413      	add	r3, r2
 8006304:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006318:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006324:	4b35      	ldr	r3, [pc, #212]	; (80063fc <HAL_DMA2D_ConfigLayer+0x138>)
 8006326:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b0a      	cmp	r3, #10
 800632e:	d003      	beq.n	8006338 <HAL_DMA2D_ConfigLayer+0x74>
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b09      	cmp	r3, #9
 8006336:	d107      	bne.n	8006348 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e005      	b.n	8006354 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	061b      	lsls	r3, r3, #24
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d120      	bne.n	800639c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	43db      	mvns	r3, r3
 8006364:	ea02 0103 	and.w	r1, r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	430a      	orrs	r2, r1
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b0a      	cmp	r3, #10
 8006382:	d003      	beq.n	800638c <HAL_DMA2D_ConfigLayer+0xc8>
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b09      	cmp	r3, #9
 800638a:	d127      	bne.n	80063dc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006398:	629a      	str	r2, [r3, #40]	; 0x28
 800639a:	e01f      	b.n	80063dc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69da      	ldr	r2, [r3, #28]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	ea02 0103 	and.w	r1, r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b0a      	cmp	r3, #10
 80063c4:	d003      	beq.n	80063ce <HAL_DMA2D_ConfigLayer+0x10a>
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b09      	cmp	r3, #9
 80063cc:	d106      	bne.n	80063dc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80063da:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	ff33000f 	.word	0xff33000f

08006400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006400:	b480      	push	{r7}
 8006402:	b089      	sub	sp, #36	; 0x24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006412:	2300      	movs	r3, #0
 8006414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006416:	2300      	movs	r3, #0
 8006418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	e175      	b.n	800670c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006420:	2201      	movs	r2, #1
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4013      	ands	r3, r2
 8006432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	429a      	cmp	r2, r3
 800643a:	f040 8164 	bne.w	8006706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d00b      	beq.n	800645e <HAL_GPIO_Init+0x5e>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d007      	beq.n	800645e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006452:	2b11      	cmp	r3, #17
 8006454:	d003      	beq.n	800645e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2b12      	cmp	r3, #18
 800645c:	d130      	bne.n	80064c0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	2203      	movs	r2, #3
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	43db      	mvns	r3, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4013      	ands	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	4313      	orrs	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006494:	2201      	movs	r2, #1
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	fa02 f303 	lsl.w	r3, r2, r3
 800649c:	43db      	mvns	r3, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	4013      	ands	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	091b      	lsrs	r3, r3, #4
 80064aa:	f003 0201 	and.w	r2, r3, #1
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	2203      	movs	r2, #3
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	43db      	mvns	r3, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4013      	ands	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d003      	beq.n	8006500 <HAL_GPIO_Init+0x100>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	2b12      	cmp	r3, #18
 80064fe:	d123      	bne.n	8006548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	08da      	lsrs	r2, r3, #3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3208      	adds	r2, #8
 8006508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	220f      	movs	r2, #15
 8006518:	fa02 f303 	lsl.w	r3, r2, r3
 800651c:	43db      	mvns	r3, r3
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	4013      	ands	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	4313      	orrs	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	08da      	lsrs	r2, r3, #3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3208      	adds	r2, #8
 8006542:	69b9      	ldr	r1, [r7, #24]
 8006544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	2203      	movs	r2, #3
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4013      	ands	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0203 	and.w	r2, r3, #3
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	4313      	orrs	r3, r2
 8006574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80be 	beq.w	8006706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800658a:	4b66      	ldr	r3, [pc, #408]	; (8006724 <HAL_GPIO_Init+0x324>)
 800658c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658e:	4a65      	ldr	r2, [pc, #404]	; (8006724 <HAL_GPIO_Init+0x324>)
 8006590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006594:	6453      	str	r3, [r2, #68]	; 0x44
 8006596:	4b63      	ldr	r3, [pc, #396]	; (8006724 <HAL_GPIO_Init+0x324>)
 8006598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80065a2:	4a61      	ldr	r2, [pc, #388]	; (8006728 <HAL_GPIO_Init+0x328>)
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	089b      	lsrs	r3, r3, #2
 80065a8:	3302      	adds	r3, #2
 80065aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	220f      	movs	r2, #15
 80065ba:	fa02 f303 	lsl.w	r3, r2, r3
 80065be:	43db      	mvns	r3, r3
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4013      	ands	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a58      	ldr	r2, [pc, #352]	; (800672c <HAL_GPIO_Init+0x32c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d037      	beq.n	800663e <HAL_GPIO_Init+0x23e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a57      	ldr	r2, [pc, #348]	; (8006730 <HAL_GPIO_Init+0x330>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d031      	beq.n	800663a <HAL_GPIO_Init+0x23a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a56      	ldr	r2, [pc, #344]	; (8006734 <HAL_GPIO_Init+0x334>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d02b      	beq.n	8006636 <HAL_GPIO_Init+0x236>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a55      	ldr	r2, [pc, #340]	; (8006738 <HAL_GPIO_Init+0x338>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d025      	beq.n	8006632 <HAL_GPIO_Init+0x232>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a54      	ldr	r2, [pc, #336]	; (800673c <HAL_GPIO_Init+0x33c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01f      	beq.n	800662e <HAL_GPIO_Init+0x22e>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a53      	ldr	r2, [pc, #332]	; (8006740 <HAL_GPIO_Init+0x340>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d019      	beq.n	800662a <HAL_GPIO_Init+0x22a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a52      	ldr	r2, [pc, #328]	; (8006744 <HAL_GPIO_Init+0x344>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d013      	beq.n	8006626 <HAL_GPIO_Init+0x226>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a51      	ldr	r2, [pc, #324]	; (8006748 <HAL_GPIO_Init+0x348>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00d      	beq.n	8006622 <HAL_GPIO_Init+0x222>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a50      	ldr	r2, [pc, #320]	; (800674c <HAL_GPIO_Init+0x34c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d007      	beq.n	800661e <HAL_GPIO_Init+0x21e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a4f      	ldr	r2, [pc, #316]	; (8006750 <HAL_GPIO_Init+0x350>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d101      	bne.n	800661a <HAL_GPIO_Init+0x21a>
 8006616:	2309      	movs	r3, #9
 8006618:	e012      	b.n	8006640 <HAL_GPIO_Init+0x240>
 800661a:	230a      	movs	r3, #10
 800661c:	e010      	b.n	8006640 <HAL_GPIO_Init+0x240>
 800661e:	2308      	movs	r3, #8
 8006620:	e00e      	b.n	8006640 <HAL_GPIO_Init+0x240>
 8006622:	2307      	movs	r3, #7
 8006624:	e00c      	b.n	8006640 <HAL_GPIO_Init+0x240>
 8006626:	2306      	movs	r3, #6
 8006628:	e00a      	b.n	8006640 <HAL_GPIO_Init+0x240>
 800662a:	2305      	movs	r3, #5
 800662c:	e008      	b.n	8006640 <HAL_GPIO_Init+0x240>
 800662e:	2304      	movs	r3, #4
 8006630:	e006      	b.n	8006640 <HAL_GPIO_Init+0x240>
 8006632:	2303      	movs	r3, #3
 8006634:	e004      	b.n	8006640 <HAL_GPIO_Init+0x240>
 8006636:	2302      	movs	r3, #2
 8006638:	e002      	b.n	8006640 <HAL_GPIO_Init+0x240>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <HAL_GPIO_Init+0x240>
 800663e:	2300      	movs	r3, #0
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	f002 0203 	and.w	r2, r2, #3
 8006646:	0092      	lsls	r2, r2, #2
 8006648:	4093      	lsls	r3, r2
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4313      	orrs	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006650:	4935      	ldr	r1, [pc, #212]	; (8006728 <HAL_GPIO_Init+0x328>)
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	089b      	lsrs	r3, r3, #2
 8006656:	3302      	adds	r3, #2
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800665e:	4b3d      	ldr	r3, [pc, #244]	; (8006754 <HAL_GPIO_Init+0x354>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	43db      	mvns	r3, r3
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	4013      	ands	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006682:	4a34      	ldr	r2, [pc, #208]	; (8006754 <HAL_GPIO_Init+0x354>)
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006688:	4b32      	ldr	r3, [pc, #200]	; (8006754 <HAL_GPIO_Init+0x354>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	43db      	mvns	r3, r3
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	4013      	ands	r3, r2
 8006696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066ac:	4a29      	ldr	r2, [pc, #164]	; (8006754 <HAL_GPIO_Init+0x354>)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066b2:	4b28      	ldr	r3, [pc, #160]	; (8006754 <HAL_GPIO_Init+0x354>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066d6:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <HAL_GPIO_Init+0x354>)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066dc:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <HAL_GPIO_Init+0x354>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006700:	4a14      	ldr	r2, [pc, #80]	; (8006754 <HAL_GPIO_Init+0x354>)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	3301      	adds	r3, #1
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	2b0f      	cmp	r3, #15
 8006710:	f67f ae86 	bls.w	8006420 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop
 8006718:	3724      	adds	r7, #36	; 0x24
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800
 8006728:	40013800 	.word	0x40013800
 800672c:	40020000 	.word	0x40020000
 8006730:	40020400 	.word	0x40020400
 8006734:	40020800 	.word	0x40020800
 8006738:	40020c00 	.word	0x40020c00
 800673c:	40021000 	.word	0x40021000
 8006740:	40021400 	.word	0x40021400
 8006744:	40021800 	.word	0x40021800
 8006748:	40021c00 	.word	0x40021c00
 800674c:	40022000 	.word	0x40022000
 8006750:	40022400 	.word	0x40022400
 8006754:	40013c00 	.word	0x40013c00

08006758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e07f      	b.n	800686a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fa f9e8 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2224      	movs	r2, #36	; 0x24
 8006788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0201 	bic.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d107      	bne.n	80067d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067ce:	609a      	str	r2, [r3, #8]
 80067d0:	e006      	b.n	80067e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80067de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d104      	bne.n	80067f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6859      	ldr	r1, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <HAL_I2C_Init+0x11c>)
 80067fe:	430b      	orrs	r3, r1
 8006800:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006810:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	ea42 0103 	orr.w	r1, r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	021a      	lsls	r2, r3, #8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69d9      	ldr	r1, [r3, #28]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1a      	ldr	r2, [r3, #32]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	02008000 	.word	0x02008000

08006878 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b20      	cmp	r3, #32
 800688c:	d138      	bne.n	8006900 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006898:	2302      	movs	r3, #2
 800689a:	e032      	b.n	8006902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2224      	movs	r2, #36	; 0x24
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6819      	ldr	r1, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	e000      	b.n	8006902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006900:	2302      	movs	r3, #2
  }
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b20      	cmp	r3, #32
 8006922:	d139      	bne.n	8006998 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800692e:	2302      	movs	r3, #2
 8006930:	e033      	b.n	800699a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2224      	movs	r2, #36	; 0x24
 800693e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0201 	bic.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006960:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	e000      	b.n	800699a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006998:	2302      	movs	r3, #2
  }
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e0bf      	b.n	8006b3a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d106      	bne.n	80069d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fa f9c6 	bl	8000d60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80069ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6999      	ldr	r1, [r3, #24]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6899      	ldr	r1, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b4a      	ldr	r3, [pc, #296]	; (8006b44 <HAL_LTDC_Init+0x19c>)
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6899      	ldr	r1, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68d9      	ldr	r1, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b3e      	ldr	r3, [pc, #248]	; (8006b44 <HAL_LTDC_Init+0x19c>)
 8006a4a:	400b      	ands	r3, r1
 8006a4c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68d9      	ldr	r1, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1a      	ldr	r2, [r3, #32]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6919      	ldr	r1, [r3, #16]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b33      	ldr	r3, [pc, #204]	; (8006b44 <HAL_LTDC_Init+0x19c>)
 8006a78:	400b      	ands	r3, r1
 8006a7a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	041b      	lsls	r3, r3, #16
 8006a82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6919      	ldr	r1, [r3, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6959      	ldr	r1, [r3, #20]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <HAL_LTDC_Init+0x19c>)
 8006aa6:	400b      	ands	r3, r1
 8006aa8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6959      	ldr	r1, [r3, #20]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0206 	orr.w	r2, r2, #6
 8006b16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	f000f800 	.word	0xf000f800

08006b48 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d023      	beq.n	8006bb2 <HAL_LTDC_IRQHandler+0x6a>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01e      	beq.n	8006bb2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0204 	bic.w	r2, r2, #4
 8006b82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2204      	movs	r2, #4
 8006b8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b92:	f043 0201 	orr.w	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f86f 	bl	8006c90 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d023      	beq.n	8006c04 <HAL_LTDC_IRQHandler+0xbc>
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01e      	beq.n	8006c04 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0202 	bic.w	r2, r2, #2
 8006bd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006be4:	f043 0202 	orr.w	r2, r3, #2
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f846 	bl	8006c90 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d01b      	beq.n	8006c46 <HAL_LTDC_IRQHandler+0xfe>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d016      	beq.n	8006c46 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0201 	bic.w	r2, r2, #1
 8006c26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fc ff81 	bl	8003b48 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01b      	beq.n	8006c88 <HAL_LTDC_IRQHandler+0x140>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d016      	beq.n	8006c88 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0208 	bic.w	r2, r2, #8
 8006c68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2208      	movs	r2, #8
 8006c70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f80e 	bl	8006ca4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006cb8:	b5b0      	push	{r4, r5, r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_LTDC_ConfigLayer+0x1a>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e02c      	b.n	8006d2c <HAL_LTDC_ConfigLayer+0x74>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2134      	movs	r1, #52	; 0x34
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	4413      	add	r3, r2
 8006cee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	68b9      	ldr	r1, [r7, #8]
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 f849 	bl	8006da4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2201      	movs	r2, #1
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bdb0      	pop	{r4, r5, r7, pc}

08006d34 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_LTDC_ProgramLineEvent+0x18>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e023      	b.n	8006d94 <HAL_LTDC_ProgramLineEvent+0x60>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0201 	bic.w	r2, r2, #1
 8006d6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006d6c:	4a0c      	ldr	r2, [pc, #48]	; (8006da0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0201 	orr.w	r2, r2, #1
 8006d80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40016800 	.word	0x40016800

08006da4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b089      	sub	sp, #36	; 0x24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	0c1b      	lsrs	r3, r3, #16
 8006dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dc0:	4413      	add	r3, r2
 8006dc2:	041b      	lsls	r3, r3, #16
 8006dc4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	01db      	lsls	r3, r3, #7
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3384      	adds	r3, #132	; 0x84
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	6812      	ldr	r2, [r2, #0]
 8006dda:	4611      	mov	r1, r2
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	01d2      	lsls	r2, r2, #7
 8006de0:	440a      	add	r2, r1
 8006de2:	3284      	adds	r2, #132	; 0x84
 8006de4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006de8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfa:	4413      	add	r3, r2
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4619      	mov	r1, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	01db      	lsls	r3, r3, #7
 8006e08:	440b      	add	r3, r1
 8006e0a:	3384      	adds	r3, #132	; 0x84
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e22:	4413      	add	r3, r2
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	01db      	lsls	r3, r3, #7
 8006e32:	4413      	add	r3, r2
 8006e34:	3384      	adds	r3, #132	; 0x84
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	01d2      	lsls	r2, r2, #7
 8006e42:	440a      	add	r2, r1
 8006e44:	3284      	adds	r2, #132	; 0x84
 8006e46:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e4a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e5a:	4413      	add	r3, r2
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4619      	mov	r1, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	01db      	lsls	r3, r3, #7
 8006e68:	440b      	add	r3, r1
 8006e6a:	3384      	adds	r3, #132	; 0x84
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	01db      	lsls	r3, r3, #7
 8006e7e:	4413      	add	r3, r2
 8006e80:	3384      	adds	r3, #132	; 0x84
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	01d2      	lsls	r2, r2, #7
 8006e8e:	440a      	add	r2, r1
 8006e90:	3284      	adds	r2, #132	; 0x84
 8006e92:	f023 0307 	bic.w	r3, r3, #7
 8006e96:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	01db      	lsls	r3, r3, #7
 8006ea2:	4413      	add	r3, r2
 8006ea4:	3384      	adds	r3, #132	; 0x84
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	061b      	lsls	r3, r3, #24
 8006ec8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	01db      	lsls	r3, r3, #7
 8006ed4:	4413      	add	r3, r2
 8006ed6:	3384      	adds	r3, #132	; 0x84
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	01db      	lsls	r3, r3, #7
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3384      	adds	r3, #132	; 0x84
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2300      	movs	r3, #0
 8006eec:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	431a      	orrs	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4619      	mov	r1, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	01db      	lsls	r3, r3, #7
 8006f08:	440b      	add	r3, r1
 8006f0a:	3384      	adds	r3, #132	; 0x84
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	01db      	lsls	r3, r3, #7
 8006f1e:	4413      	add	r3, r2
 8006f20:	3384      	adds	r3, #132	; 0x84
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	01d2      	lsls	r2, r2, #7
 8006f2e:	440a      	add	r2, r1
 8006f30:	3284      	adds	r2, #132	; 0x84
 8006f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	01db      	lsls	r3, r3, #7
 8006f42:	4413      	add	r3, r2
 8006f44:	3384      	adds	r3, #132	; 0x84
 8006f46:	461a      	mov	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	01db      	lsls	r3, r3, #7
 8006f58:	4413      	add	r3, r2
 8006f5a:	3384      	adds	r3, #132	; 0x84
 8006f5c:	69da      	ldr	r2, [r3, #28]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	01db      	lsls	r3, r3, #7
 8006f68:	440b      	add	r3, r1
 8006f6a:	3384      	adds	r3, #132	; 0x84
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4b58      	ldr	r3, [pc, #352]	; (80070d0 <LTDC_SetConfig+0x32c>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	68f9      	ldr	r1, [r7, #12]
 8006f7e:	6809      	ldr	r1, [r1, #0]
 8006f80:	4608      	mov	r0, r1
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	01c9      	lsls	r1, r1, #7
 8006f86:	4401      	add	r1, r0
 8006f88:	3184      	adds	r1, #132	; 0x84
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	01db      	lsls	r3, r3, #7
 8006f98:	4413      	add	r3, r2
 8006f9a:	3384      	adds	r3, #132	; 0x84
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	01db      	lsls	r3, r3, #7
 8006fa8:	4413      	add	r3, r2
 8006faa:	3384      	adds	r3, #132	; 0x84
 8006fac:	461a      	mov	r2, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	01db      	lsls	r3, r3, #7
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3384      	adds	r3, #132	; 0x84
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	e01b      	b.n	800700e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d102      	bne.n	8006fe4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	e014      	b.n	800700e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d00b      	beq.n	8007004 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d007      	beq.n	8007004 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d003      	beq.n	8007004 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007000:	2b07      	cmp	r3, #7
 8007002:	d102      	bne.n	800700a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007004:	2302      	movs	r3, #2
 8007006:	61fb      	str	r3, [r7, #28]
 8007008:	e001      	b.n	800700e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800700a:	2301      	movs	r3, #1
 800700c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	01db      	lsls	r3, r3, #7
 8007018:	4413      	add	r3, r2
 800701a:	3384      	adds	r3, #132	; 0x84
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	6812      	ldr	r2, [r2, #0]
 8007022:	4611      	mov	r1, r2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	01d2      	lsls	r2, r2, #7
 8007028:	440a      	add	r2, r1
 800702a:	3284      	adds	r2, #132	; 0x84
 800702c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007030:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	69fa      	ldr	r2, [r7, #28]
 8007038:	fb02 f303 	mul.w	r3, r2, r3
 800703c:	041a      	lsls	r2, r3, #16
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6859      	ldr	r1, [r3, #4]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	1acb      	subs	r3, r1, r3
 8007048:	69f9      	ldr	r1, [r7, #28]
 800704a:	fb01 f303 	mul.w	r3, r1, r3
 800704e:	3303      	adds	r3, #3
 8007050:	68f9      	ldr	r1, [r7, #12]
 8007052:	6809      	ldr	r1, [r1, #0]
 8007054:	4608      	mov	r0, r1
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	01c9      	lsls	r1, r1, #7
 800705a:	4401      	add	r1, r0
 800705c:	3184      	adds	r1, #132	; 0x84
 800705e:	4313      	orrs	r3, r2
 8007060:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	01db      	lsls	r3, r3, #7
 800706c:	4413      	add	r3, r2
 800706e:	3384      	adds	r3, #132	; 0x84
 8007070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4619      	mov	r1, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	01db      	lsls	r3, r3, #7
 800707c:	440b      	add	r3, r1
 800707e:	3384      	adds	r3, #132	; 0x84
 8007080:	4619      	mov	r1, r3
 8007082:	4b14      	ldr	r3, [pc, #80]	; (80070d4 <LTDC_SetConfig+0x330>)
 8007084:	4013      	ands	r3, r2
 8007086:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	01db      	lsls	r3, r3, #7
 8007092:	4413      	add	r3, r2
 8007094:	3384      	adds	r3, #132	; 0x84
 8007096:	461a      	mov	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	01db      	lsls	r3, r3, #7
 80070a8:	4413      	add	r3, r2
 80070aa:	3384      	adds	r3, #132	; 0x84
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	4611      	mov	r1, r2
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	01d2      	lsls	r2, r2, #7
 80070b8:	440a      	add	r2, r1
 80070ba:	3284      	adds	r2, #132	; 0x84
 80070bc:	f043 0301 	orr.w	r3, r3, #1
 80070c0:	6013      	str	r3, [r2, #0]
}
 80070c2:	bf00      	nop
 80070c4:	3724      	adds	r7, #36	; 0x24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	fffff8f8 	.word	0xfffff8f8
 80070d4:	fffff800 	.word	0xfffff800

080070d8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af02      	add	r7, sp, #8
 80070de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80070e0:	f7fe fd8a 	bl	8005bf8 <HAL_GetTick>
 80070e4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e067      	b.n	80071c0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7fa f8d9 	bl	80012bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800710a:	f241 3188 	movw	r1, #5000	; 0x1388
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f85e 	bl	80071d0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	3b01      	subs	r3, #1
 8007124:	021a      	lsls	r2, r3, #8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	2120      	movs	r1, #32
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f856 	bl	80071ec <QSPI_WaitFlagStateUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d135      	bne.n	80071b6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b1d      	ldr	r3, [pc, #116]	; (80071c8 <HAL_QSPI_Init+0xf0>)
 8007152:	4013      	ands	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6852      	ldr	r2, [r2, #4]
 8007158:	0611      	lsls	r1, r2, #24
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68d2      	ldr	r2, [r2, #12]
 800715e:	4311      	orrs	r1, r2
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	69d2      	ldr	r2, [r2, #28]
 8007164:	4311      	orrs	r1, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6a12      	ldr	r2, [r2, #32]
 800716a:	4311      	orrs	r1, r2
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6812      	ldr	r2, [r2, #0]
 8007170:	430b      	orrs	r3, r1
 8007172:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	4b14      	ldr	r3, [pc, #80]	; (80071cc <HAL_QSPI_Init+0xf4>)
 800717c:	4013      	ands	r3, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6912      	ldr	r2, [r2, #16]
 8007182:	0411      	lsls	r1, r2, #16
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6952      	ldr	r2, [r2, #20]
 8007188:	4311      	orrs	r1, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6992      	ldr	r2, [r2, #24]
 800718e:	4311      	orrs	r1, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	430b      	orrs	r3, r1
 8007196:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80071be:	7afb      	ldrb	r3, [r7, #11]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	00ffff2f 	.word	0x00ffff2f
 80071cc:	ffe0f8fe 	.word	0xffe0f8fe

080071d0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	649a      	str	r2, [r3, #72]	; 0x48
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80071fc:	e01a      	b.n	8007234 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d016      	beq.n	8007234 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007206:	f7fe fcf7 	bl	8005bf8 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	429a      	cmp	r2, r3
 8007214:	d302      	bcc.n	800721c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10b      	bne.n	8007234 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2204      	movs	r2, #4
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007228:	f043 0201 	orr.w	r2, r3, #1
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e00e      	b.n	8007252 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4013      	ands	r3, r2
 800723e:	2b00      	cmp	r3, #0
 8007240:	bf14      	ite	ne
 8007242:	2301      	movne	r3, #1
 8007244:	2300      	moveq	r3, #0
 8007246:	b2db      	uxtb	r3, r3
 8007248:	461a      	mov	r2, r3
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	429a      	cmp	r2, r3
 800724e:	d1d6      	bne.n	80071fe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007264:	2300      	movs	r3, #0
 8007266:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e29b      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 8087 	beq.w	800738e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007280:	4b96      	ldr	r3, [pc, #600]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 030c 	and.w	r3, r3, #12
 8007288:	2b04      	cmp	r3, #4
 800728a:	d00c      	beq.n	80072a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800728c:	4b93      	ldr	r3, [pc, #588]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 030c 	and.w	r3, r3, #12
 8007294:	2b08      	cmp	r3, #8
 8007296:	d112      	bne.n	80072be <HAL_RCC_OscConfig+0x62>
 8007298:	4b90      	ldr	r3, [pc, #576]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072a4:	d10b      	bne.n	80072be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072a6:	4b8d      	ldr	r3, [pc, #564]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d06c      	beq.n	800738c <HAL_RCC_OscConfig+0x130>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d168      	bne.n	800738c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e275      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c6:	d106      	bne.n	80072d6 <HAL_RCC_OscConfig+0x7a>
 80072c8:	4b84      	ldr	r3, [pc, #528]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a83      	ldr	r2, [pc, #524]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	e02e      	b.n	8007334 <HAL_RCC_OscConfig+0xd8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10c      	bne.n	80072f8 <HAL_RCC_OscConfig+0x9c>
 80072de:	4b7f      	ldr	r3, [pc, #508]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a7e      	ldr	r2, [pc, #504]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	4b7c      	ldr	r3, [pc, #496]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a7b      	ldr	r2, [pc, #492]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	e01d      	b.n	8007334 <HAL_RCC_OscConfig+0xd8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007300:	d10c      	bne.n	800731c <HAL_RCC_OscConfig+0xc0>
 8007302:	4b76      	ldr	r3, [pc, #472]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a75      	ldr	r2, [pc, #468]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	4b73      	ldr	r3, [pc, #460]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a72      	ldr	r2, [pc, #456]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e00b      	b.n	8007334 <HAL_RCC_OscConfig+0xd8>
 800731c:	4b6f      	ldr	r3, [pc, #444]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a6e      	ldr	r2, [pc, #440]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	4b6c      	ldr	r3, [pc, #432]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6b      	ldr	r2, [pc, #428]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800732e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d013      	beq.n	8007364 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fe fc5c 	bl	8005bf8 <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007344:	f7fe fc58 	bl	8005bf8 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b64      	cmp	r3, #100	; 0x64
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e229      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007356:	4b61      	ldr	r3, [pc, #388]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0xe8>
 8007362:	e014      	b.n	800738e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007364:	f7fe fc48 	bl	8005bf8 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800736c:	f7fe fc44 	bl	8005bf8 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b64      	cmp	r3, #100	; 0x64
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e215      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800737e:	4b57      	ldr	r3, [pc, #348]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f0      	bne.n	800736c <HAL_RCC_OscConfig+0x110>
 800738a:	e000      	b.n	800738e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800738c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d069      	beq.n	800746e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800739a:	4b50      	ldr	r3, [pc, #320]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 030c 	and.w	r3, r3, #12
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073a6:	4b4d      	ldr	r3, [pc, #308]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 030c 	and.w	r3, r3, #12
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d11c      	bne.n	80073ec <HAL_RCC_OscConfig+0x190>
 80073b2:	4b4a      	ldr	r3, [pc, #296]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d116      	bne.n	80073ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073be:	4b47      	ldr	r3, [pc, #284]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <HAL_RCC_OscConfig+0x17a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d001      	beq.n	80073d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e1e9      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d6:	4b41      	ldr	r3, [pc, #260]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	493d      	ldr	r1, [pc, #244]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ea:	e040      	b.n	800746e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d023      	beq.n	800743c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073f4:	4b39      	ldr	r3, [pc, #228]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a38      	ldr	r2, [pc, #224]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7fe fbfa 	bl	8005bf8 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007408:	f7fe fbf6 	bl	8005bf8 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e1c7      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800741a:	4b30      	ldr	r3, [pc, #192]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0f0      	beq.n	8007408 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007426:	4b2d      	ldr	r3, [pc, #180]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	4929      	ldr	r1, [pc, #164]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007436:	4313      	orrs	r3, r2
 8007438:	600b      	str	r3, [r1, #0]
 800743a:	e018      	b.n	800746e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800743c:	4b27      	ldr	r3, [pc, #156]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a26      	ldr	r2, [pc, #152]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007442:	f023 0301 	bic.w	r3, r3, #1
 8007446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fe fbd6 	bl	8005bf8 <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007450:	f7fe fbd2 	bl	8005bf8 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e1a3      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007462:	4b1e      	ldr	r3, [pc, #120]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f0      	bne.n	8007450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d038      	beq.n	80074ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d019      	beq.n	80074b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007482:	4b16      	ldr	r3, [pc, #88]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007486:	4a15      	ldr	r2, [pc, #84]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748e:	f7fe fbb3 	bl	8005bf8 <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007494:	e008      	b.n	80074a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007496:	f7fe fbaf 	bl	8005bf8 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e180      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80074aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <HAL_RCC_OscConfig+0x23a>
 80074b4:	e01a      	b.n	80074ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80074b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ba:	4a08      	ldr	r2, [pc, #32]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c2:	f7fe fb99 	bl	8005bf8 <HAL_GetTick>
 80074c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074c8:	e00a      	b.n	80074e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ca:	f7fe fb95 	bl	8005bf8 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d903      	bls.n	80074e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e166      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
 80074dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e0:	4b92      	ldr	r3, [pc, #584]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80074e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1ee      	bne.n	80074ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80a4 	beq.w	8007642 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074fa:	4b8c      	ldr	r3, [pc, #560]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10d      	bne.n	8007522 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007506:	4b89      	ldr	r3, [pc, #548]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	4a88      	ldr	r2, [pc, #544]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 800750c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007510:	6413      	str	r3, [r2, #64]	; 0x40
 8007512:	4b86      	ldr	r3, [pc, #536]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751a:	60bb      	str	r3, [r7, #8]
 800751c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800751e:	2301      	movs	r3, #1
 8007520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007522:	4b83      	ldr	r3, [pc, #524]	; (8007730 <HAL_RCC_OscConfig+0x4d4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752a:	2b00      	cmp	r3, #0
 800752c:	d118      	bne.n	8007560 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800752e:	4b80      	ldr	r3, [pc, #512]	; (8007730 <HAL_RCC_OscConfig+0x4d4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a7f      	ldr	r2, [pc, #508]	; (8007730 <HAL_RCC_OscConfig+0x4d4>)
 8007534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800753a:	f7fe fb5d 	bl	8005bf8 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007540:	e008      	b.n	8007554 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007542:	f7fe fb59 	bl	8005bf8 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b64      	cmp	r3, #100	; 0x64
 800754e:	d901      	bls.n	8007554 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e12a      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007554:	4b76      	ldr	r3, [pc, #472]	; (8007730 <HAL_RCC_OscConfig+0x4d4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0f0      	beq.n	8007542 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d106      	bne.n	8007576 <HAL_RCC_OscConfig+0x31a>
 8007568:	4b70      	ldr	r3, [pc, #448]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 800756a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756c:	4a6f      	ldr	r2, [pc, #444]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	6713      	str	r3, [r2, #112]	; 0x70
 8007574:	e02d      	b.n	80075d2 <HAL_RCC_OscConfig+0x376>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10c      	bne.n	8007598 <HAL_RCC_OscConfig+0x33c>
 800757e:	4b6b      	ldr	r3, [pc, #428]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007582:	4a6a      	ldr	r2, [pc, #424]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	6713      	str	r3, [r2, #112]	; 0x70
 800758a:	4b68      	ldr	r3, [pc, #416]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 800758c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758e:	4a67      	ldr	r2, [pc, #412]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007590:	f023 0304 	bic.w	r3, r3, #4
 8007594:	6713      	str	r3, [r2, #112]	; 0x70
 8007596:	e01c      	b.n	80075d2 <HAL_RCC_OscConfig+0x376>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b05      	cmp	r3, #5
 800759e:	d10c      	bne.n	80075ba <HAL_RCC_OscConfig+0x35e>
 80075a0:	4b62      	ldr	r3, [pc, #392]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	4a61      	ldr	r2, [pc, #388]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80075a6:	f043 0304 	orr.w	r3, r3, #4
 80075aa:	6713      	str	r3, [r2, #112]	; 0x70
 80075ac:	4b5f      	ldr	r3, [pc, #380]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b0:	4a5e      	ldr	r2, [pc, #376]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	6713      	str	r3, [r2, #112]	; 0x70
 80075b8:	e00b      	b.n	80075d2 <HAL_RCC_OscConfig+0x376>
 80075ba:	4b5c      	ldr	r3, [pc, #368]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	4a5b      	ldr	r2, [pc, #364]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	6713      	str	r3, [r2, #112]	; 0x70
 80075c6:	4b59      	ldr	r3, [pc, #356]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	4a58      	ldr	r2, [pc, #352]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80075cc:	f023 0304 	bic.w	r3, r3, #4
 80075d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d015      	beq.n	8007606 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075da:	f7fe fb0d 	bl	8005bf8 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e0:	e00a      	b.n	80075f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e2:	f7fe fb09 	bl	8005bf8 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e0d8      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f8:	4b4c      	ldr	r3, [pc, #304]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80075fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0ee      	beq.n	80075e2 <HAL_RCC_OscConfig+0x386>
 8007604:	e014      	b.n	8007630 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007606:	f7fe faf7 	bl	8005bf8 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800760c:	e00a      	b.n	8007624 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800760e:	f7fe faf3 	bl	8005bf8 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	f241 3288 	movw	r2, #5000	; 0x1388
 800761c:	4293      	cmp	r3, r2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e0c2      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007624:	4b41      	ldr	r3, [pc, #260]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1ee      	bne.n	800760e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d105      	bne.n	8007642 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007636:	4b3d      	ldr	r3, [pc, #244]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	4a3c      	ldr	r2, [pc, #240]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 800763c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80ae 	beq.w	80077a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800764c:	4b37      	ldr	r3, [pc, #220]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 030c 	and.w	r3, r3, #12
 8007654:	2b08      	cmp	r3, #8
 8007656:	d06d      	beq.n	8007734 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d14b      	bne.n	80076f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007660:	4b32      	ldr	r3, [pc, #200]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a31      	ldr	r2, [pc, #196]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800766a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766c:	f7fe fac4 	bl	8005bf8 <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007672:	e008      	b.n	8007686 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007674:	f7fe fac0 	bl	8005bf8 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e091      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007686:	4b29      	ldr	r3, [pc, #164]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1f0      	bne.n	8007674 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69da      	ldr	r2, [r3, #28]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	019b      	lsls	r3, r3, #6
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	3b01      	subs	r3, #1
 80076ac:	041b      	lsls	r3, r3, #16
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	061b      	lsls	r3, r3, #24
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	071b      	lsls	r3, r3, #28
 80076be:	491b      	ldr	r1, [pc, #108]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076c4:	4b19      	ldr	r3, [pc, #100]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a18      	ldr	r2, [pc, #96]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80076ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d0:	f7fe fa92 	bl	8005bf8 <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076d8:	f7fe fa8e 	bl	8005bf8 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e05f      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ea:	4b10      	ldr	r3, [pc, #64]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0x47c>
 80076f6:	e057      	b.n	80077a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f8:	4b0c      	ldr	r3, [pc, #48]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a0b      	ldr	r2, [pc, #44]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 80076fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007704:	f7fe fa78 	bl	8005bf8 <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800770c:	f7fe fa74 	bl	8005bf8 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e045      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800771e:	4b03      	ldr	r3, [pc, #12]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f0      	bne.n	800770c <HAL_RCC_OscConfig+0x4b0>
 800772a:	e03d      	b.n	80077a8 <HAL_RCC_OscConfig+0x54c>
 800772c:	40023800 	.word	0x40023800
 8007730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007734:	4b1f      	ldr	r3, [pc, #124]	; (80077b4 <HAL_RCC_OscConfig+0x558>)
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d030      	beq.n	80077a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800774c:	429a      	cmp	r2, r3
 800774e:	d129      	bne.n	80077a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800775a:	429a      	cmp	r2, r3
 800775c:	d122      	bne.n	80077a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007764:	4013      	ands	r3, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800776a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800776c:	4293      	cmp	r3, r2
 800776e:	d119      	bne.n	80077a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	3b01      	subs	r3, #1
 800777e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007780:	429a      	cmp	r2, r3
 8007782:	d10f      	bne.n	80077a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007790:	429a      	cmp	r2, r3
 8007792:	d107      	bne.n	80077a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d001      	beq.n	80077a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40023800 	.word	0x40023800

080077b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e0d0      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077d0:	4b6a      	ldr	r3, [pc, #424]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d910      	bls.n	8007800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077de:	4b67      	ldr	r3, [pc, #412]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f023 020f 	bic.w	r2, r3, #15
 80077e6:	4965      	ldr	r1, [pc, #404]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ee:	4b63      	ldr	r3, [pc, #396]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d001      	beq.n	8007800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0b8      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d020      	beq.n	800784e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007818:	4b59      	ldr	r3, [pc, #356]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	4a58      	ldr	r2, [pc, #352]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800781e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007830:	4b53      	ldr	r3, [pc, #332]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	4a52      	ldr	r2, [pc, #328]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 8007836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800783a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800783c:	4b50      	ldr	r3, [pc, #320]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	494d      	ldr	r1, [pc, #308]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800784a:	4313      	orrs	r3, r2
 800784c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d040      	beq.n	80078dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d107      	bne.n	8007872 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007862:	4b47      	ldr	r3, [pc, #284]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d115      	bne.n	800789a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e07f      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d107      	bne.n	800788a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800787a:	4b41      	ldr	r3, [pc, #260]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e073      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800788a:	4b3d      	ldr	r3, [pc, #244]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e06b      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800789a:	4b39      	ldr	r3, [pc, #228]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f023 0203 	bic.w	r2, r3, #3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	4936      	ldr	r1, [pc, #216]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ac:	f7fe f9a4 	bl	8005bf8 <HAL_GetTick>
 80078b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b2:	e00a      	b.n	80078ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b4:	f7fe f9a0 	bl	8005bf8 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e053      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ca:	4b2d      	ldr	r3, [pc, #180]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 020c 	and.w	r2, r3, #12
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	429a      	cmp	r2, r3
 80078da:	d1eb      	bne.n	80078b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078dc:	4b27      	ldr	r3, [pc, #156]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d210      	bcs.n	800790c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ea:	4b24      	ldr	r3, [pc, #144]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f023 020f 	bic.w	r2, r3, #15
 80078f2:	4922      	ldr	r1, [pc, #136]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fa:	4b20      	ldr	r3, [pc, #128]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d001      	beq.n	800790c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e032      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007918:	4b19      	ldr	r3, [pc, #100]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	4916      	ldr	r1, [pc, #88]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 8007926:	4313      	orrs	r3, r2
 8007928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0308 	and.w	r3, r3, #8
 8007932:	2b00      	cmp	r3, #0
 8007934:	d009      	beq.n	800794a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007936:	4b12      	ldr	r3, [pc, #72]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	490e      	ldr	r1, [pc, #56]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 8007946:	4313      	orrs	r3, r2
 8007948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800794a:	f000 f821 	bl	8007990 <HAL_RCC_GetSysClockFreq>
 800794e:	4602      	mov	r2, r0
 8007950:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	091b      	lsrs	r3, r3, #4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	490a      	ldr	r1, [pc, #40]	; (8007984 <HAL_RCC_ClockConfig+0x1cc>)
 800795c:	5ccb      	ldrb	r3, [r1, r3]
 800795e:	fa22 f303 	lsr.w	r3, r2, r3
 8007962:	4a09      	ldr	r2, [pc, #36]	; (8007988 <HAL_RCC_ClockConfig+0x1d0>)
 8007964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007966:	4b09      	ldr	r3, [pc, #36]	; (800798c <HAL_RCC_ClockConfig+0x1d4>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	f7f9 fd50 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40023c00 	.word	0x40023c00
 8007980:	40023800 	.word	0x40023800
 8007984:	0801dcec 	.word	0x0801dcec
 8007988:	2000000c 	.word	0x2000000c
 800798c:	20000010 	.word	0x20000010

08007990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	607b      	str	r3, [r7, #4]
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	2300      	movs	r3, #0
 80079a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079a8:	4b67      	ldr	r3, [pc, #412]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f003 030c 	and.w	r3, r3, #12
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d00d      	beq.n	80079d0 <HAL_RCC_GetSysClockFreq+0x40>
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	f200 80bd 	bhi.w	8007b34 <HAL_RCC_GetSysClockFreq+0x1a4>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0x34>
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d003      	beq.n	80079ca <HAL_RCC_GetSysClockFreq+0x3a>
 80079c2:	e0b7      	b.n	8007b34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079c4:	4b61      	ldr	r3, [pc, #388]	; (8007b4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80079c6:	60bb      	str	r3, [r7, #8]
      break;
 80079c8:	e0b7      	b.n	8007b3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079ca:	4b61      	ldr	r3, [pc, #388]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80079cc:	60bb      	str	r3, [r7, #8]
      break;
 80079ce:	e0b4      	b.n	8007b3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079d0:	4b5d      	ldr	r3, [pc, #372]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079da:	4b5b      	ldr	r3, [pc, #364]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d04d      	beq.n	8007a82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079e6:	4b58      	ldr	r3, [pc, #352]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	099b      	lsrs	r3, r3, #6
 80079ec:	461a      	mov	r2, r3
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079f6:	f04f 0100 	mov.w	r1, #0
 80079fa:	ea02 0800 	and.w	r8, r2, r0
 80079fe:	ea03 0901 	and.w	r9, r3, r1
 8007a02:	4640      	mov	r0, r8
 8007a04:	4649      	mov	r1, r9
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	014b      	lsls	r3, r1, #5
 8007a10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a14:	0142      	lsls	r2, r0, #5
 8007a16:	4610      	mov	r0, r2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	ebb0 0008 	subs.w	r0, r0, r8
 8007a1e:	eb61 0109 	sbc.w	r1, r1, r9
 8007a22:	f04f 0200 	mov.w	r2, #0
 8007a26:	f04f 0300 	mov.w	r3, #0
 8007a2a:	018b      	lsls	r3, r1, #6
 8007a2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a30:	0182      	lsls	r2, r0, #6
 8007a32:	1a12      	subs	r2, r2, r0
 8007a34:	eb63 0301 	sbc.w	r3, r3, r1
 8007a38:	f04f 0000 	mov.w	r0, #0
 8007a3c:	f04f 0100 	mov.w	r1, #0
 8007a40:	00d9      	lsls	r1, r3, #3
 8007a42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a46:	00d0      	lsls	r0, r2, #3
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	eb12 0208 	adds.w	r2, r2, r8
 8007a50:	eb43 0309 	adc.w	r3, r3, r9
 8007a54:	f04f 0000 	mov.w	r0, #0
 8007a58:	f04f 0100 	mov.w	r1, #0
 8007a5c:	0259      	lsls	r1, r3, #9
 8007a5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007a62:	0250      	lsls	r0, r2, #9
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	f7f8 fc34 	bl	80002e0 <__aeabi_uldivmod>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e04a      	b.n	8007b18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a82:	4b31      	ldr	r3, [pc, #196]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	099b      	lsrs	r3, r3, #6
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a92:	f04f 0100 	mov.w	r1, #0
 8007a96:	ea02 0400 	and.w	r4, r2, r0
 8007a9a:	ea03 0501 	and.w	r5, r3, r1
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	014b      	lsls	r3, r1, #5
 8007aac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ab0:	0142      	lsls	r2, r0, #5
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	1b00      	subs	r0, r0, r4
 8007ab8:	eb61 0105 	sbc.w	r1, r1, r5
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	018b      	lsls	r3, r1, #6
 8007ac6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007aca:	0182      	lsls	r2, r0, #6
 8007acc:	1a12      	subs	r2, r2, r0
 8007ace:	eb63 0301 	sbc.w	r3, r3, r1
 8007ad2:	f04f 0000 	mov.w	r0, #0
 8007ad6:	f04f 0100 	mov.w	r1, #0
 8007ada:	00d9      	lsls	r1, r3, #3
 8007adc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ae0:	00d0      	lsls	r0, r2, #3
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	1912      	adds	r2, r2, r4
 8007ae8:	eb45 0303 	adc.w	r3, r5, r3
 8007aec:	f04f 0000 	mov.w	r0, #0
 8007af0:	f04f 0100 	mov.w	r1, #0
 8007af4:	0299      	lsls	r1, r3, #10
 8007af6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007afa:	0290      	lsls	r0, r2, #10
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4610      	mov	r0, r2
 8007b02:	4619      	mov	r1, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	f7f8 fbe8 	bl	80002e0 <__aeabi_uldivmod>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4613      	mov	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007b18:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	0c1b      	lsrs	r3, r3, #16
 8007b1e:	f003 0303 	and.w	r3, r3, #3
 8007b22:	3301      	adds	r3, #1
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b30:	60bb      	str	r3, [r7, #8]
      break;
 8007b32:	e002      	b.n	8007b3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007b36:	60bb      	str	r3, [r7, #8]
      break;
 8007b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007b46:	bf00      	nop
 8007b48:	40023800 	.word	0x40023800
 8007b4c:	00f42400 	.word	0x00f42400
 8007b50:	007a1200 	.word	0x007a1200

08007b54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b54:	b480      	push	{r7}
 8007b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b58:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	2000000c 	.word	0x2000000c

08007b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b70:	f7ff fff0 	bl	8007b54 <HAL_RCC_GetHCLKFreq>
 8007b74:	4602      	mov	r2, r0
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	0a9b      	lsrs	r3, r3, #10
 8007b7c:	f003 0307 	and.w	r3, r3, #7
 8007b80:	4903      	ldr	r1, [pc, #12]	; (8007b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b82:	5ccb      	ldrb	r3, [r1, r3]
 8007b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	0801dcfc 	.word	0x0801dcfc

08007b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b98:	f7ff ffdc 	bl	8007b54 <HAL_RCC_GetHCLKFreq>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	0b5b      	lsrs	r3, r3, #13
 8007ba4:	f003 0307 	and.w	r3, r3, #7
 8007ba8:	4903      	ldr	r1, [pc, #12]	; (8007bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007baa:	5ccb      	ldrb	r3, [r1, r3]
 8007bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	40023800 	.word	0x40023800
 8007bb8:	0801dcfc 	.word	0x0801dcfc

08007bbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	220f      	movs	r2, #15
 8007bca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bcc:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <HAL_RCC_GetClockConfig+0x5c>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0203 	and.w	r2, r3, #3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <HAL_RCC_GetClockConfig+0x5c>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <HAL_RCC_GetClockConfig+0x5c>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007bf0:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <HAL_RCC_GetClockConfig+0x5c>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	08db      	lsrs	r3, r3, #3
 8007bf6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bfe:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <HAL_RCC_GetClockConfig+0x60>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 020f 	and.w	r2, r3, #15
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	601a      	str	r2, [r3, #0]
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	40023c00 	.word	0x40023c00

08007c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d012      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c48:	4b69      	ldr	r3, [pc, #420]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	4a68      	ldr	r2, [pc, #416]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c52:	6093      	str	r3, [r2, #8]
 8007c54:	4b66      	ldr	r3, [pc, #408]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5c:	4964      	ldr	r1, [pc, #400]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d017      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c7a:	4b5d      	ldr	r3, [pc, #372]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c88:	4959      	ldr	r1, [pc, #356]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c98:	d101      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d017      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007cb6:	4b4e      	ldr	r3, [pc, #312]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc4:	494a      	ldr	r1, [pc, #296]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd4:	d101      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 808b 	beq.w	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d04:	4b3a      	ldr	r3, [pc, #232]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	4a39      	ldr	r2, [pc, #228]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8007d10:	4b37      	ldr	r3, [pc, #220]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d1c:	4b35      	ldr	r3, [pc, #212]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a34      	ldr	r2, [pc, #208]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d28:	f7fd ff66 	bl	8005bf8 <HAL_GetTick>
 8007d2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d2e:	e008      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d30:	f7fd ff62 	bl	8005bf8 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b64      	cmp	r3, #100	; 0x64
 8007d3c:	d901      	bls.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e38f      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d42:	4b2c      	ldr	r3, [pc, #176]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f0      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d4e:	4b28      	ldr	r3, [pc, #160]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d035      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d02e      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d6c:	4b20      	ldr	r3, [pc, #128]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d76:	4b1e      	ldr	r3, [pc, #120]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7a:	4a1d      	ldr	r2, [pc, #116]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d82:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d86:	4a1a      	ldr	r2, [pc, #104]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d8e:	4a18      	ldr	r2, [pc, #96]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d94:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d114      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da0:	f7fd ff2a 	bl	8005bf8 <HAL_GetTick>
 8007da4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007da6:	e00a      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007da8:	f7fd ff26 	bl	8005bf8 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e351      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dbe:	4b0c      	ldr	r3, [pc, #48]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0ee      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd6:	d111      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007de4:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007de6:	400b      	ands	r3, r1
 8007de8:	4901      	ldr	r1, [pc, #4]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	608b      	str	r3, [r1, #8]
 8007dee:	e00b      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007df0:	40023800 	.word	0x40023800
 8007df4:	40007000 	.word	0x40007000
 8007df8:	0ffffcff 	.word	0x0ffffcff
 8007dfc:	4bb3      	ldr	r3, [pc, #716]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	4ab2      	ldr	r2, [pc, #712]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e06:	6093      	str	r3, [r2, #8]
 8007e08:	4bb0      	ldr	r3, [pc, #704]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e14:	49ad      	ldr	r1, [pc, #692]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0310 	and.w	r3, r3, #16
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d010      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e26:	4ba9      	ldr	r3, [pc, #676]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e2c:	4aa7      	ldr	r2, [pc, #668]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007e36:	4ba5      	ldr	r3, [pc, #660]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	49a2      	ldr	r1, [pc, #648]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00a      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e54:	4b9d      	ldr	r3, [pc, #628]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e62:	499a      	ldr	r1, [pc, #616]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e76:	4b95      	ldr	r3, [pc, #596]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e84:	4991      	ldr	r1, [pc, #580]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e98:	4b8c      	ldr	r3, [pc, #560]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea6:	4989      	ldr	r1, [pc, #548]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007eba:	4b84      	ldr	r3, [pc, #528]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec8:	4980      	ldr	r1, [pc, #512]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007edc:	4b7b      	ldr	r3, [pc, #492]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee2:	f023 0203 	bic.w	r2, r3, #3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eea:	4978      	ldr	r1, [pc, #480]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007efe:	4b73      	ldr	r3, [pc, #460]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f04:	f023 020c 	bic.w	r2, r3, #12
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0c:	496f      	ldr	r1, [pc, #444]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f20:	4b6a      	ldr	r3, [pc, #424]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f2e:	4967      	ldr	r1, [pc, #412]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f42:	4b62      	ldr	r3, [pc, #392]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f50:	495e      	ldr	r1, [pc, #376]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f64:	4b59      	ldr	r3, [pc, #356]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f72:	4956      	ldr	r1, [pc, #344]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f86:	4b51      	ldr	r3, [pc, #324]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f94:	494d      	ldr	r1, [pc, #308]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007fa8:	4b48      	ldr	r3, [pc, #288]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb6:	4945      	ldr	r1, [pc, #276]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007fca:	4b40      	ldr	r3, [pc, #256]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd8:	493c      	ldr	r1, [pc, #240]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fec:	4b37      	ldr	r3, [pc, #220]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ffa:	4934      	ldr	r1, [pc, #208]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d011      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800800e:	4b2f      	ldr	r3, [pc, #188]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008014:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800801c:	492b      	ldr	r1, [pc, #172]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800801e:	4313      	orrs	r3, r2
 8008020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800802c:	d101      	bne.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800802e:	2301      	movs	r3, #1
 8008030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800803e:	2301      	movs	r3, #1
 8008040:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800804e:	4b1f      	ldr	r3, [pc, #124]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008054:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800805c:	491b      	ldr	r1, [pc, #108]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800805e:	4313      	orrs	r3, r2
 8008060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008070:	4b16      	ldr	r3, [pc, #88]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008076:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008080:	4912      	ldr	r1, [pc, #72]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00b      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008094:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800809a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080a4:	4909      	ldr	r1, [pc, #36]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00f      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080b8:	4b04      	ldr	r3, [pc, #16]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80080ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c8:	e002      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80080ca:	bf00      	nop
 80080cc:	40023800 	.word	0x40023800
 80080d0:	4986      	ldr	r1, [pc, #536]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80080e4:	4b81      	ldr	r3, [pc, #516]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f4:	497d      	ldr	r1, [pc, #500]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d006      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 80d6 	beq.w	80082bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008110:	4b76      	ldr	r3, [pc, #472]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a75      	ldr	r2, [pc, #468]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008116:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800811a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800811c:	f7fd fd6c 	bl	8005bf8 <HAL_GetTick>
 8008120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008122:	e008      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008124:	f7fd fd68 	bl	8005bf8 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b64      	cmp	r3, #100	; 0x64
 8008130:	d901      	bls.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e195      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008136:	4b6d      	ldr	r3, [pc, #436]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1f0      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d021      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008152:	2b00      	cmp	r3, #0
 8008154:	d11d      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008156:	4b65      	ldr	r3, [pc, #404]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800815c:	0c1b      	lsrs	r3, r3, #16
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008164:	4b61      	ldr	r3, [pc, #388]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800816a:	0e1b      	lsrs	r3, r3, #24
 800816c:	f003 030f 	and.w	r3, r3, #15
 8008170:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	019a      	lsls	r2, r3, #6
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	041b      	lsls	r3, r3, #16
 800817c:	431a      	orrs	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	061b      	lsls	r3, r3, #24
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	071b      	lsls	r3, r3, #28
 800818a:	4958      	ldr	r1, [pc, #352]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800818c:	4313      	orrs	r3, r2
 800818e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081a6:	d00a      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d02e      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081bc:	d129      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80081be:	4b4b      	ldr	r3, [pc, #300]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081cc:	4b47      	ldr	r3, [pc, #284]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081d2:	0f1b      	lsrs	r3, r3, #28
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	019a      	lsls	r2, r3, #6
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	061b      	lsls	r3, r3, #24
 80081ec:	431a      	orrs	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	071b      	lsls	r3, r3, #28
 80081f2:	493e      	ldr	r1, [pc, #248]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80081fa:	4b3c      	ldr	r3, [pc, #240]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008200:	f023 021f 	bic.w	r2, r3, #31
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	3b01      	subs	r3, #1
 800820a:	4938      	ldr	r1, [pc, #224]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800820c:	4313      	orrs	r3, r2
 800820e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d01d      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800821e:	4b33      	ldr	r3, [pc, #204]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008224:	0e1b      	lsrs	r3, r3, #24
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800822c:	4b2f      	ldr	r3, [pc, #188]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800822e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008232:	0f1b      	lsrs	r3, r3, #28
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	019a      	lsls	r2, r3, #6
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	041b      	lsls	r3, r3, #16
 8008246:	431a      	orrs	r2, r3
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	061b      	lsls	r3, r3, #24
 800824c:	431a      	orrs	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	071b      	lsls	r3, r3, #28
 8008252:	4926      	ldr	r1, [pc, #152]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008254:	4313      	orrs	r3, r2
 8008256:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d011      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	019a      	lsls	r2, r3, #6
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	041b      	lsls	r3, r3, #16
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	061b      	lsls	r3, r3, #24
 800827a:	431a      	orrs	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	071b      	lsls	r3, r3, #28
 8008282:	491a      	ldr	r1, [pc, #104]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008284:	4313      	orrs	r3, r2
 8008286:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800828a:	4b18      	ldr	r3, [pc, #96]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a17      	ldr	r2, [pc, #92]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008296:	f7fd fcaf 	bl	8005bf8 <HAL_GetTick>
 800829a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800829c:	e008      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800829e:	f7fd fcab 	bl	8005bf8 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b64      	cmp	r3, #100	; 0x64
 80082aa:	d901      	bls.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e0d8      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082b0:	4b0e      	ldr	r3, [pc, #56]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0f0      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	f040 80ce 	bne.w	8008460 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80082c4:	4b09      	ldr	r3, [pc, #36]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a08      	ldr	r2, [pc, #32]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d0:	f7fd fc92 	bl	8005bf8 <HAL_GetTick>
 80082d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082d6:	e00b      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80082d8:	f7fd fc8e 	bl	8005bf8 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b64      	cmp	r3, #100	; 0x64
 80082e4:	d904      	bls.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e0bb      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80082ea:	bf00      	nop
 80082ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082f0:	4b5e      	ldr	r3, [pc, #376]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fc:	d0ec      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800831a:	2b00      	cmp	r3, #0
 800831c:	d02e      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	2b00      	cmp	r3, #0
 8008324:	d12a      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008326:	4b51      	ldr	r3, [pc, #324]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832c:	0c1b      	lsrs	r3, r3, #16
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008334:	4b4d      	ldr	r3, [pc, #308]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833a:	0f1b      	lsrs	r3, r3, #28
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	019a      	lsls	r2, r3, #6
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	041b      	lsls	r3, r3, #16
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	061b      	lsls	r3, r3, #24
 8008354:	431a      	orrs	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	071b      	lsls	r3, r3, #28
 800835a:	4944      	ldr	r1, [pc, #272]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800835c:	4313      	orrs	r3, r2
 800835e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008362:	4b42      	ldr	r3, [pc, #264]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008368:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	3b01      	subs	r3, #1
 8008372:	021b      	lsls	r3, r3, #8
 8008374:	493d      	ldr	r1, [pc, #244]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008376:	4313      	orrs	r3, r2
 8008378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d022      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800838c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008390:	d11d      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008392:	4b36      	ldr	r3, [pc, #216]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008398:	0e1b      	lsrs	r3, r3, #24
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80083a0:	4b32      	ldr	r3, [pc, #200]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a6:	0f1b      	lsrs	r3, r3, #28
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	019a      	lsls	r2, r3, #6
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	041b      	lsls	r3, r3, #16
 80083ba:	431a      	orrs	r2, r3
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	061b      	lsls	r3, r3, #24
 80083c0:	431a      	orrs	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	071b      	lsls	r3, r3, #28
 80083c6:	4929      	ldr	r1, [pc, #164]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0308 	and.w	r3, r3, #8
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d028      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083da:	4b24      	ldr	r3, [pc, #144]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e0:	0e1b      	lsrs	r3, r3, #24
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80083e8:	4b20      	ldr	r3, [pc, #128]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ee:	0c1b      	lsrs	r3, r3, #16
 80083f0:	f003 0303 	and.w	r3, r3, #3
 80083f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	019a      	lsls	r2, r3, #6
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	041b      	lsls	r3, r3, #16
 8008400:	431a      	orrs	r2, r3
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	061b      	lsls	r3, r3, #24
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	071b      	lsls	r3, r3, #28
 800840e:	4917      	ldr	r1, [pc, #92]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008410:	4313      	orrs	r3, r2
 8008412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008416:	4b15      	ldr	r3, [pc, #84]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800841c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	4911      	ldr	r1, [pc, #68]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008426:	4313      	orrs	r3, r2
 8008428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800842c:	4b0f      	ldr	r3, [pc, #60]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a0e      	ldr	r2, [pc, #56]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008438:	f7fd fbde 	bl	8005bf8 <HAL_GetTick>
 800843c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800843e:	e008      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008440:	f7fd fbda 	bl	8005bf8 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	2b64      	cmp	r3, #100	; 0x64
 800844c:	d901      	bls.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e007      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008452:	4b06      	ldr	r3, [pc, #24]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800845a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845e:	d1ef      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3720      	adds	r7, #32
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40023800 	.word	0x40023800

08008470 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e025      	b.n	80084d0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d106      	bne.n	800849e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7f8 fa73 	bl	8000984 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3304      	adds	r3, #4
 80084ae:	4619      	mov	r1, r3
 80084b0:	4610      	mov	r0, r2
 80084b2:	f001 fba5 	bl	8009c00 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	461a      	mov	r2, r3
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	f001 fc0f 	bl	8009ce4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d101      	bne.n	80084f4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80084f0:	2302      	movs	r3, #2
 80084f2:	e018      	b.n	8008526 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	68b9      	ldr	r1, [r7, #8]
 8008504:	4618      	mov	r0, r3
 8008506:	f001 fc6d 	bl	8009de4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d104      	bne.n	800851c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2205      	movs	r2, #5
 8008516:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800851a:	e003      	b.n	8008524 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d101      	bne.n	8008548 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008544:	2302      	movs	r3, #2
 8008546:	e00e      	b.n	8008566 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f001 fc68 	bl	8009e2c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e049      	b.n	8008614 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d106      	bne.n	800859a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f841 	bl	800861c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3304      	adds	r3, #4
 80085aa:	4619      	mov	r1, r3
 80085ac:	4610      	mov	r0, r2
 80085ae:	f000 fb65 	bl	8008c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b01      	cmp	r3, #1
 8008642:	d001      	beq.n	8008648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e054      	b.n	80086f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a26      	ldr	r2, [pc, #152]	; (8008700 <HAL_TIM_Base_Start_IT+0xd0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d022      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x80>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008672:	d01d      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x80>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a22      	ldr	r2, [pc, #136]	; (8008704 <HAL_TIM_Base_Start_IT+0xd4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d018      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x80>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a21      	ldr	r2, [pc, #132]	; (8008708 <HAL_TIM_Base_Start_IT+0xd8>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d013      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x80>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1f      	ldr	r2, [pc, #124]	; (800870c <HAL_TIM_Base_Start_IT+0xdc>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00e      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x80>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a1e      	ldr	r2, [pc, #120]	; (8008710 <HAL_TIM_Base_Start_IT+0xe0>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d009      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x80>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a1c      	ldr	r2, [pc, #112]	; (8008714 <HAL_TIM_Base_Start_IT+0xe4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d004      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x80>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a1b      	ldr	r2, [pc, #108]	; (8008718 <HAL_TIM_Base_Start_IT+0xe8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d115      	bne.n	80086dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689a      	ldr	r2, [r3, #8]
 80086b6:	4b19      	ldr	r3, [pc, #100]	; (800871c <HAL_TIM_Base_Start_IT+0xec>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b06      	cmp	r3, #6
 80086c0:	d015      	beq.n	80086ee <HAL_TIM_Base_Start_IT+0xbe>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c8:	d011      	beq.n	80086ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f042 0201 	orr.w	r2, r2, #1
 80086d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086da:	e008      	b.n	80086ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0201 	orr.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	e000      	b.n	80086f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40010000 	.word	0x40010000
 8008704:	40000400 	.word	0x40000400
 8008708:	40000800 	.word	0x40000800
 800870c:	40000c00 	.word	0x40000c00
 8008710:	40010400 	.word	0x40010400
 8008714:	40014000 	.word	0x40014000
 8008718:	40001800 	.word	0x40001800
 800871c:	00010007 	.word	0x00010007

08008720 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e049      	b.n	80087c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7f9 f80c 	bl	8001764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3304      	adds	r3, #4
 800875c:	4619      	mov	r1, r3
 800875e:	4610      	mov	r0, r2
 8008760:	f000 fa8c 	bl	8008c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d122      	bne.n	800882a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d11b      	bne.n	800882a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f06f 0202 	mvn.w	r2, #2
 80087fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fa15 	bl	8008c40 <HAL_TIM_IC_CaptureCallback>
 8008816:	e005      	b.n	8008824 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fa07 	bl	8008c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa18 	bl	8008c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b04      	cmp	r3, #4
 8008836:	d122      	bne.n	800887e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f003 0304 	and.w	r3, r3, #4
 8008842:	2b04      	cmp	r3, #4
 8008844:	d11b      	bne.n	800887e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f06f 0204 	mvn.w	r2, #4
 800884e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f9eb 	bl	8008c40 <HAL_TIM_IC_CaptureCallback>
 800886a:	e005      	b.n	8008878 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f9dd 	bl	8008c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f9ee 	bl	8008c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b08      	cmp	r3, #8
 800888a:	d122      	bne.n	80088d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	2b08      	cmp	r3, #8
 8008898:	d11b      	bne.n	80088d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f06f 0208 	mvn.w	r2, #8
 80088a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f9c1 	bl	8008c40 <HAL_TIM_IC_CaptureCallback>
 80088be:	e005      	b.n	80088cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f9b3 	bl	8008c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f9c4 	bl	8008c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	f003 0310 	and.w	r3, r3, #16
 80088dc:	2b10      	cmp	r3, #16
 80088de:	d122      	bne.n	8008926 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f003 0310 	and.w	r3, r3, #16
 80088ea:	2b10      	cmp	r3, #16
 80088ec:	d11b      	bne.n	8008926 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f06f 0210 	mvn.w	r2, #16
 80088f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2208      	movs	r2, #8
 80088fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f997 	bl	8008c40 <HAL_TIM_IC_CaptureCallback>
 8008912:	e005      	b.n	8008920 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f989 	bl	8008c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f99a 	bl	8008c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b01      	cmp	r3, #1
 8008932:	d10e      	bne.n	8008952 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b01      	cmp	r3, #1
 8008940:	d107      	bne.n	8008952 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f06f 0201 	mvn.w	r2, #1
 800894a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7f8 fc71 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800895c:	2b80      	cmp	r3, #128	; 0x80
 800895e:	d10e      	bne.n	800897e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896a:	2b80      	cmp	r3, #128	; 0x80
 800896c:	d107      	bne.n	800897e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fd15 	bl	80093a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898c:	d10e      	bne.n	80089ac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008998:	2b80      	cmp	r3, #128	; 0x80
 800899a:	d107      	bne.n	80089ac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80089a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fd08 	bl	80093bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b40      	cmp	r3, #64	; 0x40
 80089b8:	d10e      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c4:	2b40      	cmp	r3, #64	; 0x40
 80089c6:	d107      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f948 	bl	8008c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d10e      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d107      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0220 	mvn.w	r2, #32
 80089fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fcc8 	bl	8009394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d101      	bne.n	8008a26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008a22:	2302      	movs	r3, #2
 8008a24:	e0fd      	b.n	8008c22 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b14      	cmp	r3, #20
 8008a32:	f200 80f0 	bhi.w	8008c16 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a91 	.word	0x08008a91
 8008a40:	08008c17 	.word	0x08008c17
 8008a44:	08008c17 	.word	0x08008c17
 8008a48:	08008c17 	.word	0x08008c17
 8008a4c:	08008ad1 	.word	0x08008ad1
 8008a50:	08008c17 	.word	0x08008c17
 8008a54:	08008c17 	.word	0x08008c17
 8008a58:	08008c17 	.word	0x08008c17
 8008a5c:	08008b13 	.word	0x08008b13
 8008a60:	08008c17 	.word	0x08008c17
 8008a64:	08008c17 	.word	0x08008c17
 8008a68:	08008c17 	.word	0x08008c17
 8008a6c:	08008b53 	.word	0x08008b53
 8008a70:	08008c17 	.word	0x08008c17
 8008a74:	08008c17 	.word	0x08008c17
 8008a78:	08008c17 	.word	0x08008c17
 8008a7c:	08008b95 	.word	0x08008b95
 8008a80:	08008c17 	.word	0x08008c17
 8008a84:	08008c17 	.word	0x08008c17
 8008a88:	08008c17 	.word	0x08008c17
 8008a8c:	08008bd5 	.word	0x08008bd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 f990 	bl	8008dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f042 0208 	orr.w	r2, r2, #8
 8008aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0204 	bic.w	r2, r2, #4
 8008aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6999      	ldr	r1, [r3, #24]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	691a      	ldr	r2, [r3, #16]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	619a      	str	r2, [r3, #24]
      break;
 8008ace:	e0a3      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68b9      	ldr	r1, [r7, #8]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f9e2 	bl	8008ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6999      	ldr	r1, [r3, #24]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	021a      	lsls	r2, r3, #8
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	619a      	str	r2, [r3, #24]
      break;
 8008b10:	e082      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68b9      	ldr	r1, [r7, #8]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fa39 	bl	8008f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69da      	ldr	r2, [r3, #28]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f042 0208 	orr.w	r2, r2, #8
 8008b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	69da      	ldr	r2, [r3, #28]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0204 	bic.w	r2, r2, #4
 8008b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69d9      	ldr	r1, [r3, #28]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	691a      	ldr	r2, [r3, #16]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	61da      	str	r2, [r3, #28]
      break;
 8008b50:	e062      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68b9      	ldr	r1, [r7, #8]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fa8f 	bl	800907c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	69da      	ldr	r2, [r3, #28]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69d9      	ldr	r1, [r3, #28]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	021a      	lsls	r2, r3, #8
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	61da      	str	r2, [r3, #28]
      break;
 8008b92:	e041      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fac6 	bl	800912c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0208 	orr.w	r2, r2, #8
 8008bae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0204 	bic.w	r2, r2, #4
 8008bbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	691a      	ldr	r2, [r3, #16]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008bd2:	e021      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 faf8 	bl	80091d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	021a      	lsls	r2, r3, #8
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008c14:	e000      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008c16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop

08008c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a40      	ldr	r2, [pc, #256]	; (8008d90 <TIM_Base_SetConfig+0x114>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d013      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9a:	d00f      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a3d      	ldr	r2, [pc, #244]	; (8008d94 <TIM_Base_SetConfig+0x118>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d00b      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a3c      	ldr	r2, [pc, #240]	; (8008d98 <TIM_Base_SetConfig+0x11c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d007      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a3b      	ldr	r2, [pc, #236]	; (8008d9c <TIM_Base_SetConfig+0x120>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a3a      	ldr	r2, [pc, #232]	; (8008da0 <TIM_Base_SetConfig+0x124>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d108      	bne.n	8008cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a2f      	ldr	r2, [pc, #188]	; (8008d90 <TIM_Base_SetConfig+0x114>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d02b      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cdc:	d027      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a2c      	ldr	r2, [pc, #176]	; (8008d94 <TIM_Base_SetConfig+0x118>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d023      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a2b      	ldr	r2, [pc, #172]	; (8008d98 <TIM_Base_SetConfig+0x11c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d01f      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a2a      	ldr	r2, [pc, #168]	; (8008d9c <TIM_Base_SetConfig+0x120>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d01b      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a29      	ldr	r2, [pc, #164]	; (8008da0 <TIM_Base_SetConfig+0x124>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d017      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a28      	ldr	r2, [pc, #160]	; (8008da4 <TIM_Base_SetConfig+0x128>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d013      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a27      	ldr	r2, [pc, #156]	; (8008da8 <TIM_Base_SetConfig+0x12c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00f      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a26      	ldr	r2, [pc, #152]	; (8008dac <TIM_Base_SetConfig+0x130>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00b      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a25      	ldr	r2, [pc, #148]	; (8008db0 <TIM_Base_SetConfig+0x134>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d007      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a24      	ldr	r2, [pc, #144]	; (8008db4 <TIM_Base_SetConfig+0x138>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d003      	beq.n	8008d2e <TIM_Base_SetConfig+0xb2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a23      	ldr	r2, [pc, #140]	; (8008db8 <TIM_Base_SetConfig+0x13c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d108      	bne.n	8008d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a0a      	ldr	r2, [pc, #40]	; (8008d90 <TIM_Base_SetConfig+0x114>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d003      	beq.n	8008d74 <TIM_Base_SetConfig+0xf8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a0c      	ldr	r2, [pc, #48]	; (8008da0 <TIM_Base_SetConfig+0x124>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d103      	bne.n	8008d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	691a      	ldr	r2, [r3, #16]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	615a      	str	r2, [r3, #20]
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40000c00 	.word	0x40000c00
 8008da0:	40010400 	.word	0x40010400
 8008da4:	40014000 	.word	0x40014000
 8008da8:	40014400 	.word	0x40014400
 8008dac:	40014800 	.word	0x40014800
 8008db0:	40001800 	.word	0x40001800
 8008db4:	40001c00 	.word	0x40001c00
 8008db8:	40002000 	.word	0x40002000

08008dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	f023 0201 	bic.w	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	4b2b      	ldr	r3, [pc, #172]	; (8008e94 <TIM_OC1_SetConfig+0xd8>)
 8008de8:	4013      	ands	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0303 	bic.w	r3, r3, #3
 8008df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f023 0302 	bic.w	r3, r3, #2
 8008e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a21      	ldr	r2, [pc, #132]	; (8008e98 <TIM_OC1_SetConfig+0xdc>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_OC1_SetConfig+0x64>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a20      	ldr	r2, [pc, #128]	; (8008e9c <TIM_OC1_SetConfig+0xe0>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d10c      	bne.n	8008e3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f023 0308 	bic.w	r3, r3, #8
 8008e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f023 0304 	bic.w	r3, r3, #4
 8008e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a16      	ldr	r2, [pc, #88]	; (8008e98 <TIM_OC1_SetConfig+0xdc>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d003      	beq.n	8008e4a <TIM_OC1_SetConfig+0x8e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a15      	ldr	r2, [pc, #84]	; (8008e9c <TIM_OC1_SetConfig+0xe0>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d111      	bne.n	8008e6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	fffeff8f 	.word	0xfffeff8f
 8008e98:	40010000 	.word	0x40010000
 8008e9c:	40010400 	.word	0x40010400

08008ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	f023 0210 	bic.w	r2, r3, #16
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4b2e      	ldr	r3, [pc, #184]	; (8008f84 <TIM_OC2_SetConfig+0xe4>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	021b      	lsls	r3, r3, #8
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f023 0320 	bic.w	r3, r3, #32
 8008eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a23      	ldr	r2, [pc, #140]	; (8008f88 <TIM_OC2_SetConfig+0xe8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d003      	beq.n	8008f08 <TIM_OC2_SetConfig+0x68>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a22      	ldr	r2, [pc, #136]	; (8008f8c <TIM_OC2_SetConfig+0xec>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d10d      	bne.n	8008f24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <TIM_OC2_SetConfig+0xe8>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <TIM_OC2_SetConfig+0x94>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a17      	ldr	r2, [pc, #92]	; (8008f8c <TIM_OC2_SetConfig+0xec>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d113      	bne.n	8008f5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	621a      	str	r2, [r3, #32]
}
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	feff8fff 	.word	0xfeff8fff
 8008f88:	40010000 	.word	0x40010000
 8008f8c:	40010400 	.word	0x40010400

08008f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4b2d      	ldr	r3, [pc, #180]	; (8009070 <TIM_OC3_SetConfig+0xe0>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0303 	bic.w	r3, r3, #3
 8008fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	021b      	lsls	r3, r3, #8
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a22      	ldr	r2, [pc, #136]	; (8009074 <TIM_OC3_SetConfig+0xe4>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d003      	beq.n	8008ff6 <TIM_OC3_SetConfig+0x66>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a21      	ldr	r2, [pc, #132]	; (8009078 <TIM_OC3_SetConfig+0xe8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d10d      	bne.n	8009012 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a17      	ldr	r2, [pc, #92]	; (8009074 <TIM_OC3_SetConfig+0xe4>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d003      	beq.n	8009022 <TIM_OC3_SetConfig+0x92>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a16      	ldr	r2, [pc, #88]	; (8009078 <TIM_OC3_SetConfig+0xe8>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d113      	bne.n	800904a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	011b      	lsls	r3, r3, #4
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	4313      	orrs	r3, r2
 800903c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	4313      	orrs	r3, r2
 8009048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	621a      	str	r2, [r3, #32]
}
 8009064:	bf00      	nop
 8009066:	371c      	adds	r7, #28
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	fffeff8f 	.word	0xfffeff8f
 8009074:	40010000 	.word	0x40010000
 8009078:	40010400 	.word	0x40010400

0800907c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4b1e      	ldr	r3, [pc, #120]	; (8009120 <TIM_OC4_SetConfig+0xa4>)
 80090a8:	4013      	ands	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	021b      	lsls	r3, r3, #8
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	031b      	lsls	r3, r3, #12
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a13      	ldr	r2, [pc, #76]	; (8009124 <TIM_OC4_SetConfig+0xa8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d003      	beq.n	80090e4 <TIM_OC4_SetConfig+0x68>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a12      	ldr	r2, [pc, #72]	; (8009128 <TIM_OC4_SetConfig+0xac>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d109      	bne.n	80090f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	019b      	lsls	r3, r3, #6
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	621a      	str	r2, [r3, #32]
}
 8009112:	bf00      	nop
 8009114:	371c      	adds	r7, #28
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	feff8fff 	.word	0xfeff8fff
 8009124:	40010000 	.word	0x40010000
 8009128:	40010400 	.word	0x40010400

0800912c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4b1b      	ldr	r3, [pc, #108]	; (80091c4 <TIM_OC5_SetConfig+0x98>)
 8009158:	4013      	ands	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800916c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	041b      	lsls	r3, r3, #16
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a12      	ldr	r2, [pc, #72]	; (80091c8 <TIM_OC5_SetConfig+0x9c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d003      	beq.n	800918a <TIM_OC5_SetConfig+0x5e>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a11      	ldr	r2, [pc, #68]	; (80091cc <TIM_OC5_SetConfig+0xa0>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d109      	bne.n	800919e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009190:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	021b      	lsls	r3, r3, #8
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	621a      	str	r2, [r3, #32]
}
 80091b8:	bf00      	nop
 80091ba:	371c      	adds	r7, #28
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	fffeff8f 	.word	0xfffeff8f
 80091c8:	40010000 	.word	0x40010000
 80091cc:	40010400 	.word	0x40010400

080091d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	4b1c      	ldr	r3, [pc, #112]	; (800926c <TIM_OC6_SetConfig+0x9c>)
 80091fc:	4013      	ands	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	021b      	lsls	r3, r3, #8
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	4313      	orrs	r3, r2
 800920a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	051b      	lsls	r3, r3, #20
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	4313      	orrs	r3, r2
 800921e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a13      	ldr	r2, [pc, #76]	; (8009270 <TIM_OC6_SetConfig+0xa0>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d003      	beq.n	8009230 <TIM_OC6_SetConfig+0x60>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a12      	ldr	r2, [pc, #72]	; (8009274 <TIM_OC6_SetConfig+0xa4>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d109      	bne.n	8009244 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	029b      	lsls	r3, r3, #10
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	4313      	orrs	r3, r2
 8009242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	621a      	str	r2, [r3, #32]
}
 800925e:	bf00      	nop
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	feff8fff 	.word	0xfeff8fff
 8009270:	40010000 	.word	0x40010000
 8009274:	40010400 	.word	0x40010400

08009278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800928c:	2302      	movs	r3, #2
 800928e:	e06d      	b.n	800936c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a30      	ldr	r2, [pc, #192]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d004      	beq.n	80092c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a2f      	ldr	r2, [pc, #188]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d108      	bne.n	80092d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a20      	ldr	r2, [pc, #128]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d022      	beq.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009302:	d01d      	beq.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a1d      	ldr	r2, [pc, #116]	; (8009380 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d018      	beq.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a1c      	ldr	r2, [pc, #112]	; (8009384 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d013      	beq.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a1a      	ldr	r2, [pc, #104]	; (8009388 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00e      	beq.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a15      	ldr	r2, [pc, #84]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d009      	beq.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a16      	ldr	r2, [pc, #88]	; (800938c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d004      	beq.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a15      	ldr	r2, [pc, #84]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10c      	bne.n	800935a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009346:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	4313      	orrs	r3, r2
 8009350:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	40010000 	.word	0x40010000
 800937c:	40010400 	.word	0x40010400
 8009380:	40000400 	.word	0x40000400
 8009384:	40000800 	.word	0x40000800
 8009388:	40000c00 	.word	0x40000c00
 800938c:	40014000 	.word	0x40014000
 8009390:	40001800 	.word	0x40001800

08009394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e040      	b.n	8009464 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7f8 fa3e 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2224      	movs	r2, #36	; 0x24
 80093fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0201 	bic.w	r2, r2, #1
 800940c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f82c 	bl	800946c <UART_SetConfig>
 8009414:	4603      	mov	r3, r0
 8009416:	2b01      	cmp	r3, #1
 8009418:	d101      	bne.n	800941e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e022      	b.n	8009464 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fa82 	bl	8009930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800943a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689a      	ldr	r2, [r3, #8]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800944a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0201 	orr.w	r2, r2, #1
 800945a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fb09 	bl	8009a74 <UART_CheckIdleState>
 8009462:	4603      	mov	r3, r0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	69db      	ldr	r3, [r3, #28]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	4ba7      	ldr	r3, [pc, #668]	; (8009734 <UART_SetConfig+0x2c8>)
 8009498:	4013      	ands	r3, r2
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6812      	ldr	r2, [r2, #0]
 800949e:	6979      	ldr	r1, [r7, #20]
 80094a0:	430b      	orrs	r3, r1
 80094a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68da      	ldr	r2, [r3, #12]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	430a      	orrs	r2, r1
 80094dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a95      	ldr	r2, [pc, #596]	; (8009738 <UART_SetConfig+0x2cc>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d120      	bne.n	800952a <UART_SetConfig+0xbe>
 80094e8:	4b94      	ldr	r3, [pc, #592]	; (800973c <UART_SetConfig+0x2d0>)
 80094ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ee:	f003 0303 	and.w	r3, r3, #3
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d816      	bhi.n	8009524 <UART_SetConfig+0xb8>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <UART_SetConfig+0x90>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	0800950d 	.word	0x0800950d
 8009500:	08009519 	.word	0x08009519
 8009504:	08009513 	.word	0x08009513
 8009508:	0800951f 	.word	0x0800951f
 800950c:	2301      	movs	r3, #1
 800950e:	77fb      	strb	r3, [r7, #31]
 8009510:	e14f      	b.n	80097b2 <UART_SetConfig+0x346>
 8009512:	2302      	movs	r3, #2
 8009514:	77fb      	strb	r3, [r7, #31]
 8009516:	e14c      	b.n	80097b2 <UART_SetConfig+0x346>
 8009518:	2304      	movs	r3, #4
 800951a:	77fb      	strb	r3, [r7, #31]
 800951c:	e149      	b.n	80097b2 <UART_SetConfig+0x346>
 800951e:	2308      	movs	r3, #8
 8009520:	77fb      	strb	r3, [r7, #31]
 8009522:	e146      	b.n	80097b2 <UART_SetConfig+0x346>
 8009524:	2310      	movs	r3, #16
 8009526:	77fb      	strb	r3, [r7, #31]
 8009528:	e143      	b.n	80097b2 <UART_SetConfig+0x346>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a84      	ldr	r2, [pc, #528]	; (8009740 <UART_SetConfig+0x2d4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d132      	bne.n	800959a <UART_SetConfig+0x12e>
 8009534:	4b81      	ldr	r3, [pc, #516]	; (800973c <UART_SetConfig+0x2d0>)
 8009536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800953a:	f003 030c 	and.w	r3, r3, #12
 800953e:	2b0c      	cmp	r3, #12
 8009540:	d828      	bhi.n	8009594 <UART_SetConfig+0x128>
 8009542:	a201      	add	r2, pc, #4	; (adr r2, 8009548 <UART_SetConfig+0xdc>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	0800957d 	.word	0x0800957d
 800954c:	08009595 	.word	0x08009595
 8009550:	08009595 	.word	0x08009595
 8009554:	08009595 	.word	0x08009595
 8009558:	08009589 	.word	0x08009589
 800955c:	08009595 	.word	0x08009595
 8009560:	08009595 	.word	0x08009595
 8009564:	08009595 	.word	0x08009595
 8009568:	08009583 	.word	0x08009583
 800956c:	08009595 	.word	0x08009595
 8009570:	08009595 	.word	0x08009595
 8009574:	08009595 	.word	0x08009595
 8009578:	0800958f 	.word	0x0800958f
 800957c:	2300      	movs	r3, #0
 800957e:	77fb      	strb	r3, [r7, #31]
 8009580:	e117      	b.n	80097b2 <UART_SetConfig+0x346>
 8009582:	2302      	movs	r3, #2
 8009584:	77fb      	strb	r3, [r7, #31]
 8009586:	e114      	b.n	80097b2 <UART_SetConfig+0x346>
 8009588:	2304      	movs	r3, #4
 800958a:	77fb      	strb	r3, [r7, #31]
 800958c:	e111      	b.n	80097b2 <UART_SetConfig+0x346>
 800958e:	2308      	movs	r3, #8
 8009590:	77fb      	strb	r3, [r7, #31]
 8009592:	e10e      	b.n	80097b2 <UART_SetConfig+0x346>
 8009594:	2310      	movs	r3, #16
 8009596:	77fb      	strb	r3, [r7, #31]
 8009598:	e10b      	b.n	80097b2 <UART_SetConfig+0x346>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a69      	ldr	r2, [pc, #420]	; (8009744 <UART_SetConfig+0x2d8>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d120      	bne.n	80095e6 <UART_SetConfig+0x17a>
 80095a4:	4b65      	ldr	r3, [pc, #404]	; (800973c <UART_SetConfig+0x2d0>)
 80095a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095ae:	2b30      	cmp	r3, #48	; 0x30
 80095b0:	d013      	beq.n	80095da <UART_SetConfig+0x16e>
 80095b2:	2b30      	cmp	r3, #48	; 0x30
 80095b4:	d814      	bhi.n	80095e0 <UART_SetConfig+0x174>
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d009      	beq.n	80095ce <UART_SetConfig+0x162>
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d810      	bhi.n	80095e0 <UART_SetConfig+0x174>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <UART_SetConfig+0x15c>
 80095c2:	2b10      	cmp	r3, #16
 80095c4:	d006      	beq.n	80095d4 <UART_SetConfig+0x168>
 80095c6:	e00b      	b.n	80095e0 <UART_SetConfig+0x174>
 80095c8:	2300      	movs	r3, #0
 80095ca:	77fb      	strb	r3, [r7, #31]
 80095cc:	e0f1      	b.n	80097b2 <UART_SetConfig+0x346>
 80095ce:	2302      	movs	r3, #2
 80095d0:	77fb      	strb	r3, [r7, #31]
 80095d2:	e0ee      	b.n	80097b2 <UART_SetConfig+0x346>
 80095d4:	2304      	movs	r3, #4
 80095d6:	77fb      	strb	r3, [r7, #31]
 80095d8:	e0eb      	b.n	80097b2 <UART_SetConfig+0x346>
 80095da:	2308      	movs	r3, #8
 80095dc:	77fb      	strb	r3, [r7, #31]
 80095de:	e0e8      	b.n	80097b2 <UART_SetConfig+0x346>
 80095e0:	2310      	movs	r3, #16
 80095e2:	77fb      	strb	r3, [r7, #31]
 80095e4:	e0e5      	b.n	80097b2 <UART_SetConfig+0x346>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a57      	ldr	r2, [pc, #348]	; (8009748 <UART_SetConfig+0x2dc>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d120      	bne.n	8009632 <UART_SetConfig+0x1c6>
 80095f0:	4b52      	ldr	r3, [pc, #328]	; (800973c <UART_SetConfig+0x2d0>)
 80095f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095fa:	2bc0      	cmp	r3, #192	; 0xc0
 80095fc:	d013      	beq.n	8009626 <UART_SetConfig+0x1ba>
 80095fe:	2bc0      	cmp	r3, #192	; 0xc0
 8009600:	d814      	bhi.n	800962c <UART_SetConfig+0x1c0>
 8009602:	2b80      	cmp	r3, #128	; 0x80
 8009604:	d009      	beq.n	800961a <UART_SetConfig+0x1ae>
 8009606:	2b80      	cmp	r3, #128	; 0x80
 8009608:	d810      	bhi.n	800962c <UART_SetConfig+0x1c0>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <UART_SetConfig+0x1a8>
 800960e:	2b40      	cmp	r3, #64	; 0x40
 8009610:	d006      	beq.n	8009620 <UART_SetConfig+0x1b4>
 8009612:	e00b      	b.n	800962c <UART_SetConfig+0x1c0>
 8009614:	2300      	movs	r3, #0
 8009616:	77fb      	strb	r3, [r7, #31]
 8009618:	e0cb      	b.n	80097b2 <UART_SetConfig+0x346>
 800961a:	2302      	movs	r3, #2
 800961c:	77fb      	strb	r3, [r7, #31]
 800961e:	e0c8      	b.n	80097b2 <UART_SetConfig+0x346>
 8009620:	2304      	movs	r3, #4
 8009622:	77fb      	strb	r3, [r7, #31]
 8009624:	e0c5      	b.n	80097b2 <UART_SetConfig+0x346>
 8009626:	2308      	movs	r3, #8
 8009628:	77fb      	strb	r3, [r7, #31]
 800962a:	e0c2      	b.n	80097b2 <UART_SetConfig+0x346>
 800962c:	2310      	movs	r3, #16
 800962e:	77fb      	strb	r3, [r7, #31]
 8009630:	e0bf      	b.n	80097b2 <UART_SetConfig+0x346>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a45      	ldr	r2, [pc, #276]	; (800974c <UART_SetConfig+0x2e0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d125      	bne.n	8009688 <UART_SetConfig+0x21c>
 800963c:	4b3f      	ldr	r3, [pc, #252]	; (800973c <UART_SetConfig+0x2d0>)
 800963e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800964a:	d017      	beq.n	800967c <UART_SetConfig+0x210>
 800964c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009650:	d817      	bhi.n	8009682 <UART_SetConfig+0x216>
 8009652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009656:	d00b      	beq.n	8009670 <UART_SetConfig+0x204>
 8009658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800965c:	d811      	bhi.n	8009682 <UART_SetConfig+0x216>
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <UART_SetConfig+0x1fe>
 8009662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009666:	d006      	beq.n	8009676 <UART_SetConfig+0x20a>
 8009668:	e00b      	b.n	8009682 <UART_SetConfig+0x216>
 800966a:	2300      	movs	r3, #0
 800966c:	77fb      	strb	r3, [r7, #31]
 800966e:	e0a0      	b.n	80097b2 <UART_SetConfig+0x346>
 8009670:	2302      	movs	r3, #2
 8009672:	77fb      	strb	r3, [r7, #31]
 8009674:	e09d      	b.n	80097b2 <UART_SetConfig+0x346>
 8009676:	2304      	movs	r3, #4
 8009678:	77fb      	strb	r3, [r7, #31]
 800967a:	e09a      	b.n	80097b2 <UART_SetConfig+0x346>
 800967c:	2308      	movs	r3, #8
 800967e:	77fb      	strb	r3, [r7, #31]
 8009680:	e097      	b.n	80097b2 <UART_SetConfig+0x346>
 8009682:	2310      	movs	r3, #16
 8009684:	77fb      	strb	r3, [r7, #31]
 8009686:	e094      	b.n	80097b2 <UART_SetConfig+0x346>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a30      	ldr	r2, [pc, #192]	; (8009750 <UART_SetConfig+0x2e4>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d125      	bne.n	80096de <UART_SetConfig+0x272>
 8009692:	4b2a      	ldr	r3, [pc, #168]	; (800973c <UART_SetConfig+0x2d0>)
 8009694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800969c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096a0:	d017      	beq.n	80096d2 <UART_SetConfig+0x266>
 80096a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096a6:	d817      	bhi.n	80096d8 <UART_SetConfig+0x26c>
 80096a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ac:	d00b      	beq.n	80096c6 <UART_SetConfig+0x25a>
 80096ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b2:	d811      	bhi.n	80096d8 <UART_SetConfig+0x26c>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <UART_SetConfig+0x254>
 80096b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096bc:	d006      	beq.n	80096cc <UART_SetConfig+0x260>
 80096be:	e00b      	b.n	80096d8 <UART_SetConfig+0x26c>
 80096c0:	2301      	movs	r3, #1
 80096c2:	77fb      	strb	r3, [r7, #31]
 80096c4:	e075      	b.n	80097b2 <UART_SetConfig+0x346>
 80096c6:	2302      	movs	r3, #2
 80096c8:	77fb      	strb	r3, [r7, #31]
 80096ca:	e072      	b.n	80097b2 <UART_SetConfig+0x346>
 80096cc:	2304      	movs	r3, #4
 80096ce:	77fb      	strb	r3, [r7, #31]
 80096d0:	e06f      	b.n	80097b2 <UART_SetConfig+0x346>
 80096d2:	2308      	movs	r3, #8
 80096d4:	77fb      	strb	r3, [r7, #31]
 80096d6:	e06c      	b.n	80097b2 <UART_SetConfig+0x346>
 80096d8:	2310      	movs	r3, #16
 80096da:	77fb      	strb	r3, [r7, #31]
 80096dc:	e069      	b.n	80097b2 <UART_SetConfig+0x346>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a1c      	ldr	r2, [pc, #112]	; (8009754 <UART_SetConfig+0x2e8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d137      	bne.n	8009758 <UART_SetConfig+0x2ec>
 80096e8:	4b14      	ldr	r3, [pc, #80]	; (800973c <UART_SetConfig+0x2d0>)
 80096ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80096f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096f6:	d017      	beq.n	8009728 <UART_SetConfig+0x2bc>
 80096f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096fc:	d817      	bhi.n	800972e <UART_SetConfig+0x2c2>
 80096fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009702:	d00b      	beq.n	800971c <UART_SetConfig+0x2b0>
 8009704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009708:	d811      	bhi.n	800972e <UART_SetConfig+0x2c2>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <UART_SetConfig+0x2aa>
 800970e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009712:	d006      	beq.n	8009722 <UART_SetConfig+0x2b6>
 8009714:	e00b      	b.n	800972e <UART_SetConfig+0x2c2>
 8009716:	2300      	movs	r3, #0
 8009718:	77fb      	strb	r3, [r7, #31]
 800971a:	e04a      	b.n	80097b2 <UART_SetConfig+0x346>
 800971c:	2302      	movs	r3, #2
 800971e:	77fb      	strb	r3, [r7, #31]
 8009720:	e047      	b.n	80097b2 <UART_SetConfig+0x346>
 8009722:	2304      	movs	r3, #4
 8009724:	77fb      	strb	r3, [r7, #31]
 8009726:	e044      	b.n	80097b2 <UART_SetConfig+0x346>
 8009728:	2308      	movs	r3, #8
 800972a:	77fb      	strb	r3, [r7, #31]
 800972c:	e041      	b.n	80097b2 <UART_SetConfig+0x346>
 800972e:	2310      	movs	r3, #16
 8009730:	77fb      	strb	r3, [r7, #31]
 8009732:	e03e      	b.n	80097b2 <UART_SetConfig+0x346>
 8009734:	efff69f3 	.word	0xefff69f3
 8009738:	40011000 	.word	0x40011000
 800973c:	40023800 	.word	0x40023800
 8009740:	40004400 	.word	0x40004400
 8009744:	40004800 	.word	0x40004800
 8009748:	40004c00 	.word	0x40004c00
 800974c:	40005000 	.word	0x40005000
 8009750:	40011400 	.word	0x40011400
 8009754:	40007800 	.word	0x40007800
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a71      	ldr	r2, [pc, #452]	; (8009924 <UART_SetConfig+0x4b8>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d125      	bne.n	80097ae <UART_SetConfig+0x342>
 8009762:	4b71      	ldr	r3, [pc, #452]	; (8009928 <UART_SetConfig+0x4bc>)
 8009764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800976c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009770:	d017      	beq.n	80097a2 <UART_SetConfig+0x336>
 8009772:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009776:	d817      	bhi.n	80097a8 <UART_SetConfig+0x33c>
 8009778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800977c:	d00b      	beq.n	8009796 <UART_SetConfig+0x32a>
 800977e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009782:	d811      	bhi.n	80097a8 <UART_SetConfig+0x33c>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <UART_SetConfig+0x324>
 8009788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800978c:	d006      	beq.n	800979c <UART_SetConfig+0x330>
 800978e:	e00b      	b.n	80097a8 <UART_SetConfig+0x33c>
 8009790:	2300      	movs	r3, #0
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	e00d      	b.n	80097b2 <UART_SetConfig+0x346>
 8009796:	2302      	movs	r3, #2
 8009798:	77fb      	strb	r3, [r7, #31]
 800979a:	e00a      	b.n	80097b2 <UART_SetConfig+0x346>
 800979c:	2304      	movs	r3, #4
 800979e:	77fb      	strb	r3, [r7, #31]
 80097a0:	e007      	b.n	80097b2 <UART_SetConfig+0x346>
 80097a2:	2308      	movs	r3, #8
 80097a4:	77fb      	strb	r3, [r7, #31]
 80097a6:	e004      	b.n	80097b2 <UART_SetConfig+0x346>
 80097a8:	2310      	movs	r3, #16
 80097aa:	77fb      	strb	r3, [r7, #31]
 80097ac:	e001      	b.n	80097b2 <UART_SetConfig+0x346>
 80097ae:	2310      	movs	r3, #16
 80097b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ba:	d15b      	bne.n	8009874 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80097bc:	7ffb      	ldrb	r3, [r7, #31]
 80097be:	2b08      	cmp	r3, #8
 80097c0:	d827      	bhi.n	8009812 <UART_SetConfig+0x3a6>
 80097c2:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <UART_SetConfig+0x35c>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	080097ed 	.word	0x080097ed
 80097cc:	080097f5 	.word	0x080097f5
 80097d0:	080097fd 	.word	0x080097fd
 80097d4:	08009813 	.word	0x08009813
 80097d8:	08009803 	.word	0x08009803
 80097dc:	08009813 	.word	0x08009813
 80097e0:	08009813 	.word	0x08009813
 80097e4:	08009813 	.word	0x08009813
 80097e8:	0800980b 	.word	0x0800980b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ec:	f7fe f9be 	bl	8007b6c <HAL_RCC_GetPCLK1Freq>
 80097f0:	61b8      	str	r0, [r7, #24]
        break;
 80097f2:	e013      	b.n	800981c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097f4:	f7fe f9ce 	bl	8007b94 <HAL_RCC_GetPCLK2Freq>
 80097f8:	61b8      	str	r0, [r7, #24]
        break;
 80097fa:	e00f      	b.n	800981c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097fc:	4b4b      	ldr	r3, [pc, #300]	; (800992c <UART_SetConfig+0x4c0>)
 80097fe:	61bb      	str	r3, [r7, #24]
        break;
 8009800:	e00c      	b.n	800981c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009802:	f7fe f8c5 	bl	8007990 <HAL_RCC_GetSysClockFreq>
 8009806:	61b8      	str	r0, [r7, #24]
        break;
 8009808:	e008      	b.n	800981c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800980a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800980e:	61bb      	str	r3, [r7, #24]
        break;
 8009810:	e004      	b.n	800981c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	77bb      	strb	r3, [r7, #30]
        break;
 800981a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d074      	beq.n	800990c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	005a      	lsls	r2, r3, #1
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	085b      	lsrs	r3, r3, #1
 800982c:	441a      	add	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	fbb2 f3f3 	udiv	r3, r2, r3
 8009836:	b29b      	uxth	r3, r3
 8009838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b0f      	cmp	r3, #15
 800983e:	d916      	bls.n	800986e <UART_SetConfig+0x402>
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009846:	d212      	bcs.n	800986e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	b29b      	uxth	r3, r3
 800984c:	f023 030f 	bic.w	r3, r3, #15
 8009850:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	b29b      	uxth	r3, r3
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	b29a      	uxth	r2, r3
 800985e:	89fb      	ldrh	r3, [r7, #14]
 8009860:	4313      	orrs	r3, r2
 8009862:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	89fa      	ldrh	r2, [r7, #14]
 800986a:	60da      	str	r2, [r3, #12]
 800986c:	e04e      	b.n	800990c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	77bb      	strb	r3, [r7, #30]
 8009872:	e04b      	b.n	800990c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009874:	7ffb      	ldrb	r3, [r7, #31]
 8009876:	2b08      	cmp	r3, #8
 8009878:	d827      	bhi.n	80098ca <UART_SetConfig+0x45e>
 800987a:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <UART_SetConfig+0x414>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	080098a5 	.word	0x080098a5
 8009884:	080098ad 	.word	0x080098ad
 8009888:	080098b5 	.word	0x080098b5
 800988c:	080098cb 	.word	0x080098cb
 8009890:	080098bb 	.word	0x080098bb
 8009894:	080098cb 	.word	0x080098cb
 8009898:	080098cb 	.word	0x080098cb
 800989c:	080098cb 	.word	0x080098cb
 80098a0:	080098c3 	.word	0x080098c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098a4:	f7fe f962 	bl	8007b6c <HAL_RCC_GetPCLK1Freq>
 80098a8:	61b8      	str	r0, [r7, #24]
        break;
 80098aa:	e013      	b.n	80098d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098ac:	f7fe f972 	bl	8007b94 <HAL_RCC_GetPCLK2Freq>
 80098b0:	61b8      	str	r0, [r7, #24]
        break;
 80098b2:	e00f      	b.n	80098d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098b4:	4b1d      	ldr	r3, [pc, #116]	; (800992c <UART_SetConfig+0x4c0>)
 80098b6:	61bb      	str	r3, [r7, #24]
        break;
 80098b8:	e00c      	b.n	80098d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098ba:	f7fe f869 	bl	8007990 <HAL_RCC_GetSysClockFreq>
 80098be:	61b8      	str	r0, [r7, #24]
        break;
 80098c0:	e008      	b.n	80098d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098c6:	61bb      	str	r3, [r7, #24]
        break;
 80098c8:	e004      	b.n	80098d4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	77bb      	strb	r3, [r7, #30]
        break;
 80098d2:	bf00      	nop
    }

    if (pclk != 0U)
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d018      	beq.n	800990c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	085a      	lsrs	r2, r3, #1
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	441a      	add	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2b0f      	cmp	r3, #15
 80098f4:	d908      	bls.n	8009908 <UART_SetConfig+0x49c>
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098fc:	d204      	bcs.n	8009908 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	60da      	str	r2, [r3, #12]
 8009906:	e001      	b.n	800990c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009918:	7fbb      	ldrb	r3, [r7, #30]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3720      	adds	r7, #32
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	40007c00 	.word	0x40007c00
 8009928:	40023800 	.word	0x40023800
 800992c:	00f42400 	.word	0x00f42400

08009930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00a      	beq.n	800995a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	f003 0302 	and.w	r3, r3, #2
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	f003 0304 	and.w	r3, r3, #4
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00a      	beq.n	800999e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	f003 0308 	and.w	r3, r3, #8
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	f003 0310 	and.w	r3, r3, #16
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00a      	beq.n	80099e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	f003 0320 	and.w	r3, r3, #32
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d01a      	beq.n	8009a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a2e:	d10a      	bne.n	8009a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00a      	beq.n	8009a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	605a      	str	r2, [r3, #4]
  }
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a84:	f7fc f8b8 	bl	8005bf8 <HAL_GetTick>
 8009a88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0308 	and.w	r3, r3, #8
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d10e      	bne.n	8009ab6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f82d 	bl	8009b06 <UART_WaitOnFlagUntilTimeout>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e023      	b.n	8009afe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d10e      	bne.n	8009ae2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f817 	bl	8009b06 <UART_WaitOnFlagUntilTimeout>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e00d      	b.n	8009afe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2220      	movs	r2, #32
 8009aec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	603b      	str	r3, [r7, #0]
 8009b12:	4613      	mov	r3, r2
 8009b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b16:	e05e      	b.n	8009bd6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1e:	d05a      	beq.n	8009bd6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b20:	f7fc f86a 	bl	8005bf8 <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d302      	bcc.n	8009b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d11b      	bne.n	8009b6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0201 	bic.w	r2, r2, #1
 8009b54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e043      	b.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0304 	and.w	r3, r3, #4
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d02c      	beq.n	8009bd6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b8a:	d124      	bne.n	8009bd6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ba4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0201 	bic.w	r2, r2, #1
 8009bb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e00f      	b.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	69da      	ldr	r2, [r3, #28]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	4013      	ands	r3, r2
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	bf0c      	ite	eq
 8009be6:	2301      	moveq	r3, #1
 8009be8:	2300      	movne	r3, #0
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	461a      	mov	r2, r3
 8009bee:	79fb      	ldrb	r3, [r7, #7]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d091      	beq.n	8009b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d027      	beq.n	8009c6a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	4b2f      	ldr	r3, [pc, #188]	; (8009ce0 <FMC_SDRAM_Init+0xe0>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c30:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8009c36:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8009c3c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8009c42:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8009c48:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8009c4e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8009c54:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009c5a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	e032      	b.n	8009cd0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c76:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009c80:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009c86:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	4b12      	ldr	r3, [pc, #72]	; (8009ce0 <FMC_SDRAM_Init+0xe0>)
 8009c98:	4013      	ands	r3, r2
 8009c9a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009ca4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8009caa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009cb0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8009cb6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8009cbc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	ffff8000 	.word	0xffff8000

08009ce4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d02e      	beq.n	8009d5c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009d0a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009d1a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009d24:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009d2e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009d38:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009d42:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	609a      	str	r2, [r3, #8]
 8009d5a:	e039      	b.n	8009dd0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	4b1e      	ldr	r3, [pc, #120]	; (8009de0 <FMC_SDRAM_Timing_Init+0xfc>)
 8009d66:	4013      	ands	r3, r2
 8009d68:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009d8e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009d9e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009da8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009db2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	ff0f0fff 	.word	0xff0f0fff

08009de4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	691a      	ldr	r2, [r3, #16]
 8009df4:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <FMC_SDRAM_SendCommand+0x44>)
 8009df6:	4013      	ands	r3, r2
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	6811      	ldr	r1, [r2, #0]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	6852      	ldr	r2, [r2, #4]
 8009e00:	4311      	orrs	r1, r2
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	6892      	ldr	r2, [r2, #8]
 8009e06:	3a01      	subs	r2, #1
 8009e08:	0152      	lsls	r2, r2, #5
 8009e0a:	4311      	orrs	r1, r2
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	68d2      	ldr	r2, [r2, #12]
 8009e10:	0252      	lsls	r2, r2, #9
 8009e12:	430a      	orrs	r2, r1
 8009e14:	431a      	orrs	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	ffc00000 	.word	0xffc00000

08009e2c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695a      	ldr	r2, [r3, #20]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e52:	b480      	push	{r7}
 8009e54:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009e56:	bf00      	nop
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e66:	f3ef 8305 	mrs	r3, IPSR
 8009e6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10f      	bne.n	8009e92 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e72:	f3ef 8310 	mrs	r3, PRIMASK
 8009e76:	607b      	str	r3, [r7, #4]
  return(result);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d105      	bne.n	8009e8a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8009e82:	603b      	str	r3, [r7, #0]
  return(result);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d007      	beq.n	8009e9a <osKernelInitialize+0x3a>
 8009e8a:	4b0e      	ldr	r3, [pc, #56]	; (8009ec4 <osKernelInitialize+0x64>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d103      	bne.n	8009e9a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009e92:	f06f 0305 	mvn.w	r3, #5
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	e00c      	b.n	8009eb4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e9a:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <osKernelInitialize+0x64>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d105      	bne.n	8009eae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ea2:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <osKernelInitialize+0x64>)
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	e002      	b.n	8009eb4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009eae:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20001258 	.word	0x20001258

08009ec8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ece:	f3ef 8305 	mrs	r3, IPSR
 8009ed2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10f      	bne.n	8009efa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eda:	f3ef 8310 	mrs	r3, PRIMASK
 8009ede:	607b      	str	r3, [r7, #4]
  return(result);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8009eea:	603b      	str	r3, [r7, #0]
  return(result);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d007      	beq.n	8009f02 <osKernelStart+0x3a>
 8009ef2:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <osKernelStart+0x68>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d103      	bne.n	8009f02 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009efa:	f06f 0305 	mvn.w	r3, #5
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e010      	b.n	8009f24 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009f02:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <osKernelStart+0x68>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d109      	bne.n	8009f1e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009f0a:	f7ff ffa2 	bl	8009e52 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009f0e:	4b08      	ldr	r3, [pc, #32]	; (8009f30 <osKernelStart+0x68>)
 8009f10:	2202      	movs	r2, #2
 8009f12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009f14:	f002 fb14 	bl	800c540 <vTaskStartScheduler>
      stat = osOK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	e002      	b.n	8009f24 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009f24:	68fb      	ldr	r3, [r7, #12]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20001258 	.word	0x20001258

08009f34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b090      	sub	sp, #64	; 0x40
 8009f38:	af04      	add	r7, sp, #16
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f40:	2300      	movs	r3, #0
 8009f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f44:	f3ef 8305 	mrs	r3, IPSR
 8009f48:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f4a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f040 808f 	bne.w	800a070 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f52:	f3ef 8310 	mrs	r3, PRIMASK
 8009f56:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d105      	bne.n	8009f6a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8009f62:	617b      	str	r3, [r7, #20]
  return(result);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <osThreadNew+0x3e>
 8009f6a:	4b44      	ldr	r3, [pc, #272]	; (800a07c <osThreadNew+0x148>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d07e      	beq.n	800a070 <osThreadNew+0x13c>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d07b      	beq.n	800a070 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009f78:	2380      	movs	r3, #128	; 0x80
 8009f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009f7c:	2318      	movs	r3, #24
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009f80:	2300      	movs	r3, #0
 8009f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009f84:	f04f 33ff 	mov.w	r3, #4294967295
 8009f88:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d045      	beq.n	800a01c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <osThreadNew+0x6a>
        name = attr->name;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d008      	beq.n	8009fc4 <osThreadNew+0x90>
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb4:	2b38      	cmp	r3, #56	; 0x38
 8009fb6:	d805      	bhi.n	8009fc4 <osThreadNew+0x90>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <osThreadNew+0x94>
        return (NULL);
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e054      	b.n	800a072 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d003      	beq.n	8009fd8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	089b      	lsrs	r3, r3, #2
 8009fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00e      	beq.n	8009ffe <osThreadNew+0xca>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	2b5b      	cmp	r3, #91	; 0x5b
 8009fe6:	d90a      	bls.n	8009ffe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d006      	beq.n	8009ffe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <osThreadNew+0xca>
        mem = 1;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	623b      	str	r3, [r7, #32]
 8009ffc:	e010      	b.n	800a020 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10c      	bne.n	800a020 <osThreadNew+0xec>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d108      	bne.n	800a020 <osThreadNew+0xec>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d104      	bne.n	800a020 <osThreadNew+0xec>
          mem = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	623b      	str	r3, [r7, #32]
 800a01a:	e001      	b.n	800a020 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a01c:	2300      	movs	r3, #0
 800a01e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d110      	bne.n	800a048 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a02e:	9202      	str	r2, [sp, #8]
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a03a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f002 f89f 	bl	800c180 <xTaskCreateStatic>
 800a042:	4603      	mov	r3, r0
 800a044:	613b      	str	r3, [r7, #16]
 800a046:	e013      	b.n	800a070 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d110      	bne.n	800a070 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	b29a      	uxth	r2, r3
 800a052:	f107 0310 	add.w	r3, r7, #16
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f002 f8f0 	bl	800c246 <xTaskCreate>
 800a066:	4603      	mov	r3, r0
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d001      	beq.n	800a070 <osThreadNew+0x13c>
          hTask = NULL;
 800a06c:	2300      	movs	r3, #0
 800a06e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a070:	693b      	ldr	r3, [r7, #16]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3730      	adds	r7, #48	; 0x30
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20001258 	.word	0x20001258

0800a080 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a086:	f3ef 8305 	mrs	r3, IPSR
 800a08a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a08c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10f      	bne.n	800a0b2 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a092:	f3ef 8310 	mrs	r3, PRIMASK
 800a096:	607b      	str	r3, [r7, #4]
  return(result);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d105      	bne.n	800a0aa <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a09e:	f3ef 8311 	mrs	r3, BASEPRI
 800a0a2:	603b      	str	r3, [r7, #0]
  return(result);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d007      	beq.n	800a0ba <osThreadYield+0x3a>
 800a0aa:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <osThreadYield+0x5c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d103      	bne.n	800a0ba <osThreadYield+0x3a>
    stat = osErrorISR;
 800a0b2:	f06f 0305 	mvn.w	r3, #5
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	e009      	b.n	800a0ce <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 800a0be:	4b08      	ldr	r3, [pc, #32]	; (800a0e0 <osThreadYield+0x60>)
 800a0c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c4:	601a      	str	r2, [r3, #0]
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20001258 	.word	0x20001258
 800a0e0:	e000ed04 	.word	0xe000ed04

0800a0e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0ec:	f3ef 8305 	mrs	r3, IPSR
 800a0f0:	613b      	str	r3, [r7, #16]
  return(result);
 800a0f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10f      	bne.n	800a118 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d105      	bne.n	800a110 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a104:	f3ef 8311 	mrs	r3, BASEPRI
 800a108:	60bb      	str	r3, [r7, #8]
  return(result);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d007      	beq.n	800a120 <osDelay+0x3c>
 800a110:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <osDelay+0x58>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d103      	bne.n	800a120 <osDelay+0x3c>
    stat = osErrorISR;
 800a118:	f06f 0305 	mvn.w	r3, #5
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	e007      	b.n	800a130 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f002 f9d2 	bl	800c4d4 <vTaskDelay>
    }
  }

  return (stat);
 800a130:	697b      	ldr	r3, [r7, #20]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20001258 	.word	0x20001258

0800a140 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a140:	b580      	push	{r7, lr}
 800a142:	b08c      	sub	sp, #48	; 0x30
 800a144:	af02      	add	r7, sp, #8
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a14c:	2300      	movs	r3, #0
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a150:	f3ef 8305 	mrs	r3, IPSR
 800a154:	61bb      	str	r3, [r7, #24]
  return(result);
 800a156:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f040 8086 	bne.w	800a26a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a15e:	f3ef 8310 	mrs	r3, PRIMASK
 800a162:	617b      	str	r3, [r7, #20]
  return(result);
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d105      	bne.n	800a176 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a16a:	f3ef 8311 	mrs	r3, BASEPRI
 800a16e:	613b      	str	r3, [r7, #16]
  return(result);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <osSemaphoreNew+0x3e>
 800a176:	4b3f      	ldr	r3, [pc, #252]	; (800a274 <osSemaphoreNew+0x134>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d075      	beq.n	800a26a <osSemaphoreNew+0x12a>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d072      	beq.n	800a26a <osSemaphoreNew+0x12a>
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d86e      	bhi.n	800a26a <osSemaphoreNew+0x12a>
    mem = -1;
 800a18c:	f04f 33ff 	mov.w	r3, #4294967295
 800a190:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d015      	beq.n	800a1c4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d006      	beq.n	800a1ae <osSemaphoreNew+0x6e>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2b4f      	cmp	r3, #79	; 0x4f
 800a1a6:	d902      	bls.n	800a1ae <osSemaphoreNew+0x6e>
        mem = 1;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	623b      	str	r3, [r7, #32]
 800a1ac:	e00c      	b.n	800a1c8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d108      	bne.n	800a1c8 <osSemaphoreNew+0x88>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d104      	bne.n	800a1c8 <osSemaphoreNew+0x88>
          mem = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	623b      	str	r3, [r7, #32]
 800a1c2:	e001      	b.n	800a1c8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ce:	d04c      	beq.n	800a26a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d128      	bne.n	800a228 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d10a      	bne.n	800a1f2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	2203      	movs	r2, #3
 800a1e2:	9200      	str	r2, [sp, #0]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	2001      	movs	r0, #1
 800a1ea:	f000 ffdd 	bl	800b1a8 <xQueueGenericCreateStatic>
 800a1ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a1f0:	e005      	b.n	800a1fe <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a1f2:	2203      	movs	r2, #3
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	f001 f858 	bl	800b2ac <xQueueGenericCreate>
 800a1fc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	d022      	beq.n	800a24a <osSemaphoreNew+0x10a>
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d01f      	beq.n	800a24a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a20a:	2300      	movs	r3, #0
 800a20c:	2200      	movs	r2, #0
 800a20e:	2100      	movs	r1, #0
 800a210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a212:	f001 f923 	bl	800b45c <xQueueGenericSend>
 800a216:	4603      	mov	r3, r0
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d016      	beq.n	800a24a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800a21c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a21e:	f001 fdd9 	bl	800bdd4 <vQueueDelete>
            hSemaphore = NULL;
 800a222:	2300      	movs	r3, #0
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
 800a226:	e010      	b.n	800a24a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d108      	bne.n	800a240 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	461a      	mov	r2, r3
 800a234:	68b9      	ldr	r1, [r7, #8]
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f001 f89d 	bl	800b376 <xQueueCreateCountingSemaphoreStatic>
 800a23c:	6278      	str	r0, [r7, #36]	; 0x24
 800a23e:	e004      	b.n	800a24a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a240:	68b9      	ldr	r1, [r7, #8]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f001 f8d2 	bl	800b3ec <xQueueCreateCountingSemaphore>
 800a248:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00c      	beq.n	800a26a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d003      	beq.n	800a25e <osSemaphoreNew+0x11e>
          name = attr->name;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	61fb      	str	r3, [r7, #28]
 800a25c:	e001      	b.n	800a262 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a262:	69f9      	ldr	r1, [r7, #28]
 800a264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a266:	f001 ff03 	bl	800c070 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3728      	adds	r7, #40	; 0x28
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20001258 	.word	0x20001258

0800a278 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a286:	2300      	movs	r3, #0
 800a288:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d103      	bne.n	800a298 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a290:	f06f 0303 	mvn.w	r3, #3
 800a294:	61fb      	str	r3, [r7, #28]
 800a296:	e04b      	b.n	800a330 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a298:	f3ef 8305 	mrs	r3, IPSR
 800a29c:	617b      	str	r3, [r7, #20]
  return(result);
 800a29e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10f      	bne.n	800a2c4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a8:	613b      	str	r3, [r7, #16]
  return(result);
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d105      	bne.n	800a2bc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2b0:	f3ef 8311 	mrs	r3, BASEPRI
 800a2b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d026      	beq.n	800a30a <osSemaphoreAcquire+0x92>
 800a2bc:	4b1f      	ldr	r3, [pc, #124]	; (800a33c <osSemaphoreAcquire+0xc4>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d122      	bne.n	800a30a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a2ca:	f06f 0303 	mvn.w	r3, #3
 800a2ce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a2d0:	e02d      	b.n	800a32e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a2d6:	f107 0308 	add.w	r3, r7, #8
 800a2da:	461a      	mov	r2, r3
 800a2dc:	2100      	movs	r1, #0
 800a2de:	69b8      	ldr	r0, [r7, #24]
 800a2e0:	f001 fcf2 	bl	800bcc8 <xQueueReceiveFromISR>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d003      	beq.n	800a2f2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a2ea:	f06f 0302 	mvn.w	r3, #2
 800a2ee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a2f0:	e01d      	b.n	800a32e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d01a      	beq.n	800a32e <osSemaphoreAcquire+0xb6>
 800a2f8:	4b11      	ldr	r3, [pc, #68]	; (800a340 <osSemaphoreAcquire+0xc8>)
 800a2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a308:	e011      	b.n	800a32e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	69b8      	ldr	r0, [r7, #24]
 800a30e:	f001 fbc7 	bl	800baa0 <xQueueSemaphoreTake>
 800a312:	4603      	mov	r3, r0
 800a314:	2b01      	cmp	r3, #1
 800a316:	d00b      	beq.n	800a330 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a31e:	f06f 0301 	mvn.w	r3, #1
 800a322:	61fb      	str	r3, [r7, #28]
 800a324:	e004      	b.n	800a330 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a326:	f06f 0302 	mvn.w	r3, #2
 800a32a:	61fb      	str	r3, [r7, #28]
 800a32c:	e000      	b.n	800a330 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a32e:	bf00      	nop
      }
    }
  }

  return (stat);
 800a330:	69fb      	ldr	r3, [r7, #28]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3720      	adds	r7, #32
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20001258 	.word	0x20001258
 800a340:	e000ed04 	.word	0xe000ed04

0800a344 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a350:	2300      	movs	r3, #0
 800a352:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a35a:	f06f 0303 	mvn.w	r3, #3
 800a35e:	61fb      	str	r3, [r7, #28]
 800a360:	e03e      	b.n	800a3e0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a362:	f3ef 8305 	mrs	r3, IPSR
 800a366:	617b      	str	r3, [r7, #20]
  return(result);
 800a368:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10f      	bne.n	800a38e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a36e:	f3ef 8310 	mrs	r3, PRIMASK
 800a372:	613b      	str	r3, [r7, #16]
  return(result);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d105      	bne.n	800a386 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a37a:	f3ef 8311 	mrs	r3, BASEPRI
 800a37e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d01e      	beq.n	800a3c4 <osSemaphoreRelease+0x80>
 800a386:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <osSemaphoreRelease+0xa8>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d11a      	bne.n	800a3c4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a38e:	2300      	movs	r3, #0
 800a390:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a392:	f107 0308 	add.w	r3, r7, #8
 800a396:	4619      	mov	r1, r3
 800a398:	69b8      	ldr	r0, [r7, #24]
 800a39a:	f001 fa05 	bl	800b7a8 <xQueueGiveFromISR>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d003      	beq.n	800a3ac <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a3a4:	f06f 0302 	mvn.w	r3, #2
 800a3a8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a3aa:	e018      	b.n	800a3de <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d015      	beq.n	800a3de <osSemaphoreRelease+0x9a>
 800a3b2:	4b0f      	ldr	r3, [pc, #60]	; (800a3f0 <osSemaphoreRelease+0xac>)
 800a3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a3c2:	e00c      	b.n	800a3de <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	69b8      	ldr	r0, [r7, #24]
 800a3cc:	f001 f846 	bl	800b45c <xQueueGenericSend>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d004      	beq.n	800a3e0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a3d6:	f06f 0302 	mvn.w	r3, #2
 800a3da:	61fb      	str	r3, [r7, #28]
 800a3dc:	e000      	b.n	800a3e0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a3de:	bf00      	nop
    }
  }

  return (stat);
 800a3e0:	69fb      	ldr	r3, [r7, #28]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3720      	adds	r7, #32
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20001258 	.word	0x20001258
 800a3f0:	e000ed04 	.word	0xe000ed04

0800a3f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08c      	sub	sp, #48	; 0x30
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a400:	2300      	movs	r3, #0
 800a402:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a404:	f3ef 8305 	mrs	r3, IPSR
 800a408:	61bb      	str	r3, [r7, #24]
  return(result);
 800a40a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d16f      	bne.n	800a4f0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a410:	f3ef 8310 	mrs	r3, PRIMASK
 800a414:	617b      	str	r3, [r7, #20]
  return(result);
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d105      	bne.n	800a428 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a41c:	f3ef 8311 	mrs	r3, BASEPRI
 800a420:	613b      	str	r3, [r7, #16]
  return(result);
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d003      	beq.n	800a430 <osMessageQueueNew+0x3c>
 800a428:	4b34      	ldr	r3, [pc, #208]	; (800a4fc <osMessageQueueNew+0x108>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d05f      	beq.n	800a4f0 <osMessageQueueNew+0xfc>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d05c      	beq.n	800a4f0 <osMessageQueueNew+0xfc>
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d059      	beq.n	800a4f0 <osMessageQueueNew+0xfc>
    mem = -1;
 800a43c:	f04f 33ff 	mov.w	r3, #4294967295
 800a440:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d029      	beq.n	800a49c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d012      	beq.n	800a476 <osMessageQueueNew+0x82>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	2b4f      	cmp	r3, #79	; 0x4f
 800a456:	d90e      	bls.n	800a476 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695a      	ldr	r2, [r3, #20]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	68b9      	ldr	r1, [r7, #8]
 800a468:	fb01 f303 	mul.w	r3, r1, r3
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d302      	bcc.n	800a476 <osMessageQueueNew+0x82>
        mem = 1;
 800a470:	2301      	movs	r3, #1
 800a472:	623b      	str	r3, [r7, #32]
 800a474:	e014      	b.n	800a4a0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d110      	bne.n	800a4a0 <osMessageQueueNew+0xac>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10c      	bne.n	800a4a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d108      	bne.n	800a4a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d104      	bne.n	800a4a0 <osMessageQueueNew+0xac>
          mem = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	623b      	str	r3, [r7, #32]
 800a49a:	e001      	b.n	800a4a0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d10b      	bne.n	800a4be <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	691a      	ldr	r2, [r3, #16]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	9100      	str	r1, [sp, #0]
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 fe77 	bl	800b1a8 <xQueueGenericCreateStatic>
 800a4ba:	6278      	str	r0, [r7, #36]	; 0x24
 800a4bc:	e008      	b.n	800a4d0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d105      	bne.n	800a4d0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 feef 	bl	800b2ac <xQueueGenericCreate>
 800a4ce:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00c      	beq.n	800a4f0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	61fb      	str	r3, [r7, #28]
 800a4e2:	e001      	b.n	800a4e8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a4e8:	69f9      	ldr	r1, [r7, #28]
 800a4ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4ec:	f001 fdc0 	bl	800c070 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3728      	adds	r7, #40	; 0x28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20001258 	.word	0x20001258

0800a500 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a500:	b580      	push	{r7, lr}
 800a502:	b08a      	sub	sp, #40	; 0x28
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	4613      	mov	r3, r2
 800a50e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a514:	2300      	movs	r3, #0
 800a516:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a518:	f3ef 8305 	mrs	r3, IPSR
 800a51c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a51e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10f      	bne.n	800a544 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a524:	f3ef 8310 	mrs	r3, PRIMASK
 800a528:	61bb      	str	r3, [r7, #24]
  return(result);
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d105      	bne.n	800a53c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a530:	f3ef 8311 	mrs	r3, BASEPRI
 800a534:	617b      	str	r3, [r7, #20]
  return(result);
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d02c      	beq.n	800a596 <osMessageQueuePut+0x96>
 800a53c:	4b28      	ldr	r3, [pc, #160]	; (800a5e0 <osMessageQueuePut+0xe0>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b02      	cmp	r3, #2
 800a542:	d128      	bne.n	800a596 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d005      	beq.n	800a556 <osMessageQueuePut+0x56>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <osMessageQueuePut+0x56>
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a556:	f06f 0303 	mvn.w	r3, #3
 800a55a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a55c:	e039      	b.n	800a5d2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a55e:	2300      	movs	r3, #0
 800a560:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a562:	f107 0210 	add.w	r2, r7, #16
 800a566:	2300      	movs	r3, #0
 800a568:	68b9      	ldr	r1, [r7, #8]
 800a56a:	6a38      	ldr	r0, [r7, #32]
 800a56c:	f001 f87c 	bl	800b668 <xQueueGenericSendFromISR>
 800a570:	4603      	mov	r3, r0
 800a572:	2b01      	cmp	r3, #1
 800a574:	d003      	beq.n	800a57e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a576:	f06f 0302 	mvn.w	r3, #2
 800a57a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a57c:	e029      	b.n	800a5d2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d026      	beq.n	800a5d2 <osMessageQueuePut+0xd2>
 800a584:	4b17      	ldr	r3, [pc, #92]	; (800a5e4 <osMessageQueuePut+0xe4>)
 800a586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a594:	e01d      	b.n	800a5d2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <osMessageQueuePut+0xa2>
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d103      	bne.n	800a5aa <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a5a2:	f06f 0303 	mvn.w	r3, #3
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5a8:	e014      	b.n	800a5d4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	68b9      	ldr	r1, [r7, #8]
 800a5b0:	6a38      	ldr	r0, [r7, #32]
 800a5b2:	f000 ff53 	bl	800b45c <xQueueGenericSend>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d00b      	beq.n	800a5d4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d003      	beq.n	800a5ca <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a5c2:	f06f 0301 	mvn.w	r3, #1
 800a5c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5c8:	e004      	b.n	800a5d4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a5ca:	f06f 0302 	mvn.w	r3, #2
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d0:	e000      	b.n	800a5d4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5d2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3728      	adds	r7, #40	; 0x28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	20001258 	.word	0x20001258
 800a5e4:	e000ed04 	.word	0xe000ed04

0800a5e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08a      	sub	sp, #40	; 0x28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5fe:	f3ef 8305 	mrs	r3, IPSR
 800a602:	61fb      	str	r3, [r7, #28]
  return(result);
 800a604:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10f      	bne.n	800a62a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a60a:	f3ef 8310 	mrs	r3, PRIMASK
 800a60e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d105      	bne.n	800a622 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a616:	f3ef 8311 	mrs	r3, BASEPRI
 800a61a:	617b      	str	r3, [r7, #20]
  return(result);
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d02c      	beq.n	800a67c <osMessageQueueGet+0x94>
 800a622:	4b28      	ldr	r3, [pc, #160]	; (800a6c4 <osMessageQueueGet+0xdc>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b02      	cmp	r3, #2
 800a628:	d128      	bne.n	800a67c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <osMessageQueueGet+0x54>
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <osMessageQueueGet+0x54>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a63c:	f06f 0303 	mvn.w	r3, #3
 800a640:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a642:	e038      	b.n	800a6b6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a644:	2300      	movs	r3, #0
 800a646:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a648:	f107 0310 	add.w	r3, r7, #16
 800a64c:	461a      	mov	r2, r3
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	6a38      	ldr	r0, [r7, #32]
 800a652:	f001 fb39 	bl	800bcc8 <xQueueReceiveFromISR>
 800a656:	4603      	mov	r3, r0
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d003      	beq.n	800a664 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a65c:	f06f 0302 	mvn.w	r3, #2
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a662:	e028      	b.n	800a6b6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d025      	beq.n	800a6b6 <osMessageQueueGet+0xce>
 800a66a:	4b17      	ldr	r3, [pc, #92]	; (800a6c8 <osMessageQueueGet+0xe0>)
 800a66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a67a:	e01c      	b.n	800a6b6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <osMessageQueueGet+0xa0>
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d103      	bne.n	800a690 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a688:	f06f 0303 	mvn.w	r3, #3
 800a68c:	627b      	str	r3, [r7, #36]	; 0x24
 800a68e:	e013      	b.n	800a6b8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	6a38      	ldr	r0, [r7, #32]
 800a696:	f001 f91d 	bl	800b8d4 <xQueueReceive>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d00b      	beq.n	800a6b8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a6a6:	f06f 0301 	mvn.w	r3, #1
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ac:	e004      	b.n	800a6b8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a6ae:	f06f 0302 	mvn.w	r3, #2
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a6b4:	e000      	b.n	800a6b8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a6b6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3728      	adds	r7, #40	; 0x28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20001258 	.word	0x20001258
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4a07      	ldr	r2, [pc, #28]	; (800a6f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a6dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4a06      	ldr	r2, [pc, #24]	; (800a6fc <vApplicationGetIdleTaskMemory+0x30>)
 800a6e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2280      	movs	r2, #128	; 0x80
 800a6e8:	601a      	str	r2, [r3, #0]
}
 800a6ea:	bf00      	nop
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	2000125c 	.word	0x2000125c
 800a6fc:	200012b8 	.word	0x200012b8

0800a700 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4a07      	ldr	r2, [pc, #28]	; (800a72c <vApplicationGetTimerTaskMemory+0x2c>)
 800a710:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	4a06      	ldr	r2, [pc, #24]	; (800a730 <vApplicationGetTimerTaskMemory+0x30>)
 800a716:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a71e:	601a      	str	r2, [r3, #0]
}
 800a720:	bf00      	nop
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	200014b8 	.word	0x200014b8
 800a730:	20001514 	.word	0x20001514

0800a734 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08a      	sub	sp, #40	; 0x28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a740:	f001 ff68 	bl	800c614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a744:	4b5b      	ldr	r3, [pc, #364]	; (800a8b4 <pvPortMalloc+0x180>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a74c:	f000 f91a 	bl	800a984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a750:	4b59      	ldr	r3, [pc, #356]	; (800a8b8 <pvPortMalloc+0x184>)
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4013      	ands	r3, r2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f040 8092 	bne.w	800a882 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d01f      	beq.n	800a7a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a764:	2208      	movs	r2, #8
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4413      	add	r3, r2
 800a76a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f003 0307 	and.w	r3, r3, #7
 800a772:	2b00      	cmp	r3, #0
 800a774:	d016      	beq.n	800a7a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f023 0307 	bic.w	r3, r3, #7
 800a77c:	3308      	adds	r3, #8
 800a77e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f003 0307 	and.w	r3, r3, #7
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00c      	beq.n	800a7a4 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	b672      	cpsid	i
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	b662      	cpsie	i
 800a79e:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a7a0:	bf00      	nop
 800a7a2:	e7fe      	b.n	800a7a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d06b      	beq.n	800a882 <pvPortMalloc+0x14e>
 800a7aa:	4b44      	ldr	r3, [pc, #272]	; (800a8bc <pvPortMalloc+0x188>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d866      	bhi.n	800a882 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7b4:	4b42      	ldr	r3, [pc, #264]	; (800a8c0 <pvPortMalloc+0x18c>)
 800a7b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7b8:	4b41      	ldr	r3, [pc, #260]	; (800a8c0 <pvPortMalloc+0x18c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7be:	e004      	b.n	800a7ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d903      	bls.n	800a7dc <pvPortMalloc+0xa8>
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1f1      	bne.n	800a7c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7dc:	4b35      	ldr	r3, [pc, #212]	; (800a8b4 <pvPortMalloc+0x180>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d04d      	beq.n	800a882 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2208      	movs	r2, #8
 800a7ec:	4413      	add	r3, r2
 800a7ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	1ad2      	subs	r2, r2, r3
 800a800:	2308      	movs	r3, #8
 800a802:	005b      	lsls	r3, r3, #1
 800a804:	429a      	cmp	r2, r3
 800a806:	d921      	bls.n	800a84c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4413      	add	r3, r2
 800a80e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	f003 0307 	and.w	r3, r3, #7
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00c      	beq.n	800a834 <pvPortMalloc+0x100>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	b672      	cpsid	i
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	b662      	cpsie	i
 800a82e:	613b      	str	r3, [r7, #16]
}
 800a830:	bf00      	nop
 800a832:	e7fe      	b.n	800a832 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	1ad2      	subs	r2, r2, r3
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a846:	69b8      	ldr	r0, [r7, #24]
 800a848:	f000 f8fe 	bl	800aa48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a84c:	4b1b      	ldr	r3, [pc, #108]	; (800a8bc <pvPortMalloc+0x188>)
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	4a19      	ldr	r2, [pc, #100]	; (800a8bc <pvPortMalloc+0x188>)
 800a858:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a85a:	4b18      	ldr	r3, [pc, #96]	; (800a8bc <pvPortMalloc+0x188>)
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	4b19      	ldr	r3, [pc, #100]	; (800a8c4 <pvPortMalloc+0x190>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d203      	bcs.n	800a86e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a866:	4b15      	ldr	r3, [pc, #84]	; (800a8bc <pvPortMalloc+0x188>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a16      	ldr	r2, [pc, #88]	; (800a8c4 <pvPortMalloc+0x190>)
 800a86c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	4b11      	ldr	r3, [pc, #68]	; (800a8b8 <pvPortMalloc+0x184>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	431a      	orrs	r2, r3
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a882:	f001 fed5 	bl	800c630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	f003 0307 	and.w	r3, r3, #7
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00c      	beq.n	800a8aa <pvPortMalloc+0x176>
	__asm volatile
 800a890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a894:	b672      	cpsid	i
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	b662      	cpsie	i
 800a8a4:	60fb      	str	r3, [r7, #12]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <pvPortMalloc+0x174>
	return pvReturn;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3728      	adds	r7, #40	; 0x28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	2000d91c 	.word	0x2000d91c
 800a8b8:	2000d928 	.word	0x2000d928
 800a8bc:	2000d920 	.word	0x2000d920
 800a8c0:	2000d914 	.word	0x2000d914
 800a8c4:	2000d924 	.word	0x2000d924

0800a8c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d04c      	beq.n	800a974 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8da:	2308      	movs	r3, #8
 800a8dc:	425b      	negs	r3, r3
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	4b23      	ldr	r3, [pc, #140]	; (800a97c <vPortFree+0xb4>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10c      	bne.n	800a910 <vPortFree+0x48>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fa:	b672      	cpsid	i
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	b662      	cpsie	i
 800a90a:	60fb      	str	r3, [r7, #12]
}
 800a90c:	bf00      	nop
 800a90e:	e7fe      	b.n	800a90e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00c      	beq.n	800a932 <vPortFree+0x6a>
	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91c:	b672      	cpsid	i
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	b662      	cpsie	i
 800a92c:	60bb      	str	r3, [r7, #8]
}
 800a92e:	bf00      	nop
 800a930:	e7fe      	b.n	800a930 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	4b11      	ldr	r3, [pc, #68]	; (800a97c <vPortFree+0xb4>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4013      	ands	r3, r2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d019      	beq.n	800a974 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d115      	bne.n	800a974 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <vPortFree+0xb4>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	43db      	mvns	r3, r3
 800a952:	401a      	ands	r2, r3
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a958:	f001 fe5c 	bl	800c614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	4b07      	ldr	r3, [pc, #28]	; (800a980 <vPortFree+0xb8>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4413      	add	r3, r2
 800a966:	4a06      	ldr	r2, [pc, #24]	; (800a980 <vPortFree+0xb8>)
 800a968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a96a:	6938      	ldr	r0, [r7, #16]
 800a96c:	f000 f86c 	bl	800aa48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a970:	f001 fe5e 	bl	800c630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a974:	bf00      	nop
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	2000d928 	.word	0x2000d928
 800a980:	2000d920 	.word	0x2000d920

0800a984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a98a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a98e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a990:	4b27      	ldr	r3, [pc, #156]	; (800aa30 <prvHeapInit+0xac>)
 800a992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00c      	beq.n	800a9b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3307      	adds	r3, #7
 800a9a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0307 	bic.w	r3, r3, #7
 800a9aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	4a1f      	ldr	r2, [pc, #124]	; (800aa30 <prvHeapInit+0xac>)
 800a9b4:	4413      	add	r3, r2
 800a9b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9bc:	4a1d      	ldr	r2, [pc, #116]	; (800aa34 <prvHeapInit+0xb0>)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9c2:	4b1c      	ldr	r3, [pc, #112]	; (800aa34 <prvHeapInit+0xb0>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9d0:	2208      	movs	r2, #8
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	1a9b      	subs	r3, r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f023 0307 	bic.w	r3, r3, #7
 800a9de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4a15      	ldr	r2, [pc, #84]	; (800aa38 <prvHeapInit+0xb4>)
 800a9e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9e6:	4b14      	ldr	r3, [pc, #80]	; (800aa38 <prvHeapInit+0xb4>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9ee:	4b12      	ldr	r3, [pc, #72]	; (800aa38 <prvHeapInit+0xb4>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa04:	4b0c      	ldr	r3, [pc, #48]	; (800aa38 <prvHeapInit+0xb4>)
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	4a0a      	ldr	r2, [pc, #40]	; (800aa3c <prvHeapInit+0xb8>)
 800aa12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <prvHeapInit+0xbc>)
 800aa1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa1c:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <prvHeapInit+0xc0>)
 800aa1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa22:	601a      	str	r2, [r3, #0]
}
 800aa24:	bf00      	nop
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	20001914 	.word	0x20001914
 800aa34:	2000d914 	.word	0x2000d914
 800aa38:	2000d91c 	.word	0x2000d91c
 800aa3c:	2000d924 	.word	0x2000d924
 800aa40:	2000d920 	.word	0x2000d920
 800aa44:	2000d928 	.word	0x2000d928

0800aa48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa50:	4b28      	ldr	r3, [pc, #160]	; (800aaf4 <prvInsertBlockIntoFreeList+0xac>)
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e002      	b.n	800aa5c <prvInsertBlockIntoFreeList+0x14>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d8f7      	bhi.n	800aa56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	4413      	add	r3, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d108      	bne.n	800aa8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	441a      	add	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	441a      	add	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d118      	bne.n	800aad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	4b15      	ldr	r3, [pc, #84]	; (800aaf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d00d      	beq.n	800aac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	441a      	add	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	e008      	b.n	800aad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aac6:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	e003      	b.n	800aad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d002      	beq.n	800aae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aae6:	bf00      	nop
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	2000d914 	.word	0x2000d914
 800aaf8:	2000d91c 	.word	0x2000d91c

0800aafc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f103 0208 	add.w	r2, r3, #8
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f04f 32ff 	mov.w	r2, #4294967295
 800ab14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f103 0208 	add.w	r2, r3, #8
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f103 0208 	add.w	r2, r3, #8
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab56:	b480      	push	{r7}
 800ab58:	b085      	sub	sp, #20
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	689a      	ldr	r2, [r3, #8]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	601a      	str	r2, [r3, #0]
}
 800ab92:	bf00      	nop
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b085      	sub	sp, #20
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb4:	d103      	bne.n	800abbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	e00c      	b.n	800abd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3308      	adds	r3, #8
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	e002      	b.n	800abcc <vListInsert+0x2e>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d2f6      	bcs.n	800abc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	683a      	ldr	r2, [r7, #0]
 800abf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	601a      	str	r2, [r3, #0]
}
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	6892      	ldr	r2, [r2, #8]
 800ac26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	6852      	ldr	r2, [r2, #4]
 800ac30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d103      	bne.n	800ac44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689a      	ldr	r2, [r3, #8]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	1e5a      	subs	r2, r3, #1
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	3b04      	subs	r3, #4
 800ac74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f023 0201 	bic.w	r2, r3, #1
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3b04      	subs	r3, #4
 800ac92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac94:	4a0c      	ldr	r2, [pc, #48]	; (800acc8 <pxPortInitialiseStack+0x64>)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3b14      	subs	r3, #20
 800ac9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3b04      	subs	r3, #4
 800acaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f06f 0202 	mvn.w	r2, #2
 800acb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3b20      	subs	r3, #32
 800acb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acba:	68fb      	ldr	r3, [r7, #12]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	0800accd 	.word	0x0800accd

0800accc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acd6:	4b14      	ldr	r3, [pc, #80]	; (800ad28 <prvTaskExitError+0x5c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acde:	d00c      	beq.n	800acfa <prvTaskExitError+0x2e>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace4:	b672      	cpsid	i
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	b662      	cpsie	i
 800acf4:	60fb      	str	r3, [r7, #12]
}
 800acf6:	bf00      	nop
 800acf8:	e7fe      	b.n	800acf8 <prvTaskExitError+0x2c>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	b672      	cpsid	i
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	b662      	cpsie	i
 800ad0e:	60bb      	str	r3, [r7, #8]
}
 800ad10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad12:	bf00      	nop
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0fc      	beq.n	800ad14 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad1a:	bf00      	nop
 800ad1c:	bf00      	nop
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	20000018 	.word	0x20000018
 800ad2c:	00000000 	.word	0x00000000

0800ad30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad30:	4b07      	ldr	r3, [pc, #28]	; (800ad50 <pxCurrentTCBConst2>)
 800ad32:	6819      	ldr	r1, [r3, #0]
 800ad34:	6808      	ldr	r0, [r1, #0]
 800ad36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3a:	f380 8809 	msr	PSP, r0
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f04f 0000 	mov.w	r0, #0
 800ad46:	f380 8811 	msr	BASEPRI, r0
 800ad4a:	4770      	bx	lr
 800ad4c:	f3af 8000 	nop.w

0800ad50 <pxCurrentTCBConst2>:
 800ad50:	2000d934 	.word	0x2000d934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop

0800ad58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad58:	4808      	ldr	r0, [pc, #32]	; (800ad7c <prvPortStartFirstTask+0x24>)
 800ad5a:	6800      	ldr	r0, [r0, #0]
 800ad5c:	6800      	ldr	r0, [r0, #0]
 800ad5e:	f380 8808 	msr	MSP, r0
 800ad62:	f04f 0000 	mov.w	r0, #0
 800ad66:	f380 8814 	msr	CONTROL, r0
 800ad6a:	b662      	cpsie	i
 800ad6c:	b661      	cpsie	f
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	df00      	svc	0
 800ad78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad7a:	bf00      	nop
 800ad7c:	e000ed08 	.word	0xe000ed08

0800ad80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad86:	4b37      	ldr	r3, [pc, #220]	; (800ae64 <xPortStartScheduler+0xe4>)
 800ad88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	22ff      	movs	r2, #255	; 0xff
 800ad96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ada0:	78fb      	ldrb	r3, [r7, #3]
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	4b2f      	ldr	r3, [pc, #188]	; (800ae68 <xPortStartScheduler+0xe8>)
 800adac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adae:	4b2f      	ldr	r3, [pc, #188]	; (800ae6c <xPortStartScheduler+0xec>)
 800adb0:	2207      	movs	r2, #7
 800adb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adb4:	e009      	b.n	800adca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800adb6:	4b2d      	ldr	r3, [pc, #180]	; (800ae6c <xPortStartScheduler+0xec>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3b01      	subs	r3, #1
 800adbc:	4a2b      	ldr	r2, [pc, #172]	; (800ae6c <xPortStartScheduler+0xec>)
 800adbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adca:	78fb      	ldrb	r3, [r7, #3]
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800add2:	2b80      	cmp	r3, #128	; 0x80
 800add4:	d0ef      	beq.n	800adb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800add6:	4b25      	ldr	r3, [pc, #148]	; (800ae6c <xPortStartScheduler+0xec>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f1c3 0307 	rsb	r3, r3, #7
 800adde:	2b04      	cmp	r3, #4
 800ade0:	d00c      	beq.n	800adfc <xPortStartScheduler+0x7c>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	b672      	cpsid	i
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	b662      	cpsie	i
 800adf6:	60bb      	str	r3, [r7, #8]
}
 800adf8:	bf00      	nop
 800adfa:	e7fe      	b.n	800adfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800adfc:	4b1b      	ldr	r3, [pc, #108]	; (800ae6c <xPortStartScheduler+0xec>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	4a1a      	ldr	r2, [pc, #104]	; (800ae6c <xPortStartScheduler+0xec>)
 800ae04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae06:	4b19      	ldr	r3, [pc, #100]	; (800ae6c <xPortStartScheduler+0xec>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae0e:	4a17      	ldr	r2, [pc, #92]	; (800ae6c <xPortStartScheduler+0xec>)
 800ae10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae1a:	4b15      	ldr	r3, [pc, #84]	; (800ae70 <xPortStartScheduler+0xf0>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a14      	ldr	r2, [pc, #80]	; (800ae70 <xPortStartScheduler+0xf0>)
 800ae20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae26:	4b12      	ldr	r3, [pc, #72]	; (800ae70 <xPortStartScheduler+0xf0>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a11      	ldr	r2, [pc, #68]	; (800ae70 <xPortStartScheduler+0xf0>)
 800ae2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae32:	f000 f8dd 	bl	800aff0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae36:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <xPortStartScheduler+0xf4>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae3c:	f000 f8fc 	bl	800b038 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae40:	4b0d      	ldr	r3, [pc, #52]	; (800ae78 <xPortStartScheduler+0xf8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a0c      	ldr	r2, [pc, #48]	; (800ae78 <xPortStartScheduler+0xf8>)
 800ae46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae4c:	f7ff ff84 	bl	800ad58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae50:	f001 fd5a 	bl	800c908 <vTaskSwitchContext>
	prvTaskExitError();
 800ae54:	f7ff ff3a 	bl	800accc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	e000e400 	.word	0xe000e400
 800ae68:	2000d92c 	.word	0x2000d92c
 800ae6c:	2000d930 	.word	0x2000d930
 800ae70:	e000ed20 	.word	0xe000ed20
 800ae74:	20000018 	.word	0x20000018
 800ae78:	e000ef34 	.word	0xe000ef34

0800ae7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	b672      	cpsid	i
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	b662      	cpsie	i
 800ae96:	607b      	str	r3, [r7, #4]
}
 800ae98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae9a:	4b10      	ldr	r3, [pc, #64]	; (800aedc <vPortEnterCritical+0x60>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	4a0e      	ldr	r2, [pc, #56]	; (800aedc <vPortEnterCritical+0x60>)
 800aea2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aea4:	4b0d      	ldr	r3, [pc, #52]	; (800aedc <vPortEnterCritical+0x60>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d111      	bne.n	800aed0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aeac:	4b0c      	ldr	r3, [pc, #48]	; (800aee0 <vPortEnterCritical+0x64>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00c      	beq.n	800aed0 <vPortEnterCritical+0x54>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeba:	b672      	cpsid	i
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	b662      	cpsie	i
 800aeca:	603b      	str	r3, [r7, #0]
}
 800aecc:	bf00      	nop
 800aece:	e7fe      	b.n	800aece <vPortEnterCritical+0x52>
	}
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	20000018 	.word	0x20000018
 800aee0:	e000ed04 	.word	0xe000ed04

0800aee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aeea:	4b13      	ldr	r3, [pc, #76]	; (800af38 <vPortExitCritical+0x54>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10c      	bne.n	800af0c <vPortExitCritical+0x28>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	b672      	cpsid	i
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	b662      	cpsie	i
 800af06:	607b      	str	r3, [r7, #4]
}
 800af08:	bf00      	nop
 800af0a:	e7fe      	b.n	800af0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800af0c:	4b0a      	ldr	r3, [pc, #40]	; (800af38 <vPortExitCritical+0x54>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3b01      	subs	r3, #1
 800af12:	4a09      	ldr	r2, [pc, #36]	; (800af38 <vPortExitCritical+0x54>)
 800af14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af16:	4b08      	ldr	r3, [pc, #32]	; (800af38 <vPortExitCritical+0x54>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d105      	bne.n	800af2a <vPortExitCritical+0x46>
 800af1e:	2300      	movs	r3, #0
 800af20:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	20000018 	.word	0x20000018
 800af3c:	00000000 	.word	0x00000000

0800af40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af40:	f3ef 8009 	mrs	r0, PSP
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	4b15      	ldr	r3, [pc, #84]	; (800afa0 <pxCurrentTCBConst>)
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	f01e 0f10 	tst.w	lr, #16
 800af50:	bf08      	it	eq
 800af52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5a:	6010      	str	r0, [r2, #0]
 800af5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af64:	b672      	cpsid	i
 800af66:	f380 8811 	msr	BASEPRI, r0
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	b662      	cpsie	i
 800af74:	f001 fcc8 	bl	800c908 <vTaskSwitchContext>
 800af78:	f04f 0000 	mov.w	r0, #0
 800af7c:	f380 8811 	msr	BASEPRI, r0
 800af80:	bc09      	pop	{r0, r3}
 800af82:	6819      	ldr	r1, [r3, #0]
 800af84:	6808      	ldr	r0, [r1, #0]
 800af86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8a:	f01e 0f10 	tst.w	lr, #16
 800af8e:	bf08      	it	eq
 800af90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af94:	f380 8809 	msr	PSP, r0
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop

0800afa0 <pxCurrentTCBConst>:
 800afa0:	2000d934 	.word	0x2000d934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afa4:	bf00      	nop
 800afa6:	bf00      	nop

0800afa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	b672      	cpsid	i
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	b662      	cpsie	i
 800afc2:	607b      	str	r3, [r7, #4]
}
 800afc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afc6:	f001 fbe3 	bl	800c790 <xTaskIncrementTick>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d003      	beq.n	800afd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afd0:	4b06      	ldr	r3, [pc, #24]	; (800afec <SysTick_Handler+0x44>)
 800afd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd6:	601a      	str	r2, [r3, #0]
 800afd8:	2300      	movs	r3, #0
 800afda:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	f383 8811 	msr	BASEPRI, r3
}
 800afe2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	e000ed04 	.word	0xe000ed04

0800aff0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aff4:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <vPortSetupTimerInterrupt+0x34>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800affa:	4b0b      	ldr	r3, [pc, #44]	; (800b028 <vPortSetupTimerInterrupt+0x38>)
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b000:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <vPortSetupTimerInterrupt+0x3c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a0a      	ldr	r2, [pc, #40]	; (800b030 <vPortSetupTimerInterrupt+0x40>)
 800b006:	fba2 2303 	umull	r2, r3, r2, r3
 800b00a:	099b      	lsrs	r3, r3, #6
 800b00c:	4a09      	ldr	r2, [pc, #36]	; (800b034 <vPortSetupTimerInterrupt+0x44>)
 800b00e:	3b01      	subs	r3, #1
 800b010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b012:	4b04      	ldr	r3, [pc, #16]	; (800b024 <vPortSetupTimerInterrupt+0x34>)
 800b014:	2207      	movs	r2, #7
 800b016:	601a      	str	r2, [r3, #0]
}
 800b018:	bf00      	nop
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	e000e010 	.word	0xe000e010
 800b028:	e000e018 	.word	0xe000e018
 800b02c:	2000000c 	.word	0x2000000c
 800b030:	10624dd3 	.word	0x10624dd3
 800b034:	e000e014 	.word	0xe000e014

0800b038 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b038:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b048 <vPortEnableVFP+0x10>
 800b03c:	6801      	ldr	r1, [r0, #0]
 800b03e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b042:	6001      	str	r1, [r0, #0]
 800b044:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b046:	bf00      	nop
 800b048:	e000ed88 	.word	0xe000ed88

0800b04c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b052:	f3ef 8305 	mrs	r3, IPSR
 800b056:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2b0f      	cmp	r3, #15
 800b05c:	d916      	bls.n	800b08c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b05e:	4a19      	ldr	r2, [pc, #100]	; (800b0c4 <vPortValidateInterruptPriority+0x78>)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4413      	add	r3, r2
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b068:	4b17      	ldr	r3, [pc, #92]	; (800b0c8 <vPortValidateInterruptPriority+0x7c>)
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	7afa      	ldrb	r2, [r7, #11]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d20c      	bcs.n	800b08c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	b672      	cpsid	i
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	b662      	cpsie	i
 800b086:	607b      	str	r3, [r7, #4]
}
 800b088:	bf00      	nop
 800b08a:	e7fe      	b.n	800b08a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b08c:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <vPortValidateInterruptPriority+0x80>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b094:	4b0e      	ldr	r3, [pc, #56]	; (800b0d0 <vPortValidateInterruptPriority+0x84>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d90c      	bls.n	800b0b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	b672      	cpsid	i
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	b662      	cpsie	i
 800b0b0:	603b      	str	r3, [r7, #0]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <vPortValidateInterruptPriority+0x68>
	}
 800b0b6:	bf00      	nop
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	e000e3f0 	.word	0xe000e3f0
 800b0c8:	2000d92c 	.word	0x2000d92c
 800b0cc:	e000ed0c 	.word	0xe000ed0c
 800b0d0:	2000d930 	.word	0x2000d930

0800b0d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10c      	bne.n	800b102 <xQueueGenericReset+0x2e>
	__asm volatile
 800b0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ec:	b672      	cpsid	i
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	b662      	cpsie	i
 800b0fc:	60bb      	str	r3, [r7, #8]
}
 800b0fe:	bf00      	nop
 800b100:	e7fe      	b.n	800b100 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b102:	f7ff febb 	bl	800ae7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b10e:	68f9      	ldr	r1, [r7, #12]
 800b110:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b112:	fb01 f303 	mul.w	r3, r1, r3
 800b116:	441a      	add	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b132:	3b01      	subs	r3, #1
 800b134:	68f9      	ldr	r1, [r7, #12]
 800b136:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b138:	fb01 f303 	mul.w	r3, r1, r3
 800b13c:	441a      	add	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	22ff      	movs	r2, #255	; 0xff
 800b146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	22ff      	movs	r2, #255	; 0xff
 800b14e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d114      	bne.n	800b182 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d01a      	beq.n	800b196 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3310      	adds	r3, #16
 800b164:	4618      	mov	r0, r3
 800b166:	f001 fc83 	bl	800ca70 <xTaskRemoveFromEventList>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d012      	beq.n	800b196 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b170:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <xQueueGenericReset+0xd0>)
 800b172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	e009      	b.n	800b196 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3310      	adds	r3, #16
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff fcb8 	bl	800aafc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3324      	adds	r3, #36	; 0x24
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff fcb3 	bl	800aafc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b196:	f7ff fea5 	bl	800aee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b19a:	2301      	movs	r3, #1
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	e000ed04 	.word	0xe000ed04

0800b1a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08e      	sub	sp, #56	; 0x38
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10c      	bne.n	800b1d6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	b672      	cpsid	i
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	b662      	cpsie	i
 800b1d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b1d2:	bf00      	nop
 800b1d4:	e7fe      	b.n	800b1d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10c      	bne.n	800b1f6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	b672      	cpsid	i
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	b662      	cpsie	i
 800b1f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <xQueueGenericCreateStatic+0x5a>
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <xQueueGenericCreateStatic+0x5e>
 800b202:	2301      	movs	r3, #1
 800b204:	e000      	b.n	800b208 <xQueueGenericCreateStatic+0x60>
 800b206:	2300      	movs	r3, #0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10c      	bne.n	800b226 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b210:	b672      	cpsid	i
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	b662      	cpsie	i
 800b220:	623b      	str	r3, [r7, #32]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d102      	bne.n	800b232 <xQueueGenericCreateStatic+0x8a>
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d101      	bne.n	800b236 <xQueueGenericCreateStatic+0x8e>
 800b232:	2301      	movs	r3, #1
 800b234:	e000      	b.n	800b238 <xQueueGenericCreateStatic+0x90>
 800b236:	2300      	movs	r3, #0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10c      	bne.n	800b256 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	b672      	cpsid	i
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	b662      	cpsie	i
 800b250:	61fb      	str	r3, [r7, #28]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b256:	2350      	movs	r3, #80	; 0x50
 800b258:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2b50      	cmp	r3, #80	; 0x50
 800b25e:	d00c      	beq.n	800b27a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	b672      	cpsid	i
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	b662      	cpsie	i
 800b274:	61bb      	str	r3, [r7, #24]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b27a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00d      	beq.n	800b2a2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b28e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	4613      	mov	r3, r2
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	68b9      	ldr	r1, [r7, #8]
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f000 f847 	bl	800b330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3730      	adds	r7, #48	; 0x30
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08a      	sub	sp, #40	; 0x28
 800b2b0:	af02      	add	r7, sp, #8
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10c      	bne.n	800b2da <xQueueGenericCreate+0x2e>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	b672      	cpsid	i
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	b662      	cpsie	i
 800b2d4:	613b      	str	r3, [r7, #16]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d102      	bne.n	800b2e6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	61fb      	str	r3, [r7, #28]
 800b2e4:	e004      	b.n	800b2f0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	fb02 f303 	mul.w	r3, r2, r3
 800b2ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	3350      	adds	r3, #80	; 0x50
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff fa1d 	bl	800a734 <pvPortMalloc>
 800b2fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d011      	beq.n	800b326 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	3350      	adds	r3, #80	; 0x50
 800b30a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b314:	79fa      	ldrb	r2, [r7, #7]
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	4613      	mov	r3, r2
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	68b9      	ldr	r1, [r7, #8]
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f000 f805 	bl	800b330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b326:	69bb      	ldr	r3, [r7, #24]
	}
 800b328:	4618      	mov	r0, r3
 800b32a:	3720      	adds	r7, #32
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
 800b33c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d103      	bne.n	800b34c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	69ba      	ldr	r2, [r7, #24]
 800b348:	601a      	str	r2, [r3, #0]
 800b34a:	e002      	b.n	800b352 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b35e:	2101      	movs	r1, #1
 800b360:	69b8      	ldr	r0, [r7, #24]
 800b362:	f7ff feb7 	bl	800b0d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	78fa      	ldrb	r2, [r7, #3]
 800b36a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b36e:	bf00      	nop
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b376:	b580      	push	{r7, lr}
 800b378:	b08a      	sub	sp, #40	; 0x28
 800b37a:	af02      	add	r7, sp, #8
 800b37c:	60f8      	str	r0, [r7, #12]
 800b37e:	60b9      	str	r1, [r7, #8]
 800b380:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10c      	bne.n	800b3a2 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38c:	b672      	cpsid	i
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	b662      	cpsie	i
 800b39c:	61bb      	str	r3, [r7, #24]
}
 800b39e:	bf00      	nop
 800b3a0:	e7fe      	b.n	800b3a0 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d90c      	bls.n	800b3c4 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	b672      	cpsid	i
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	b662      	cpsie	i
 800b3be:	617b      	str	r3, [r7, #20]
}
 800b3c0:	bf00      	nop
 800b3c2:	e7fe      	b.n	800b3c2 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7ff feea 	bl	800b1a8 <xQueueGenericCreateStatic>
 800b3d4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b3e2:	69fb      	ldr	r3, [r7, #28]
	}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3720      	adds	r7, #32
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10c      	bne.n	800b416 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	b672      	cpsid	i
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	b662      	cpsie	i
 800b410:	613b      	str	r3, [r7, #16]
}
 800b412:	bf00      	nop
 800b414:	e7fe      	b.n	800b414 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d90c      	bls.n	800b438 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	b672      	cpsid	i
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	b662      	cpsie	i
 800b432:	60fb      	str	r3, [r7, #12]
}
 800b434:	bf00      	nop
 800b436:	e7fe      	b.n	800b436 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b438:	2202      	movs	r2, #2
 800b43a:	2100      	movs	r1, #0
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7ff ff35 	bl	800b2ac <xQueueGenericCreate>
 800b442:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b450:	697b      	ldr	r3, [r7, #20]
	}
 800b452:	4618      	mov	r0, r3
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08e      	sub	sp, #56	; 0x38
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b46a:	2300      	movs	r3, #0
 800b46c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10c      	bne.n	800b492 <xQueueGenericSend+0x36>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	b672      	cpsid	i
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	b662      	cpsie	i
 800b48c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b48e:	bf00      	nop
 800b490:	e7fe      	b.n	800b490 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d103      	bne.n	800b4a0 <xQueueGenericSend+0x44>
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <xQueueGenericSend+0x48>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e000      	b.n	800b4a6 <xQueueGenericSend+0x4a>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10c      	bne.n	800b4c4 <xQueueGenericSend+0x68>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	b672      	cpsid	i
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	b662      	cpsie	i
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d103      	bne.n	800b4d2 <xQueueGenericSend+0x76>
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d101      	bne.n	800b4d6 <xQueueGenericSend+0x7a>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e000      	b.n	800b4d8 <xQueueGenericSend+0x7c>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10c      	bne.n	800b4f6 <xQueueGenericSend+0x9a>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	b672      	cpsid	i
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	b662      	cpsie	i
 800b4f0:	623b      	str	r3, [r7, #32]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4f6:	f001 fc81 	bl	800cdfc <xTaskGetSchedulerState>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <xQueueGenericSend+0xaa>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <xQueueGenericSend+0xae>
 800b506:	2301      	movs	r3, #1
 800b508:	e000      	b.n	800b50c <xQueueGenericSend+0xb0>
 800b50a:	2300      	movs	r3, #0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10c      	bne.n	800b52a <xQueueGenericSend+0xce>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	b672      	cpsid	i
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	b662      	cpsie	i
 800b524:	61fb      	str	r3, [r7, #28]
}
 800b526:	bf00      	nop
 800b528:	e7fe      	b.n	800b528 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b52a:	f7ff fca7 	bl	800ae7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b536:	429a      	cmp	r2, r3
 800b538:	d302      	bcc.n	800b540 <xQueueGenericSend+0xe4>
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d129      	bne.n	800b594 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	68b9      	ldr	r1, [r7, #8]
 800b544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b546:	f000 fc82 	bl	800be4e <prvCopyDataToQueue>
 800b54a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b550:	2b00      	cmp	r3, #0
 800b552:	d010      	beq.n	800b576 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	3324      	adds	r3, #36	; 0x24
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 fa89 	bl	800ca70 <xTaskRemoveFromEventList>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d013      	beq.n	800b58c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b564:	4b3f      	ldr	r3, [pc, #252]	; (800b664 <xQueueGenericSend+0x208>)
 800b566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	e00a      	b.n	800b58c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d007      	beq.n	800b58c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b57c:	4b39      	ldr	r3, [pc, #228]	; (800b664 <xQueueGenericSend+0x208>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b58c:	f7ff fcaa 	bl	800aee4 <vPortExitCritical>
				return pdPASS;
 800b590:	2301      	movs	r3, #1
 800b592:	e063      	b.n	800b65c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b59a:	f7ff fca3 	bl	800aee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e05c      	b.n	800b65c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d106      	bne.n	800b5b6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5a8:	f107 0314 	add.w	r3, r7, #20
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f001 fac5 	bl	800cb3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5b6:	f7ff fc95 	bl	800aee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5ba:	f001 f82b 	bl	800c614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5be:	f7ff fc5d 	bl	800ae7c <vPortEnterCritical>
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5c8:	b25b      	sxtb	r3, r3
 800b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ce:	d103      	bne.n	800b5d8 <xQueueGenericSend+0x17c>
 800b5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5de:	b25b      	sxtb	r3, r3
 800b5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e4:	d103      	bne.n	800b5ee <xQueueGenericSend+0x192>
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5ee:	f7ff fc79 	bl	800aee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5f2:	1d3a      	adds	r2, r7, #4
 800b5f4:	f107 0314 	add.w	r3, r7, #20
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f001 fab4 	bl	800cb68 <xTaskCheckForTimeOut>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d124      	bne.n	800b650 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b608:	f000 fd19 	bl	800c03e <prvIsQueueFull>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d018      	beq.n	800b644 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	3310      	adds	r3, #16
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	4611      	mov	r1, r2
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 f9d4 	bl	800c9c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b622:	f000 fca4 	bl	800bf6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b626:	f001 f803 	bl	800c630 <xTaskResumeAll>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f47f af7c 	bne.w	800b52a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b632:	4b0c      	ldr	r3, [pc, #48]	; (800b664 <xQueueGenericSend+0x208>)
 800b634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	e772      	b.n	800b52a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b646:	f000 fc92 	bl	800bf6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b64a:	f000 fff1 	bl	800c630 <xTaskResumeAll>
 800b64e:	e76c      	b.n	800b52a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b652:	f000 fc8c 	bl	800bf6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b656:	f000 ffeb 	bl	800c630 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b65a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3738      	adds	r7, #56	; 0x38
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	e000ed04 	.word	0xe000ed04

0800b668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b08e      	sub	sp, #56	; 0x38
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10c      	bne.n	800b69a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b684:	b672      	cpsid	i
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	b662      	cpsie	i
 800b694:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b696:	bf00      	nop
 800b698:	e7fe      	b.n	800b698 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d103      	bne.n	800b6a8 <xQueueGenericSendFromISR+0x40>
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <xQueueGenericSendFromISR+0x44>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e000      	b.n	800b6ae <xQueueGenericSendFromISR+0x46>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10c      	bne.n	800b6cc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	b672      	cpsid	i
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	b662      	cpsie	i
 800b6c6:	623b      	str	r3, [r7, #32]
}
 800b6c8:	bf00      	nop
 800b6ca:	e7fe      	b.n	800b6ca <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d103      	bne.n	800b6da <xQueueGenericSendFromISR+0x72>
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d101      	bne.n	800b6de <xQueueGenericSendFromISR+0x76>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e000      	b.n	800b6e0 <xQueueGenericSendFromISR+0x78>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10c      	bne.n	800b6fe <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	b672      	cpsid	i
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	b662      	cpsie	i
 800b6f8:	61fb      	str	r3, [r7, #28]
}
 800b6fa:	bf00      	nop
 800b6fc:	e7fe      	b.n	800b6fc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6fe:	f7ff fca5 	bl	800b04c <vPortValidateInterruptPriority>
	__asm volatile
 800b702:	f3ef 8211 	mrs	r2, BASEPRI
 800b706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70a:	b672      	cpsid	i
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	b662      	cpsie	i
 800b71a:	61ba      	str	r2, [r7, #24]
 800b71c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b71e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b720:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d302      	bcc.n	800b734 <xQueueGenericSendFromISR+0xcc>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b02      	cmp	r3, #2
 800b732:	d12c      	bne.n	800b78e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b73a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	68b9      	ldr	r1, [r7, #8]
 800b742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b744:	f000 fb83 	bl	800be4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b748:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b750:	d112      	bne.n	800b778 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	2b00      	cmp	r3, #0
 800b758:	d016      	beq.n	800b788 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	3324      	adds	r3, #36	; 0x24
 800b75e:	4618      	mov	r0, r3
 800b760:	f001 f986 	bl	800ca70 <xTaskRemoveFromEventList>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00e      	beq.n	800b788 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00b      	beq.n	800b788 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	601a      	str	r2, [r3, #0]
 800b776:	e007      	b.n	800b788 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b778:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b77c:	3301      	adds	r3, #1
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	b25a      	sxtb	r2, r3
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b788:	2301      	movs	r3, #1
 800b78a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b78c:	e001      	b.n	800b792 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	637b      	str	r3, [r7, #52]	; 0x34
 800b792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b794:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	f383 8811 	msr	BASEPRI, r3
}
 800b79c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3738      	adds	r7, #56	; 0x38
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08e      	sub	sp, #56	; 0x38
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10c      	bne.n	800b7d6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	b672      	cpsid	i
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	b662      	cpsie	i
 800b7d0:	623b      	str	r3, [r7, #32]
}
 800b7d2:	bf00      	nop
 800b7d4:	e7fe      	b.n	800b7d4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00c      	beq.n	800b7f8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	b672      	cpsid	i
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	b662      	cpsie	i
 800b7f2:	61fb      	str	r3, [r7, #28]
}
 800b7f4:	bf00      	nop
 800b7f6:	e7fe      	b.n	800b7f6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <xQueueGiveFromISR+0x60>
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <xQueueGiveFromISR+0x64>
 800b808:	2301      	movs	r3, #1
 800b80a:	e000      	b.n	800b80e <xQueueGiveFromISR+0x66>
 800b80c:	2300      	movs	r3, #0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10c      	bne.n	800b82c <xQueueGiveFromISR+0x84>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	b672      	cpsid	i
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	b662      	cpsie	i
 800b826:	61bb      	str	r3, [r7, #24]
}
 800b828:	bf00      	nop
 800b82a:	e7fe      	b.n	800b82a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b82c:	f7ff fc0e 	bl	800b04c <vPortValidateInterruptPriority>
	__asm volatile
 800b830:	f3ef 8211 	mrs	r2, BASEPRI
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	b672      	cpsid	i
 800b83a:	f383 8811 	msr	BASEPRI, r3
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	b662      	cpsie	i
 800b848:	617a      	str	r2, [r7, #20]
 800b84a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b84c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b84e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b85a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d22b      	bcs.n	800b8b8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86c:	1c5a      	adds	r2, r3, #1
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b872:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87a:	d112      	bne.n	800b8a2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	2b00      	cmp	r3, #0
 800b882:	d016      	beq.n	800b8b2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b886:	3324      	adds	r3, #36	; 0x24
 800b888:	4618      	mov	r0, r3
 800b88a:	f001 f8f1 	bl	800ca70 <xTaskRemoveFromEventList>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00e      	beq.n	800b8b2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00b      	beq.n	800b8b2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2201      	movs	r2, #1
 800b89e:	601a      	str	r2, [r3, #0]
 800b8a0:	e007      	b.n	800b8b2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	b25a      	sxtb	r2, r3
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b6:	e001      	b.n	800b8bc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f383 8811 	msr	BASEPRI, r3
}
 800b8c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3738      	adds	r7, #56	; 0x38
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08c      	sub	sp, #48	; 0x30
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10c      	bne.n	800b908 <xQueueReceive+0x34>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	b672      	cpsid	i
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	b662      	cpsie	i
 800b902:	623b      	str	r3, [r7, #32]
}
 800b904:	bf00      	nop
 800b906:	e7fe      	b.n	800b906 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d103      	bne.n	800b916 <xQueueReceive+0x42>
 800b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b912:	2b00      	cmp	r3, #0
 800b914:	d101      	bne.n	800b91a <xQueueReceive+0x46>
 800b916:	2301      	movs	r3, #1
 800b918:	e000      	b.n	800b91c <xQueueReceive+0x48>
 800b91a:	2300      	movs	r3, #0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10c      	bne.n	800b93a <xQueueReceive+0x66>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b924:	b672      	cpsid	i
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	b662      	cpsie	i
 800b934:	61fb      	str	r3, [r7, #28]
}
 800b936:	bf00      	nop
 800b938:	e7fe      	b.n	800b938 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b93a:	f001 fa5f 	bl	800cdfc <xTaskGetSchedulerState>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <xQueueReceive+0x76>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <xQueueReceive+0x7a>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e000      	b.n	800b950 <xQueueReceive+0x7c>
 800b94e:	2300      	movs	r3, #0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10c      	bne.n	800b96e <xQueueReceive+0x9a>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	b672      	cpsid	i
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	b662      	cpsie	i
 800b968:	61bb      	str	r3, [r7, #24]
}
 800b96a:	bf00      	nop
 800b96c:	e7fe      	b.n	800b96c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b96e:	f7ff fa85 	bl	800ae7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b976:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d01f      	beq.n	800b9be <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b97e:	68b9      	ldr	r1, [r7, #8]
 800b980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b982:	f000 face 	bl	800bf22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	1e5a      	subs	r2, r3, #1
 800b98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00f      	beq.n	800b9b6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	3310      	adds	r3, #16
 800b99a:	4618      	mov	r0, r3
 800b99c:	f001 f868 	bl	800ca70 <xTaskRemoveFromEventList>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d007      	beq.n	800b9b6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9a6:	4b3d      	ldr	r3, [pc, #244]	; (800ba9c <xQueueReceive+0x1c8>)
 800b9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9b6:	f7ff fa95 	bl	800aee4 <vPortExitCritical>
				return pdPASS;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e069      	b.n	800ba92 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d103      	bne.n	800b9cc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9c4:	f7ff fa8e 	bl	800aee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	e062      	b.n	800ba92 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d106      	bne.n	800b9e0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9d2:	f107 0310 	add.w	r3, r7, #16
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f001 f8b0 	bl	800cb3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9e0:	f7ff fa80 	bl	800aee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9e4:	f000 fe16 	bl	800c614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9e8:	f7ff fa48 	bl	800ae7c <vPortEnterCritical>
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9f2:	b25b      	sxtb	r3, r3
 800b9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f8:	d103      	bne.n	800ba02 <xQueueReceive+0x12e>
 800b9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba08:	b25b      	sxtb	r3, r3
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0e:	d103      	bne.n	800ba18 <xQueueReceive+0x144>
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	2200      	movs	r2, #0
 800ba14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba18:	f7ff fa64 	bl	800aee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba1c:	1d3a      	adds	r2, r7, #4
 800ba1e:	f107 0310 	add.w	r3, r7, #16
 800ba22:	4611      	mov	r1, r2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f001 f89f 	bl	800cb68 <xTaskCheckForTimeOut>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d123      	bne.n	800ba78 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba32:	f000 faee 	bl	800c012 <prvIsQueueEmpty>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d017      	beq.n	800ba6c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	3324      	adds	r3, #36	; 0x24
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	4611      	mov	r1, r2
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 ffbf 	bl	800c9c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba4c:	f000 fa8f 	bl	800bf6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba50:	f000 fdee 	bl	800c630 <xTaskResumeAll>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d189      	bne.n	800b96e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ba5a:	4b10      	ldr	r3, [pc, #64]	; (800ba9c <xQueueReceive+0x1c8>)
 800ba5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba60:	601a      	str	r2, [r3, #0]
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	e780      	b.n	800b96e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba6e:	f000 fa7e 	bl	800bf6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba72:	f000 fddd 	bl	800c630 <xTaskResumeAll>
 800ba76:	e77a      	b.n	800b96e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba7a:	f000 fa78 	bl	800bf6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba7e:	f000 fdd7 	bl	800c630 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba84:	f000 fac5 	bl	800c012 <prvIsQueueEmpty>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f43f af6f 	beq.w	800b96e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3730      	adds	r7, #48	; 0x30
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	e000ed04 	.word	0xe000ed04

0800baa0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b08e      	sub	sp, #56	; 0x38
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800baaa:	2300      	movs	r3, #0
 800baac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bab2:	2300      	movs	r3, #0
 800bab4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10c      	bne.n	800bad6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	b672      	cpsid	i
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	b662      	cpsie	i
 800bad0:	623b      	str	r3, [r7, #32]
}
 800bad2:	bf00      	nop
 800bad4:	e7fe      	b.n	800bad4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00c      	beq.n	800baf8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae2:	b672      	cpsid	i
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	b662      	cpsie	i
 800baf2:	61fb      	str	r3, [r7, #28]
}
 800baf4:	bf00      	nop
 800baf6:	e7fe      	b.n	800baf6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800baf8:	f001 f980 	bl	800cdfc <xTaskGetSchedulerState>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <xQueueSemaphoreTake+0x68>
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <xQueueSemaphoreTake+0x6c>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e000      	b.n	800bb0e <xQueueSemaphoreTake+0x6e>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10c      	bne.n	800bb2c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb16:	b672      	cpsid	i
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	b662      	cpsie	i
 800bb26:	61bb      	str	r3, [r7, #24]
}
 800bb28:	bf00      	nop
 800bb2a:	e7fe      	b.n	800bb2a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb2c:	f7ff f9a6 	bl	800ae7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d024      	beq.n	800bb86 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	1e5a      	subs	r2, r3, #1
 800bb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d104      	bne.n	800bb56 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bb4c:	f001 fad4 	bl	800d0f8 <pvTaskIncrementMutexHeldCount>
 800bb50:	4602      	mov	r2, r0
 800bb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00f      	beq.n	800bb7e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb60:	3310      	adds	r3, #16
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 ff84 	bl	800ca70 <xTaskRemoveFromEventList>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d007      	beq.n	800bb7e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb6e:	4b55      	ldr	r3, [pc, #340]	; (800bcc4 <xQueueSemaphoreTake+0x224>)
 800bb70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb7e:	f7ff f9b1 	bl	800aee4 <vPortExitCritical>
				return pdPASS;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e099      	b.n	800bcba <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d113      	bne.n	800bbb4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00c      	beq.n	800bbac <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	b672      	cpsid	i
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	b662      	cpsie	i
 800bba6:	617b      	str	r3, [r7, #20]
}
 800bba8:	bf00      	nop
 800bbaa:	e7fe      	b.n	800bbaa <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bbac:	f7ff f99a 	bl	800aee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	e082      	b.n	800bcba <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbba:	f107 030c 	add.w	r3, r7, #12
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 ffbc 	bl	800cb3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbc8:	f7ff f98c 	bl	800aee4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbcc:	f000 fd22 	bl	800c614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbd0:	f7ff f954 	bl	800ae7c <vPortEnterCritical>
 800bbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbda:	b25b      	sxtb	r3, r3
 800bbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe0:	d103      	bne.n	800bbea <xQueueSemaphoreTake+0x14a>
 800bbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbf0:	b25b      	sxtb	r3, r3
 800bbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf6:	d103      	bne.n	800bc00 <xQueueSemaphoreTake+0x160>
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc00:	f7ff f970 	bl	800aee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc04:	463a      	mov	r2, r7
 800bc06:	f107 030c 	add.w	r3, r7, #12
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 ffab 	bl	800cb68 <xTaskCheckForTimeOut>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d132      	bne.n	800bc7e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc1a:	f000 f9fa 	bl	800c012 <prvIsQueueEmpty>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d026      	beq.n	800bc72 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d109      	bne.n	800bc40 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bc2c:	f7ff f926 	bl	800ae7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f001 f8ff 	bl	800ce38 <xTaskPriorityInherit>
 800bc3a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bc3c:	f7ff f952 	bl	800aee4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc42:	3324      	adds	r3, #36	; 0x24
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	4611      	mov	r1, r2
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f000 febd 	bl	800c9c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc50:	f000 f98d 	bl	800bf6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc54:	f000 fcec 	bl	800c630 <xTaskResumeAll>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f47f af66 	bne.w	800bb2c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bc60:	4b18      	ldr	r3, [pc, #96]	; (800bcc4 <xQueueSemaphoreTake+0x224>)
 800bc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc66:	601a      	str	r2, [r3, #0]
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	e75c      	b.n	800bb2c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bc72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc74:	f000 f97b 	bl	800bf6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc78:	f000 fcda 	bl	800c630 <xTaskResumeAll>
 800bc7c:	e756      	b.n	800bb2c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bc7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc80:	f000 f975 	bl	800bf6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc84:	f000 fcd4 	bl	800c630 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc8a:	f000 f9c2 	bl	800c012 <prvIsQueueEmpty>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f43f af4b 	beq.w	800bb2c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00d      	beq.n	800bcb8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bc9c:	f7ff f8ee 	bl	800ae7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bca2:	f000 f8bc 	bl	800be1e <prvGetDisinheritPriorityAfterTimeout>
 800bca6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f001 f99c 	bl	800cfec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bcb4:	f7ff f916 	bl	800aee4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bcb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3738      	adds	r7, #56	; 0x38
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	e000ed04 	.word	0xe000ed04

0800bcc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08e      	sub	sp, #56	; 0x38
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10c      	bne.n	800bcf8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800bcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce2:	b672      	cpsid	i
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	b662      	cpsie	i
 800bcf2:	623b      	str	r3, [r7, #32]
}
 800bcf4:	bf00      	nop
 800bcf6:	e7fe      	b.n	800bcf6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d103      	bne.n	800bd06 <xQueueReceiveFromISR+0x3e>
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <xQueueReceiveFromISR+0x42>
 800bd06:	2301      	movs	r3, #1
 800bd08:	e000      	b.n	800bd0c <xQueueReceiveFromISR+0x44>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10c      	bne.n	800bd2a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	b672      	cpsid	i
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	b662      	cpsie	i
 800bd24:	61fb      	str	r3, [r7, #28]
}
 800bd26:	bf00      	nop
 800bd28:	e7fe      	b.n	800bd28 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd2a:	f7ff f98f 	bl	800b04c <vPortValidateInterruptPriority>
	__asm volatile
 800bd2e:	f3ef 8211 	mrs	r2, BASEPRI
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	b672      	cpsid	i
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	b662      	cpsie	i
 800bd46:	61ba      	str	r2, [r7, #24]
 800bd48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d02f      	beq.n	800bdba <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd64:	68b9      	ldr	r1, [r7, #8]
 800bd66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd68:	f000 f8db 	bl	800bf22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	1e5a      	subs	r2, r3, #1
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bd74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7c:	d112      	bne.n	800bda4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d016      	beq.n	800bdb4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	3310      	adds	r3, #16
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fe70 	bl	800ca70 <xTaskRemoveFromEventList>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00e      	beq.n	800bdb4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00b      	beq.n	800bdb4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	601a      	str	r2, [r3, #0]
 800bda2:	e007      	b.n	800bdb4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda8:	3301      	adds	r3, #1
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	b25a      	sxtb	r2, r3
 800bdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	637b      	str	r3, [r7, #52]	; 0x34
 800bdb8:	e001      	b.n	800bdbe <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	f383 8811 	msr	BASEPRI, r3
}
 800bdc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3738      	adds	r7, #56	; 0x38
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10c      	bne.n	800be00 <vQueueDelete+0x2c>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	b672      	cpsid	i
 800bdec:	f383 8811 	msr	BASEPRI, r3
 800bdf0:	f3bf 8f6f 	isb	sy
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	b662      	cpsie	i
 800bdfa:	60bb      	str	r3, [r7, #8]
}
 800bdfc:	bf00      	nop
 800bdfe:	e7fe      	b.n	800bdfe <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f000 f95f 	bl	800c0c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d102      	bne.n	800be16 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7fe fd59 	bl	800a8c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be1e:	b480      	push	{r7}
 800be20:	b085      	sub	sp, #20
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d006      	beq.n	800be3c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800be38:	60fb      	str	r3, [r7, #12]
 800be3a:	e001      	b.n	800be40 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800be3c:	2300      	movs	r3, #0
 800be3e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800be40:	68fb      	ldr	r3, [r7, #12]
	}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b086      	sub	sp, #24
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be5a:	2300      	movs	r3, #0
 800be5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10d      	bne.n	800be88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d14d      	bne.n	800bf10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	4618      	mov	r0, r3
 800be7a:	f001 f845 	bl	800cf08 <xTaskPriorityDisinherit>
 800be7e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	609a      	str	r2, [r3, #8]
 800be86:	e043      	b.n	800bf10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d119      	bne.n	800bec2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6858      	ldr	r0, [r3, #4]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be96:	461a      	mov	r2, r3
 800be98:	68b9      	ldr	r1, [r7, #8]
 800be9a:	f00f fe11 	bl	801bac0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea6:	441a      	add	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d32b      	bcc.n	800bf10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	605a      	str	r2, [r3, #4]
 800bec0:	e026      	b.n	800bf10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	68d8      	ldr	r0, [r3, #12]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beca:	461a      	mov	r2, r3
 800becc:	68b9      	ldr	r1, [r7, #8]
 800bece:	f00f fdf7 	bl	801bac0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	68da      	ldr	r2, [r3, #12]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	425b      	negs	r3, r3
 800bedc:	441a      	add	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	68da      	ldr	r2, [r3, #12]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	429a      	cmp	r2, r3
 800beec:	d207      	bcs.n	800befe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	689a      	ldr	r2, [r3, #8]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef6:	425b      	negs	r3, r3
 800bef8:	441a      	add	r2, r3
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d105      	bne.n	800bf10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	1c5a      	adds	r2, r3, #1
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf18:	697b      	ldr	r3, [r7, #20]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b082      	sub	sp, #8
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d018      	beq.n	800bf66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68da      	ldr	r2, [r3, #12]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3c:	441a      	add	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68da      	ldr	r2, [r3, #12]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d303      	bcc.n	800bf56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	68d9      	ldr	r1, [r3, #12]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	461a      	mov	r2, r3
 800bf60:	6838      	ldr	r0, [r7, #0]
 800bf62:	f00f fdad 	bl	801bac0 <memcpy>
	}
}
 800bf66:	bf00      	nop
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b084      	sub	sp, #16
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf76:	f7fe ff81 	bl	800ae7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf82:	e011      	b.n	800bfa8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d012      	beq.n	800bfb2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	3324      	adds	r3, #36	; 0x24
 800bf90:	4618      	mov	r0, r3
 800bf92:	f000 fd6d 	bl	800ca70 <xTaskRemoveFromEventList>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bf9c:	f000 fe4a 	bl	800cc34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dce9      	bgt.n	800bf84 <prvUnlockQueue+0x16>
 800bfb0:	e000      	b.n	800bfb4 <prvUnlockQueue+0x46>
					break;
 800bfb2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	22ff      	movs	r2, #255	; 0xff
 800bfb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bfbc:	f7fe ff92 	bl	800aee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bfc0:	f7fe ff5c 	bl	800ae7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfcc:	e011      	b.n	800bff2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d012      	beq.n	800bffc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3310      	adds	r3, #16
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fd48 	bl	800ca70 <xTaskRemoveFromEventList>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bfe6:	f000 fe25 	bl	800cc34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bfea:	7bbb      	ldrb	r3, [r7, #14]
 800bfec:	3b01      	subs	r3, #1
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	dce9      	bgt.n	800bfce <prvUnlockQueue+0x60>
 800bffa:	e000      	b.n	800bffe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bffc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	22ff      	movs	r2, #255	; 0xff
 800c002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c006:	f7fe ff6d 	bl	800aee4 <vPortExitCritical>
}
 800c00a:	bf00      	nop
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b084      	sub	sp, #16
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c01a:	f7fe ff2f 	bl	800ae7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c022:	2b00      	cmp	r3, #0
 800c024:	d102      	bne.n	800c02c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c026:	2301      	movs	r3, #1
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	e001      	b.n	800c030 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c02c:	2300      	movs	r3, #0
 800c02e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c030:	f7fe ff58 	bl	800aee4 <vPortExitCritical>

	return xReturn;
 800c034:	68fb      	ldr	r3, [r7, #12]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c046:	f7fe ff19 	bl	800ae7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c052:	429a      	cmp	r2, r3
 800c054:	d102      	bne.n	800c05c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c056:	2301      	movs	r3, #1
 800c058:	60fb      	str	r3, [r7, #12]
 800c05a:	e001      	b.n	800c060 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c060:	f7fe ff40 	bl	800aee4 <vPortExitCritical>

	return xReturn;
 800c064:	68fb      	ldr	r3, [r7, #12]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c07a:	2300      	movs	r3, #0
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	e014      	b.n	800c0aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c080:	4a0f      	ldr	r2, [pc, #60]	; (800c0c0 <vQueueAddToRegistry+0x50>)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10b      	bne.n	800c0a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c08c:	490c      	ldr	r1, [pc, #48]	; (800c0c0 <vQueueAddToRegistry+0x50>)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	683a      	ldr	r2, [r7, #0]
 800c092:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c096:	4a0a      	ldr	r2, [pc, #40]	; (800c0c0 <vQueueAddToRegistry+0x50>)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	4413      	add	r3, r2
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c0a2:	e006      	b.n	800c0b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	60fb      	str	r3, [r7, #12]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2b07      	cmp	r3, #7
 800c0ae:	d9e7      	bls.n	800c080 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c0b0:	bf00      	nop
 800c0b2:	bf00      	nop
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	2000e500 	.word	0x2000e500

0800c0c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	e016      	b.n	800c100 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c0d2:	4a10      	ldr	r2, [pc, #64]	; (800c114 <vQueueUnregisterQueue+0x50>)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	4413      	add	r3, r2
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d10b      	bne.n	800c0fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c0e2:	4a0c      	ldr	r2, [pc, #48]	; (800c114 <vQueueUnregisterQueue+0x50>)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c0ec:	4a09      	ldr	r2, [pc, #36]	; (800c114 <vQueueUnregisterQueue+0x50>)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	00db      	lsls	r3, r3, #3
 800c0f2:	4413      	add	r3, r2
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	605a      	str	r2, [r3, #4]
				break;
 800c0f8:	e006      	b.n	800c108 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	60fb      	str	r3, [r7, #12]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2b07      	cmp	r3, #7
 800c104:	d9e5      	bls.n	800c0d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c106:	bf00      	nop
 800c108:	bf00      	nop
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	2000e500 	.word	0x2000e500

0800c118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c128:	f7fe fea8 	bl	800ae7c <vPortEnterCritical>
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c132:	b25b      	sxtb	r3, r3
 800c134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c138:	d103      	bne.n	800c142 <vQueueWaitForMessageRestricted+0x2a>
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c148:	b25b      	sxtb	r3, r3
 800c14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14e:	d103      	bne.n	800c158 <vQueueWaitForMessageRestricted+0x40>
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	2200      	movs	r2, #0
 800c154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c158:	f7fe fec4 	bl	800aee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c160:	2b00      	cmp	r3, #0
 800c162:	d106      	bne.n	800c172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	3324      	adds	r3, #36	; 0x24
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	68b9      	ldr	r1, [r7, #8]
 800c16c:	4618      	mov	r0, r3
 800c16e:	f000 fc51 	bl	800ca14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c172:	6978      	ldr	r0, [r7, #20]
 800c174:	f7ff fefb 	bl	800bf6e <prvUnlockQueue>
	}
 800c178:	bf00      	nop
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c180:	b580      	push	{r7, lr}
 800c182:	b08e      	sub	sp, #56	; 0x38
 800c184:	af04      	add	r7, sp, #16
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
 800c18c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10c      	bne.n	800c1ae <xTaskCreateStatic+0x2e>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	b672      	cpsid	i
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	b662      	cpsie	i
 800c1a8:	623b      	str	r3, [r7, #32]
}
 800c1aa:	bf00      	nop
 800c1ac:	e7fe      	b.n	800c1ac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10c      	bne.n	800c1ce <xTaskCreateStatic+0x4e>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	b672      	cpsid	i
 800c1ba:	f383 8811 	msr	BASEPRI, r3
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	b662      	cpsie	i
 800c1c8:	61fb      	str	r3, [r7, #28]
}
 800c1ca:	bf00      	nop
 800c1cc:	e7fe      	b.n	800c1cc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c1ce:	235c      	movs	r3, #92	; 0x5c
 800c1d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	2b5c      	cmp	r3, #92	; 0x5c
 800c1d6:	d00c      	beq.n	800c1f2 <xTaskCreateStatic+0x72>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	b672      	cpsid	i
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	b662      	cpsie	i
 800c1ec:	61bb      	str	r3, [r7, #24]
}
 800c1ee:	bf00      	nop
 800c1f0:	e7fe      	b.n	800c1f0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d01e      	beq.n	800c238 <xTaskCreateStatic+0xb8>
 800c1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d01b      	beq.n	800c238 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c202:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c208:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	2202      	movs	r2, #2
 800c20e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c212:	2300      	movs	r3, #0
 800c214:	9303      	str	r3, [sp, #12]
 800c216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c218:	9302      	str	r3, [sp, #8]
 800c21a:	f107 0314 	add.w	r3, r7, #20
 800c21e:	9301      	str	r3, [sp, #4]
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 f850 	bl	800c2d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c232:	f000 f8df 	bl	800c3f4 <prvAddNewTaskToReadyList>
 800c236:	e001      	b.n	800c23c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c238:	2300      	movs	r3, #0
 800c23a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c23c:	697b      	ldr	r3, [r7, #20]
	}
 800c23e:	4618      	mov	r0, r3
 800c240:	3728      	adds	r7, #40	; 0x28
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c246:	b580      	push	{r7, lr}
 800c248:	b08c      	sub	sp, #48	; 0x30
 800c24a:	af04      	add	r7, sp, #16
 800c24c:	60f8      	str	r0, [r7, #12]
 800c24e:	60b9      	str	r1, [r7, #8]
 800c250:	603b      	str	r3, [r7, #0]
 800c252:	4613      	mov	r3, r2
 800c254:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c256:	88fb      	ldrh	r3, [r7, #6]
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fe fa6a 	bl	800a734 <pvPortMalloc>
 800c260:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00e      	beq.n	800c286 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c268:	205c      	movs	r0, #92	; 0x5c
 800c26a:	f7fe fa63 	bl	800a734 <pvPortMalloc>
 800c26e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d003      	beq.n	800c27e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	631a      	str	r2, [r3, #48]	; 0x30
 800c27c:	e005      	b.n	800c28a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c27e:	6978      	ldr	r0, [r7, #20]
 800c280:	f7fe fb22 	bl	800a8c8 <vPortFree>
 800c284:	e001      	b.n	800c28a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c286:	2300      	movs	r3, #0
 800c288:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d017      	beq.n	800c2c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c298:	88fa      	ldrh	r2, [r7, #6]
 800c29a:	2300      	movs	r3, #0
 800c29c:	9303      	str	r3, [sp, #12]
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	9302      	str	r3, [sp, #8]
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	68b9      	ldr	r1, [r7, #8]
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 f80e 	bl	800c2d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2b4:	69f8      	ldr	r0, [r7, #28]
 800c2b6:	f000 f89d 	bl	800c3f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	61bb      	str	r3, [r7, #24]
 800c2be:	e002      	b.n	800c2c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2c6:	69bb      	ldr	r3, [r7, #24]
	}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3720      	adds	r7, #32
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b088      	sub	sp, #32
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	21a5      	movs	r1, #165	; 0xa5
 800c2ea:	f00f fbf7 	bl	801badc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2f2:	6879      	ldr	r1, [r7, #4]
 800c2f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c2f8:	440b      	add	r3, r1
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	4413      	add	r3, r2
 800c2fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	f023 0307 	bic.w	r3, r3, #7
 800c306:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00c      	beq.n	800c32c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	b672      	cpsid	i
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	b662      	cpsie	i
 800c326:	617b      	str	r3, [r7, #20]
}
 800c328:	bf00      	nop
 800c32a:	e7fe      	b.n	800c32a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d01f      	beq.n	800c372 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c332:	2300      	movs	r3, #0
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	e012      	b.n	800c35e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	4413      	add	r3, r2
 800c33e:	7819      	ldrb	r1, [r3, #0]
 800c340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	4413      	add	r3, r2
 800c346:	3334      	adds	r3, #52	; 0x34
 800c348:	460a      	mov	r2, r1
 800c34a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	4413      	add	r3, r2
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	3301      	adds	r3, #1
 800c35c:	61fb      	str	r3, [r7, #28]
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	2b0f      	cmp	r3, #15
 800c362:	d9e9      	bls.n	800c338 <prvInitialiseNewTask+0x68>
 800c364:	e000      	b.n	800c368 <prvInitialiseNewTask+0x98>
			{
				break;
 800c366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c370:	e003      	b.n	800c37a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	2200      	movs	r2, #0
 800c376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37c:	2b37      	cmp	r3, #55	; 0x37
 800c37e:	d901      	bls.n	800c384 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c380:	2337      	movs	r3, #55	; 0x37
 800c382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c38e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	2200      	movs	r2, #0
 800c394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	3304      	adds	r3, #4
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fe fbce 	bl	800ab3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	3318      	adds	r3, #24
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fbc9 	bl	800ab3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	68f9      	ldr	r1, [r7, #12]
 800c3d2:	69b8      	ldr	r0, [r7, #24]
 800c3d4:	f7fe fc46 	bl	800ac64 <pxPortInitialiseStack>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3ea:	bf00      	nop
 800c3ec:	3720      	adds	r7, #32
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
	...

0800c3f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3fc:	f7fe fd3e 	bl	800ae7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c400:	4b2d      	ldr	r3, [pc, #180]	; (800c4b8 <prvAddNewTaskToReadyList+0xc4>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3301      	adds	r3, #1
 800c406:	4a2c      	ldr	r2, [pc, #176]	; (800c4b8 <prvAddNewTaskToReadyList+0xc4>)
 800c408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c40a:	4b2c      	ldr	r3, [pc, #176]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d109      	bne.n	800c426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c412:	4a2a      	ldr	r2, [pc, #168]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c418:	4b27      	ldr	r3, [pc, #156]	; (800c4b8 <prvAddNewTaskToReadyList+0xc4>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d110      	bne.n	800c442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c420:	f000 fc2c 	bl	800cc7c <prvInitialiseTaskLists>
 800c424:	e00d      	b.n	800c442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c426:	4b26      	ldr	r3, [pc, #152]	; (800c4c0 <prvAddNewTaskToReadyList+0xcc>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d109      	bne.n	800c442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c42e:	4b23      	ldr	r3, [pc, #140]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c438:	429a      	cmp	r2, r3
 800c43a:	d802      	bhi.n	800c442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c43c:	4a1f      	ldr	r2, [pc, #124]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c442:	4b20      	ldr	r3, [pc, #128]	; (800c4c4 <prvAddNewTaskToReadyList+0xd0>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3301      	adds	r3, #1
 800c448:	4a1e      	ldr	r2, [pc, #120]	; (800c4c4 <prvAddNewTaskToReadyList+0xd0>)
 800c44a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c44c:	4b1d      	ldr	r3, [pc, #116]	; (800c4c4 <prvAddNewTaskToReadyList+0xd0>)
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c458:	4b1b      	ldr	r3, [pc, #108]	; (800c4c8 <prvAddNewTaskToReadyList+0xd4>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d903      	bls.n	800c468 <prvAddNewTaskToReadyList+0x74>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	4a18      	ldr	r2, [pc, #96]	; (800c4c8 <prvAddNewTaskToReadyList+0xd4>)
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46c:	4613      	mov	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4a15      	ldr	r2, [pc, #84]	; (800c4cc <prvAddNewTaskToReadyList+0xd8>)
 800c476:	441a      	add	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3304      	adds	r3, #4
 800c47c:	4619      	mov	r1, r3
 800c47e:	4610      	mov	r0, r2
 800c480:	f7fe fb69 	bl	800ab56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c484:	f7fe fd2e 	bl	800aee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c488:	4b0d      	ldr	r3, [pc, #52]	; (800c4c0 <prvAddNewTaskToReadyList+0xcc>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00e      	beq.n	800c4ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c490:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d207      	bcs.n	800c4ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c49e:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <prvAddNewTaskToReadyList+0xdc>)
 800c4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	2000de08 	.word	0x2000de08
 800c4bc:	2000d934 	.word	0x2000d934
 800c4c0:	2000de14 	.word	0x2000de14
 800c4c4:	2000de24 	.word	0x2000de24
 800c4c8:	2000de10 	.word	0x2000de10
 800c4cc:	2000d938 	.word	0x2000d938
 800c4d0:	e000ed04 	.word	0xe000ed04

0800c4d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d019      	beq.n	800c51a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c4e6:	4b14      	ldr	r3, [pc, #80]	; (800c538 <vTaskDelay+0x64>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00c      	beq.n	800c508 <vTaskDelay+0x34>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	b672      	cpsid	i
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	b662      	cpsie	i
 800c502:	60bb      	str	r3, [r7, #8]
}
 800c504:	bf00      	nop
 800c506:	e7fe      	b.n	800c506 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c508:	f000 f884 	bl	800c614 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c50c:	2100      	movs	r1, #0
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fe06 	bl	800d120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c514:	f000 f88c 	bl	800c630 <xTaskResumeAll>
 800c518:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d107      	bne.n	800c530 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c520:	4b06      	ldr	r3, [pc, #24]	; (800c53c <vTaskDelay+0x68>)
 800c522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c530:	bf00      	nop
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	2000de30 	.word	0x2000de30
 800c53c:	e000ed04 	.word	0xe000ed04

0800c540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b08a      	sub	sp, #40	; 0x28
 800c544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c546:	2300      	movs	r3, #0
 800c548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c54e:	463a      	mov	r2, r7
 800c550:	1d39      	adds	r1, r7, #4
 800c552:	f107 0308 	add.w	r3, r7, #8
 800c556:	4618      	mov	r0, r3
 800c558:	f7fe f8b8 	bl	800a6cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	9202      	str	r2, [sp, #8]
 800c564:	9301      	str	r3, [sp, #4]
 800c566:	2300      	movs	r3, #0
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	2300      	movs	r3, #0
 800c56c:	460a      	mov	r2, r1
 800c56e:	4923      	ldr	r1, [pc, #140]	; (800c5fc <vTaskStartScheduler+0xbc>)
 800c570:	4823      	ldr	r0, [pc, #140]	; (800c600 <vTaskStartScheduler+0xc0>)
 800c572:	f7ff fe05 	bl	800c180 <xTaskCreateStatic>
 800c576:	4603      	mov	r3, r0
 800c578:	4a22      	ldr	r2, [pc, #136]	; (800c604 <vTaskStartScheduler+0xc4>)
 800c57a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c57c:	4b21      	ldr	r3, [pc, #132]	; (800c604 <vTaskStartScheduler+0xc4>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d002      	beq.n	800c58a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c584:	2301      	movs	r3, #1
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	e001      	b.n	800c58e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d102      	bne.n	800c59a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c594:	f000 fe18 	bl	800d1c8 <xTimerCreateTimerTask>
 800c598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d118      	bne.n	800c5d2 <vTaskStartScheduler+0x92>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	b672      	cpsid	i
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	b662      	cpsie	i
 800c5b4:	613b      	str	r3, [r7, #16]
}
 800c5b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c5b8:	4b13      	ldr	r3, [pc, #76]	; (800c608 <vTaskStartScheduler+0xc8>)
 800c5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c5be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c5c0:	4b12      	ldr	r3, [pc, #72]	; (800c60c <vTaskStartScheduler+0xcc>)
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c5c6:	4b12      	ldr	r3, [pc, #72]	; (800c610 <vTaskStartScheduler+0xd0>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c5cc:	f7fe fbd8 	bl	800ad80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c5d0:	e010      	b.n	800c5f4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d8:	d10c      	bne.n	800c5f4 <vTaskStartScheduler+0xb4>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	b672      	cpsid	i
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	b662      	cpsie	i
 800c5ee:	60fb      	str	r3, [r7, #12]
}
 800c5f0:	bf00      	nop
 800c5f2:	e7fe      	b.n	800c5f2 <vTaskStartScheduler+0xb2>
}
 800c5f4:	bf00      	nop
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	0801d560 	.word	0x0801d560
 800c600:	0800cc4d 	.word	0x0800cc4d
 800c604:	2000de2c 	.word	0x2000de2c
 800c608:	2000de28 	.word	0x2000de28
 800c60c:	2000de14 	.word	0x2000de14
 800c610:	2000de0c 	.word	0x2000de0c

0800c614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c614:	b480      	push	{r7}
 800c616:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c618:	4b04      	ldr	r3, [pc, #16]	; (800c62c <vTaskSuspendAll+0x18>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3301      	adds	r3, #1
 800c61e:	4a03      	ldr	r2, [pc, #12]	; (800c62c <vTaskSuspendAll+0x18>)
 800c620:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c622:	bf00      	nop
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	2000de30 	.word	0x2000de30

0800c630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c636:	2300      	movs	r3, #0
 800c638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c63a:	2300      	movs	r3, #0
 800c63c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c63e:	4b43      	ldr	r3, [pc, #268]	; (800c74c <xTaskResumeAll+0x11c>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10c      	bne.n	800c660 <xTaskResumeAll+0x30>
	__asm volatile
 800c646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64a:	b672      	cpsid	i
 800c64c:	f383 8811 	msr	BASEPRI, r3
 800c650:	f3bf 8f6f 	isb	sy
 800c654:	f3bf 8f4f 	dsb	sy
 800c658:	b662      	cpsie	i
 800c65a:	603b      	str	r3, [r7, #0]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c660:	f7fe fc0c 	bl	800ae7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c664:	4b39      	ldr	r3, [pc, #228]	; (800c74c <xTaskResumeAll+0x11c>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	3b01      	subs	r3, #1
 800c66a:	4a38      	ldr	r2, [pc, #224]	; (800c74c <xTaskResumeAll+0x11c>)
 800c66c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c66e:	4b37      	ldr	r3, [pc, #220]	; (800c74c <xTaskResumeAll+0x11c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d162      	bne.n	800c73c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c676:	4b36      	ldr	r3, [pc, #216]	; (800c750 <xTaskResumeAll+0x120>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d05e      	beq.n	800c73c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c67e:	e02f      	b.n	800c6e0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c680:	4b34      	ldr	r3, [pc, #208]	; (800c754 <xTaskResumeAll+0x124>)
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3318      	adds	r3, #24
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe fabf 	bl	800ac10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3304      	adds	r3, #4
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe faba 	bl	800ac10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a0:	4b2d      	ldr	r3, [pc, #180]	; (800c758 <xTaskResumeAll+0x128>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d903      	bls.n	800c6b0 <xTaskResumeAll+0x80>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ac:	4a2a      	ldr	r2, [pc, #168]	; (800c758 <xTaskResumeAll+0x128>)
 800c6ae:	6013      	str	r3, [r2, #0]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4413      	add	r3, r2
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	4a27      	ldr	r2, [pc, #156]	; (800c75c <xTaskResumeAll+0x12c>)
 800c6be:	441a      	add	r2, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	4610      	mov	r0, r2
 800c6c8:	f7fe fa45 	bl	800ab56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d0:	4b23      	ldr	r3, [pc, #140]	; (800c760 <xTaskResumeAll+0x130>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d302      	bcc.n	800c6e0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c6da:	4b22      	ldr	r3, [pc, #136]	; (800c764 <xTaskResumeAll+0x134>)
 800c6dc:	2201      	movs	r2, #1
 800c6de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6e0:	4b1c      	ldr	r3, [pc, #112]	; (800c754 <xTaskResumeAll+0x124>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1cb      	bne.n	800c680 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c6ee:	f000 fb65 	bl	800cdbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c6f2:	4b1d      	ldr	r3, [pc, #116]	; (800c768 <xTaskResumeAll+0x138>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d010      	beq.n	800c720 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c6fe:	f000 f847 	bl	800c790 <xTaskIncrementTick>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c708:	4b16      	ldr	r3, [pc, #88]	; (800c764 <xTaskResumeAll+0x134>)
 800c70a:	2201      	movs	r2, #1
 800c70c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	3b01      	subs	r3, #1
 800c712:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1f1      	bne.n	800c6fe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c71a:	4b13      	ldr	r3, [pc, #76]	; (800c768 <xTaskResumeAll+0x138>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c720:	4b10      	ldr	r3, [pc, #64]	; (800c764 <xTaskResumeAll+0x134>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d009      	beq.n	800c73c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c728:	2301      	movs	r3, #1
 800c72a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c72c:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <xTaskResumeAll+0x13c>)
 800c72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c732:	601a      	str	r2, [r3, #0]
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c73c:	f7fe fbd2 	bl	800aee4 <vPortExitCritical>

	return xAlreadyYielded;
 800c740:	68bb      	ldr	r3, [r7, #8]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	2000de30 	.word	0x2000de30
 800c750:	2000de08 	.word	0x2000de08
 800c754:	2000ddc8 	.word	0x2000ddc8
 800c758:	2000de10 	.word	0x2000de10
 800c75c:	2000d938 	.word	0x2000d938
 800c760:	2000d934 	.word	0x2000d934
 800c764:	2000de1c 	.word	0x2000de1c
 800c768:	2000de18 	.word	0x2000de18
 800c76c:	e000ed04 	.word	0xe000ed04

0800c770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c776:	4b05      	ldr	r3, [pc, #20]	; (800c78c <xTaskGetTickCount+0x1c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c77c:	687b      	ldr	r3, [r7, #4]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	370c      	adds	r7, #12
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	2000de0c 	.word	0x2000de0c

0800c790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c796:	2300      	movs	r3, #0
 800c798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c79a:	4b50      	ldr	r3, [pc, #320]	; (800c8dc <xTaskIncrementTick+0x14c>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f040 808b 	bne.w	800c8ba <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7a4:	4b4e      	ldr	r3, [pc, #312]	; (800c8e0 <xTaskIncrementTick+0x150>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c7ac:	4a4c      	ldr	r2, [pc, #304]	; (800c8e0 <xTaskIncrementTick+0x150>)
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d122      	bne.n	800c7fe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c7b8:	4b4a      	ldr	r3, [pc, #296]	; (800c8e4 <xTaskIncrementTick+0x154>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00c      	beq.n	800c7dc <xTaskIncrementTick+0x4c>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	b672      	cpsid	i
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	b662      	cpsie	i
 800c7d6:	603b      	str	r3, [r7, #0]
}
 800c7d8:	bf00      	nop
 800c7da:	e7fe      	b.n	800c7da <xTaskIncrementTick+0x4a>
 800c7dc:	4b41      	ldr	r3, [pc, #260]	; (800c8e4 <xTaskIncrementTick+0x154>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	60fb      	str	r3, [r7, #12]
 800c7e2:	4b41      	ldr	r3, [pc, #260]	; (800c8e8 <xTaskIncrementTick+0x158>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a3f      	ldr	r2, [pc, #252]	; (800c8e4 <xTaskIncrementTick+0x154>)
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	4a3f      	ldr	r2, [pc, #252]	; (800c8e8 <xTaskIncrementTick+0x158>)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	4b3e      	ldr	r3, [pc, #248]	; (800c8ec <xTaskIncrementTick+0x15c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	4a3d      	ldr	r2, [pc, #244]	; (800c8ec <xTaskIncrementTick+0x15c>)
 800c7f8:	6013      	str	r3, [r2, #0]
 800c7fa:	f000 fadf 	bl	800cdbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c7fe:	4b3c      	ldr	r3, [pc, #240]	; (800c8f0 <xTaskIncrementTick+0x160>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	693a      	ldr	r2, [r7, #16]
 800c804:	429a      	cmp	r2, r3
 800c806:	d349      	bcc.n	800c89c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c808:	4b36      	ldr	r3, [pc, #216]	; (800c8e4 <xTaskIncrementTick+0x154>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d104      	bne.n	800c81c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c812:	4b37      	ldr	r3, [pc, #220]	; (800c8f0 <xTaskIncrementTick+0x160>)
 800c814:	f04f 32ff 	mov.w	r2, #4294967295
 800c818:	601a      	str	r2, [r3, #0]
					break;
 800c81a:	e03f      	b.n	800c89c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c81c:	4b31      	ldr	r3, [pc, #196]	; (800c8e4 <xTaskIncrementTick+0x154>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	429a      	cmp	r2, r3
 800c832:	d203      	bcs.n	800c83c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c834:	4a2e      	ldr	r2, [pc, #184]	; (800c8f0 <xTaskIncrementTick+0x160>)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c83a:	e02f      	b.n	800c89c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	3304      	adds	r3, #4
 800c840:	4618      	mov	r0, r3
 800c842:	f7fe f9e5 	bl	800ac10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d004      	beq.n	800c858 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	3318      	adds	r3, #24
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe f9dc 	bl	800ac10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85c:	4b25      	ldr	r3, [pc, #148]	; (800c8f4 <xTaskIncrementTick+0x164>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	429a      	cmp	r2, r3
 800c862:	d903      	bls.n	800c86c <xTaskIncrementTick+0xdc>
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c868:	4a22      	ldr	r2, [pc, #136]	; (800c8f4 <xTaskIncrementTick+0x164>)
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c870:	4613      	mov	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	4413      	add	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4a1f      	ldr	r2, [pc, #124]	; (800c8f8 <xTaskIncrementTick+0x168>)
 800c87a:	441a      	add	r2, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	3304      	adds	r3, #4
 800c880:	4619      	mov	r1, r3
 800c882:	4610      	mov	r0, r2
 800c884:	f7fe f967 	bl	800ab56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88c:	4b1b      	ldr	r3, [pc, #108]	; (800c8fc <xTaskIncrementTick+0x16c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c892:	429a      	cmp	r2, r3
 800c894:	d3b8      	bcc.n	800c808 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c896:	2301      	movs	r3, #1
 800c898:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c89a:	e7b5      	b.n	800c808 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c89c:	4b17      	ldr	r3, [pc, #92]	; (800c8fc <xTaskIncrementTick+0x16c>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a2:	4915      	ldr	r1, [pc, #84]	; (800c8f8 <xTaskIncrementTick+0x168>)
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	440b      	add	r3, r1
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d907      	bls.n	800c8c4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	e004      	b.n	800c8c4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c8ba:	4b11      	ldr	r3, [pc, #68]	; (800c900 <xTaskIncrementTick+0x170>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	4a0f      	ldr	r2, [pc, #60]	; (800c900 <xTaskIncrementTick+0x170>)
 800c8c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c8c4:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <xTaskIncrementTick+0x174>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d001      	beq.n	800c8d0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c8d0:	697b      	ldr	r3, [r7, #20]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3718      	adds	r7, #24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	2000de30 	.word	0x2000de30
 800c8e0:	2000de0c 	.word	0x2000de0c
 800c8e4:	2000ddc0 	.word	0x2000ddc0
 800c8e8:	2000ddc4 	.word	0x2000ddc4
 800c8ec:	2000de20 	.word	0x2000de20
 800c8f0:	2000de28 	.word	0x2000de28
 800c8f4:	2000de10 	.word	0x2000de10
 800c8f8:	2000d938 	.word	0x2000d938
 800c8fc:	2000d934 	.word	0x2000d934
 800c900:	2000de18 	.word	0x2000de18
 800c904:	2000de1c 	.word	0x2000de1c

0800c908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c90e:	4b29      	ldr	r3, [pc, #164]	; (800c9b4 <vTaskSwitchContext+0xac>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d003      	beq.n	800c91e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c916:	4b28      	ldr	r3, [pc, #160]	; (800c9b8 <vTaskSwitchContext+0xb0>)
 800c918:	2201      	movs	r2, #1
 800c91a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c91c:	e043      	b.n	800c9a6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800c91e:	4b26      	ldr	r3, [pc, #152]	; (800c9b8 <vTaskSwitchContext+0xb0>)
 800c920:	2200      	movs	r2, #0
 800c922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c924:	4b25      	ldr	r3, [pc, #148]	; (800c9bc <vTaskSwitchContext+0xb4>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	e012      	b.n	800c952 <vTaskSwitchContext+0x4a>
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10c      	bne.n	800c94c <vTaskSwitchContext+0x44>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	b672      	cpsid	i
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	b662      	cpsie	i
 800c946:	607b      	str	r3, [r7, #4]
}
 800c948:	bf00      	nop
 800c94a:	e7fe      	b.n	800c94a <vTaskSwitchContext+0x42>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3b01      	subs	r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
 800c952:	491b      	ldr	r1, [pc, #108]	; (800c9c0 <vTaskSwitchContext+0xb8>)
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	4613      	mov	r3, r2
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	4413      	add	r3, r2
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	440b      	add	r3, r1
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0e2      	beq.n	800c92c <vTaskSwitchContext+0x24>
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	4613      	mov	r3, r2
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	4413      	add	r3, r2
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	4a13      	ldr	r2, [pc, #76]	; (800c9c0 <vTaskSwitchContext+0xb8>)
 800c972:	4413      	add	r3, r2
 800c974:	60bb      	str	r3, [r7, #8]
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	685a      	ldr	r2, [r3, #4]
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	605a      	str	r2, [r3, #4]
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	3308      	adds	r3, #8
 800c988:	429a      	cmp	r2, r3
 800c98a:	d104      	bne.n	800c996 <vTaskSwitchContext+0x8e>
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	605a      	str	r2, [r3, #4]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	4a09      	ldr	r2, [pc, #36]	; (800c9c4 <vTaskSwitchContext+0xbc>)
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	4a06      	ldr	r2, [pc, #24]	; (800c9bc <vTaskSwitchContext+0xb4>)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6013      	str	r3, [r2, #0]
}
 800c9a6:	bf00      	nop
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	2000de30 	.word	0x2000de30
 800c9b8:	2000de1c 	.word	0x2000de1c
 800c9bc:	2000de10 	.word	0x2000de10
 800c9c0:	2000d938 	.word	0x2000d938
 800c9c4:	2000d934 	.word	0x2000d934

0800c9c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10c      	bne.n	800c9f2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9dc:	b672      	cpsid	i
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	b662      	cpsie	i
 800c9ec:	60fb      	str	r3, [r7, #12]
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9f2:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <vTaskPlaceOnEventList+0x48>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	3318      	adds	r3, #24
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7fe f8cf 	bl	800ab9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca00:	2101      	movs	r1, #1
 800ca02:	6838      	ldr	r0, [r7, #0]
 800ca04:	f000 fb8c 	bl	800d120 <prvAddCurrentTaskToDelayedList>
}
 800ca08:	bf00      	nop
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	2000d934 	.word	0x2000d934

0800ca14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10c      	bne.n	800ca40 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2a:	b672      	cpsid	i
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	b662      	cpsie	i
 800ca3a:	617b      	str	r3, [r7, #20]
}
 800ca3c:	bf00      	nop
 800ca3e:	e7fe      	b.n	800ca3e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca40:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <vTaskPlaceOnEventListRestricted+0x58>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3318      	adds	r3, #24
 800ca46:	4619      	mov	r1, r3
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7fe f884 	bl	800ab56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d002      	beq.n	800ca5a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ca54:	f04f 33ff 	mov.w	r3, #4294967295
 800ca58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ca5a:	6879      	ldr	r1, [r7, #4]
 800ca5c:	68b8      	ldr	r0, [r7, #8]
 800ca5e:	f000 fb5f 	bl	800d120 <prvAddCurrentTaskToDelayedList>
	}
 800ca62:	bf00      	nop
 800ca64:	3718      	adds	r7, #24
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	2000d934 	.word	0x2000d934

0800ca70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10c      	bne.n	800caa0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8a:	b672      	cpsid	i
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	b662      	cpsie	i
 800ca9a:	60fb      	str	r3, [r7, #12]
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	3318      	adds	r3, #24
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fe f8b3 	bl	800ac10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caaa:	4b1e      	ldr	r3, [pc, #120]	; (800cb24 <xTaskRemoveFromEventList+0xb4>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d11d      	bne.n	800caee <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	3304      	adds	r3, #4
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fe f8aa 	bl	800ac10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac0:	4b19      	ldr	r3, [pc, #100]	; (800cb28 <xTaskRemoveFromEventList+0xb8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d903      	bls.n	800cad0 <xTaskRemoveFromEventList+0x60>
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cacc:	4a16      	ldr	r2, [pc, #88]	; (800cb28 <xTaskRemoveFromEventList+0xb8>)
 800cace:	6013      	str	r3, [r2, #0]
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad4:	4613      	mov	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4a13      	ldr	r2, [pc, #76]	; (800cb2c <xTaskRemoveFromEventList+0xbc>)
 800cade:	441a      	add	r2, r3
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	3304      	adds	r3, #4
 800cae4:	4619      	mov	r1, r3
 800cae6:	4610      	mov	r0, r2
 800cae8:	f7fe f835 	bl	800ab56 <vListInsertEnd>
 800caec:	e005      	b.n	800cafa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	3318      	adds	r3, #24
 800caf2:	4619      	mov	r1, r3
 800caf4:	480e      	ldr	r0, [pc, #56]	; (800cb30 <xTaskRemoveFromEventList+0xc0>)
 800caf6:	f7fe f82e 	bl	800ab56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cafe:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <xTaskRemoveFromEventList+0xc4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d905      	bls.n	800cb14 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb0c:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <xTaskRemoveFromEventList+0xc8>)
 800cb0e:	2201      	movs	r2, #1
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	e001      	b.n	800cb18 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800cb14:	2300      	movs	r3, #0
 800cb16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb18:	697b      	ldr	r3, [r7, #20]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	2000de30 	.word	0x2000de30
 800cb28:	2000de10 	.word	0x2000de10
 800cb2c:	2000d938 	.word	0x2000d938
 800cb30:	2000ddc8 	.word	0x2000ddc8
 800cb34:	2000d934 	.word	0x2000d934
 800cb38:	2000de1c 	.word	0x2000de1c

0800cb3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb44:	4b06      	ldr	r3, [pc, #24]	; (800cb60 <vTaskInternalSetTimeOutState+0x24>)
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb4c:	4b05      	ldr	r3, [pc, #20]	; (800cb64 <vTaskInternalSetTimeOutState+0x28>)
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	605a      	str	r2, [r3, #4]
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	2000de20 	.word	0x2000de20
 800cb64:	2000de0c 	.word	0x2000de0c

0800cb68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b088      	sub	sp, #32
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d10c      	bne.n	800cb92 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800cb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7c:	b672      	cpsid	i
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	b662      	cpsie	i
 800cb8c:	613b      	str	r3, [r7, #16]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10c      	bne.n	800cbb2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	b672      	cpsid	i
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	b662      	cpsie	i
 800cbac:	60fb      	str	r3, [r7, #12]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cbb2:	f7fe f963 	bl	800ae7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cbb6:	4b1d      	ldr	r3, [pc, #116]	; (800cc2c <xTaskCheckForTimeOut+0xc4>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbce:	d102      	bne.n	800cbd6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61fb      	str	r3, [r7, #28]
 800cbd4:	e023      	b.n	800cc1e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b15      	ldr	r3, [pc, #84]	; (800cc30 <xTaskCheckForTimeOut+0xc8>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d007      	beq.n	800cbf2 <xTaskCheckForTimeOut+0x8a>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	69ba      	ldr	r2, [r7, #24]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d302      	bcc.n	800cbf2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	e015      	b.n	800cc1e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d20b      	bcs.n	800cc14 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	1ad2      	subs	r2, r2, r3
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ff97 	bl	800cb3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	61fb      	str	r3, [r7, #28]
 800cc12:	e004      	b.n	800cc1e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc1e:	f7fe f961 	bl	800aee4 <vPortExitCritical>

	return xReturn;
 800cc22:	69fb      	ldr	r3, [r7, #28]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3720      	adds	r7, #32
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	2000de0c 	.word	0x2000de0c
 800cc30:	2000de20 	.word	0x2000de20

0800cc34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc34:	b480      	push	{r7}
 800cc36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc38:	4b03      	ldr	r3, [pc, #12]	; (800cc48 <vTaskMissedYield+0x14>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	601a      	str	r2, [r3, #0]
}
 800cc3e:	bf00      	nop
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	2000de1c 	.word	0x2000de1c

0800cc4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc54:	f000 f852 	bl	800ccfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc58:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <prvIdleTask+0x28>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d9f9      	bls.n	800cc54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc60:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <prvIdleTask+0x2c>)
 800cc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc66:	601a      	str	r2, [r3, #0]
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cc70:	e7f0      	b.n	800cc54 <prvIdleTask+0x8>
 800cc72:	bf00      	nop
 800cc74:	2000d938 	.word	0x2000d938
 800cc78:	e000ed04 	.word	0xe000ed04

0800cc7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc82:	2300      	movs	r3, #0
 800cc84:	607b      	str	r3, [r7, #4]
 800cc86:	e00c      	b.n	800cca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4a12      	ldr	r2, [pc, #72]	; (800ccdc <prvInitialiseTaskLists+0x60>)
 800cc94:	4413      	add	r3, r2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd ff30 	bl	800aafc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	607b      	str	r3, [r7, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b37      	cmp	r3, #55	; 0x37
 800cca6:	d9ef      	bls.n	800cc88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cca8:	480d      	ldr	r0, [pc, #52]	; (800cce0 <prvInitialiseTaskLists+0x64>)
 800ccaa:	f7fd ff27 	bl	800aafc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ccae:	480d      	ldr	r0, [pc, #52]	; (800cce4 <prvInitialiseTaskLists+0x68>)
 800ccb0:	f7fd ff24 	bl	800aafc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ccb4:	480c      	ldr	r0, [pc, #48]	; (800cce8 <prvInitialiseTaskLists+0x6c>)
 800ccb6:	f7fd ff21 	bl	800aafc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ccba:	480c      	ldr	r0, [pc, #48]	; (800ccec <prvInitialiseTaskLists+0x70>)
 800ccbc:	f7fd ff1e 	bl	800aafc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ccc0:	480b      	ldr	r0, [pc, #44]	; (800ccf0 <prvInitialiseTaskLists+0x74>)
 800ccc2:	f7fd ff1b 	bl	800aafc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ccc6:	4b0b      	ldr	r3, [pc, #44]	; (800ccf4 <prvInitialiseTaskLists+0x78>)
 800ccc8:	4a05      	ldr	r2, [pc, #20]	; (800cce0 <prvInitialiseTaskLists+0x64>)
 800ccca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cccc:	4b0a      	ldr	r3, [pc, #40]	; (800ccf8 <prvInitialiseTaskLists+0x7c>)
 800ccce:	4a05      	ldr	r2, [pc, #20]	; (800cce4 <prvInitialiseTaskLists+0x68>)
 800ccd0:	601a      	str	r2, [r3, #0]
}
 800ccd2:	bf00      	nop
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	2000d938 	.word	0x2000d938
 800cce0:	2000dd98 	.word	0x2000dd98
 800cce4:	2000ddac 	.word	0x2000ddac
 800cce8:	2000ddc8 	.word	0x2000ddc8
 800ccec:	2000dddc 	.word	0x2000dddc
 800ccf0:	2000ddf4 	.word	0x2000ddf4
 800ccf4:	2000ddc0 	.word	0x2000ddc0
 800ccf8:	2000ddc4 	.word	0x2000ddc4

0800ccfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd02:	e019      	b.n	800cd38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd04:	f7fe f8ba 	bl	800ae7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd08:	4b10      	ldr	r3, [pc, #64]	; (800cd4c <prvCheckTasksWaitingTermination+0x50>)
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fd ff7b 	bl	800ac10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd1a:	4b0d      	ldr	r3, [pc, #52]	; (800cd50 <prvCheckTasksWaitingTermination+0x54>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	4a0b      	ldr	r2, [pc, #44]	; (800cd50 <prvCheckTasksWaitingTermination+0x54>)
 800cd22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd24:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	4a0a      	ldr	r2, [pc, #40]	; (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd2e:	f7fe f8d9 	bl	800aee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f810 	bl	800cd58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd38:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1e1      	bne.n	800cd04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	2000dddc 	.word	0x2000dddc
 800cd50:	2000de08 	.word	0x2000de08
 800cd54:	2000ddf0 	.word	0x2000ddf0

0800cd58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d108      	bne.n	800cd7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fd fdaa 	bl	800a8c8 <vPortFree>
				vPortFree( pxTCB );
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f7fd fda7 	bl	800a8c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd7a:	e01a      	b.n	800cdb2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d103      	bne.n	800cd8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7fd fd9e 	bl	800a8c8 <vPortFree>
	}
 800cd8c:	e011      	b.n	800cdb2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cd94:	2b02      	cmp	r3, #2
 800cd96:	d00c      	beq.n	800cdb2 <prvDeleteTCB+0x5a>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9c:	b672      	cpsid	i
 800cd9e:	f383 8811 	msr	BASEPRI, r3
 800cda2:	f3bf 8f6f 	isb	sy
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	b662      	cpsie	i
 800cdac:	60fb      	str	r3, [r7, #12]
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <prvDeleteTCB+0x58>
	}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdc2:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <prvResetNextTaskUnblockTime+0x38>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d104      	bne.n	800cdd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <prvResetNextTaskUnblockTime+0x3c>)
 800cdce:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cdd4:	e008      	b.n	800cde8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdd6:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <prvResetNextTaskUnblockTime+0x38>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	4a04      	ldr	r2, [pc, #16]	; (800cdf8 <prvResetNextTaskUnblockTime+0x3c>)
 800cde6:	6013      	str	r3, [r2, #0]
}
 800cde8:	bf00      	nop
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	2000ddc0 	.word	0x2000ddc0
 800cdf8:	2000de28 	.word	0x2000de28

0800cdfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce02:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <xTaskGetSchedulerState+0x34>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d102      	bne.n	800ce10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	607b      	str	r3, [r7, #4]
 800ce0e:	e008      	b.n	800ce22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce10:	4b08      	ldr	r3, [pc, #32]	; (800ce34 <xTaskGetSchedulerState+0x38>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d102      	bne.n	800ce1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce18:	2302      	movs	r3, #2
 800ce1a:	607b      	str	r3, [r7, #4]
 800ce1c:	e001      	b.n	800ce22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce22:	687b      	ldr	r3, [r7, #4]
	}
 800ce24:	4618      	mov	r0, r3
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	2000de14 	.word	0x2000de14
 800ce34:	2000de30 	.word	0x2000de30

0800ce38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ce44:	2300      	movs	r3, #0
 800ce46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d051      	beq.n	800cef2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce52:	4b2a      	ldr	r3, [pc, #168]	; (800cefc <xTaskPriorityInherit+0xc4>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d241      	bcs.n	800cee0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	699b      	ldr	r3, [r3, #24]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	db06      	blt.n	800ce72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce64:	4b25      	ldr	r3, [pc, #148]	; (800cefc <xTaskPriorityInherit+0xc4>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	6959      	ldr	r1, [r3, #20]
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	4413      	add	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	4a1f      	ldr	r2, [pc, #124]	; (800cf00 <xTaskPriorityInherit+0xc8>)
 800ce84:	4413      	add	r3, r2
 800ce86:	4299      	cmp	r1, r3
 800ce88:	d122      	bne.n	800ced0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fd febe 	bl	800ac10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce94:	4b19      	ldr	r3, [pc, #100]	; (800cefc <xTaskPriorityInherit+0xc4>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea2:	4b18      	ldr	r3, [pc, #96]	; (800cf04 <xTaskPriorityInherit+0xcc>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d903      	bls.n	800ceb2 <xTaskPriorityInherit+0x7a>
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceae:	4a15      	ldr	r2, [pc, #84]	; (800cf04 <xTaskPriorityInherit+0xcc>)
 800ceb0:	6013      	str	r3, [r2, #0]
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	4a10      	ldr	r2, [pc, #64]	; (800cf00 <xTaskPriorityInherit+0xc8>)
 800cec0:	441a      	add	r2, r3
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	3304      	adds	r3, #4
 800cec6:	4619      	mov	r1, r3
 800cec8:	4610      	mov	r0, r2
 800ceca:	f7fd fe44 	bl	800ab56 <vListInsertEnd>
 800cece:	e004      	b.n	800ceda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ced0:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <xTaskPriorityInherit+0xc4>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ceda:	2301      	movs	r3, #1
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	e008      	b.n	800cef2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cee4:	4b05      	ldr	r3, [pc, #20]	; (800cefc <xTaskPriorityInherit+0xc4>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d201      	bcs.n	800cef2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ceee:	2301      	movs	r3, #1
 800cef0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cef2:	68fb      	ldr	r3, [r7, #12]
	}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	2000d934 	.word	0x2000d934
 800cf00:	2000d938 	.word	0x2000d938
 800cf04:	2000de10 	.word	0x2000de10

0800cf08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf14:	2300      	movs	r3, #0
 800cf16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d05a      	beq.n	800cfd4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf1e:	4b30      	ldr	r3, [pc, #192]	; (800cfe0 <xTaskPriorityDisinherit+0xd8>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d00c      	beq.n	800cf42 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2c:	b672      	cpsid	i
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	b662      	cpsie	i
 800cf3c:	60fb      	str	r3, [r7, #12]
}
 800cf3e:	bf00      	nop
 800cf40:	e7fe      	b.n	800cf40 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10c      	bne.n	800cf64 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	b672      	cpsid	i
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	b662      	cpsie	i
 800cf5e:	60bb      	str	r3, [r7, #8]
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf68:	1e5a      	subs	r2, r3, #1
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d02c      	beq.n	800cfd4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d128      	bne.n	800cfd4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	3304      	adds	r3, #4
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fd fe42 	bl	800ac10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa4:	4b0f      	ldr	r3, [pc, #60]	; (800cfe4 <xTaskPriorityDisinherit+0xdc>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d903      	bls.n	800cfb4 <xTaskPriorityDisinherit+0xac>
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb0:	4a0c      	ldr	r2, [pc, #48]	; (800cfe4 <xTaskPriorityDisinherit+0xdc>)
 800cfb2:	6013      	str	r3, [r2, #0]
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb8:	4613      	mov	r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	4413      	add	r3, r2
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4a09      	ldr	r2, [pc, #36]	; (800cfe8 <xTaskPriorityDisinherit+0xe0>)
 800cfc2:	441a      	add	r2, r3
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	4619      	mov	r1, r3
 800cfca:	4610      	mov	r0, r2
 800cfcc:	f7fd fdc3 	bl	800ab56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfd4:	697b      	ldr	r3, [r7, #20]
	}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3718      	adds	r7, #24
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	2000d934 	.word	0x2000d934
 800cfe4:	2000de10 	.word	0x2000de10
 800cfe8:	2000d938 	.word	0x2000d938

0800cfec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b088      	sub	sp, #32
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cffa:	2301      	movs	r3, #1
 800cffc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d06e      	beq.n	800d0e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d10c      	bne.n	800d026 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800d00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d010:	b672      	cpsid	i
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	b662      	cpsie	i
 800d020:	60fb      	str	r3, [r7, #12]
}
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d902      	bls.n	800d036 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	61fb      	str	r3, [r7, #28]
 800d034:	e002      	b.n	800d03c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d03a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d040:	69fa      	ldr	r2, [r7, #28]
 800d042:	429a      	cmp	r2, r3
 800d044:	d04d      	beq.n	800d0e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d148      	bne.n	800d0e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d050:	4b26      	ldr	r3, [pc, #152]	; (800d0ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	69ba      	ldr	r2, [r7, #24]
 800d056:	429a      	cmp	r2, r3
 800d058:	d10c      	bne.n	800d074 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800d05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05e:	b672      	cpsid	i
 800d060:	f383 8811 	msr	BASEPRI, r3
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	b662      	cpsie	i
 800d06e:	60bb      	str	r3, [r7, #8]
}
 800d070:	bf00      	nop
 800d072:	e7fe      	b.n	800d072 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d078:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	69fa      	ldr	r2, [r7, #28]
 800d07e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	2b00      	cmp	r3, #0
 800d086:	db04      	blt.n	800d092 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	6959      	ldr	r1, [r3, #20]
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	4613      	mov	r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	4a13      	ldr	r2, [pc, #76]	; (800d0f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d0a2:	4413      	add	r3, r2
 800d0a4:	4299      	cmp	r1, r3
 800d0a6:	d11c      	bne.n	800d0e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	3304      	adds	r3, #4
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fd fdaf 	bl	800ac10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b6:	4b0f      	ldr	r3, [pc, #60]	; (800d0f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d903      	bls.n	800d0c6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c2:	4a0c      	ldr	r2, [pc, #48]	; (800d0f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d0c4:	6013      	str	r3, [r2, #0]
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	4413      	add	r3, r2
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4a07      	ldr	r2, [pc, #28]	; (800d0f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d0d4:	441a      	add	r2, r3
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	3304      	adds	r3, #4
 800d0da:	4619      	mov	r1, r3
 800d0dc:	4610      	mov	r0, r2
 800d0de:	f7fd fd3a 	bl	800ab56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0e2:	bf00      	nop
 800d0e4:	3720      	adds	r7, #32
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	2000d934 	.word	0x2000d934
 800d0f0:	2000d938 	.word	0x2000d938
 800d0f4:	2000de10 	.word	0x2000de10

0800d0f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d0f8:	b480      	push	{r7}
 800d0fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d0fc:	4b07      	ldr	r3, [pc, #28]	; (800d11c <pvTaskIncrementMutexHeldCount+0x24>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d004      	beq.n	800d10e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d104:	4b05      	ldr	r3, [pc, #20]	; (800d11c <pvTaskIncrementMutexHeldCount+0x24>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d10a:	3201      	adds	r2, #1
 800d10c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d10e:	4b03      	ldr	r3, [pc, #12]	; (800d11c <pvTaskIncrementMutexHeldCount+0x24>)
 800d110:	681b      	ldr	r3, [r3, #0]
	}
 800d112:	4618      	mov	r0, r3
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	2000d934 	.word	0x2000d934

0800d120 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d12a:	4b21      	ldr	r3, [pc, #132]	; (800d1b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d130:	4b20      	ldr	r3, [pc, #128]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3304      	adds	r3, #4
 800d136:	4618      	mov	r0, r3
 800d138:	f7fd fd6a 	bl	800ac10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d142:	d10a      	bne.n	800d15a <prvAddCurrentTaskToDelayedList+0x3a>
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d007      	beq.n	800d15a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d14a:	4b1a      	ldr	r3, [pc, #104]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	3304      	adds	r3, #4
 800d150:	4619      	mov	r1, r3
 800d152:	4819      	ldr	r0, [pc, #100]	; (800d1b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d154:	f7fd fcff 	bl	800ab56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d158:	e026      	b.n	800d1a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4413      	add	r3, r2
 800d160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d162:	4b14      	ldr	r3, [pc, #80]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68ba      	ldr	r2, [r7, #8]
 800d168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d209      	bcs.n	800d186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d172:	4b12      	ldr	r3, [pc, #72]	; (800d1bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	4b0f      	ldr	r3, [pc, #60]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3304      	adds	r3, #4
 800d17c:	4619      	mov	r1, r3
 800d17e:	4610      	mov	r0, r2
 800d180:	f7fd fd0d 	bl	800ab9e <vListInsert>
}
 800d184:	e010      	b.n	800d1a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d186:	4b0e      	ldr	r3, [pc, #56]	; (800d1c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3304      	adds	r3, #4
 800d190:	4619      	mov	r1, r3
 800d192:	4610      	mov	r0, r2
 800d194:	f7fd fd03 	bl	800ab9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d198:	4b0a      	ldr	r3, [pc, #40]	; (800d1c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d202      	bcs.n	800d1a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d1a2:	4a08      	ldr	r2, [pc, #32]	; (800d1c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	6013      	str	r3, [r2, #0]
}
 800d1a8:	bf00      	nop
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	2000de0c 	.word	0x2000de0c
 800d1b4:	2000d934 	.word	0x2000d934
 800d1b8:	2000ddf4 	.word	0x2000ddf4
 800d1bc:	2000ddc4 	.word	0x2000ddc4
 800d1c0:	2000ddc0 	.word	0x2000ddc0
 800d1c4:	2000de28 	.word	0x2000de28

0800d1c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08a      	sub	sp, #40	; 0x28
 800d1cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d1d2:	f000 fb15 	bl	800d800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d1d6:	4b1d      	ldr	r3, [pc, #116]	; (800d24c <xTimerCreateTimerTask+0x84>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d021      	beq.n	800d222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d1e6:	1d3a      	adds	r2, r7, #4
 800d1e8:	f107 0108 	add.w	r1, r7, #8
 800d1ec:	f107 030c 	add.w	r3, r7, #12
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fd fa85 	bl	800a700 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	9202      	str	r2, [sp, #8]
 800d1fe:	9301      	str	r3, [sp, #4]
 800d200:	2302      	movs	r3, #2
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	2300      	movs	r3, #0
 800d206:	460a      	mov	r2, r1
 800d208:	4911      	ldr	r1, [pc, #68]	; (800d250 <xTimerCreateTimerTask+0x88>)
 800d20a:	4812      	ldr	r0, [pc, #72]	; (800d254 <xTimerCreateTimerTask+0x8c>)
 800d20c:	f7fe ffb8 	bl	800c180 <xTaskCreateStatic>
 800d210:	4603      	mov	r3, r0
 800d212:	4a11      	ldr	r2, [pc, #68]	; (800d258 <xTimerCreateTimerTask+0x90>)
 800d214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d216:	4b10      	ldr	r3, [pc, #64]	; (800d258 <xTimerCreateTimerTask+0x90>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d21e:	2301      	movs	r3, #1
 800d220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10c      	bne.n	800d242 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	b672      	cpsid	i
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	b662      	cpsie	i
 800d23c:	613b      	str	r3, [r7, #16]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d242:	697b      	ldr	r3, [r7, #20]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3718      	adds	r7, #24
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	2000de64 	.word	0x2000de64
 800d250:	0801d568 	.word	0x0801d568
 800d254:	0800d399 	.word	0x0800d399
 800d258:	2000de68 	.word	0x2000de68

0800d25c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b08a      	sub	sp, #40	; 0x28
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
 800d268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d26a:	2300      	movs	r3, #0
 800d26c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10c      	bne.n	800d28e <xTimerGenericCommand+0x32>
	__asm volatile
 800d274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d278:	b672      	cpsid	i
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	b662      	cpsie	i
 800d288:	623b      	str	r3, [r7, #32]
}
 800d28a:	bf00      	nop
 800d28c:	e7fe      	b.n	800d28c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d28e:	4b1a      	ldr	r3, [pc, #104]	; (800d2f8 <xTimerGenericCommand+0x9c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d02a      	beq.n	800d2ec <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2b05      	cmp	r3, #5
 800d2a6:	dc18      	bgt.n	800d2da <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d2a8:	f7ff fda8 	bl	800cdfc <xTaskGetSchedulerState>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	d109      	bne.n	800d2c6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d2b2:	4b11      	ldr	r3, [pc, #68]	; (800d2f8 <xTimerGenericCommand+0x9c>)
 800d2b4:	6818      	ldr	r0, [r3, #0]
 800d2b6:	f107 0110 	add.w	r1, r7, #16
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2be:	f7fe f8cd 	bl	800b45c <xQueueGenericSend>
 800d2c2:	6278      	str	r0, [r7, #36]	; 0x24
 800d2c4:	e012      	b.n	800d2ec <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d2c6:	4b0c      	ldr	r3, [pc, #48]	; (800d2f8 <xTimerGenericCommand+0x9c>)
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	f107 0110 	add.w	r1, r7, #16
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f7fe f8c3 	bl	800b45c <xQueueGenericSend>
 800d2d6:	6278      	str	r0, [r7, #36]	; 0x24
 800d2d8:	e008      	b.n	800d2ec <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d2da:	4b07      	ldr	r3, [pc, #28]	; (800d2f8 <xTimerGenericCommand+0x9c>)
 800d2dc:	6818      	ldr	r0, [r3, #0]
 800d2de:	f107 0110 	add.w	r1, r7, #16
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	683a      	ldr	r2, [r7, #0]
 800d2e6:	f7fe f9bf 	bl	800b668 <xQueueGenericSendFromISR>
 800d2ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3728      	adds	r7, #40	; 0x28
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	2000de64 	.word	0x2000de64

0800d2fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af02      	add	r7, sp, #8
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d306:	4b23      	ldr	r3, [pc, #140]	; (800d394 <prvProcessExpiredTimer+0x98>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	3304      	adds	r3, #4
 800d314:	4618      	mov	r0, r3
 800d316:	f7fd fc7b 	bl	800ac10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d320:	f003 0304 	and.w	r3, r3, #4
 800d324:	2b00      	cmp	r3, #0
 800d326:	d024      	beq.n	800d372 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	699a      	ldr	r2, [r3, #24]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	18d1      	adds	r1, r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	683a      	ldr	r2, [r7, #0]
 800d334:	6978      	ldr	r0, [r7, #20]
 800d336:	f000 f8d3 	bl	800d4e0 <prvInsertTimerInActiveList>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d021      	beq.n	800d384 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d340:	2300      	movs	r3, #0
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	2300      	movs	r3, #0
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	2100      	movs	r1, #0
 800d34a:	6978      	ldr	r0, [r7, #20]
 800d34c:	f7ff ff86 	bl	800d25c <xTimerGenericCommand>
 800d350:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d115      	bne.n	800d384 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	b672      	cpsid	i
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	b662      	cpsie	i
 800d36c:	60fb      	str	r3, [r7, #12]
}
 800d36e:	bf00      	nop
 800d370:	e7fe      	b.n	800d370 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d378:	f023 0301 	bic.w	r3, r3, #1
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	6a1b      	ldr	r3, [r3, #32]
 800d388:	6978      	ldr	r0, [r7, #20]
 800d38a:	4798      	blx	r3
}
 800d38c:	bf00      	nop
 800d38e:	3718      	adds	r7, #24
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	2000de5c 	.word	0x2000de5c

0800d398 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3a0:	f107 0308 	add.w	r3, r7, #8
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f000 f857 	bl	800d458 <prvGetNextExpireTime>
 800d3aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f000 f803 	bl	800d3bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d3b6:	f000 f8d5 	bl	800d564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3ba:	e7f1      	b.n	800d3a0 <prvTimerTask+0x8>

0800d3bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d3c6:	f7ff f925 	bl	800c614 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3ca:	f107 0308 	add.w	r3, r7, #8
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f000 f866 	bl	800d4a0 <prvSampleTimeNow>
 800d3d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d130      	bne.n	800d43e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10a      	bne.n	800d3f8 <prvProcessTimerOrBlockTask+0x3c>
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d806      	bhi.n	800d3f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d3ea:	f7ff f921 	bl	800c630 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d3ee:	68f9      	ldr	r1, [r7, #12]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7ff ff83 	bl	800d2fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d3f6:	e024      	b.n	800d442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d008      	beq.n	800d410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d3fe:	4b13      	ldr	r3, [pc, #76]	; (800d44c <prvProcessTimerOrBlockTask+0x90>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d101      	bne.n	800d40c <prvProcessTimerOrBlockTask+0x50>
 800d408:	2301      	movs	r3, #1
 800d40a:	e000      	b.n	800d40e <prvProcessTimerOrBlockTask+0x52>
 800d40c:	2300      	movs	r3, #0
 800d40e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d410:	4b0f      	ldr	r3, [pc, #60]	; (800d450 <prvProcessTimerOrBlockTask+0x94>)
 800d412:	6818      	ldr	r0, [r3, #0]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	4619      	mov	r1, r3
 800d41e:	f7fe fe7b 	bl	800c118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d422:	f7ff f905 	bl	800c630 <xTaskResumeAll>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10a      	bne.n	800d442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d42c:	4b09      	ldr	r3, [pc, #36]	; (800d454 <prvProcessTimerOrBlockTask+0x98>)
 800d42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	f3bf 8f6f 	isb	sy
}
 800d43c:	e001      	b.n	800d442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d43e:	f7ff f8f7 	bl	800c630 <xTaskResumeAll>
}
 800d442:	bf00      	nop
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	2000de60 	.word	0x2000de60
 800d450:	2000de64 	.word	0x2000de64
 800d454:	e000ed04 	.word	0xe000ed04

0800d458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d460:	4b0e      	ldr	r3, [pc, #56]	; (800d49c <prvGetNextExpireTime+0x44>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <prvGetNextExpireTime+0x16>
 800d46a:	2201      	movs	r2, #1
 800d46c:	e000      	b.n	800d470 <prvGetNextExpireTime+0x18>
 800d46e:	2200      	movs	r2, #0
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d105      	bne.n	800d488 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d47c:	4b07      	ldr	r3, [pc, #28]	; (800d49c <prvGetNextExpireTime+0x44>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	60fb      	str	r3, [r7, #12]
 800d486:	e001      	b.n	800d48c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d488:	2300      	movs	r3, #0
 800d48a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d48c:	68fb      	ldr	r3, [r7, #12]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	2000de5c 	.word	0x2000de5c

0800d4a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d4a8:	f7ff f962 	bl	800c770 <xTaskGetTickCount>
 800d4ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d4ae:	4b0b      	ldr	r3, [pc, #44]	; (800d4dc <prvSampleTimeNow+0x3c>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d205      	bcs.n	800d4c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d4b8:	f000 f93c 	bl	800d734 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	601a      	str	r2, [r3, #0]
 800d4c2:	e002      	b.n	800d4ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d4ca:	4a04      	ldr	r2, [pc, #16]	; (800d4dc <prvSampleTimeNow+0x3c>)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	2000de6c 	.word	0x2000de6c

0800d4e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
 800d4ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	429a      	cmp	r2, r3
 800d504:	d812      	bhi.n	800d52c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	1ad2      	subs	r2, r2, r3
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	429a      	cmp	r2, r3
 800d512:	d302      	bcc.n	800d51a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d514:	2301      	movs	r3, #1
 800d516:	617b      	str	r3, [r7, #20]
 800d518:	e01b      	b.n	800d552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d51a:	4b10      	ldr	r3, [pc, #64]	; (800d55c <prvInsertTimerInActiveList+0x7c>)
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3304      	adds	r3, #4
 800d522:	4619      	mov	r1, r3
 800d524:	4610      	mov	r0, r2
 800d526:	f7fd fb3a 	bl	800ab9e <vListInsert>
 800d52a:	e012      	b.n	800d552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	429a      	cmp	r2, r3
 800d532:	d206      	bcs.n	800d542 <prvInsertTimerInActiveList+0x62>
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d302      	bcc.n	800d542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d53c:	2301      	movs	r3, #1
 800d53e:	617b      	str	r3, [r7, #20]
 800d540:	e007      	b.n	800d552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d542:	4b07      	ldr	r3, [pc, #28]	; (800d560 <prvInsertTimerInActiveList+0x80>)
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	3304      	adds	r3, #4
 800d54a:	4619      	mov	r1, r3
 800d54c:	4610      	mov	r0, r2
 800d54e:	f7fd fb26 	bl	800ab9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d552:	697b      	ldr	r3, [r7, #20]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	2000de60 	.word	0x2000de60
 800d560:	2000de5c 	.word	0x2000de5c

0800d564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08e      	sub	sp, #56	; 0x38
 800d568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d56a:	e0d0      	b.n	800d70e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	da1a      	bge.n	800d5a8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d572:	1d3b      	adds	r3, r7, #4
 800d574:	3304      	adds	r3, #4
 800d576:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10c      	bne.n	800d598 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d582:	b672      	cpsid	i
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	b662      	cpsie	i
 800d592:	61fb      	str	r3, [r7, #28]
}
 800d594:	bf00      	nop
 800d596:	e7fe      	b.n	800d596 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d59e:	6850      	ldr	r0, [r2, #4]
 800d5a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5a2:	6892      	ldr	r2, [r2, #8]
 800d5a4:	4611      	mov	r1, r2
 800d5a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f2c0 80ae 	blt.w	800d70c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d004      	beq.n	800d5c6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	3304      	adds	r3, #4
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fd fb25 	bl	800ac10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7ff ff69 	bl	800d4a0 <prvSampleTimeNow>
 800d5ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b09      	cmp	r3, #9
 800d5d4:	f200 809b 	bhi.w	800d70e <prvProcessReceivedCommands+0x1aa>
 800d5d8:	a201      	add	r2, pc, #4	; (adr r2, 800d5e0 <prvProcessReceivedCommands+0x7c>)
 800d5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5de:	bf00      	nop
 800d5e0:	0800d609 	.word	0x0800d609
 800d5e4:	0800d609 	.word	0x0800d609
 800d5e8:	0800d609 	.word	0x0800d609
 800d5ec:	0800d681 	.word	0x0800d681
 800d5f0:	0800d695 	.word	0x0800d695
 800d5f4:	0800d6e3 	.word	0x0800d6e3
 800d5f8:	0800d609 	.word	0x0800d609
 800d5fc:	0800d609 	.word	0x0800d609
 800d600:	0800d681 	.word	0x0800d681
 800d604:	0800d695 	.word	0x0800d695
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d60e:	f043 0301 	orr.w	r3, r3, #1
 800d612:	b2da      	uxtb	r2, r3
 800d614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	18d1      	adds	r1, r2, r3
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d628:	f7ff ff5a 	bl	800d4e0 <prvInsertTimerInActiveList>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d06d      	beq.n	800d70e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d634:	6a1b      	ldr	r3, [r3, #32]
 800d636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d638:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d640:	f003 0304 	and.w	r3, r3, #4
 800d644:	2b00      	cmp	r3, #0
 800d646:	d062      	beq.n	800d70e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64c:	699b      	ldr	r3, [r3, #24]
 800d64e:	441a      	add	r2, r3
 800d650:	2300      	movs	r3, #0
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	2300      	movs	r3, #0
 800d656:	2100      	movs	r1, #0
 800d658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d65a:	f7ff fdff 	bl	800d25c <xTimerGenericCommand>
 800d65e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d660:	6a3b      	ldr	r3, [r7, #32]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d153      	bne.n	800d70e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66a:	b672      	cpsid	i
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	b662      	cpsie	i
 800d67a:	61bb      	str	r3, [r7, #24]
}
 800d67c:	bf00      	nop
 800d67e:	e7fe      	b.n	800d67e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d686:	f023 0301 	bic.w	r3, r3, #1
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d692:	e03c      	b.n	800d70e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d69a:	f043 0301 	orr.w	r3, r3, #1
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ae:	699b      	ldr	r3, [r3, #24]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10c      	bne.n	800d6ce <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b8:	b672      	cpsid	i
 800d6ba:	f383 8811 	msr	BASEPRI, r3
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	b662      	cpsie	i
 800d6c8:	617b      	str	r3, [r7, #20]
}
 800d6ca:	bf00      	nop
 800d6cc:	e7fe      	b.n	800d6cc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	699a      	ldr	r2, [r3, #24]
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d4:	18d1      	adds	r1, r2, r3
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6dc:	f7ff ff00 	bl	800d4e0 <prvInsertTimerInActiveList>
					break;
 800d6e0:	e015      	b.n	800d70e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6e8:	f003 0302 	and.w	r3, r3, #2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d103      	bne.n	800d6f8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6f2:	f7fd f8e9 	bl	800a8c8 <vPortFree>
 800d6f6:	e00a      	b.n	800d70e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6fe:	f023 0301 	bic.w	r3, r3, #1
 800d702:	b2da      	uxtb	r2, r3
 800d704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d70a:	e000      	b.n	800d70e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d70c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d70e:	4b08      	ldr	r3, [pc, #32]	; (800d730 <prvProcessReceivedCommands+0x1cc>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	1d39      	adds	r1, r7, #4
 800d714:	2200      	movs	r2, #0
 800d716:	4618      	mov	r0, r3
 800d718:	f7fe f8dc 	bl	800b8d4 <xQueueReceive>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f47f af24 	bne.w	800d56c <prvProcessReceivedCommands+0x8>
	}
}
 800d724:	bf00      	nop
 800d726:	bf00      	nop
 800d728:	3730      	adds	r7, #48	; 0x30
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	2000de64 	.word	0x2000de64

0800d734 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b088      	sub	sp, #32
 800d738:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d73a:	e04a      	b.n	800d7d2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d73c:	4b2e      	ldr	r3, [pc, #184]	; (800d7f8 <prvSwitchTimerLists+0xc4>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d746:	4b2c      	ldr	r3, [pc, #176]	; (800d7f8 <prvSwitchTimerLists+0xc4>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	3304      	adds	r3, #4
 800d754:	4618      	mov	r0, r3
 800d756:	f7fd fa5b 	bl	800ac10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d768:	f003 0304 	and.w	r3, r3, #4
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d030      	beq.n	800d7d2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	4413      	add	r3, r2
 800d778:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d90e      	bls.n	800d7a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d78e:	4b1a      	ldr	r3, [pc, #104]	; (800d7f8 <prvSwitchTimerLists+0xc4>)
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	3304      	adds	r3, #4
 800d796:	4619      	mov	r1, r3
 800d798:	4610      	mov	r0, r2
 800d79a:	f7fd fa00 	bl	800ab9e <vListInsert>
 800d79e:	e018      	b.n	800d7d2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	693a      	ldr	r2, [r7, #16]
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7ff fd56 	bl	800d25c <xTimerGenericCommand>
 800d7b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10c      	bne.n	800d7d2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7bc:	b672      	cpsid	i
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	b662      	cpsie	i
 800d7cc:	603b      	str	r3, [r7, #0]
}
 800d7ce:	bf00      	nop
 800d7d0:	e7fe      	b.n	800d7d0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7d2:	4b09      	ldr	r3, [pc, #36]	; (800d7f8 <prvSwitchTimerLists+0xc4>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1af      	bne.n	800d73c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d7dc:	4b06      	ldr	r3, [pc, #24]	; (800d7f8 <prvSwitchTimerLists+0xc4>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d7e2:	4b06      	ldr	r3, [pc, #24]	; (800d7fc <prvSwitchTimerLists+0xc8>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a04      	ldr	r2, [pc, #16]	; (800d7f8 <prvSwitchTimerLists+0xc4>)
 800d7e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d7ea:	4a04      	ldr	r2, [pc, #16]	; (800d7fc <prvSwitchTimerLists+0xc8>)
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	6013      	str	r3, [r2, #0]
}
 800d7f0:	bf00      	nop
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	2000de5c 	.word	0x2000de5c
 800d7fc:	2000de60 	.word	0x2000de60

0800d800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d806:	f7fd fb39 	bl	800ae7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d80a:	4b15      	ldr	r3, [pc, #84]	; (800d860 <prvCheckForValidListAndQueue+0x60>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d120      	bne.n	800d854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d812:	4814      	ldr	r0, [pc, #80]	; (800d864 <prvCheckForValidListAndQueue+0x64>)
 800d814:	f7fd f972 	bl	800aafc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d818:	4813      	ldr	r0, [pc, #76]	; (800d868 <prvCheckForValidListAndQueue+0x68>)
 800d81a:	f7fd f96f 	bl	800aafc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d81e:	4b13      	ldr	r3, [pc, #76]	; (800d86c <prvCheckForValidListAndQueue+0x6c>)
 800d820:	4a10      	ldr	r2, [pc, #64]	; (800d864 <prvCheckForValidListAndQueue+0x64>)
 800d822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d824:	4b12      	ldr	r3, [pc, #72]	; (800d870 <prvCheckForValidListAndQueue+0x70>)
 800d826:	4a10      	ldr	r2, [pc, #64]	; (800d868 <prvCheckForValidListAndQueue+0x68>)
 800d828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d82a:	2300      	movs	r3, #0
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	4b11      	ldr	r3, [pc, #68]	; (800d874 <prvCheckForValidListAndQueue+0x74>)
 800d830:	4a11      	ldr	r2, [pc, #68]	; (800d878 <prvCheckForValidListAndQueue+0x78>)
 800d832:	2110      	movs	r1, #16
 800d834:	200a      	movs	r0, #10
 800d836:	f7fd fcb7 	bl	800b1a8 <xQueueGenericCreateStatic>
 800d83a:	4603      	mov	r3, r0
 800d83c:	4a08      	ldr	r2, [pc, #32]	; (800d860 <prvCheckForValidListAndQueue+0x60>)
 800d83e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d840:	4b07      	ldr	r3, [pc, #28]	; (800d860 <prvCheckForValidListAndQueue+0x60>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d005      	beq.n	800d854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d848:	4b05      	ldr	r3, [pc, #20]	; (800d860 <prvCheckForValidListAndQueue+0x60>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	490b      	ldr	r1, [pc, #44]	; (800d87c <prvCheckForValidListAndQueue+0x7c>)
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fe fc0e 	bl	800c070 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d854:	f7fd fb46 	bl	800aee4 <vPortExitCritical>
}
 800d858:	bf00      	nop
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	2000de64 	.word	0x2000de64
 800d864:	2000de34 	.word	0x2000de34
 800d868:	2000de48 	.word	0x2000de48
 800d86c:	2000de5c 	.word	0x2000de5c
 800d870:	2000de60 	.word	0x2000de60
 800d874:	2000df10 	.word	0x2000df10
 800d878:	2000de70 	.word	0x2000de70
 800d87c:	0801d570 	.word	0x0801d570

0800d880 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d880:	8880      	ldrh	r0, [r0, #4]
 800d882:	4770      	bx	lr

0800d884 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d884:	2300      	movs	r3, #0
 800d886:	8083      	strh	r3, [r0, #4]
 800d888:	4770      	bx	lr
	...

0800d88c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88e:	6803      	ldr	r3, [r0, #0]
 800d890:	460e      	mov	r6, r1
 800d892:	2100      	movs	r1, #0
 800d894:	4605      	mov	r5, r0
 800d896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d898:	4798      	blx	r3
 800d89a:	4604      	mov	r4, r0
 800d89c:	682b      	ldr	r3, [r5, #0]
 800d89e:	4628      	mov	r0, r5
 800d8a0:	1b34      	subs	r4, r6, r4
 800d8a2:	6a1b      	ldr	r3, [r3, #32]
 800d8a4:	b2a4      	uxth	r4, r4
 800d8a6:	4798      	blx	r3
 800d8a8:	88ab      	ldrh	r3, [r5, #4]
 800d8aa:	fbb4 f4f0 	udiv	r4, r4, r0
 800d8ae:	42a3      	cmp	r3, r4
 800d8b0:	d805      	bhi.n	800d8be <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800d8b2:	4b0e      	ldr	r3, [pc, #56]	; (800d8ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800d8b4:	211e      	movs	r1, #30
 800d8b6:	4a0e      	ldr	r2, [pc, #56]	; (800d8f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800d8b8:	480e      	ldr	r0, [pc, #56]	; (800d8f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800d8ba:	f00e f883 	bl	801b9c4 <__assert_func>
 800d8be:	682b      	ldr	r3, [r5, #0]
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c6:	4798      	blx	r3
 800d8c8:	682b      	ldr	r3, [r5, #0]
 800d8ca:	4607      	mov	r7, r0
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	6a1b      	ldr	r3, [r3, #32]
 800d8d0:	4798      	blx	r3
 800d8d2:	1bf3      	subs	r3, r6, r7
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	fbb3 f2f0 	udiv	r2, r3, r0
 800d8da:	fb02 3010 	mls	r0, r2, r0, r3
 800d8de:	b118      	cbz	r0, 800d8e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800d8e0:	4b05      	ldr	r3, [pc, #20]	; (800d8f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800d8e2:	211f      	movs	r1, #31
 800d8e4:	4a02      	ldr	r2, [pc, #8]	; (800d8f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800d8e6:	e7e7      	b.n	800d8b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ec:	0801dd04 	.word	0x0801dd04
 800d8f0:	0801de72 	.word	0x0801de72
 800d8f4:	0801dd19 	.word	0x0801dd19
 800d8f8:	0801dd47 	.word	0x0801dd47

0800d8fc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d8fc:	b538      	push	{r3, r4, r5, lr}
 800d8fe:	6803      	ldr	r3, [r0, #0]
 800d900:	460d      	mov	r5, r1
 800d902:	4604      	mov	r4, r0
 800d904:	6a1b      	ldr	r3, [r3, #32]
 800d906:	4798      	blx	r3
 800d908:	4285      	cmp	r5, r0
 800d90a:	d905      	bls.n	800d918 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800d90c:	4b0c      	ldr	r3, [pc, #48]	; (800d940 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800d90e:	2130      	movs	r1, #48	; 0x30
 800d910:	4a0c      	ldr	r2, [pc, #48]	; (800d944 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800d912:	480d      	ldr	r0, [pc, #52]	; (800d948 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800d914:	f00e f856 	bl	801b9c4 <__assert_func>
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	4620      	mov	r0, r4
 800d91c:	88a5      	ldrh	r5, [r4, #4]
 800d91e:	69db      	ldr	r3, [r3, #28]
 800d920:	4798      	blx	r3
 800d922:	4285      	cmp	r5, r0
 800d924:	d303      	bcc.n	800d92e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800d926:	4b09      	ldr	r3, [pc, #36]	; (800d94c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800d928:	2131      	movs	r1, #49	; 0x31
 800d92a:	4a06      	ldr	r2, [pc, #24]	; (800d944 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800d92c:	e7f1      	b.n	800d912 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800d92e:	6823      	ldr	r3, [r4, #0]
 800d930:	4620      	mov	r0, r4
 800d932:	88a1      	ldrh	r1, [r4, #4]
 800d934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d936:	4798      	blx	r3
 800d938:	88a3      	ldrh	r3, [r4, #4]
 800d93a:	3301      	adds	r3, #1
 800d93c:	80a3      	strh	r3, [r4, #4]
 800d93e:	bd38      	pop	{r3, r4, r5, pc}
 800d940:	0801ddc1 	.word	0x0801ddc1
 800d944:	0801deb5 	.word	0x0801deb5
 800d948:	0801dd19 	.word	0x0801dd19
 800d94c:	0801ddd8 	.word	0x0801ddd8

0800d950 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d950:	b570      	push	{r4, r5, r6, lr}
 800d952:	6803      	ldr	r3, [r0, #0]
 800d954:	4616      	mov	r6, r2
 800d956:	4604      	mov	r4, r0
 800d958:	460d      	mov	r5, r1
 800d95a:	6a1b      	ldr	r3, [r3, #32]
 800d95c:	4798      	blx	r3
 800d95e:	4286      	cmp	r6, r0
 800d960:	d905      	bls.n	800d96e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800d962:	4b06      	ldr	r3, [pc, #24]	; (800d97c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800d964:	213a      	movs	r1, #58	; 0x3a
 800d966:	4a06      	ldr	r2, [pc, #24]	; (800d980 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800d968:	4806      	ldr	r0, [pc, #24]	; (800d984 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800d96a:	f00e f82b 	bl	801b9c4 <__assert_func>
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	4629      	mov	r1, r5
 800d972:	4620      	mov	r0, r4
 800d974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d97a:	4718      	bx	r3
 800d97c:	0801ddc1 	.word	0x0801ddc1
 800d980:	0801de28 	.word	0x0801de28
 800d984:	0801dd19 	.word	0x0801dd19

0800d988 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d988:	4770      	bx	lr
	...

0800d98c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d98c:	4a02      	ldr	r2, [pc, #8]	; (800d998 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d98e:	6002      	str	r2, [r0, #0]
 800d990:	2200      	movs	r2, #0
 800d992:	8082      	strh	r2, [r0, #4]
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	0801ddfc 	.word	0x0801ddfc

0800d99c <_ZN8touchgfx9Container13getFirstChildEv>:
 800d99c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d99e:	4770      	bx	lr

0800d9a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d9a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	b12b      	cbz	r3, 800d9b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d9a6:	b920      	cbnz	r0, 800d9b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d9a8:	1a5a      	subs	r2, r3, r1
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	4250      	negs	r0, r2
 800d9ae:	4150      	adcs	r0, r2
 800d9b0:	e7f8      	b.n	800d9a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d9b2:	4770      	bx	lr

0800d9b4 <_ZN8touchgfx9Container9removeAllEv>:
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d9b8:	b123      	cbz	r3, 800d9c4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d9ba:	6999      	ldr	r1, [r3, #24]
 800d9bc:	6281      	str	r1, [r0, #40]	; 0x28
 800d9be:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d9c2:	e7f8      	b.n	800d9b6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d9c4:	4770      	bx	lr

0800d9c6 <_ZN8touchgfx9Container6unlinkEv>:
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	6283      	str	r3, [r0, #40]	; 0x28
 800d9ca:	4770      	bx	lr

0800d9cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d0:	461f      	mov	r7, r3
 800d9d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d9d6:	460d      	mov	r5, r1
 800d9d8:	4616      	mov	r6, r2
 800d9da:	b103      	cbz	r3, 800d9de <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d9dc:	6038      	str	r0, [r7, #0]
 800d9de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d9e0:	b314      	cbz	r4, 800da28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d9e2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d9e6:	b1eb      	cbz	r3, 800da24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d9e8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d9ec:	428d      	cmp	r5, r1
 800d9ee:	db19      	blt.n	800da24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d9f0:	b289      	uxth	r1, r1
 800d9f2:	8923      	ldrh	r3, [r4, #8]
 800d9f4:	440b      	add	r3, r1
 800d9f6:	b21b      	sxth	r3, r3
 800d9f8:	429d      	cmp	r5, r3
 800d9fa:	da13      	bge.n	800da24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d9fc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800da00:	4296      	cmp	r6, r2
 800da02:	db0f      	blt.n	800da24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da04:	b292      	uxth	r2, r2
 800da06:	8963      	ldrh	r3, [r4, #10]
 800da08:	4413      	add	r3, r2
 800da0a:	b21b      	sxth	r3, r3
 800da0c:	429e      	cmp	r6, r3
 800da0e:	da09      	bge.n	800da24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da10:	6823      	ldr	r3, [r4, #0]
 800da12:	1ab2      	subs	r2, r6, r2
 800da14:	1a69      	subs	r1, r5, r1
 800da16:	4620      	mov	r0, r4
 800da18:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800da1c:	b212      	sxth	r2, r2
 800da1e:	463b      	mov	r3, r7
 800da20:	b209      	sxth	r1, r1
 800da22:	47c0      	blx	r8
 800da24:	69a4      	ldr	r4, [r4, #24]
 800da26:	e7db      	b.n	800d9e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800da28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da2c <_ZNK8touchgfx9Container12getSolidRectEv>:
 800da2c:	2200      	movs	r2, #0
 800da2e:	8002      	strh	r2, [r0, #0]
 800da30:	8042      	strh	r2, [r0, #2]
 800da32:	8082      	strh	r2, [r0, #4]
 800da34:	80c2      	strh	r2, [r0, #6]
 800da36:	4770      	bx	lr

0800da38 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800da38:	b570      	push	{r4, r5, r6, lr}
 800da3a:	460d      	mov	r5, r1
 800da3c:	4616      	mov	r6, r2
 800da3e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800da40:	b13c      	cbz	r4, 800da52 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	4620      	mov	r0, r4
 800da46:	4632      	mov	r2, r6
 800da48:	4629      	mov	r1, r5
 800da4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da4c:	4798      	blx	r3
 800da4e:	69a4      	ldr	r4, [r4, #24]
 800da50:	e7f6      	b.n	800da40 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800da52:	bd70      	pop	{r4, r5, r6, pc}

0800da54 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	460d      	mov	r5, r1
 800da58:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800da5a:	b134      	cbz	r4, 800da6a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800da5c:	682b      	ldr	r3, [r5, #0]
 800da5e:	4621      	mov	r1, r4
 800da60:	4628      	mov	r0, r5
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	4798      	blx	r3
 800da66:	69a4      	ldr	r4, [r4, #24]
 800da68:	e7f7      	b.n	800da5a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800da6a:	bd38      	pop	{r3, r4, r5, pc}

0800da6c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800da6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800da6e:	b19b      	cbz	r3, 800da98 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800da70:	428b      	cmp	r3, r1
 800da72:	d109      	bne.n	800da88 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800da74:	699a      	ldr	r2, [r3, #24]
 800da76:	2100      	movs	r1, #0
 800da78:	6159      	str	r1, [r3, #20]
 800da7a:	6282      	str	r2, [r0, #40]	; 0x28
 800da7c:	b902      	cbnz	r2, 800da80 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800da7e:	4770      	bx	lr
 800da80:	6199      	str	r1, [r3, #24]
 800da82:	4770      	bx	lr
 800da84:	4613      	mov	r3, r2
 800da86:	b13a      	cbz	r2, 800da98 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800da88:	699a      	ldr	r2, [r3, #24]
 800da8a:	428a      	cmp	r2, r1
 800da8c:	d1fa      	bne.n	800da84 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800da8e:	698a      	ldr	r2, [r1, #24]
 800da90:	619a      	str	r2, [r3, #24]
 800da92:	2300      	movs	r3, #0
 800da94:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800da98:	4770      	bx	lr

0800da9a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800da9a:	b410      	push	{r4}
 800da9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800da9e:	4604      	mov	r4, r0
 800daa0:	b92b      	cbnz	r3, 800daae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800daa2:	6803      	ldr	r3, [r0, #0]
 800daa4:	4611      	mov	r1, r2
 800daa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daac:	4718      	bx	r3
 800daae:	b941      	cbnz	r1, 800dac2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800dab0:	6193      	str	r3, [r2, #24]
 800dab2:	6282      	str	r2, [r0, #40]	; 0x28
 800dab4:	6154      	str	r4, [r2, #20]
 800dab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	4603      	mov	r3, r0
 800dabe:	2800      	cmp	r0, #0
 800dac0:	d0f9      	beq.n	800dab6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800dac2:	4299      	cmp	r1, r3
 800dac4:	6998      	ldr	r0, [r3, #24]
 800dac6:	d1f9      	bne.n	800dabc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800dac8:	6190      	str	r0, [r2, #24]
 800daca:	618a      	str	r2, [r1, #24]
 800dacc:	e7f2      	b.n	800dab4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800dad0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800dad0:	4288      	cmp	r0, r1
 800dad2:	b508      	push	{r3, lr}
 800dad4:	d105      	bne.n	800dae2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800dad6:	4b11      	ldr	r3, [pc, #68]	; (800db1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800dad8:	2121      	movs	r1, #33	; 0x21
 800dada:	4a11      	ldr	r2, [pc, #68]	; (800db20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800dadc:	4811      	ldr	r0, [pc, #68]	; (800db24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800dade:	f00d ff71 	bl	801b9c4 <__assert_func>
 800dae2:	694b      	ldr	r3, [r1, #20]
 800dae4:	b11b      	cbz	r3, 800daee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800dae6:	4b10      	ldr	r3, [pc, #64]	; (800db28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800dae8:	2122      	movs	r1, #34	; 0x22
 800daea:	4a0d      	ldr	r2, [pc, #52]	; (800db20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800daec:	e7f6      	b.n	800dadc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800daee:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800daf2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800daf4:	b913      	cbnz	r3, 800dafc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800daf6:	6281      	str	r1, [r0, #40]	; 0x28
 800daf8:	bd08      	pop	{r3, pc}
 800dafa:	4613      	mov	r3, r2
 800dafc:	699a      	ldr	r2, [r3, #24]
 800dafe:	b12a      	cbz	r2, 800db0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800db00:	428b      	cmp	r3, r1
 800db02:	d1fa      	bne.n	800dafa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800db04:	4b09      	ldr	r3, [pc, #36]	; (800db2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800db06:	2133      	movs	r1, #51	; 0x33
 800db08:	4a05      	ldr	r2, [pc, #20]	; (800db20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800db0a:	e7e7      	b.n	800dadc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800db0c:	428b      	cmp	r3, r1
 800db0e:	d103      	bne.n	800db18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800db10:	4b06      	ldr	r3, [pc, #24]	; (800db2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800db12:	2136      	movs	r1, #54	; 0x36
 800db14:	4a02      	ldr	r2, [pc, #8]	; (800db20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800db16:	e7e1      	b.n	800dadc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800db18:	6199      	str	r1, [r3, #24]
 800db1a:	e7ed      	b.n	800daf8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800db1c:	0801def3 	.word	0x0801def3
 800db20:	0801e044 	.word	0x0801e044
 800db24:	0801df1f 	.word	0x0801df1f
 800db28:	0801df52 	.word	0x0801df52
 800db2c:	0801df88 	.word	0x0801df88

0800db30 <_ZN8touchgfx4RectaNERKS0_>:
 800db30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db34:	f9b1 7000 	ldrsh.w	r7, [r1]
 800db38:	888c      	ldrh	r4, [r1, #4]
 800db3a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800db3e:	443c      	add	r4, r7
 800db40:	b2a4      	uxth	r4, r4
 800db42:	fa0f f884 	sxth.w	r8, r4
 800db46:	45c1      	cmp	r9, r8
 800db48:	da2f      	bge.n	800dbaa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800db4a:	8882      	ldrh	r2, [r0, #4]
 800db4c:	444a      	add	r2, r9
 800db4e:	b292      	uxth	r2, r2
 800db50:	fa0f fe82 	sxth.w	lr, r2
 800db54:	4577      	cmp	r7, lr
 800db56:	da28      	bge.n	800dbaa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800db58:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800db5c:	88cb      	ldrh	r3, [r1, #6]
 800db5e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800db62:	442b      	add	r3, r5
 800db64:	b21b      	sxth	r3, r3
 800db66:	429e      	cmp	r6, r3
 800db68:	da1f      	bge.n	800dbaa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800db6a:	88c3      	ldrh	r3, [r0, #6]
 800db6c:	4433      	add	r3, r6
 800db6e:	b29b      	uxth	r3, r3
 800db70:	fa0f fc83 	sxth.w	ip, r3
 800db74:	4565      	cmp	r5, ip
 800db76:	da18      	bge.n	800dbaa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800db78:	454f      	cmp	r7, r9
 800db7a:	bfb8      	it	lt
 800db7c:	464f      	movlt	r7, r9
 800db7e:	42b5      	cmp	r5, r6
 800db80:	bfb8      	it	lt
 800db82:	4635      	movlt	r5, r6
 800db84:	45f0      	cmp	r8, lr
 800db86:	bfd8      	it	le
 800db88:	4622      	movle	r2, r4
 800db8a:	1bd2      	subs	r2, r2, r7
 800db8c:	8082      	strh	r2, [r0, #4]
 800db8e:	884a      	ldrh	r2, [r1, #2]
 800db90:	88c9      	ldrh	r1, [r1, #6]
 800db92:	8007      	strh	r7, [r0, #0]
 800db94:	440a      	add	r2, r1
 800db96:	8045      	strh	r5, [r0, #2]
 800db98:	b292      	uxth	r2, r2
 800db9a:	b211      	sxth	r1, r2
 800db9c:	458c      	cmp	ip, r1
 800db9e:	bfa8      	it	ge
 800dba0:	4613      	movge	r3, r2
 800dba2:	1b5b      	subs	r3, r3, r5
 800dba4:	80c3      	strh	r3, [r0, #6]
 800dba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbaa:	2300      	movs	r3, #0
 800dbac:	8003      	strh	r3, [r0, #0]
 800dbae:	8043      	strh	r3, [r0, #2]
 800dbb0:	8083      	strh	r3, [r0, #4]
 800dbb2:	80c3      	strh	r3, [r0, #6]
 800dbb4:	e7f7      	b.n	800dba6 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800dbb6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	dd06      	ble.n	800dbcc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800dbbe:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	bfcc      	ite	gt
 800dbc6:	2000      	movgt	r0, #0
 800dbc8:	2001      	movle	r0, #1
 800dbca:	4770      	bx	lr
 800dbcc:	2001      	movs	r0, #1
 800dbce:	4770      	bx	lr

0800dbd0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800dbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800dbda:	8003      	strh	r3, [r0, #0]
 800dbdc:	8043      	strh	r3, [r0, #2]
 800dbde:	8083      	strh	r3, [r0, #4]
 800dbe0:	80c3      	strh	r3, [r0, #6]
 800dbe2:	2d00      	cmp	r5, #0
 800dbe4:	d040      	beq.n	800dc68 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800dbe6:	1d28      	adds	r0, r5, #4
 800dbe8:	f7ff ffe5 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dbec:	b988      	cbnz	r0, 800dc12 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f7ff ffe1 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dbf4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800dbf8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800dbfc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800dc00:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800dc04:	b138      	cbz	r0, 800dc16 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800dc06:	8022      	strh	r2, [r4, #0]
 800dc08:	8063      	strh	r3, [r4, #2]
 800dc0a:	f8a4 e004 	strh.w	lr, [r4, #4]
 800dc0e:	f8a4 c006 	strh.w	ip, [r4, #6]
 800dc12:	69ad      	ldr	r5, [r5, #24]
 800dc14:	e7e5      	b.n	800dbe2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800dc16:	f9b4 0000 	ldrsh.w	r0, [r4]
 800dc1a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800dc1e:	4290      	cmp	r0, r2
 800dc20:	4607      	mov	r7, r0
 800dc22:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800dc26:	460e      	mov	r6, r1
 800dc28:	bfa8      	it	ge
 800dc2a:	4617      	movge	r7, r2
 800dc2c:	4299      	cmp	r1, r3
 800dc2e:	4472      	add	r2, lr
 800dc30:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800dc34:	bfa8      	it	ge
 800dc36:	461e      	movge	r6, r3
 800dc38:	4440      	add	r0, r8
 800dc3a:	4471      	add	r1, lr
 800dc3c:	4463      	add	r3, ip
 800dc3e:	b200      	sxth	r0, r0
 800dc40:	8027      	strh	r7, [r4, #0]
 800dc42:	b212      	sxth	r2, r2
 800dc44:	8066      	strh	r6, [r4, #2]
 800dc46:	b209      	sxth	r1, r1
 800dc48:	b21b      	sxth	r3, r3
 800dc4a:	4290      	cmp	r0, r2
 800dc4c:	bfac      	ite	ge
 800dc4e:	ebc7 0200 	rsbge	r2, r7, r0
 800dc52:	ebc7 0202 	rsblt	r2, r7, r2
 800dc56:	4299      	cmp	r1, r3
 800dc58:	bfac      	ite	ge
 800dc5a:	ebc6 0301 	rsbge	r3, r6, r1
 800dc5e:	ebc6 0303 	rsblt	r3, r6, r3
 800dc62:	80a2      	strh	r2, [r4, #4]
 800dc64:	80e3      	strh	r3, [r4, #6]
 800dc66:	e7d4      	b.n	800dc12 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dc68:	4620      	mov	r0, r4
 800dc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc6e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800dc6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dc72:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800dc76:	b383      	cbz	r3, 800dcda <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dc78:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dc7a:	b374      	cbz	r4, 800dcda <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dc7c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800dc80:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800dc84:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800dc88:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800dc8c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800dc90:	b303      	cbz	r3, 800dcd4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800dc92:	4668      	mov	r0, sp
 800dc94:	1d21      	adds	r1, r4, #4
 800dc96:	f8ad 5000 	strh.w	r5, [sp]
 800dc9a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800dc9e:	f8ad 7004 	strh.w	r7, [sp, #4]
 800dca2:	f8ad 8006 	strh.w	r8, [sp, #6]
 800dca6:	f7ff ff43 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 800dcaa:	4668      	mov	r0, sp
 800dcac:	f7ff ff83 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dcb0:	b980      	cbnz	r0, 800dcd4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800dcb2:	f8bd 3000 	ldrh.w	r3, [sp]
 800dcb6:	4669      	mov	r1, sp
 800dcb8:	88a2      	ldrh	r2, [r4, #4]
 800dcba:	4620      	mov	r0, r4
 800dcbc:	1a9b      	subs	r3, r3, r2
 800dcbe:	88e2      	ldrh	r2, [r4, #6]
 800dcc0:	f8ad 3000 	strh.w	r3, [sp]
 800dcc4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dcc8:	1a9b      	subs	r3, r3, r2
 800dcca:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dcce:	6823      	ldr	r3, [r4, #0]
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	4798      	blx	r3
 800dcd4:	69a4      	ldr	r4, [r4, #24]
 800dcd6:	2c00      	cmp	r4, #0
 800dcd8:	d1d8      	bne.n	800dc8c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800dcda:	b002      	add	sp, #8
 800dcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dce0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800dce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dce2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800dce6:	460d      	mov	r5, r1
 800dce8:	4616      	mov	r6, r2
 800dcea:	b323      	cbz	r3, 800dd36 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dcec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dcee:	b314      	cbz	r4, 800dd36 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dcf0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800dcf4:	b1eb      	cbz	r3, 800dd32 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dcf6:	6828      	ldr	r0, [r5, #0]
 800dcf8:	466b      	mov	r3, sp
 800dcfa:	6869      	ldr	r1, [r5, #4]
 800dcfc:	c303      	stmia	r3!, {r0, r1}
 800dcfe:	4668      	mov	r0, sp
 800dd00:	1d21      	adds	r1, r4, #4
 800dd02:	f7ff ff15 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 800dd06:	4668      	mov	r0, sp
 800dd08:	f7ff ff55 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dd0c:	b988      	cbnz	r0, 800dd32 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dd0e:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd12:	4669      	mov	r1, sp
 800dd14:	88a2      	ldrh	r2, [r4, #4]
 800dd16:	4620      	mov	r0, r4
 800dd18:	1a9b      	subs	r3, r3, r2
 800dd1a:	88e2      	ldrh	r2, [r4, #6]
 800dd1c:	f8ad 3000 	strh.w	r3, [sp]
 800dd20:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dd24:	1a9b      	subs	r3, r3, r2
 800dd26:	4632      	mov	r2, r6
 800dd28:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dd2c:	6823      	ldr	r3, [r4, #0]
 800dd2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd30:	4798      	blx	r3
 800dd32:	69a4      	ldr	r4, [r4, #24]
 800dd34:	e7db      	b.n	800dcee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800dd36:	b002      	add	sp, #8
 800dd38:	bd70      	pop	{r4, r5, r6, pc}

0800dd3a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 800dd3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dd3e:	4770      	bx	lr

0800dd40 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800dd40:	4770      	bx	lr

0800dd42 <_ZN8touchgfx3HAL10FlushCacheEv>:
 800dd42:	4770      	bx	lr

0800dd44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800dd44:	6803      	ldr	r3, [r0, #0]
 800dd46:	b513      	push	{r0, r1, r4, lr}
 800dd48:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e9cd 3300 	strd	r3, r3, [sp]
 800dd52:	466b      	mov	r3, sp
 800dd54:	47a0      	blx	r4
 800dd56:	b002      	add	sp, #8
 800dd58:	bd10      	pop	{r4, pc}

0800dd5a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800dd60:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800dd64:	4770      	bx	lr

0800dd66 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800dd66:	2301      	movs	r3, #1
 800dd68:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800dd6c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800dd70:	4770      	bx	lr

0800dd72 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800dd72:	6843      	ldr	r3, [r0, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	725a      	strb	r2, [r3, #9]
 800dd78:	6840      	ldr	r0, [r0, #4]
 800dd7a:	6803      	ldr	r3, [r0, #0]
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	4718      	bx	r3

0800dd80 <_ZN8touchgfx3HAL8flushDMAEv>:
 800dd80:	6840      	ldr	r0, [r0, #4]
 800dd82:	6803      	ldr	r3, [r0, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	4718      	bx	r3

0800dd88 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800dd88:	b530      	push	{r4, r5, lr}
 800dd8a:	b08b      	sub	sp, #44	; 0x2c
 800dd8c:	6804      	ldr	r4, [r0, #0]
 800dd8e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800dd92:	9508      	str	r5, [sp, #32]
 800dd94:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800dd98:	9507      	str	r5, [sp, #28]
 800dd9a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800dd9e:	9506      	str	r5, [sp, #24]
 800dda0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800dda4:	9505      	str	r5, [sp, #20]
 800dda6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800ddaa:	9504      	str	r5, [sp, #16]
 800ddac:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800ddb0:	9503      	str	r5, [sp, #12]
 800ddb2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ddb6:	9502      	str	r5, [sp, #8]
 800ddb8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800ddbc:	e9cd 3500 	strd	r3, r5, [sp]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	47a0      	blx	r4
 800ddc8:	b00b      	add	sp, #44	; 0x2c
 800ddca:	bd30      	pop	{r4, r5, pc}

0800ddcc <_ZN8touchgfx3HAL10beginFrameEv>:
 800ddcc:	4b04      	ldr	r3, [pc, #16]	; (800dde0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	b123      	cbz	r3, 800dddc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800ddd2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800ddd6:	f080 0001 	eor.w	r0, r0, #1
 800ddda:	4770      	bx	lr
 800dddc:	2001      	movs	r0, #1
 800ddde:	4770      	bx	lr
 800dde0:	2000df6a 	.word	0x2000df6a

0800dde4 <_ZN8touchgfx3HAL8endFrameEv>:
 800dde4:	b510      	push	{r4, lr}
 800dde6:	4604      	mov	r4, r0
 800dde8:	6840      	ldr	r0, [r0, #4]
 800ddea:	6803      	ldr	r3, [r0, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	4798      	blx	r3
 800ddf0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800ddf4:	b113      	cbz	r3, 800ddfc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800ddfc:	bd10      	pop	{r4, pc}

0800ddfe <_ZN8touchgfx3HAL10initializeEv>:
 800ddfe:	b510      	push	{r4, lr}
 800de00:	4604      	mov	r4, r0
 800de02:	f7f4 f85d 	bl	8001ec0 <_ZN8touchgfx10OSWrappers10initializeEv>
 800de06:	6860      	ldr	r0, [r4, #4]
 800de08:	6803      	ldr	r3, [r0, #0]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	4798      	blx	r3
 800de0e:	68e0      	ldr	r0, [r4, #12]
 800de10:	6803      	ldr	r3, [r0, #0]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	4798      	blx	r3
 800de16:	6823      	ldr	r3, [r4, #0]
 800de18:	4620      	mov	r0, r4
 800de1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de20:	4718      	bx	r3

0800de22 <_ZN8touchgfx3HAL9taskEntryEv>:
 800de22:	b508      	push	{r3, lr}
 800de24:	6803      	ldr	r3, [r0, #0]
 800de26:	4604      	mov	r4, r0
 800de28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de2a:	4798      	blx	r3
 800de2c:	6823      	ldr	r3, [r4, #0]
 800de2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de30:	4620      	mov	r0, r4
 800de32:	4798      	blx	r3
 800de34:	f7f4 f8ba 	bl	8001fac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de3c:	e7f8      	b.n	800de30 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800de40 <_ZN8touchgfx3HAL4tickEv>:
 800de40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800de42:	6803      	ldr	r3, [r0, #0]
 800de44:	4604      	mov	r4, r0
 800de46:	4d5c      	ldr	r5, [pc, #368]	; (800dfb8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800de48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800de4c:	4798      	blx	r3
 800de4e:	2800      	cmp	r0, #0
 800de50:	f000 8097 	beq.w	800df82 <_ZN8touchgfx3HAL4tickEv+0x142>
 800de54:	2001      	movs	r0, #1
 800de56:	2600      	movs	r6, #0
 800de58:	f7f3 fe1e 	bl	8001a98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800de5c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800de60:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800de64:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800de68:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800de6c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800de70:	b133      	cbz	r3, 800de80 <_ZN8touchgfx3HAL4tickEv+0x40>
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	4620      	mov	r0, r4
 800de76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800de7a:	4798      	blx	r3
 800de7c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800de80:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800de84:	2601      	movs	r6, #1
 800de86:	6862      	ldr	r2, [r4, #4]
 800de88:	f083 0301 	eor.w	r3, r3, #1
 800de8c:	702e      	strb	r6, [r5, #0]
 800de8e:	7253      	strb	r3, [r2, #9]
 800de90:	f002 fd88 	bl	80109a4 <_ZN8touchgfx11Application11getInstanceEv>
 800de94:	6803      	ldr	r3, [r0, #0]
 800de96:	4631      	mov	r1, r6
 800de98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9a:	4798      	blx	r3
 800de9c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800dea0:	b90b      	cbnz	r3, 800dea6 <_ZN8touchgfx3HAL4tickEv+0x66>
 800dea2:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800dea6:	f002 fd7d 	bl	80109a4 <_ZN8touchgfx11Application11getInstanceEv>
 800deaa:	6803      	ldr	r3, [r0, #0]
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	4798      	blx	r3
 800deb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deb2:	6803      	ldr	r3, [r0, #0]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	4798      	blx	r3
 800deb8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800debc:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800dec0:	3b01      	subs	r3, #1
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800dec8:	b10a      	cbz	r2, 800dece <_ZN8touchgfx3HAL4tickEv+0x8e>
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1eb      	bne.n	800dea6 <_ZN8touchgfx3HAL4tickEv+0x66>
 800dece:	4a3b      	ldr	r2, [pc, #236]	; (800dfbc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800ded0:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800ded4:	7813      	ldrb	r3, [r2, #0]
 800ded6:	3301      	adds	r3, #1
 800ded8:	b25b      	sxtb	r3, r3
 800deda:	4299      	cmp	r1, r3
 800dedc:	7013      	strb	r3, [r2, #0]
 800dede:	dc10      	bgt.n	800df02 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800dee0:	2300      	movs	r3, #0
 800dee2:	68e0      	ldr	r0, [r4, #12]
 800dee4:	a902      	add	r1, sp, #8
 800dee6:	7013      	strb	r3, [r2, #0]
 800dee8:	aa03      	add	r2, sp, #12
 800deea:	6803      	ldr	r3, [r0, #0]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	4798      	blx	r3
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	2800      	cmp	r0, #0
 800def4:	d051      	beq.n	800df9a <_ZN8touchgfx3HAL4tickEv+0x15a>
 800def6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800defa:	4620      	mov	r0, r4
 800defc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800df00:	4798      	blx	r3
 800df02:	2300      	movs	r3, #0
 800df04:	6960      	ldr	r0, [r4, #20]
 800df06:	f88d 3007 	strb.w	r3, [sp, #7]
 800df0a:	b158      	cbz	r0, 800df24 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800df0c:	6803      	ldr	r3, [r0, #0]
 800df0e:	f10d 0107 	add.w	r1, sp, #7
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	4798      	blx	r3
 800df16:	b128      	cbz	r0, 800df24 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800df18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df1a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800df1e:	6803      	ldr	r3, [r0, #0]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	4798      	blx	r3
 800df24:	f104 001c 	add.w	r0, r4, #28
 800df28:	f00d fc64 	bl	801b7f4 <_ZN8touchgfx8Gestures4tickEv>
 800df2c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800df30:	b30b      	cbz	r3, 800df76 <_ZN8touchgfx3HAL4tickEv+0x136>
 800df32:	6920      	ldr	r0, [r4, #16]
 800df34:	6803      	ldr	r3, [r0, #0]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	4798      	blx	r3
 800df3a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800df3c:	4606      	mov	r6, r0
 800df3e:	b903      	cbnz	r3, 800df42 <_ZN8touchgfx3HAL4tickEv+0x102>
 800df40:	6720      	str	r0, [r4, #112]	; 0x70
 800df42:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800df44:	4a1e      	ldr	r2, [pc, #120]	; (800dfc0 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800df46:	1af3      	subs	r3, r6, r3
 800df48:	4293      	cmp	r3, r2
 800df4a:	d914      	bls.n	800df76 <_ZN8touchgfx3HAL4tickEv+0x136>
 800df4c:	6920      	ldr	r0, [r4, #16]
 800df4e:	6803      	ldr	r3, [r0, #0]
 800df50:	699b      	ldr	r3, [r3, #24]
 800df52:	4798      	blx	r3
 800df54:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800df56:	2264      	movs	r2, #100	; 0x64
 800df58:	1af3      	subs	r3, r6, r3
 800df5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800df5e:	fbb0 f0f3 	udiv	r0, r0, r3
 800df62:	2800      	cmp	r0, #0
 800df64:	dc1e      	bgt.n	800dfa4 <_ZN8touchgfx3HAL4tickEv+0x164>
 800df66:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800df6a:	6920      	ldr	r0, [r4, #16]
 800df6c:	2100      	movs	r1, #0
 800df6e:	6803      	ldr	r3, [r0, #0]
 800df70:	69db      	ldr	r3, [r3, #28]
 800df72:	4798      	blx	r3
 800df74:	6726      	str	r6, [r4, #112]	; 0x70
 800df76:	f002 fd15 	bl	80109a4 <_ZN8touchgfx11Application11getInstanceEv>
 800df7a:	6803      	ldr	r3, [r0, #0]
 800df7c:	2100      	movs	r1, #0
 800df7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df80:	4798      	blx	r3
 800df82:	6823      	ldr	r3, [r4, #0]
 800df84:	4620      	mov	r0, r4
 800df86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800df8a:	4798      	blx	r3
 800df8c:	2001      	movs	r0, #1
 800df8e:	f7f3 fd8e 	bl	8001aae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800df92:	2300      	movs	r3, #0
 800df94:	702b      	strb	r3, [r5, #0]
 800df96:	b004      	add	sp, #16
 800df98:	bd70      	pop	{r4, r5, r6, pc}
 800df9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4798      	blx	r3
 800dfa2:	e7ae      	b.n	800df02 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800dfa4:	2863      	cmp	r0, #99	; 0x63
 800dfa6:	bfcb      	itete	gt
 800dfa8:	2300      	movgt	r3, #0
 800dfaa:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800dfae:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800dfb2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800dfb6:	e7d8      	b.n	800df6a <_ZN8touchgfx3HAL4tickEv+0x12a>
 800dfb8:	2000df70 	.word	0x2000df70
 800dfbc:	2000df71 	.word	0x2000df71
 800dfc0:	05f5e100 	.word	0x05f5e100

0800dfc4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800dfc4:	f7f3 bfbe 	b.w	8001f44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800dfc8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800dfc8:	6581      	str	r1, [r0, #88]	; 0x58
 800dfca:	301c      	adds	r0, #28
 800dfcc:	f00d bc10 	b.w	801b7f0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800dfd0 <_ZN8touchgfx3HAL5touchEll>:
 800dfd0:	b530      	push	{r4, r5, lr}
 800dfd2:	b087      	sub	sp, #28
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	a804      	add	r0, sp, #16
 800dfd8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dfdc:	f002 faac 	bl	8010538 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800dfe0:	9b04      	ldr	r3, [sp, #16]
 800dfe2:	a906      	add	r1, sp, #24
 800dfe4:	a803      	add	r0, sp, #12
 800dfe6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dfea:	9b05      	ldr	r3, [sp, #20]
 800dfec:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800dff0:	f002 fae0 	bl	80105b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800dff4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800dff8:	f104 001c 	add.w	r0, r4, #28
 800dffc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e000:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e004:	b189      	cbz	r1, 800e02a <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e006:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800e00a:	9300      	str	r3, [sp, #0]
 800e00c:	4613      	mov	r3, r2
 800e00e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800e012:	462a      	mov	r2, r5
 800e014:	f00d fbfc 	bl	801b810 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e018:	b128      	cbz	r0, 800e026 <_ZN8touchgfx3HAL5touchEll+0x56>
 800e01a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e01e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e020:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e024:	6623      	str	r3, [r4, #96]	; 0x60
 800e026:	b007      	add	sp, #28
 800e028:	bd30      	pop	{r4, r5, pc}
 800e02a:	f00d fc35 	bl	801b898 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e02e:	2301      	movs	r3, #1
 800e030:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e034:	e7f1      	b.n	800e01a <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e036 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e036:	b570      	push	{r4, r5, r6, lr}
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d050      	beq.n	800e0de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800e03c:	ea81 0002 	eor.w	r0, r1, r2
 800e040:	07c6      	lsls	r6, r0, #31
 800e042:	d508      	bpl.n	800e056 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e044:	3a01      	subs	r2, #1
 800e046:	18cc      	adds	r4, r1, r3
 800e048:	42a1      	cmp	r1, r4
 800e04a:	d048      	beq.n	800e0de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800e04c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e050:	f801 0b01 	strb.w	r0, [r1], #1
 800e054:	e7f8      	b.n	800e048 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e056:	07d5      	lsls	r5, r2, #31
 800e058:	bf42      	ittt	mi
 800e05a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e05e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e062:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e066:	2b01      	cmp	r3, #1
 800e068:	d915      	bls.n	800e096 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800e06a:	ea82 0001 	eor.w	r0, r2, r1
 800e06e:	0784      	lsls	r4, r0, #30
 800e070:	d02d      	beq.n	800e0ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 800e072:	1e94      	subs	r4, r2, #2
 800e074:	4608      	mov	r0, r1
 800e076:	18ce      	adds	r6, r1, r3
 800e078:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 800e07c:	f820 5b02 	strh.w	r5, [r0], #2
 800e080:	1a35      	subs	r5, r6, r0
 800e082:	2d01      	cmp	r5, #1
 800e084:	d8f8      	bhi.n	800e078 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 800e086:	1e98      	subs	r0, r3, #2
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	f020 0001 	bic.w	r0, r0, #1
 800e090:	3002      	adds	r0, #2
 800e092:	4401      	add	r1, r0
 800e094:	4402      	add	r2, r0
 800e096:	1f14      	subs	r4, r2, #4
 800e098:	4608      	mov	r0, r1
 800e09a:	18ce      	adds	r6, r1, r3
 800e09c:	1a35      	subs	r5, r6, r0
 800e09e:	2d03      	cmp	r5, #3
 800e0a0:	d810      	bhi.n	800e0c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 800e0a2:	089c      	lsrs	r4, r3, #2
 800e0a4:	00a0      	lsls	r0, r4, #2
 800e0a6:	4401      	add	r1, r0
 800e0a8:	3801      	subs	r0, #1
 800e0aa:	4402      	add	r2, r0
 800e0ac:	f06f 0003 	mvn.w	r0, #3
 800e0b0:	fb00 3404 	mla	r4, r0, r4, r3
 800e0b4:	440c      	add	r4, r1
 800e0b6:	42a1      	cmp	r1, r4
 800e0b8:	d011      	beq.n	800e0de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800e0ba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e0be:	f801 3b01 	strb.w	r3, [r1], #1
 800e0c2:	e7f8      	b.n	800e0b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800e0c4:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800e0c8:	f840 5b04 	str.w	r5, [r0], #4
 800e0cc:	e7e6      	b.n	800e09c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800e0ce:	0790      	lsls	r0, r2, #30
 800e0d0:	d0e1      	beq.n	800e096 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800e0d2:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e0d6:	3b02      	subs	r3, #2
 800e0d8:	f821 0b02 	strh.w	r0, [r1], #2
 800e0dc:	e7db      	b.n	800e096 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800e0de:	2001      	movs	r0, #1
 800e0e0:	bd70      	pop	{r4, r5, r6, pc}

0800e0e2 <_ZN8touchgfx3HAL7noTouchEv>:
 800e0e2:	b510      	push	{r4, lr}
 800e0e4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	b153      	cbz	r3, 800e102 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e0ec:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800e0f0:	2101      	movs	r1, #1
 800e0f2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800e0f6:	301c      	adds	r0, #28
 800e0f8:	f00d fbce 	bl	801b898 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e102:	bd10      	pop	{r4, pc}

0800e104 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e108:	4604      	mov	r4, r0
 800e10a:	6980      	ldr	r0, [r0, #24]
 800e10c:	b085      	sub	sp, #20
 800e10e:	460f      	mov	r7, r1
 800e110:	4690      	mov	r8, r2
 800e112:	4699      	mov	r9, r3
 800e114:	b930      	cbnz	r0, 800e124 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800e116:	4b1c      	ldr	r3, [pc, #112]	; (800e188 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800e118:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800e11c:	4a1b      	ldr	r2, [pc, #108]	; (800e18c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800e11e:	481c      	ldr	r0, [pc, #112]	; (800e190 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800e120:	f00d fc50 	bl	801b9c4 <__assert_func>
 800e124:	ad04      	add	r5, sp, #16
 800e126:	2600      	movs	r6, #0
 800e128:	f845 6d04 	str.w	r6, [r5, #-4]!
 800e12c:	6806      	ldr	r6, [r0, #0]
 800e12e:	9501      	str	r5, [sp, #4]
 800e130:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800e134:	9500      	str	r5, [sp, #0]
 800e136:	6835      	ldr	r5, [r6, #0]
 800e138:	47a8      	blx	r5
 800e13a:	4d16      	ldr	r5, [pc, #88]	; (800e194 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800e13c:	4606      	mov	r6, r0
 800e13e:	f8a5 9000 	strh.w	r9, [r5]
 800e142:	f7f5 ff37 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800e146:	6803      	ldr	r3, [r0, #0]
 800e148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14a:	4798      	blx	r3
 800e14c:	2801      	cmp	r0, #1
 800e14e:	d012      	beq.n	800e176 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800e150:	d306      	bcc.n	800e160 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800e152:	280d      	cmp	r0, #13
 800e154:	d80b      	bhi.n	800e16e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800e156:	4b10      	ldr	r3, [pc, #64]	; (800e198 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800e158:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800e15c:	4a0b      	ldr	r2, [pc, #44]	; (800e18c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800e15e:	e7de      	b.n	800e11e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800e160:	882b      	ldrh	r3, [r5, #0]
 800e162:	fb08 7203 	mla	r2, r8, r3, r7
 800e166:	9b03      	ldr	r3, [sp, #12]
 800e168:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e16c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e16e:	4630      	mov	r0, r6
 800e170:	b005      	add	sp, #20
 800e172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e176:	882a      	ldrh	r2, [r5, #0]
 800e178:	9b03      	ldr	r3, [sp, #12]
 800e17a:	fb08 7202 	mla	r2, r8, r2, r7
 800e17e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e182:	1a9a      	subs	r2, r3, r2
 800e184:	63e2      	str	r2, [r4, #60]	; 0x3c
 800e186:	e7f2      	b.n	800e16e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800e188:	0801e1ec 	.word	0x0801e1ec
 800e18c:	0801e571 	.word	0x0801e571
 800e190:	0801e231 	.word	0x0801e231
 800e194:	2000df66 	.word	0x2000df66
 800e198:	0801e257 	.word	0x0801e257

0800e19c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800e19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e19e:	b08b      	sub	sp, #44	; 0x2c
 800e1a0:	4617      	mov	r7, r2
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	460e      	mov	r6, r1
 800e1a6:	461d      	mov	r5, r3
 800e1a8:	f7f5 ff04 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800e1ac:	6803      	ldr	r3, [r0, #0]
 800e1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b0:	4798      	blx	r3
 800e1b2:	4b0f      	ldr	r3, [pc, #60]	; (800e1f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 800e1b4:	6822      	ldr	r2, [r4, #0]
 800e1b6:	4631      	mov	r1, r6
 800e1b8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	4620      	mov	r0, r4
 800e1c0:	9306      	str	r3, [sp, #24]
 800e1c2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e1c6:	9305      	str	r3, [sp, #20]
 800e1c8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e1cc:	9304      	str	r3, [sp, #16]
 800e1ce:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e1d2:	9303      	str	r3, [sp, #12]
 800e1d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e1d8:	9302      	str	r3, [sp, #8]
 800e1da:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e1de:	e9cd 5300 	strd	r5, r3, [sp]
 800e1e2:	463b      	mov	r3, r7
 800e1e4:	6b95      	ldr	r5, [r2, #56]	; 0x38
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	47a8      	blx	r5
 800e1ea:	b00b      	add	sp, #44	; 0x2c
 800e1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	2000df66 	.word	0x2000df66

0800e1f4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800e1f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1f8:	4698      	mov	r8, r3
 800e1fa:	6803      	ldr	r3, [r0, #0]
 800e1fc:	b08b      	sub	sp, #44	; 0x2c
 800e1fe:	4617      	mov	r7, r2
 800e200:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800e202:	460e      	mov	r6, r1
 800e204:	4b11      	ldr	r3, [pc, #68]	; (800e24c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 800e206:	4604      	mov	r4, r0
 800e208:	f8b3 9000 	ldrh.w	r9, [r3]
 800e20c:	f7f5 fed2 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800e210:	6803      	ldr	r3, [r0, #0]
 800e212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e214:	4798      	blx	r3
 800e216:	2302      	movs	r3, #2
 800e218:	9008      	str	r0, [sp, #32]
 800e21a:	2200      	movs	r2, #0
 800e21c:	4631      	mov	r1, r6
 800e21e:	4620      	mov	r0, r4
 800e220:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800e224:	2301      	movs	r3, #1
 800e226:	9305      	str	r3, [sp, #20]
 800e228:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e22c:	9304      	str	r3, [sp, #16]
 800e22e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e232:	9303      	str	r3, [sp, #12]
 800e234:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e238:	9302      	str	r3, [sp, #8]
 800e23a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e23e:	e9cd 8300 	strd	r8, r3, [sp]
 800e242:	463b      	mov	r3, r7
 800e244:	47a8      	blx	r5
 800e246:	b00b      	add	sp, #44	; 0x2c
 800e248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e24c:	2000df66 	.word	0x2000df66

0800e250 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800e250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e254:	4698      	mov	r8, r3
 800e256:	6803      	ldr	r3, [r0, #0]
 800e258:	b087      	sub	sp, #28
 800e25a:	460e      	mov	r6, r1
 800e25c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800e25e:	4617      	mov	r7, r2
 800e260:	4b0d      	ldr	r3, [pc, #52]	; (800e298 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 800e262:	4604      	mov	r4, r0
 800e264:	f8b3 9000 	ldrh.w	r9, [r3]
 800e268:	f7f5 fea4 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800e26c:	6803      	ldr	r3, [r0, #0]
 800e26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e270:	4798      	blx	r3
 800e272:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800e276:	463a      	mov	r2, r7
 800e278:	4631      	mov	r1, r6
 800e27a:	9302      	str	r3, [sp, #8]
 800e27c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800e286:	e9cd 9003 	strd	r9, r0, [sp, #12]
 800e28a:	9300      	str	r3, [sp, #0]
 800e28c:	4620      	mov	r0, r4
 800e28e:	4643      	mov	r3, r8
 800e290:	47a8      	blx	r5
 800e292:	b007      	add	sp, #28
 800e294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e298:	2000df66 	.word	0x2000df66

0800e29c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	b08f      	sub	sp, #60	; 0x3c
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	460d      	mov	r5, r1
 800e2a8:	4691      	mov	r9, r2
 800e2aa:	461e      	mov	r6, r3
 800e2ac:	f004 ff68 	bl	8013180 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	f000 80b3 	beq.w	800e41c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f8df b190 	ldr.w	fp, [pc, #400]	; 800e44c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 800e2be:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c4:	4798      	blx	r3
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f8df a184 	ldr.w	sl, [pc, #388]	; 800e450 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800e2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d0:	4798      	blx	r3
 800e2d2:	f8bb 3000 	ldrh.w	r3, [fp]
 800e2d6:	4f5a      	ldr	r7, [pc, #360]	; (800e440 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	f8ba 3000 	ldrh.w	r3, [sl]
 800e2de:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e2e2:	4640      	mov	r0, r8
 800e2e4:	9301      	str	r3, [sp, #4]
 800e2e6:	883b      	ldrh	r3, [r7, #0]
 800e2e8:	9302      	str	r3, [sp, #8]
 800e2ea:	4b56      	ldr	r3, [pc, #344]	; (800e444 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e2ec:	881a      	ldrh	r2, [r3, #0]
 800e2ee:	9304      	str	r3, [sp, #16]
 800e2f0:	9203      	str	r2, [sp, #12]
 800e2f2:	f004 ffff 	bl	80132f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e2f6:	8038      	strh	r0, [r7, #0]
 800e2f8:	4640      	mov	r0, r8
 800e2fa:	f005 f835 	bl	8013368 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e2fe:	9b04      	ldr	r3, [sp, #16]
 800e300:	8018      	strh	r0, [r3, #0]
 800e302:	4b51      	ldr	r3, [pc, #324]	; (800e448 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	f040 808b 	bne.w	800e422 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 800e30c:	883b      	ldrh	r3, [r7, #0]
 800e30e:	f8aa 0000 	strh.w	r0, [sl]
 800e312:	f8ab 3000 	strh.w	r3, [fp]
 800e316:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e318:	4648      	mov	r0, r9
 800e31a:	6c27      	ldr	r7, [r4, #64]	; 0x40
 800e31c:	9304      	str	r3, [sp, #16]
 800e31e:	f004 ff2f 	bl	8013180 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e322:	2200      	movs	r2, #0
 800e324:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800e328:	4611      	mov	r1, r2
 800e32a:	4628      	mov	r0, r5
 800e32c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e330:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e334:	f7f6 fd28 	bl	8004d88 <_ZN8touchgfx8Drawable5setXYEss>
 800e338:	2301      	movs	r3, #1
 800e33a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800e33e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e342:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	dd71      	ble.n	800e42e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 800e34a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	dd6d      	ble.n	800e42e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 800e352:	462a      	mov	r2, r5
 800e354:	ab0a      	add	r3, sp, #40	; 0x28
 800e356:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e35a:	6851      	ldr	r1, [r2, #4]
 800e35c:	c303      	stmia	r3!, {r0, r1}
 800e35e:	4631      	mov	r1, r6
 800e360:	a80a      	add	r0, sp, #40	; 0x28
 800e362:	f7ff fbe5 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 800e366:	4b36      	ldr	r3, [pc, #216]	; (800e440 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 800e368:	2600      	movs	r6, #0
 800e36a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e36e:	4b35      	ldr	r3, [pc, #212]	; (800e444 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e370:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e374:	aa0a      	add	r2, sp, #40	; 0x28
 800e376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e37a:	960c      	str	r6, [sp, #48]	; 0x30
 800e37c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e380:	ab08      	add	r3, sp, #32
 800e382:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e386:	e883 0003 	stmia.w	r3, {r0, r1}
 800e38a:	4618      	mov	r0, r3
 800e38c:	a90c      	add	r1, sp, #48	; 0x30
 800e38e:	f7ff fbcf 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 800e392:	a807      	add	r0, sp, #28
 800e394:	f005 f906 	bl	80135a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e398:	4680      	mov	r8, r0
 800e39a:	f7f5 fe0b 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800e39e:	6802      	ldr	r2, [r0, #0]
 800e3a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e3a2:	4790      	blx	r2
 800e3a4:	4580      	cmp	r8, r0
 800e3a6:	d049      	beq.n	800e43c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 800e3a8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e3aa:	b150      	cbz	r0, 800e3c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 800e3ac:	a807      	add	r0, sp, #28
 800e3ae:	f005 f8f9 	bl	80135a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e3b2:	4606      	mov	r6, r0
 800e3b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e3b6:	6803      	ldr	r3, [r0, #0]
 800e3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ba:	4798      	blx	r3
 800e3bc:	1a33      	subs	r3, r6, r0
 800e3be:	4258      	negs	r0, r3
 800e3c0:	4158      	adcs	r0, r3
 800e3c2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800e3c6:	2600      	movs	r6, #0
 800e3c8:	696b      	ldr	r3, [r5, #20]
 800e3ca:	a908      	add	r1, sp, #32
 800e3cc:	682a      	ldr	r2, [r5, #0]
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	9305      	str	r3, [sp, #20]
 800e3d2:	616e      	str	r6, [r5, #20]
 800e3d4:	6892      	ldr	r2, [r2, #8]
 800e3d6:	4790      	blx	r2
 800e3d8:	9b05      	ldr	r3, [sp, #20]
 800e3da:	4652      	mov	r2, sl
 800e3dc:	4649      	mov	r1, r9
 800e3de:	616b      	str	r3, [r5, #20]
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800e3e6:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800e3ea:	f7f6 fccd 	bl	8004d88 <_ZN8touchgfx8Drawable5setXYEss>
 800e3ee:	9b04      	ldr	r3, [sp, #16]
 800e3f0:	9a00      	ldr	r2, [sp, #0]
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 800e3f8:	4b14      	ldr	r3, [pc, #80]	; (800e44c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e3fa:	801a      	strh	r2, [r3, #0]
 800e3fc:	9a01      	ldr	r2, [sp, #4]
 800e3fe:	4b14      	ldr	r3, [pc, #80]	; (800e450 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e400:	801a      	strh	r2, [r3, #0]
 800e402:	9a02      	ldr	r2, [sp, #8]
 800e404:	4b0e      	ldr	r3, [pc, #56]	; (800e440 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 800e406:	801a      	strh	r2, [r3, #0]
 800e408:	4b0e      	ldr	r3, [pc, #56]	; (800e444 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e40a:	9a03      	ldr	r2, [sp, #12]
 800e40c:	801a      	strh	r2, [r3, #0]
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e412:	4798      	blx	r3
 800e414:	6823      	ldr	r3, [r4, #0]
 800e416:	4620      	mov	r0, r4
 800e418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e41a:	4798      	blx	r3
 800e41c:	b00f      	add	sp, #60	; 0x3c
 800e41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e422:	883b      	ldrh	r3, [r7, #0]
 800e424:	f8ab 0000 	strh.w	r0, [fp]
 800e428:	f8aa 3000 	strh.w	r3, [sl]
 800e42c:	e773      	b.n	800e316 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800e42e:	462a      	mov	r2, r5
 800e430:	ab0a      	add	r3, sp, #40	; 0x28
 800e432:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e436:	6851      	ldr	r1, [r2, #4]
 800e438:	c303      	stmia	r3!, {r0, r1}
 800e43a:	e794      	b.n	800e366 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 800e43c:	4630      	mov	r0, r6
 800e43e:	e7c0      	b.n	800e3c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 800e440:	2000df60 	.word	0x2000df60
 800e444:	2000df62 	.word	0x2000df62
 800e448:	2000df64 	.word	0x2000df64
 800e44c:	2000df66 	.word	0x2000df66
 800e450:	2000df68 	.word	0x2000df68

0800e454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e454:	4b07      	ldr	r3, [pc, #28]	; (800e474 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e456:	b510      	push	{r4, lr}
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	4604      	mov	r4, r0
 800e45c:	b13b      	cbz	r3, 800e46e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e45e:	6803      	ldr	r3, [r0, #0]
 800e460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e462:	4798      	blx	r3
 800e464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e466:	4283      	cmp	r3, r0
 800e468:	d101      	bne.n	800e46e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e46a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e46c:	bd10      	pop	{r4, pc}
 800e46e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e470:	e7fc      	b.n	800e46c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e472:	bf00      	nop
 800e474:	2000df6a 	.word	0x2000df6a

0800e478 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e47c:	b088      	sub	sp, #32
 800e47e:	4692      	mov	sl, r2
 800e480:	461c      	mov	r4, r3
 800e482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e486:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800e48a:	2500      	movs	r5, #0
 800e48c:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800e490:	4606      	mov	r6, r0
 800e492:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800e496:	fb09 a404 	mla	r4, r9, r4, sl
 800e49a:	9503      	str	r5, [sp, #12]
 800e49c:	f8ad 8014 	strh.w	r8, [sp, #20]
 800e4a0:	f8ad 7016 	strh.w	r7, [sp, #22]
 800e4a4:	f88d 501c 	strb.w	r5, [sp, #28]
 800e4a8:	e9cd 3100 	strd	r3, r1, [sp]
 800e4ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e4b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e4b4:	f7ff ffce 	bl	800e454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e4b8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800e4bc:	f8ad 901a 	strh.w	r9, [sp, #26]
 800e4c0:	f88d 501e 	strb.w	r5, [sp, #30]
 800e4c4:	9404      	str	r4, [sp, #16]
 800e4c6:	f88d 501d 	strb.w	r5, [sp, #29]
 800e4ca:	f1b8 0f00 	cmp.w	r8, #0
 800e4ce:	d000      	beq.n	800e4d2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 800e4d0:	b937      	cbnz	r7, 800e4e0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	; (800e508 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 800e4d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e4d8:	4a0c      	ldr	r2, [pc, #48]	; (800e50c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800e4da:	480d      	ldr	r0, [pc, #52]	; (800e510 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800e4dc:	f00d fa72 	bl	801b9c4 <__assert_func>
 800e4e0:	6833      	ldr	r3, [r6, #0]
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	9c00      	ldr	r4, [sp, #0]
 800e4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e8:	4798      	blx	r3
 800e4ea:	4220      	tst	r0, r4
 800e4ec:	d104      	bne.n	800e4f8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 800e4ee:	4b09      	ldr	r3, [pc, #36]	; (800e514 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800e4f0:	f240 2105 	movw	r1, #517	; 0x205
 800e4f4:	4a05      	ldr	r2, [pc, #20]	; (800e50c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800e4f6:	e7f0      	b.n	800e4da <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 800e4f8:	6870      	ldr	r0, [r6, #4]
 800e4fa:	4669      	mov	r1, sp
 800e4fc:	6803      	ldr	r3, [r0, #0]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	4798      	blx	r3
 800e502:	b008      	add	sp, #32
 800e504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e508:	0801e07f 	.word	0x0801e07f
 800e50c:	0801e3ac 	.word	0x0801e3ac
 800e510:	0801e231 	.word	0x0801e231
 800e514:	0801e0b7 	.word	0x0801e0b7

0800e518 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	b089      	sub	sp, #36	; 0x24
 800e51e:	4693      	mov	fp, r2
 800e520:	461d      	mov	r5, r3
 800e522:	2400      	movs	r4, #0
 800e524:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800e528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e52c:	468a      	mov	sl, r1
 800e52e:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800e532:	fb09 b505 	mla	r5, r9, r5, fp
 800e536:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800e53a:	4606      	mov	r6, r0
 800e53c:	9403      	str	r4, [sp, #12]
 800e53e:	e9cd 3400 	strd	r3, r4, [sp]
 800e542:	f7ff ff87 	bl	800e454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e546:	f8ad 8014 	strh.w	r8, [sp, #20]
 800e54a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e54e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800e552:	f8ad 4018 	strh.w	r4, [sp, #24]
 800e556:	9504      	str	r5, [sp, #16]
 800e558:	f8ad 901a 	strh.w	r9, [sp, #26]
 800e55c:	f8cd a00c 	str.w	sl, [sp, #12]
 800e560:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e564:	f88d 401e 	strb.w	r4, [sp, #30]
 800e568:	f1b8 0f00 	cmp.w	r8, #0
 800e56c:	d000      	beq.n	800e570 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 800e56e:	b937      	cbnz	r7, 800e57e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 800e570:	4b0d      	ldr	r3, [pc, #52]	; (800e5a8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 800e572:	f240 2119 	movw	r1, #537	; 0x219
 800e576:	4a0d      	ldr	r2, [pc, #52]	; (800e5ac <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800e578:	480d      	ldr	r0, [pc, #52]	; (800e5b0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800e57a:	f00d fa23 	bl	801b9c4 <__assert_func>
 800e57e:	6833      	ldr	r3, [r6, #0]
 800e580:	4630      	mov	r0, r6
 800e582:	9c00      	ldr	r4, [sp, #0]
 800e584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e586:	4798      	blx	r3
 800e588:	4220      	tst	r0, r4
 800e58a:	d104      	bne.n	800e596 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 800e58c:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800e58e:	f240 211a 	movw	r1, #538	; 0x21a
 800e592:	4a06      	ldr	r2, [pc, #24]	; (800e5ac <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800e594:	e7f0      	b.n	800e578 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 800e596:	6870      	ldr	r0, [r6, #4]
 800e598:	4669      	mov	r1, sp
 800e59a:	6803      	ldr	r3, [r0, #0]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	4798      	blx	r3
 800e5a0:	b009      	add	sp, #36	; 0x24
 800e5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a6:	bf00      	nop
 800e5a8:	0801e0fc 	.word	0x0801e0fc
 800e5ac:	0801e422 	.word	0x0801e422
 800e5b0:	0801e231 	.word	0x0801e231
 800e5b4:	0801e134 	.word	0x0801e134

0800e5b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800e5b8:	b508      	push	{r3, lr}
 800e5ba:	290d      	cmp	r1, #13
 800e5bc:	d817      	bhi.n	800e5ee <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800e5be:	e8df f001 	tbb	[pc, r1]
 800e5c2:	090b      	.short	0x090b
 800e5c4:	0d0d0d07 	.word	0x0d0d0d07
 800e5c8:	1414140d 	.word	0x1414140d
 800e5cc:	0d0d1414 	.word	0x0d0d1414
 800e5d0:	2020      	movs	r0, #32
 800e5d2:	bd08      	pop	{r3, pc}
 800e5d4:	2018      	movs	r0, #24
 800e5d6:	e7fc      	b.n	800e5d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e5d8:	2010      	movs	r0, #16
 800e5da:	e7fa      	b.n	800e5d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e5dc:	4b05      	ldr	r3, [pc, #20]	; (800e5f4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800e5de:	f240 2177 	movw	r1, #631	; 0x277
 800e5e2:	4a05      	ldr	r2, [pc, #20]	; (800e5f8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800e5e4:	4805      	ldr	r0, [pc, #20]	; (800e5fc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800e5e6:	f00d f9ed 	bl	801b9c4 <__assert_func>
 800e5ea:	2008      	movs	r0, #8
 800e5ec:	e7f1      	b.n	800e5d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	e7ef      	b.n	800e5d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e5f2:	bf00      	nop
 800e5f4:	0801e2ad 	.word	0x0801e2ad
 800e5f8:	0801e73b 	.word	0x0801e73b
 800e5fc:	0801e231 	.word	0x0801e231

0800e600 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800e600:	b570      	push	{r4, r5, r6, lr}
 800e602:	460d      	mov	r5, r1
 800e604:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800e608:	4616      	mov	r6, r2
 800e60a:	461c      	mov	r4, r3
 800e60c:	f7ff ffd4 	bl	800e5b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800e610:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800e614:	10c0      	asrs	r0, r0, #3
 800e616:	fb06 5101 	mla	r1, r6, r1, r5
 800e61a:	fb00 4001 	mla	r0, r0, r1, r4
 800e61e:	bd70      	pop	{r4, r5, r6, pc}

0800e620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 800e620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e624:	b08a      	sub	sp, #40	; 0x28
 800e626:	f04f 0c00 	mov.w	ip, #0
 800e62a:	4604      	mov	r4, r0
 800e62c:	469a      	mov	sl, r3
 800e62e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800e632:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800e636:	2d0b      	cmp	r5, #11
 800e638:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800e63c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e640:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800e644:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800e648:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800e64c:	f8cd c014 	str.w	ip, [sp, #20]
 800e650:	d129      	bne.n	800e6a6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 800e652:	2080      	movs	r0, #128	; 0x80
 800e654:	9204      	str	r2, [sp, #16]
 800e656:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800e65a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e65e:	f8ad 2020 	strh.w	r2, [sp, #32]
 800e662:	f8ad 701c 	strh.w	r7, [sp, #28]
 800e666:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e66a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e66e:	4620      	mov	r0, r4
 800e670:	f7ff fef0 	bl	800e454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e674:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800e678:	4603      	mov	r3, r0
 800e67a:	4651      	mov	r1, sl
 800e67c:	4620      	mov	r0, r4
 800e67e:	e9cd 9800 	strd	r9, r8, [sp]
 800e682:	f7ff ffbd 	bl	800e600 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e686:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800e68a:	9006      	str	r0, [sp, #24]
 800e68c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800e690:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800e694:	b107      	cbz	r7, 800e698 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 800e696:	b9d6      	cbnz	r6, 800e6ce <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 800e698:	4b17      	ldr	r3, [pc, #92]	; (800e6f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800e69a:	f240 11cf 	movw	r1, #463	; 0x1cf
 800e69e:	4a17      	ldr	r2, [pc, #92]	; (800e6fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800e6a0:	4817      	ldr	r0, [pc, #92]	; (800e700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 800e6a2:	f00d f98f 	bl	801b9c4 <__assert_func>
 800e6a6:	2d02      	cmp	r5, #2
 800e6a8:	d108      	bne.n	800e6bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 800e6aa:	2bff      	cmp	r3, #255	; 0xff
 800e6ac:	d104      	bne.n	800e6b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	bf14      	ite	ne
 800e6b2:	2040      	movne	r0, #64	; 0x40
 800e6b4:	2020      	moveq	r0, #32
 800e6b6:	e7cd      	b.n	800e654 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 800e6b8:	2040      	movs	r0, #64	; 0x40
 800e6ba:	e7cb      	b.n	800e654 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 800e6bc:	2bff      	cmp	r3, #255	; 0xff
 800e6be:	d104      	bne.n	800e6ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	bf14      	ite	ne
 800e6c4:	2004      	movne	r0, #4
 800e6c6:	2001      	moveq	r0, #1
 800e6c8:	e7c4      	b.n	800e654 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 800e6ca:	2004      	movs	r0, #4
 800e6cc:	e7c2      	b.n	800e654 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 800e6ce:	6823      	ldr	r3, [r4, #0]
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	9d02      	ldr	r5, [sp, #8]
 800e6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d6:	4798      	blx	r3
 800e6d8:	4228      	tst	r0, r5
 800e6da:	d104      	bne.n	800e6e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 800e6dc:	4b09      	ldr	r3, [pc, #36]	; (800e704 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 800e6de:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800e6e2:	4a06      	ldr	r2, [pc, #24]	; (800e6fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800e6e4:	e7dc      	b.n	800e6a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 800e6e6:	6860      	ldr	r0, [r4, #4]
 800e6e8:	a902      	add	r1, sp, #8
 800e6ea:	6803      	ldr	r3, [r0, #0]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	4798      	blx	r3
 800e6f0:	b00a      	add	sp, #40	; 0x28
 800e6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6f6:	bf00      	nop
 800e6f8:	0801e07f 	.word	0x0801e07f
 800e6fc:	0801e5d5 	.word	0x0801e5d5
 800e700:	0801e231 	.word	0x0801e231
 800e704:	0801e0b7 	.word	0x0801e0b7

0800e708 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 800e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	b08b      	sub	sp, #44	; 0x2c
 800e70e:	469b      	mov	fp, r3
 800e710:	4604      	mov	r4, r0
 800e712:	4692      	mov	sl, r2
 800e714:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800e718:	2600      	movs	r6, #0
 800e71a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800e71e:	4689      	mov	r9, r1
 800e720:	2fff      	cmp	r7, #255	; 0xff
 800e722:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800e726:	9605      	str	r6, [sp, #20]
 800e728:	bf14      	ite	ne
 800e72a:	2308      	movne	r3, #8
 800e72c:	2302      	moveq	r3, #2
 800e72e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800e732:	f7ff fe8f 	bl	800e454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e736:	465a      	mov	r2, fp
 800e738:	4603      	mov	r3, r0
 800e73a:	4651      	mov	r1, sl
 800e73c:	4620      	mov	r0, r4
 800e73e:	e9cd 8500 	strd	r8, r5, [sp]
 800e742:	f7ff ff5d 	bl	800e600 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e746:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e74a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800e74e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e752:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800e756:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800e75a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e75e:	6823      	ldr	r3, [r4, #0]
 800e760:	9d02      	ldr	r5, [sp, #8]
 800e762:	9006      	str	r0, [sp, #24]
 800e764:	4620      	mov	r0, r4
 800e766:	f8ad 6020 	strh.w	r6, [sp, #32]
 800e76a:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800e76e:	f8cd 9014 	str.w	r9, [sp, #20]
 800e772:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800e776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e778:	4798      	blx	r3
 800e77a:	4228      	tst	r0, r5
 800e77c:	d106      	bne.n	800e78c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 800e77e:	4b07      	ldr	r3, [pc, #28]	; (800e79c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 800e780:	f240 212e 	movw	r1, #558	; 0x22e
 800e784:	4a06      	ldr	r2, [pc, #24]	; (800e7a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 800e786:	4807      	ldr	r0, [pc, #28]	; (800e7a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 800e788:	f00d f91c 	bl	801b9c4 <__assert_func>
 800e78c:	6860      	ldr	r0, [r4, #4]
 800e78e:	a902      	add	r1, sp, #8
 800e790:	6803      	ldr	r3, [r0, #0]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	4798      	blx	r3
 800e796:	b00b      	add	sp, #44	; 0x2c
 800e798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e79c:	0801e0b7 	.word	0x0801e0b7
 800e7a0:	0801e6a6 	.word	0x0801e6a6
 800e7a4:	0801e231 	.word	0x0801e231

0800e7a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e7a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e7ac:	461f      	mov	r7, r3
 800e7ae:	4b0b      	ldr	r3, [pc, #44]	; (800e7dc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e7b0:	460d      	mov	r5, r1
 800e7b2:	4616      	mov	r6, r2
 800e7b4:	f8b3 8000 	ldrh.w	r8, [r3]
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	f7f5 fbfb 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800e7be:	6803      	ldr	r3, [r0, #0]
 800e7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c2:	4798      	blx	r3
 800e7c4:	463b      	mov	r3, r7
 800e7c6:	4632      	mov	r2, r6
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	e9cd 8000 	strd	r8, r0, [sp]
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f7ff ff16 	bl	800e600 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e7d4:	b002      	add	sp, #8
 800e7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7da:	bf00      	nop
 800e7dc:	2000df66 	.word	0x2000df66

0800e7e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 800e7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e4:	4698      	mov	r8, r3
 800e7e6:	b088      	sub	sp, #32
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	4617      	mov	r7, r2
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800e7f2:	9303      	str	r3, [sp, #12]
 800e7f4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e7f8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800e7fc:	f8ad 6014 	strh.w	r6, [sp, #20]
 800e800:	f8ad 5016 	strh.w	r5, [sp, #22]
 800e804:	e9cd 3100 	strd	r3, r1, [sp]
 800e808:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e80c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e810:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800e814:	f88d 301c 	strb.w	r3, [sp, #28]
 800e818:	f7ff fe1c 	bl	800e454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e81c:	4642      	mov	r2, r8
 800e81e:	4603      	mov	r3, r0
 800e820:	4639      	mov	r1, r7
 800e822:	4620      	mov	r0, r4
 800e824:	f7ff ffc0 	bl	800e7a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e828:	4b16      	ldr	r3, [pc, #88]	; (800e884 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800e82a:	9004      	str	r0, [sp, #16]
 800e82c:	881b      	ldrh	r3, [r3, #0]
 800e82e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e832:	f7f5 fbbf 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800e836:	6803      	ldr	r3, [r0, #0]
 800e838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e83a:	4798      	blx	r3
 800e83c:	f88d 001e 	strb.w	r0, [sp, #30]
 800e840:	f88d 001d 	strb.w	r0, [sp, #29]
 800e844:	b106      	cbz	r6, 800e848 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800e846:	b935      	cbnz	r5, 800e856 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 800e848:	4b0f      	ldr	r3, [pc, #60]	; (800e888 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800e84a:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800e84e:	4a0f      	ldr	r2, [pc, #60]	; (800e88c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800e850:	480f      	ldr	r0, [pc, #60]	; (800e890 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800e852:	f00d f8b7 	bl	801b9c4 <__assert_func>
 800e856:	6823      	ldr	r3, [r4, #0]
 800e858:	4620      	mov	r0, r4
 800e85a:	9d00      	ldr	r5, [sp, #0]
 800e85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e85e:	4798      	blx	r3
 800e860:	4228      	tst	r0, r5
 800e862:	d104      	bne.n	800e86e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800e864:	4b0b      	ldr	r3, [pc, #44]	; (800e894 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 800e866:	f240 11ed 	movw	r1, #493	; 0x1ed
 800e86a:	4a08      	ldr	r2, [pc, #32]	; (800e88c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800e86c:	e7f0      	b.n	800e850 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800e86e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e870:	4669      	mov	r1, sp
 800e872:	6860      	ldr	r0, [r4, #4]
 800e874:	9303      	str	r3, [sp, #12]
 800e876:	6803      	ldr	r3, [r0, #0]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	4798      	blx	r3
 800e87c:	b008      	add	sp, #32
 800e87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e882:	bf00      	nop
 800e884:	2000df66 	.word	0x2000df66
 800e888:	0801e07f 	.word	0x0801e07f
 800e88c:	0801e487 	.word	0x0801e487
 800e890:	0801e231 	.word	0x0801e231
 800e894:	0801e0b7 	.word	0x0801e0b7

0800e898 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e898:	b570      	push	{r4, r5, r6, lr}
 800e89a:	b08a      	sub	sp, #40	; 0x28
 800e89c:	4604      	mov	r4, r0
 800e89e:	466b      	mov	r3, sp
 800e8a0:	e883 0006 	stmia.w	r3, {r1, r2}
 800e8a4:	4b1f      	ldr	r3, [pc, #124]	; (800e924 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	b933      	cbnz	r3, 800e8b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800e8aa:	4b1f      	ldr	r3, [pc, #124]	; (800e928 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800e8ac:	f240 213f 	movw	r1, #575	; 0x23f
 800e8b0:	4a1e      	ldr	r2, [pc, #120]	; (800e92c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800e8b2:	481f      	ldr	r0, [pc, #124]	; (800e930 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800e8b4:	f00d f886 	bl	801b9c4 <__assert_func>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	f8bd 5000 	ldrh.w	r5, [sp]
 800e8be:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800e8c2:	9305      	str	r3, [sp, #20]
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	9302      	str	r3, [sp, #8]
 800e8c8:	6803      	ldr	r3, [r0, #0]
 800e8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8cc:	4798      	blx	r3
 800e8ce:	4632      	mov	r2, r6
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f7ff ff67 	bl	800e7a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e8da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e8dc:	9003      	str	r0, [sp, #12]
 800e8de:	9306      	str	r3, [sp, #24]
 800e8e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e8e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e8e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e8ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e8f0:	4b10      	ldr	r3, [pc, #64]	; (800e934 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800e8f2:	881b      	ldrh	r3, [r3, #0]
 800e8f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e8f8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e8fc:	f7f5 fb5a 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800e900:	6803      	ldr	r3, [r0, #0]
 800e902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e904:	4798      	blx	r3
 800e906:	23ff      	movs	r3, #255	; 0xff
 800e908:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800e90c:	a902      	add	r1, sp, #8
 800e90e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800e912:	6860      	ldr	r0, [r4, #4]
 800e914:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e918:	6803      	ldr	r3, [r0, #0]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	4798      	blx	r3
 800e91e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e920:	b00a      	add	sp, #40	; 0x28
 800e922:	bd70      	pop	{r4, r5, r6, pc}
 800e924:	2000df6b 	.word	0x2000df6b
 800e928:	0801e17e 	.word	0x0801e17e
 800e92c:	0801e52b 	.word	0x0801e52b
 800e930:	0801e231 	.word	0x0801e231
 800e934:	2000df66 	.word	0x2000df66

0800e938 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e93a:	b08b      	sub	sp, #44	; 0x2c
 800e93c:	4604      	mov	r4, r0
 800e93e:	466d      	mov	r5, sp
 800e940:	e885 0006 	stmia.w	r5, {r1, r2}
 800e944:	461d      	mov	r5, r3
 800e946:	2300      	movs	r3, #0
 800e948:	f8bd 6000 	ldrh.w	r6, [sp]
 800e94c:	9305      	str	r3, [sp, #20]
 800e94e:	2301      	movs	r3, #1
 800e950:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e954:	9302      	str	r3, [sp, #8]
 800e956:	6803      	ldr	r3, [r0, #0]
 800e958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e95a:	4798      	blx	r3
 800e95c:	463a      	mov	r2, r7
 800e95e:	4631      	mov	r1, r6
 800e960:	4603      	mov	r3, r0
 800e962:	4620      	mov	r0, r4
 800e964:	f7ff ff20 	bl	800e7a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e968:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e96c:	9003      	str	r0, [sp, #12]
 800e96e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e972:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e976:	9506      	str	r5, [sp, #24]
 800e978:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e97c:	4b0d      	ldr	r3, [pc, #52]	; (800e9b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 800e97e:	881b      	ldrh	r3, [r3, #0]
 800e980:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e986:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e98a:	f7f5 fb13 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 800e98e:	6803      	ldr	r3, [r0, #0]
 800e990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e992:	4798      	blx	r3
 800e994:	23ff      	movs	r3, #255	; 0xff
 800e996:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800e99a:	a902      	add	r1, sp, #8
 800e99c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800e9a0:	6860      	ldr	r0, [r4, #4]
 800e9a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e9a6:	6803      	ldr	r3, [r0, #0]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	4798      	blx	r3
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	b00b      	add	sp, #44	; 0x2c
 800e9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	2000df66 	.word	0x2000df66

0800e9b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e9b8:	b570      	push	{r4, r5, r6, lr}
 800e9ba:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800e9be:	4604      	mov	r4, r0
 800e9c0:	b19b      	cbz	r3, 800e9ea <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e9c2:	2002      	movs	r0, #2
 800e9c4:	f7f3 f87e 	bl	8001ac4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800e9d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800e9d4:	6823      	ldr	r3, [r4, #0]
 800e9d6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800e9da:	f7ff fd3b 	bl	800e454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e9de:	4601      	mov	r1, r0
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	462b      	mov	r3, r5
 800e9e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9e8:	4718      	bx	r3
 800e9ea:	bd70      	pop	{r4, r5, r6, pc}

0800e9ec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	460d      	mov	r5, r1
 800e9f6:	428a      	cmp	r2, r1
 800e9f8:	d008      	beq.n	800ea0c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800e9fa:	2a01      	cmp	r2, #1
 800e9fc:	6803      	ldr	r3, [r0, #0]
 800e9fe:	d106      	bne.n	800ea0e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800ea00:	b929      	cbnz	r1, 800ea0e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800ea02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ea06:	4798      	blx	r3
 800ea08:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800ea0c:	bd38      	pop	{r3, r4, r5, pc}
 800ea0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ea12:	4620      	mov	r0, r4
 800ea14:	e7f7      	b.n	800ea06 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800ea18 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800ea18:	4b0d      	ldr	r3, [pc, #52]	; (800ea50 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800ea1a:	b510      	push	{r4, lr}
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	4604      	mov	r4, r0
 800ea20:	b95b      	cbnz	r3, 800ea3a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ea22:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800ea26:	2b02      	cmp	r3, #2
 800ea28:	d007      	beq.n	800ea3a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ea2a:	6840      	ldr	r0, [r0, #4]
 800ea2c:	f000 f93a 	bl	800eca4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800ea30:	b118      	cbz	r0, 800ea3a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ea32:	6862      	ldr	r2, [r4, #4]
 800ea34:	7a53      	ldrb	r3, [r2, #9]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d0fc      	beq.n	800ea34 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800ea3a:	f7f3 fa75 	bl	8001f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ea3e:	4620      	mov	r0, r4
 800ea40:	2100      	movs	r1, #0
 800ea42:	f7ff ffd3 	bl	800e9ec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ea46:	4620      	mov	r0, r4
 800ea48:	f7ff fd04 	bl	800e454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ea4c:	bd10      	pop	{r4, pc}
 800ea4e:	bf00      	nop
 800ea50:	2000df6a 	.word	0x2000df6a

0800ea54 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800ea54:	4770      	bx	lr

0800ea56 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800ea56:	2000      	movs	r0, #0
 800ea58:	4770      	bx	lr

0800ea5a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800ea5a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800ea5e:	1a13      	subs	r3, r2, r0
 800ea60:	4258      	negs	r0, r3
 800ea62:	4158      	adcs	r0, r3
 800ea64:	4770      	bx	lr

0800ea66 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800ea66:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ea6a:	1a9b      	subs	r3, r3, r2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	bfdc      	itt	le
 800ea70:	6882      	ldrle	r2, [r0, #8]
 800ea72:	189b      	addle	r3, r3, r2
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	bfcc      	ite	gt
 800ea78:	2000      	movgt	r0, #0
 800ea7a:	2001      	movle	r0, #1
 800ea7c:	4770      	bx	lr

0800ea7e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800ea7e:	6902      	ldr	r2, [r0, #16]
 800ea80:	6840      	ldr	r0, [r0, #4]
 800ea82:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800ea86:	4770      	bx	lr

0800ea88 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800ea88:	6803      	ldr	r3, [r0, #0]
 800ea8a:	691b      	ldr	r3, [r3, #16]
 800ea8c:	4718      	bx	r3

0800ea8e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800ea8e:	4770      	bx	lr

0800ea90 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800ea90:	4770      	bx	lr
	...

0800ea94 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800ea94:	2301      	movs	r3, #1
 800ea96:	b570      	push	{r4, r5, r6, lr}
 800ea98:	7203      	strb	r3, [r0, #8]
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	6840      	ldr	r0, [r0, #4]
 800ea9e:	6803      	ldr	r3, [r0, #0]
 800eaa0:	699b      	ldr	r3, [r3, #24]
 800eaa2:	4798      	blx	r3
 800eaa4:	6803      	ldr	r3, [r0, #0]
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	2b40      	cmp	r3, #64	; 0x40
 800eaaa:	d039      	beq.n	800eb20 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800eaac:	d815      	bhi.n	800eada <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800eaae:	2b04      	cmp	r3, #4
 800eab0:	d022      	beq.n	800eaf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800eab2:	d808      	bhi.n	800eac6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d033      	beq.n	800eb20 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800eab8:	2b02      	cmp	r3, #2
 800eaba:	d108      	bne.n	800eace <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	4620      	mov	r0, r4
 800eac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac2:	4798      	blx	r3
 800eac4:	e025      	b.n	800eb12 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800eac6:	2b08      	cmp	r3, #8
 800eac8:	d01e      	beq.n	800eb08 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800eaca:	2b20      	cmp	r3, #32
 800eacc:	d028      	beq.n	800eb20 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800eace:	4b17      	ldr	r3, [pc, #92]	; (800eb2c <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800ead0:	218b      	movs	r1, #139	; 0x8b
 800ead2:	4a17      	ldr	r2, [pc, #92]	; (800eb30 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800ead4:	4817      	ldr	r0, [pc, #92]	; (800eb34 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800ead6:	f00c ff75 	bl	801b9c4 <__assert_func>
 800eada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eade:	d01f      	beq.n	800eb20 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800eae0:	d804      	bhi.n	800eaec <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800eae2:	2b80      	cmp	r3, #128	; 0x80
 800eae4:	d01c      	beq.n	800eb20 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800eae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eaea:	e7ef      	b.n	800eacc <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800eaec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaf0:	d016      	beq.n	800eb20 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800eaf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eaf6:	e7e0      	b.n	800eaba <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800eaf8:	6823      	ldr	r3, [r4, #0]
 800eafa:	7f01      	ldrb	r1, [r0, #28]
 800eafc:	4620      	mov	r0, r4
 800eafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb00:	4798      	blx	r3
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb06:	e006      	b.n	800eb16 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	7f01      	ldrb	r1, [r0, #28]
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb10:	4798      	blx	r3
 800eb12:	6823      	ldr	r3, [r4, #0]
 800eb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb16:	4629      	mov	r1, r5
 800eb18:	4620      	mov	r0, r4
 800eb1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb1e:	4718      	bx	r3
 800eb20:	6823      	ldr	r3, [r4, #0]
 800eb22:	4620      	mov	r0, r4
 800eb24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb26:	4798      	blx	r3
 800eb28:	e7eb      	b.n	800eb02 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800eb2a:	bf00      	nop
 800eb2c:	0801e784 	.word	0x0801e784
 800eb30:	0801e894 	.word	0x0801e894
 800eb34:	0801e7a9 	.word	0x0801e7a9

0800eb38 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800eb38:	b570      	push	{r4, r5, r6, lr}
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	460e      	mov	r6, r1
 800eb3e:	6860      	ldr	r0, [r4, #4]
 800eb40:	6803      	ldr	r3, [r0, #0]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	4798      	blx	r3
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d1f9      	bne.n	800eb3e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800eb4a:	4d0d      	ldr	r5, [pc, #52]	; (800eb80 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800eb4c:	6828      	ldr	r0, [r5, #0]
 800eb4e:	6803      	ldr	r3, [r0, #0]
 800eb50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb52:	4798      	blx	r3
 800eb54:	f7f3 fa02 	bl	8001f5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800eb58:	6828      	ldr	r0, [r5, #0]
 800eb5a:	2101      	movs	r1, #1
 800eb5c:	f7ff ff46 	bl	800e9ec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800eb60:	6860      	ldr	r0, [r4, #4]
 800eb62:	4631      	mov	r1, r6
 800eb64:	6803      	ldr	r3, [r0, #0]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	4798      	blx	r3
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb70:	4798      	blx	r3
 800eb72:	6828      	ldr	r0, [r5, #0]
 800eb74:	6803      	ldr	r3, [r0, #0]
 800eb76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb7c:	4718      	bx	r3
 800eb7e:	bf00      	nop
 800eb80:	2000df6c 	.word	0x2000df6c

0800eb84 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800eb84:	b508      	push	{r3, lr}
 800eb86:	f7f3 f9cf 	bl	8001f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800eb8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800eb8e:	f7f3 b9d9 	b.w	8001f44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800eb92 <_ZN8touchgfx13DMA_Interface5startEv>:
 800eb92:	b510      	push	{r4, lr}
 800eb94:	4604      	mov	r4, r0
 800eb96:	6840      	ldr	r0, [r0, #4]
 800eb98:	6803      	ldr	r3, [r0, #0]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4798      	blx	r3
 800eb9e:	b948      	cbnz	r0, 800ebb4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800eba0:	7a63      	ldrb	r3, [r4, #9]
 800eba2:	b13b      	cbz	r3, 800ebb4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800eba4:	7a23      	ldrb	r3, [r4, #8]
 800eba6:	b92b      	cbnz	r3, 800ebb4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800eba8:	6823      	ldr	r3, [r4, #0]
 800ebaa:	4620      	mov	r0, r4
 800ebac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebb2:	4718      	bx	r3
 800ebb4:	bd10      	pop	{r4, pc}
	...

0800ebb8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800ebb8:	b510      	push	{r4, lr}
 800ebba:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800ebbe:	1b12      	subs	r2, r2, r4
 800ebc0:	2a00      	cmp	r2, #0
 800ebc2:	bfdc      	itt	le
 800ebc4:	6883      	ldrle	r3, [r0, #8]
 800ebc6:	18d2      	addle	r2, r2, r3
 800ebc8:	2a01      	cmp	r2, #1
 800ebca:	dd18      	ble.n	800ebfe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 800ebcc:	6843      	ldr	r3, [r0, #4]
 800ebce:	f101 021c 	add.w	r2, r1, #28
 800ebd2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800ebd6:	f851 4b04 	ldr.w	r4, [r1], #4
 800ebda:	4291      	cmp	r1, r2
 800ebdc:	f843 4b04 	str.w	r4, [r3], #4
 800ebe0:	d1f9      	bne.n	800ebd6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 800ebe2:	880a      	ldrh	r2, [r1, #0]
 800ebe4:	801a      	strh	r2, [r3, #0]
 800ebe6:	788a      	ldrb	r2, [r1, #2]
 800ebe8:	709a      	strb	r2, [r3, #2]
 800ebea:	68c3      	ldr	r3, [r0, #12]
 800ebec:	6882      	ldr	r2, [r0, #8]
 800ebee:	f3bf 8f5b 	dmb	ish
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	bfd8      	it	le
 800ebf8:	1a9b      	suble	r3, r3, r2
 800ebfa:	60c3      	str	r3, [r0, #12]
 800ebfc:	bd10      	pop	{r4, pc}
 800ebfe:	4b03      	ldr	r3, [pc, #12]	; (800ec0c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800ec00:	2139      	movs	r1, #57	; 0x39
 800ec02:	4a03      	ldr	r2, [pc, #12]	; (800ec10 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800ec04:	4803      	ldr	r0, [pc, #12]	; (800ec14 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 800ec06:	f00c fedd 	bl	801b9c4 <__assert_func>
 800ec0a:	bf00      	nop
 800ec0c:	0801e7cf 	.word	0x0801e7cf
 800ec10:	0801e8c4 	.word	0x0801e8c4
 800ec14:	0801e7a9 	.word	0x0801e7a9

0800ec18 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800ec18:	b510      	push	{r4, lr}
 800ec1a:	6803      	ldr	r3, [r0, #0]
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4798      	blx	r3
 800ec22:	b128      	cbz	r0, 800ec30 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800ec24:	4b07      	ldr	r3, [pc, #28]	; (800ec44 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800ec26:	213f      	movs	r1, #63	; 0x3f
 800ec28:	4a07      	ldr	r2, [pc, #28]	; (800ec48 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800ec2a:	4808      	ldr	r0, [pc, #32]	; (800ec4c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800ec2c:	f00c feca 	bl	801b9c4 <__assert_func>
 800ec30:	6923      	ldr	r3, [r4, #16]
 800ec32:	68a2      	ldr	r2, [r4, #8]
 800ec34:	f3bf 8f5b 	dmb	ish
 800ec38:	3301      	adds	r3, #1
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	bfd8      	it	le
 800ec3e:	1a9b      	suble	r3, r3, r2
 800ec40:	6123      	str	r3, [r4, #16]
 800ec42:	bd10      	pop	{r4, pc}
 800ec44:	0801e7f2 	.word	0x0801e7f2
 800ec48:	0801e912 	.word	0x0801e912
 800ec4c:	0801e7a9 	.word	0x0801e7a9

0800ec50 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	4604      	mov	r4, r0
 800ec54:	6840      	ldr	r0, [r0, #4]
 800ec56:	6803      	ldr	r3, [r0, #0]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4798      	blx	r3
 800ec5c:	4605      	mov	r5, r0
 800ec5e:	b930      	cbnz	r0, 800ec6e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ec60:	7a23      	ldrb	r3, [r4, #8]
 800ec62:	b123      	cbz	r3, 800ec6e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ec64:	6860      	ldr	r0, [r4, #4]
 800ec66:	6803      	ldr	r3, [r0, #0]
 800ec68:	695b      	ldr	r3, [r3, #20]
 800ec6a:	4798      	blx	r3
 800ec6c:	7225      	strb	r5, [r4, #8]
 800ec6e:	6860      	ldr	r0, [r4, #4]
 800ec70:	6803      	ldr	r3, [r0, #0]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4798      	blx	r3
 800ec76:	b928      	cbnz	r0, 800ec84 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ec78:	6823      	ldr	r3, [r4, #0]
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec82:	4718      	bx	r3
 800ec84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec88:	f7f3 b974 	b.w	8001f74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800ec8c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	6082      	str	r2, [r0, #8]
 800ec90:	2200      	movs	r2, #0
 800ec92:	4c03      	ldr	r4, [pc, #12]	; (800eca0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800ec94:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800ec98:	e9c0 4100 	strd	r4, r1, [r0]
 800ec9c:	bd10      	pop	{r4, pc}
 800ec9e:	bf00      	nop
 800eca0:	0801e878 	.word	0x0801e878

0800eca4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800eca4:	6840      	ldr	r0, [r0, #4]
 800eca6:	6803      	ldr	r3, [r0, #0]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4718      	bx	r3

0800ecac <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800ecac:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800ecb0:	4770      	bx	lr

0800ecb2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800ecb2:	b510      	push	{r4, lr}
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ecb8:	b150      	cbz	r0, 800ecd0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ecba:	6803      	ldr	r3, [r0, #0]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	4798      	blx	r3
 800ecc0:	b130      	cbz	r0, 800ecd0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ecc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ecc4:	4621      	mov	r1, r4
 800ecc6:	6803      	ldr	r3, [r0, #0]
 800ecc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	4718      	bx	r3
 800ecd0:	bd10      	pop	{r4, pc}

0800ecd2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800ecd2:	790b      	ldrb	r3, [r1, #4]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	bf0c      	ite	eq
 800ecd8:	2301      	moveq	r3, #1
 800ecda:	2300      	movne	r3, #0
 800ecdc:	b570      	push	{r4, r5, r6, lr}
 800ecde:	4604      	mov	r4, r0
 800ece0:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800ece4:	460e      	mov	r6, r1
 800ece6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800ecea:	d109      	bne.n	800ed00 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 800ecec:	b14d      	cbz	r5, 800ed02 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 800ecee:	7933      	ldrb	r3, [r6, #4]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d10c      	bne.n	800ed0e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800ecf4:	6823      	ldr	r3, [r4, #0]
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecfe:	4718      	bx	r3
 800ed00:	b12d      	cbz	r5, 800ed0e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800ed02:	6823      	ldr	r3, [r4, #0]
 800ed04:	4620      	mov	r0, r4
 800ed06:	695b      	ldr	r3, [r3, #20]
 800ed08:	4798      	blx	r3
 800ed0a:	2d00      	cmp	r5, #0
 800ed0c:	d1ef      	bne.n	800ecee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800ed0e:	bd70      	pop	{r4, r5, r6, pc}

0800ed10 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800ed10:	2300      	movs	r3, #0
 800ed12:	8083      	strh	r3, [r0, #4]
 800ed14:	80c3      	strh	r3, [r0, #6]
 800ed16:	8003      	strh	r3, [r0, #0]
 800ed18:	8043      	strh	r3, [r0, #2]
 800ed1a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800ed1e:	2bff      	cmp	r3, #255	; 0xff
 800ed20:	bf01      	itttt	eq
 800ed22:	890b      	ldrheq	r3, [r1, #8]
 800ed24:	8083      	strheq	r3, [r0, #4]
 800ed26:	894b      	ldrheq	r3, [r1, #10]
 800ed28:	80c3      	strheq	r3, [r0, #6]
 800ed2a:	4770      	bx	lr

0800ed2c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800ed2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed2e:	4604      	mov	r4, r0
 800ed30:	466b      	mov	r3, sp
 800ed32:	6808      	ldr	r0, [r1, #0]
 800ed34:	6849      	ldr	r1, [r1, #4]
 800ed36:	c303      	stmia	r3!, {r0, r1}
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	4669      	mov	r1, sp
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed40:	4798      	blx	r3
 800ed42:	4b08      	ldr	r3, [pc, #32]	; (800ed64 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ed4a:	b10a      	cbz	r2, 800ed50 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800ed4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ed4e:	b900      	cbnz	r0, 800ed52 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800ed50:	6898      	ldr	r0, [r3, #8]
 800ed52:	6803      	ldr	r3, [r0, #0]
 800ed54:	4669      	mov	r1, sp
 800ed56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ed58:	699d      	ldr	r5, [r3, #24]
 800ed5a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800ed5e:	47a8      	blx	r5
 800ed60:	b003      	add	sp, #12
 800ed62:	bd30      	pop	{r4, r5, pc}
 800ed64:	2000df6c 	.word	0x2000df6c

0800ed68 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800ed68:	b570      	push	{r4, r5, r6, lr}
 800ed6a:	880b      	ldrh	r3, [r1, #0]
 800ed6c:	4605      	mov	r5, r0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800ed72:	8813      	ldrh	r3, [r2, #0]
 800ed74:	f825 3f30 	strh.w	r3, [r5, #48]!
 800ed78:	4628      	mov	r0, r5
 800ed7a:	f004 fabb 	bl	80132f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ed7e:	4606      	mov	r6, r0
 800ed80:	4628      	mov	r0, r5
 800ed82:	f004 faf1 	bl	8013368 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ed86:	6823      	ldr	r3, [r4, #0]
 800ed88:	4605      	mov	r5, r0
 800ed8a:	b231      	sxth	r1, r6
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed90:	4798      	blx	r3
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	b229      	sxth	r1, r5
 800ed96:	4620      	mov	r0, r4
 800ed98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed9e:	4718      	bx	r3

0800eda0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800eda0:	b510      	push	{r4, lr}
 800eda2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800eda6:	4604      	mov	r4, r0
 800eda8:	2bff      	cmp	r3, #255	; 0xff
 800edaa:	d006      	beq.n	800edba <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800edac:	2300      	movs	r3, #0
 800edae:	8003      	strh	r3, [r0, #0]
 800edb0:	8043      	strh	r3, [r0, #2]
 800edb2:	8083      	strh	r3, [r0, #4]
 800edb4:	80c3      	strh	r3, [r0, #6]
 800edb6:	4620      	mov	r0, r4
 800edb8:	bd10      	pop	{r4, pc}
 800edba:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800edbe:	b11b      	cbz	r3, 800edc8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800edc0:	3130      	adds	r1, #48	; 0x30
 800edc2:	f004 fb0b 	bl	80133dc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800edc6:	e7f6      	b.n	800edb6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800edc8:	312e      	adds	r1, #46	; 0x2e
 800edca:	e7fa      	b.n	800edc2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800edcc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800edcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800edd4:	b08a      	sub	sp, #40	; 0x28
 800edd6:	4604      	mov	r4, r0
 800edd8:	4688      	mov	r8, r1
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d044      	beq.n	800ee68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 800edde:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800ede0:	a805      	add	r0, sp, #20
 800ede2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ede6:	f004 fa85 	bl	80132f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800edea:	4605      	mov	r5, r0
 800edec:	b206      	sxth	r6, r0
 800edee:	a805      	add	r0, sp, #20
 800edf0:	f004 faba 	bl	8013368 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800edf4:	f9b8 2000 	ldrsh.w	r2, [r8]
 800edf8:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800edfc:	2300      	movs	r3, #0
 800edfe:	fa0f fc80 	sxth.w	ip, r0
 800ee02:	4417      	add	r7, r2
 800ee04:	9306      	str	r3, [sp, #24]
 800ee06:	b2bf      	uxth	r7, r7
 800ee08:	fa0f fe87 	sxth.w	lr, r7
 800ee0c:	459e      	cmp	lr, r3
 800ee0e:	dd2d      	ble.n	800ee6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800ee10:	4296      	cmp	r6, r2
 800ee12:	dd2b      	ble.n	800ee6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800ee14:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800ee18:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800ee1c:	4419      	add	r1, r3
 800ee1e:	b289      	uxth	r1, r1
 800ee20:	fa0f f881 	sxth.w	r8, r1
 800ee24:	f1b8 0f00 	cmp.w	r8, #0
 800ee28:	dd20      	ble.n	800ee6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800ee2a:	459c      	cmp	ip, r3
 800ee2c:	dd1e      	ble.n	800ee6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800ee2e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800ee32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ee36:	4576      	cmp	r6, lr
 800ee38:	bfa8      	it	ge
 800ee3a:	463d      	movge	r5, r7
 800ee3c:	45c4      	cmp	ip, r8
 800ee3e:	bfa8      	it	ge
 800ee40:	4608      	movge	r0, r1
 800ee42:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ee46:	1aad      	subs	r5, r5, r2
 800ee48:	1ac0      	subs	r0, r0, r3
 800ee4a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ee4e:	f8ad 501c 	strh.w	r5, [sp, #28]
 800ee52:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ee56:	4b1f      	ldr	r3, [pc, #124]	; (800eed4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	b953      	cbnz	r3, 800ee72 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 800ee5c:	4b1e      	ldr	r3, [pc, #120]	; (800eed8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800ee5e:	2187      	movs	r1, #135	; 0x87
 800ee60:	4a1e      	ldr	r2, [pc, #120]	; (800eedc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800ee62:	481f      	ldr	r0, [pc, #124]	; (800eee0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 800ee64:	f00c fdae 	bl	801b9c4 <__assert_func>
 800ee68:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800ee6a:	e7b9      	b.n	800ede0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9307      	str	r3, [sp, #28]
 800ee70:	e7f1      	b.n	800ee56 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800ee72:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ee76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d026      	beq.n	800eecc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800ee7e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	dd22      	ble.n	800eecc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800ee86:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	dd1e      	ble.n	800eecc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	a908      	add	r1, sp, #32
 800ee92:	4620      	mov	r0, r4
 800ee94:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800ee98:	6823      	ldr	r3, [r4, #0]
 800ee9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee9c:	4798      	blx	r3
 800ee9e:	4b11      	ldr	r3, [pc, #68]	; (800eee4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800eea6:	b10a      	cbz	r2, 800eeac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800eea8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800eeaa:	b900      	cbnz	r0, 800eeae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 800eeac:	6898      	ldr	r0, [r3, #8]
 800eeae:	2501      	movs	r5, #1
 800eeb0:	6801      	ldr	r1, [r0, #0]
 800eeb2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800eeb6:	9502      	str	r5, [sp, #8]
 800eeb8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800eebc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800eec0:	9401      	str	r4, [sp, #4]
 800eec2:	ac06      	add	r4, sp, #24
 800eec4:	9400      	str	r4, [sp, #0]
 800eec6:	688c      	ldr	r4, [r1, #8]
 800eec8:	a905      	add	r1, sp, #20
 800eeca:	47a0      	blx	r4
 800eecc:	b00a      	add	sp, #40	; 0x28
 800eece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed2:	bf00      	nop
 800eed4:	2000dff4 	.word	0x2000dff4
 800eed8:	0801ea14 	.word	0x0801ea14
 800eedc:	0801eae8 	.word	0x0801eae8
 800eee0:	0801ea50 	.word	0x0801ea50
 800eee4:	2000df6c 	.word	0x2000df6c

0800eee8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 800eee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeec:	4604      	mov	r4, r0
 800eeee:	b08c      	sub	sp, #48	; 0x30
 800eef0:	4688      	mov	r8, r1
 800eef2:	f7ff ff6b 	bl	800edcc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800eef6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800eef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eefc:	4293      	cmp	r3, r2
 800eefe:	f000 809a 	beq.w	800f036 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ef02:	4e55      	ldr	r6, [pc, #340]	; (800f058 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 800ef04:	6832      	ldr	r2, [r6, #0]
 800ef06:	b92a      	cbnz	r2, 800ef14 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 800ef08:	4b54      	ldr	r3, [pc, #336]	; (800f05c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 800ef0a:	21ae      	movs	r1, #174	; 0xae
 800ef0c:	4a54      	ldr	r2, [pc, #336]	; (800f060 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800ef0e:	4855      	ldr	r0, [pc, #340]	; (800f064 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 800ef10:	f00c fd58 	bl	801b9c4 <__assert_func>
 800ef14:	4d54      	ldr	r5, [pc, #336]	; (800f068 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 800ef16:	8829      	ldrh	r1, [r5, #0]
 800ef18:	4299      	cmp	r1, r3
 800ef1a:	d803      	bhi.n	800ef24 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 800ef1c:	4b53      	ldr	r3, [pc, #332]	; (800f06c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 800ef1e:	21af      	movs	r1, #175	; 0xaf
 800ef20:	4a4f      	ldr	r2, [pc, #316]	; (800f060 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800ef22:	e7f4      	b.n	800ef0e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 800ef24:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800ef28:	f04f 0c02 	mov.w	ip, #2
 800ef2c:	4b50      	ldr	r3, [pc, #320]	; (800f070 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 800ef2e:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef38:	f1be 0f01 	cmp.w	lr, #1
 800ef3c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800ef40:	f04f 0300 	mov.w	r3, #0
 800ef44:	b208      	sxth	r0, r1
 800ef46:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800ef4a:	9303      	str	r3, [sp, #12]
 800ef4c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ef50:	d074      	beq.n	800f03c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800ef52:	f1be 0f03 	cmp.w	lr, #3
 800ef56:	d071      	beq.n	800f03c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800ef58:	1a52      	subs	r2, r2, r1
 800ef5a:	f8ad 3010 	strh.w	r3, [sp, #16]
 800ef5e:	f8ad 0012 	strh.w	r0, [sp, #18]
 800ef62:	fb92 f2fc 	sdiv	r2, r2, ip
 800ef66:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ef6a:	f10d 090c 	add.w	r9, sp, #12
 800ef6e:	f10d 0a14 	add.w	sl, sp, #20
 800ef72:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ef76:	e88a 0003 	stmia.w	sl, {r0, r1}
 800ef7a:	4641      	mov	r1, r8
 800ef7c:	4650      	mov	r0, sl
 800ef7e:	f7fe fdd7 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 800ef82:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	dd55      	ble.n	800f036 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ef8a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	dd51      	ble.n	800f036 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ef92:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ef96:	4649      	mov	r1, r9
 800ef98:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	1a9b      	subs	r3, r3, r2
 800efa0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800efa4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800efa8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800efac:	1a9b      	subs	r3, r3, r2
 800efae:	f8ad 3016 	strh.w	r3, [sp, #22]
 800efb2:	6823      	ldr	r3, [r4, #0]
 800efb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efb6:	4798      	blx	r3
 800efb8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d047      	beq.n	800f050 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 800efc0:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800efc4:	6833      	ldr	r3, [r6, #0]
 800efc6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d09c      	beq.n	800ef08 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 800efce:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800efd0:	882d      	ldrh	r5, [r5, #0]
 800efd2:	428d      	cmp	r5, r1
 800efd4:	d9a2      	bls.n	800ef1c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 800efd6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800efda:	6812      	ldr	r2, [r2, #0]
 800efdc:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 800efe0:	785b      	ldrb	r3, [r3, #1]
 800efe2:	9209      	str	r2, [sp, #36]	; 0x24
 800efe4:	f3c3 0501 	ubfx	r5, r3, #0, #2
 800efe8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800efec:	9707      	str	r7, [sp, #28]
 800efee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800eff2:	2300      	movs	r3, #0
 800eff4:	f88d 5020 	strb.w	r5, [sp, #32]
 800eff8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800effc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800f000:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800f004:	4b1b      	ldr	r3, [pc, #108]	; (800f074 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 800f006:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800f010:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f014:	b10a      	cbz	r2, 800f01a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 800f016:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f018:	b904      	cbnz	r4, 800f01c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 800f01a:	689c      	ldr	r4, [r3, #8]
 800f01c:	4b16      	ldr	r3, [pc, #88]	; (800f078 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 800f01e:	6818      	ldr	r0, [r3, #0]
 800f020:	f7f5 fdb2 	bl	8004b88 <_ZNK8touchgfx5Texts7getTextEt>
 800f024:	ab07      	add	r3, sp, #28
 800f026:	9001      	str	r0, [sp, #4]
 800f028:	4620      	mov	r0, r4
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	4653      	mov	r3, sl
 800f02e:	e899 0006 	ldmia.w	r9, {r1, r2}
 800f032:	f7f5 fd3a 	bl	8004aaa <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800f036:	b00c      	add	sp, #48	; 0x30
 800f038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f03c:	1a5b      	subs	r3, r3, r1
 800f03e:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f042:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f046:	fb93 f3fc 	sdiv	r3, r3, ip
 800f04a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f04e:	e78c      	b.n	800ef6a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 800f050:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800f054:	e7b6      	b.n	800efc4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 800f056:	bf00      	nop
 800f058:	2000dfbc 	.word	0x2000dfbc
 800f05c:	0801eb1b 	.word	0x0801eb1b
 800f060:	0801ec48 	.word	0x0801ec48
 800f064:	0801eb5d 	.word	0x0801eb5d
 800f068:	2000dfc0 	.word	0x2000dfc0
 800f06c:	0801eb86 	.word	0x0801eb86
 800f070:	2000dfc4 	.word	0x2000dfc4
 800f074:	2000df6c 	.word	0x2000df6c
 800f078:	2000dfc8 	.word	0x2000dfc8

0800f07c <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 800f07c:	2101      	movs	r1, #1
 800f07e:	2200      	movs	r2, #0
 800f080:	b510      	push	{r4, lr}
 800f082:	4c13      	ldr	r4, [pc, #76]	; (800f0d0 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 800f084:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800f088:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800f08c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f090:	6004      	str	r4, [r0, #0]
 800f092:	4c10      	ldr	r4, [pc, #64]	; (800f0d4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 800f094:	8082      	strh	r2, [r0, #4]
 800f096:	80c2      	strh	r2, [r0, #6]
 800f098:	8102      	strh	r2, [r0, #8]
 800f09a:	8142      	strh	r2, [r0, #10]
 800f09c:	8182      	strh	r2, [r0, #12]
 800f09e:	81c2      	strh	r2, [r0, #14]
 800f0a0:	8202      	strh	r2, [r0, #16]
 800f0a2:	8242      	strh	r2, [r0, #18]
 800f0a4:	61c2      	str	r2, [r0, #28]
 800f0a6:	8402      	strh	r2, [r0, #32]
 800f0a8:	8442      	strh	r2, [r0, #34]	; 0x22
 800f0aa:	6282      	str	r2, [r0, #40]	; 0x28
 800f0ac:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800f0b0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800f0b2:	8601      	strh	r1, [r0, #48]	; 0x30
 800f0b4:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800f0b8:	6344      	str	r4, [r0, #52]	; 0x34
 800f0ba:	8701      	strh	r1, [r0, #56]	; 0x38
 800f0bc:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800f0c0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 800f0c4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800f0c8:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800f0cc:	bd10      	pop	{r4, pc}
 800f0ce:	bf00      	nop
 800f0d0:	0801ebe0 	.word	0x0801ebe0
 800f0d4:	0801da94 	.word	0x0801da94

0800f0d8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800f0d8:	4b01      	ldr	r3, [pc, #4]	; (800f0e0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800f0da:	6019      	str	r1, [r3, #0]
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	2000df74 	.word	0x2000df74

0800f0e4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800f0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e8:	4696      	mov	lr, r2
 800f0ea:	b097      	sub	sp, #92	; 0x5c
 800f0ec:	4605      	mov	r5, r0
 800f0ee:	4614      	mov	r4, r2
 800f0f0:	460e      	mov	r6, r1
 800f0f2:	461f      	mov	r7, r3
 800f0f4:	f10d 0c1c 	add.w	ip, sp, #28
 800f0f8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800f0fc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800f100:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800f104:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f108:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f10c:	f8de 3000 	ldr.w	r3, [lr]
 800f110:	f104 0e14 	add.w	lr, r4, #20
 800f114:	f8cc 3000 	str.w	r3, [ip]
 800f118:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800f11c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f120:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f124:	f8de 3000 	ldr.w	r3, [lr]
 800f128:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800f12c:	f8cc 3000 	str.w	r3, [ip]
 800f130:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800f134:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f138:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f13c:	f8de 3000 	ldr.w	r3, [lr]
 800f140:	4631      	mov	r1, r6
 800f142:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f144:	4628      	mov	r0, r5
 800f146:	f8cc 3000 	str.w	r3, [ip]
 800f14a:	682b      	ldr	r3, [r5, #0]
 800f14c:	9201      	str	r2, [sp, #4]
 800f14e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f150:	f8cd 8008 	str.w	r8, [sp, #8]
 800f154:	9200      	str	r2, [sp, #0]
 800f156:	aa07      	add	r2, sp, #28
 800f158:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800f15c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 800f160:	463b      	mov	r3, r7
 800f162:	47d8      	blx	fp
 800f164:	46a6      	mov	lr, r4
 800f166:	f10d 0c1c 	add.w	ip, sp, #28
 800f16a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f16e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f172:	f8de 3000 	ldr.w	r3, [lr]
 800f176:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800f17a:	343c      	adds	r4, #60	; 0x3c
 800f17c:	f8cc 3000 	str.w	r3, [ip]
 800f180:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800f184:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f188:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f18c:	f8de 3000 	ldr.w	r3, [lr]
 800f190:	f8cc 3000 	str.w	r3, [ip]
 800f194:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800f198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f19a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f19e:	6823      	ldr	r3, [r4, #0]
 800f1a0:	4631      	mov	r1, r6
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	f8cc 3000 	str.w	r3, [ip]
 800f1a8:	682b      	ldr	r3, [r5, #0]
 800f1aa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800f1ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1b0:	f8cd 8008 	str.w	r8, [sp, #8]
 800f1b4:	9201      	str	r2, [sp, #4]
 800f1b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f1b8:	9200      	str	r2, [sp, #0]
 800f1ba:	aa07      	add	r2, sp, #28
 800f1bc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800f1be:	463b      	mov	r3, r7
 800f1c0:	47a0      	blx	r4
 800f1c2:	b017      	add	sp, #92	; 0x5c
 800f1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1c8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	4770      	bx	lr

0800f1cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d0:	b08d      	sub	sp, #52	; 0x34
 800f1d2:	4688      	mov	r8, r1
 800f1d4:	f8d3 c000 	ldr.w	ip, [r3]
 800f1d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f1da:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800f1de:	680f      	ldr	r7, [r1, #0]
 800f1e0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800f1e4:	eba7 070c 	sub.w	r7, r7, ip
 800f1e8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800f1ec:	edd3 6a07 	vldr	s13, [r3, #28]
 800f1f0:	42bc      	cmp	r4, r7
 800f1f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f1f4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800f1f8:	bfa8      	it	ge
 800f1fa:	463c      	movge	r4, r7
 800f1fc:	f9b1 9000 	ldrsh.w	r9, [r1]
 800f200:	f9ba 1000 	ldrsh.w	r1, [sl]
 800f204:	ee07 4a90 	vmov	s15, r4
 800f208:	eb09 0e0c 	add.w	lr, r9, ip
 800f20c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800f210:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800f214:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800f218:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800f21c:	4571      	cmp	r1, lr
 800f21e:	ee25 4a04 	vmul.f32	s8, s10, s8
 800f222:	ee65 4a24 	vmul.f32	s9, s10, s9
 800f226:	ee25 5a27 	vmul.f32	s10, s10, s15
 800f22a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f22e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800f232:	ee32 1a05 	vadd.f32	s2, s4, s10
 800f236:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f23a:	ee36 0a84 	vadd.f32	s0, s13, s8
 800f23e:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f242:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f246:	f340 808c 	ble.w	800f362 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800f24a:	eba1 060e 	sub.w	r6, r1, lr
 800f24e:	fb96 f5f4 	sdiv	r5, r6, r4
 800f252:	ee07 5a10 	vmov	s14, r5
 800f256:	2d00      	cmp	r5, #0
 800f258:	fb04 6615 	mls	r6, r4, r5, r6
 800f25c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f260:	eea7 0a04 	vfma.f32	s0, s14, s8
 800f264:	eee7 0a24 	vfma.f32	s1, s14, s9
 800f268:	eea7 1a05 	vfma.f32	s2, s14, s10
 800f26c:	dd12      	ble.n	800f294 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800f26e:	ee70 6a44 	vsub.f32	s13, s0, s8
 800f272:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800f276:	ee31 2a45 	vsub.f32	s4, s2, s10
 800f27a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f282:	bf14      	ite	ne
 800f284:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800f288:	eeb0 7a67 	vmoveq.f32	s14, s15
 800f28c:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f290:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f294:	fb05 f204 	mul.w	r2, r5, r4
 800f298:	1abf      	subs	r7, r7, r2
 800f29a:	4494      	add	ip, r2
 800f29c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800f2a0:	4411      	add	r1, r2
 800f2a2:	eb09 020c 	add.w	r2, r9, ip
 800f2a6:	b209      	sxth	r1, r1
 800f2a8:	443a      	add	r2, r7
 800f2aa:	428a      	cmp	r2, r1
 800f2ac:	bfc4      	itt	gt
 800f2ae:	eba1 0209 	subgt.w	r2, r1, r9
 800f2b2:	eba2 070c 	subgt.w	r7, r2, ip
 800f2b6:	2f00      	cmp	r7, #0
 800f2b8:	dd50      	ble.n	800f35c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800f2ba:	fb97 f1f4 	sdiv	r1, r7, r4
 800f2be:	fb04 7211 	mls	r2, r4, r1, r7
 800f2c2:	b90a      	cbnz	r2, 800f2c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800f2c4:	3901      	subs	r1, #1
 800f2c6:	4622      	mov	r2, r4
 800f2c8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800f2cc:	6840      	ldr	r0, [r0, #4]
 800f2ce:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800f2d2:	44b6      	add	lr, r6
 800f2d4:	f8d0 a000 	ldr.w	sl, [r0]
 800f2d8:	2900      	cmp	r1, #0
 800f2da:	bfcc      	ite	gt
 800f2dc:	46a1      	movgt	r9, r4
 800f2de:	4691      	movle	r9, r2
 800f2e0:	900b      	str	r0, [sp, #44]	; 0x2c
 800f2e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f2e4:	fb04 e505 	mla	r5, r4, r5, lr
 800f2e8:	eef0 6a42 	vmov.f32	s13, s4
 800f2ec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f2f0:	9008      	str	r0, [sp, #32]
 800f2f2:	eeb0 7a61 	vmov.f32	s14, s3
 800f2f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f2f8:	695b      	ldr	r3, [r3, #20]
 800f2fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f2fe:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800f302:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800f306:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f308:	445b      	add	r3, fp
 800f30a:	9307      	str	r3, [sp, #28]
 800f30c:	ee16 3a90 	vmov	r3, s13
 800f310:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800f314:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800f318:	ee21 3a23 	vmul.f32	s6, s2, s7
 800f31c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800f320:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f324:	ee17 7a90 	vmov	r7, s15
 800f328:	ee73 7a42 	vsub.f32	s15, s6, s4
 800f32c:	fb97 f7f4 	sdiv	r7, r7, r4
 800f330:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f334:	ee17 ca90 	vmov	ip, s15
 800f338:	fb9c fcf4 	sdiv	ip, ip, r4
 800f33c:	fb0c 3306 	mla	r3, ip, r6, r3
 800f340:	9302      	str	r3, [sp, #8]
 800f342:	ee17 3a10 	vmov	r3, s14
 800f346:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800f34a:	fb07 3706 	mla	r7, r7, r6, r3
 800f34e:	eba9 0306 	sub.w	r3, r9, r6
 800f352:	e9cd 4700 	strd	r4, r7, [sp]
 800f356:	f8da 4008 	ldr.w	r4, [sl, #8]
 800f35a:	47a0      	blx	r4
 800f35c:	b00d      	add	sp, #52	; 0x34
 800f35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f362:	2500      	movs	r5, #0
 800f364:	462e      	mov	r6, r5
 800f366:	e799      	b.n	800f29c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800f368 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800f368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f36c:	b0db      	sub	sp, #364	; 0x16c
 800f36e:	461d      	mov	r5, r3
 800f370:	4614      	mov	r4, r2
 800f372:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800f376:	910f      	str	r1, [sp, #60]	; 0x3c
 800f378:	4629      	mov	r1, r5
 800f37a:	930a      	str	r3, [sp, #40]	; 0x28
 800f37c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800f380:	9009      	str	r0, [sp, #36]	; 0x24
 800f382:	930b      	str	r3, [sp, #44]	; 0x2c
 800f384:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800f388:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800f38c:	9310      	str	r3, [sp, #64]	; 0x40
 800f38e:	6803      	ldr	r3, [r0, #0]
 800f390:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800f392:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f396:	47b8      	blx	r7
 800f398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f39a:	6058      	str	r0, [r3, #4]
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f000 83a1 	beq.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f3a2:	682b      	ldr	r3, [r5, #0]
 800f3a4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f3a8:	ed94 7a02 	vldr	s14, [r4, #8]
 800f3ac:	9314      	str	r3, [sp, #80]	; 0x50
 800f3ae:	686b      	ldr	r3, [r5, #4]
 800f3b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f3b4:	9315      	str	r3, [sp, #84]	; 0x54
 800f3b6:	4bc1      	ldr	r3, [pc, #772]	; (800f6bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800f3b8:	7819      	ldrb	r1, [r3, #0]
 800f3ba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800f3be:	2900      	cmp	r1, #0
 800f3c0:	bf16      	itet	ne
 800f3c2:	4619      	movne	r1, r3
 800f3c4:	4611      	moveq	r1, r2
 800f3c6:	4613      	movne	r3, r2
 800f3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3cc:	9116      	str	r1, [sp, #88]	; 0x58
 800f3ce:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800f3d2:	f240 8387 	bls.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f3d6:	ed94 7a07 	vldr	s14, [r4, #28]
 800f3da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e2:	f240 837f 	bls.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f3e6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800f3ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f2:	f240 8377 	bls.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f3f6:	6822      	ldr	r2, [r4, #0]
 800f3f8:	4bb1      	ldr	r3, [pc, #708]	; (800f6c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	f2c0 8372 	blt.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f400:	49b0      	ldr	r1, [pc, #704]	; (800f6c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800f402:	6963      	ldr	r3, [r4, #20]
 800f404:	428a      	cmp	r2, r1
 800f406:	f300 836d 	bgt.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f40a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f40e:	48ae      	ldr	r0, [pc, #696]	; (800f6c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800f410:	33ff      	adds	r3, #255	; 0xff
 800f412:	4283      	cmp	r3, r0
 800f414:	f200 8366 	bhi.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f41a:	4dac      	ldr	r5, [pc, #688]	; (800f6cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800f41c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f420:	33ff      	adds	r3, #255	; 0xff
 800f422:	42ab      	cmp	r3, r5
 800f424:	f200 835e 	bhi.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f428:	6862      	ldr	r2, [r4, #4]
 800f42a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800f42e:	33ff      	adds	r3, #255	; 0xff
 800f430:	4283      	cmp	r3, r0
 800f432:	f200 8357 	bhi.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f436:	69a1      	ldr	r1, [r4, #24]
 800f438:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800f43c:	33ff      	adds	r3, #255	; 0xff
 800f43e:	4283      	cmp	r3, r0
 800f440:	f200 8350 	bhi.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f446:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800f44a:	30ff      	adds	r0, #255	; 0xff
 800f44c:	42a8      	cmp	r0, r5
 800f44e:	f200 8349 	bhi.w	800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f452:	428a      	cmp	r2, r1
 800f454:	f280 8110 	bge.w	800f678 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800f458:	429a      	cmp	r2, r3
 800f45a:	f300 8119 	bgt.w	800f690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800f45e:	4299      	cmp	r1, r3
 800f460:	f280 811d 	bge.w	800f69e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800f464:	2502      	movs	r5, #2
 800f466:	2701      	movs	r7, #1
 800f468:	46a9      	mov	r9, r5
 800f46a:	46b8      	mov	r8, r7
 800f46c:	f04f 0a00 	mov.w	sl, #0
 800f470:	4621      	mov	r1, r4
 800f472:	a849      	add	r0, sp, #292	; 0x124
 800f474:	f003 fc8c 	bl	8012d90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800f478:	4622      	mov	r2, r4
 800f47a:	4653      	mov	r3, sl
 800f47c:	a949      	add	r1, sp, #292	; 0x124
 800f47e:	f8cd 9000 	str.w	r9, [sp]
 800f482:	a819      	add	r0, sp, #100	; 0x64
 800f484:	f003 fdb4 	bl	8012ff0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f488:	4622      	mov	r2, r4
 800f48a:	4653      	mov	r3, sl
 800f48c:	a949      	add	r1, sp, #292	; 0x124
 800f48e:	f8cd 8000 	str.w	r8, [sp]
 800f492:	a829      	add	r0, sp, #164	; 0xa4
 800f494:	f003 fdac 	bl	8012ff0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f498:	4643      	mov	r3, r8
 800f49a:	4622      	mov	r2, r4
 800f49c:	a949      	add	r1, sp, #292	; 0x124
 800f49e:	f8cd 9000 	str.w	r9, [sp]
 800f4a2:	a839      	add	r0, sp, #228	; 0xe4
 800f4a4:	f003 fda4 	bl	8012ff0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f4a8:	42af      	cmp	r7, r5
 800f4aa:	af12      	add	r7, sp, #72	; 0x48
 800f4ac:	bfb7      	itett	lt
 800f4ae:	2300      	movlt	r3, #0
 800f4b0:	2301      	movge	r3, #1
 800f4b2:	ad29      	addlt	r5, sp, #164	; 0xa4
 800f4b4:	ac19      	addlt	r4, sp, #100	; 0x64
 800f4b6:	bfb1      	iteee	lt
 800f4b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f4ba:	ad19      	addge	r5, sp, #100	; 0x64
 800f4bc:	930e      	strge	r3, [sp, #56]	; 0x38
 800f4be:	ac29      	addge	r4, sp, #164	; 0xa4
 800f4c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f4c6:	e887 0003 	stmia.w	r7, {r0, r1}
 800f4ca:	b928      	cbnz	r0, 800f4d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800f4cc:	4b80      	ldr	r3, [pc, #512]	; (800f6d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800f4ce:	6818      	ldr	r0, [r3, #0]
 800f4d0:	6803      	ldr	r3, [r0, #0]
 800f4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d4:	4798      	blx	r3
 800f4d6:	6038      	str	r0, [r7, #0]
 800f4d8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f4da:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f4de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f4e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f4e4:	930c      	str	r3, [sp, #48]	; 0x30
 800f4e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f4e8:	6963      	ldr	r3, [r4, #20]
 800f4ea:	440b      	add	r3, r1
 800f4ec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f4f0:	4408      	add	r0, r1
 800f4f2:	b200      	sxth	r0, r0
 800f4f4:	4283      	cmp	r3, r0
 800f4f6:	900d      	str	r0, [sp, #52]	; 0x34
 800f4f8:	f280 80dd 	bge.w	800f6b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800f4fc:	428b      	cmp	r3, r1
 800f4fe:	da08      	bge.n	800f512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f500:	2a00      	cmp	r2, #0
 800f502:	dd06      	ble.n	800f512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f504:	1acb      	subs	r3, r1, r3
 800f506:	429a      	cmp	r2, r3
 800f508:	f2c0 80e4 	blt.w	800f6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f300 80e2 	bgt.w	800f6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800f512:	6967      	ldr	r7, [r4, #20]
 800f514:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f51a:	443b      	add	r3, r7
 800f51c:	461f      	mov	r7, r3
 800f51e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f520:	1bdf      	subs	r7, r3, r7
 800f522:	4297      	cmp	r7, r2
 800f524:	bfa8      	it	ge
 800f526:	4617      	movge	r7, r2
 800f528:	2f00      	cmp	r7, #0
 800f52a:	f340 8166 	ble.w	800f7fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800f52e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f530:	6829      	ldr	r1, [r5, #0]
 800f532:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f536:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f53a:	4411      	add	r1, r2
 800f53c:	6820      	ldr	r0, [r4, #0]
 800f53e:	4299      	cmp	r1, r3
 800f540:	dd1a      	ble.n	800f578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f542:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f546:	4402      	add	r2, r0
 800f548:	440b      	add	r3, r1
 800f54a:	b21b      	sxth	r3, r3
 800f54c:	429a      	cmp	r2, r3
 800f54e:	dc13      	bgt.n	800f578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f550:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f552:	a912      	add	r1, sp, #72	; 0x48
 800f554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f556:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	9206      	str	r2, [sp, #24]
 800f55c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f55e:	9500      	str	r5, [sp, #0]
 800f560:	9205      	str	r2, [sp, #20]
 800f562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f564:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f568:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f56a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f56e:	aa49      	add	r2, sp, #292	; 0x124
 800f570:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 800f574:	4623      	mov	r3, r4
 800f576:	47c8      	blx	r9
 800f578:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f57c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f580:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f584:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f588:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f58c:	68a1      	ldr	r1, [r4, #8]
 800f58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f592:	ed94 6a08 	vldr	s12, [r4, #32]
 800f596:	edd4 6a07 	vldr	s13, [r4, #28]
 800f59a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f59e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f5a2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f5a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f5aa:	edc4 6a07 	vstr	s13, [r4, #28]
 800f5ae:	441a      	add	r2, r3
 800f5b0:	6963      	ldr	r3, [r4, #20]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	6022      	str	r2, [r4, #0]
 800f5b6:	6163      	str	r3, [r4, #20]
 800f5b8:	69a3      	ldr	r3, [r4, #24]
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	61a3      	str	r3, [r4, #24]
 800f5be:	6923      	ldr	r3, [r4, #16]
 800f5c0:	440b      	add	r3, r1
 800f5c2:	68e1      	ldr	r1, [r4, #12]
 800f5c4:	428b      	cmp	r3, r1
 800f5c6:	6123      	str	r3, [r4, #16]
 800f5c8:	db15      	blt.n	800f5f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800f5ca:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f5ce:	3201      	adds	r2, #1
 800f5d0:	1a5b      	subs	r3, r3, r1
 800f5d2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f5d6:	6022      	str	r2, [r4, #0]
 800f5d8:	6123      	str	r3, [r4, #16]
 800f5da:	edc4 6a07 	vstr	s13, [r4, #28]
 800f5de:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f5e2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f5e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f5ea:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f5ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5f2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f5f6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f5fa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f5fe:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f602:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f606:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f60a:	68a9      	ldr	r1, [r5, #8]
 800f60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f610:	ed95 6a08 	vldr	s12, [r5, #32]
 800f614:	edd5 6a07 	vldr	s13, [r5, #28]
 800f618:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f61c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f620:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f624:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f628:	edc5 6a07 	vstr	s13, [r5, #28]
 800f62c:	441a      	add	r2, r3
 800f62e:	696b      	ldr	r3, [r5, #20]
 800f630:	3301      	adds	r3, #1
 800f632:	602a      	str	r2, [r5, #0]
 800f634:	616b      	str	r3, [r5, #20]
 800f636:	69ab      	ldr	r3, [r5, #24]
 800f638:	3b01      	subs	r3, #1
 800f63a:	61ab      	str	r3, [r5, #24]
 800f63c:	692b      	ldr	r3, [r5, #16]
 800f63e:	440b      	add	r3, r1
 800f640:	68e9      	ldr	r1, [r5, #12]
 800f642:	428b      	cmp	r3, r1
 800f644:	612b      	str	r3, [r5, #16]
 800f646:	db15      	blt.n	800f674 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800f648:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f64c:	3201      	adds	r2, #1
 800f64e:	1a5b      	subs	r3, r3, r1
 800f650:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f654:	602a      	str	r2, [r5, #0]
 800f656:	612b      	str	r3, [r5, #16]
 800f658:	edc5 6a07 	vstr	s13, [r5, #28]
 800f65c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f660:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f664:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f668:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f66c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f670:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f674:	3f01      	subs	r7, #1
 800f676:	e757      	b.n	800f528 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800f678:	4299      	cmp	r1, r3
 800f67a:	dc13      	bgt.n	800f6a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800f67c:	429a      	cmp	r2, r3
 800f67e:	da14      	bge.n	800f6aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800f680:	2502      	movs	r5, #2
 800f682:	2703      	movs	r7, #3
 800f684:	f04f 0800 	mov.w	r8, #0
 800f688:	46a9      	mov	r9, r5
 800f68a:	f04f 0a01 	mov.w	sl, #1
 800f68e:	e6ef      	b.n	800f470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f690:	2501      	movs	r5, #1
 800f692:	2700      	movs	r7, #0
 800f694:	46a9      	mov	r9, r5
 800f696:	46b8      	mov	r8, r7
 800f698:	f04f 0a02 	mov.w	sl, #2
 800f69c:	e6e8      	b.n	800f470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f69e:	2501      	movs	r5, #1
 800f6a0:	2702      	movs	r7, #2
 800f6a2:	e6e1      	b.n	800f468 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800f6a4:	2500      	movs	r5, #0
 800f6a6:	2701      	movs	r7, #1
 800f6a8:	e7f4      	b.n	800f694 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800f6aa:	2702      	movs	r7, #2
 800f6ac:	2503      	movs	r5, #3
 800f6ae:	f04f 0900 	mov.w	r9, #0
 800f6b2:	46b8      	mov	r8, r7
 800f6b4:	e7e9      	b.n	800f68a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	e728      	b.n	800f50c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800f6ba:	bf00      	nop
 800f6bc:	2000df64 	.word	0x2000df64
 800f6c0:	fffd8f01 	.word	0xfffd8f01
 800f6c4:	00027100 	.word	0x00027100
 800f6c8:	0004e1ff 	.word	0x0004e1ff
 800f6cc:	0004e1fe 	.word	0x0004e1fe
 800f6d0:	2000df6c 	.word	0x2000df6c
 800f6d4:	4613      	mov	r3, r2
 800f6d6:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f6d8:	469e      	mov	lr, r3
 800f6da:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800f6dc:	469c      	mov	ip, r3
 800f6de:	9111      	str	r1, [sp, #68]	; 0x44
 800f6e0:	f04f 0900 	mov.w	r9, #0
 800f6e4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800f6e8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800f6ec:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800f6f0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800f6f4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800f6f8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f6fc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800f700:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800f704:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800f708:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800f70c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800f710:	f1bc 0f00 	cmp.w	ip, #0
 800f714:	d147      	bne.n	800f7a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800f716:	eb03 0c07 	add.w	ip, r3, r7
 800f71a:	1ad7      	subs	r7, r2, r3
 800f71c:	f1b9 0f00 	cmp.w	r9, #0
 800f720:	d009      	beq.n	800f736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800f722:	9029      	str	r0, [sp, #164]	; 0xa4
 800f724:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800f728:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800f72c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800f730:	912d      	str	r1, [sp, #180]	; 0xb4
 800f732:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800f736:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f738:	f04f 0800 	mov.w	r8, #0
 800f73c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f740:	9111      	str	r1, [sp, #68]	; 0x44
 800f742:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f746:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f74a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f74e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f752:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f756:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f75a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f75e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f762:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f766:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f76a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f76e:	f1be 0f00 	cmp.w	lr, #0
 800f772:	d031      	beq.n	800f7d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800f774:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f776:	4450      	add	r0, sl
 800f778:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f77c:	4431      	add	r1, r6
 800f77e:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f782:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f786:	4549      	cmp	r1, r9
 800f788:	db08      	blt.n	800f79c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800f78a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f78e:	3001      	adds	r0, #1
 800f790:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f794:	eba1 0109 	sub.w	r1, r1, r9
 800f798:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f79c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f7a0:	f04f 0801 	mov.w	r8, #1
 800f7a4:	e7e3      	b.n	800f76e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800f7a6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f7a8:	4450      	add	r0, sl
 800f7aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f7ae:	4431      	add	r1, r6
 800f7b0:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f7b4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f7b8:	4541      	cmp	r1, r8
 800f7ba:	db08      	blt.n	800f7ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800f7bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f7c0:	3001      	adds	r0, #1
 800f7c2:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f7c6:	eba1 0108 	sub.w	r1, r1, r8
 800f7ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f7ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f7d2:	f04f 0901 	mov.w	r9, #1
 800f7d6:	e79b      	b.n	800f710 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800f7d8:	449c      	add	ip, r3
 800f7da:	1aff      	subs	r7, r7, r3
 800f7dc:	f1b8 0f00 	cmp.w	r8, #0
 800f7e0:	d009      	beq.n	800f7f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800f7e2:	9019      	str	r0, [sp, #100]	; 0x64
 800f7e4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f7e8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f7ec:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f7f0:	911d      	str	r1, [sp, #116]	; 0x74
 800f7f2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f7f6:	1ad2      	subs	r2, r2, r3
 800f7f8:	e68b      	b.n	800f512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f7fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7fc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f000 80d1 	beq.w	800f9a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800f804:	ad19      	add	r5, sp, #100	; 0x64
 800f806:	ac39      	add	r4, sp, #228	; 0xe4
 800f808:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f80a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f80e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f812:	930c      	str	r3, [sp, #48]	; 0x30
 800f814:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f816:	6963      	ldr	r3, [r4, #20]
 800f818:	440b      	add	r3, r1
 800f81a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f81e:	4408      	add	r0, r1
 800f820:	b200      	sxth	r0, r0
 800f822:	4283      	cmp	r3, r0
 800f824:	900d      	str	r0, [sp, #52]	; 0x34
 800f826:	f280 80c1 	bge.w	800f9ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800f82a:	428b      	cmp	r3, r1
 800f82c:	da08      	bge.n	800f840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f82e:	2a00      	cmp	r2, #0
 800f830:	dd06      	ble.n	800f840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f832:	1acb      	subs	r3, r1, r3
 800f834:	429a      	cmp	r2, r3
 800f836:	f2c0 80bb 	blt.w	800f9b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f300 80b9 	bgt.w	800f9b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800f840:	6967      	ldr	r7, [r4, #20]
 800f842:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f848:	443b      	add	r3, r7
 800f84a:	461f      	mov	r7, r3
 800f84c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f84e:	1bdf      	subs	r7, r3, r7
 800f850:	4297      	cmp	r7, r2
 800f852:	bfa8      	it	ge
 800f854:	4617      	movge	r7, r2
 800f856:	2f00      	cmp	r7, #0
 800f858:	f340 813c 	ble.w	800fad4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800f85c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f85e:	6829      	ldr	r1, [r5, #0]
 800f860:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f864:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f868:	4411      	add	r1, r2
 800f86a:	6820      	ldr	r0, [r4, #0]
 800f86c:	4299      	cmp	r1, r3
 800f86e:	dd1a      	ble.n	800f8a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f870:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f874:	4402      	add	r2, r0
 800f876:	440b      	add	r3, r1
 800f878:	b21b      	sxth	r3, r3
 800f87a:	429a      	cmp	r2, r3
 800f87c:	dc13      	bgt.n	800f8a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f87e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f880:	a912      	add	r1, sp, #72	; 0x48
 800f882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f884:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	9206      	str	r2, [sp, #24]
 800f88a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f88c:	9500      	str	r5, [sp, #0]
 800f88e:	9205      	str	r2, [sp, #20]
 800f890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f892:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f896:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f898:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f89c:	aa49      	add	r2, sp, #292	; 0x124
 800f89e:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 800f8a2:	4623      	mov	r3, r4
 800f8a4:	47c8      	blx	r9
 800f8a6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f8aa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f8ae:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f8b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8b6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f8ba:	68a1      	ldr	r1, [r4, #8]
 800f8bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8c0:	ed94 6a08 	vldr	s12, [r4, #32]
 800f8c4:	edd4 6a07 	vldr	s13, [r4, #28]
 800f8c8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f8cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f8d0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f8d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f8d8:	edc4 6a07 	vstr	s13, [r4, #28]
 800f8dc:	441a      	add	r2, r3
 800f8de:	6963      	ldr	r3, [r4, #20]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	6022      	str	r2, [r4, #0]
 800f8e4:	6163      	str	r3, [r4, #20]
 800f8e6:	69a3      	ldr	r3, [r4, #24]
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	61a3      	str	r3, [r4, #24]
 800f8ec:	6923      	ldr	r3, [r4, #16]
 800f8ee:	440b      	add	r3, r1
 800f8f0:	68e1      	ldr	r1, [r4, #12]
 800f8f2:	428b      	cmp	r3, r1
 800f8f4:	6123      	str	r3, [r4, #16]
 800f8f6:	db15      	blt.n	800f924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800f8f8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f8fc:	3201      	adds	r2, #1
 800f8fe:	1a5b      	subs	r3, r3, r1
 800f900:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f904:	6022      	str	r2, [r4, #0]
 800f906:	6123      	str	r3, [r4, #16]
 800f908:	edc4 6a07 	vstr	s13, [r4, #28]
 800f90c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f910:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f914:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f918:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f91c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f920:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f924:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f928:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f92c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f930:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f934:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f938:	68a9      	ldr	r1, [r5, #8]
 800f93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f93e:	ed95 6a08 	vldr	s12, [r5, #32]
 800f942:	edd5 6a07 	vldr	s13, [r5, #28]
 800f946:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f94a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f94e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f952:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f956:	edc5 6a07 	vstr	s13, [r5, #28]
 800f95a:	441a      	add	r2, r3
 800f95c:	696b      	ldr	r3, [r5, #20]
 800f95e:	3301      	adds	r3, #1
 800f960:	602a      	str	r2, [r5, #0]
 800f962:	616b      	str	r3, [r5, #20]
 800f964:	69ab      	ldr	r3, [r5, #24]
 800f966:	3b01      	subs	r3, #1
 800f968:	61ab      	str	r3, [r5, #24]
 800f96a:	692b      	ldr	r3, [r5, #16]
 800f96c:	440b      	add	r3, r1
 800f96e:	68e9      	ldr	r1, [r5, #12]
 800f970:	428b      	cmp	r3, r1
 800f972:	612b      	str	r3, [r5, #16]
 800f974:	db15      	blt.n	800f9a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800f976:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f97a:	3201      	adds	r2, #1
 800f97c:	1a5b      	subs	r3, r3, r1
 800f97e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f982:	602a      	str	r2, [r5, #0]
 800f984:	612b      	str	r3, [r5, #16]
 800f986:	edc5 6a07 	vstr	s13, [r5, #28]
 800f98a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f98e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f992:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f996:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f99a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f99e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f9a2:	3f01      	subs	r7, #1
 800f9a4:	e757      	b.n	800f856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800f9a6:	ad39      	add	r5, sp, #228	; 0xe4
 800f9a8:	ac19      	add	r4, sp, #100	; 0x64
 800f9aa:	e72d      	b.n	800f808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	e744      	b.n	800f83a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800f9b0:	4613      	mov	r3, r2
 800f9b2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800f9b4:	469e      	mov	lr, r3
 800f9b6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800f9ba:	461f      	mov	r7, r3
 800f9bc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f9c0:	f04f 0900 	mov.w	r9, #0
 800f9c4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800f9c8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800f9cc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800f9d0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800f9d4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800f9d8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800f9da:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800f9de:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800f9e2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800f9e6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800f9ea:	960e      	str	r6, [sp, #56]	; 0x38
 800f9ec:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800f9f0:	2f00      	cmp	r7, #0
 800f9f2:	d146      	bne.n	800fa82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800f9f4:	449c      	add	ip, r3
 800f9f6:	1ad7      	subs	r7, r2, r3
 800f9f8:	f1b9 0f00 	cmp.w	r9, #0
 800f9fc:	d009      	beq.n	800fa12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800f9fe:	9039      	str	r0, [sp, #228]	; 0xe4
 800fa00:	913d      	str	r1, [sp, #244]	; 0xf4
 800fa02:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800fa06:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800fa0a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800fa0e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800fa12:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800fa14:	f04f 0800 	mov.w	r8, #0
 800fa18:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800fa1c:	910e      	str	r1, [sp, #56]	; 0x38
 800fa1e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800fa22:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800fa26:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800fa2a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800fa2e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800fa32:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800fa36:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800fa3a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800fa3e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800fa42:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800fa46:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800fa4a:	f1be 0f00 	cmp.w	lr, #0
 800fa4e:	d030      	beq.n	800fab2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800fa50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fa52:	4450      	add	r0, sl
 800fa54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800fa58:	4431      	add	r1, r6
 800fa5a:	ee37 7a04 	vadd.f32	s14, s14, s8
 800fa5e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800fa62:	4549      	cmp	r1, r9
 800fa64:	db08      	blt.n	800fa78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800fa66:	ee77 7a85 	vadd.f32	s15, s15, s10
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800fa70:	eba1 0109 	sub.w	r1, r1, r9
 800fa74:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fa78:	f10e 3eff 	add.w	lr, lr, #4294967295
 800fa7c:	f04f 0801 	mov.w	r8, #1
 800fa80:	e7e3      	b.n	800fa4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800fa82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fa84:	4450      	add	r0, sl
 800fa86:	ee37 7a24 	vadd.f32	s14, s14, s9
 800fa8a:	4431      	add	r1, r6
 800fa8c:	ee77 7a84 	vadd.f32	s15, s15, s8
 800fa90:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800fa94:	4541      	cmp	r1, r8
 800fa96:	db08      	blt.n	800faaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800fa98:	ee76 6a85 	vadd.f32	s13, s13, s10
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800faa2:	eba1 0108 	sub.w	r1, r1, r8
 800faa6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800faaa:	3f01      	subs	r7, #1
 800faac:	f04f 0901 	mov.w	r9, #1
 800fab0:	e79e      	b.n	800f9f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800fab2:	449c      	add	ip, r3
 800fab4:	1aff      	subs	r7, r7, r3
 800fab6:	f1b8 0f00 	cmp.w	r8, #0
 800faba:	d009      	beq.n	800fad0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800fabc:	9019      	str	r0, [sp, #100]	; 0x64
 800fabe:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800fac2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800fac6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800faca:	911d      	str	r1, [sp, #116]	; 0x74
 800facc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800fad0:	1ad2      	subs	r2, r2, r3
 800fad2:	e6b5      	b.n	800f840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800fad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	b923      	cbnz	r3, 800fae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fada:	4b04      	ldr	r3, [pc, #16]	; (800faec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800fadc:	6818      	ldr	r0, [r3, #0]
 800fade:	6803      	ldr	r3, [r0, #0]
 800fae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fae2:	4798      	blx	r3
 800fae4:	b05b      	add	sp, #364	; 0x16c
 800fae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faea:	bf00      	nop
 800faec:	2000df6c 	.word	0x2000df6c

0800faf0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	4604      	mov	r4, r0
 800faf4:	2500      	movs	r5, #0
 800faf6:	9804      	ldr	r0, [sp, #16]
 800faf8:	7223      	strb	r3, [r4, #8]
 800fafa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800fafe:	8025      	strh	r5, [r4, #0]
 800fb00:	6061      	str	r1, [r4, #4]
 800fb02:	7263      	strb	r3, [r4, #9]
 800fb04:	60e0      	str	r0, [r4, #12]
 800fb06:	8222      	strh	r2, [r4, #16]
 800fb08:	8265      	strh	r5, [r4, #18]
 800fb0a:	82a5      	strh	r5, [r4, #20]
 800fb0c:	82e5      	strh	r5, [r4, #22]
 800fb0e:	8325      	strh	r5, [r4, #24]
 800fb10:	8365      	strh	r5, [r4, #26]
 800fb12:	83a5      	strh	r5, [r4, #28]
 800fb14:	77a5      	strb	r5, [r4, #30]
 800fb16:	6803      	ldr	r3, [r0, #0]
 800fb18:	695b      	ldr	r3, [r3, #20]
 800fb1a:	4798      	blx	r3
 800fb1c:	4606      	mov	r6, r0
 800fb1e:	b1f8      	cbz	r0, 800fb60 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800fb20:	68e0      	ldr	r0, [r4, #12]
 800fb22:	4631      	mov	r1, r6
 800fb24:	6803      	ldr	r3, [r0, #0]
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	4798      	blx	r3
 800fb2a:	7b43      	ldrb	r3, [r0, #13]
 800fb2c:	7a82      	ldrb	r2, [r0, #10]
 800fb2e:	4605      	mov	r5, r0
 800fb30:	005b      	lsls	r3, r3, #1
 800fb32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb36:	4313      	orrs	r3, r2
 800fb38:	83a3      	strh	r3, [r4, #28]
 800fb3a:	7a63      	ldrb	r3, [r4, #9]
 800fb3c:	2b04      	cmp	r3, #4
 800fb3e:	d10f      	bne.n	800fb60 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800fb40:	68e0      	ldr	r0, [r4, #12]
 800fb42:	462a      	mov	r2, r5
 800fb44:	4631      	mov	r1, r6
 800fb46:	6803      	ldr	r3, [r0, #0]
 800fb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb4a:	4798      	blx	r3
 800fb4c:	7b6b      	ldrb	r3, [r5, #13]
 800fb4e:	005b      	lsls	r3, r3, #1
 800fb50:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fb54:	7aab      	ldrb	r3, [r5, #10]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	4418      	add	r0, r3
 800fb5a:	8ba3      	ldrh	r3, [r4, #28]
 800fb5c:	4418      	add	r0, r3
 800fb5e:	83a0      	strh	r0, [r4, #28]
 800fb60:	4620      	mov	r0, r4
 800fb62:	bd70      	pop	{r4, r5, r6, pc}

0800fb64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800fb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb68:	2400      	movs	r4, #0
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	4681      	mov	r9, r0
 800fb6e:	4688      	mov	r8, r1
 800fb70:	4692      	mov	sl, r2
 800fb72:	469b      	mov	fp, r3
 800fb74:	4627      	mov	r7, r4
 800fb76:	4625      	mov	r5, r4
 800fb78:	4626      	mov	r6, r4
 800fb7a:	4554      	cmp	r4, sl
 800fb7c:	da2a      	bge.n	800fbd4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	9303      	str	r3, [sp, #12]
 800fb82:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fb86:	429d      	cmp	r5, r3
 800fb88:	d004      	beq.n	800fb94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800fb8a:	f242 030b 	movw	r3, #8203	; 0x200b
 800fb8e:	429d      	cmp	r5, r3
 800fb90:	bf18      	it	ne
 800fb92:	462f      	movne	r7, r5
 800fb94:	ab03      	add	r3, sp, #12
 800fb96:	4642      	mov	r2, r8
 800fb98:	4659      	mov	r1, fp
 800fb9a:	4648      	mov	r0, r9
 800fb9c:	f002 fe7e 	bl	801289c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fba0:	4605      	mov	r5, r0
 800fba2:	b1b8      	cbz	r0, 800fbd4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800fba4:	280a      	cmp	r0, #10
 800fba6:	d015      	beq.n	800fbd4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800fba8:	9a03      	ldr	r2, [sp, #12]
 800fbaa:	b18a      	cbz	r2, 800fbd0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800fbac:	7b50      	ldrb	r0, [r2, #13]
 800fbae:	4639      	mov	r1, r7
 800fbb0:	7a93      	ldrb	r3, [r2, #10]
 800fbb2:	0040      	lsls	r0, r0, #1
 800fbb4:	8895      	ldrh	r5, [r2, #4]
 800fbb6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800fbba:	4303      	orrs	r3, r0
 800fbbc:	4640      	mov	r0, r8
 800fbbe:	9301      	str	r3, [sp, #4]
 800fbc0:	f8d8 3000 	ldr.w	r3, [r8]
 800fbc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbc6:	4798      	blx	r3
 800fbc8:	9b01      	ldr	r3, [sp, #4]
 800fbca:	4418      	add	r0, r3
 800fbcc:	4406      	add	r6, r0
 800fbce:	b2b6      	uxth	r6, r6
 800fbd0:	3401      	adds	r4, #1
 800fbd2:	e7d2      	b.n	800fb7a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	b005      	add	sp, #20
 800fbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbdc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800fbdc:	2a02      	cmp	r2, #2
 800fbde:	b530      	push	{r4, r5, lr}
 800fbe0:	d011      	beq.n	800fc06 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800fbe2:	2a03      	cmp	r2, #3
 800fbe4:	d01c      	beq.n	800fc20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800fbe6:	2a01      	cmp	r2, #1
 800fbe8:	d10c      	bne.n	800fc04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800fbea:	888b      	ldrh	r3, [r1, #4]
 800fbec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800fbf0:	8801      	ldrh	r1, [r0, #0]
 800fbf2:	1a9b      	subs	r3, r3, r2
 800fbf4:	8844      	ldrh	r4, [r0, #2]
 800fbf6:	1a5b      	subs	r3, r3, r1
 800fbf8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800fbfc:	8004      	strh	r4, [r0, #0]
 800fbfe:	8043      	strh	r3, [r0, #2]
 800fc00:	8081      	strh	r1, [r0, #4]
 800fc02:	80c2      	strh	r2, [r0, #6]
 800fc04:	bd30      	pop	{r4, r5, pc}
 800fc06:	88cb      	ldrh	r3, [r1, #6]
 800fc08:	88c2      	ldrh	r2, [r0, #6]
 800fc0a:	1a9b      	subs	r3, r3, r2
 800fc0c:	8842      	ldrh	r2, [r0, #2]
 800fc0e:	1a9b      	subs	r3, r3, r2
 800fc10:	888a      	ldrh	r2, [r1, #4]
 800fc12:	8881      	ldrh	r1, [r0, #4]
 800fc14:	8043      	strh	r3, [r0, #2]
 800fc16:	1a52      	subs	r2, r2, r1
 800fc18:	8801      	ldrh	r1, [r0, #0]
 800fc1a:	1a52      	subs	r2, r2, r1
 800fc1c:	8002      	strh	r2, [r0, #0]
 800fc1e:	e7f1      	b.n	800fc04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800fc20:	88cb      	ldrh	r3, [r1, #6]
 800fc22:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800fc26:	8841      	ldrh	r1, [r0, #2]
 800fc28:	1a9b      	subs	r3, r3, r2
 800fc2a:	f9b0 5000 	ldrsh.w	r5, [r0]
 800fc2e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800fc32:	1a5b      	subs	r3, r3, r1
 800fc34:	8045      	strh	r5, [r0, #2]
 800fc36:	8082      	strh	r2, [r0, #4]
 800fc38:	8003      	strh	r3, [r0, #0]
 800fc3a:	80c4      	strh	r4, [r0, #6]
 800fc3c:	e7e2      	b.n	800fc04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800fc3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800fc3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc42:	b09f      	sub	sp, #124	; 0x7c
 800fc44:	9116      	str	r1, [sp, #88]	; 0x58
 800fc46:	9317      	str	r3, [sp, #92]	; 0x5c
 800fc48:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800fc4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fc4c:	8809      	ldrh	r1, [r1, #0]
 800fc4e:	889b      	ldrh	r3, [r3, #4]
 800fc50:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800fc54:	440b      	add	r3, r1
 800fc56:	9212      	str	r2, [sp, #72]	; 0x48
 800fc58:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800fc5c:	b21b      	sxth	r3, r3
 800fc5e:	9011      	str	r0, [sp, #68]	; 0x44
 800fc60:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800fc64:	9310      	str	r3, [sp, #64]	; 0x40
 800fc66:	f8d8 3000 	ldr.w	r3, [r8]
 800fc6a:	7a59      	ldrb	r1, [r3, #9]
 800fc6c:	7a1b      	ldrb	r3, [r3, #8]
 800fc6e:	9114      	str	r1, [sp, #80]	; 0x50
 800fc70:	9315      	str	r3, [sp, #84]	; 0x54
 800fc72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800fc74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fc78:	2a00      	cmp	r2, #0
 800fc7a:	d067      	beq.n	800fd4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800fc7c:	f898 3010 	ldrb.w	r3, [r8, #16]
 800fc80:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800fc82:	2b04      	cmp	r3, #4
 800fc84:	bf14      	ite	ne
 800fc86:	2301      	movne	r3, #1
 800fc88:	2302      	moveq	r3, #2
 800fc8a:	4413      	add	r3, r2
 800fc8c:	f04f 0900 	mov.w	r9, #0
 800fc90:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc92:	464c      	mov	r4, r9
 800fc94:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fc98:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800fc9c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800fca0:	4293      	cmp	r3, r2
 800fca2:	f280 808c 	bge.w	800fdbe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800fca6:	2300      	movs	r3, #0
 800fca8:	931c      	str	r3, [sp, #112]	; 0x70
 800fcaa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fcae:	429c      	cmp	r4, r3
 800fcb0:	d006      	beq.n	800fcc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800fcb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcb4:	f242 020b 	movw	r2, #8203	; 0x200b
 800fcb8:	4294      	cmp	r4, r2
 800fcba:	bf18      	it	ne
 800fcbc:	4623      	movne	r3, r4
 800fcbe:	930d      	str	r3, [sp, #52]	; 0x34
 800fcc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcc2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800fcc4:	f8d8 2000 	ldr.w	r2, [r8]
 800fcc8:	428b      	cmp	r3, r1
 800fcca:	db41      	blt.n	800fd50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800fccc:	6813      	ldr	r3, [r2, #0]
 800fcce:	4610      	mov	r0, r2
 800fcd0:	695b      	ldr	r3, [r3, #20]
 800fcd2:	4798      	blx	r3
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	f8d8 0000 	ldr.w	r0, [r8]
 800fcda:	aa1d      	add	r2, sp, #116	; 0x74
 800fcdc:	4621      	mov	r1, r4
 800fcde:	6803      	ldr	r3, [r0, #0]
 800fce0:	689e      	ldr	r6, [r3, #8]
 800fce2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800fce6:	47b0      	blx	r6
 800fce8:	901c      	str	r0, [sp, #112]	; 0x70
 800fcea:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fcee:	429c      	cmp	r4, r3
 800fcf0:	f000 80ea 	beq.w	800fec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fcf4:	f242 030b 	movw	r3, #8203	; 0x200b
 800fcf8:	429c      	cmp	r4, r3
 800fcfa:	f000 80e5 	beq.w	800fec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fcfe:	2c00      	cmp	r4, #0
 800fd00:	f000 80f7 	beq.w	800fef2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fd04:	2c0a      	cmp	r4, #10
 800fd06:	d060      	beq.n	800fdca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800fd08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fd0a:	b36a      	cbz	r2, 800fd68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800fd0c:	8894      	ldrh	r4, [r2, #4]
 800fd0e:	f1bb 0f00 	cmp.w	fp, #0
 800fd12:	d03b      	beq.n	800fd8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800fd14:	f892 900d 	ldrb.w	r9, [r2, #13]
 800fd18:	f1bb 0f01 	cmp.w	fp, #1
 800fd1c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800fd20:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800fd24:	f892 900a 	ldrb.w	r9, [r2, #10]
 800fd28:	ea49 0903 	orr.w	r9, r9, r3
 800fd2c:	d134      	bne.n	800fd98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800fd2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd30:	eba5 0509 	sub.w	r5, r5, r9
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d14f      	bne.n	800fdd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800fd38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd3a:	eb09 0305 	add.w	r3, r9, r5
 800fd3e:	4413      	add	r3, r2
 800fd40:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800fd42:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fd46:	4293      	cmp	r3, r2
 800fd48:	da51      	bge.n	800fdee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800fd4a:	e038      	b.n	800fdbe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800fd4c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fd4e:	e79d      	b.n	800fc8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800fd50:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800fd54:	4659      	mov	r1, fp
 800fd56:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fd58:	9301      	str	r3, [sp, #4]
 800fd5a:	ab1d      	add	r3, sp, #116	; 0x74
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	ab1c      	add	r3, sp, #112	; 0x70
 800fd60:	f002 fdf4 	bl	801294c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800fd64:	4604      	mov	r4, r0
 800fd66:	e7c0      	b.n	800fcea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800fd68:	f8d8 0000 	ldr.w	r0, [r8]
 800fd6c:	6803      	ldr	r3, [r0, #0]
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	4798      	blx	r3
 800fd72:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fd76:	4298      	cmp	r0, r3
 800fd78:	f000 80a6 	beq.w	800fec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fd7c:	f242 030b 	movw	r3, #8203	; 0x200b
 800fd80:	4298      	cmp	r0, r3
 800fd82:	f000 80a1 	beq.w	800fec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fd86:	f1bb 0f00 	cmp.w	fp, #0
 800fd8a:	d100      	bne.n	800fd8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800fd8c:	444d      	add	r5, r9
 800fd8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fd90:	2a00      	cmp	r2, #0
 800fd92:	d1bf      	bne.n	800fd14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800fd94:	4691      	mov	r9, r2
 800fd96:	e097      	b.n	800fec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fd98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	f000 80ab 	beq.w	800fef6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800fda0:	f1bb 0f00 	cmp.w	fp, #0
 800fda4:	d118      	bne.n	800fdd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800fda6:	f8d8 0000 	ldr.w	r0, [r8]
 800fdaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fdac:	6803      	ldr	r3, [r0, #0]
 800fdae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdb0:	4798      	blx	r3
 800fdb2:	4405      	add	r5, r0
 800fdb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fdb8:	1aeb      	subs	r3, r5, r3
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	dd17      	ble.n	800fdee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800fdbe:	2c00      	cmp	r4, #0
 800fdc0:	f000 8097 	beq.w	800fef2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fdc4:	2c0a      	cmp	r4, #10
 800fdc6:	f040 8085 	bne.w	800fed4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800fdca:	240a      	movs	r4, #10
 800fdcc:	fab4 f084 	clz	r0, r4
 800fdd0:	0940      	lsrs	r0, r0, #5
 800fdd2:	b01f      	add	sp, #124	; 0x7c
 800fdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd8:	f8d8 0000 	ldr.w	r0, [r8]
 800fddc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fdde:	6803      	ldr	r3, [r0, #0]
 800fde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fde2:	4798      	blx	r3
 800fde4:	f1bb 0f01 	cmp.w	fp, #1
 800fde8:	eba5 0500 	sub.w	r5, r5, r0
 800fdec:	d0a4      	beq.n	800fd38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800fdee:	981c      	ldr	r0, [sp, #112]	; 0x70
 800fdf0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fdf2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800fdf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fdfa:	7b43      	ldrb	r3, [r0, #13]
 800fdfc:	4429      	add	r1, r5
 800fdfe:	015b      	lsls	r3, r3, #5
 800fe00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fe04:	7983      	ldrb	r3, [r0, #6]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	440b      	add	r3, r1
 800fe0a:	42b3      	cmp	r3, r6
 800fe0c:	db5c      	blt.n	800fec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fe0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe10:	4299      	cmp	r1, r3
 800fe12:	da59      	bge.n	800fec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fe14:	f8d8 0000 	ldr.w	r0, [r8]
 800fe18:	42ae      	cmp	r6, r5
 800fe1a:	6803      	ldr	r3, [r0, #0]
 800fe1c:	bfcc      	ite	gt
 800fe1e:	1b76      	subgt	r6, r6, r5
 800fe20:	2600      	movle	r6, #0
 800fe22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe24:	bfc8      	it	gt
 800fe26:	b2b6      	uxthgt	r6, r6
 800fe28:	4798      	blx	r3
 800fe2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fe2c:	7b5a      	ldrb	r2, [r3, #13]
 800fe2e:	00d1      	lsls	r1, r2, #3
 800fe30:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800fe34:	7a19      	ldrb	r1, [r3, #8]
 800fe36:	4339      	orrs	r1, r7
 800fe38:	0657      	lsls	r7, r2, #25
 800fe3a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800fe3c:	bf48      	it	mi
 800fe3e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800fe42:	4407      	add	r7, r0
 800fe44:	bf48      	it	mi
 800fe46:	b209      	sxthmi	r1, r1
 800fe48:	1a7f      	subs	r7, r7, r1
 800fe4a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800fe4c:	b2bf      	uxth	r7, r7
 800fe4e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800fe52:	fa0f fa87 	sxth.w	sl, r7
 800fe56:	4551      	cmp	r1, sl
 800fe58:	dd3a      	ble.n	800fed0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800fe5a:	0112      	lsls	r2, r2, #4
 800fe5c:	79d8      	ldrb	r0, [r3, #7]
 800fe5e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fe62:	4302      	orrs	r2, r0
 800fe64:	4492      	add	sl, r2
 800fe66:	4551      	cmp	r1, sl
 800fe68:	dc2e      	bgt.n	800fec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fe6a:	1bcf      	subs	r7, r1, r7
 800fe6c:	468a      	mov	sl, r1
 800fe6e:	b2bf      	uxth	r7, r7
 800fe70:	9319      	str	r3, [sp, #100]	; 0x64
 800fe72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe74:	f8d8 0000 	ldr.w	r0, [r8]
 800fe78:	681a      	ldr	r2, [r3, #0]
 800fe7a:	6801      	ldr	r1, [r0, #0]
 800fe7c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fe7e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fe80:	9313      	str	r3, [sp, #76]	; 0x4c
 800fe82:	9218      	str	r2, [sp, #96]	; 0x60
 800fe84:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800fe86:	4788      	blx	r1
 800fe88:	f898 1006 	ldrb.w	r1, [r8, #6]
 800fe8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe8e:	910b      	str	r1, [sp, #44]	; 0x2c
 800fe90:	f898 100e 	ldrb.w	r1, [r8, #14]
 800fe94:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fe96:	910a      	str	r1, [sp, #40]	; 0x28
 800fe98:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800fe9c:	9109      	str	r1, [sp, #36]	; 0x24
 800fe9e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fea2:	9305      	str	r3, [sp, #20]
 800fea4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fea6:	9206      	str	r2, [sp, #24]
 800fea8:	e9cd a601 	strd	sl, r6, [sp, #4]
 800feac:	442e      	add	r6, r5
 800feae:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800feb2:	b236      	sxth	r6, r6
 800feb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800feb6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800feba:	9600      	str	r6, [sp, #0]
 800febc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fec6:	47b0      	blx	r6
 800fec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800feca:	3301      	adds	r3, #1
 800fecc:	930e      	str	r3, [sp, #56]	; 0x38
 800fece:	e6e5      	b.n	800fc9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800fed0:	2700      	movs	r7, #0
 800fed2:	e7cd      	b.n	800fe70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800fed4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fed6:	3501      	adds	r5, #1
 800fed8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800feda:	429d      	cmp	r5, r3
 800fedc:	f6bf af76 	bge.w	800fdcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800fee0:	4659      	mov	r1, fp
 800fee2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fee4:	f7f4 fd30 	bl	8004948 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fee8:	4604      	mov	r4, r0
 800feea:	b110      	cbz	r0, 800fef2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800feec:	280a      	cmp	r0, #10
 800feee:	d1f2      	bne.n	800fed6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800fef0:	e76b      	b.n	800fdca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800fef2:	2400      	movs	r4, #0
 800fef4:	e76a      	b.n	800fdcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800fef6:	f1bb 0f00 	cmp.w	fp, #0
 800fefa:	f43f af5b 	beq.w	800fdb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800fefe:	e776      	b.n	800fdee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800ff00 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800ff00:	b530      	push	{r4, r5, lr}
 800ff02:	8a44      	ldrh	r4, [r0, #18]
 800ff04:	8ac5      	ldrh	r5, [r0, #22]
 800ff06:	82c3      	strh	r3, [r0, #22]
 800ff08:	442c      	add	r4, r5
 800ff0a:	1ae4      	subs	r4, r4, r3
 800ff0c:	8b03      	ldrh	r3, [r0, #24]
 800ff0e:	8244      	strh	r4, [r0, #18]
 800ff10:	8a84      	ldrh	r4, [r0, #20]
 800ff12:	4422      	add	r2, r4
 800ff14:	440c      	add	r4, r1
 800ff16:	1a59      	subs	r1, r3, r1
 800ff18:	8342      	strh	r2, [r0, #26]
 800ff1a:	8284      	strh	r4, [r0, #20]
 800ff1c:	8301      	strh	r1, [r0, #24]
 800ff1e:	bd30      	pop	{r4, r5, pc}

0800ff20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff24:	7a43      	ldrb	r3, [r0, #9]
 800ff26:	b087      	sub	sp, #28
 800ff28:	4604      	mov	r4, r0
 800ff2a:	460f      	mov	r7, r1
 800ff2c:	1eda      	subs	r2, r3, #3
 800ff2e:	b2d2      	uxtb	r2, r2
 800ff30:	2900      	cmp	r1, #0
 800ff32:	d036      	beq.n	800ffa2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800ff34:	2a01      	cmp	r2, #1
 800ff36:	d932      	bls.n	800ff9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800ff38:	1e58      	subs	r0, r3, #1
 800ff3a:	f1d0 0b00 	rsbs	fp, r0, #0
 800ff3e:	eb4b 0b00 	adc.w	fp, fp, r0
 800ff42:	1e99      	subs	r1, r3, #2
 800ff44:	424b      	negs	r3, r1
 800ff46:	414b      	adcs	r3, r1
 800ff48:	9303      	str	r3, [sp, #12]
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800ff50:	2500      	movs	r5, #0
 800ff52:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800ff56:	46a9      	mov	r9, r5
 800ff58:	8265      	strh	r5, [r4, #18]
 800ff5a:	82a5      	strh	r5, [r4, #20]
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	9305      	str	r3, [sp, #20]
 800ff60:	8823      	ldrh	r3, [r4, #0]
 800ff62:	2b20      	cmp	r3, #32
 800ff64:	d02b      	beq.n	800ffbe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800ff66:	eba3 020a 	sub.w	r2, r3, sl
 800ff6a:	4256      	negs	r6, r2
 800ff6c:	4156      	adcs	r6, r2
 800ff6e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d004      	beq.n	800ff80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800ff76:	4553      	cmp	r3, sl
 800ff78:	bf16      	itet	ne
 800ff7a:	4699      	movne	r9, r3
 800ff7c:	2601      	moveq	r6, #1
 800ff7e:	2600      	movne	r6, #0
 800ff80:	ab05      	add	r3, sp, #20
 800ff82:	68e2      	ldr	r2, [r4, #12]
 800ff84:	7a21      	ldrb	r1, [r4, #8]
 800ff86:	6860      	ldr	r0, [r4, #4]
 800ff88:	f002 fc88 	bl	801289c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ff8c:	8020      	strh	r0, [r4, #0]
 800ff8e:	b9c8      	cbnz	r0, 800ffc4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800ff90:	8b22      	ldrh	r2, [r4, #24]
 800ff92:	2300      	movs	r3, #0
 800ff94:	4611      	mov	r1, r2
 800ff96:	4620      	mov	r0, r4
 800ff98:	f7ff ffb2 	bl	800ff00 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800ff9c:	e066      	b.n	801006c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800ff9e:	468b      	mov	fp, r1
 800ffa0:	e7cf      	b.n	800ff42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800ffa2:	3b01      	subs	r3, #1
 800ffa4:	2a01      	cmp	r2, #1
 800ffa6:	9103      	str	r1, [sp, #12]
 800ffa8:	468b      	mov	fp, r1
 800ffaa:	bf8c      	ite	hi
 800ffac:	2200      	movhi	r2, #0
 800ffae:	2201      	movls	r2, #1
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	9202      	str	r2, [sp, #8]
 800ffb4:	bf8c      	ite	hi
 800ffb6:	2300      	movhi	r3, #0
 800ffb8:	2301      	movls	r3, #1
 800ffba:	9301      	str	r3, [sp, #4]
 800ffbc:	e7c8      	b.n	800ff50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800ffbe:	4699      	mov	r9, r3
 800ffc0:	2601      	movs	r6, #1
 800ffc2:	e7dd      	b.n	800ff80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800ffc4:	8ae3      	ldrh	r3, [r4, #22]
 800ffc6:	280a      	cmp	r0, #10
 800ffc8:	f103 0301 	add.w	r3, r3, #1
 800ffcc:	82e3      	strh	r3, [r4, #22]
 800ffce:	d0df      	beq.n	800ff90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800ffd0:	9a05      	ldr	r2, [sp, #20]
 800ffd2:	bb42      	cbnz	r2, 8010026 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800ffd4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ffd8:	4298      	cmp	r0, r3
 800ffda:	d001      	beq.n	800ffe0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800ffdc:	4550      	cmp	r0, sl
 800ffde:	d1bd      	bne.n	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800ffe0:	8823      	ldrh	r3, [r4, #0]
 800ffe2:	8b21      	ldrh	r1, [r4, #24]
 800ffe4:	2b20      	cmp	r3, #32
 800ffe6:	d001      	beq.n	800ffec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800ffe8:	4553      	cmp	r3, sl
 800ffea:	d131      	bne.n	8010050 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800ffec:	2e00      	cmp	r6, #0
 800ffee:	bf0a      	itet	eq
 800fff0:	460d      	moveq	r5, r1
 800fff2:	4630      	movne	r0, r6
 800fff4:	2001      	moveq	r0, #1
 800fff6:	440a      	add	r2, r1
 800fff8:	8aa3      	ldrh	r3, [r4, #20]
 800fffa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800fffe:	b292      	uxth	r2, r2
 8010000:	8322      	strh	r2, [r4, #24]
 8010002:	4413      	add	r3, r2
 8010004:	2f00      	cmp	r7, #0
 8010006:	d03a      	beq.n	801007e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8010008:	f1bb 0f00 	cmp.w	fp, #0
 801000c:	d102      	bne.n	8010014 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801000e:	9903      	ldr	r1, [sp, #12]
 8010010:	b301      	cbz	r1, 8010054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8010012:	b1f8      	cbz	r0, 8010054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8010014:	8ba1      	ldrh	r1, [r4, #28]
 8010016:	4419      	add	r1, r3
 8010018:	458c      	cmp	ip, r1
 801001a:	da2a      	bge.n	8010072 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801001c:	8a61      	ldrh	r1, [r4, #18]
 801001e:	b341      	cbz	r1, 8010072 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8010020:	4563      	cmp	r3, ip
 8010022:	dd9b      	ble.n	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010024:	e01c      	b.n	8010060 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8010026:	8893      	ldrh	r3, [r2, #4]
 8010028:	4649      	mov	r1, r9
 801002a:	8023      	strh	r3, [r4, #0]
 801002c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8010030:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8010034:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8010038:	f892 800a 	ldrb.w	r8, [r2, #10]
 801003c:	ea48 0800 	orr.w	r8, r8, r0
 8010040:	68e0      	ldr	r0, [r4, #12]
 8010042:	6803      	ldr	r3, [r0, #0]
 8010044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010046:	4798      	blx	r3
 8010048:	eb08 0200 	add.w	r2, r8, r0
 801004c:	b292      	uxth	r2, r2
 801004e:	e7c7      	b.n	800ffe0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8010050:	2000      	movs	r0, #0
 8010052:	e7d0      	b.n	800fff6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8010054:	4563      	cmp	r3, ip
 8010056:	dd81      	ble.n	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010058:	8a63      	ldrh	r3, [r4, #18]
 801005a:	2b00      	cmp	r3, #0
 801005c:	f43f af7e 	beq.w	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010060:	2301      	movs	r3, #1
 8010062:	8ba2      	ldrh	r2, [r4, #28]
 8010064:	77a3      	strb	r3, [r4, #30]
 8010066:	8b63      	ldrh	r3, [r4, #26]
 8010068:	4413      	add	r3, r2
 801006a:	8363      	strh	r3, [r4, #26]
 801006c:	b007      	add	sp, #28
 801006e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010072:	2300      	movs	r3, #0
 8010074:	4611      	mov	r1, r2
 8010076:	4620      	mov	r0, r4
 8010078:	f7ff ff42 	bl	800ff00 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801007c:	e76e      	b.n	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801007e:	4563      	cmp	r3, ip
 8010080:	dd14      	ble.n	80100ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8010082:	9b02      	ldr	r3, [sp, #8]
 8010084:	b113      	cbz	r3, 801008c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8010086:	2301      	movs	r3, #1
 8010088:	460a      	mov	r2, r1
 801008a:	e783      	b.n	800ff94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801008c:	9b01      	ldr	r3, [sp, #4]
 801008e:	2b00      	cmp	r3, #0
 8010090:	f43f af64 	beq.w	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010094:	2800      	cmp	r0, #0
 8010096:	f47f af61 	bne.w	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801009a:	b116      	cbz	r6, 80100a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801009c:	2301      	movs	r3, #1
 801009e:	462a      	mov	r2, r5
 80100a0:	e779      	b.n	800ff96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80100a2:	8a63      	ldrh	r3, [r4, #18]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f43f af59 	beq.w	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80100aa:	e7df      	b.n	801006c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80100ac:	2800      	cmp	r0, #0
 80100ae:	f47f af55 	bne.w	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80100b2:	2e00      	cmp	r6, #0
 80100b4:	f43f af52 	beq.w	800ff5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80100b8:	2301      	movs	r3, #1
 80100ba:	462a      	mov	r2, r5
 80100bc:	e7db      	b.n	8010076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080100be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80100be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c2:	b0df      	sub	sp, #380	; 0x17c
 80100c4:	4689      	mov	r9, r1
 80100c6:	461c      	mov	r4, r3
 80100c8:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 80100cc:	900a      	str	r0, [sp, #40]	; 0x28
 80100ce:	f1ba 0f00 	cmp.w	sl, #0
 80100d2:	f000 80b1 	beq.w	8010238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	f000 80ad 	beq.w	8010238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80100de:	7ba3      	ldrb	r3, [r4, #14]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f000 80a9 	beq.w	8010238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80100e6:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 80100ea:	6810      	ldr	r0, [r2, #0]
 80100ec:	6851      	ldr	r1, [r2, #4]
 80100ee:	2500      	movs	r5, #0
 80100f0:	4643      	mov	r3, r8
 80100f2:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80100f6:	950f      	str	r5, [sp, #60]	; 0x3c
 80100f8:	af19      	add	r7, sp, #100	; 0x64
 80100fa:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80100fe:	79a2      	ldrb	r2, [r4, #6]
 8010100:	c303      	stmia	r3!, {r0, r1}
 8010102:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8010106:	a90f      	add	r1, sp, #60	; 0x3c
 8010108:	4640      	mov	r0, r8
 801010a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801010e:	f7ff fd65 	bl	800fbdc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8010112:	a90f      	add	r1, sp, #60	; 0x3c
 8010114:	79a2      	ldrb	r2, [r4, #6]
 8010116:	4608      	mov	r0, r1
 8010118:	f7ff fd60 	bl	800fbdc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801011c:	4638      	mov	r0, r7
 801011e:	f002 f874 	bl	801220a <_ZN8touchgfx12TextProviderC1Ev>
 8010122:	6820      	ldr	r0, [r4, #0]
 8010124:	6803      	ldr	r3, [r0, #0]
 8010126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010128:	4798      	blx	r3
 801012a:	4606      	mov	r6, r0
 801012c:	6820      	ldr	r0, [r4, #0]
 801012e:	6803      	ldr	r3, [r0, #0]
 8010130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010132:	4798      	blx	r3
 8010134:	4633      	mov	r3, r6
 8010136:	9000      	str	r0, [sp, #0]
 8010138:	4651      	mov	r1, sl
 801013a:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801013c:	4638      	mov	r0, r7
 801013e:	f002 f8b1 	bl	80122a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010142:	7923      	ldrb	r3, [r4, #4]
 8010144:	6820      	ldr	r0, [r4, #0]
 8010146:	9308      	str	r3, [sp, #32]
 8010148:	6803      	ldr	r3, [r0, #0]
 801014a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801014c:	4798      	blx	r3
 801014e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010152:	181e      	adds	r6, r3, r0
 8010154:	42ae      	cmp	r6, r5
 8010156:	dd06      	ble.n	8010166 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8010158:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801015c:	4282      	cmp	r2, r0
 801015e:	bfa4      	itt	ge
 8010160:	189d      	addge	r5, r3, r2
 8010162:	fb95 f5f6 	sdivge	r5, r5, r6
 8010166:	a830      	add	r0, sp, #192	; 0xc0
 8010168:	f002 f84f 	bl	801220a <_ZN8touchgfx12TextProviderC1Ev>
 801016c:	7c23      	ldrb	r3, [r4, #16]
 801016e:	b17b      	cbz	r3, 8010190 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8010170:	6820      	ldr	r0, [r4, #0]
 8010172:	6803      	ldr	r3, [r0, #0]
 8010174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010176:	4798      	blx	r3
 8010178:	4683      	mov	fp, r0
 801017a:	6820      	ldr	r0, [r4, #0]
 801017c:	6803      	ldr	r3, [r0, #0]
 801017e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010180:	4798      	blx	r3
 8010182:	465b      	mov	r3, fp
 8010184:	9000      	str	r0, [sp, #0]
 8010186:	4651      	mov	r1, sl
 8010188:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801018a:	a830      	add	r0, sp, #192	; 0xc0
 801018c:	f002 f88a 	bl	80122a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010190:	7c21      	ldrb	r1, [r4, #16]
 8010192:	a811      	add	r0, sp, #68	; 0x44
 8010194:	7963      	ldrb	r3, [r4, #5]
 8010196:	9101      	str	r1, [sp, #4]
 8010198:	6821      	ldr	r1, [r4, #0]
 801019a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801019e:	9100      	str	r1, [sp, #0]
 80101a0:	a930      	add	r1, sp, #192	; 0xc0
 80101a2:	f7ff fca5 	bl	800faf0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80101a6:	7c23      	ldrb	r3, [r4, #16]
 80101a8:	b9bb      	cbnz	r3, 80101da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 80101aa:	fa1f fa86 	uxth.w	sl, r6
 80101ae:	2d00      	cmp	r5, #0
 80101b0:	dd45      	ble.n	801023e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80101b2:	4638      	mov	r0, r7
 80101b4:	f002 fc6a 	bl	8012a8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d03d      	beq.n	8010238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80101bc:	280a      	cmp	r0, #10
 80101be:	d1f6      	bne.n	80101ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 80101c0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80101c4:	3d01      	subs	r5, #1
 80101c6:	4453      	add	r3, sl
 80101c8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80101cc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80101d0:	eba3 030a 	sub.w	r3, r3, sl
 80101d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80101d8:	e7e9      	b.n	80101ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 80101da:	0073      	lsls	r3, r6, #1
 80101dc:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80101e0:	fa1f fa86 	uxth.w	sl, r6
 80101e4:	9309      	str	r3, [sp, #36]	; 0x24
 80101e6:	2d00      	cmp	r5, #0
 80101e8:	dd29      	ble.n	801023e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80101ea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80101ee:	a811      	add	r0, sp, #68	; 0x44
 80101f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101f2:	428b      	cmp	r3, r1
 80101f4:	bfd4      	ite	le
 80101f6:	2100      	movle	r1, #0
 80101f8:	2101      	movgt	r1, #1
 80101fa:	f7ff fe91 	bl	800ff20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80101fe:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8010202:	3b01      	subs	r3, #1
 8010204:	b29b      	uxth	r3, r3
 8010206:	455b      	cmp	r3, fp
 8010208:	930b      	str	r3, [sp, #44]	; 0x2c
 801020a:	d005      	beq.n	8010218 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 801020c:	7961      	ldrb	r1, [r4, #5]
 801020e:	4638      	mov	r0, r7
 8010210:	f7f4 fb9a 	bl	8004948 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010216:	e7f4      	b.n	8010202 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8010218:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801021c:	3d01      	subs	r5, #1
 801021e:	4453      	add	r3, sl
 8010220:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010224:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8010228:	eba3 030a 	sub.w	r3, r3, sl
 801022c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8010230:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1d6      	bne.n	80101e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 8010238:	b05f      	add	sp, #380	; 0x17c
 801023a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801023e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8010242:	ad47      	add	r5, sp, #284	; 0x11c
 8010244:	f04f 0b00 	mov.w	fp, #0
 8010248:	7c23      	ldrb	r3, [r4, #16]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d067      	beq.n	801031e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801024e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8010252:	a811      	add	r0, sp, #68	; 0x44
 8010254:	458a      	cmp	sl, r1
 8010256:	bfd4      	ite	le
 8010258:	2100      	movle	r1, #0
 801025a:	2101      	movgt	r1, #1
 801025c:	f7ff fe60 	bl	800ff20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8010260:	9b08      	ldr	r3, [sp, #32]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d056      	beq.n	8010314 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8010266:	7c23      	ldrb	r3, [r4, #16]
 8010268:	225c      	movs	r2, #92	; 0x5c
 801026a:	4639      	mov	r1, r7
 801026c:	4628      	mov	r0, r5
 801026e:	9309      	str	r3, [sp, #36]	; 0x24
 8010270:	f00b fc26 	bl	801bac0 <memcpy>
 8010274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010276:	2b00      	cmp	r3, #0
 8010278:	d059      	beq.n	801032e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801027a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801027e:	7922      	ldrb	r2, [r4, #4]
 8010280:	2a01      	cmp	r2, #1
 8010282:	d13d      	bne.n	8010300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8010284:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8010288:	1ac0      	subs	r0, r0, r3
 801028a:	2302      	movs	r3, #2
 801028c:	fb90 f0f3 	sdiv	r0, r0, r3
 8010290:	b200      	sxth	r0, r0
 8010292:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010296:	4418      	add	r0, r3
 8010298:	7c23      	ldrb	r3, [r4, #16]
 801029a:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d03a      	beq.n	8010318 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 80102a2:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 80102a6:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 80102aa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80102ae:	9500      	str	r5, [sp, #0]
 80102b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80102b2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80102b6:	e9cd b703 	strd	fp, r7, [sp, #12]
 80102ba:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80102be:	464a      	mov	r2, r9
 80102c0:	2100      	movs	r1, #0
 80102c2:	f7ff fcbc 	bl	800fc3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80102c6:	2800      	cmp	r0, #0
 80102c8:	d1b6      	bne.n	8010238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80102ca:	b2b2      	uxth	r2, r6
 80102cc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80102d0:	4611      	mov	r1, r2
 80102d2:	4413      	add	r3, r2
 80102d4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80102d8:	b21b      	sxth	r3, r3
 80102da:	1a52      	subs	r2, r2, r1
 80102dc:	7c21      	ldrb	r1, [r4, #16]
 80102de:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80102e2:	b212      	sxth	r2, r2
 80102e4:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80102e8:	b109      	cbz	r1, 80102ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 80102ea:	42b2      	cmp	r2, r6
 80102ec:	dba4      	blt.n	8010238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80102ee:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80102f2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80102f6:	440a      	add	r2, r1
 80102f8:	b212      	sxth	r2, r2
 80102fa:	4293      	cmp	r3, r2
 80102fc:	dda4      	ble.n	8010248 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 80102fe:	e79b      	b.n	8010238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8010300:	2a02      	cmp	r2, #2
 8010302:	d105      	bne.n	8010310 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8010304:	7be2      	ldrb	r2, [r4, #15]
 8010306:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801030a:	1a80      	subs	r0, r0, r2
 801030c:	1ac0      	subs	r0, r0, r3
 801030e:	e7bf      	b.n	8010290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 8010310:	2000      	movs	r0, #0
 8010312:	e7be      	b.n	8010292 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8010314:	7be0      	ldrb	r0, [r4, #15]
 8010316:	e7bc      	b.n	8010292 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8010318:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801031c:	e7c3      	b.n	80102a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801031e:	9b08      	ldr	r3, [sp, #32]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d0f7      	beq.n	8010314 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8010324:	225c      	movs	r2, #92	; 0x5c
 8010326:	4639      	mov	r1, r7
 8010328:	4628      	mov	r0, r5
 801032a:	f00b fbc9 	bl	801bac0 <memcpy>
 801032e:	2300      	movs	r3, #0
 8010330:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010334:	6821      	ldr	r1, [r4, #0]
 8010336:	4628      	mov	r0, r5
 8010338:	f7ff fc14 	bl	800fb64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801033c:	b203      	sxth	r3, r0
 801033e:	e79e      	b.n	801027e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

08010340 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8010340:	2b02      	cmp	r3, #2
 8010342:	b510      	push	{r4, lr}
 8010344:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010348:	d00b      	beq.n	8010362 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801034a:	2b03      	cmp	r3, #3
 801034c:	d00e      	beq.n	801036c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801034e:	2b01      	cmp	r3, #1
 8010350:	d001      	beq.n	8010356 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8010352:	1860      	adds	r0, r4, r1
 8010354:	bd10      	pop	{r4, pc}
 8010356:	8880      	ldrh	r0, [r0, #4]
 8010358:	4420      	add	r0, r4
 801035a:	b200      	sxth	r0, r0
 801035c:	1a80      	subs	r0, r0, r2
 801035e:	3801      	subs	r0, #1
 8010360:	e7f8      	b.n	8010354 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8010362:	8880      	ldrh	r0, [r0, #4]
 8010364:	4420      	add	r0, r4
 8010366:	b200      	sxth	r0, r0
 8010368:	1a40      	subs	r0, r0, r1
 801036a:	e7f8      	b.n	801035e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801036c:	18a0      	adds	r0, r4, r2
 801036e:	e7f1      	b.n	8010354 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08010370 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8010370:	2b02      	cmp	r3, #2
 8010372:	b510      	push	{r4, lr}
 8010374:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8010378:	d006      	beq.n	8010388 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801037a:	2b03      	cmp	r3, #3
 801037c:	d00a      	beq.n	8010394 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801037e:	2b01      	cmp	r3, #1
 8010380:	bf14      	ite	ne
 8010382:	18a0      	addne	r0, r4, r2
 8010384:	1860      	addeq	r0, r4, r1
 8010386:	bd10      	pop	{r4, pc}
 8010388:	88c0      	ldrh	r0, [r0, #6]
 801038a:	4420      	add	r0, r4
 801038c:	b200      	sxth	r0, r0
 801038e:	1a80      	subs	r0, r0, r2
 8010390:	3801      	subs	r0, #1
 8010392:	e7f8      	b.n	8010386 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8010394:	88c0      	ldrh	r0, [r0, #6]
 8010396:	4420      	add	r0, r4
 8010398:	b200      	sxth	r0, r0
 801039a:	1a40      	subs	r0, r0, r1
 801039c:	e7f8      	b.n	8010390 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080103a0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80103a0:	4b01      	ldr	r3, [pc, #4]	; (80103a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	4770      	bx	lr
 80103a8:	2000df74 	.word	0x2000df74

080103ac <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80103ac:	4603      	mov	r3, r0
 80103ae:	b1c8      	cbz	r0, 80103e4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80103b0:	0c02      	lsrs	r2, r0, #16
 80103b2:	0412      	lsls	r2, r2, #16
 80103b4:	b9a2      	cbnz	r2, 80103e0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80103b6:	0403      	lsls	r3, r0, #16
 80103b8:	2010      	movs	r0, #16
 80103ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80103be:	bf04      	itt	eq
 80103c0:	021b      	lsleq	r3, r3, #8
 80103c2:	3008      	addeq	r0, #8
 80103c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80103c8:	bf04      	itt	eq
 80103ca:	011b      	lsleq	r3, r3, #4
 80103cc:	3004      	addeq	r0, #4
 80103ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80103d2:	bf04      	itt	eq
 80103d4:	009b      	lsleq	r3, r3, #2
 80103d6:	3002      	addeq	r0, #2
 80103d8:	2b00      	cmp	r3, #0
 80103da:	db04      	blt.n	80103e6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80103dc:	3001      	adds	r0, #1
 80103de:	4770      	bx	lr
 80103e0:	2000      	movs	r0, #0
 80103e2:	e7ea      	b.n	80103ba <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80103e4:	2020      	movs	r0, #32
 80103e6:	4770      	bx	lr

080103e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80103e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ec:	b087      	sub	sp, #28
 80103ee:	4681      	mov	r9, r0
 80103f0:	4698      	mov	r8, r3
 80103f2:	4610      	mov	r0, r2
 80103f4:	460d      	mov	r5, r1
 80103f6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80103fa:	b981      	cbnz	r1, 801041e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80103fc:	b14b      	cbz	r3, 8010412 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80103fe:	460b      	mov	r3, r1
 8010400:	464a      	mov	r2, r9
 8010402:	4641      	mov	r1, r8
 8010404:	e9cd 4700 	strd	r4, r7, [sp]
 8010408:	f7ff ffee 	bl	80103e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801040c:	b007      	add	sp, #28
 801040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010412:	f04f 33ff 	mov.w	r3, #4294967295
 8010416:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801041a:	603b      	str	r3, [r7, #0]
 801041c:	e7f6      	b.n	801040c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801041e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8010422:	d107      	bne.n	8010434 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8010424:	fb09 f602 	mul.w	r6, r9, r2
 8010428:	fbb6 f0f4 	udiv	r0, r6, r4
 801042c:	fb04 6610 	mls	r6, r4, r0, r6
 8010430:	603e      	str	r6, [r7, #0]
 8010432:	e7eb      	b.n	801040c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8010434:	2601      	movs	r6, #1
 8010436:	fa09 fb01 	lsl.w	fp, r9, r1
 801043a:	408e      	lsls	r6, r1
 801043c:	fbbb f3f4 	udiv	r3, fp, r4
 8010440:	3e01      	subs	r6, #1
 8010442:	9302      	str	r3, [sp, #8]
 8010444:	fb0a f303 	mul.w	r3, sl, r3
 8010448:	4016      	ands	r6, r2
 801044a:	9303      	str	r3, [sp, #12]
 801044c:	4630      	mov	r0, r6
 801044e:	f7ff ffad 	bl	80103ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010452:	464a      	mov	r2, r9
 8010454:	460b      	mov	r3, r1
 8010456:	4601      	mov	r1, r0
 8010458:	4630      	mov	r0, r6
 801045a:	e9cd 4700 	strd	r4, r7, [sp]
 801045e:	f7ff ffc3 	bl	80103e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010462:	9b02      	ldr	r3, [sp, #8]
 8010464:	4606      	mov	r6, r0
 8010466:	eb05 0108 	add.w	r1, r5, r8
 801046a:	fb04 bb13 	mls	fp, r4, r3, fp
 801046e:	4658      	mov	r0, fp
 8010470:	f7ff ff9c 	bl	80103ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010474:	ab05      	add	r3, sp, #20
 8010476:	465a      	mov	r2, fp
 8010478:	e9cd 4300 	strd	r4, r3, [sp]
 801047c:	4603      	mov	r3, r0
 801047e:	4650      	mov	r0, sl
 8010480:	f7ff ffb2 	bl	80103e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010484:	6839      	ldr	r1, [r7, #0]
 8010486:	9a05      	ldr	r2, [sp, #20]
 8010488:	9b03      	ldr	r3, [sp, #12]
 801048a:	4411      	add	r1, r2
 801048c:	fbb1 f2f4 	udiv	r2, r1, r4
 8010490:	18d3      	adds	r3, r2, r3
 8010492:	fb04 1412 	mls	r4, r4, r2, r1
 8010496:	441e      	add	r6, r3
 8010498:	603c      	str	r4, [r7, #0]
 801049a:	4430      	add	r0, r6
 801049c:	e7b6      	b.n	801040c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801049e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801049e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104a2:	b085      	sub	sp, #20
 80104a4:	f1b0 0900 	subs.w	r9, r0, #0
 80104a8:	461d      	mov	r5, r3
 80104aa:	4617      	mov	r7, r2
 80104ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80104ae:	bfbb      	ittet	lt
 80104b0:	f1c9 0900 	rsblt	r9, r9, #0
 80104b4:	f04f 36ff 	movlt.w	r6, #4294967295
 80104b8:	2601      	movge	r6, #1
 80104ba:	6823      	ldrlt	r3, [r4, #0]
 80104bc:	bfbc      	itt	lt
 80104be:	425b      	neglt	r3, r3
 80104c0:	6023      	strlt	r3, [r4, #0]
 80104c2:	2a00      	cmp	r2, #0
 80104c4:	da04      	bge.n	80104d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80104c6:	6823      	ldr	r3, [r4, #0]
 80104c8:	4257      	negs	r7, r2
 80104ca:	4276      	negs	r6, r6
 80104cc:	425b      	negs	r3, r3
 80104ce:	6023      	str	r3, [r4, #0]
 80104d0:	2d00      	cmp	r5, #0
 80104d2:	4638      	mov	r0, r7
 80104d4:	bfba      	itte	lt
 80104d6:	426d      	neglt	r5, r5
 80104d8:	f04f 38ff 	movlt.w	r8, #4294967295
 80104dc:	f04f 0801 	movge.w	r8, #1
 80104e0:	f7ff ff64 	bl	80103ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 80104e4:	ab03      	add	r3, sp, #12
 80104e6:	463a      	mov	r2, r7
 80104e8:	e9cd 5300 	strd	r5, r3, [sp]
 80104ec:	4603      	mov	r3, r0
 80104ee:	4648      	mov	r0, r9
 80104f0:	f7ff ff7a 	bl	80103e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80104f4:	6823      	ldr	r3, [r4, #0]
 80104f6:	9a03      	ldr	r2, [sp, #12]
 80104f8:	4546      	cmp	r6, r8
 80104fa:	441a      	add	r2, r3
 80104fc:	fb92 f3f5 	sdiv	r3, r2, r5
 8010500:	4418      	add	r0, r3
 8010502:	fb05 2313 	mls	r3, r5, r3, r2
 8010506:	bf18      	it	ne
 8010508:	4240      	negne	r0, r0
 801050a:	1c72      	adds	r2, r6, #1
 801050c:	6023      	str	r3, [r4, #0]
 801050e:	d105      	bne.n	801051c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8010510:	2b00      	cmp	r3, #0
 8010512:	f1c3 0200 	rsb	r2, r3, #0
 8010516:	db0b      	blt.n	8010530 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8010518:	6022      	str	r2, [r4, #0]
 801051a:	e006      	b.n	801052a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801051c:	2e01      	cmp	r6, #1
 801051e:	d104      	bne.n	801052a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8010520:	2b00      	cmp	r3, #0
 8010522:	da02      	bge.n	801052a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8010524:	442b      	add	r3, r5
 8010526:	3801      	subs	r0, #1
 8010528:	6023      	str	r3, [r4, #0]
 801052a:	b005      	add	sp, #20
 801052c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010530:	3801      	subs	r0, #1
 8010532:	1b52      	subs	r2, r2, r5
 8010534:	e7f0      	b.n	8010518 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08010538 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8010538:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801053c:	4c1c      	ldr	r4, [pc, #112]	; (80105b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801053e:	4605      	mov	r5, r0
 8010540:	6807      	ldr	r7, [r0, #0]
 8010542:	69a3      	ldr	r3, [r4, #24]
 8010544:	b92b      	cbnz	r3, 8010552 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8010546:	6840      	ldr	r0, [r0, #4]
 8010548:	e9c5 7000 	strd	r7, r0, [r5]
 801054c:	b004      	add	sp, #16
 801054e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010552:	f04f 0802 	mov.w	r8, #2
 8010556:	68a2      	ldr	r2, [r4, #8]
 8010558:	ae04      	add	r6, sp, #16
 801055a:	6820      	ldr	r0, [r4, #0]
 801055c:	fb93 f1f8 	sdiv	r1, r3, r8
 8010560:	440a      	add	r2, r1
 8010562:	69e1      	ldr	r1, [r4, #28]
 8010564:	f846 2d04 	str.w	r2, [r6, #-4]!
 8010568:	463a      	mov	r2, r7
 801056a:	9600      	str	r6, [sp, #0]
 801056c:	f7ff ff97 	bl	801049e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8010570:	69a3      	ldr	r3, [r4, #24]
 8010572:	4607      	mov	r7, r0
 8010574:	686a      	ldr	r2, [r5, #4]
 8010576:	6a21      	ldr	r1, [r4, #32]
 8010578:	9600      	str	r6, [sp, #0]
 801057a:	6860      	ldr	r0, [r4, #4]
 801057c:	f7ff ff8f 	bl	801049e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8010580:	69a3      	ldr	r3, [r4, #24]
 8010582:	6962      	ldr	r2, [r4, #20]
 8010584:	4407      	add	r7, r0
 8010586:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010588:	9600      	str	r6, [sp, #0]
 801058a:	68e0      	ldr	r0, [r4, #12]
 801058c:	fb93 f8f8 	sdiv	r8, r3, r8
 8010590:	4442      	add	r2, r8
 8010592:	9203      	str	r2, [sp, #12]
 8010594:	682a      	ldr	r2, [r5, #0]
 8010596:	f7ff ff82 	bl	801049e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801059a:	4680      	mov	r8, r0
 801059c:	9600      	str	r6, [sp, #0]
 801059e:	69a3      	ldr	r3, [r4, #24]
 80105a0:	686a      	ldr	r2, [r5, #4]
 80105a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80105a4:	6920      	ldr	r0, [r4, #16]
 80105a6:	f7ff ff7a 	bl	801049e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80105aa:	4440      	add	r0, r8
 80105ac:	e7cc      	b.n	8010548 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80105ae:	bf00      	nop
 80105b0:	2000df78 	.word	0x2000df78

080105b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80105b4:	4b07      	ldr	r3, [pc, #28]	; (80105d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80105b6:	b510      	push	{r4, lr}
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d108      	bne.n	80105d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80105be:	4b06      	ldr	r3, [pc, #24]	; (80105d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80105c0:	880c      	ldrh	r4, [r1, #0]
 80105c2:	881b      	ldrh	r3, [r3, #0]
 80105c4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80105c8:	3b01      	subs	r3, #1
 80105ca:	1b1b      	subs	r3, r3, r4
 80105cc:	8003      	strh	r3, [r0, #0]
 80105ce:	800a      	strh	r2, [r1, #0]
 80105d0:	bd10      	pop	{r4, pc}
 80105d2:	bf00      	nop
 80105d4:	2000df64 	.word	0x2000df64
 80105d8:	2000df68 	.word	0x2000df68

080105dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80105dc:	4b0a      	ldr	r3, [pc, #40]	; (8010608 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80105de:	b510      	push	{r4, lr}
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d10e      	bne.n	8010604 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80105e6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80105ea:	8843      	ldrh	r3, [r0, #2]
 80105ec:	f9b0 4000 	ldrsh.w	r4, [r0]
 80105f0:	18ca      	adds	r2, r1, r3
 80105f2:	4b06      	ldr	r3, [pc, #24]	; (801060c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80105f4:	8044      	strh	r4, [r0, #2]
 80105f6:	881b      	ldrh	r3, [r3, #0]
 80105f8:	1a9b      	subs	r3, r3, r2
 80105fa:	8003      	strh	r3, [r0, #0]
 80105fc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010600:	8081      	strh	r1, [r0, #4]
 8010602:	80c3      	strh	r3, [r0, #6]
 8010604:	bd10      	pop	{r4, pc}
 8010606:	bf00      	nop
 8010608:	2000df64 	.word	0x2000df64
 801060c:	2000df60 	.word	0x2000df60

08010610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8010610:	4b07      	ldr	r3, [pc, #28]	; (8010630 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8010612:	b510      	push	{r4, lr}
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	2b01      	cmp	r3, #1
 8010618:	d108      	bne.n	801062c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801061a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801061e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010622:	8003      	strh	r3, [r0, #0]
 8010624:	8893      	ldrh	r3, [r2, #4]
 8010626:	3b01      	subs	r3, #1
 8010628:	1b1b      	subs	r3, r3, r4
 801062a:	800b      	strh	r3, [r1, #0]
 801062c:	bd10      	pop	{r4, pc}
 801062e:	bf00      	nop
 8010630:	2000df64 	.word	0x2000df64

08010634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8010634:	4b08      	ldr	r3, [pc, #32]	; (8010658 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8010636:	b513      	push	{r0, r1, r4, lr}
 8010638:	f9b3 2000 	ldrsh.w	r2, [r3]
 801063c:	2400      	movs	r4, #0
 801063e:	4b07      	ldr	r3, [pc, #28]	; (801065c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8010640:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010644:	466a      	mov	r2, sp
 8010646:	f9b3 3000 	ldrsh.w	r3, [r3]
 801064a:	9400      	str	r4, [sp, #0]
 801064c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010650:	f7ff ffde 	bl	8010610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8010654:	b002      	add	sp, #8
 8010656:	bd10      	pop	{r4, pc}
 8010658:	2000df60 	.word	0x2000df60
 801065c:	2000df62 	.word	0x2000df62

08010660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8010660:	4b0a      	ldr	r3, [pc, #40]	; (801068c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8010662:	460a      	mov	r2, r1
 8010664:	b510      	push	{r4, lr}
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d10d      	bne.n	8010688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801066c:	8881      	ldrh	r1, [r0, #4]
 801066e:	8803      	ldrh	r3, [r0, #0]
 8010670:	440b      	add	r3, r1
 8010672:	4601      	mov	r1, r0
 8010674:	3b01      	subs	r3, #1
 8010676:	f821 3b02 	strh.w	r3, [r1], #2
 801067a:	f7ff ffc9 	bl	8010610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801067e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010682:	88c2      	ldrh	r2, [r0, #6]
 8010684:	80c3      	strh	r3, [r0, #6]
 8010686:	8082      	strh	r2, [r0, #4]
 8010688:	bd10      	pop	{r4, pc}
 801068a:	bf00      	nop
 801068c:	2000df64 	.word	0x2000df64

08010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8010690:	4b09      	ldr	r3, [pc, #36]	; (80106b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8010692:	b507      	push	{r0, r1, r2, lr}
 8010694:	2100      	movs	r1, #0
 8010696:	f9b3 2000 	ldrsh.w	r2, [r3]
 801069a:	4b08      	ldr	r3, [pc, #32]	; (80106bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801069c:	9100      	str	r1, [sp, #0]
 801069e:	4669      	mov	r1, sp
 80106a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106a4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80106a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80106ac:	f7ff ffd8 	bl	8010660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80106b0:	b003      	add	sp, #12
 80106b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80106b6:	bf00      	nop
 80106b8:	2000df60 	.word	0x2000df60
 80106bc:	2000df62 	.word	0x2000df62

080106c0 <_ZN8touchgfx11Application13requestRedrawEv>:
 80106c0:	4b06      	ldr	r3, [pc, #24]	; (80106dc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80106c2:	2100      	movs	r1, #0
 80106c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80106c8:	4b05      	ldr	r3, [pc, #20]	; (80106e0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80106ca:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80106ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106d2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 80106d6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80106da:	4770      	bx	lr
 80106dc:	2000df60 	.word	0x2000df60
 80106e0:	2000df62 	.word	0x2000df62

080106e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80106e4:	4b03      	ldr	r3, [pc, #12]	; (80106f4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80106e6:	6818      	ldr	r0, [r3, #0]
 80106e8:	b110      	cbz	r0, 80106f0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80106ea:	6803      	ldr	r3, [r0, #0]
 80106ec:	699b      	ldr	r3, [r3, #24]
 80106ee:	4718      	bx	r3
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	2000dfa8 	.word	0x2000dfa8

080106f8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80106f8:	4770      	bx	lr
	...

080106fc <_ZN8touchgfx11Application4drawEv>:
 80106fc:	4b09      	ldr	r3, [pc, #36]	; (8010724 <_ZN8touchgfx11Application4drawEv+0x28>)
 80106fe:	b507      	push	{r0, r1, r2, lr}
 8010700:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010704:	2100      	movs	r1, #0
 8010706:	4b08      	ldr	r3, [pc, #32]	; (8010728 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8010708:	9100      	str	r1, [sp, #0]
 801070a:	4669      	mov	r1, sp
 801070c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010710:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010714:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010718:	6803      	ldr	r3, [r0, #0]
 801071a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801071c:	4798      	blx	r3
 801071e:	b003      	add	sp, #12
 8010720:	f85d fb04 	ldr.w	pc, [sp], #4
 8010724:	2000df60 	.word	0x2000df60
 8010728:	2000df62 	.word	0x2000df62

0801072c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801072c:	4b03      	ldr	r3, [pc, #12]	; (801073c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801072e:	6818      	ldr	r0, [r3, #0]
 8010730:	b110      	cbz	r0, 8010738 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8010732:	6803      	ldr	r3, [r0, #0]
 8010734:	69db      	ldr	r3, [r3, #28]
 8010736:	4718      	bx	r3
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop
 801073c:	2000dfa8 	.word	0x2000dfa8

08010740 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8010740:	4b03      	ldr	r3, [pc, #12]	; (8010750 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8010742:	6818      	ldr	r0, [r3, #0]
 8010744:	b110      	cbz	r0, 801074c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8010746:	6803      	ldr	r3, [r0, #0]
 8010748:	6a1b      	ldr	r3, [r3, #32]
 801074a:	4718      	bx	r3
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop
 8010750:	2000dfa8 	.word	0x2000dfa8

08010754 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8010754:	4b03      	ldr	r3, [pc, #12]	; (8010764 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8010756:	6818      	ldr	r0, [r3, #0]
 8010758:	b110      	cbz	r0, 8010760 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801075a:	6803      	ldr	r3, [r0, #0]
 801075c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801075e:	4718      	bx	r3
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	2000dfa8 	.word	0x2000dfa8

08010768 <_ZN8touchgfx11Application15handleTickEventEv>:
 8010768:	b570      	push	{r4, r5, r6, lr}
 801076a:	4d34      	ldr	r5, [pc, #208]	; (801083c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801076c:	4604      	mov	r4, r0
 801076e:	6828      	ldr	r0, [r5, #0]
 8010770:	b140      	cbz	r0, 8010784 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8010772:	7a03      	ldrb	r3, [r0, #8]
 8010774:	b933      	cbnz	r3, 8010784 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8010776:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801077a:	6803      	ldr	r3, [r0, #0]
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010782:	4718      	bx	r3
 8010784:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8010788:	b97b      	cbnz	r3, 80107aa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801078a:	b170      	cbz	r0, 80107aa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801078c:	7a03      	ldrb	r3, [r0, #8]
 801078e:	b163      	cbz	r3, 80107aa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010790:	4b2b      	ldr	r3, [pc, #172]	; (8010840 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8010792:	6818      	ldr	r0, [r3, #0]
 8010794:	b110      	cbz	r0, 801079c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8010796:	6803      	ldr	r3, [r0, #0]
 8010798:	691b      	ldr	r3, [r3, #16]
 801079a:	4798      	blx	r3
 801079c:	6828      	ldr	r0, [r5, #0]
 801079e:	6803      	ldr	r3, [r0, #0]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	4798      	blx	r3
 80107a4:	2301      	movs	r3, #1
 80107a6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80107aa:	2500      	movs	r5, #0
 80107ac:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80107b0:	42a8      	cmp	r0, r5
 80107b2:	dd0c      	ble.n	80107ce <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80107b4:	1963      	adds	r3, r4, r5
 80107b6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80107ba:	b132      	cbz	r2, 80107ca <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80107bc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80107c0:	4413      	add	r3, r2
 80107c2:	6858      	ldr	r0, [r3, #4]
 80107c4:	6803      	ldr	r3, [r0, #0]
 80107c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107c8:	4798      	blx	r3
 80107ca:	3501      	adds	r5, #1
 80107cc:	e7ee      	b.n	80107ac <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80107ce:	2300      	movs	r3, #0
 80107d0:	461a      	mov	r2, r3
 80107d2:	4298      	cmp	r0, r3
 80107d4:	d114      	bne.n	8010800 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 80107d6:	1d25      	adds	r5, r4, #4
 80107d8:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80107dc:	1e48      	subs	r0, r1, #1
 80107de:	b280      	uxth	r0, r0
 80107e0:	4291      	cmp	r1, r2
 80107e2:	dd24      	ble.n	801082e <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 80107e4:	4288      	cmp	r0, r1
 80107e6:	d2fb      	bcs.n	80107e0 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 80107e8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 80107ec:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80107f0:	3304      	adds	r3, #4
 80107f2:	428b      	cmp	r3, r1
 80107f4:	d018      	beq.n	8010828 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 80107f6:	f853 6f04 	ldr.w	r6, [r3, #4]!
 80107fa:	f843 6c04 	str.w	r6, [r3, #-4]
 80107fe:	e7f8      	b.n	80107f2 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8010800:	18e1      	adds	r1, r4, r3
 8010802:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8010806:	b16d      	cbz	r5, 8010824 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8010808:	429a      	cmp	r2, r3
 801080a:	d00a      	beq.n	8010822 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801080c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8010810:	4431      	add	r1, r6
 8010812:	684e      	ldr	r6, [r1, #4]
 8010814:	b291      	uxth	r1, r2
 8010816:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801081a:	604e      	str	r6, [r1, #4]
 801081c:	18a1      	adds	r1, r4, r2
 801081e:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8010822:	3201      	adds	r2, #1
 8010824:	3301      	adds	r3, #1
 8010826:	e7d4      	b.n	80107d2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8010828:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801082c:	e7d4      	b.n	80107d8 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801082e:	4b04      	ldr	r3, [pc, #16]	; (8010840 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8010830:	6818      	ldr	r0, [r3, #0]
 8010832:	b110      	cbz	r0, 801083a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8010834:	6803      	ldr	r3, [r0, #0]
 8010836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010838:	e7a1      	b.n	801077e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801083a:	bd70      	pop	{r4, r5, r6, pc}
 801083c:	2000dfac 	.word	0x2000dfac
 8010840:	2000dfa8 	.word	0x2000dfa8

08010844 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8010844:	b570      	push	{r4, r5, r6, lr}
 8010846:	4606      	mov	r6, r0
 8010848:	460c      	mov	r4, r1
 801084a:	b929      	cbnz	r1, 8010858 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801084c:	4b0c      	ldr	r3, [pc, #48]	; (8010880 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801084e:	2167      	movs	r1, #103	; 0x67
 8010850:	4a0c      	ldr	r2, [pc, #48]	; (8010884 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8010852:	480d      	ldr	r0, [pc, #52]	; (8010888 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8010854:	f00b f8b6 	bl	801b9c4 <__assert_func>
 8010858:	2300      	movs	r3, #0
 801085a:	4d0c      	ldr	r5, [pc, #48]	; (801088c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801085c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8010860:	6828      	ldr	r0, [r5, #0]
 8010862:	b110      	cbz	r0, 801086a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8010864:	6803      	ldr	r3, [r0, #0]
 8010866:	695b      	ldr	r3, [r3, #20]
 8010868:	4798      	blx	r3
 801086a:	602c      	str	r4, [r5, #0]
 801086c:	4620      	mov	r0, r4
 801086e:	6823      	ldr	r3, [r4, #0]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	4798      	blx	r3
 8010874:	6833      	ldr	r3, [r6, #0]
 8010876:	4630      	mov	r0, r6
 8010878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801087a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801087e:	4718      	bx	r3
 8010880:	0801ecc4 	.word	0x0801ecc4
 8010884:	0801ed94 	.word	0x0801ed94
 8010888:	0801ecce 	.word	0x0801ecce
 801088c:	2000dfa8 	.word	0x2000dfa8

08010890 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8010890:	b510      	push	{r4, lr}
 8010892:	f9b1 4000 	ldrsh.w	r4, [r1]
 8010896:	888a      	ldrh	r2, [r1, #4]
 8010898:	f9b0 3000 	ldrsh.w	r3, [r0]
 801089c:	4422      	add	r2, r4
 801089e:	b212      	sxth	r2, r2
 80108a0:	4293      	cmp	r3, r2
 80108a2:	da15      	bge.n	80108d0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80108a4:	8882      	ldrh	r2, [r0, #4]
 80108a6:	4413      	add	r3, r2
 80108a8:	b21b      	sxth	r3, r3
 80108aa:	429c      	cmp	r4, r3
 80108ac:	da10      	bge.n	80108d0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80108ae:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80108b2:	88c9      	ldrh	r1, [r1, #6]
 80108b4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80108b8:	4419      	add	r1, r3
 80108ba:	b209      	sxth	r1, r1
 80108bc:	428a      	cmp	r2, r1
 80108be:	da07      	bge.n	80108d0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80108c0:	88c0      	ldrh	r0, [r0, #6]
 80108c2:	4410      	add	r0, r2
 80108c4:	b200      	sxth	r0, r0
 80108c6:	4283      	cmp	r3, r0
 80108c8:	bfac      	ite	ge
 80108ca:	2000      	movge	r0, #0
 80108cc:	2001      	movlt	r0, #1
 80108ce:	bd10      	pop	{r4, pc}
 80108d0:	2000      	movs	r0, #0
 80108d2:	e7fc      	b.n	80108ce <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080108d4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80108d4:	b570      	push	{r4, r5, r6, lr}
 80108d6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80108da:	f9b0 5000 	ldrsh.w	r5, [r0]
 80108de:	42ac      	cmp	r4, r5
 80108e0:	db18      	blt.n	8010914 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80108e2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80108e6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	db12      	blt.n	8010914 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80108ee:	8886      	ldrh	r6, [r0, #4]
 80108f0:	4435      	add	r5, r6
 80108f2:	888e      	ldrh	r6, [r1, #4]
 80108f4:	4434      	add	r4, r6
 80108f6:	b22d      	sxth	r5, r5
 80108f8:	b224      	sxth	r4, r4
 80108fa:	42a5      	cmp	r5, r4
 80108fc:	db0a      	blt.n	8010914 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80108fe:	88c0      	ldrh	r0, [r0, #6]
 8010900:	4418      	add	r0, r3
 8010902:	88cb      	ldrh	r3, [r1, #6]
 8010904:	441a      	add	r2, r3
 8010906:	b200      	sxth	r0, r0
 8010908:	b212      	sxth	r2, r2
 801090a:	4290      	cmp	r0, r2
 801090c:	bfb4      	ite	lt
 801090e:	2000      	movlt	r0, #0
 8010910:	2001      	movge	r0, #1
 8010912:	bd70      	pop	{r4, r5, r6, pc}
 8010914:	2000      	movs	r0, #0
 8010916:	e7fc      	b.n	8010912 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08010918 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8010918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801091a:	4604      	mov	r4, r0
 801091c:	4608      	mov	r0, r1
 801091e:	460d      	mov	r5, r1
 8010920:	f7fd f949 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010924:	b978      	cbnz	r0, 8010946 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8010926:	4620      	mov	r0, r4
 8010928:	f7fd f945 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801092c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8010930:	b150      	cbz	r0, 8010948 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8010932:	8026      	strh	r6, [r4, #0]
 8010934:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010938:	8063      	strh	r3, [r4, #2]
 801093a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801093e:	80a3      	strh	r3, [r4, #4]
 8010940:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010944:	80e3      	strh	r3, [r4, #6]
 8010946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010948:	f9b4 1000 	ldrsh.w	r1, [r4]
 801094c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010950:	42b1      	cmp	r1, r6
 8010952:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010956:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801095a:	460f      	mov	r7, r1
 801095c:	88ed      	ldrh	r5, [r5, #6]
 801095e:	bfa8      	it	ge
 8010960:	4637      	movge	r7, r6
 8010962:	4293      	cmp	r3, r2
 8010964:	4618      	mov	r0, r3
 8010966:	4466      	add	r6, ip
 8010968:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801096c:	bfa8      	it	ge
 801096e:	4610      	movge	r0, r2
 8010970:	442a      	add	r2, r5
 8010972:	88e5      	ldrh	r5, [r4, #6]
 8010974:	4461      	add	r1, ip
 8010976:	b236      	sxth	r6, r6
 8010978:	8027      	strh	r7, [r4, #0]
 801097a:	442b      	add	r3, r5
 801097c:	b209      	sxth	r1, r1
 801097e:	b212      	sxth	r2, r2
 8010980:	8060      	strh	r0, [r4, #2]
 8010982:	b21b      	sxth	r3, r3
 8010984:	428e      	cmp	r6, r1
 8010986:	bfac      	ite	ge
 8010988:	ebc7 0106 	rsbge	r1, r7, r6
 801098c:	ebc7 0101 	rsblt	r1, r7, r1
 8010990:	429a      	cmp	r2, r3
 8010992:	bfac      	ite	ge
 8010994:	ebc0 0202 	rsbge	r2, r0, r2
 8010998:	ebc0 0203 	rsblt	r2, r0, r3
 801099c:	80a1      	strh	r1, [r4, #4]
 801099e:	80e2      	strh	r2, [r4, #6]
 80109a0:	e7d1      	b.n	8010946 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080109a4 <_ZN8touchgfx11Application11getInstanceEv>:
 80109a4:	4b01      	ldr	r3, [pc, #4]	; (80109ac <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80109a6:	6818      	ldr	r0, [r3, #0]
 80109a8:	4770      	bx	lr
 80109aa:	bf00      	nop
 80109ac:	2000dfb8 	.word	0x2000dfb8

080109b0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80109b0:	2300      	movs	r3, #0
 80109b2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80109b6:	30a8      	adds	r0, #168	; 0xa8
 80109b8:	f820 3c24 	strh.w	r3, [r0, #-36]
 80109bc:	f802 3b01 	strb.w	r3, [r2], #1
 80109c0:	4282      	cmp	r2, r0
 80109c2:	d1fb      	bne.n	80109bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80109c4:	4770      	bx	lr

080109c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80109c6:	4603      	mov	r3, r0
 80109c8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80109cc:	2200      	movs	r2, #0
 80109ce:	801a      	strh	r2, [r3, #0]
 80109d0:	3308      	adds	r3, #8
 80109d2:	f823 2c06 	strh.w	r2, [r3, #-6]
 80109d6:	f823 2c04 	strh.w	r2, [r3, #-4]
 80109da:	f823 2c02 	strh.w	r2, [r3, #-2]
 80109de:	428b      	cmp	r3, r1
 80109e0:	d1f5      	bne.n	80109ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80109e2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80109e6:	4770      	bx	lr

080109e8 <_ZN8touchgfx11ApplicationC1Ev>:
 80109e8:	b570      	push	{r4, r5, r6, lr}
 80109ea:	4b1a      	ldr	r3, [pc, #104]	; (8010a54 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80109ec:	2500      	movs	r5, #0
 80109ee:	4604      	mov	r4, r0
 80109f0:	30a8      	adds	r0, #168	; 0xa8
 80109f2:	f840 3ca8 	str.w	r3, [r0, #-168]
 80109f6:	f820 5c24 	strh.w	r5, [r0, #-36]
 80109fa:	f7ff ffe4 	bl	80109c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80109fe:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8010a02:	f7ff ffe0 	bl	80109c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010a06:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8010a0a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8010a0e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8010a12:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8010a16:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8010a1a:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8010a1e:	490e      	ldr	r1, [pc, #56]	; (8010a58 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8010a20:	480e      	ldr	r0, [pc, #56]	; (8010a5c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8010a22:	f00a fe93 	bl	801b74c <CRC_Lock>
 8010a26:	4e0e      	ldr	r6, [pc, #56]	; (8010a60 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8010a28:	4b0e      	ldr	r3, [pc, #56]	; (8010a64 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8010a2a:	b158      	cbz	r0, 8010a44 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8010a2c:	801d      	strh	r5, [r3, #0]
 8010a2e:	2300      	movs	r3, #0
 8010a30:	4a0d      	ldr	r2, [pc, #52]	; (8010a68 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8010a32:	4620      	mov	r0, r4
 8010a34:	6013      	str	r3, [r2, #0]
 8010a36:	4a0d      	ldr	r2, [pc, #52]	; (8010a6c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8010a38:	6033      	str	r3, [r6, #0]
 8010a3a:	6013      	str	r3, [r2, #0]
 8010a3c:	f7ff ffb8 	bl	80109b0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8010a40:	4620      	mov	r0, r4
 8010a42:	bd70      	pop	{r4, r5, r6, pc}
 8010a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a48:	2002      	movs	r0, #2
 8010a4a:	801a      	strh	r2, [r3, #0]
 8010a4c:	6030      	str	r0, [r6, #0]
 8010a4e:	f001 fa91 	bl	8011f74 <_ZN8touchgfx6Screen4drawEv>
 8010a52:	e7ec      	b.n	8010a2e <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8010a54:	0801ed58 	.word	0x0801ed58
 8010a58:	b5e8b5cd 	.word	0xb5e8b5cd
 8010a5c:	f407a5c2 	.word	0xf407a5c2
 8010a60:	2000dfa8 	.word	0x2000dfa8
 8010a64:	2000001c 	.word	0x2000001c
 8010a68:	2000dfb8 	.word	0x2000dfb8
 8010a6c:	2000dfac 	.word	0x2000dfac

08010a70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8010a70:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8010a74:	428b      	cmp	r3, r1
 8010a76:	b510      	push	{r4, lr}
 8010a78:	d90e      	bls.n	8010a98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8010a7a:	3b01      	subs	r3, #1
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	428b      	cmp	r3, r1
 8010a80:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8010a84:	d908      	bls.n	8010a98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8010a86:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8010a8a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8010a94:	685a      	ldr	r2, [r3, #4]
 8010a96:	6062      	str	r2, [r4, #4]
 8010a98:	bd10      	pop	{r4, pc}
	...

08010a9c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8010a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a9e:	466b      	mov	r3, sp
 8010aa0:	4604      	mov	r4, r0
 8010aa2:	e883 0006 	stmia.w	r3, {r1, r2}
 8010aa6:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8010aaa:	2a07      	cmp	r2, #7
 8010aac:	d906      	bls.n	8010abc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8010aae:	4b09      	ldr	r3, [pc, #36]	; (8010ad4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8010ab0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8010ab4:	4a08      	ldr	r2, [pc, #32]	; (8010ad8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8010ab6:	4809      	ldr	r0, [pc, #36]	; (8010adc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8010ab8:	f00a ff84 	bl	801b9c4 <__assert_func>
 8010abc:	1c51      	adds	r1, r2, #1
 8010abe:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8010ac2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8010ac6:	cb03      	ldmia	r3!, {r0, r1}
 8010ac8:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8010acc:	6069      	str	r1, [r5, #4]
 8010ace:	b003      	add	sp, #12
 8010ad0:	bd30      	pop	{r4, r5, pc}
 8010ad2:	bf00      	nop
 8010ad4:	0801ecf8 	.word	0x0801ecf8
 8010ad8:	0801edd8 	.word	0x0801edd8
 8010adc:	0801ed27 	.word	0x0801ed27

08010ae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8010ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae4:	b08d      	sub	sp, #52	; 0x34
 8010ae6:	4683      	mov	fp, r0
 8010ae8:	ac08      	add	r4, sp, #32
 8010aea:	4620      	mov	r0, r4
 8010aec:	e884 0006 	stmia.w	r4, {r1, r2}
 8010af0:	f7fd f861 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d16a      	bne.n	8010bce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010af8:	9402      	str	r4, [sp, #8]
 8010afa:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8010afe:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8010b02:	2400      	movs	r4, #0
 8010b04:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8010b08:	9301      	str	r3, [sp, #4]
 8010b0a:	36a0      	adds	r6, #160	; 0xa0
 8010b0c:	42a5      	cmp	r5, r4
 8010b0e:	d00d      	beq.n	8010b2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8010b10:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8010b14:	9802      	ldr	r0, [sp, #8]
 8010b16:	f7ff fedd 	bl	80108d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010b1a:	b128      	cbz	r0, 8010b28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8010b1c:	1e69      	subs	r1, r5, #1
 8010b1e:	9801      	ldr	r0, [sp, #4]
 8010b20:	1b09      	subs	r1, r1, r4
 8010b22:	b289      	uxth	r1, r1
 8010b24:	f7ff ffa4 	bl	8010a70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010b28:	3401      	adds	r4, #1
 8010b2a:	e7ef      	b.n	8010b0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010b2c:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8010b30:	1e7b      	subs	r3, r7, #1
 8010b32:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8010b36:	9703      	str	r7, [sp, #12]
 8010b38:	9300      	str	r3, [sp, #0]
 8010b3a:	2400      	movs	r4, #0
 8010b3c:	4655      	mov	r5, sl
 8010b3e:	9704      	str	r7, [sp, #16]
 8010b40:	4626      	mov	r6, r4
 8010b42:	9b04      	ldr	r3, [sp, #16]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d078      	beq.n	8010c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8010b48:	9902      	ldr	r1, [sp, #8]
 8010b4a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010b4e:	f7ff fe9f 	bl	8010890 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010b52:	b360      	cbz	r0, 8010bae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8010b54:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8010b58:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8010b5c:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8010b60:	45e6      	cmp	lr, ip
 8010b62:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8010b66:	db35      	blt.n	8010bd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8010b68:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8010b6c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8010b70:	4472      	add	r2, lr
 8010b72:	4463      	add	r3, ip
 8010b74:	b212      	sxth	r2, r2
 8010b76:	b21b      	sxth	r3, r3
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	dc2b      	bgt.n	8010bd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8010b7c:	fa1f f288 	uxth.w	r2, r8
 8010b80:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010b84:	45c1      	cmp	r9, r8
 8010b86:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010b8a:	4413      	add	r3, r2
 8010b8c:	fa1f fc89 	uxth.w	ip, r9
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	fa0f fe83 	sxth.w	lr, r3
 8010b96:	db0f      	blt.n	8010bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8010b98:	eba3 030c 	sub.w	r3, r3, ip
 8010b9c:	1ac9      	subs	r1, r1, r3
 8010b9e:	b209      	sxth	r1, r1
 8010ba0:	2900      	cmp	r1, #0
 8010ba2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010ba6:	dd12      	ble.n	8010bce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010ba8:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8010bac:	4604      	mov	r4, r0
 8010bae:	9b04      	ldr	r3, [sp, #16]
 8010bb0:	3d08      	subs	r5, #8
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	9304      	str	r3, [sp, #16]
 8010bb6:	e7c4      	b.n	8010b42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8010bb8:	4461      	add	r1, ip
 8010bba:	b209      	sxth	r1, r1
 8010bbc:	4571      	cmp	r1, lr
 8010bbe:	dc3a      	bgt.n	8010c36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010bc0:	eba2 020c 	sub.w	r2, r2, ip
 8010bc4:	b212      	sxth	r2, r2
 8010bc6:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8010bca:	2a00      	cmp	r2, #0
 8010bcc:	dcee      	bgt.n	8010bac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8010bce:	b00d      	add	sp, #52	; 0x34
 8010bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd4:	45c1      	cmp	r9, r8
 8010bd6:	db2e      	blt.n	8010c36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010bd8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8010bdc:	4499      	add	r9, r3
 8010bde:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010be2:	4498      	add	r8, r3
 8010be4:	fa0f f989 	sxth.w	r9, r9
 8010be8:	fa0f f888 	sxth.w	r8, r8
 8010bec:	45c1      	cmp	r9, r8
 8010bee:	dc22      	bgt.n	8010c36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010bf0:	fa1f f28c 	uxth.w	r2, ip
 8010bf4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8010bf8:	45e6      	cmp	lr, ip
 8010bfa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8010bfe:	4413      	add	r3, r2
 8010c00:	fa1f f88e 	uxth.w	r8, lr
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	fa0f f983 	sxth.w	r9, r3
 8010c0a:	db0a      	blt.n	8010c22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8010c0c:	eba3 0308 	sub.w	r3, r3, r8
 8010c10:	1ac9      	subs	r1, r1, r3
 8010c12:	b209      	sxth	r1, r1
 8010c14:	2900      	cmp	r1, #0
 8010c16:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8010c1a:	ddd8      	ble.n	8010bce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010c1c:	f8ad 9020 	strh.w	r9, [sp, #32]
 8010c20:	e7c4      	b.n	8010bac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8010c22:	4441      	add	r1, r8
 8010c24:	b209      	sxth	r1, r1
 8010c26:	4549      	cmp	r1, r9
 8010c28:	dc05      	bgt.n	8010c36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010c2a:	eba2 0208 	sub.w	r2, r2, r8
 8010c2e:	b212      	sxth	r2, r2
 8010c30:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8010c34:	e7c9      	b.n	8010bca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8010c36:	4606      	mov	r6, r0
 8010c38:	e7b9      	b.n	8010bae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8010c3a:	2c00      	cmp	r4, #0
 8010c3c:	f47f af7d 	bne.w	8010b3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8010c40:	2e00      	cmp	r6, #0
 8010c42:	f000 81dc 	beq.w	8010ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010c46:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8010c4a:	4655      	mov	r5, sl
 8010c4c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8010c50:	b2b9      	uxth	r1, r7
 8010c52:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8010c56:	b2b3      	uxth	r3, r6
 8010c58:	9104      	str	r1, [sp, #16]
 8010c5a:	9804      	ldr	r0, [sp, #16]
 8010c5c:	441a      	add	r2, r3
 8010c5e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010c62:	b292      	uxth	r2, r2
 8010c64:	4401      	add	r1, r0
 8010c66:	fa0f f882 	sxth.w	r8, r2
 8010c6a:	b289      	uxth	r1, r1
 8010c6c:	9105      	str	r1, [sp, #20]
 8010c6e:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8010c72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d054      	beq.n	8010d26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8010c7c:	9902      	ldr	r1, [sp, #8]
 8010c7e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010c82:	f7ff fe05 	bl	8010890 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010c86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c8a:	b1d8      	cbz	r0, 8010cc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010c8c:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8010c90:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8010c94:	4576      	cmp	r6, lr
 8010c96:	dc26      	bgt.n	8010ce6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010c98:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8010c9c:	44f4      	add	ip, lr
 8010c9e:	fa0f fc8c 	sxth.w	ip, ip
 8010ca2:	45e0      	cmp	r8, ip
 8010ca4:	db1f      	blt.n	8010ce6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010ca6:	428f      	cmp	r7, r1
 8010ca8:	fa1f fc81 	uxth.w	ip, r1
 8010cac:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8010cb0:	dc0f      	bgt.n	8010cd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8010cb2:	9805      	ldr	r0, [sp, #20]
 8010cb4:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8010cb8:	eba0 0c0c 	sub.w	ip, r0, ip
 8010cbc:	eba1 010c 	sub.w	r1, r1, ip
 8010cc0:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	9903      	ldr	r1, [sp, #12]
 8010cc8:	3d08      	subs	r5, #8
 8010cca:	4604      	mov	r4, r0
 8010ccc:	3901      	subs	r1, #1
 8010cce:	9103      	str	r1, [sp, #12]
 8010cd0:	e7cf      	b.n	8010c72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8010cd2:	4461      	add	r1, ip
 8010cd4:	b209      	sxth	r1, r1
 8010cd6:	4549      	cmp	r1, r9
 8010cd8:	dcf5      	bgt.n	8010cc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010cda:	9904      	ldr	r1, [sp, #16]
 8010cdc:	eba1 0c0c 	sub.w	ip, r1, ip
 8010ce0:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8010ce4:	e7ee      	b.n	8010cc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010ce6:	428f      	cmp	r7, r1
 8010ce8:	dced      	bgt.n	8010cc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010cea:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8010cee:	4461      	add	r1, ip
 8010cf0:	b209      	sxth	r1, r1
 8010cf2:	4589      	cmp	r9, r1
 8010cf4:	dbe7      	blt.n	8010cc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010cf6:	4576      	cmp	r6, lr
 8010cf8:	fa1f fc8e 	uxth.w	ip, lr
 8010cfc:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8010d00:	dc08      	bgt.n	8010d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8010d02:	eba2 0c0c 	sub.w	ip, r2, ip
 8010d06:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8010d0a:	eba1 010c 	sub.w	r1, r1, ip
 8010d0e:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8010d12:	e7d7      	b.n	8010cc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010d14:	4461      	add	r1, ip
 8010d16:	b209      	sxth	r1, r1
 8010d18:	4588      	cmp	r8, r1
 8010d1a:	dbd4      	blt.n	8010cc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010d1c:	eba3 0c0c 	sub.w	ip, r3, ip
 8010d20:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8010d24:	e7ce      	b.n	8010cc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010d26:	2c00      	cmp	r4, #0
 8010d28:	f000 8169 	beq.w	8010ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010d2c:	9b00      	ldr	r3, [sp, #0]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	f000 8165 	beq.w	8010ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010d34:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8010d38:	9802      	ldr	r0, [sp, #8]
 8010d3a:	4621      	mov	r1, r4
 8010d3c:	f7ff fdca 	bl	80108d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010d40:	b120      	cbz	r0, 8010d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8010d42:	f8bd 1000 	ldrh.w	r1, [sp]
 8010d46:	9801      	ldr	r0, [sp, #4]
 8010d48:	f7ff fe92 	bl	8010a70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010d4c:	9902      	ldr	r1, [sp, #8]
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f7ff fd9e 	bl	8010890 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010d54:	2800      	cmp	r0, #0
 8010d56:	f000 809b 	beq.w	8010e90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8010d5a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8010d5e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8010d62:	fa1f f288 	uxth.w	r2, r8
 8010d66:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8010d6a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8010d6e:	19d5      	adds	r5, r2, r7
 8010d70:	b2a1      	uxth	r1, r4
 8010d72:	45a0      	cmp	r8, r4
 8010d74:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010d78:	fa1f f985 	uxth.w	r9, r5
 8010d7c:	440b      	add	r3, r1
 8010d7e:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8010d82:	fa0f f589 	sxth.w	r5, r9
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	9503      	str	r5, [sp, #12]
 8010d8a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8010d8e:	9507      	str	r5, [sp, #28]
 8010d90:	f340 809d 	ble.w	8010ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8010d94:	1a52      	subs	r2, r2, r1
 8010d96:	4584      	cmp	ip, r0
 8010d98:	fa0f fe83 	sxth.w	lr, r3
 8010d9c:	b292      	uxth	r2, r2
 8010d9e:	b215      	sxth	r5, r2
 8010da0:	dd2f      	ble.n	8010e02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8010da2:	9e00      	ldr	r6, [sp, #0]
 8010da4:	fa1f fc8c 	uxth.w	ip, ip
 8010da8:	b280      	uxth	r0, r0
 8010daa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010dae:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8010db2:	9e03      	ldr	r6, [sp, #12]
 8010db4:	ebac 0300 	sub.w	r3, ip, r0
 8010db8:	448c      	add	ip, r1
 8010dba:	eba6 060e 	sub.w	r6, r6, lr
 8010dbe:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	4470      	add	r0, lr
 8010dc6:	fa0f fc8c 	sxth.w	ip, ip
 8010dca:	b21c      	sxth	r4, r3
 8010dcc:	b200      	sxth	r0, r0
 8010dce:	4366      	muls	r6, r4
 8010dd0:	ebac 0000 	sub.w	r0, ip, r0
 8010dd4:	4368      	muls	r0, r5
 8010dd6:	4286      	cmp	r6, r0
 8010dd8:	db09      	blt.n	8010dee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8010dda:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8010dde:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8010de2:	4417      	add	r7, r2
 8010de4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010de8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010dec:	e685      	b.n	8010afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010dee:	440b      	add	r3, r1
 8010df0:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8010df4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010df8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8010dfc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010e00:	e67b      	b.n	8010afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010e02:	9e03      	ldr	r6, [sp, #12]
 8010e04:	45b6      	cmp	lr, r6
 8010e06:	da28      	bge.n	8010e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8010e08:	9b00      	ldr	r3, [sp, #0]
 8010e0a:	eba6 060e 	sub.w	r6, r6, lr
 8010e0e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8010e12:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8010e16:	eb04 030c 	add.w	r3, r4, ip
 8010e1a:	fa1f f883 	uxth.w	r8, r3
 8010e1e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8010e22:	4403      	add	r3, r0
 8010e24:	fa0f f988 	sxth.w	r9, r8
 8010e28:	eba0 000c 	sub.w	r0, r0, ip
 8010e2c:	eba3 0308 	sub.w	r3, r3, r8
 8010e30:	4368      	muls	r0, r5
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	fa0f f883 	sxth.w	r8, r3
 8010e38:	fb08 f606 	mul.w	r6, r8, r6
 8010e3c:	42b0      	cmp	r0, r6
 8010e3e:	dc06      	bgt.n	8010e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8010e40:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8010e44:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8010e48:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8010e4c:	e7c9      	b.n	8010de2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8010e4e:	4423      	add	r3, r4
 8010e50:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8010e54:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010e58:	e64f      	b.n	8010afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010e5a:	eba3 0309 	sub.w	r3, r3, r9
 8010e5e:	9807      	ldr	r0, [sp, #28]
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	2806      	cmp	r0, #6
 8010e64:	fa0f fc83 	sxth.w	ip, r3
 8010e68:	d818      	bhi.n	8010e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8010e6a:	4652      	mov	r2, sl
 8010e6c:	ab0a      	add	r3, sp, #40	; 0x28
 8010e6e:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8010e72:	6851      	ldr	r1, [r2, #4]
 8010e74:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8010e78:	c303      	stmia	r3!, {r0, r1}
 8010e7a:	9b03      	ldr	r3, [sp, #12]
 8010e7c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8010e80:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8010e84:	ab0a      	add	r3, sp, #40	; 0x28
 8010e86:	9801      	ldr	r0, [sp, #4]
 8010e88:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010e8c:	f7ff fe06 	bl	8010a9c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010e90:	9b00      	ldr	r3, [sp, #0]
 8010e92:	f1aa 0a08 	sub.w	sl, sl, #8
 8010e96:	3b01      	subs	r3, #1
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	e747      	b.n	8010d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8010e9c:	9800      	ldr	r0, [sp, #0]
 8010e9e:	45ac      	cmp	ip, r5
 8010ea0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010ea4:	db0c      	blt.n	8010ec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8010ea6:	4417      	add	r7, r2
 8010ea8:	4458      	add	r0, fp
 8010eaa:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010eae:	b2bf      	uxth	r7, r7
 8010eb0:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8010eb4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010eb8:	440f      	add	r7, r1
 8010eba:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8010ebe:	e61c      	b.n	8010afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010ec0:	4458      	add	r0, fp
 8010ec2:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8010ec6:	443b      	add	r3, r7
 8010ec8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010ecc:	e615      	b.n	8010afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010ece:	fa1f f18c 	uxth.w	r1, ip
 8010ed2:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8010ed6:	b282      	uxth	r2, r0
 8010ed8:	4584      	cmp	ip, r0
 8010eda:	eb01 0e05 	add.w	lr, r1, r5
 8010ede:	9204      	str	r2, [sp, #16]
 8010ee0:	fa1f fe8e 	uxth.w	lr, lr
 8010ee4:	9e04      	ldr	r6, [sp, #16]
 8010ee6:	fa0f f28e 	sxth.w	r2, lr
 8010eea:	9205      	str	r2, [sp, #20]
 8010eec:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8010ef0:	4432      	add	r2, r6
 8010ef2:	b292      	uxth	r2, r2
 8010ef4:	9206      	str	r2, [sp, #24]
 8010ef6:	da26      	bge.n	8010f46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8010ef8:	eba3 0309 	sub.w	r3, r3, r9
 8010efc:	eba2 020e 	sub.w	r2, r2, lr
 8010f00:	eba0 000c 	sub.w	r0, r0, ip
 8010f04:	eba4 0408 	sub.w	r4, r4, r8
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	b292      	uxth	r2, r2
 8010f0c:	fa0f fa83 	sxth.w	sl, r3
 8010f10:	b211      	sxth	r1, r2
 8010f12:	fb0a f000 	mul.w	r0, sl, r0
 8010f16:	434c      	muls	r4, r1
 8010f18:	42a0      	cmp	r0, r4
 8010f1a:	9800      	ldr	r0, [sp, #0]
 8010f1c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010f20:	dc06      	bgt.n	8010f30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8010f22:	4458      	add	r0, fp
 8010f24:	9a05      	ldr	r2, [sp, #20]
 8010f26:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8010f2a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8010f2e:	e7ca      	b.n	8010ec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8010f30:	eb0b 0300 	add.w	r3, fp, r0
 8010f34:	9903      	ldr	r1, [sp, #12]
 8010f36:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8010f3a:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8010f3e:	442a      	add	r2, r5
 8010f40:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8010f44:	e5d9      	b.n	8010afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010f46:	9e04      	ldr	r6, [sp, #16]
 8010f48:	9a03      	ldr	r2, [sp, #12]
 8010f4a:	1b89      	subs	r1, r1, r6
 8010f4c:	b21e      	sxth	r6, r3
 8010f4e:	b289      	uxth	r1, r1
 8010f50:	4296      	cmp	r6, r2
 8010f52:	fa0f fc81 	sxth.w	ip, r1
 8010f56:	dd25      	ble.n	8010fa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8010f58:	eba3 0309 	sub.w	r3, r3, r9
 8010f5c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8010f60:	9e05      	ldr	r6, [sp, #20]
 8010f62:	eba4 0408 	sub.w	r4, r4, r8
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	eba6 0902 	sub.w	r9, r6, r2
 8010f6c:	fb0c f404 	mul.w	r4, ip, r4
 8010f70:	b218      	sxth	r0, r3
 8010f72:	9a00      	ldr	r2, [sp, #0]
 8010f74:	fb00 f909 	mul.w	r9, r0, r9
 8010f78:	00d2      	lsls	r2, r2, #3
 8010f7a:	454c      	cmp	r4, r9
 8010f7c:	db03      	blt.n	8010f86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8010f7e:	445a      	add	r2, fp
 8010f80:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8010f84:	e79f      	b.n	8010ec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8010f86:	eb0b 0302 	add.w	r3, fp, r2
 8010f8a:	9a03      	ldr	r2, [sp, #12]
 8010f8c:	4429      	add	r1, r5
 8010f8e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8010f92:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8010f96:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8010f9a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010f9e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010fa2:	e5aa      	b.n	8010afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010fa4:	9b06      	ldr	r3, [sp, #24]
 8010fa6:	9c07      	ldr	r4, [sp, #28]
 8010fa8:	eba3 020e 	sub.w	r2, r3, lr
 8010fac:	2c06      	cmp	r4, #6
 8010fae:	b292      	uxth	r2, r2
 8010fb0:	b213      	sxth	r3, r2
 8010fb2:	d80d      	bhi.n	8010fd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8010fb4:	4651      	mov	r1, sl
 8010fb6:	aa0a      	add	r2, sp, #40	; 0x28
 8010fb8:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8010fbc:	6849      	ldr	r1, [r1, #4]
 8010fbe:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8010fc2:	9b05      	ldr	r3, [sp, #20]
 8010fc4:	c203      	stmia	r2!, {r0, r1}
 8010fc6:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8010fca:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8010fce:	e759      	b.n	8010e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8010fd0:	9c00      	ldr	r4, [sp, #0]
 8010fd2:	4563      	cmp	r3, ip
 8010fd4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8010fd8:	db0d      	blt.n	8010ff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8010fda:	4429      	add	r1, r5
 8010fdc:	9a04      	ldr	r2, [sp, #16]
 8010fde:	445c      	add	r4, fp
 8010fe0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010fe4:	b289      	uxth	r1, r1
 8010fe6:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8010fea:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010fee:	4411      	add	r1, r2
 8010ff0:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8010ff4:	e581      	b.n	8010afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010ff6:	445c      	add	r4, fp
 8010ff8:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8010ffc:	e79f      	b.n	8010f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8010ffe:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8011002:	2f07      	cmp	r7, #7
 8011004:	d806      	bhi.n	8011014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8011006:	ab08      	add	r3, sp, #32
 8011008:	9801      	ldr	r0, [sp, #4]
 801100a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801100e:	f7ff fd45 	bl	8010a9c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8011012:	e5dc      	b.n	8010bce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8011014:	f107 39ff 	add.w	r9, r7, #4294967295
 8011018:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801101c:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8011020:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8011024:	f04f 35ff 	mov.w	r5, #4294967295
 8011028:	2400      	movs	r4, #0
 801102a:	9304      	str	r3, [sp, #16]
 801102c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8011030:	f109 32ff 	add.w	r2, r9, #4294967295
 8011034:	9300      	str	r3, [sp, #0]
 8011036:	4690      	mov	r8, r2
 8011038:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801103c:	9303      	str	r3, [sp, #12]
 801103e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011042:	f1b8 3fff 	cmp.w	r8, #4294967295
 8011046:	6818      	ldr	r0, [r3, #0]
 8011048:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801104c:	9206      	str	r2, [sp, #24]
 801104e:	bf16      	itet	ne
 8011050:	9904      	ldrne	r1, [sp, #16]
 8011052:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8011056:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801105a:	9305      	str	r3, [sp, #20]
 801105c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8011060:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8011064:	fb16 f601 	smulbb	r6, r6, r1
 8011068:	6859      	ldr	r1, [r3, #4]
 801106a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801106e:	4671      	mov	r1, lr
 8011070:	a80a      	add	r0, sp, #40	; 0x28
 8011072:	f7ff fc51 	bl	8010918 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011076:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801107a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801107e:	9b03      	ldr	r3, [sp, #12]
 8011080:	9a00      	ldr	r2, [sp, #0]
 8011082:	fb11 f100 	smulbb	r1, r1, r0
 8011086:	2008      	movs	r0, #8
 8011088:	fb02 6603 	mla	r6, r2, r3, r6
 801108c:	1b8e      	subs	r6, r1, r6
 801108e:	fb91 f1f0 	sdiv	r1, r1, r0
 8011092:	42b1      	cmp	r1, r6
 8011094:	dc21      	bgt.n	80110da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8011096:	4556      	cmp	r6, sl
 8011098:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801109c:	da03      	bge.n	80110a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801109e:	b1e6      	cbz	r6, 80110da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80110a0:	46b2      	mov	sl, r6
 80110a2:	4645      	mov	r5, r8
 80110a4:	464c      	mov	r4, r9
 80110a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80110aa:	f118 0f02 	cmn.w	r8, #2
 80110ae:	d1c8      	bne.n	8011042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 80110b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80110b4:	f1a7 0708 	sub.w	r7, r7, #8
 80110b8:	4691      	mov	r9, r2
 80110ba:	d1b7      	bne.n	801102c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80110bc:	9b01      	ldr	r3, [sp, #4]
 80110be:	b2a6      	uxth	r6, r4
 80110c0:	00e4      	lsls	r4, r4, #3
 80110c2:	1918      	adds	r0, r3, r4
 80110c4:	1c6b      	adds	r3, r5, #1
 80110c6:	d10b      	bne.n	80110e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 80110c8:	4601      	mov	r1, r0
 80110ca:	9802      	ldr	r0, [sp, #8]
 80110cc:	f7ff fc24 	bl	8010918 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80110d0:	4631      	mov	r1, r6
 80110d2:	9801      	ldr	r0, [sp, #4]
 80110d4:	f7ff fccc 	bl	8010a70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80110d8:	e50f      	b.n	8010afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80110da:	4645      	mov	r5, r8
 80110dc:	464c      	mov	r4, r9
 80110de:	e7ed      	b.n	80110bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 80110e0:	9b01      	ldr	r3, [sp, #4]
 80110e2:	00ed      	lsls	r5, r5, #3
 80110e4:	445c      	add	r4, fp
 80110e6:	1959      	adds	r1, r3, r5
 80110e8:	445d      	add	r5, fp
 80110ea:	f7ff fc15 	bl	8010918 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80110ee:	9b02      	ldr	r3, [sp, #8]
 80110f0:	cb03      	ldmia	r3!, {r0, r1}
 80110f2:	9b02      	ldr	r3, [sp, #8]
 80110f4:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 80110f8:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 80110fc:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8011100:	6861      	ldr	r1, [r4, #4]
 8011102:	c303      	stmia	r3!, {r0, r1}
 8011104:	e7e4      	b.n	80110d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08011108 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8011108:	4b1d      	ldr	r3, [pc, #116]	; (8011180 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801110a:	b530      	push	{r4, r5, lr}
 801110c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011110:	b085      	sub	sp, #20
 8011112:	4b1c      	ldr	r3, [pc, #112]	; (8011184 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8011114:	460c      	mov	r4, r1
 8011116:	2100      	movs	r1, #0
 8011118:	4605      	mov	r5, r0
 801111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801111e:	6820      	ldr	r0, [r4, #0]
 8011120:	9100      	str	r1, [sp, #0]
 8011122:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011126:	ab02      	add	r3, sp, #8
 8011128:	6861      	ldr	r1, [r4, #4]
 801112a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801112e:	c303      	stmia	r3!, {r0, r1}
 8011130:	4669      	mov	r1, sp
 8011132:	a802      	add	r0, sp, #8
 8011134:	f7fc fcfc 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 8011138:	ab02      	add	r3, sp, #8
 801113a:	cb03      	ldmia	r3!, {r0, r1}
 801113c:	4b12      	ldr	r3, [pc, #72]	; (8011188 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801113e:	6020      	str	r0, [r4, #0]
 8011140:	6818      	ldr	r0, [r3, #0]
 8011142:	6061      	str	r1, [r4, #4]
 8011144:	b138      	cbz	r0, 8011156 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8011146:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801114a:	b133      	cbz	r3, 801115a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801114c:	6821      	ldr	r1, [r4, #0]
 801114e:	4628      	mov	r0, r5
 8011150:	6862      	ldr	r2, [r4, #4]
 8011152:	f7ff fcc5 	bl	8010ae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8011156:	b005      	add	sp, #20
 8011158:	bd30      	pop	{r4, r5, pc}
 801115a:	6803      	ldr	r3, [r0, #0]
 801115c:	4621      	mov	r1, r4
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	4798      	blx	r3
 8011162:	4b0a      	ldr	r3, [pc, #40]	; (801118c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8011164:	6818      	ldr	r0, [r3, #0]
 8011166:	b118      	cbz	r0, 8011170 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8011168:	6803      	ldr	r3, [r0, #0]
 801116a:	4621      	mov	r1, r4
 801116c:	689b      	ldr	r3, [r3, #8]
 801116e:	4798      	blx	r3
 8011170:	4b07      	ldr	r3, [pc, #28]	; (8011190 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8011172:	4621      	mov	r1, r4
 8011174:	6818      	ldr	r0, [r3, #0]
 8011176:	6803      	ldr	r3, [r0, #0]
 8011178:	699b      	ldr	r3, [r3, #24]
 801117a:	4798      	blx	r3
 801117c:	e7eb      	b.n	8011156 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801117e:	bf00      	nop
 8011180:	2000df60 	.word	0x2000df60
 8011184:	2000df62 	.word	0x2000df62
 8011188:	2000dfa8 	.word	0x2000dfa8
 801118c:	2000dfa4 	.word	0x2000dfa4
 8011190:	2000df6c 	.word	0x2000df6c

08011194 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	4604      	mov	r4, r0
 801119a:	b09b      	sub	sp, #108	; 0x6c
 801119c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80111a0:	b129      	cbz	r1, 80111ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80111a2:	2300      	movs	r3, #0
 80111a4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80111a8:	b01b      	add	sp, #108	; 0x6c
 80111aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ae:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80111b2:	4630      	mov	r0, r6
 80111b4:	f7fc fcff 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80111b8:	4605      	mov	r5, r0
 80111ba:	b940      	cbnz	r0, 80111ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 80111bc:	4620      	mov	r0, r4
 80111be:	e896 0006 	ldmia.w	r6, {r1, r2}
 80111c2:	f7ff fc8d 	bl	8010ae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80111c6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80111ca:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80111ce:	4ba6      	ldr	r3, [pc, #664]	; (8011468 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	b33b      	cbz	r3, 8011224 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80111d4:	4da5      	ldr	r5, [pc, #660]	; (801146c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80111d6:	4628      	mov	r0, r5
 80111d8:	f7fc fced 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80111dc:	4606      	mov	r6, r0
 80111de:	bb08      	cbnz	r0, 8011224 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80111e0:	4628      	mov	r0, r5
 80111e2:	f7ff f9fb 	bl	80105dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80111e6:	6829      	ldr	r1, [r5, #0]
 80111e8:	686a      	ldr	r2, [r5, #4]
 80111ea:	4620      	mov	r0, r4
 80111ec:	f7ff fc78 	bl	8010ae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80111f0:	802e      	strh	r6, [r5, #0]
 80111f2:	806e      	strh	r6, [r5, #2]
 80111f4:	80ae      	strh	r6, [r5, #4]
 80111f6:	80ee      	strh	r6, [r5, #6]
 80111f8:	4f9d      	ldr	r7, [pc, #628]	; (8011470 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80111fa:	a809      	add	r0, sp, #36	; 0x24
 80111fc:	f7ff fbe3 	bl	80109c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011200:	883d      	ldrh	r5, [r7, #0]
 8011202:	462e      	mov	r6, r5
 8011204:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011208:	42b3      	cmp	r3, r6
 801120a:	d910      	bls.n	801122e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801120c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011210:	3601      	adds	r6, #1
 8011212:	a809      	add	r0, sp, #36	; 0x24
 8011214:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8011218:	b2b6      	uxth	r6, r6
 801121a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801121e:	f7ff fc3d 	bl	8010a9c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8011222:	e7ef      	b.n	8011204 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8011224:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1e5      	bne.n	80111f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801122c:	e7bc      	b.n	80111a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801122e:	462e      	mov	r6, r5
 8011230:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8011234:	42b3      	cmp	r3, r6
 8011236:	d90b      	bls.n	8011250 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8011238:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801123c:	3601      	adds	r6, #1
 801123e:	4620      	mov	r0, r4
 8011240:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8011244:	b2b6      	uxth	r6, r6
 8011246:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801124a:	f7ff fc49 	bl	8010ae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801124e:	e7ef      	b.n	8011230 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8011250:	4a88      	ldr	r2, [pc, #544]	; (8011474 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8011252:	6813      	ldr	r3, [r2, #0]
 8011254:	4690      	mov	r8, r2
 8011256:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801125a:	2b01      	cmp	r3, #1
 801125c:	f040 8094 	bne.w	8011388 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8011260:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8011264:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8011268:	f04f 0900 	mov.w	r9, #0
 801126c:	33aa      	adds	r3, #170	; 0xaa
 801126e:	42a8      	cmp	r0, r5
 8011270:	f103 0308 	add.w	r3, r3, #8
 8011274:	dd0a      	ble.n	801128c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8011276:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801127a:	3501      	adds	r5, #1
 801127c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8011280:	440a      	add	r2, r1
 8011282:	b212      	sxth	r2, r2
 8011284:	4591      	cmp	r9, r2
 8011286:	bfb8      	it	lt
 8011288:	4691      	movlt	r9, r2
 801128a:	e7f0      	b.n	801126e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801128c:	4b7a      	ldr	r3, [pc, #488]	; (8011478 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801128e:	4e7b      	ldr	r6, [pc, #492]	; (801147c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8011290:	881d      	ldrh	r5, [r3, #0]
 8011292:	2300      	movs	r3, #0
 8011294:	2d0f      	cmp	r5, #15
 8011296:	bf8c      	ite	hi
 8011298:	08ed      	lsrhi	r5, r5, #3
 801129a:	2501      	movls	r5, #1
 801129c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80112a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80112a4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80112a8:	f8d8 0000 	ldr.w	r0, [r8]
 80112ac:	440b      	add	r3, r1
 80112ae:	6802      	ldr	r2, [r0, #0]
 80112b0:	b21b      	sxth	r3, r3
 80112b2:	4599      	cmp	r9, r3
 80112b4:	dd4b      	ble.n	801134e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 80112b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80112ba:	4798      	blx	r3
 80112bc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80112c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80112c4:	4413      	add	r3, r2
 80112c6:	b21b      	sxth	r3, r3
 80112c8:	195a      	adds	r2, r3, r5
 80112ca:	4290      	cmp	r0, r2
 80112cc:	da07      	bge.n	80112de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80112ce:	4581      	cmp	r9, r0
 80112d0:	dd05      	ble.n	80112de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80112d2:	4298      	cmp	r0, r3
 80112d4:	da33      	bge.n	801133e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	dd31      	ble.n	801133e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80112da:	4648      	mov	r0, r9
 80112dc:	e004      	b.n	80112e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 80112de:	4298      	cmp	r0, r3
 80112e0:	dbfb      	blt.n	80112da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 80112e2:	4548      	cmp	r0, r9
 80112e4:	bfa8      	it	ge
 80112e6:	4648      	movge	r0, r9
 80112e8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80112ec:	2100      	movs	r1, #0
 80112ee:	1ac0      	subs	r0, r0, r3
 80112f0:	f8b7 a000 	ldrh.w	sl, [r7]
 80112f4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80112f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80112fc:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011300:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011304:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011308:	4553      	cmp	r3, sl
 801130a:	d9c9      	bls.n	80112a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801130c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8011310:	ab07      	add	r3, sp, #28
 8011312:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8011316:	6851      	ldr	r1, [r2, #4]
 8011318:	c303      	stmia	r3!, {r0, r1}
 801131a:	a807      	add	r0, sp, #28
 801131c:	a905      	add	r1, sp, #20
 801131e:	f7fc fc07 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 8011322:	a807      	add	r0, sp, #28
 8011324:	f7fc fc47 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011328:	b920      	cbnz	r0, 8011334 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801132a:	6823      	ldr	r3, [r4, #0]
 801132c:	a907      	add	r1, sp, #28
 801132e:	4620      	mov	r0, r4
 8011330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011332:	4798      	blx	r3
 8011334:	f10a 0a01 	add.w	sl, sl, #1
 8011338:	fa1f fa8a 	uxth.w	sl, sl
 801133c:	e7e2      	b.n	8011304 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801133e:	f8d8 0000 	ldr.w	r0, [r8]
 8011342:	2101      	movs	r1, #1
 8011344:	6803      	ldr	r3, [r0, #0]
 8011346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801134a:	4798      	blx	r3
 801134c:	e7a8      	b.n	80112a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801134e:	6a13      	ldr	r3, [r2, #32]
 8011350:	4798      	blx	r3
 8011352:	4b4b      	ldr	r3, [pc, #300]	; (8011480 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	2b00      	cmp	r3, #0
 8011358:	f43f af26 	beq.w	80111a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801135c:	2300      	movs	r3, #0
 801135e:	883d      	ldrh	r5, [r7, #0]
 8011360:	34ea      	adds	r4, #234	; 0xea
 8011362:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8011366:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801136a:	42ab      	cmp	r3, r5
 801136c:	f67f af1c 	bls.w	80111a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8011370:	ab1a      	add	r3, sp, #104	; 0x68
 8011372:	4620      	mov	r0, r4
 8011374:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011378:	3501      	adds	r5, #1
 801137a:	3b44      	subs	r3, #68	; 0x44
 801137c:	b2ad      	uxth	r5, r5
 801137e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011382:	f7ff fb8b 	bl	8010a9c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8011386:	e7ee      	b.n	8011366 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8011388:	2b02      	cmp	r3, #2
 801138a:	f040 813d 	bne.w	8011608 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801138e:	4b3d      	ldr	r3, [pc, #244]	; (8011484 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	2b01      	cmp	r3, #1
 8011394:	d02c      	beq.n	80113f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8011396:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801139a:	883a      	ldrh	r2, [r7, #0]
 801139c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80113a0:	3201      	adds	r2, #1
 80113a2:	b292      	uxth	r2, r2
 80113a4:	2900      	cmp	r1, #0
 80113a6:	d0d4      	beq.n	8011352 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80113a8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80113ac:	4610      	mov	r0, r2
 80113ae:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80113b2:	f04f 0a00 	mov.w	sl, #0
 80113b6:	441d      	add	r5, r3
 80113b8:	b22d      	sxth	r5, r5
 80113ba:	b283      	uxth	r3, r0
 80113bc:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 80113c0:	4299      	cmp	r1, r3
 80113c2:	f240 80c3 	bls.w	801154c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 80113c6:	4426      	add	r6, r4
 80113c8:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 80113cc:	4684      	mov	ip, r0
 80113ce:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 80113d2:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 80113d6:	4573      	cmp	r3, lr
 80113d8:	f340 80a5 	ble.w	8011526 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 80113dc:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 80113e0:	4475      	add	r5, lr
 80113e2:	b22d      	sxth	r5, r5
 80113e4:	429d      	cmp	r5, r3
 80113e6:	bfa8      	it	ge
 80113e8:	461d      	movge	r5, r3
 80113ea:	3001      	adds	r0, #1
 80113ec:	46e2      	mov	sl, ip
 80113ee:	e7e4      	b.n	80113ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 80113f0:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80113f4:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80113f8:	f1bb 0f00 	cmp.w	fp, #0
 80113fc:	d0a9      	beq.n	8011352 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80113fe:	883b      	ldrh	r3, [r7, #0]
 8011400:	2600      	movs	r6, #0
 8011402:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8011406:	3301      	adds	r3, #1
 8011408:	b29b      	uxth	r3, r3
 801140a:	b299      	uxth	r1, r3
 801140c:	00f5      	lsls	r5, r6, #3
 801140e:	458b      	cmp	fp, r1
 8011410:	d93a      	bls.n	8011488 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8011412:	4425      	add	r5, r4
 8011414:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8011418:	469c      	mov	ip, r3
 801141a:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801141e:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8011422:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8011426:	4408      	add	r0, r1
 8011428:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801142c:	4471      	add	r1, lr
 801142e:	b200      	sxth	r0, r0
 8011430:	b209      	sxth	r1, r1
 8011432:	4288      	cmp	r0, r1
 8011434:	da06      	bge.n	8011444 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8011436:	4586      	cmp	lr, r0
 8011438:	4672      	mov	r2, lr
 801143a:	bfb8      	it	lt
 801143c:	4602      	movlt	r2, r0
 801143e:	3301      	adds	r3, #1
 8011440:	4666      	mov	r6, ip
 8011442:	e7e2      	b.n	801140a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8011444:	d10b      	bne.n	801145e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8011446:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801144a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801144e:	458c      	cmp	ip, r1
 8011450:	bfb4      	ite	lt
 8011452:	469c      	movlt	ip, r3
 8011454:	46b4      	movge	ip, r6
 8011456:	4572      	cmp	r2, lr
 8011458:	bfb8      	it	lt
 801145a:	4672      	movlt	r2, lr
 801145c:	e7ef      	b.n	801143e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801145e:	428a      	cmp	r2, r1
 8011460:	46b4      	mov	ip, r6
 8011462:	bfb8      	it	lt
 8011464:	460a      	movlt	r2, r1
 8011466:	e7ea      	b.n	801143e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8011468:	2000dfa4 	.word	0x2000dfa4
 801146c:	2000dfb0 	.word	0x2000dfb0
 8011470:	2000001c 	.word	0x2000001c
 8011474:	2000df6c 	.word	0x2000df6c
 8011478:	2000df62 	.word	0x2000df62
 801147c:	2000df60 	.word	0x2000df60
 8011480:	2000df6a 	.word	0x2000df6a
 8011484:	2000df64 	.word	0x2000df64
 8011488:	1961      	adds	r1, r4, r5
 801148a:	ab07      	add	r3, sp, #28
 801148c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8011490:	6849      	ldr	r1, [r1, #4]
 8011492:	c303      	stmia	r3!, {r0, r1}
 8011494:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011498:	a807      	add	r0, sp, #28
 801149a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801149e:	2b13      	cmp	r3, #19
 80114a0:	440b      	add	r3, r1
 80114a2:	bfd8      	it	le
 80114a4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80114a8:	1a9b      	subs	r3, r3, r2
 80114aa:	f8ad 201c 	strh.w	r2, [sp, #28]
 80114ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 80114b2:	f7ff f8ed 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80114b6:	a807      	add	r0, sp, #28
 80114b8:	f7fc fb7d 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80114bc:	2800      	cmp	r0, #0
 80114be:	d199      	bne.n	80113f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80114c0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80114c4:	4425      	add	r5, r4
 80114c6:	f8d8 0000 	ldr.w	r0, [r8]
 80114ca:	f1bc 0f14 	cmp.w	ip, #20
 80114ce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80114d2:	f8d0 e000 	ldr.w	lr, [r0]
 80114d6:	bfa8      	it	ge
 80114d8:	f04f 0c14 	movge.w	ip, #20
 80114dc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80114e0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80114e4:	fa1f fc8c 	uxth.w	ip, ip
 80114e8:	f8cd c000 	str.w	ip, [sp]
 80114ec:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 80114f0:	47d0      	blx	sl
 80114f2:	4682      	mov	sl, r0
 80114f4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80114f8:	a807      	add	r0, sp, #28
 80114fa:	f7ff f86f 	bl	80105dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80114fe:	6823      	ldr	r3, [r4, #0]
 8011500:	4620      	mov	r0, r4
 8011502:	a907      	add	r1, sp, #28
 8011504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011506:	4798      	blx	r3
 8011508:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801150c:	eba0 000a 	sub.w	r0, r0, sl
 8011510:	b200      	sxth	r0, r0
 8011512:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8011516:	2800      	cmp	r0, #0
 8011518:	f47f af6c 	bne.w	80113f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801151c:	b2b1      	uxth	r1, r6
 801151e:	4648      	mov	r0, r9
 8011520:	f7ff faa6 	bl	8010a70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011524:	e766      	b.n	80113f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8011526:	d10c      	bne.n	8011542 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8011528:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801152c:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8011530:	45b4      	cmp	ip, r6
 8011532:	bfb4      	ite	lt
 8011534:	4684      	movlt	ip, r0
 8011536:	46d4      	movge	ip, sl
 8011538:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801153c:	4433      	add	r3, r6
 801153e:	b21b      	sxth	r3, r3
 8011540:	e750      	b.n	80113e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8011542:	4575      	cmp	r5, lr
 8011544:	46d4      	mov	ip, sl
 8011546:	bfa8      	it	ge
 8011548:	4675      	movge	r5, lr
 801154a:	e74e      	b.n	80113ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801154c:	eb0b 0006 	add.w	r0, fp, r6
 8011550:	4426      	add	r6, r4
 8011552:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8011556:	f1b9 0f13 	cmp.w	r9, #19
 801155a:	bfdc      	itt	le
 801155c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8011560:	444d      	addle	r5, r9
 8011562:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011566:	bfd8      	it	le
 8011568:	b22d      	sxthle	r5, r5
 801156a:	f7fc fb24 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801156e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011572:	2800      	cmp	r0, #0
 8011574:	f47f af16 	bne.w	80113a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8011578:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801157c:	fa1f f989 	uxth.w	r9, r9
 8011580:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8011584:	eba5 050c 	sub.w	r5, r5, ip
 8011588:	fa1f f28c 	uxth.w	r2, ip
 801158c:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8011590:	eb02 0009 	add.w	r0, r2, r9
 8011594:	2d14      	cmp	r5, #20
 8011596:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801159a:	bfa8      	it	ge
 801159c:	2514      	movge	r5, #20
 801159e:	b200      	sxth	r0, r0
 80115a0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80115a4:	b289      	uxth	r1, r1
 80115a6:	fa1f fe85 	uxth.w	lr, r5
 80115aa:	eba0 000c 	sub.w	r0, r0, ip
 80115ae:	f8ad c01e 	strh.w	ip, [sp, #30]
 80115b2:	4586      	cmp	lr, r0
 80115b4:	f8d8 0000 	ldr.w	r0, [r8]
 80115b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80115bc:	b29b      	uxth	r3, r3
 80115be:	bfb8      	it	lt
 80115c0:	46f1      	movlt	r9, lr
 80115c2:	6805      	ldr	r5, [r0, #0]
 80115c4:	f8cd 9000 	str.w	r9, [sp]
 80115c8:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 80115cc:	47a8      	blx	r5
 80115ce:	6823      	ldr	r3, [r4, #0]
 80115d0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80115d4:	a907      	add	r1, sp, #28
 80115d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115d8:	4620      	mov	r0, r4
 80115da:	4798      	blx	r3
 80115dc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80115e0:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 80115e4:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 80115e8:	1a5b      	subs	r3, r3, r1
 80115ea:	440a      	add	r2, r1
 80115ec:	b21b      	sxth	r3, r3
 80115ee:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 80115f2:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f47f aecf 	bne.w	801139a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80115fc:	fa1f f18a 	uxth.w	r1, sl
 8011600:	4658      	mov	r0, fp
 8011602:	f7ff fa35 	bl	8010a70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011606:	e6c8      	b.n	801139a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8011608:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801160c:	42ab      	cmp	r3, r5
 801160e:	f67f aea0 	bls.w	8011352 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8011612:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8011616:	ab07      	add	r3, sp, #28
 8011618:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801161c:	6851      	ldr	r1, [r2, #4]
 801161e:	c303      	stmia	r3!, {r0, r1}
 8011620:	a807      	add	r0, sp, #28
 8011622:	f7fc fac8 	bl	800dbb6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011626:	b920      	cbnz	r0, 8011632 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8011628:	6823      	ldr	r3, [r4, #0]
 801162a:	a907      	add	r1, sp, #28
 801162c:	4620      	mov	r0, r4
 801162e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011630:	4798      	blx	r3
 8011632:	3501      	adds	r5, #1
 8011634:	b2ad      	uxth	r5, r5
 8011636:	e7e7      	b.n	8011608 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08011638 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8011638:	4b03      	ldr	r3, [pc, #12]	; (8011648 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801163a:	2200      	movs	r2, #0
 801163c:	801a      	strh	r2, [r3, #0]
 801163e:	805a      	strh	r2, [r3, #2]
 8011640:	809a      	strh	r2, [r3, #4]
 8011642:	80da      	strh	r2, [r3, #6]
 8011644:	4770      	bx	lr
 8011646:	bf00      	nop
 8011648:	2000dfb0 	.word	0x2000dfb0

0801164c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011650:	b09b      	sub	sp, #108	; 0x6c
 8011652:	4606      	mov	r6, r0
 8011654:	4614      	mov	r4, r2
 8011656:	468a      	mov	sl, r1
 8011658:	a803      	add	r0, sp, #12
 801165a:	461d      	mov	r5, r3
 801165c:	f000 fdd5 	bl	801220a <_ZN8touchgfx12TextProviderC1Ev>
 8011660:	6833      	ldr	r3, [r6, #0]
 8011662:	4630      	mov	r0, r6
 8011664:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8011668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801166a:	4798      	blx	r3
 801166c:	6833      	ldr	r3, [r6, #0]
 801166e:	4607      	mov	r7, r0
 8011670:	4630      	mov	r0, r6
 8011672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011674:	4798      	blx	r3
 8011676:	462a      	mov	r2, r5
 8011678:	2500      	movs	r5, #0
 801167a:	4621      	mov	r1, r4
 801167c:	9000      	str	r0, [sp, #0]
 801167e:	463b      	mov	r3, r7
 8011680:	462c      	mov	r4, r5
 8011682:	46a9      	mov	r9, r5
 8011684:	46a8      	mov	r8, r5
 8011686:	a803      	add	r0, sp, #12
 8011688:	f000 fe0c 	bl	80122a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801168c:	2300      	movs	r3, #0
 801168e:	9302      	str	r3, [sp, #8]
 8011690:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011694:	429c      	cmp	r4, r3
 8011696:	d002      	beq.n	801169e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8011698:	455c      	cmp	r4, fp
 801169a:	bf18      	it	ne
 801169c:	4625      	movne	r5, r4
 801169e:	ab02      	add	r3, sp, #8
 80116a0:	4632      	mov	r2, r6
 80116a2:	4651      	mov	r1, sl
 80116a4:	a803      	add	r0, sp, #12
 80116a6:	f001 f8f9 	bl	801289c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80116aa:	4604      	mov	r4, r0
 80116ac:	b108      	cbz	r0, 80116b2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80116ae:	280a      	cmp	r0, #10
 80116b0:	d10a      	bne.n	80116c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80116b2:	45c1      	cmp	r9, r8
 80116b4:	bf38      	it	cc
 80116b6:	46c1      	movcc	r9, r8
 80116b8:	f04f 0800 	mov.w	r8, #0
 80116bc:	2c00      	cmp	r4, #0
 80116be:	d1e5      	bne.n	801168c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80116c0:	4648      	mov	r0, r9
 80116c2:	b01b      	add	sp, #108	; 0x6c
 80116c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c8:	9a02      	ldr	r2, [sp, #8]
 80116ca:	2a00      	cmp	r2, #0
 80116cc:	d0de      	beq.n	801168c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80116ce:	7b57      	ldrb	r7, [r2, #13]
 80116d0:	4629      	mov	r1, r5
 80116d2:	6833      	ldr	r3, [r6, #0]
 80116d4:	007f      	lsls	r7, r7, #1
 80116d6:	8894      	ldrh	r4, [r2, #4]
 80116d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116da:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80116de:	7a97      	ldrb	r7, [r2, #10]
 80116e0:	4307      	orrs	r7, r0
 80116e2:	4630      	mov	r0, r6
 80116e4:	4798      	blx	r3
 80116e6:	4438      	add	r0, r7
 80116e8:	4480      	add	r8, r0
 80116ea:	fa1f f888 	uxth.w	r8, r8
 80116ee:	e7e5      	b.n	80116bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080116f0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80116f0:	b508      	push	{r3, lr}
 80116f2:	6803      	ldr	r3, [r0, #0]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	4798      	blx	r3
 80116f8:	b128      	cbz	r0, 8011706 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80116fa:	7b43      	ldrb	r3, [r0, #13]
 80116fc:	7a80      	ldrb	r0, [r0, #10]
 80116fe:	005b      	lsls	r3, r3, #1
 8011700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011704:	4318      	orrs	r0, r3
 8011706:	bd08      	pop	{r3, pc}

08011708 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8011708:	b40e      	push	{r1, r2, r3}
 801170a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801170c:	b09c      	sub	sp, #112	; 0x70
 801170e:	4605      	mov	r5, r0
 8011710:	ab21      	add	r3, sp, #132	; 0x84
 8011712:	a805      	add	r0, sp, #20
 8011714:	f853 4b04 	ldr.w	r4, [r3], #4
 8011718:	9303      	str	r3, [sp, #12]
 801171a:	f000 fd76 	bl	801220a <_ZN8touchgfx12TextProviderC1Ev>
 801171e:	682b      	ldr	r3, [r5, #0]
 8011720:	4628      	mov	r0, r5
 8011722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011724:	4798      	blx	r3
 8011726:	682b      	ldr	r3, [r5, #0]
 8011728:	4606      	mov	r6, r0
 801172a:	4628      	mov	r0, r5
 801172c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801172e:	4798      	blx	r3
 8011730:	4633      	mov	r3, r6
 8011732:	4621      	mov	r1, r4
 8011734:	ae1c      	add	r6, sp, #112	; 0x70
 8011736:	2400      	movs	r4, #0
 8011738:	9000      	str	r0, [sp, #0]
 801173a:	9a03      	ldr	r2, [sp, #12]
 801173c:	a805      	add	r0, sp, #20
 801173e:	f000 fdb1 	bl	80122a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011742:	f846 4d60 	str.w	r4, [r6, #-96]!
 8011746:	462a      	mov	r2, r5
 8011748:	4633      	mov	r3, r6
 801174a:	4621      	mov	r1, r4
 801174c:	a805      	add	r0, sp, #20
 801174e:	f001 f8a5 	bl	801289c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011752:	b300      	cbz	r0, 8011796 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8011754:	280a      	cmp	r0, #10
 8011756:	d01a      	beq.n	801178e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8011758:	9f04      	ldr	r7, [sp, #16]
 801175a:	b1c7      	cbz	r7, 801178e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801175c:	7b78      	ldrb	r0, [r7, #13]
 801175e:	7a3b      	ldrb	r3, [r7, #8]
 8011760:	00c1      	lsls	r1, r0, #3
 8011762:	88aa      	ldrh	r2, [r5, #4]
 8011764:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011768:	4319      	orrs	r1, r3
 801176a:	0643      	lsls	r3, r0, #25
 801176c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8011770:	bf48      	it	mi
 8011772:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8011776:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801177a:	bf48      	it	mi
 801177c:	b219      	sxthmi	r1, r3
 801177e:	79fb      	ldrb	r3, [r7, #7]
 8011780:	4303      	orrs	r3, r0
 8011782:	4413      	add	r3, r2
 8011784:	1a5b      	subs	r3, r3, r1
 8011786:	b29b      	uxth	r3, r3
 8011788:	42a3      	cmp	r3, r4
 801178a:	bfc8      	it	gt
 801178c:	b21c      	sxthgt	r4, r3
 801178e:	4633      	mov	r3, r6
 8011790:	462a      	mov	r2, r5
 8011792:	2100      	movs	r1, #0
 8011794:	e7da      	b.n	801174c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8011796:	b2a0      	uxth	r0, r4
 8011798:	b01c      	add	sp, #112	; 0x70
 801179a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801179e:	b003      	add	sp, #12
 80117a0:	4770      	bx	lr

080117a2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80117a2:	b40e      	push	{r1, r2, r3}
 80117a4:	b570      	push	{r4, r5, r6, lr}
 80117a6:	b09b      	sub	sp, #108	; 0x6c
 80117a8:	4604      	mov	r4, r0
 80117aa:	ab1f      	add	r3, sp, #124	; 0x7c
 80117ac:	a803      	add	r0, sp, #12
 80117ae:	f853 5b04 	ldr.w	r5, [r3], #4
 80117b2:	9302      	str	r3, [sp, #8]
 80117b4:	f000 fd29 	bl	801220a <_ZN8touchgfx12TextProviderC1Ev>
 80117b8:	6823      	ldr	r3, [r4, #0]
 80117ba:	4620      	mov	r0, r4
 80117bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117be:	4798      	blx	r3
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	4606      	mov	r6, r0
 80117c4:	4620      	mov	r0, r4
 80117c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117c8:	2401      	movs	r4, #1
 80117ca:	4798      	blx	r3
 80117cc:	4633      	mov	r3, r6
 80117ce:	9000      	str	r0, [sp, #0]
 80117d0:	4629      	mov	r1, r5
 80117d2:	9a02      	ldr	r2, [sp, #8]
 80117d4:	a803      	add	r0, sp, #12
 80117d6:	f000 fd65 	bl	80122a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80117da:	a803      	add	r0, sp, #12
 80117dc:	f001 f956 	bl	8012a8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80117e0:	b2a3      	uxth	r3, r4
 80117e2:	b138      	cbz	r0, 80117f4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80117e4:	280a      	cmp	r0, #10
 80117e6:	a803      	add	r0, sp, #12
 80117e8:	bf04      	itt	eq
 80117ea:	3301      	addeq	r3, #1
 80117ec:	b21c      	sxtheq	r4, r3
 80117ee:	f001 f94d 	bl	8012a8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80117f2:	e7f5      	b.n	80117e0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80117f4:	4618      	mov	r0, r3
 80117f6:	b01b      	add	sp, #108	; 0x6c
 80117f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117fc:	b003      	add	sp, #12
 80117fe:	4770      	bx	lr

08011800 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8011800:	b40e      	push	{r1, r2, r3}
 8011802:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011804:	b09c      	sub	sp, #112	; 0x70
 8011806:	4604      	mov	r4, r0
 8011808:	ab21      	add	r3, sp, #132	; 0x84
 801180a:	a805      	add	r0, sp, #20
 801180c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011810:	9303      	str	r3, [sp, #12]
 8011812:	f000 fcfa 	bl	801220a <_ZN8touchgfx12TextProviderC1Ev>
 8011816:	6823      	ldr	r3, [r4, #0]
 8011818:	4620      	mov	r0, r4
 801181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801181c:	4798      	blx	r3
 801181e:	6823      	ldr	r3, [r4, #0]
 8011820:	4606      	mov	r6, r0
 8011822:	4620      	mov	r0, r4
 8011824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011826:	4798      	blx	r3
 8011828:	4633      	mov	r3, r6
 801182a:	4629      	mov	r1, r5
 801182c:	9000      	str	r0, [sp, #0]
 801182e:	9a03      	ldr	r2, [sp, #12]
 8011830:	a805      	add	r0, sp, #20
 8011832:	f000 fd37 	bl	80122a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011836:	ad1c      	add	r5, sp, #112	; 0x70
 8011838:	2100      	movs	r1, #0
 801183a:	26ff      	movs	r6, #255	; 0xff
 801183c:	4622      	mov	r2, r4
 801183e:	a805      	add	r0, sp, #20
 8011840:	f845 1d60 	str.w	r1, [r5, #-96]!
 8011844:	462b      	mov	r3, r5
 8011846:	f001 f829 	bl	801289c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801184a:	b1d8      	cbz	r0, 8011884 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801184c:	280a      	cmp	r0, #10
 801184e:	d012      	beq.n	8011876 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8011850:	9804      	ldr	r0, [sp, #16]
 8011852:	b180      	cbz	r0, 8011876 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8011854:	7b47      	ldrb	r7, [r0, #13]
 8011856:	7922      	ldrb	r2, [r4, #4]
 8011858:	00fb      	lsls	r3, r7, #3
 801185a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801185e:	7a03      	ldrb	r3, [r0, #8]
 8011860:	430b      	orrs	r3, r1
 8011862:	0679      	lsls	r1, r7, #25
 8011864:	bf44      	itt	mi
 8011866:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801186a:	b21b      	sxthmi	r3, r3
 801186c:	1ad3      	subs	r3, r2, r3
 801186e:	b2db      	uxtb	r3, r3
 8011870:	429e      	cmp	r6, r3
 8011872:	bf28      	it	cs
 8011874:	461e      	movcs	r6, r3
 8011876:	462b      	mov	r3, r5
 8011878:	4622      	mov	r2, r4
 801187a:	2100      	movs	r1, #0
 801187c:	a805      	add	r0, sp, #20
 801187e:	f001 f80d 	bl	801289c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011882:	e7e2      	b.n	801184a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8011884:	4630      	mov	r0, r6
 8011886:	b01c      	add	sp, #112	; 0x70
 8011888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801188c:	b003      	add	sp, #12
 801188e:	4770      	bx	lr

08011890 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8011890:	b513      	push	{r0, r1, r4, lr}
 8011892:	1d01      	adds	r1, r0, #4
 8011894:	4603      	mov	r3, r0
 8011896:	466a      	mov	r2, sp
 8011898:	c903      	ldmia	r1, {r0, r1}
 801189a:	e882 0003 	stmia.w	r2, {r0, r1}
 801189e:	2100      	movs	r1, #0
 80118a0:	4618      	mov	r0, r3
 80118a2:	9100      	str	r1, [sp, #0]
 80118a4:	6819      	ldr	r1, [r3, #0]
 80118a6:	690c      	ldr	r4, [r1, #16]
 80118a8:	4611      	mov	r1, r2
 80118aa:	47a0      	blx	r4
 80118ac:	b002      	add	sp, #8
 80118ae:	bd10      	pop	{r4, pc}

080118b0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80118b0:	b538      	push	{r3, r4, r5, lr}
 80118b2:	680b      	ldr	r3, [r1, #0]
 80118b4:	460c      	mov	r4, r1
 80118b6:	4605      	mov	r5, r0
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	4798      	blx	r3
 80118bc:	6823      	ldr	r3, [r4, #0]
 80118be:	4620      	mov	r0, r4
 80118c0:	4629      	mov	r1, r5
 80118c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c4:	4798      	blx	r3
 80118c6:	4628      	mov	r0, r5
 80118c8:	bd38      	pop	{r3, r4, r5, pc}

080118ca <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80118ca:	b410      	push	{r4}
 80118cc:	880a      	ldrh	r2, [r1, #0]
 80118ce:	8884      	ldrh	r4, [r0, #4]
 80118d0:	4422      	add	r2, r4
 80118d2:	800a      	strh	r2, [r1, #0]
 80118d4:	884a      	ldrh	r2, [r1, #2]
 80118d6:	88c4      	ldrh	r4, [r0, #6]
 80118d8:	4422      	add	r2, r4
 80118da:	804a      	strh	r2, [r1, #2]
 80118dc:	6940      	ldr	r0, [r0, #20]
 80118de:	b120      	cbz	r0, 80118ea <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80118e0:	6803      	ldr	r3, [r0, #0]
 80118e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e8:	4718      	bx	r3
 80118ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118ee:	4770      	bx	lr

080118f0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80118f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118f2:	460b      	mov	r3, r1
 80118f4:	b085      	sub	sp, #20
 80118f6:	4604      	mov	r4, r0
 80118f8:	b901      	cbnz	r1, 80118fc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80118fa:	b322      	cbz	r2, 8011946 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 80118fc:	1d27      	adds	r7, r4, #4
 80118fe:	466e      	mov	r6, sp
 8011900:	88e5      	ldrh	r5, [r4, #6]
 8011902:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011906:	442a      	add	r2, r5
 8011908:	e886 0003 	stmia.w	r6, {r0, r1}
 801190c:	88a1      	ldrh	r1, [r4, #4]
 801190e:	4620      	mov	r0, r4
 8011910:	b215      	sxth	r5, r2
 8011912:	4419      	add	r1, r3
 8011914:	6823      	ldr	r3, [r4, #0]
 8011916:	b209      	sxth	r1, r1
 8011918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801191a:	4798      	blx	r3
 801191c:	6823      	ldr	r3, [r4, #0]
 801191e:	4629      	mov	r1, r5
 8011920:	4620      	mov	r0, r4
 8011922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011924:	ad02      	add	r5, sp, #8
 8011926:	4798      	blx	r3
 8011928:	e897 0003 	ldmia.w	r7, {r0, r1}
 801192c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011930:	6960      	ldr	r0, [r4, #20]
 8011932:	b150      	cbz	r0, 801194a <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8011934:	6803      	ldr	r3, [r0, #0]
 8011936:	4631      	mov	r1, r6
 8011938:	691b      	ldr	r3, [r3, #16]
 801193a:	4798      	blx	r3
 801193c:	6960      	ldr	r0, [r4, #20]
 801193e:	6803      	ldr	r3, [r0, #0]
 8011940:	691b      	ldr	r3, [r3, #16]
 8011942:	4629      	mov	r1, r5
 8011944:	4798      	blx	r3
 8011946:	b005      	add	sp, #20
 8011948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801194a:	f7ff f82b 	bl	80109a4 <_ZN8touchgfx11Application11getInstanceEv>
 801194e:	6803      	ldr	r3, [r0, #0]
 8011950:	4631      	mov	r1, r6
 8011952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011954:	4798      	blx	r3
 8011956:	f7ff f825 	bl	80109a4 <_ZN8touchgfx11Application11getInstanceEv>
 801195a:	6803      	ldr	r3, [r0, #0]
 801195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801195e:	e7f0      	b.n	8011942 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08011960 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8011960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011962:	8882      	ldrh	r2, [r0, #4]
 8011964:	4605      	mov	r5, r0
 8011966:	880b      	ldrh	r3, [r1, #0]
 8011968:	460c      	mov	r4, r1
 801196a:	4413      	add	r3, r2
 801196c:	800b      	strh	r3, [r1, #0]
 801196e:	884b      	ldrh	r3, [r1, #2]
 8011970:	88c2      	ldrh	r2, [r0, #6]
 8011972:	4413      	add	r3, r2
 8011974:	4602      	mov	r2, r0
 8011976:	804b      	strh	r3, [r1, #2]
 8011978:	466b      	mov	r3, sp
 801197a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801197e:	6851      	ldr	r1, [r2, #4]
 8011980:	c303      	stmia	r3!, {r0, r1}
 8011982:	4621      	mov	r1, r4
 8011984:	4668      	mov	r0, sp
 8011986:	f7fc f8d3 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 801198a:	466b      	mov	r3, sp
 801198c:	cb03      	ldmia	r3!, {r0, r1}
 801198e:	6020      	str	r0, [r4, #0]
 8011990:	6061      	str	r1, [r4, #4]
 8011992:	6968      	ldr	r0, [r5, #20]
 8011994:	b128      	cbz	r0, 80119a2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8011996:	6803      	ldr	r3, [r0, #0]
 8011998:	691b      	ldr	r3, [r3, #16]
 801199a:	4621      	mov	r1, r4
 801199c:	4798      	blx	r3
 801199e:	b003      	add	sp, #12
 80119a0:	bd30      	pop	{r4, r5, pc}
 80119a2:	f7fe ffff 	bl	80109a4 <_ZN8touchgfx11Application11getInstanceEv>
 80119a6:	6803      	ldr	r3, [r0, #0]
 80119a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119aa:	e7f6      	b.n	801199a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080119ac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80119ac:	b570      	push	{r4, r5, r6, lr}
 80119ae:	8882      	ldrh	r2, [r0, #4]
 80119b0:	460c      	mov	r4, r1
 80119b2:	880b      	ldrh	r3, [r1, #0]
 80119b4:	4605      	mov	r5, r0
 80119b6:	4413      	add	r3, r2
 80119b8:	800b      	strh	r3, [r1, #0]
 80119ba:	884b      	ldrh	r3, [r1, #2]
 80119bc:	88c2      	ldrh	r2, [r0, #6]
 80119be:	4413      	add	r3, r2
 80119c0:	804b      	strh	r3, [r1, #2]
 80119c2:	1d01      	adds	r1, r0, #4
 80119c4:	4620      	mov	r0, r4
 80119c6:	f7fc f8b3 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 80119ca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	dd0b      	ble.n	80119ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80119d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	dd07      	ble.n	80119ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80119da:	6968      	ldr	r0, [r5, #20]
 80119dc:	b128      	cbz	r0, 80119ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80119de:	6803      	ldr	r3, [r0, #0]
 80119e0:	4621      	mov	r1, r4
 80119e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119e8:	4718      	bx	r3
 80119ea:	bd70      	pop	{r4, r5, r6, pc}

080119ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80119ec:	b510      	push	{r4, lr}
 80119ee:	2300      	movs	r3, #0
 80119f0:	4604      	mov	r4, r0
 80119f2:	4608      	mov	r0, r1
 80119f4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80119f8:	8023      	strh	r3, [r4, #0]
 80119fa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80119fe:	8063      	strh	r3, [r4, #2]
 8011a00:	6803      	ldr	r3, [r0, #0]
 8011a02:	80a1      	strh	r1, [r4, #4]
 8011a04:	4621      	mov	r1, r4
 8011a06:	80e2      	strh	r2, [r4, #6]
 8011a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a0a:	4798      	blx	r3
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	bd10      	pop	{r4, pc}

08011a10 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8011a10:	b530      	push	{r4, r5, lr}
 8011a12:	8083      	strh	r3, [r0, #4]
 8011a14:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011a18:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8011a1c:	7183      	strb	r3, [r0, #6]
 8011a1e:	79c3      	ldrb	r3, [r0, #7]
 8011a20:	6101      	str	r1, [r0, #16]
 8011a22:	f365 0306 	bfi	r3, r5, #0, #7
 8011a26:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8011a2a:	8282      	strh	r2, [r0, #20]
 8011a2c:	f365 13c7 	bfi	r3, r5, #7, #1
 8011a30:	71c3      	strb	r3, [r0, #7]
 8011a32:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8011a36:	7203      	strb	r3, [r0, #8]
 8011a38:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8011a3c:	7243      	strb	r3, [r0, #9]
 8011a3e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8011a42:	8143      	strh	r3, [r0, #10]
 8011a44:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8011a48:	8183      	strh	r3, [r0, #12]
 8011a4a:	4b01      	ldr	r3, [pc, #4]	; (8011a50 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8011a4c:	6003      	str	r3, [r0, #0]
 8011a4e:	bd30      	pop	{r4, r5, pc}
 8011a50:	0801eeac 	.word	0x0801eeac

08011a54 <_ZNK8touchgfx9ConstFont4findEt>:
 8011a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a56:	6904      	ldr	r4, [r0, #16]
 8011a58:	b3bc      	cbz	r4, 8011aca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a5a:	88a3      	ldrh	r3, [r4, #4]
 8011a5c:	8a82      	ldrh	r2, [r0, #20]
 8011a5e:	1acb      	subs	r3, r1, r3
 8011a60:	f102 32ff 	add.w	r2, r2, #4294967295
 8011a64:	d431      	bmi.n	8011aca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a66:	4293      	cmp	r3, r2
 8011a68:	dd0c      	ble.n	8011a84 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8011a6a:	230e      	movs	r3, #14
 8011a6c:	fb03 4302 	mla	r3, r3, r2, r4
 8011a70:	889b      	ldrh	r3, [r3, #4]
 8011a72:	1a5b      	subs	r3, r3, r1
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	429a      	cmp	r2, r3
 8011a78:	db27      	blt.n	8011aca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	bfbc      	itt	lt
 8011a7e:	2302      	movlt	r3, #2
 8011a80:	fb92 f3f3 	sdivlt	r3, r2, r3
 8011a84:	2500      	movs	r5, #0
 8011a86:	260e      	movs	r6, #14
 8011a88:	4295      	cmp	r5, r2
 8011a8a:	dc1e      	bgt.n	8011aca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a8c:	fb06 4003 	mla	r0, r6, r3, r4
 8011a90:	8887      	ldrh	r7, [r0, #4]
 8011a92:	42b9      	cmp	r1, r7
 8011a94:	d01a      	beq.n	8011acc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8011a96:	d20d      	bcs.n	8011ab4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8011a98:	1e5a      	subs	r2, r3, #1
 8011a9a:	4295      	cmp	r5, r2
 8011a9c:	dc15      	bgt.n	8011aca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a9e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8011aa2:	1a5b      	subs	r3, r3, r1
 8011aa4:	1ad3      	subs	r3, r2, r3
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	db0f      	blt.n	8011aca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011aaa:	429d      	cmp	r5, r3
 8011aac:	ddec      	ble.n	8011a88 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011aae:	1953      	adds	r3, r2, r5
 8011ab0:	105b      	asrs	r3, r3, #1
 8011ab2:	e7e9      	b.n	8011a88 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011ab4:	1c5d      	adds	r5, r3, #1
 8011ab6:	42aa      	cmp	r2, r5
 8011ab8:	db07      	blt.n	8011aca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011aba:	8a43      	ldrh	r3, [r0, #18]
 8011abc:	1acb      	subs	r3, r1, r3
 8011abe:	442b      	add	r3, r5
 8011ac0:	429d      	cmp	r5, r3
 8011ac2:	dc02      	bgt.n	8011aca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	dadf      	bge.n	8011a88 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011ac8:	e7f1      	b.n	8011aae <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8011aca:	2000      	movs	r0, #0
 8011acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ace <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8011ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad0:	4604      	mov	r4, r0
 8011ad2:	4617      	mov	r7, r2
 8011ad4:	461e      	mov	r6, r3
 8011ad6:	b911      	cbnz	r1, 8011ade <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8011ad8:	2500      	movs	r5, #0
 8011ada:	4628      	mov	r0, r5
 8011adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ade:	290a      	cmp	r1, #10
 8011ae0:	d0fa      	beq.n	8011ad8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011ae2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8011ae6:	4291      	cmp	r1, r2
 8011ae8:	d0f6      	beq.n	8011ad8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011aea:	f242 020b 	movw	r2, #8203	; 0x200b
 8011aee:	4291      	cmp	r1, r2
 8011af0:	d0f2      	beq.n	8011ad8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011af2:	f7ff ffaf 	bl	8011a54 <_ZNK8touchgfx9ConstFont4findEt>
 8011af6:	4605      	mov	r5, r0
 8011af8:	b950      	cbnz	r0, 8011b10 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8011afa:	6823      	ldr	r3, [r4, #0]
 8011afc:	4620      	mov	r0, r4
 8011afe:	691b      	ldr	r3, [r3, #16]
 8011b00:	4798      	blx	r3
 8011b02:	4601      	mov	r1, r0
 8011b04:	4620      	mov	r0, r4
 8011b06:	f7ff ffa5 	bl	8011a54 <_ZNK8touchgfx9ConstFont4findEt>
 8011b0a:	4605      	mov	r5, r0
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	d0e3      	beq.n	8011ad8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011b10:	6823      	ldr	r3, [r4, #0]
 8011b12:	4629      	mov	r1, r5
 8011b14:	4620      	mov	r0, r4
 8011b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b18:	4798      	blx	r3
 8011b1a:	6038      	str	r0, [r7, #0]
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	4620      	mov	r0, r4
 8011b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b22:	4798      	blx	r3
 8011b24:	7030      	strb	r0, [r6, #0]
 8011b26:	e7d8      	b.n	8011ada <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08011b28 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8011b28:	2000      	movs	r0, #0
 8011b2a:	4770      	bx	lr

08011b2c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8011b2c:	2001      	movs	r0, #1
 8011b2e:	4770      	bx	lr

08011b30 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8011b30:	2002      	movs	r0, #2
 8011b32:	4770      	bx	lr

08011b34 <_ZN8touchgfx12GestureEventD1Ev>:
 8011b34:	4770      	bx	lr

08011b36 <_ZN8touchgfx9DragEventD1Ev>:
 8011b36:	4770      	bx	lr

08011b38 <_ZN8touchgfx10ClickEventD1Ev>:
 8011b38:	4770      	bx	lr

08011b3a <_ZN8touchgfx10ClickEventD0Ev>:
 8011b3a:	b510      	push	{r4, lr}
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	210c      	movs	r1, #12
 8011b40:	f009 ff11 	bl	801b966 <_ZdlPvj>
 8011b44:	4620      	mov	r0, r4
 8011b46:	bd10      	pop	{r4, pc}

08011b48 <_ZN8touchgfx9DragEventD0Ev>:
 8011b48:	b510      	push	{r4, lr}
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	2110      	movs	r1, #16
 8011b4e:	f009 ff0a 	bl	801b966 <_ZdlPvj>
 8011b52:	4620      	mov	r0, r4
 8011b54:	bd10      	pop	{r4, pc}

08011b56 <_ZN8touchgfx12GestureEventD0Ev>:
 8011b56:	b510      	push	{r4, lr}
 8011b58:	4604      	mov	r4, r0
 8011b5a:	210c      	movs	r1, #12
 8011b5c:	f009 ff03 	bl	801b966 <_ZdlPvj>
 8011b60:	4620      	mov	r0, r4
 8011b62:	bd10      	pop	{r4, pc}

08011b64 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8011b64:	b530      	push	{r4, r5, lr}
 8011b66:	460d      	mov	r5, r1
 8011b68:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011b6a:	b087      	sub	sp, #28
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	b301      	cbz	r1, 8011bb2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8011b70:	a801      	add	r0, sp, #4
 8011b72:	f7ff ff3b 	bl	80119ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b76:	892a      	ldrh	r2, [r5, #8]
 8011b78:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011b7c:	7928      	ldrb	r0, [r5, #4]
 8011b7e:	1ad2      	subs	r2, r2, r3
 8011b80:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011b82:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8011b86:	441a      	add	r2, r3
 8011b88:	896b      	ldrh	r3, [r5, #10]
 8011b8a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8011b8e:	f88d 0010 	strb.w	r0, [sp, #16]
 8011b92:	1b5b      	subs	r3, r3, r5
 8011b94:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8011b96:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011b98:	442b      	add	r3, r5
 8011b9a:	4d07      	ldr	r5, [pc, #28]	; (8011bb8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8011b9c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011ba0:	a903      	add	r1, sp, #12
 8011ba2:	9503      	str	r5, [sp, #12]
 8011ba4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011ba8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011bac:	6803      	ldr	r3, [r0, #0]
 8011bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bb0:	4798      	blx	r3
 8011bb2:	b007      	add	sp, #28
 8011bb4:	bd30      	pop	{r4, r5, pc}
 8011bb6:	bf00      	nop
 8011bb8:	0801ef2c 	.word	0x0801ef2c

08011bbc <_ZNK8touchgfx4Rect9intersectEss>:
 8011bbc:	b510      	push	{r4, lr}
 8011bbe:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011bc2:	428b      	cmp	r3, r1
 8011bc4:	dc10      	bgt.n	8011be8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8011bc6:	8884      	ldrh	r4, [r0, #4]
 8011bc8:	4423      	add	r3, r4
 8011bca:	b21b      	sxth	r3, r3
 8011bcc:	4299      	cmp	r1, r3
 8011bce:	da0b      	bge.n	8011be8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8011bd0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	dc07      	bgt.n	8011be8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8011bd8:	88c0      	ldrh	r0, [r0, #6]
 8011bda:	4418      	add	r0, r3
 8011bdc:	b200      	sxth	r0, r0
 8011bde:	4282      	cmp	r2, r0
 8011be0:	bfac      	ite	ge
 8011be2:	2000      	movge	r0, #0
 8011be4:	2001      	movlt	r0, #1
 8011be6:	bd10      	pop	{r4, pc}
 8011be8:	2000      	movs	r0, #0
 8011bea:	e7fc      	b.n	8011be6 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08011bec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8011bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bee:	460c      	mov	r4, r1
 8011bf0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011bf2:	b089      	sub	sp, #36	; 0x24
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	2900      	cmp	r1, #0
 8011bf8:	d054      	beq.n	8011ca4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8011bfa:	4668      	mov	r0, sp
 8011bfc:	f7ff fef6 	bl	80119ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011c00:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8011c02:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8011c04:	4668      	mov	r0, sp
 8011c06:	8922      	ldrh	r2, [r4, #8]
 8011c08:	88e1      	ldrh	r1, [r4, #6]
 8011c0a:	443a      	add	r2, r7
 8011c0c:	4431      	add	r1, r6
 8011c0e:	b212      	sxth	r2, r2
 8011c10:	b209      	sxth	r1, r1
 8011c12:	f7ff ffd3 	bl	8011bbc <_ZNK8touchgfx4Rect9intersectEss>
 8011c16:	b1d0      	cbz	r0, 8011c4e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8011c18:	89a2      	ldrh	r2, [r4, #12]
 8011c1a:	4668      	mov	r0, sp
 8011c1c:	8961      	ldrh	r1, [r4, #10]
 8011c1e:	443a      	add	r2, r7
 8011c20:	4431      	add	r1, r6
 8011c22:	b212      	sxth	r2, r2
 8011c24:	b209      	sxth	r1, r1
 8011c26:	f7ff ffc9 	bl	8011bbc <_ZNK8touchgfx4Rect9intersectEss>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	b978      	cbnz	r0, 8011c4e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8011c2e:	4a1e      	ldr	r2, [pc, #120]	; (8011ca8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8011c30:	a904      	add	r1, sp, #16
 8011c32:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011c34:	9204      	str	r2, [sp, #16]
 8011c36:	2202      	movs	r2, #2
 8011c38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c3c:	f88d 2014 	strb.w	r2, [sp, #20]
 8011c40:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011c44:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011c48:	6803      	ldr	r3, [r0, #0]
 8011c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c4c:	4798      	blx	r3
 8011c4e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8011c50:	a802      	add	r0, sp, #8
 8011c52:	f7ff fecb 	bl	80119ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011c56:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011c5a:	88e0      	ldrh	r0, [r4, #6]
 8011c5c:	8961      	ldrh	r1, [r4, #10]
 8011c5e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8011c62:	1a80      	subs	r0, r0, r2
 8011c64:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8011c68:	1a89      	subs	r1, r1, r2
 8011c6a:	8923      	ldrh	r3, [r4, #8]
 8011c6c:	4460      	add	r0, ip
 8011c6e:	89a2      	ldrh	r2, [r4, #12]
 8011c70:	4461      	add	r1, ip
 8011c72:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8011c74:	eba3 030e 	sub.w	r3, r3, lr
 8011c78:	eba2 020e 	sub.w	r2, r2, lr
 8011c7c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011c80:	7927      	ldrb	r7, [r4, #4]
 8011c82:	4433      	add	r3, r6
 8011c84:	4432      	add	r2, r6
 8011c86:	4c09      	ldr	r4, [pc, #36]	; (8011cac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8011c88:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011c8a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8011c8e:	a904      	add	r1, sp, #16
 8011c90:	9404      	str	r4, [sp, #16]
 8011c92:	f88d 7014 	strb.w	r7, [sp, #20]
 8011c96:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011c9a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011c9e:	6803      	ldr	r3, [r0, #0]
 8011ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ca2:	4798      	blx	r3
 8011ca4:	b009      	add	sp, #36	; 0x24
 8011ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ca8:	0801ef04 	.word	0x0801ef04
 8011cac:	0801ef18 	.word	0x0801ef18

08011cb0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8011cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb4:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8011cb8:	b0a1      	sub	sp, #132	; 0x84
 8011cba:	4604      	mov	r4, r0
 8011cbc:	460d      	mov	r5, r1
 8011cbe:	790b      	ldrb	r3, [r1, #4]
 8011cc0:	f1b9 0f00 	cmp.w	r9, #0
 8011cc4:	d00f      	beq.n	8011ce6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f040 80a2 	bne.w	8011e10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8011ccc:	b021      	add	sp, #132	; 0x84
 8011cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cd2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8011cd6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8011cda:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8011cde:	1d20      	adds	r0, r4, #4
 8011ce0:	f7fb fe74 	bl	800d9cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011ce4:	e094      	b.n	8011e10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d1f0      	bne.n	8011ccc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8011cea:	4b5f      	ldr	r3, [pc, #380]	; (8011e68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8011cf2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8011cf6:	f1ba 0f03 	cmp.w	sl, #3
 8011cfa:	ddea      	ble.n	8011cd2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8011cfc:	f1ba 0f0c 	cmp.w	sl, #12
 8011d00:	f04f 0303 	mov.w	r3, #3
 8011d04:	f04f 0600 	mov.w	r6, #0
 8011d08:	4958      	ldr	r1, [pc, #352]	; (8011e6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8011d0a:	bfd8      	it	le
 8011d0c:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8011d10:	960a      	str	r6, [sp, #40]	; 0x28
 8011d12:	bfd8      	it	le
 8011d14:	fb92 f3f3 	sdivle	r3, r2, r3
 8011d18:	9301      	str	r3, [sp, #4]
 8011d1a:	4b55      	ldr	r3, [pc, #340]	; (8011e70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8011d1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011d20:	4b54      	ldr	r3, [pc, #336]	; (8011e74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8011d22:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8011d26:	2248      	movs	r2, #72	; 0x48
 8011d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d2c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011d30:	ab0e      	add	r3, sp, #56	; 0x38
 8011d32:	4618      	mov	r0, r3
 8011d34:	f009 fec4 	bl	801bac0 <memcpy>
 8011d38:	f04f 32ff 	mov.w	r2, #4294967295
 8011d3c:	f8cd a008 	str.w	sl, [sp, #8]
 8011d40:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8011d44:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011d48:	46b3      	mov	fp, r6
 8011d4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	9303      	str	r3, [sp, #12]
 8011d52:	2300      	movs	r3, #0
 8011d54:	9a03      	ldr	r2, [sp, #12]
 8011d56:	88ef      	ldrh	r7, [r5, #6]
 8011d58:	a80a      	add	r0, sp, #40	; 0x28
 8011d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d5c:	9b07      	ldr	r3, [sp, #28]
 8011d5e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8011d62:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8011d66:	fb13 f302 	smulbb	r3, r3, r2
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	9304      	str	r3, [sp, #16]
 8011d6e:	9b07      	ldr	r3, [sp, #28]
 8011d70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	fb13 f302 	smulbb	r3, r3, r2
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	9305      	str	r3, [sp, #20]
 8011d7e:	9b04      	ldr	r3, [sp, #16]
 8011d80:	441f      	add	r7, r3
 8011d82:	9b05      	ldr	r3, [sp, #20]
 8011d84:	4498      	add	r8, r3
 8011d86:	b23f      	sxth	r7, r7
 8011d88:	fa0f f888 	sxth.w	r8, r8
 8011d8c:	4639      	mov	r1, r7
 8011d8e:	4642      	mov	r2, r8
 8011d90:	f7ff ff14 	bl	8011bbc <_ZNK8touchgfx4Rect9intersectEss>
 8011d94:	b380      	cbz	r0, 8011df8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8011d96:	4639      	mov	r1, r7
 8011d98:	ab09      	add	r3, sp, #36	; 0x24
 8011d9a:	4642      	mov	r2, r8
 8011d9c:	1d20      	adds	r0, r4, #4
 8011d9e:	f7fb fe15 	bl	800d9cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011da4:	b341      	cbz	r1, 8011df8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8011da6:	4549      	cmp	r1, r9
 8011da8:	d026      	beq.n	8011df8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8011daa:	a80c      	add	r0, sp, #48	; 0x30
 8011dac:	f7ff fe1e 	bl	80119ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011db0:	2002      	movs	r0, #2
 8011db2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8011db6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8011dba:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011dbe:	fb92 f2f0 	sdiv	r2, r2, r0
 8011dc2:	440a      	add	r2, r1
 8011dc4:	1a99      	subs	r1, r3, r2
 8011dc6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8011dca:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8011dce:	fb93 f3f0 	sdiv	r3, r3, r0
 8011dd2:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8011dd6:	4403      	add	r3, r0
 8011dd8:	1ad3      	subs	r3, r2, r3
 8011dda:	9a06      	ldr	r2, [sp, #24]
 8011ddc:	435b      	muls	r3, r3
 8011dde:	fb01 3301 	mla	r3, r1, r1, r3
 8011de2:	4293      	cmp	r3, r2
 8011de4:	d208      	bcs.n	8011df8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8011de6:	9a04      	ldr	r2, [sp, #16]
 8011de8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011dec:	86a2      	strh	r2, [r4, #52]	; 0x34
 8011dee:	9a05      	ldr	r2, [sp, #20]
 8011df0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8011df4:	86e2      	strh	r2, [r4, #54]	; 0x36
 8011df6:	9306      	str	r3, [sp, #24]
 8011df8:	f10b 0b02 	add.w	fp, fp, #2
 8011dfc:	f1bb 0f08 	cmp.w	fp, #8
 8011e00:	dda7      	ble.n	8011d52 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8011e02:	9b02      	ldr	r3, [sp, #8]
 8011e04:	3601      	adds	r6, #1
 8011e06:	4453      	add	r3, sl
 8011e08:	9302      	str	r3, [sp, #8]
 8011e0a:	9b01      	ldr	r3, [sp, #4]
 8011e0c:	42b3      	cmp	r3, r6
 8011e0e:	d199      	bne.n	8011d44 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8011e10:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011e12:	2900      	cmp	r1, #0
 8011e14:	f43f af5a 	beq.w	8011ccc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8011e18:	a80c      	add	r0, sp, #48	; 0x30
 8011e1a:	2600      	movs	r6, #0
 8011e1c:	f7ff fde6 	bl	80119ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011e20:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011e24:	88ea      	ldrh	r2, [r5, #6]
 8011e26:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8011e2a:	1ad2      	subs	r2, r2, r3
 8011e2c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011e2e:	7929      	ldrb	r1, [r5, #4]
 8011e30:	441a      	add	r2, r3
 8011e32:	892b      	ldrh	r3, [r5, #8]
 8011e34:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8011e38:	a90e      	add	r1, sp, #56	; 0x38
 8011e3a:	1a1b      	subs	r3, r3, r0
 8011e3c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8011e3e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8011e42:	4403      	add	r3, r0
 8011e44:	480c      	ldr	r0, [pc, #48]	; (8011e78 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8011e46:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8011e4a:	900e      	str	r0, [sp, #56]	; 0x38
 8011e4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011e4e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011e52:	6803      	ldr	r3, [r0, #0]
 8011e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e56:	4798      	blx	r3
 8011e58:	792b      	ldrb	r3, [r5, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f43f af36 	beq.w	8011ccc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8011e60:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8011e64:	e732      	b.n	8011ccc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8011e66:	bf00      	nop
 8011e68:	2000df6c 	.word	0x2000df6c
 8011e6c:	0801d578 	.word	0x0801d578
 8011e70:	2000df60 	.word	0x2000df60
 8011e74:	2000df62 	.word	0x2000df62
 8011e78:	0801ef04 	.word	0x0801ef04

08011e7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8011e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e7e:	4604      	mov	r4, r0
 8011e80:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011e84:	3201      	adds	r2, #1
 8011e86:	d112      	bne.n	8011eae <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8011e88:	2500      	movs	r5, #0
 8011e8a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011e8e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011e92:	6803      	ldr	r3, [r0, #0]
 8011e94:	9500      	str	r5, [sp, #0]
 8011e96:	466d      	mov	r5, sp
 8011e98:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011e9c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011ea0:	4629      	mov	r1, r5
 8011ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ea4:	4798      	blx	r3
 8011ea6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011eaa:	e884 0003 	stmia.w	r4, {r0, r1}
 8011eae:	4620      	mov	r0, r4
 8011eb0:	b003      	add	sp, #12
 8011eb2:	bd30      	pop	{r4, r5, pc}

08011eb4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011eb4:	b513      	push	{r0, r1, r4, lr}
 8011eb6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8011eba:	4604      	mov	r4, r0
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	d109      	bne.n	8011ed4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8011ec0:	4601      	mov	r1, r0
 8011ec2:	4668      	mov	r0, sp
 8011ec4:	f7ff fd92 	bl	80119ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011ec8:	f8bd 3000 	ldrh.w	r3, [sp]
 8011ecc:	8423      	strh	r3, [r4, #32]
 8011ece:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011ed2:	8463      	strh	r3, [r4, #34]	; 0x22
 8011ed4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8011ed8:	b002      	add	sp, #8
 8011eda:	bd10      	pop	{r4, pc}

08011edc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8011edc:	b513      	push	{r0, r1, r4, lr}
 8011ede:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	d109      	bne.n	8011efc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8011ee8:	4601      	mov	r1, r0
 8011eea:	4668      	mov	r0, sp
 8011eec:	f7ff fd7e 	bl	80119ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011ef0:	f8bd 3000 	ldrh.w	r3, [sp]
 8011ef4:	8423      	strh	r3, [r4, #32]
 8011ef6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011efa:	8463      	strh	r3, [r4, #34]	; 0x22
 8011efc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8011f00:	b002      	add	sp, #8
 8011f02:	bd10      	pop	{r4, pc}

08011f04 <_ZN8touchgfx6ScreenC1Ev>:
 8011f04:	b570      	push	{r4, r5, r6, lr}
 8011f06:	4b17      	ldr	r3, [pc, #92]	; (8011f64 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8011f08:	4605      	mov	r5, r0
 8011f0a:	4a17      	ldr	r2, [pc, #92]	; (8011f68 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8011f0c:	2101      	movs	r1, #1
 8011f0e:	f845 3b04 	str.w	r3, [r5], #4
 8011f12:	2300      	movs	r3, #0
 8011f14:	6042      	str	r2, [r0, #4]
 8011f16:	4604      	mov	r4, r0
 8011f18:	8103      	strh	r3, [r0, #8]
 8011f1a:	8143      	strh	r3, [r0, #10]
 8011f1c:	8183      	strh	r3, [r0, #12]
 8011f1e:	81c3      	strh	r3, [r0, #14]
 8011f20:	8203      	strh	r3, [r0, #16]
 8011f22:	8243      	strh	r3, [r0, #18]
 8011f24:	8283      	strh	r3, [r0, #20]
 8011f26:	82c3      	strh	r3, [r0, #22]
 8011f28:	6203      	str	r3, [r0, #32]
 8011f2a:	8483      	strh	r3, [r0, #36]	; 0x24
 8011f2c:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011f2e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8011f32:	6343      	str	r3, [r0, #52]	; 0x34
 8011f34:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8011f38:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011f3c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8011f40:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8011f44:	4b09      	ldr	r3, [pc, #36]	; (8011f6c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8011f46:	4628      	mov	r0, r5
 8011f48:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011f4c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011f4e:	4a08      	ldr	r2, [pc, #32]	; (8011f70 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8011f50:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011f54:	4798      	blx	r3
 8011f56:	6863      	ldr	r3, [r4, #4]
 8011f58:	4628      	mov	r0, r5
 8011f5a:	4631      	mov	r1, r6
 8011f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f5e:	4798      	blx	r3
 8011f60:	4620      	mov	r0, r4
 8011f62:	bd70      	pop	{r4, r5, r6, pc}
 8011f64:	0801ef40 	.word	0x0801ef40
 8011f68:	0801dfc4 	.word	0x0801dfc4
 8011f6c:	2000df62 	.word	0x2000df62
 8011f70:	2000df60 	.word	0x2000df60

08011f74 <_ZN8touchgfx6Screen4drawEv>:
 8011f74:	4b09      	ldr	r3, [pc, #36]	; (8011f9c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8011f76:	b507      	push	{r0, r1, r2, lr}
 8011f78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011f7c:	2100      	movs	r1, #0
 8011f7e:	4b08      	ldr	r3, [pc, #32]	; (8011fa0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8011f80:	9100      	str	r1, [sp, #0]
 8011f82:	4669      	mov	r1, sp
 8011f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f88:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011f8c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011f90:	6803      	ldr	r3, [r0, #0]
 8011f92:	689b      	ldr	r3, [r3, #8]
 8011f94:	4798      	blx	r3
 8011f96:	b003      	add	sp, #12
 8011f98:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f9c:	2000df60 	.word	0x2000df60
 8011fa0:	2000df62 	.word	0x2000df62

08011fa4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8011fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011fac:	b089      	sub	sp, #36	; 0x24
 8011fae:	4680      	mov	r8, r0
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	4615      	mov	r5, r2
 8011fb6:	dd0e      	ble.n	8011fd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011fb8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	dd0a      	ble.n	8011fd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	f7ff ff5b 	bl	8011e7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011fc6:	4621      	mov	r1, r4
 8011fc8:	f7fe fc62 	bl	8010890 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011fcc:	69eb      	ldr	r3, [r5, #28]
 8011fce:	b928      	cbnz	r0, 8011fdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8011fd0:	461d      	mov	r5, r3
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d1f4      	bne.n	8011fc0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8011fd6:	b009      	add	sp, #36	; 0x24
 8011fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fdc:	ae04      	add	r6, sp, #16
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	f000 80b5 	beq.w	801214e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011fe4:	682b      	ldr	r3, [r5, #0]
 8011fe6:	4629      	mov	r1, r5
 8011fe8:	a802      	add	r0, sp, #8
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	4798      	blx	r3
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f7ff ff60 	bl	8011eb4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011ff4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8011ff8:	4407      	add	r7, r0
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	f7ff ff6e 	bl	8011edc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012000:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012004:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012008:	b23f      	sxth	r7, r7
 801200a:	4418      	add	r0, r3
 801200c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012010:	4621      	mov	r1, r4
 8012012:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012016:	f8ad 0012 	strh.w	r0, [sp, #18]
 801201a:	4630      	mov	r0, r6
 801201c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012020:	f8ad 7010 	strh.w	r7, [sp, #16]
 8012024:	f7fb fd84 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 8012028:	4628      	mov	r0, r5
 801202a:	f7ff ff27 	bl	8011e7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801202e:	ab06      	add	r3, sp, #24
 8012030:	4602      	mov	r2, r0
 8012032:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012036:	e883 0003 	stmia.w	r3, {r0, r1}
 801203a:	4611      	mov	r1, r2
 801203c:	4618      	mov	r0, r3
 801203e:	f7fb fd77 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 8012042:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012046:	f9b4 1000 	ldrsh.w	r1, [r4]
 801204a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801204e:	4299      	cmp	r1, r3
 8012050:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8012054:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8012058:	d10b      	bne.n	8012072 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801205a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801205e:	4552      	cmp	r2, sl
 8012060:	d107      	bne.n	8012072 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012062:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012066:	455a      	cmp	r2, fp
 8012068:	d103      	bne.n	8012072 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801206a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801206e:	454a      	cmp	r2, r9
 8012070:	d06d      	beq.n	801214e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012072:	f1bb 0f00 	cmp.w	fp, #0
 8012076:	dd65      	ble.n	8012144 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8012078:	f1b9 0f00 	cmp.w	r9, #0
 801207c:	dd62      	ble.n	8012144 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801207e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012082:	fa1f f08a 	uxth.w	r0, sl
 8012086:	4552      	cmp	r2, sl
 8012088:	9000      	str	r0, [sp, #0]
 801208a:	da12      	bge.n	80120b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801208c:	9301      	str	r3, [sp, #4]
 801208e:	9b00      	ldr	r3, [sp, #0]
 8012090:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012094:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012098:	1a9a      	subs	r2, r3, r2
 801209a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801209e:	4631      	mov	r1, r6
 80120a0:	f8ad 0014 	strh.w	r0, [sp, #20]
 80120a4:	4640      	mov	r0, r8
 80120a6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80120aa:	69ea      	ldr	r2, [r5, #28]
 80120ac:	f7ff ff7a 	bl	8011fa4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80120b0:	9b01      	ldr	r3, [sp, #4]
 80120b2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80120b6:	b29f      	uxth	r7, r3
 80120b8:	429a      	cmp	r2, r3
 80120ba:	da0d      	bge.n	80120d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80120bc:	f8ad 2010 	strh.w	r2, [sp, #16]
 80120c0:	1aba      	subs	r2, r7, r2
 80120c2:	f8ad a012 	strh.w	sl, [sp, #18]
 80120c6:	4631      	mov	r1, r6
 80120c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80120cc:	4640      	mov	r0, r8
 80120ce:	f8ad 9016 	strh.w	r9, [sp, #22]
 80120d2:	69ea      	ldr	r2, [r5, #28]
 80120d4:	f7ff ff66 	bl	8011fa4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80120d8:	8822      	ldrh	r2, [r4, #0]
 80120da:	445f      	add	r7, fp
 80120dc:	88a3      	ldrh	r3, [r4, #4]
 80120de:	b2bf      	uxth	r7, r7
 80120e0:	4413      	add	r3, r2
 80120e2:	b23a      	sxth	r2, r7
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	b219      	sxth	r1, r3
 80120e8:	4291      	cmp	r1, r2
 80120ea:	dd0d      	ble.n	8012108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80120ec:	1bdb      	subs	r3, r3, r7
 80120ee:	f8ad 2010 	strh.w	r2, [sp, #16]
 80120f2:	f8ad a012 	strh.w	sl, [sp, #18]
 80120f6:	4631      	mov	r1, r6
 80120f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80120fc:	4640      	mov	r0, r8
 80120fe:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012102:	69ea      	ldr	r2, [r5, #28]
 8012104:	f7ff ff4e 	bl	8011fa4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012108:	88e2      	ldrh	r2, [r4, #6]
 801210a:	8863      	ldrh	r3, [r4, #2]
 801210c:	4413      	add	r3, r2
 801210e:	9a00      	ldr	r2, [sp, #0]
 8012110:	444a      	add	r2, r9
 8012112:	b29b      	uxth	r3, r3
 8012114:	fa1f f982 	uxth.w	r9, r2
 8012118:	b219      	sxth	r1, r3
 801211a:	fa0f f289 	sxth.w	r2, r9
 801211e:	428a      	cmp	r2, r1
 8012120:	da15      	bge.n	801214e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012122:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012126:	eba3 0309 	sub.w	r3, r3, r9
 801212a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801212e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8012132:	4631      	mov	r1, r6
 8012134:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012138:	f8ad 2012 	strh.w	r2, [sp, #18]
 801213c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012140:	69ea      	ldr	r2, [r5, #28]
 8012142:	e001      	b.n	8012148 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8012144:	69ea      	ldr	r2, [r5, #28]
 8012146:	4621      	mov	r1, r4
 8012148:	4640      	mov	r0, r8
 801214a:	f7ff ff2b 	bl	8011fa4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801214e:	4628      	mov	r0, r5
 8012150:	f7ff fe94 	bl	8011e7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012154:	6861      	ldr	r1, [r4, #4]
 8012156:	4602      	mov	r2, r0
 8012158:	4633      	mov	r3, r6
 801215a:	6820      	ldr	r0, [r4, #0]
 801215c:	c303      	stmia	r3!, {r0, r1}
 801215e:	4611      	mov	r1, r2
 8012160:	4630      	mov	r0, r6
 8012162:	f7fb fce5 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 8012166:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801216a:	2b00      	cmp	r3, #0
 801216c:	f77f af33 	ble.w	8011fd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012170:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012174:	2b00      	cmp	r3, #0
 8012176:	f77f af2e 	ble.w	8011fd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801217a:	4628      	mov	r0, r5
 801217c:	f7ff fe9a 	bl	8011eb4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012180:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012184:	1a18      	subs	r0, r3, r0
 8012186:	f8ad 0010 	strh.w	r0, [sp, #16]
 801218a:	4628      	mov	r0, r5
 801218c:	f7ff fea6 	bl	8011edc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012190:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012194:	4631      	mov	r1, r6
 8012196:	1a18      	subs	r0, r3, r0
 8012198:	f8ad 0012 	strh.w	r0, [sp, #18]
 801219c:	4628      	mov	r0, r5
 801219e:	682b      	ldr	r3, [r5, #0]
 80121a0:	689b      	ldr	r3, [r3, #8]
 80121a2:	4798      	blx	r3
 80121a4:	e717      	b.n	8011fd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080121a6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80121a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121a8:	2300      	movs	r3, #0
 80121aa:	aa02      	add	r2, sp, #8
 80121ac:	4604      	mov	r4, r0
 80121ae:	3004      	adds	r0, #4
 80121b0:	f842 3d04 	str.w	r3, [r2, #-4]!
 80121b4:	460d      	mov	r5, r1
 80121b6:	f7fb fd93 	bl	800dce0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80121ba:	9a01      	ldr	r2, [sp, #4]
 80121bc:	b11a      	cbz	r2, 80121c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80121be:	4629      	mov	r1, r5
 80121c0:	4620      	mov	r0, r4
 80121c2:	f7ff feef 	bl	8011fa4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80121c6:	b003      	add	sp, #12
 80121c8:	bd30      	pop	{r4, r5, pc}

080121ca <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80121ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121cc:	4602      	mov	r2, r0
 80121ce:	4604      	mov	r4, r0
 80121d0:	460d      	mov	r5, r1
 80121d2:	466b      	mov	r3, sp
 80121d4:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80121d8:	6851      	ldr	r1, [r2, #4]
 80121da:	c303      	stmia	r3!, {r0, r1}
 80121dc:	4629      	mov	r1, r5
 80121de:	4668      	mov	r0, sp
 80121e0:	f7fb fca6 	bl	800db30 <_ZN8touchgfx4RectaNERKS0_>
 80121e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80121e8:	4669      	mov	r1, sp
 80121ea:	b123      	cbz	r3, 80121f6 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 80121ec:	4620      	mov	r0, r4
 80121ee:	f7ff ffda 	bl	80121a6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80121f2:	b003      	add	sp, #12
 80121f4:	bd30      	pop	{r4, r5, pc}
 80121f6:	1d20      	adds	r0, r4, #4
 80121f8:	f7fb fd39 	bl	800dc6e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80121fc:	e7f9      	b.n	80121f2 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

080121fe <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80121fe:	460b      	mov	r3, r1
 8012200:	680a      	ldr	r2, [r1, #0]
 8012202:	1d01      	adds	r1, r0, #4
 8012204:	6992      	ldr	r2, [r2, #24]
 8012206:	4618      	mov	r0, r3
 8012208:	4710      	bx	r2

0801220a <_ZN8touchgfx12TextProviderC1Ev>:
 801220a:	b538      	push	{r3, r4, r5, lr}
 801220c:	2500      	movs	r5, #0
 801220e:	4604      	mov	r4, r0
 8012210:	220e      	movs	r2, #14
 8012212:	7405      	strb	r5, [r0, #16]
 8012214:	4629      	mov	r1, r5
 8012216:	82c5      	strh	r5, [r0, #22]
 8012218:	8305      	strh	r5, [r0, #24]
 801221a:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801221c:	8605      	strh	r5, [r0, #48]	; 0x30
 801221e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8012220:	8705      	strh	r5, [r0, #56]	; 0x38
 8012222:	e9c0 5500 	strd	r5, r5, [r0]
 8012226:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801222a:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 801222e:	3044      	adds	r0, #68	; 0x44
 8012230:	f009 fc54 	bl	801badc <memset>
 8012234:	2301      	movs	r3, #1
 8012236:	4620      	mov	r0, r4
 8012238:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801223c:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8012240:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8012244:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8012248:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801224c:	f7f2 fc22 	bl	8004a94 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8012250:	4620      	mov	r0, r4
 8012252:	bd38      	pop	{r3, r4, r5, pc}

08012254 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8012254:	b530      	push	{r4, r5, lr}
 8012256:	2500      	movs	r5, #0
 8012258:	2401      	movs	r4, #1
 801225a:	6843      	ldr	r3, [r0, #4]
 801225c:	b913      	cbnz	r3, 8012264 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801225e:	6803      	ldr	r3, [r0, #0]
 8012260:	b1f3      	cbz	r3, 80122a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8012262:	6043      	str	r3, [r0, #4]
 8012264:	7c03      	ldrb	r3, [r0, #16]
 8012266:	b143      	cbz	r3, 801227a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8012268:	68c3      	ldr	r3, [r0, #12]
 801226a:	b12b      	cbz	r3, 8012278 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801226c:	881a      	ldrh	r2, [r3, #0]
 801226e:	b11a      	cbz	r2, 8012278 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8012270:	1c9a      	adds	r2, r3, #2
 8012272:	60c2      	str	r2, [r0, #12]
 8012274:	8818      	ldrh	r0, [r3, #0]
 8012276:	bd30      	pop	{r4, r5, pc}
 8012278:	7405      	strb	r5, [r0, #16]
 801227a:	6843      	ldr	r3, [r0, #4]
 801227c:	8819      	ldrh	r1, [r3, #0]
 801227e:	b179      	cbz	r1, 80122a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8012280:	1c9a      	adds	r2, r3, #2
 8012282:	2902      	cmp	r1, #2
 8012284:	6042      	str	r2, [r0, #4]
 8012286:	d1f5      	bne.n	8012274 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8012288:	6883      	ldr	r3, [r0, #8]
 801228a:	1d1a      	adds	r2, r3, #4
 801228c:	6082      	str	r2, [r0, #8]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	60c3      	str	r3, [r0, #12]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d0e1      	beq.n	801225a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8012296:	881b      	ldrh	r3, [r3, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d0de      	beq.n	801225a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801229c:	7404      	strb	r4, [r0, #16]
 801229e:	e7dc      	b.n	801225a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80122a0:	2000      	movs	r0, #0
 80122a2:	e7e8      	b.n	8012276 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080122a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80122a4:	b410      	push	{r4}
 80122a6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80122a8:	9b01      	ldr	r3, [sp, #4]
 80122aa:	6082      	str	r2, [r0, #8]
 80122ac:	6403      	str	r3, [r0, #64]	; 0x40
 80122ae:	2300      	movs	r3, #0
 80122b0:	6001      	str	r1, [r0, #0]
 80122b2:	6043      	str	r3, [r0, #4]
 80122b4:	60c3      	str	r3, [r0, #12]
 80122b6:	7403      	strb	r3, [r0, #16]
 80122b8:	8603      	strh	r3, [r0, #48]	; 0x30
 80122ba:	8303      	strh	r3, [r0, #24]
 80122bc:	8703      	strh	r3, [r0, #56]	; 0x38
 80122be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122c2:	f7f2 bbe7 	b.w	8004a94 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080122c6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80122c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122c8:	4605      	mov	r5, r0
 80122ca:	4608      	mov	r0, r1
 80122cc:	b1f1      	cbz	r1, 801230c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80122ce:	f105 0444 	add.w	r4, r5, #68	; 0x44
 80122d2:	460b      	mov	r3, r1
 80122d4:	f101 0708 	add.w	r7, r1, #8
 80122d8:	4622      	mov	r2, r4
 80122da:	6818      	ldr	r0, [r3, #0]
 80122dc:	3308      	adds	r3, #8
 80122de:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80122e2:	4626      	mov	r6, r4
 80122e4:	42bb      	cmp	r3, r7
 80122e6:	c603      	stmia	r6!, {r0, r1}
 80122e8:	4634      	mov	r4, r6
 80122ea:	d1f6      	bne.n	80122da <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80122ec:	6818      	ldr	r0, [r3, #0]
 80122ee:	6030      	str	r0, [r6, #0]
 80122f0:	4610      	mov	r0, r2
 80122f2:	889b      	ldrh	r3, [r3, #4]
 80122f4:	80b3      	strh	r3, [r6, #4]
 80122f6:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 80122fa:	015b      	lsls	r3, r3, #5
 80122fc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8012300:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8012304:	430b      	orrs	r3, r1
 8012306:	425b      	negs	r3, r3
 8012308:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 801230c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801230e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801230e:	b538      	push	{r3, r4, r5, lr}
 8012310:	460c      	mov	r4, r1
 8012312:	6811      	ldr	r1, [r2, #0]
 8012314:	4610      	mov	r0, r2
 8012316:	68cd      	ldr	r5, [r1, #12]
 8012318:	4619      	mov	r1, r3
 801231a:	47a8      	blx	r5
 801231c:	2800      	cmp	r0, #0
 801231e:	bf08      	it	eq
 8012320:	4620      	moveq	r0, r4
 8012322:	bd38      	pop	{r3, r4, r5, pc}

08012324 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8012324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012326:	4604      	mov	r4, r0
 8012328:	4615      	mov	r5, r2
 801232a:	4608      	mov	r0, r1
 801232c:	b93a      	cbnz	r2, 801233e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801232e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8012332:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 8012336:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 801233a:	4628      	mov	r0, r5
 801233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801233e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8012342:	8893      	ldrh	r3, [r2, #4]
 8012344:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8012348:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801234c:	79ee      	ldrb	r6, [r5, #7]
 801234e:	4316      	orrs	r6, r2
 8012350:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8012354:	189a      	adds	r2, r3, r2
 8012356:	b2b7      	uxth	r7, r6
 8012358:	b291      	uxth	r1, r2
 801235a:	291d      	cmp	r1, #29
 801235c:	f200 8084 	bhi.w	8012468 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8012360:	2201      	movs	r2, #1
 8012362:	10f6      	asrs	r6, r6, #3
 8012364:	408a      	lsls	r2, r1
 8012366:	4978      	ldr	r1, [pc, #480]	; (8012548 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8012368:	420a      	tst	r2, r1
 801236a:	d12e      	bne.n	80123ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801236c:	f412 7f60 	tst.w	r2, #896	; 0x380
 8012370:	d07a      	beq.n	8012468 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8012372:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8012376:	462b      	mov	r3, r5
 8012378:	f105 0e08 	add.w	lr, r5, #8
 801237c:	4615      	mov	r5, r2
 801237e:	6818      	ldr	r0, [r3, #0]
 8012380:	3308      	adds	r3, #8
 8012382:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8012386:	4694      	mov	ip, r2
 8012388:	4573      	cmp	r3, lr
 801238a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801238e:	4662      	mov	r2, ip
 8012390:	d1f5      	bne.n	801237e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8012392:	6818      	ldr	r0, [r3, #0]
 8012394:	f8cc 0000 	str.w	r0, [ip]
 8012398:	889b      	ldrh	r3, [r3, #4]
 801239a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801239e:	b2b3      	uxth	r3, r6
 80123a0:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 80123a4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80123a8:	1aca      	subs	r2, r1, r3
 80123aa:	1bcf      	subs	r7, r1, r7
 80123ac:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80123b0:	b292      	uxth	r2, r2
 80123b2:	1afb      	subs	r3, r7, r3
 80123b4:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 80123b8:	10d2      	asrs	r2, r2, #3
 80123ba:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80123be:	4302      	orrs	r2, r0
 80123c0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 80123c4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80123c8:	e7b7      	b.n	801233a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80123ca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80123cc:	b92b      	cbnz	r3, 80123da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80123ce:	4b5f      	ldr	r3, [pc, #380]	; (801254c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80123d0:	21bf      	movs	r1, #191	; 0xbf
 80123d2:	4a5f      	ldr	r2, [pc, #380]	; (8012550 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80123d4:	485f      	ldr	r0, [pc, #380]	; (8012554 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80123d6:	f009 faf5 	bl	801b9c4 <__assert_func>
 80123da:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80123dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80123e0:	8b59      	ldrh	r1, [r3, #26]
 80123e2:	f640 6333 	movw	r3, #3635	; 0xe33
 80123e6:	4299      	cmp	r1, r3
 80123e8:	d110      	bne.n	801240c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 80123ea:	6803      	ldr	r3, [r0, #0]
 80123ec:	68db      	ldr	r3, [r3, #12]
 80123ee:	4798      	blx	r3
 80123f0:	7b41      	ldrb	r1, [r0, #13]
 80123f2:	00cb      	lsls	r3, r1, #3
 80123f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80123f8:	7a03      	ldrb	r3, [r0, #8]
 80123fa:	0648      	lsls	r0, r1, #25
 80123fc:	ea43 0302 	orr.w	r3, r3, r2
 8012400:	bf44      	itt	mi
 8012402:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012406:	b21b      	sxthmi	r3, r3
 8012408:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801240c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8012410:	462a      	mov	r2, r5
 8012412:	f105 0c08 	add.w	ip, r5, #8
 8012416:	443b      	add	r3, r7
 8012418:	4433      	add	r3, r6
 801241a:	f104 0644 	add.w	r6, r4, #68	; 0x44
 801241e:	b29b      	uxth	r3, r3
 8012420:	4635      	mov	r5, r6
 8012422:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8012426:	6810      	ldr	r0, [r2, #0]
 8012428:	3208      	adds	r2, #8
 801242a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801242e:	4637      	mov	r7, r6
 8012430:	4562      	cmp	r2, ip
 8012432:	c703      	stmia	r7!, {r0, r1}
 8012434:	463e      	mov	r6, r7
 8012436:	d1f6      	bne.n	8012426 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8012438:	6810      	ldr	r0, [r2, #0]
 801243a:	6038      	str	r0, [r7, #0]
 801243c:	8892      	ldrh	r2, [r2, #4]
 801243e:	80ba      	strh	r2, [r7, #4]
 8012440:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8012444:	10db      	asrs	r3, r3, #3
 8012446:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801244a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801244e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012452:	4313      	orrs	r3, r2
 8012454:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8012458:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801245c:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8012460:	1a9b      	subs	r3, r3, r2
 8012462:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8012466:	e768      	b.n	801233a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8012468:	f023 0204 	bic.w	r2, r3, #4
 801246c:	f640 611b 	movw	r1, #3611	; 0xe1b
 8012470:	428a      	cmp	r2, r1
 8012472:	d003      	beq.n	801247c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8012474:	f640 621d 	movw	r2, #3613	; 0xe1d
 8012478:	4293      	cmp	r3, r2
 801247a:	d120      	bne.n	80124be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801247c:	3b01      	subs	r3, #1
 801247e:	4602      	mov	r2, r0
 8012480:	4629      	mov	r1, r5
 8012482:	4620      	mov	r0, r4
 8012484:	b29b      	uxth	r3, r3
 8012486:	f7ff ff42 	bl	801230e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801248a:	7b41      	ldrb	r1, [r0, #13]
 801248c:	00cb      	lsls	r3, r1, #3
 801248e:	0649      	lsls	r1, r1, #25
 8012490:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012494:	7a03      	ldrb	r3, [r0, #8]
 8012496:	ea43 0302 	orr.w	r3, r3, r2
 801249a:	bf44      	itt	mi
 801249c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80124a0:	b21b      	sxthmi	r3, r3
 80124a2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80124a6:	7b6b      	ldrb	r3, [r5, #13]
 80124a8:	7aaa      	ldrb	r2, [r5, #10]
 80124aa:	005b      	lsls	r3, r3, #1
 80124ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124b0:	4313      	orrs	r3, r2
 80124b2:	115a      	asrs	r2, r3, #5
 80124b4:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80124b8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80124bc:	e035      	b.n	801252a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80124be:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80124c2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80124c6:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80124ca:	7a2a      	ldrb	r2, [r5, #8]
 80124cc:	ea42 0201 	orr.w	r2, r2, r1
 80124d0:	f640 6109 	movw	r1, #3593	; 0xe09
 80124d4:	bf1c      	itt	ne
 80124d6:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80124da:	b212      	sxthne	r2, r2
 80124dc:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80124e0:	f023 0210 	bic.w	r2, r3, #16
 80124e4:	428a      	cmp	r2, r1
 80124e6:	d003      	beq.n	80124f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 80124e8:	f640 6213 	movw	r2, #3603	; 0xe13
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d129      	bne.n	8012544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 80124f0:	7b6e      	ldrb	r6, [r5, #13]
 80124f2:	4629      	mov	r1, r5
 80124f4:	0076      	lsls	r6, r6, #1
 80124f6:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80124fa:	7aae      	ldrb	r6, [r5, #10]
 80124fc:	4316      	orrs	r6, r2
 80124fe:	f640 6213 	movw	r2, #3603	; 0xe13
 8012502:	4293      	cmp	r3, r2
 8012504:	4602      	mov	r2, r0
 8012506:	4620      	mov	r0, r4
 8012508:	bf16      	itet	ne
 801250a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801250e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8012512:	b29b      	uxthne	r3, r3
 8012514:	f7ff fefb 	bl	801230e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8012518:	7b43      	ldrb	r3, [r0, #13]
 801251a:	7a82      	ldrb	r2, [r0, #10]
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012522:	4313      	orrs	r3, r2
 8012524:	1af6      	subs	r6, r6, r3
 8012526:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 801252a:	7b69      	ldrb	r1, [r5, #13]
 801252c:	00cb      	lsls	r3, r1, #3
 801252e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012532:	7a2b      	ldrb	r3, [r5, #8]
 8012534:	4313      	orrs	r3, r2
 8012536:	064a      	lsls	r2, r1, #25
 8012538:	bf44      	itt	mi
 801253a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801253e:	b21b      	sxthmi	r3, r3
 8012540:	1bdb      	subs	r3, r3, r7
 8012542:	e73f      	b.n	80123c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8012544:	2300      	movs	r3, #0
 8012546:	e7b7      	b.n	80124b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8012548:	3fc00079 	.word	0x3fc00079
 801254c:	0801ef6c 	.word	0x0801ef6c
 8012550:	0801f1de 	.word	0x0801f1de
 8012554:	0801ef75 	.word	0x0801ef75

08012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8012558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801255c:	4604      	mov	r4, r0
 801255e:	b942      	cbnz	r2, 8012572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8012560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012564:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8012568:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 801256c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8012570:	e046      	b.n	8012600 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8012572:	7b51      	ldrb	r1, [r2, #13]
 8012574:	8893      	ldrh	r3, [r2, #4]
 8012576:	010f      	lsls	r7, r1, #4
 8012578:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801257c:	79d7      	ldrb	r7, [r2, #7]
 801257e:	4307      	orrs	r7, r0
 8012580:	2f04      	cmp	r7, #4
 8012582:	b2bd      	uxth	r5, r7
 8012584:	bfcc      	ite	gt
 8012586:	08bf      	lsrgt	r7, r7, #2
 8012588:	2701      	movle	r7, #1
 801258a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801258e:	f200 80ab 	bhi.w	80126e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8012592:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8012596:	4283      	cmp	r3, r0
 8012598:	d216      	bcs.n	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801259a:	f240 605b 	movw	r0, #1627	; 0x65b
 801259e:	4283      	cmp	r3, r0
 80125a0:	d859      	bhi.n	8012656 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80125a2:	f240 6057 	movw	r0, #1623	; 0x657
 80125a6:	4283      	cmp	r3, r0
 80125a8:	d20e      	bcs.n	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80125aa:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80125ae:	d24a      	bcs.n	8012646 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80125b0:	f240 604e 	movw	r0, #1614	; 0x64e
 80125b4:	4283      	cmp	r3, r0
 80125b6:	d207      	bcs.n	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80125b8:	f240 601a 	movw	r0, #1562	; 0x61a
 80125bc:	4283      	cmp	r3, r0
 80125be:	d02a      	beq.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80125c0:	d821      	bhi.n	8012606 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80125c2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80125c6:	d35b      	bcc.n	8012680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80125c8:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 80125cc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80125d0:	f040 80d0 	bne.w	8012774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80125d4:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 80125d8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80125dc:	f040 80ca 	bne.w	8012774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80125e0:	00cb      	lsls	r3, r1, #3
 80125e2:	0649      	lsls	r1, r1, #25
 80125e4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80125e8:	7a13      	ldrb	r3, [r2, #8]
 80125ea:	ea43 0300 	orr.w	r3, r3, r0
 80125ee:	bf44      	itt	mi
 80125f0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80125f4:	b21b      	sxthmi	r3, r3
 80125f6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80125fa:	1b5d      	subs	r5, r3, r5
 80125fc:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8012600:	4610      	mov	r0, r2
 8012602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012606:	f240 604b 	movw	r0, #1611	; 0x64b
 801260a:	4283      	cmp	r3, r0
 801260c:	d338      	bcc.n	8012680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801260e:	f240 604c 	movw	r0, #1612	; 0x64c
 8012612:	4283      	cmp	r3, r0
 8012614:	d9d8      	bls.n	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012616:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801261a:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801261e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012622:	f040 80f2 	bne.w	801280a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8012626:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801262a:	f040 80ee 	bne.w	801280a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801262e:	00cb      	lsls	r3, r1, #3
 8012630:	064e      	lsls	r6, r1, #25
 8012632:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012636:	7a13      	ldrb	r3, [r2, #8]
 8012638:	ea43 0300 	orr.w	r3, r3, r0
 801263c:	bf44      	itt	mi
 801263e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012642:	b21b      	sxthmi	r3, r3
 8012644:	e7d9      	b.n	80125fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8012646:	f240 6054 	movw	r0, #1620	; 0x654
 801264a:	4283      	cmp	r3, r0
 801264c:	d8e3      	bhi.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801264e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8012652:	d9e0      	bls.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012654:	e7b8      	b.n	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012656:	f240 6074 	movw	r0, #1652	; 0x674
 801265a:	4283      	cmp	r3, r0
 801265c:	d0b4      	beq.n	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801265e:	d82d      	bhi.n	80126bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8012660:	f240 605e 	movw	r0, #1630	; 0x65e
 8012664:	4283      	cmp	r3, r0
 8012666:	d804      	bhi.n	8012672 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8012668:	f240 605d 	movw	r0, #1629	; 0x65d
 801266c:	4283      	cmp	r3, r0
 801266e:	d3d2      	bcc.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012670:	e7aa      	b.n	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012672:	f240 605f 	movw	r0, #1631	; 0x65f
 8012676:	4283      	cmp	r3, r0
 8012678:	d0cd      	beq.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801267a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801267e:	d0a3      	beq.n	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012680:	00cb      	lsls	r3, r1, #3
 8012682:	0649      	lsls	r1, r1, #25
 8012684:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012688:	7a13      	ldrb	r3, [r2, #8]
 801268a:	ea43 0300 	orr.w	r3, r3, r0
 801268e:	bf44      	itt	mi
 8012690:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012694:	b21b      	sxthmi	r3, r3
 8012696:	1b5d      	subs	r5, r3, r5
 8012698:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801269c:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80126a0:	7b53      	ldrb	r3, [r2, #13]
 80126a2:	015b      	lsls	r3, r3, #5
 80126a4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80126a8:	7993      	ldrb	r3, [r2, #6]
 80126aa:	430b      	orrs	r3, r1
 80126ac:	2105      	movs	r1, #5
 80126ae:	005b      	lsls	r3, r3, #1
 80126b0:	fb93 f3f1 	sdiv	r3, r3, r1
 80126b4:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80126b8:	440b      	add	r3, r1
 80126ba:	e757      	b.n	801256c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80126bc:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80126c0:	4283      	cmp	r3, r0
 80126c2:	d809      	bhi.n	80126d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80126c4:	f240 60df 	movw	r0, #1759	; 0x6df
 80126c8:	4283      	cmp	r3, r0
 80126ca:	f4bf af7d 	bcs.w	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80126ce:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80126d2:	2b05      	cmp	r3, #5
 80126d4:	d8d4      	bhi.n	8012680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80126d6:	e777      	b.n	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80126d8:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80126dc:	4283      	cmp	r3, r0
 80126de:	d09a      	beq.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80126e0:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80126e4:	4283      	cmp	r3, r0
 80126e6:	e7ca      	b.n	801267e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 80126e8:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80126ec:	d22b      	bcs.n	8012746 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 80126ee:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80126f2:	4283      	cmp	r3, r0
 80126f4:	d28f      	bcs.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80126f6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80126fa:	4283      	cmp	r3, r0
 80126fc:	d816      	bhi.n	801272c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 80126fe:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8012702:	4283      	cmp	r3, r0
 8012704:	f4bf af60 	bcs.w	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012708:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801270c:	4283      	cmp	r3, r0
 801270e:	d80a      	bhi.n	8012726 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8012710:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8012714:	4283      	cmp	r3, r0
 8012716:	f4bf af57 	bcs.w	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801271a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801271e:	4283      	cmp	r3, r0
 8012720:	f43f af79 	beq.w	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012724:	e7ac      	b.n	8012680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012726:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801272a:	e7f8      	b.n	801271e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801272c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8012730:	4283      	cmp	r3, r0
 8012732:	d802      	bhi.n	801273a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8012734:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012738:	e798      	b.n	801266c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801273a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801273e:	4283      	cmp	r3, r0
 8012740:	f47f af42 	bne.w	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012744:	e767      	b.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012746:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801274a:	4283      	cmp	r3, r0
 801274c:	f43f af63 	beq.w	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012750:	d802      	bhi.n	8012758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8012752:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8012756:	e7f2      	b.n	801273e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8012758:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801275c:	4283      	cmp	r3, r0
 801275e:	d805      	bhi.n	801276c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8012760:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8012764:	4283      	cmp	r3, r0
 8012766:	f4ff af2f 	bcc.w	80125c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801276a:	e754      	b.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801276c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8012770:	4283      	cmp	r3, r0
 8012772:	e7af      	b.n	80126d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8012774:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 8012778:	4617      	mov	r7, r2
 801277a:	f102 0808 	add.w	r8, r2, #8
 801277e:	4666      	mov	r6, ip
 8012780:	6838      	ldr	r0, [r7, #0]
 8012782:	3708      	adds	r7, #8
 8012784:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8012788:	46e6      	mov	lr, ip
 801278a:	4547      	cmp	r7, r8
 801278c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8012790:	46f4      	mov	ip, lr
 8012792:	d1f5      	bne.n	8012780 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8012794:	6838      	ldr	r0, [r7, #0]
 8012796:	f8ce 0000 	str.w	r0, [lr]
 801279a:	88b9      	ldrh	r1, [r7, #4]
 801279c:	f8ae 1004 	strh.w	r1, [lr, #4]
 80127a0:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 80127a4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80127a8:	d009      	beq.n	80127be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80127aa:	7b51      	ldrb	r1, [r2, #13]
 80127ac:	7992      	ldrb	r2, [r2, #6]
 80127ae:	0149      	lsls	r1, r1, #5
 80127b0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80127b4:	4311      	orrs	r1, r2
 80127b6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80127ba:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 80127be:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80127c2:	d00d      	beq.n	80127e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 80127c4:	442b      	add	r3, r5
 80127c6:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80127d0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80127d4:	10db      	asrs	r3, r3, #3
 80127d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80127da:	4313      	orrs	r3, r2
 80127dc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 80127e0:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 80127e4:	00cb      	lsls	r3, r1, #3
 80127e6:	064f      	lsls	r7, r1, #25
 80127e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80127ec:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80127f0:	ea43 0302 	orr.w	r3, r3, r2
 80127f4:	bf44      	itt	mi
 80127f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80127fa:	b21b      	sxthmi	r3, r3
 80127fc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8012800:	1b5d      	subs	r5, r3, r5
 8012802:	4632      	mov	r2, r6
 8012804:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8012808:	e6fa      	b.n	8012600 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801280a:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 801280e:	4694      	mov	ip, r2
 8012810:	f102 0908 	add.w	r9, r2, #8
 8012814:	4676      	mov	r6, lr
 8012816:	f8dc 0000 	ldr.w	r0, [ip]
 801281a:	f10c 0c08 	add.w	ip, ip, #8
 801281e:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8012822:	46f0      	mov	r8, lr
 8012824:	45cc      	cmp	ip, r9
 8012826:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801282a:	46c6      	mov	lr, r8
 801282c:	d1f3      	bne.n	8012816 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801282e:	f8dc 0000 	ldr.w	r0, [ip]
 8012832:	f8c8 0000 	str.w	r0, [r8]
 8012836:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801283a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801283e:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 8012842:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012846:	d009      	beq.n	801285c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8012848:	7b51      	ldrb	r1, [r2, #13]
 801284a:	7992      	ldrb	r2, [r2, #6]
 801284c:	0149      	lsls	r1, r1, #5
 801284e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012852:	4311      	orrs	r1, r2
 8012854:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012858:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801285c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012860:	d00d      	beq.n	801287e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8012862:	1bdb      	subs	r3, r3, r7
 8012864:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8012868:	b29b      	uxth	r3, r3
 801286a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801286e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8012872:	10db      	asrs	r3, r3, #3
 8012874:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012878:	4313      	orrs	r3, r2
 801287a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801287e:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8012882:	00cb      	lsls	r3, r1, #3
 8012884:	0648      	lsls	r0, r1, #25
 8012886:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801288a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801288e:	ea43 0302 	orr.w	r3, r3, r2
 8012892:	bf44      	itt	mi
 8012894:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012898:	b21b      	sxthmi	r3, r3
 801289a:	e7b1      	b.n	8012800 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801289c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128a0:	461e      	mov	r6, r3
 80128a2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80128a4:	4604      	mov	r4, r0
 80128a6:	4617      	mov	r7, r2
 80128a8:	b92b      	cbnz	r3, 80128b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80128aa:	4b25      	ldr	r3, [pc, #148]	; (8012940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80128ac:	21bf      	movs	r1, #191	; 0xbf
 80128ae:	4a25      	ldr	r2, [pc, #148]	; (8012944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80128b0:	4825      	ldr	r0, [pc, #148]	; (8012948 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80128b2:	f009 f887 	bl	801b9c4 <__assert_func>
 80128b6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80128b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80128bc:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 80128c0:	f7f2 f842 	bl	8004948 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80128c4:	4605      	mov	r5, r0
 80128c6:	b918      	cbnz	r0, 80128d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80128c8:	6030      	str	r0, [r6, #0]
 80128ca:	4628      	mov	r0, r5
 80128cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	4601      	mov	r1, r0
 80128d4:	4638      	mov	r0, r7
 80128d6:	68db      	ldr	r3, [r3, #12]
 80128d8:	4798      	blx	r3
 80128da:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80128de:	4602      	mov	r2, r0
 80128e0:	6030      	str	r0, [r6, #0]
 80128e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80128e6:	d213      	bcs.n	8012910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 80128e8:	4643      	mov	r3, r8
 80128ea:	4639      	mov	r1, r7
 80128ec:	4620      	mov	r0, r4
 80128ee:	f7ff fe33 	bl	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80128f2:	6030      	str	r0, [r6, #0]
 80128f4:	6833      	ldr	r3, [r6, #0]
 80128f6:	b143      	cbz	r3, 801290a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 80128f8:	7b5a      	ldrb	r2, [r3, #13]
 80128fa:	7a9b      	ldrb	r3, [r3, #10]
 80128fc:	0052      	lsls	r2, r2, #1
 80128fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012902:	4313      	orrs	r3, r2
 8012904:	bf0c      	ite	eq
 8012906:	2301      	moveq	r3, #1
 8012908:	2300      	movne	r3, #0
 801290a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801290e:	e7dc      	b.n	80128ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8012910:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8012914:	b29b      	uxth	r3, r3
 8012916:	2b7f      	cmp	r3, #127	; 0x7f
 8012918:	d804      	bhi.n	8012924 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801291a:	4639      	mov	r1, r7
 801291c:	4620      	mov	r0, r4
 801291e:	f7ff fd01 	bl	8012324 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8012922:	e7e6      	b.n	80128f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8012924:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8012928:	2b00      	cmp	r3, #0
 801292a:	d0e3      	beq.n	80128f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801292c:	f640 1302 	movw	r3, #2306	; 0x902
 8012930:	429d      	cmp	r5, r3
 8012932:	d1df      	bne.n	80128f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8012934:	4601      	mov	r1, r0
 8012936:	4620      	mov	r0, r4
 8012938:	f7ff fcc5 	bl	80122c6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801293c:	e7d9      	b.n	80128f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801293e:	bf00      	nop
 8012940:	0801ef6c 	.word	0x0801ef6c
 8012944:	0801f1de 	.word	0x0801f1de
 8012948:	0801ef75 	.word	0x0801ef75

0801294c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801294c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012950:	461e      	mov	r6, r3
 8012952:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8012954:	4604      	mov	r4, r0
 8012956:	4617      	mov	r7, r2
 8012958:	b92b      	cbnz	r3, 8012966 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801295a:	4b26      	ldr	r3, [pc, #152]	; (80129f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801295c:	21bf      	movs	r1, #191	; 0xbf
 801295e:	4a26      	ldr	r2, [pc, #152]	; (80129f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8012960:	4826      	ldr	r0, [pc, #152]	; (80129fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8012962:	f009 f82f 	bl	801b9c4 <__assert_func>
 8012966:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8012968:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801296c:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8012970:	f7f1 ffea 	bl	8004948 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012974:	4605      	mov	r5, r0
 8012976:	b918      	cbnz	r0, 8012980 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8012978:	6030      	str	r0, [r6, #0]
 801297a:	4628      	mov	r0, r5
 801297c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	4601      	mov	r1, r0
 8012984:	4638      	mov	r0, r7
 8012986:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801298a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801298e:	47c8      	blx	r9
 8012990:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8012994:	4602      	mov	r2, r0
 8012996:	6030      	str	r0, [r6, #0]
 8012998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801299c:	d213      	bcs.n	80129c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801299e:	4643      	mov	r3, r8
 80129a0:	4639      	mov	r1, r7
 80129a2:	4620      	mov	r0, r4
 80129a4:	f7ff fdd8 	bl	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80129a8:	6030      	str	r0, [r6, #0]
 80129aa:	6833      	ldr	r3, [r6, #0]
 80129ac:	b143      	cbz	r3, 80129c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 80129ae:	7b5a      	ldrb	r2, [r3, #13]
 80129b0:	7a9b      	ldrb	r3, [r3, #10]
 80129b2:	0052      	lsls	r2, r2, #1
 80129b4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80129b8:	4313      	orrs	r3, r2
 80129ba:	bf0c      	ite	eq
 80129bc:	2301      	moveq	r3, #1
 80129be:	2300      	movne	r3, #0
 80129c0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80129c4:	e7d9      	b.n	801297a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 80129c6:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	2b7f      	cmp	r3, #127	; 0x7f
 80129ce:	d804      	bhi.n	80129da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 80129d0:	4639      	mov	r1, r7
 80129d2:	4620      	mov	r0, r4
 80129d4:	f7ff fca6 	bl	8012324 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80129d8:	e7e6      	b.n	80129a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80129da:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d0e3      	beq.n	80129aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80129e2:	f640 1302 	movw	r3, #2306	; 0x902
 80129e6:	429d      	cmp	r5, r3
 80129e8:	d1df      	bne.n	80129aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80129ea:	4601      	mov	r1, r0
 80129ec:	4620      	mov	r0, r4
 80129ee:	f7ff fc6a 	bl	80122c6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80129f2:	e7d9      	b.n	80129a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80129f4:	0801ef6c 	.word	0x0801ef6c
 80129f8:	0801f1de 	.word	0x0801f1de
 80129fc:	0801ef75 	.word	0x0801ef75

08012a00 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8012a00:	b510      	push	{r4, lr}
 8012a02:	4604      	mov	r4, r0
 8012a04:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8012a06:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012a08:	b9d9      	cbnz	r1, 8012a42 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8012a0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012a0c:	2b0a      	cmp	r3, #10
 8012a0e:	d036      	beq.n	8012a7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8012a10:	4620      	mov	r0, r4
 8012a12:	f7ff fc1f 	bl	8012254 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8012a16:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012a18:	2b09      	cmp	r3, #9
 8012a1a:	d906      	bls.n	8012a2a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8012a1c:	4b18      	ldr	r3, [pc, #96]	; (8012a80 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8012a1e:	f240 1103 	movw	r1, #259	; 0x103
 8012a22:	4a18      	ldr	r2, [pc, #96]	; (8012a84 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8012a24:	4818      	ldr	r0, [pc, #96]	; (8012a88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8012a26:	f008 ffcd 	bl	801b9c4 <__assert_func>
 8012a2a:	1c5a      	adds	r2, r3, #1
 8012a2c:	8622      	strh	r2, [r4, #48]	; 0x30
 8012a2e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8012a30:	4413      	add	r3, r2
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	2b09      	cmp	r3, #9
 8012a36:	bf88      	it	hi
 8012a38:	3b0a      	subhi	r3, #10
 8012a3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012a3e:	8358      	strh	r0, [r3, #26]
 8012a40:	e7e3      	b.n	8012a0a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8012a42:	2b0a      	cmp	r3, #10
 8012a44:	d01b      	beq.n	8012a7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8012a46:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012a48:	3901      	subs	r1, #1
 8012a4a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8012a4e:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8012a50:	8721      	strh	r1, [r4, #56]	; 0x38
 8012a52:	1c51      	adds	r1, r2, #1
 8012a54:	b289      	uxth	r1, r1
 8012a56:	2901      	cmp	r1, #1
 8012a58:	bf8a      	itet	hi
 8012a5a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012a5e:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8012a60:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8012a62:	2b09      	cmp	r3, #9
 8012a64:	d8da      	bhi.n	8012a1c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8012a66:	1c5a      	adds	r2, r3, #1
 8012a68:	8622      	strh	r2, [r4, #48]	; 0x30
 8012a6a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8012a6c:	4413      	add	r3, r2
 8012a6e:	b29b      	uxth	r3, r3
 8012a70:	2b09      	cmp	r3, #9
 8012a72:	bf88      	it	hi
 8012a74:	3b0a      	subhi	r3, #10
 8012a76:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012a7a:	8358      	strh	r0, [r3, #26]
 8012a7c:	e7c2      	b.n	8012a04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8012a7e:	bd10      	pop	{r4, pc}
 8012a80:	0801efa1 	.word	0x0801efa1
 8012a84:	0801f334 	.word	0x0801f334
 8012a88:	0801ef75 	.word	0x0801ef75

08012a8c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8012a90:	4604      	mov	r4, r0
 8012a92:	b92a      	cbnz	r2, 8012aa0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8012a94:	4b13      	ldr	r3, [pc, #76]	; (8012ae4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8012a96:	21d4      	movs	r1, #212	; 0xd4
 8012a98:	4a13      	ldr	r2, [pc, #76]	; (8012ae8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8012a9a:	4814      	ldr	r0, [pc, #80]	; (8012aec <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8012a9c:	f008 ff92 	bl	801b9c4 <__assert_func>
 8012aa0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8012aa2:	3a01      	subs	r2, #1
 8012aa4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8012aa8:	8b4d      	ldrh	r5, [r1, #26]
 8012aaa:	8602      	strh	r2, [r0, #48]	; 0x30
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	b292      	uxth	r2, r2
 8012ab0:	2a09      	cmp	r2, #9
 8012ab2:	bf8a      	itet	hi
 8012ab4:	3b09      	subhi	r3, #9
 8012ab6:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8012ab8:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8012aba:	f7ff ffa1 	bl	8012a00 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8012abe:	8b23      	ldrh	r3, [r4, #24]
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	bf9c      	itt	ls
 8012ac4:	3301      	addls	r3, #1
 8012ac6:	8323      	strhls	r3, [r4, #24]
 8012ac8:	8ae3      	ldrh	r3, [r4, #22]
 8012aca:	b90b      	cbnz	r3, 8012ad0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8012acc:	2302      	movs	r3, #2
 8012ace:	82e3      	strh	r3, [r4, #22]
 8012ad0:	8ae3      	ldrh	r3, [r4, #22]
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	82e3      	strh	r3, [r4, #22]
 8012ada:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012ade:	8265      	strh	r5, [r4, #18]
 8012ae0:	bd38      	pop	{r3, r4, r5, pc}
 8012ae2:	bf00      	nop
 8012ae4:	0801ef6c 	.word	0x0801ef6c
 8012ae8:	0801f289 	.word	0x0801f289
 8012aec:	0801ef75 	.word	0x0801ef75

08012af0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8012af0:	428a      	cmp	r2, r1
 8012af2:	b538      	push	{r3, r4, r5, lr}
 8012af4:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8012af6:	d90c      	bls.n	8012b12 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8012af8:	b92c      	cbnz	r4, 8012b06 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8012afa:	4b1c      	ldr	r3, [pc, #112]	; (8012b6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8012afc:	21e0      	movs	r1, #224	; 0xe0
 8012afe:	4a1c      	ldr	r2, [pc, #112]	; (8012b70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8012b00:	481c      	ldr	r0, [pc, #112]	; (8012b74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8012b02:	f008 ff5f 	bl	801b9c4 <__assert_func>
 8012b06:	3c01      	subs	r4, #1
 8012b08:	4b1b      	ldr	r3, [pc, #108]	; (8012b78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8012b0a:	4a1c      	ldr	r2, [pc, #112]	; (8012b7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8012b0c:	21c4      	movs	r1, #196	; 0xc4
 8012b0e:	8604      	strh	r4, [r0, #48]	; 0x30
 8012b10:	e7f6      	b.n	8012b00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8012b12:	428c      	cmp	r4, r1
 8012b14:	d203      	bcs.n	8012b1e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8012b16:	4b1a      	ldr	r3, [pc, #104]	; (8012b80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8012b18:	21ca      	movs	r1, #202	; 0xca
 8012b1a:	4a1a      	ldr	r2, [pc, #104]	; (8012b84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8012b1c:	e7f0      	b.n	8012b00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8012b1e:	1a64      	subs	r4, r4, r1
 8012b20:	250a      	movs	r5, #10
 8012b22:	8604      	strh	r4, [r0, #48]	; 0x30
 8012b24:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8012b26:	4421      	add	r1, r4
 8012b28:	b289      	uxth	r1, r1
 8012b2a:	2909      	cmp	r1, #9
 8012b2c:	bf88      	it	hi
 8012b2e:	390a      	subhi	r1, #10
 8012b30:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8012b32:	b1ba      	cbz	r2, 8012b64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8012b34:	3a01      	subs	r2, #1
 8012b36:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8012b38:	b292      	uxth	r2, r2
 8012b3a:	2909      	cmp	r1, #9
 8012b3c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8012b40:	d903      	bls.n	8012b4a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8012b42:	4b11      	ldr	r3, [pc, #68]	; (8012b88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8012b44:	21e5      	movs	r1, #229	; 0xe5
 8012b46:	4a11      	ldr	r2, [pc, #68]	; (8012b8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8012b48:	e7da      	b.n	8012b00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8012b4a:	3101      	adds	r1, #1
 8012b4c:	8601      	strh	r1, [r0, #48]	; 0x30
 8012b4e:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8012b50:	b901      	cbnz	r1, 8012b54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8012b52:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8012b54:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8012b56:	3901      	subs	r1, #1
 8012b58:	b289      	uxth	r1, r1
 8012b5a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8012b5c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012b60:	834c      	strh	r4, [r1, #26]
 8012b62:	e7e6      	b.n	8012b32 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8012b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b68:	f7ff bf4a 	b.w	8012a00 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8012b6c:	0801ef6c 	.word	0x0801ef6c
 8012b70:	0801f062 	.word	0x0801f062
 8012b74:	0801ef75 	.word	0x0801ef75
 8012b78:	0801efad 	.word	0x0801efad
 8012b7c:	0801f10c 	.word	0x0801f10c
 8012b80:	0801efbb 	.word	0x0801efbb
 8012b84:	0801f3e3 	.word	0x0801f3e3
 8012b88:	0801efc7 	.word	0x0801efc7
 8012b8c:	0801efda 	.word	0x0801efda

08012b90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8012b90:	3a01      	subs	r2, #1
 8012b92:	b570      	push	{r4, r5, r6, lr}
 8012b94:	b292      	uxth	r2, r2
 8012b96:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8012b9a:	42b2      	cmp	r2, r6
 8012b9c:	d019      	beq.n	8012bd2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8012b9e:	8b04      	ldrh	r4, [r0, #24]
 8012ba0:	f831 5b02 	ldrh.w	r5, [r1], #2
 8012ba4:	4294      	cmp	r4, r2
 8012ba6:	d805      	bhi.n	8012bb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8012ba8:	4b19      	ldr	r3, [pc, #100]	; (8012c10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8012baa:	4a1a      	ldr	r2, [pc, #104]	; (8012c14 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8012bac:	21c4      	movs	r1, #196	; 0xc4
 8012bae:	481a      	ldr	r0, [pc, #104]	; (8012c18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8012bb0:	f008 ff08 	bl	801b9c4 <__assert_func>
 8012bb4:	8ac4      	ldrh	r4, [r0, #22]
 8012bb6:	4414      	add	r4, r2
 8012bb8:	3a01      	subs	r2, #1
 8012bba:	b2a4      	uxth	r4, r4
 8012bbc:	b292      	uxth	r2, r2
 8012bbe:	2c01      	cmp	r4, #1
 8012bc0:	bf88      	it	hi
 8012bc2:	3c02      	subhi	r4, #2
 8012bc4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012bc8:	8a64      	ldrh	r4, [r4, #18]
 8012bca:	42ac      	cmp	r4, r5
 8012bcc:	d0e5      	beq.n	8012b9a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8012bce:	2000      	movs	r0, #0
 8012bd0:	bd70      	pop	{r4, r5, r6, pc}
 8012bd2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012bd6:	2400      	movs	r4, #0
 8012bd8:	4413      	add	r3, r2
 8012bda:	b2a2      	uxth	r2, r4
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	da14      	bge.n	8012c0a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8012be0:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8012be2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8012be6:	4296      	cmp	r6, r2
 8012be8:	d802      	bhi.n	8012bf0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8012bea:	4b09      	ldr	r3, [pc, #36]	; (8012c10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8012bec:	4a0b      	ldr	r2, [pc, #44]	; (8012c1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8012bee:	e7dd      	b.n	8012bac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8012bf0:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8012bf2:	3401      	adds	r4, #1
 8012bf4:	4432      	add	r2, r6
 8012bf6:	b292      	uxth	r2, r2
 8012bf8:	2a09      	cmp	r2, #9
 8012bfa:	bf88      	it	hi
 8012bfc:	3a0a      	subhi	r2, #10
 8012bfe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8012c02:	8b52      	ldrh	r2, [r2, #26]
 8012c04:	42aa      	cmp	r2, r5
 8012c06:	d0e8      	beq.n	8012bda <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8012c08:	e7e1      	b.n	8012bce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8012c0a:	2001      	movs	r0, #1
 8012c0c:	e7e0      	b.n	8012bd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8012c0e:	bf00      	nop
 8012c10:	0801efad 	.word	0x0801efad
 8012c14:	0801f467 	.word	0x0801f467
 8012c18:	0801ef75 	.word	0x0801ef75
 8012c1c:	0801f10c 	.word	0x0801f10c

08012c20 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8012c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c24:	4605      	mov	r5, r0
 8012c26:	4616      	mov	r6, r2
 8012c28:	1c8c      	adds	r4, r1, #2
 8012c2a:	8809      	ldrh	r1, [r1, #0]
 8012c2c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8012c30:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8012c34:	42b3      	cmp	r3, r6
 8012c36:	d124      	bne.n	8012c82 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8012c38:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8012c3c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8012c40:	f001 070f 	and.w	r7, r1, #15
 8012c44:	4652      	mov	r2, sl
 8012c46:	f8cd 8000 	str.w	r8, [sp]
 8012c4a:	464b      	mov	r3, r9
 8012c4c:	4621      	mov	r1, r4
 8012c4e:	4628      	mov	r0, r5
 8012c50:	f7ff ff9e 	bl	8012b90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8012c54:	4683      	mov	fp, r0
 8012c56:	b168      	cbz	r0, 8012c74 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8012c58:	eb0a 0109 	add.w	r1, sl, r9
 8012c5c:	463a      	mov	r2, r7
 8012c5e:	4628      	mov	r0, r5
 8012c60:	4441      	add	r1, r8
 8012c62:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8012c66:	4649      	mov	r1, r9
 8012c68:	f7ff ff42 	bl	8012af0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8012c6c:	4658      	mov	r0, fp
 8012c6e:	b003      	add	sp, #12
 8012c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c74:	eb07 010a 	add.w	r1, r7, sl
 8012c78:	4449      	add	r1, r9
 8012c7a:	4441      	add	r1, r8
 8012c7c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012c80:	e7d2      	b.n	8012c28 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8012c82:	f04f 0b00 	mov.w	fp, #0
 8012c86:	e7f1      	b.n	8012c6c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08012c88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8012c88:	b570      	push	{r4, r5, r6, lr}
 8012c8a:	8810      	ldrh	r0, [r2, #0]
 8012c8c:	4298      	cmp	r0, r3
 8012c8e:	d817      	bhi.n	8012cc0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012c90:	1e48      	subs	r0, r1, #1
 8012c92:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8012c96:	4298      	cmp	r0, r3
 8012c98:	d312      	bcc.n	8012cc0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012c9a:	2400      	movs	r4, #0
 8012c9c:	428c      	cmp	r4, r1
 8012c9e:	d20f      	bcs.n	8012cc0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012ca0:	1860      	adds	r0, r4, r1
 8012ca2:	1040      	asrs	r0, r0, #1
 8012ca4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8012ca8:	0085      	lsls	r5, r0, #2
 8012caa:	42b3      	cmp	r3, r6
 8012cac:	d902      	bls.n	8012cb4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8012cae:	3001      	adds	r0, #1
 8012cb0:	b284      	uxth	r4, r0
 8012cb2:	e7f3      	b.n	8012c9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012cb4:	d201      	bcs.n	8012cba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8012cb6:	b281      	uxth	r1, r0
 8012cb8:	e7f0      	b.n	8012c9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012cba:	442a      	add	r2, r5
 8012cbc:	8850      	ldrh	r0, [r2, #2]
 8012cbe:	bd70      	pop	{r4, r5, r6, pc}
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	e7fc      	b.n	8012cbe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08012cc4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8012cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8012cca:	4604      	mov	r4, r0
 8012ccc:	260b      	movs	r6, #11
 8012cce:	886f      	ldrh	r7, [r5, #2]
 8012cd0:	087f      	lsrs	r7, r7, #1
 8012cd2:	3e01      	subs	r6, #1
 8012cd4:	d01b      	beq.n	8012d0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8012cd6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012cd8:	b92b      	cbnz	r3, 8012ce6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8012cda:	4b0e      	ldr	r3, [pc, #56]	; (8012d14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8012cdc:	21bf      	movs	r1, #191	; 0xbf
 8012cde:	4a0e      	ldr	r2, [pc, #56]	; (8012d18 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8012ce0:	480e      	ldr	r0, [pc, #56]	; (8012d1c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8012ce2:	f008 fe6f 	bl	801b9c4 <__assert_func>
 8012ce6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8012ce8:	462a      	mov	r2, r5
 8012cea:	4639      	mov	r1, r7
 8012cec:	4620      	mov	r0, r4
 8012cee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012cf2:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8012cf6:	4643      	mov	r3, r8
 8012cf8:	f7ff ffc6 	bl	8012c88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8012cfc:	b138      	cbz	r0, 8012d0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8012cfe:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8012d02:	4642      	mov	r2, r8
 8012d04:	4620      	mov	r0, r4
 8012d06:	f7ff ff8b 	bl	8012c20 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8012d0a:	2800      	cmp	r0, #0
 8012d0c:	d1e1      	bne.n	8012cd2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8012d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d12:	bf00      	nop
 8012d14:	0801ef6c 	.word	0x0801ef6c
 8012d18:	0801f1de 	.word	0x0801f1de
 8012d1c:	0801ef75 	.word	0x0801ef75

08012d20 <_ZN8touchgfx8ceil28_4El>:
 8012d20:	f110 030f 	adds.w	r3, r0, #15
 8012d24:	d401      	bmi.n	8012d2a <_ZN8touchgfx8ceil28_4El+0xa>
 8012d26:	1118      	asrs	r0, r3, #4
 8012d28:	4770      	bx	lr
 8012d2a:	2210      	movs	r2, #16
 8012d2c:	f1c0 0001 	rsb	r0, r0, #1
 8012d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d34:	f010 000f 	ands.w	r0, r0, #15
 8012d38:	bf18      	it	ne
 8012d3a:	2001      	movne	r0, #1
 8012d3c:	1a18      	subs	r0, r3, r0
 8012d3e:	4770      	bx	lr

08012d40 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8012d40:	2900      	cmp	r1, #0
 8012d42:	b538      	push	{r3, r4, r5, lr}
 8012d44:	dc05      	bgt.n	8012d52 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8012d46:	4b0f      	ldr	r3, [pc, #60]	; (8012d84 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8012d48:	21f7      	movs	r1, #247	; 0xf7
 8012d4a:	4a0f      	ldr	r2, [pc, #60]	; (8012d88 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8012d4c:	480f      	ldr	r0, [pc, #60]	; (8012d8c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8012d4e:	f008 fe39 	bl	801b9c4 <__assert_func>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	db06      	blt.n	8012d64 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8012d56:	fb90 f4f1 	sdiv	r4, r0, r1
 8012d5a:	fb01 0114 	mls	r1, r1, r4, r0
 8012d5e:	6014      	str	r4, [r2, #0]
 8012d60:	6019      	str	r1, [r3, #0]
 8012d62:	bd38      	pop	{r3, r4, r5, pc}
 8012d64:	4240      	negs	r0, r0
 8012d66:	fb90 f4f1 	sdiv	r4, r0, r1
 8012d6a:	4265      	negs	r5, r4
 8012d6c:	fb01 0014 	mls	r0, r1, r4, r0
 8012d70:	6015      	str	r5, [r2, #0]
 8012d72:	6018      	str	r0, [r3, #0]
 8012d74:	2800      	cmp	r0, #0
 8012d76:	d0f4      	beq.n	8012d62 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8012d78:	6810      	ldr	r0, [r2, #0]
 8012d7a:	3801      	subs	r0, #1
 8012d7c:	6010      	str	r0, [r2, #0]
 8012d7e:	6818      	ldr	r0, [r3, #0]
 8012d80:	1a09      	subs	r1, r1, r0
 8012d82:	e7ed      	b.n	8012d60 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8012d84:	0801f538 	.word	0x0801f538
 8012d88:	0801f577 	.word	0x0801f577
 8012d8c:	0801f548 	.word	0x0801f548

08012d90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8012d90:	b570      	push	{r4, r5, r6, lr}
 8012d92:	694a      	ldr	r2, [r1, #20]
 8012d94:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012d96:	684b      	ldr	r3, [r1, #4]
 8012d98:	1b54      	subs	r4, r2, r5
 8012d9a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8012d9c:	f000 8106 	beq.w	8012fac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8012da0:	1b9b      	subs	r3, r3, r6
 8012da2:	d003      	beq.n	8012dac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012da4:	4363      	muls	r3, r4
 8012da6:	2210      	movs	r2, #16
 8012da8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dac:	680c      	ldr	r4, [r1, #0]
 8012dae:	698a      	ldr	r2, [r1, #24]
 8012db0:	1b65      	subs	r5, r4, r5
 8012db2:	f000 80fd 	beq.w	8012fb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8012db6:	1b92      	subs	r2, r2, r6
 8012db8:	d003      	beq.n	8012dc2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012dba:	436a      	muls	r2, r5
 8012dbc:	2410      	movs	r4, #16
 8012dbe:	fb92 f2f4 	sdiv	r2, r2, r4
 8012dc2:	1a9b      	subs	r3, r3, r2
 8012dc4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8012fec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8012dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012dcc:	460a      	mov	r2, r1
 8012dce:	ee07 3a90 	vmov	s15, r3
 8012dd2:	f100 040c 	add.w	r4, r0, #12
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ddc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012de0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8012de4:	eeb1 6a43 	vneg.f32	s12, s6
 8012de8:	edd2 7a02 	vldr	s15, [r2, #8]
 8012dec:	3214      	adds	r2, #20
 8012dee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012df2:	ece3 6a01 	vstmia	r3!, {s13}
 8012df6:	429c      	cmp	r4, r3
 8012df8:	ed52 7a02 	vldr	s15, [r2, #-8]
 8012dfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e00:	edc3 7a02 	vstr	s15, [r3, #8]
 8012e04:	ed52 7a01 	vldr	s15, [r2, #-4]
 8012e08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e0c:	edc3 7a05 	vstr	s15, [r3, #20]
 8012e10:	d1ea      	bne.n	8012de8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8012e12:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012e14:	698b      	ldr	r3, [r1, #24]
 8012e16:	edd0 4a02 	vldr	s9, [r0, #8]
 8012e1a:	1a9b      	subs	r3, r3, r2
 8012e1c:	edd0 3a00 	vldr	s7, [r0]
 8012e20:	edd0 6a01 	vldr	s13, [r0, #4]
 8012e24:	ee07 3a90 	vmov	s15, r3
 8012e28:	684b      	ldr	r3, [r1, #4]
 8012e2a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012e2e:	ed90 5a05 	vldr	s10, [r0, #20]
 8012e32:	1a9b      	subs	r3, r3, r2
 8012e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e38:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8012e3c:	ed90 2a03 	vldr	s4, [r0, #12]
 8012e40:	ee07 3a10 	vmov	s14, r3
 8012e44:	edd0 5a04 	vldr	s11, [r0, #16]
 8012e48:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012e4c:	ed90 1a07 	vldr	s2, [r0, #28]
 8012e50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e54:	edd0 2a06 	vldr	s5, [r0, #24]
 8012e58:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012e5c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8012e60:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012e64:	ee32 5a45 	vsub.f32	s10, s4, s10
 8012e68:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012e6c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012e70:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8012e74:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012e76:	694a      	ldr	r2, [r1, #20]
 8012e78:	1b13      	subs	r3, r2, r4
 8012e7a:	ee07 3a10 	vmov	s14, r3
 8012e7e:	680b      	ldr	r3, [r1, #0]
 8012e80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e84:	1b1b      	subs	r3, r3, r4
 8012e86:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012e8a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8012e8e:	ee07 3a10 	vmov	s14, r3
 8012e92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e96:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012e9a:	eee6 4a87 	vfma.f32	s9, s13, s14
 8012e9e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8012ea2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8012ea6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012ea8:	698b      	ldr	r3, [r1, #24]
 8012eaa:	1a9b      	subs	r3, r3, r2
 8012eac:	ee06 3a90 	vmov	s13, r3
 8012eb0:	684b      	ldr	r3, [r1, #4]
 8012eb2:	1a9b      	subs	r3, r3, r2
 8012eb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012eb8:	ee07 3a10 	vmov	s14, r3
 8012ebc:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012ec0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ec4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8012ec8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012ecc:	eee5 6a87 	vfma.f32	s13, s11, s14
 8012ed0:	ee66 6a83 	vmul.f32	s13, s13, s6
 8012ed4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8012ed8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012eda:	694a      	ldr	r2, [r1, #20]
 8012edc:	1b13      	subs	r3, r2, r4
 8012ede:	ee07 3a10 	vmov	s14, r3
 8012ee2:	680b      	ldr	r3, [r1, #0]
 8012ee4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ee8:	1b1b      	subs	r3, r3, r4
 8012eea:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012eee:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012ef2:	ee07 3a10 	vmov	s14, r3
 8012ef6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012efa:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012efe:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012f02:	edd0 5a08 	vldr	s11, [r0, #32]
 8012f06:	ee31 1a65 	vsub.f32	s2, s2, s11
 8012f0a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8012f0e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012f12:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8012f16:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012f18:	698b      	ldr	r3, [r1, #24]
 8012f1a:	1a9b      	subs	r3, r3, r2
 8012f1c:	ee07 3a10 	vmov	s14, r3
 8012f20:	684b      	ldr	r3, [r1, #4]
 8012f22:	1a9b      	subs	r3, r3, r2
 8012f24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f28:	ee01 3a90 	vmov	s3, r3
 8012f2c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012f30:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8012f34:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8012f38:	ee61 1a84 	vmul.f32	s3, s3, s8
 8012f3c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8012f40:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012f44:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8012f48:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012f4a:	694a      	ldr	r2, [r1, #20]
 8012f4c:	1b13      	subs	r3, r2, r4
 8012f4e:	ee03 3a10 	vmov	s6, r3
 8012f52:	680b      	ldr	r3, [r1, #0]
 8012f54:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012f58:	1b1b      	subs	r3, r3, r4
 8012f5a:	ee23 3a04 	vmul.f32	s6, s6, s8
 8012f5e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8012f62:	ee03 3a10 	vmov	s6, r3
 8012f66:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012f6a:	ee23 4a04 	vmul.f32	s8, s6, s8
 8012f6e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8012f72:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012f76:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8012f7a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8012f7e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8012f82:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8012f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8a:	dd13      	ble.n	8012fb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8012f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012f90:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8012f94:	63c3      	str	r3, [r0, #60]	; 0x3c
 8012f96:	eee3 7a87 	vfma.f32	s15, s7, s14
 8012f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa2:	dd15      	ble.n	8012fd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8012fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012fa8:	6403      	str	r3, [r0, #64]	; 0x40
 8012faa:	bd70      	pop	{r4, r5, r6, pc}
 8012fac:	4623      	mov	r3, r4
 8012fae:	e6fd      	b.n	8012dac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012fb0:	462a      	mov	r2, r5
 8012fb2:	e706      	b.n	8012dc2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012fb4:	d502      	bpl.n	8012fbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8012fb6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012fba:	e7e9      	b.n	8012f90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8012fbc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8012fc0:	eea3 2a85 	vfma.f32	s4, s7, s10
 8012fc4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8012fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fcc:	dade      	bge.n	8012f8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8012fce:	e7f2      	b.n	8012fb6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8012fd0:	d502      	bpl.n	8012fd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8012fd2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012fd6:	e7e7      	b.n	8012fa8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8012fd8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8012fdc:	eee3 4a86 	vfma.f32	s9, s7, s12
 8012fe0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8012fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fe8:	dadc      	bge.n	8012fa4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8012fea:	e7f2      	b.n	8012fd2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8012fec:	3d800000 	.word	0x3d800000

08012ff0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8012ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff4:	f04f 0814 	mov.w	r8, #20
 8012ff8:	4604      	mov	r4, r0
 8012ffa:	4617      	mov	r7, r2
 8012ffc:	460d      	mov	r5, r1
 8012ffe:	fb08 f903 	mul.w	r9, r8, r3
 8013002:	461e      	mov	r6, r3
 8013004:	eb02 0a09 	add.w	sl, r2, r9
 8013008:	f8da 0004 	ldr.w	r0, [sl, #4]
 801300c:	f7ff fe88 	bl	8012d20 <_ZN8touchgfx8ceil28_4El>
 8013010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013012:	6160      	str	r0, [r4, #20]
 8013014:	fb08 f803 	mul.w	r8, r8, r3
 8013018:	9001      	str	r0, [sp, #4]
 801301a:	eb07 0b08 	add.w	fp, r7, r8
 801301e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013022:	f7ff fe7d 	bl	8012d20 <_ZN8touchgfx8ceil28_4El>
 8013026:	9a01      	ldr	r2, [sp, #4]
 8013028:	1a80      	subs	r0, r0, r2
 801302a:	61a0      	str	r0, [r4, #24]
 801302c:	2800      	cmp	r0, #0
 801302e:	f000 8088 	beq.w	8013142 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8013032:	f857 3009 	ldr.w	r3, [r7, r9]
 8013036:	f857 c008 	ldr.w	ip, [r7, r8]
 801303a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801303e:	ebac 0c03 	sub.w	ip, ip, r3
 8013042:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013046:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801304a:	1a40      	subs	r0, r0, r1
 801304c:	fb0b f202 	mul.w	r2, fp, r2
 8013050:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8013054:	fb0c 2211 	mls	r2, ip, r1, r2
 8013058:	4641      	mov	r1, r8
 801305a:	fb00 2003 	mla	r0, r0, r3, r2
 801305e:	f104 0310 	add.w	r3, r4, #16
 8013062:	4622      	mov	r2, r4
 8013064:	3801      	subs	r0, #1
 8013066:	4440      	add	r0, r8
 8013068:	f7ff fe6a 	bl	8012d40 <_ZN8touchgfx11floorDivModEllRlS0_>
 801306c:	f104 0308 	add.w	r3, r4, #8
 8013070:	1d22      	adds	r2, r4, #4
 8013072:	4641      	mov	r1, r8
 8013074:	4658      	mov	r0, fp
 8013076:	f7ff fe63 	bl	8012d40 <_ZN8touchgfx11floorDivModEllRlS0_>
 801307a:	f8c4 800c 	str.w	r8, [r4, #12]
 801307e:	6962      	ldr	r2, [r4, #20]
 8013080:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013084:	eddf 6a31 	vldr	s13, [pc, #196]	; 801314c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8013088:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801308c:	6822      	ldr	r2, [r4, #0]
 801308e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8013092:	ee07 3a10 	vmov	s14, r3
 8013096:	f857 3009 	ldr.w	r3, [r7, r9]
 801309a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801309e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80130a2:	ee07 3a90 	vmov	s15, r3
 80130a6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80130aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80130ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80130b6:	edd3 6a00 	vldr	s13, [r3]
 80130ba:	eee6 6a07 	vfma.f32	s13, s12, s14
 80130be:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80130c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80130c6:	edc4 6a07 	vstr	s13, [r4, #28]
 80130ca:	edd4 6a01 	vldr	s13, [r4, #4]
 80130ce:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 80130d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80130d6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80130da:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80130de:	ed84 6a08 	vstr	s12, [r4, #32]
 80130e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80130e4:	6262      	str	r2, [r4, #36]	; 0x24
 80130e6:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80130ea:	ed93 6a03 	vldr	s12, [r3, #12]
 80130ee:	eea5 6a87 	vfma.f32	s12, s11, s14
 80130f2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80130f6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80130fa:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 80130fe:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8013102:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8013106:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801310a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801310e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8013110:	6322      	str	r2, [r4, #48]	; 0x30
 8013112:	ed93 6a06 	vldr	s12, [r3, #24]
 8013116:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801311a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801311e:	eeb0 7a46 	vmov.f32	s14, s12
 8013122:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8013126:	eea6 7a27 	vfma.f32	s14, s12, s15
 801312a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801312e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8013132:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8013136:	eee6 7a87 	vfma.f32	s15, s13, s14
 801313a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801313e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013140:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013142:	4620      	mov	r0, r4
 8013144:	b003      	add	sp, #12
 8013146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801314a:	bf00      	nop
 801314c:	3d800000 	.word	0x3d800000

08013150 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8013150:	4b01      	ldr	r3, [pc, #4]	; (8013158 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8013152:	6018      	str	r0, [r3, #0]
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop
 8013158:	2000dfcc 	.word	0x2000dfcc

0801315c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801315c:	4b06      	ldr	r3, [pc, #24]	; (8013178 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801315e:	881a      	ldrh	r2, [r3, #0]
 8013160:	4282      	cmp	r2, r0
 8013162:	d807      	bhi.n	8013174 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8013164:	4b05      	ldr	r3, [pc, #20]	; (801317c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8013166:	881b      	ldrh	r3, [r3, #0]
 8013168:	4413      	add	r3, r2
 801316a:	4298      	cmp	r0, r3
 801316c:	bfac      	ite	ge
 801316e:	2000      	movge	r0, #0
 8013170:	2001      	movlt	r0, #1
 8013172:	4770      	bx	lr
 8013174:	2000      	movs	r0, #0
 8013176:	4770      	bx	lr
 8013178:	2000dfec 	.word	0x2000dfec
 801317c:	2000dff0 	.word	0x2000dff0

08013180 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8013180:	b508      	push	{r3, lr}
 8013182:	4601      	mov	r1, r0
 8013184:	f7ff ffea 	bl	801315c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013188:	b118      	cbz	r0, 8013192 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801318a:	4b02      	ldr	r3, [pc, #8]	; (8013194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8013192:	bd08      	pop	{r3, pc}
 8013194:	2000dfd0 	.word	0x2000dfd0

08013198 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8013198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801319c:	4d28      	ldr	r5, [pc, #160]	; (8013240 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801319e:	682b      	ldr	r3, [r5, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d04a      	beq.n	801323a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80131a4:	4a27      	ldr	r2, [pc, #156]	; (8013244 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80131a6:	4e28      	ldr	r6, [pc, #160]	; (8013248 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80131a8:	8810      	ldrh	r0, [r2, #0]
 80131aa:	f8b6 8000 	ldrh.w	r8, [r6]
 80131ae:	4c27      	ldr	r4, [pc, #156]	; (801324c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80131b0:	4440      	add	r0, r8
 80131b2:	4f27      	ldr	r7, [pc, #156]	; (8013250 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80131b4:	1c41      	adds	r1, r0, #1
 80131b6:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80131ba:	f021 0101 	bic.w	r1, r1, #1
 80131be:	eb03 020e 	add.w	r2, r3, lr
 80131c2:	0409      	lsls	r1, r1, #16
 80131c4:	6022      	str	r2, [r4, #0]
 80131c6:	0c09      	lsrs	r1, r1, #16
 80131c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80131cc:	eb0e 010c 	add.w	r1, lr, ip
 80131d0:	185a      	adds	r2, r3, r1
 80131d2:	603a      	str	r2, [r7, #0]
 80131d4:	220e      	movs	r2, #14
 80131d6:	fb02 f208 	mul.w	r2, r2, r8
 80131da:	3203      	adds	r2, #3
 80131dc:	f022 0203 	bic.w	r2, r2, #3
 80131e0:	4411      	add	r1, r2
 80131e2:	440b      	add	r3, r1
 80131e4:	491b      	ldr	r1, [pc, #108]	; (8013254 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80131e6:	600b      	str	r3, [r1, #0]
 80131e8:	2300      	movs	r3, #0
 80131ea:	491b      	ldr	r1, [pc, #108]	; (8013258 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80131ec:	800b      	strh	r3, [r1, #0]
 80131ee:	491b      	ldr	r1, [pc, #108]	; (801325c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80131f0:	6809      	ldr	r1, [r1, #0]
 80131f2:	eba1 010e 	sub.w	r1, r1, lr
 80131f6:	eba1 010c 	sub.w	r1, r1, ip
 80131fa:	469c      	mov	ip, r3
 80131fc:	1a8a      	subs	r2, r1, r2
 80131fe:	4918      	ldr	r1, [pc, #96]	; (8013260 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8013200:	600a      	str	r2, [r1, #0]
 8013202:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013206:	4a17      	ldr	r2, [pc, #92]	; (8013264 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8013208:	8013      	strh	r3, [r2, #0]
 801320a:	4283      	cmp	r3, r0
 801320c:	d10d      	bne.n	801322a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801320e:	8835      	ldrh	r5, [r6, #0]
 8013210:	2300      	movs	r3, #0
 8013212:	6838      	ldr	r0, [r7, #0]
 8013214:	240e      	movs	r4, #14
 8013216:	429d      	cmp	r5, r3
 8013218:	d90f      	bls.n	801323a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801321a:	fb04 0203 	mla	r2, r4, r3, r0
 801321e:	3301      	adds	r3, #1
 8013220:	7b11      	ldrb	r1, [r2, #12]
 8013222:	f36f 1145 	bfc	r1, #5, #1
 8013226:	7311      	strb	r1, [r2, #12]
 8013228:	e7f5      	b.n	8013216 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801322a:	682a      	ldr	r2, [r5, #0]
 801322c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8013230:	6822      	ldr	r2, [r4, #0]
 8013232:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013236:	3301      	adds	r3, #1
 8013238:	e7e7      	b.n	801320a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801323a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801323e:	bf00      	nop
 8013240:	2000dfd0 	.word	0x2000dfd0
 8013244:	2000dfec 	.word	0x2000dfec
 8013248:	2000dff0 	.word	0x2000dff0
 801324c:	2000dfe4 	.word	0x2000dfe4
 8013250:	2000dfd4 	.word	0x2000dfd4
 8013254:	2000dfdc 	.word	0x2000dfdc
 8013258:	2000dfee 	.word	0x2000dfee
 801325c:	2000dfd8 	.word	0x2000dfd8
 8013260:	2000dfe8 	.word	0x2000dfe8
 8013264:	2000dfe0 	.word	0x2000dfe0

08013268 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8013268:	4b10      	ldr	r3, [pc, #64]	; (80132ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801326a:	b510      	push	{r4, lr}
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	b9db      	cbnz	r3, 80132a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013270:	b1d1      	cbz	r1, 80132a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013272:	4b0f      	ldr	r3, [pc, #60]	; (80132b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8013274:	240e      	movs	r4, #14
 8013276:	801a      	strh	r2, [r3, #0]
 8013278:	b292      	uxth	r2, r2
 801327a:	4b0e      	ldr	r3, [pc, #56]	; (80132b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801327c:	881b      	ldrh	r3, [r3, #0]
 801327e:	4413      	add	r3, r2
 8013280:	4362      	muls	r2, r4
 8013282:	2406      	movs	r4, #6
 8013284:	fb04 2203 	mla	r2, r4, r3, r2
 8013288:	428a      	cmp	r2, r1
 801328a:	d305      	bcc.n	8013298 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801328c:	4b0a      	ldr	r3, [pc, #40]	; (80132b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801328e:	2135      	movs	r1, #53	; 0x35
 8013290:	4a0a      	ldr	r2, [pc, #40]	; (80132bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8013292:	480b      	ldr	r0, [pc, #44]	; (80132c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8013294:	f008 fb96 	bl	801b9c4 <__assert_func>
 8013298:	4b0a      	ldr	r3, [pc, #40]	; (80132c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801329a:	6019      	str	r1, [r3, #0]
 801329c:	4b0a      	ldr	r3, [pc, #40]	; (80132c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801329e:	6018      	str	r0, [r3, #0]
 80132a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132a4:	f7ff bf78 	b.w	8013198 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80132a8:	bd10      	pop	{r4, pc}
 80132aa:	bf00      	nop
 80132ac:	2000dfdc 	.word	0x2000dfdc
 80132b0:	2000dff0 	.word	0x2000dff0
 80132b4:	2000dfec 	.word	0x2000dfec
 80132b8:	0801f615 	.word	0x0801f615
 80132bc:	0801f66e 	.word	0x0801f66e
 80132c0:	0801f5f0 	.word	0x0801f5f0
 80132c4:	2000dfd8 	.word	0x2000dfd8
 80132c8:	2000dfd0 	.word	0x2000dfd0

080132cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80132cc:	b470      	push	{r4, r5, r6}
 80132ce:	4c07      	ldr	r4, [pc, #28]	; (80132ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80132d0:	4605      	mov	r5, r0
 80132d2:	4610      	mov	r0, r2
 80132d4:	9a03      	ldr	r2, [sp, #12]
 80132d6:	6826      	ldr	r6, [r4, #0]
 80132d8:	b936      	cbnz	r6, 80132e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80132da:	6025      	str	r5, [r4, #0]
 80132dc:	4c04      	ldr	r4, [pc, #16]	; (80132f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80132de:	8021      	strh	r1, [r4, #0]
 80132e0:	4619      	mov	r1, r3
 80132e2:	bc70      	pop	{r4, r5, r6}
 80132e4:	f7ff bfc0 	b.w	8013268 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80132e8:	bc70      	pop	{r4, r5, r6}
 80132ea:	4770      	bx	lr
 80132ec:	2000dff4 	.word	0x2000dff4
 80132f0:	2000dfec 	.word	0x2000dfec

080132f4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80132f4:	b508      	push	{r3, lr}
 80132f6:	4b14      	ldr	r3, [pc, #80]	; (8013348 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80132f8:	6819      	ldr	r1, [r3, #0]
 80132fa:	b931      	cbnz	r1, 801330a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80132fc:	4b13      	ldr	r3, [pc, #76]	; (801334c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80132fe:	f240 4186 	movw	r1, #1158	; 0x486
 8013302:	4a13      	ldr	r2, [pc, #76]	; (8013350 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8013304:	4813      	ldr	r0, [pc, #76]	; (8013354 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8013306:	f008 fb5d 	bl	801b9c4 <__assert_func>
 801330a:	4a13      	ldr	r2, [pc, #76]	; (8013358 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801330c:	8803      	ldrh	r3, [r0, #0]
 801330e:	8812      	ldrh	r2, [r2, #0]
 8013310:	4293      	cmp	r3, r2
 8013312:	d204      	bcs.n	801331e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8013314:	2214      	movs	r2, #20
 8013316:	fb02 1303 	mla	r3, r2, r3, r1
 801331a:	8918      	ldrh	r0, [r3, #8]
 801331c:	bd08      	pop	{r3, pc}
 801331e:	490f      	ldr	r1, [pc, #60]	; (801335c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8013320:	8809      	ldrh	r1, [r1, #0]
 8013322:	4411      	add	r1, r2
 8013324:	428b      	cmp	r3, r1
 8013326:	da06      	bge.n	8013336 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8013328:	1a9b      	subs	r3, r3, r2
 801332a:	4a0d      	ldr	r2, [pc, #52]	; (8013360 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801332c:	210e      	movs	r1, #14
 801332e:	6812      	ldr	r2, [r2, #0]
 8013330:	fb01 2303 	mla	r3, r1, r3, r2
 8013334:	e7f1      	b.n	801331a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8013336:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801333a:	4293      	cmp	r3, r2
 801333c:	bf0a      	itet	eq
 801333e:	4b09      	ldreq	r3, [pc, #36]	; (8013364 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8013340:	2000      	movne	r0, #0
 8013342:	8818      	ldrheq	r0, [r3, #0]
 8013344:	e7ea      	b.n	801331c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8013346:	bf00      	nop
 8013348:	2000dff4 	.word	0x2000dff4
 801334c:	0801ea14 	.word	0x0801ea14
 8013350:	0801f71b 	.word	0x0801f71b
 8013354:	0801f5f0 	.word	0x0801f5f0
 8013358:	2000dfec 	.word	0x2000dfec
 801335c:	2000dff0 	.word	0x2000dff0
 8013360:	2000dfd4 	.word	0x2000dfd4
 8013364:	2000df60 	.word	0x2000df60

08013368 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8013368:	b508      	push	{r3, lr}
 801336a:	4b14      	ldr	r3, [pc, #80]	; (80133bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801336c:	6819      	ldr	r1, [r3, #0]
 801336e:	b931      	cbnz	r1, 801337e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8013370:	4b13      	ldr	r3, [pc, #76]	; (80133c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8013372:	f240 419a 	movw	r1, #1178	; 0x49a
 8013376:	4a13      	ldr	r2, [pc, #76]	; (80133c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8013378:	4813      	ldr	r0, [pc, #76]	; (80133c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801337a:	f008 fb23 	bl	801b9c4 <__assert_func>
 801337e:	4a13      	ldr	r2, [pc, #76]	; (80133cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8013380:	8803      	ldrh	r3, [r0, #0]
 8013382:	8812      	ldrh	r2, [r2, #0]
 8013384:	4293      	cmp	r3, r2
 8013386:	d204      	bcs.n	8013392 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8013388:	2214      	movs	r2, #20
 801338a:	fb02 1303 	mla	r3, r2, r3, r1
 801338e:	8958      	ldrh	r0, [r3, #10]
 8013390:	bd08      	pop	{r3, pc}
 8013392:	490f      	ldr	r1, [pc, #60]	; (80133d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8013394:	8809      	ldrh	r1, [r1, #0]
 8013396:	4411      	add	r1, r2
 8013398:	428b      	cmp	r3, r1
 801339a:	da06      	bge.n	80133aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801339c:	1a9b      	subs	r3, r3, r2
 801339e:	4a0d      	ldr	r2, [pc, #52]	; (80133d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80133a0:	210e      	movs	r1, #14
 80133a2:	6812      	ldr	r2, [r2, #0]
 80133a4:	fb01 2303 	mla	r3, r1, r3, r2
 80133a8:	e7f1      	b.n	801338e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80133aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80133ae:	4293      	cmp	r3, r2
 80133b0:	bf0a      	itet	eq
 80133b2:	4b09      	ldreq	r3, [pc, #36]	; (80133d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80133b4:	2000      	movne	r0, #0
 80133b6:	8818      	ldrheq	r0, [r3, #0]
 80133b8:	e7ea      	b.n	8013390 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80133ba:	bf00      	nop
 80133bc:	2000dff4 	.word	0x2000dff4
 80133c0:	0801ea14 	.word	0x0801ea14
 80133c4:	0801f747 	.word	0x0801f747
 80133c8:	0801f5f0 	.word	0x0801f5f0
 80133cc:	2000dfec 	.word	0x2000dfec
 80133d0:	2000dff0 	.word	0x2000dff0
 80133d4:	2000dfd4 	.word	0x2000dfd4
 80133d8:	2000df62 	.word	0x2000df62

080133dc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80133dc:	4b23      	ldr	r3, [pc, #140]	; (801346c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80133de:	b510      	push	{r4, lr}
 80133e0:	681c      	ldr	r4, [r3, #0]
 80133e2:	b934      	cbnz	r4, 80133f2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80133e4:	4b22      	ldr	r3, [pc, #136]	; (8013470 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80133e6:	f240 41ae 	movw	r1, #1198	; 0x4ae
 80133ea:	4a22      	ldr	r2, [pc, #136]	; (8013474 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80133ec:	4822      	ldr	r0, [pc, #136]	; (8013478 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80133ee:	f008 fae9 	bl	801b9c4 <__assert_func>
 80133f2:	4a22      	ldr	r2, [pc, #136]	; (801347c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80133f4:	880b      	ldrh	r3, [r1, #0]
 80133f6:	8812      	ldrh	r2, [r2, #0]
 80133f8:	4293      	cmp	r3, r2
 80133fa:	d211      	bcs.n	8013420 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80133fc:	2214      	movs	r2, #20
 80133fe:	fb02 4303 	mla	r3, r2, r3, r4
 8013402:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8013406:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801340a:	8a1a      	ldrh	r2, [r3, #16]
 801340c:	8a5b      	ldrh	r3, [r3, #18]
 801340e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013412:	8004      	strh	r4, [r0, #0]
 8013414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013418:	8041      	strh	r1, [r0, #2]
 801341a:	8082      	strh	r2, [r0, #4]
 801341c:	80c3      	strh	r3, [r0, #6]
 801341e:	e00e      	b.n	801343e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013420:	4917      	ldr	r1, [pc, #92]	; (8013480 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8013422:	8809      	ldrh	r1, [r1, #0]
 8013424:	4411      	add	r1, r2
 8013426:	428b      	cmp	r3, r1
 8013428:	da0a      	bge.n	8013440 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801342a:	1a9b      	subs	r3, r3, r2
 801342c:	4a15      	ldr	r2, [pc, #84]	; (8013484 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801342e:	210e      	movs	r1, #14
 8013430:	6812      	ldr	r2, [r2, #0]
 8013432:	fb01 2303 	mla	r3, r1, r3, r2
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	6002      	str	r2, [r0, #0]
 801343a:	685a      	ldr	r2, [r3, #4]
 801343c:	6042      	str	r2, [r0, #4]
 801343e:	bd10      	pop	{r4, pc}
 8013440:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013444:	4293      	cmp	r3, r2
 8013446:	d10b      	bne.n	8013460 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8013448:	4b0f      	ldr	r3, [pc, #60]	; (8013488 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801344a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801344e:	4b0f      	ldr	r3, [pc, #60]	; (801348c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8013450:	8081      	strh	r1, [r0, #4]
 8013452:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013456:	2300      	movs	r3, #0
 8013458:	80c2      	strh	r2, [r0, #6]
 801345a:	8003      	strh	r3, [r0, #0]
 801345c:	8043      	strh	r3, [r0, #2]
 801345e:	e7ee      	b.n	801343e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013460:	2300      	movs	r3, #0
 8013462:	8003      	strh	r3, [r0, #0]
 8013464:	8043      	strh	r3, [r0, #2]
 8013466:	8083      	strh	r3, [r0, #4]
 8013468:	e7d8      	b.n	801341c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801346a:	bf00      	nop
 801346c:	2000dff4 	.word	0x2000dff4
 8013470:	0801ea14 	.word	0x0801ea14
 8013474:	0801f6b4 	.word	0x0801f6b4
 8013478:	0801f5f0 	.word	0x0801f5f0
 801347c:	2000dfec 	.word	0x2000dfec
 8013480:	2000dff0 	.word	0x2000dff0
 8013484:	2000dfd4 	.word	0x2000dfd4
 8013488:	2000df60 	.word	0x2000df60
 801348c:	2000df62 	.word	0x2000df62

08013490 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8013490:	b508      	push	{r3, lr}
 8013492:	4b12      	ldr	r3, [pc, #72]	; (80134dc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8013494:	6819      	ldr	r1, [r3, #0]
 8013496:	b931      	cbnz	r1, 80134a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8013498:	4b11      	ldr	r3, [pc, #68]	; (80134e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801349a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801349e:	4a11      	ldr	r2, [pc, #68]	; (80134e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80134a0:	4811      	ldr	r0, [pc, #68]	; (80134e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80134a2:	f008 fa8f 	bl	801b9c4 <__assert_func>
 80134a6:	8803      	ldrh	r3, [r0, #0]
 80134a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134ac:	4293      	cmp	r3, r2
 80134ae:	d012      	beq.n	80134d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80134b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80134b4:	4293      	cmp	r3, r2
 80134b6:	d103      	bne.n	80134c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80134b8:	4b0c      	ldr	r3, [pc, #48]	; (80134ec <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80134be:	bd08      	pop	{r3, pc}
 80134c0:	4a0b      	ldr	r2, [pc, #44]	; (80134f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 80134c2:	6812      	ldr	r2, [r2, #0]
 80134c4:	b11a      	cbz	r2, 80134ce <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 80134c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80134ca:	2800      	cmp	r0, #0
 80134cc:	d1f7      	bne.n	80134be <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80134ce:	2214      	movs	r2, #20
 80134d0:	4353      	muls	r3, r2
 80134d2:	58c8      	ldr	r0, [r1, r3]
 80134d4:	e7f3      	b.n	80134be <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80134d6:	2000      	movs	r0, #0
 80134d8:	e7f1      	b.n	80134be <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80134da:	bf00      	nop
 80134dc:	2000dff4 	.word	0x2000dff4
 80134e0:	0801ea14 	.word	0x0801ea14
 80134e4:	0801f6ea 	.word	0x0801f6ea
 80134e8:	0801f5f0 	.word	0x0801f5f0
 80134ec:	2000df6c 	.word	0x2000df6c
 80134f0:	2000dfd0 	.word	0x2000dfd0

080134f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80134f4:	8802      	ldrh	r2, [r0, #0]
 80134f6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d845      	bhi.n	801358a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80134fe:	4b24      	ldr	r3, [pc, #144]	; (8013590 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8013500:	8818      	ldrh	r0, [r3, #0]
 8013502:	4282      	cmp	r2, r0
 8013504:	d221      	bcs.n	801354a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8013506:	4b23      	ldr	r3, [pc, #140]	; (8013594 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8013508:	6819      	ldr	r1, [r3, #0]
 801350a:	2314      	movs	r3, #20
 801350c:	fb03 1302 	mla	r3, r3, r2, r1
 8013510:	6858      	ldr	r0, [r3, #4]
 8013512:	2800      	cmp	r0, #0
 8013514:	d03a      	beq.n	801358c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013516:	4920      	ldr	r1, [pc, #128]	; (8013598 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013518:	6809      	ldr	r1, [r1, #0]
 801351a:	2900      	cmp	r1, #0
 801351c:	d036      	beq.n	801358c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801351e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013522:	2900      	cmp	r1, #0
 8013524:	d032      	beq.n	801358c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013526:	891a      	ldrh	r2, [r3, #8]
 8013528:	8958      	ldrh	r0, [r3, #10]
 801352a:	4350      	muls	r0, r2
 801352c:	7c5a      	ldrb	r2, [r3, #17]
 801352e:	7cdb      	ldrb	r3, [r3, #19]
 8013530:	0952      	lsrs	r2, r2, #5
 8013532:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013536:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801353a:	2b0b      	cmp	r3, #11
 801353c:	bf18      	it	ne
 801353e:	0040      	lslne	r0, r0, #1
 8013540:	3003      	adds	r0, #3
 8013542:	f020 0003 	bic.w	r0, r0, #3
 8013546:	4408      	add	r0, r1
 8013548:	4770      	bx	lr
 801354a:	4b14      	ldr	r3, [pc, #80]	; (801359c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801354c:	881b      	ldrh	r3, [r3, #0]
 801354e:	4403      	add	r3, r0
 8013550:	429a      	cmp	r2, r3
 8013552:	da1a      	bge.n	801358a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013554:	4b12      	ldr	r3, [pc, #72]	; (80135a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8013556:	1a10      	subs	r0, r2, r0
 8013558:	210e      	movs	r1, #14
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	fb01 3000 	mla	r0, r1, r0, r3
 8013560:	7b03      	ldrb	r3, [r0, #12]
 8013562:	f003 031f 	and.w	r3, r3, #31
 8013566:	2b0b      	cmp	r3, #11
 8013568:	d10b      	bne.n	8013582 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801356a:	8903      	ldrh	r3, [r0, #8]
 801356c:	8940      	ldrh	r0, [r0, #10]
 801356e:	4358      	muls	r0, r3
 8013570:	4b09      	ldr	r3, [pc, #36]	; (8013598 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013572:	3003      	adds	r0, #3
 8013574:	6819      	ldr	r1, [r3, #0]
 8013576:	f020 0303 	bic.w	r3, r0, #3
 801357a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801357e:	4418      	add	r0, r3
 8013580:	4770      	bx	lr
 8013582:	2b0d      	cmp	r3, #13
 8013584:	d101      	bne.n	801358a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013586:	300d      	adds	r0, #13
 8013588:	4770      	bx	lr
 801358a:	2000      	movs	r0, #0
 801358c:	4770      	bx	lr
 801358e:	bf00      	nop
 8013590:	2000dfec 	.word	0x2000dfec
 8013594:	2000dff4 	.word	0x2000dff4
 8013598:	2000dfd0 	.word	0x2000dfd0
 801359c:	2000dff0 	.word	0x2000dff0
 80135a0:	2000dfd4 	.word	0x2000dfd4

080135a4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80135a4:	4b17      	ldr	r3, [pc, #92]	; (8013604 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80135a6:	b510      	push	{r4, lr}
 80135a8:	6819      	ldr	r1, [r3, #0]
 80135aa:	8803      	ldrh	r3, [r0, #0]
 80135ac:	b1e9      	cbz	r1, 80135ea <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80135ae:	4a16      	ldr	r2, [pc, #88]	; (8013608 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80135b0:	8812      	ldrh	r2, [r2, #0]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d90a      	bls.n	80135cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 80135b6:	2214      	movs	r2, #20
 80135b8:	fb02 1303 	mla	r3, r2, r3, r1
 80135bc:	7c58      	ldrb	r0, [r3, #17]
 80135be:	0942      	lsrs	r2, r0, #5
 80135c0:	7cd8      	ldrb	r0, [r3, #19]
 80135c2:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80135c6:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80135ca:	bd10      	pop	{r4, pc}
 80135cc:	490f      	ldr	r1, [pc, #60]	; (801360c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80135ce:	8809      	ldrh	r1, [r1, #0]
 80135d0:	4411      	add	r1, r2
 80135d2:	428b      	cmp	r3, r1
 80135d4:	da09      	bge.n	80135ea <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80135d6:	1a9b      	subs	r3, r3, r2
 80135d8:	4a0d      	ldr	r2, [pc, #52]	; (8013610 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80135da:	210e      	movs	r1, #14
 80135dc:	6812      	ldr	r2, [r2, #0]
 80135de:	fb01 2303 	mla	r3, r1, r3, r2
 80135e2:	7b18      	ldrb	r0, [r3, #12]
 80135e4:	f000 001f 	and.w	r0, r0, #31
 80135e8:	e7ef      	b.n	80135ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80135ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80135ee:	4293      	cmp	r3, r2
 80135f0:	d106      	bne.n	8013600 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80135f2:	f7f0 fcdf 	bl	8003fb4 <_ZN8touchgfx3HAL3lcdEv>
 80135f6:	6803      	ldr	r3, [r0, #0]
 80135f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135fe:	4718      	bx	r3
 8013600:	2000      	movs	r0, #0
 8013602:	e7e2      	b.n	80135ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013604:	2000dff4 	.word	0x2000dff4
 8013608:	2000dfec 	.word	0x2000dfec
 801360c:	2000dff0 	.word	0x2000dff0
 8013610:	2000dfd4 	.word	0x2000dfd4

08013614 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8013614:	2018      	movs	r0, #24
 8013616:	4770      	bx	lr

08013618 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8013618:	2001      	movs	r0, #1
 801361a:	4770      	bx	lr

0801361c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013620:	b085      	sub	sp, #20
 8013622:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013624:	9203      	str	r2, [sp, #12]
 8013626:	6870      	ldr	r0, [r6, #4]
 8013628:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801362c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8013630:	9101      	str	r1, [sp, #4]
 8013632:	fa1f f885 	uxth.w	r8, r5
 8013636:	43ed      	mvns	r5, r5
 8013638:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801363c:	b2ed      	uxtb	r5, r5
 801363e:	fb00 2404 	mla	r4, r0, r4, r2
 8013642:	6832      	ldr	r2, [r6, #0]
 8013644:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013648:	4414      	add	r4, r2
 801364a:	f8dc 2000 	ldr.w	r2, [ip]
 801364e:	9202      	str	r2, [sp, #8]
 8013650:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013654:	f102 0e04 	add.w	lr, r2, #4
 8013658:	9a01      	ldr	r2, [sp, #4]
 801365a:	2a00      	cmp	r2, #0
 801365c:	dc03      	bgt.n	8013666 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801365e:	9a03      	ldr	r2, [sp, #12]
 8013660:	2a00      	cmp	r2, #0
 8013662:	f340 8116 	ble.w	8013892 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8013666:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013668:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801366c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013670:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013672:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8013676:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801367a:	2b00      	cmp	r3, #0
 801367c:	dd0e      	ble.n	801369c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801367e:	1406      	asrs	r6, r0, #16
 8013680:	d405      	bmi.n	801368e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013682:	4556      	cmp	r6, sl
 8013684:	da03      	bge.n	801368e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013686:	1416      	asrs	r6, r2, #16
 8013688:	d401      	bmi.n	801368e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801368a:	454e      	cmp	r6, r9
 801368c:	db07      	blt.n	801369e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801368e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013690:	3b01      	subs	r3, #1
 8013692:	3403      	adds	r4, #3
 8013694:	4430      	add	r0, r6
 8013696:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013698:	4432      	add	r2, r6
 801369a:	e7ee      	b.n	801367a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801369c:	d063      	beq.n	8013766 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801369e:	1e5e      	subs	r6, r3, #1
 80136a0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80136a2:	fb07 0706 	mla	r7, r7, r6, r0
 80136a6:	143f      	asrs	r7, r7, #16
 80136a8:	d454      	bmi.n	8013754 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80136aa:	4557      	cmp	r7, sl
 80136ac:	da52      	bge.n	8013754 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80136ae:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80136b0:	fb07 2606 	mla	r6, r7, r6, r2
 80136b4:	1436      	asrs	r6, r6, #16
 80136b6:	d44d      	bmi.n	8013754 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80136b8:	454e      	cmp	r6, r9
 80136ba:	da4b      	bge.n	8013754 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80136bc:	1ce6      	adds	r6, r4, #3
 80136be:	4699      	mov	r9, r3
 80136c0:	f1b9 0f00 	cmp.w	r9, #0
 80136c4:	f106 0603 	add.w	r6, r6, #3
 80136c8:	dd48      	ble.n	801375c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80136ca:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80136ce:	1417      	asrs	r7, r2, #16
 80136d0:	9902      	ldr	r1, [sp, #8]
 80136d2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80136d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80136da:	fb0b 1707 	mla	r7, fp, r7, r1
 80136de:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80136e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80136e4:	f817 700a 	ldrb.w	r7, [r7, sl]
 80136e8:	fb1b fb05 	smulbb	fp, fp, r5
 80136ec:	4408      	add	r0, r1
 80136ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80136f0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80136f4:	440a      	add	r2, r1
 80136f6:	eb0e 0a07 	add.w	sl, lr, r7
 80136fa:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80136fe:	fb07 b708 	mla	r7, r7, r8, fp
 8013702:	b2bf      	uxth	r7, r7
 8013704:	f107 0b01 	add.w	fp, r7, #1
 8013708:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801370c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8013710:	fb1b fb05 	smulbb	fp, fp, r5
 8013714:	123f      	asrs	r7, r7, #8
 8013716:	f806 7c06 	strb.w	r7, [r6, #-6]
 801371a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801371e:	fb07 b708 	mla	r7, r7, r8, fp
 8013722:	b2bf      	uxth	r7, r7
 8013724:	f107 0b01 	add.w	fp, r7, #1
 8013728:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801372c:	123f      	asrs	r7, r7, #8
 801372e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8013732:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8013736:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801373a:	fb1a fa05 	smulbb	sl, sl, r5
 801373e:	fb07 a708 	mla	r7, r7, r8, sl
 8013742:	b2bf      	uxth	r7, r7
 8013744:	f107 0a01 	add.w	sl, r7, #1
 8013748:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801374c:	123f      	asrs	r7, r7, #8
 801374e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8013752:	e7b5      	b.n	80136c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8013754:	2700      	movs	r7, #0
 8013756:	1bde      	subs	r6, r3, r7
 8013758:	2e00      	cmp	r6, #0
 801375a:	dc42      	bgt.n	80137e2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801375c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013760:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013764:	441c      	add	r4, r3
 8013766:	9b01      	ldr	r3, [sp, #4]
 8013768:	2b00      	cmp	r3, #0
 801376a:	f340 8092 	ble.w	8013892 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801376e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013774:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013778:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801377c:	eef0 6a62 	vmov.f32	s13, s5
 8013780:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013784:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013788:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801378c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8013790:	eef0 6a43 	vmov.f32	s13, s6
 8013794:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013798:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801379c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80137a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80137a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80137a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80137ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80137b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80137b4:	ee12 2a90 	vmov	r2, s5
 80137b8:	eef0 2a47 	vmov.f32	s5, s14
 80137bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80137c0:	ee13 2a10 	vmov	r2, s6
 80137c4:	9311      	str	r3, [sp, #68]	; 0x44
 80137c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137c8:	eeb0 3a67 	vmov.f32	s6, s15
 80137cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80137d0:	9312      	str	r3, [sp, #72]	; 0x48
 80137d2:	9b01      	ldr	r3, [sp, #4]
 80137d4:	9a03      	ldr	r2, [sp, #12]
 80137d6:	3b01      	subs	r3, #1
 80137d8:	9301      	str	r3, [sp, #4]
 80137da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137dc:	bf08      	it	eq
 80137de:	4613      	moveq	r3, r2
 80137e0:	e73a      	b.n	8013658 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80137e2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80137e6:	d44e      	bmi.n	8013886 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80137e8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80137ec:	4556      	cmp	r6, sl
 80137ee:	dd4a      	ble.n	8013886 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80137f0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80137f4:	d447      	bmi.n	8013886 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80137f6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80137fa:	4559      	cmp	r1, fp
 80137fc:	dd43      	ble.n	8013886 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80137fe:	fa0f f986 	sxth.w	r9, r6
 8013802:	9902      	ldr	r1, [sp, #8]
 8013804:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8013808:	fb0b 1909 	mla	r9, fp, r9, r1
 801380c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8013810:	f819 900a 	ldrb.w	r9, [r9, sl]
 8013814:	fb1b fb05 	smulbb	fp, fp, r5
 8013818:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801381c:	eb0e 0a09 	add.w	sl, lr, r9
 8013820:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8013824:	fb09 b908 	mla	r9, r9, r8, fp
 8013828:	fa1f f989 	uxth.w	r9, r9
 801382c:	f109 0b01 	add.w	fp, r9, #1
 8013830:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013834:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013838:	f804 9006 	strb.w	r9, [r4, r6]
 801383c:	4426      	add	r6, r4
 801383e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8013842:	f896 b001 	ldrb.w	fp, [r6, #1]
 8013846:	fb1b fb05 	smulbb	fp, fp, r5
 801384a:	fb09 b908 	mla	r9, r9, r8, fp
 801384e:	fa1f f989 	uxth.w	r9, r9
 8013852:	f109 0b01 	add.w	fp, r9, #1
 8013856:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801385a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801385e:	f886 9001 	strb.w	r9, [r6, #1]
 8013862:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8013866:	f896 a002 	ldrb.w	sl, [r6, #2]
 801386a:	fb1a fa05 	smulbb	sl, sl, r5
 801386e:	fb09 a908 	mla	r9, r9, r8, sl
 8013872:	fa1f f989 	uxth.w	r9, r9
 8013876:	f109 0a01 	add.w	sl, r9, #1
 801387a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801387e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013882:	f886 9002 	strb.w	r9, [r6, #2]
 8013886:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013888:	3701      	adds	r7, #1
 801388a:	4408      	add	r0, r1
 801388c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801388e:	440a      	add	r2, r1
 8013890:	e761      	b.n	8013756 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013892:	b005      	add	sp, #20
 8013894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013898 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801389c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801389e:	4693      	mov	fp, r2
 80138a0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80138a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80138a6:	6868      	ldr	r0, [r5, #4]
 80138a8:	6877      	ldr	r7, [r6, #4]
 80138aa:	9100      	str	r1, [sp, #0]
 80138ac:	3704      	adds	r7, #4
 80138ae:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80138b2:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 80138b6:	fb00 2404 	mla	r4, r0, r4, r2
 80138ba:	682a      	ldr	r2, [r5, #0]
 80138bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80138c0:	4414      	add	r4, r2
 80138c2:	6832      	ldr	r2, [r6, #0]
 80138c4:	9201      	str	r2, [sp, #4]
 80138c6:	9a00      	ldr	r2, [sp, #0]
 80138c8:	2a00      	cmp	r2, #0
 80138ca:	dc03      	bgt.n	80138d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80138cc:	f1bb 0f00 	cmp.w	fp, #0
 80138d0:	f340 80bc 	ble.w	8013a4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80138d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80138d6:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80138da:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80138de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138e0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80138e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	dd0c      	ble.n	8013906 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80138ec:	1405      	asrs	r5, r0, #16
 80138ee:	d405      	bmi.n	80138fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80138f0:	4555      	cmp	r5, sl
 80138f2:	da03      	bge.n	80138fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80138f4:	1415      	asrs	r5, r2, #16
 80138f6:	d401      	bmi.n	80138fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80138f8:	454d      	cmp	r5, r9
 80138fa:	db05      	blt.n	8013908 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80138fc:	4440      	add	r0, r8
 80138fe:	4472      	add	r2, lr
 8013900:	3b01      	subs	r3, #1
 8013902:	3403      	adds	r4, #3
 8013904:	e7f0      	b.n	80138e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8013906:	d03f      	beq.n	8013988 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8013908:	1e5d      	subs	r5, r3, #1
 801390a:	fb08 0c05 	mla	ip, r8, r5, r0
 801390e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8013912:	d42e      	bmi.n	8013972 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013914:	45d4      	cmp	ip, sl
 8013916:	da2c      	bge.n	8013972 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013918:	fb0e 2505 	mla	r5, lr, r5, r2
 801391c:	142d      	asrs	r5, r5, #16
 801391e:	d428      	bmi.n	8013972 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013920:	454d      	cmp	r5, r9
 8013922:	da26      	bge.n	8013972 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013924:	1ce5      	adds	r5, r4, #3
 8013926:	469c      	mov	ip, r3
 8013928:	f1bc 0f00 	cmp.w	ip, #0
 801392c:	f105 0503 	add.w	r5, r5, #3
 8013930:	dd25      	ble.n	801397e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8013932:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013936:	ea4f 4922 	mov.w	r9, r2, asr #16
 801393a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801393e:	4472      	add	r2, lr
 8013940:	468a      	mov	sl, r1
 8013942:	9901      	ldr	r1, [sp, #4]
 8013944:	fb0a 1909 	mla	r9, sl, r9, r1
 8013948:	1401      	asrs	r1, r0, #16
 801394a:	4440      	add	r0, r8
 801394c:	f819 9001 	ldrb.w	r9, [r9, r1]
 8013950:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8013954:	eb07 0a09 	add.w	sl, r7, r9
 8013958:	f817 9009 	ldrb.w	r9, [r7, r9]
 801395c:	f805 9c06 	strb.w	r9, [r5, #-6]
 8013960:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8013964:	f805 9c05 	strb.w	r9, [r5, #-5]
 8013968:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801396c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8013970:	e7da      	b.n	8013928 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8013972:	2500      	movs	r5, #0
 8013974:	eba3 0c05 	sub.w	ip, r3, r5
 8013978:	f1bc 0f00 	cmp.w	ip, #0
 801397c:	dc3b      	bgt.n	80139f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801397e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013982:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013986:	441c      	add	r4, r3
 8013988:	9b00      	ldr	r3, [sp, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	dd5e      	ble.n	8013a4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801398e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013994:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013998:	eeb0 6a62 	vmov.f32	s12, s5
 801399c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80139a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80139a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139a8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80139ac:	eeb0 6a43 	vmov.f32	s12, s6
 80139b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139b4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80139b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80139bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80139c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80139c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80139c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80139cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80139d0:	ee12 2a90 	vmov	r2, s5
 80139d4:	eef0 2a47 	vmov.f32	s5, s14
 80139d8:	fb92 f8f3 	sdiv	r8, r2, r3
 80139dc:	ee13 2a10 	vmov	r2, s6
 80139e0:	eeb0 3a67 	vmov.f32	s6, s15
 80139e4:	fb92 fef3 	sdiv	lr, r2, r3
 80139e8:	9b00      	ldr	r3, [sp, #0]
 80139ea:	3b01      	subs	r3, #1
 80139ec:	9300      	str	r3, [sp, #0]
 80139ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139f0:	bf08      	it	eq
 80139f2:	465b      	moveq	r3, fp
 80139f4:	e767      	b.n	80138c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80139f6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80139fa:	d423      	bmi.n	8013a44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80139fc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8013a00:	45cc      	cmp	ip, r9
 8013a02:	dd1f      	ble.n	8013a44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8013a04:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013a08:	d41c      	bmi.n	8013a44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8013a0a:	68f1      	ldr	r1, [r6, #12]
 8013a0c:	4551      	cmp	r1, sl
 8013a0e:	dd19      	ble.n	8013a44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8013a10:	fa0f fc8c 	sxth.w	ip, ip
 8013a14:	9901      	ldr	r1, [sp, #4]
 8013a16:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8013a1a:	f81c c009 	ldrb.w	ip, [ip, r9]
 8013a1e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013a22:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8013a26:	eb07 090c 	add.w	r9, r7, ip
 8013a2a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8013a2e:	f804 a00c 	strb.w	sl, [r4, ip]
 8013a32:	44a4      	add	ip, r4
 8013a34:	f899 a001 	ldrb.w	sl, [r9, #1]
 8013a38:	f88c a001 	strb.w	sl, [ip, #1]
 8013a3c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8013a40:	f88c 9002 	strb.w	r9, [ip, #2]
 8013a44:	4440      	add	r0, r8
 8013a46:	4472      	add	r2, lr
 8013a48:	3501      	adds	r5, #1
 8013a4a:	e793      	b.n	8013974 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8013a4c:	b003      	add	sp, #12
 8013a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a52 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a56:	b085      	sub	sp, #20
 8013a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013a5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013a5e:	9202      	str	r2, [sp, #8]
 8013a60:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8013a64:	6860      	ldr	r0, [r4, #4]
 8013a66:	9203      	str	r2, [sp, #12]
 8013a68:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013a6c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8013a70:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8013a74:	fb00 2505 	mla	r5, r0, r5, r2
 8013a78:	6822      	ldr	r2, [r4, #0]
 8013a7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a7e:	4415      	add	r5, r2
 8013a80:	f8dc 2000 	ldr.w	r2, [ip]
 8013a84:	9200      	str	r2, [sp, #0]
 8013a86:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013a8a:	3204      	adds	r2, #4
 8013a8c:	9201      	str	r2, [sp, #4]
 8013a8e:	2900      	cmp	r1, #0
 8013a90:	dc03      	bgt.n	8013a9a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8013a92:	9a02      	ldr	r2, [sp, #8]
 8013a94:	2a00      	cmp	r2, #0
 8013a96:	f340 8127 	ble.w	8013ce8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8013a9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a9c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013aa0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013aa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013aa6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013aaa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	dd0d      	ble.n	8013ace <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013ab2:	1422      	asrs	r2, r4, #16
 8013ab4:	d405      	bmi.n	8013ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013ab6:	4542      	cmp	r2, r8
 8013ab8:	da03      	bge.n	8013ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013aba:	1402      	asrs	r2, r0, #16
 8013abc:	d401      	bmi.n	8013ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013abe:	42ba      	cmp	r2, r7
 8013ac0:	db06      	blt.n	8013ad0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013ac2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ac4:	4474      	add	r4, lr
 8013ac6:	3b01      	subs	r3, #1
 8013ac8:	3503      	adds	r5, #3
 8013aca:	4410      	add	r0, r2
 8013acc:	e7ef      	b.n	8013aae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013ace:	d075      	beq.n	8013bbc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8013ad0:	1e5a      	subs	r2, r3, #1
 8013ad2:	fb0e 4602 	mla	r6, lr, r2, r4
 8013ad6:	1436      	asrs	r6, r6, #16
 8013ad8:	d465      	bmi.n	8013ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8013ada:	4546      	cmp	r6, r8
 8013adc:	da63      	bge.n	8013ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8013ade:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013ae0:	fb06 0202 	mla	r2, r6, r2, r0
 8013ae4:	1412      	asrs	r2, r2, #16
 8013ae6:	d45e      	bmi.n	8013ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8013ae8:	42ba      	cmp	r2, r7
 8013aea:	da5c      	bge.n	8013ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8013aec:	1cef      	adds	r7, r5, #3
 8013aee:	4699      	mov	r9, r3
 8013af0:	f1b9 0f00 	cmp.w	r9, #0
 8013af4:	dd5d      	ble.n	8013bb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8013af6:	1402      	asrs	r2, r0, #16
 8013af8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013afc:	1426      	asrs	r6, r4, #16
 8013afe:	4692      	mov	sl, r2
 8013b00:	9a00      	ldr	r2, [sp, #0]
 8013b02:	fb08 220a 	mla	r2, r8, sl, r2
 8013b06:	5d92      	ldrb	r2, [r2, r6]
 8013b08:	9e01      	ldr	r6, [sp, #4]
 8013b0a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8013b0e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8013b12:	d041      	beq.n	8013b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013b14:	9a03      	ldr	r2, [sp, #12]
 8013b16:	fa5f fb86 	uxtb.w	fp, r6
 8013b1a:	fb02 f808 	mul.w	r8, r2, r8
 8013b1e:	f108 0201 	add.w	r2, r8, #1
 8013b22:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8013b26:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8013b2a:	1212      	asrs	r2, r2, #8
 8013b2c:	fa1f fa82 	uxth.w	sl, r2
 8013b30:	43d2      	mvns	r2, r2
 8013b32:	fb1b fb0a 	smulbb	fp, fp, sl
 8013b36:	b2d2      	uxtb	r2, r2
 8013b38:	fb08 b802 	mla	r8, r8, r2, fp
 8013b3c:	fa1f f888 	uxth.w	r8, r8
 8013b40:	f108 0b01 	add.w	fp, r8, #1
 8013b44:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013b48:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013b4c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013b50:	fb1b fb0a 	smulbb	fp, fp, sl
 8013b54:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013b58:	fb16 fa0a 	smulbb	sl, r6, sl
 8013b5c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8013b60:	f807 8c03 	strb.w	r8, [r7, #-3]
 8013b64:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8013b68:	fb06 aa02 	mla	sl, r6, r2, sl
 8013b6c:	fb08 b802 	mla	r8, r8, r2, fp
 8013b70:	fa1f fa8a 	uxth.w	sl, sl
 8013b74:	fa1f f888 	uxth.w	r8, r8
 8013b78:	f10a 0601 	add.w	r6, sl, #1
 8013b7c:	f108 0b01 	add.w	fp, r8, #1
 8013b80:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8013b84:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013b88:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013b8c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013b90:	f807 ac01 	strb.w	sl, [r7, #-1]
 8013b94:	f807 8c02 	strb.w	r8, [r7, #-2]
 8013b98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b9a:	4474      	add	r4, lr
 8013b9c:	3703      	adds	r7, #3
 8013b9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013ba2:	4410      	add	r0, r2
 8013ba4:	e7a4      	b.n	8013af0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013ba6:	f04f 0800 	mov.w	r8, #0
 8013baa:	eba3 0208 	sub.w	r2, r3, r8
 8013bae:	2a00      	cmp	r2, #0
 8013bb0:	dc3b      	bgt.n	8013c2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8013bb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013bb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013bba:	441d      	add	r5, r3
 8013bbc:	2900      	cmp	r1, #0
 8013bbe:	f340 8093 	ble.w	8013ce8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8013bc2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013bcc:	3901      	subs	r1, #1
 8013bce:	eeb0 6a62 	vmov.f32	s12, s5
 8013bd2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013bd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013bda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013bde:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013be2:	eeb0 6a43 	vmov.f32	s12, s6
 8013be6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013bea:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013bee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013bf2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013bf6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013bfa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013bfe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013c02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013c06:	ee12 2a90 	vmov	r2, s5
 8013c0a:	eef0 2a47 	vmov.f32	s5, s14
 8013c0e:	fb92 fef3 	sdiv	lr, r2, r3
 8013c12:	ee13 2a10 	vmov	r2, s6
 8013c16:	eeb0 3a67 	vmov.f32	s6, s15
 8013c1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c1e:	9a02      	ldr	r2, [sp, #8]
 8013c20:	9312      	str	r3, [sp, #72]	; 0x48
 8013c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c24:	bf08      	it	eq
 8013c26:	4613      	moveq	r3, r2
 8013c28:	e731      	b.n	8013a8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013c2a:	1427      	asrs	r7, r4, #16
 8013c2c:	d456      	bmi.n	8013cdc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013c2e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013c32:	42be      	cmp	r6, r7
 8013c34:	dd52      	ble.n	8013cdc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013c36:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013c3a:	d44f      	bmi.n	8013cdc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013c3c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013c40:	454a      	cmp	r2, r9
 8013c42:	dd4b      	ble.n	8013cdc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013c44:	9a00      	ldr	r2, [sp, #0]
 8013c46:	b236      	sxth	r6, r6
 8013c48:	fb09 2606 	mla	r6, r9, r6, r2
 8013c4c:	5df2      	ldrb	r2, [r6, r7]
 8013c4e:	9e01      	ldr	r6, [sp, #4]
 8013c50:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8013c54:	0e3a      	lsrs	r2, r7, #24
 8013c56:	d041      	beq.n	8013cdc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013c58:	9e03      	ldr	r6, [sp, #12]
 8013c5a:	fa5f fb87 	uxtb.w	fp, r7
 8013c5e:	4372      	muls	r2, r6
 8013c60:	1c56      	adds	r6, r2, #1
 8013c62:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8013c66:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8013c6a:	1212      	asrs	r2, r2, #8
 8013c6c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8013c70:	fa1f fa82 	uxth.w	sl, r2
 8013c74:	43d2      	mvns	r2, r2
 8013c76:	fb1b fb0a 	smulbb	fp, fp, sl
 8013c7a:	b2d2      	uxtb	r2, r2
 8013c7c:	fb09 b902 	mla	r9, r9, r2, fp
 8013c80:	fa1f f989 	uxth.w	r9, r9
 8013c84:	f109 0b01 	add.w	fp, r9, #1
 8013c88:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013c8c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013c90:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8013c94:	fb1b fb0a 	smulbb	fp, fp, sl
 8013c98:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013c9c:	fb17 fa0a 	smulbb	sl, r7, sl
 8013ca0:	f805 9006 	strb.w	r9, [r5, r6]
 8013ca4:	442e      	add	r6, r5
 8013ca6:	78b7      	ldrb	r7, [r6, #2]
 8013ca8:	f896 9001 	ldrb.w	r9, [r6, #1]
 8013cac:	fb07 aa02 	mla	sl, r7, r2, sl
 8013cb0:	fb09 b902 	mla	r9, r9, r2, fp
 8013cb4:	fa1f fa8a 	uxth.w	sl, sl
 8013cb8:	fa1f f989 	uxth.w	r9, r9
 8013cbc:	f10a 0701 	add.w	r7, sl, #1
 8013cc0:	f109 0b01 	add.w	fp, r9, #1
 8013cc4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013cc8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013ccc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013cd0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013cd4:	f886 a002 	strb.w	sl, [r6, #2]
 8013cd8:	f886 9001 	strb.w	r9, [r6, #1]
 8013cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013cde:	4474      	add	r4, lr
 8013ce0:	f108 0801 	add.w	r8, r8, #1
 8013ce4:	4410      	add	r0, r2
 8013ce6:	e760      	b.n	8013baa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8013ce8:	b005      	add	sp, #20
 8013cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf2:	b085      	sub	sp, #20
 8013cf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013cf8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013cfa:	9203      	str	r2, [sp, #12]
 8013cfc:	6868      	ldr	r0, [r5, #4]
 8013cfe:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013d02:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8013d06:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013d0a:	fb00 2404 	mla	r4, r0, r4, r2
 8013d0e:	682a      	ldr	r2, [r5, #0]
 8013d10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013d14:	4414      	add	r4, r2
 8013d16:	f8dc 2000 	ldr.w	r2, [ip]
 8013d1a:	9201      	str	r2, [sp, #4]
 8013d1c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013d20:	3204      	adds	r2, #4
 8013d22:	9202      	str	r2, [sp, #8]
 8013d24:	2900      	cmp	r1, #0
 8013d26:	dc03      	bgt.n	8013d30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8013d28:	9a03      	ldr	r2, [sp, #12]
 8013d2a:	2a00      	cmp	r2, #0
 8013d2c:	f340 8137 	ble.w	8013f9e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d32:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013d36:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013d3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d3c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013d40:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	dd0d      	ble.n	8013d64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8013d48:	1405      	asrs	r5, r0, #16
 8013d4a:	d405      	bmi.n	8013d58 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013d4c:	4545      	cmp	r5, r8
 8013d4e:	da03      	bge.n	8013d58 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013d50:	1415      	asrs	r5, r2, #16
 8013d52:	d401      	bmi.n	8013d58 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013d54:	42bd      	cmp	r5, r7
 8013d56:	db06      	blt.n	8013d66 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013d58:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013d5a:	4470      	add	r0, lr
 8013d5c:	3b01      	subs	r3, #1
 8013d5e:	3403      	adds	r4, #3
 8013d60:	442a      	add	r2, r5
 8013d62:	e7ef      	b.n	8013d44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8013d64:	d070      	beq.n	8013e48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8013d66:	1e5d      	subs	r5, r3, #1
 8013d68:	fb0e 0605 	mla	r6, lr, r5, r0
 8013d6c:	1436      	asrs	r6, r6, #16
 8013d6e:	d462      	bmi.n	8013e36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013d70:	4546      	cmp	r6, r8
 8013d72:	da60      	bge.n	8013e36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013d74:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013d76:	fb06 2505 	mla	r5, r6, r5, r2
 8013d7a:	142d      	asrs	r5, r5, #16
 8013d7c:	d45b      	bmi.n	8013e36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013d7e:	42bd      	cmp	r5, r7
 8013d80:	da59      	bge.n	8013e36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013d82:	1ce5      	adds	r5, r4, #3
 8013d84:	469a      	mov	sl, r3
 8013d86:	f1ba 0f00 	cmp.w	sl, #0
 8013d8a:	dd58      	ble.n	8013e3e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8013d8c:	1416      	asrs	r6, r2, #16
 8013d8e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013d92:	1407      	asrs	r7, r0, #16
 8013d94:	46b1      	mov	r9, r6
 8013d96:	9e01      	ldr	r6, [sp, #4]
 8013d98:	fb08 6609 	mla	r6, r8, r9, r6
 8013d9c:	5df6      	ldrb	r6, [r6, r7]
 8013d9e:	9f02      	ldr	r7, [sp, #8]
 8013da0:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8013da4:	0e37      	lsrs	r7, r6, #24
 8013da6:	2fff      	cmp	r7, #255	; 0xff
 8013da8:	f000 80f0 	beq.w	8013f8c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8013dac:	fa5f f887 	uxtb.w	r8, r7
 8013db0:	b3d7      	cbz	r7, 8013e28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013db2:	fa1f f788 	uxth.w	r7, r8
 8013db6:	ea6f 0808 	mvn.w	r8, r8
 8013dba:	fa5f fb86 	uxtb.w	fp, r6
 8013dbe:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8013dc2:	fa5f f888 	uxtb.w	r8, r8
 8013dc6:	fb1b fb07 	smulbb	fp, fp, r7
 8013dca:	fb09 b908 	mla	r9, r9, r8, fp
 8013dce:	fa1f f989 	uxth.w	r9, r9
 8013dd2:	f109 0b01 	add.w	fp, r9, #1
 8013dd6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013dda:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8013dde:	fb1b fb08 	smulbb	fp, fp, r8
 8013de2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013de6:	f805 9c03 	strb.w	r9, [r5, #-3]
 8013dea:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8013dee:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013df2:	fb09 b907 	mla	r9, r9, r7, fp
 8013df6:	fa1f f989 	uxth.w	r9, r9
 8013dfa:	f109 0b01 	add.w	fp, r9, #1
 8013dfe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013e02:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013e06:	f805 9c02 	strb.w	r9, [r5, #-2]
 8013e0a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8013e0e:	fb19 f808 	smulbb	r8, r9, r8
 8013e12:	fb06 8607 	mla	r6, r6, r7, r8
 8013e16:	b2b6      	uxth	r6, r6
 8013e18:	f106 0801 	add.w	r8, r6, #1
 8013e1c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8013e20:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013e24:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013e28:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013e2a:	4470      	add	r0, lr
 8013e2c:	3503      	adds	r5, #3
 8013e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e32:	4432      	add	r2, r6
 8013e34:	e7a7      	b.n	8013d86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8013e36:	2600      	movs	r6, #0
 8013e38:	1b9d      	subs	r5, r3, r6
 8013e3a:	2d00      	cmp	r5, #0
 8013e3c:	dc3b      	bgt.n	8013eb6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013e3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013e42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013e46:	441c      	add	r4, r3
 8013e48:	2900      	cmp	r1, #0
 8013e4a:	f340 80a8 	ble.w	8013f9e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013e4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013e58:	3901      	subs	r1, #1
 8013e5a:	eeb0 6a62 	vmov.f32	s12, s5
 8013e5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013e62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013e66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013e6a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013e6e:	eeb0 6a43 	vmov.f32	s12, s6
 8013e72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013e76:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013e7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013e7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013e82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013e86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013e8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013e8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013e92:	ee12 2a90 	vmov	r2, s5
 8013e96:	eef0 2a47 	vmov.f32	s5, s14
 8013e9a:	fb92 fef3 	sdiv	lr, r2, r3
 8013e9e:	ee13 2a10 	vmov	r2, s6
 8013ea2:	eeb0 3a67 	vmov.f32	s6, s15
 8013ea6:	fb92 f3f3 	sdiv	r3, r2, r3
 8013eaa:	9a03      	ldr	r2, [sp, #12]
 8013eac:	9312      	str	r3, [sp, #72]	; 0x48
 8013eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013eb0:	bf08      	it	eq
 8013eb2:	4613      	moveq	r3, r2
 8013eb4:	e736      	b.n	8013d24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8013eb6:	ea5f 4820 	movs.w	r8, r0, asr #16
 8013eba:	d457      	bmi.n	8013f6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013ebc:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8013ec0:	4547      	cmp	r7, r8
 8013ec2:	dd53      	ble.n	8013f6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013ec4:	ea5f 4922 	movs.w	r9, r2, asr #16
 8013ec8:	d450      	bmi.n	8013f6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013eca:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8013ece:	454d      	cmp	r5, r9
 8013ed0:	dd4c      	ble.n	8013f6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013ed2:	9d01      	ldr	r5, [sp, #4]
 8013ed4:	b23f      	sxth	r7, r7
 8013ed6:	fb09 5707 	mla	r7, r9, r7, r5
 8013eda:	f817 5008 	ldrb.w	r5, [r7, r8]
 8013ede:	9f02      	ldr	r7, [sp, #8]
 8013ee0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8013ee4:	0e2f      	lsrs	r7, r5, #24
 8013ee6:	2fff      	cmp	r7, #255	; 0xff
 8013ee8:	d045      	beq.n	8013f76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8013eea:	fa5f f987 	uxtb.w	r9, r7
 8013eee:	b3ef      	cbz	r7, 8013f6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013ef0:	fa1f f889 	uxth.w	r8, r9
 8013ef4:	ea6f 0909 	mvn.w	r9, r9
 8013ef8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8013efc:	fa5f fb85 	uxtb.w	fp, r5
 8013f00:	f814 a007 	ldrb.w	sl, [r4, r7]
 8013f04:	fa5f f989 	uxtb.w	r9, r9
 8013f08:	fb1b fb08 	smulbb	fp, fp, r8
 8013f0c:	fb0a ba09 	mla	sl, sl, r9, fp
 8013f10:	fa1f fa8a 	uxth.w	sl, sl
 8013f14:	f10a 0b01 	add.w	fp, sl, #1
 8013f18:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8013f1c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013f20:	f804 a007 	strb.w	sl, [r4, r7]
 8013f24:	4427      	add	r7, r4
 8013f26:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013f2a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8013f2e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8013f32:	fb1b fb09 	smulbb	fp, fp, r9
 8013f36:	fb0a ba08 	mla	sl, sl, r8, fp
 8013f3a:	fa1f fa8a 	uxth.w	sl, sl
 8013f3e:	f10a 0b01 	add.w	fp, sl, #1
 8013f42:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8013f46:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013f4a:	f887 a001 	strb.w	sl, [r7, #1]
 8013f4e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8013f52:	fb1a f909 	smulbb	r9, sl, r9
 8013f56:	fb05 9508 	mla	r5, r5, r8, r9
 8013f5a:	b2ad      	uxth	r5, r5
 8013f5c:	f105 0901 	add.w	r9, r5, #1
 8013f60:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8013f64:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013f68:	f887 9002 	strb.w	r9, [r7, #2]
 8013f6c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013f6e:	4470      	add	r0, lr
 8013f70:	3601      	adds	r6, #1
 8013f72:	442a      	add	r2, r5
 8013f74:	e760      	b.n	8013e38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8013f76:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8013f7a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8013f7e:	55e5      	strb	r5, [r4, r7]
 8013f80:	4427      	add	r7, r4
 8013f82:	0c2d      	lsrs	r5, r5, #16
 8013f84:	f887 8001 	strb.w	r8, [r7, #1]
 8013f88:	70bd      	strb	r5, [r7, #2]
 8013f8a:	e7ef      	b.n	8013f6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013f8c:	0a37      	lsrs	r7, r6, #8
 8013f8e:	f805 6c03 	strb.w	r6, [r5, #-3]
 8013f92:	0c36      	lsrs	r6, r6, #16
 8013f94:	f805 7c02 	strb.w	r7, [r5, #-2]
 8013f98:	f805 6c01 	strb.w	r6, [r5, #-1]
 8013f9c:	e744      	b.n	8013e28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013f9e:	b005      	add	sp, #20
 8013fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013fa4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013faa:	9201      	str	r2, [sp, #4]
 8013fac:	6870      	ldr	r0, [r6, #4]
 8013fae:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8013fb2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8013fb6:	fa1f fe85 	uxth.w	lr, r5
 8013fba:	43ed      	mvns	r5, r5
 8013fbc:	f8dc 8000 	ldr.w	r8, [ip]
 8013fc0:	b2ed      	uxtb	r5, r5
 8013fc2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8013fc6:	fb00 2404 	mla	r4, r0, r4, r2
 8013fca:	6832      	ldr	r2, [r6, #0]
 8013fcc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013fd0:	4414      	add	r4, r2
 8013fd2:	2900      	cmp	r1, #0
 8013fd4:	dc03      	bgt.n	8013fde <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8013fd6:	9a01      	ldr	r2, [sp, #4]
 8013fd8:	2a00      	cmp	r2, #0
 8013fda:	f340 810d 	ble.w	80141f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8013fde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013fe0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8013fe4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013fea:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8013fee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	dd0e      	ble.n	8014014 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013ff6:	1406      	asrs	r6, r0, #16
 8013ff8:	d405      	bmi.n	8014006 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8013ffa:	4556      	cmp	r6, sl
 8013ffc:	da03      	bge.n	8014006 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8013ffe:	1416      	asrs	r6, r2, #16
 8014000:	d401      	bmi.n	8014006 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014002:	454e      	cmp	r6, r9
 8014004:	db07      	blt.n	8014016 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014006:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014008:	3b01      	subs	r3, #1
 801400a:	3403      	adds	r4, #3
 801400c:	4430      	add	r0, r6
 801400e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014010:	4432      	add	r2, r6
 8014012:	e7ee      	b.n	8013ff2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8014014:	d060      	beq.n	80140d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8014016:	1e5e      	subs	r6, r3, #1
 8014018:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801401a:	fb07 0706 	mla	r7, r7, r6, r0
 801401e:	143f      	asrs	r7, r7, #16
 8014020:	d451      	bmi.n	80140c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014022:	4557      	cmp	r7, sl
 8014024:	da4f      	bge.n	80140c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014026:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014028:	fb07 2606 	mla	r6, r7, r6, r2
 801402c:	1436      	asrs	r6, r6, #16
 801402e:	d44a      	bmi.n	80140c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014030:	454e      	cmp	r6, r9
 8014032:	da48      	bge.n	80140c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014034:	1ce6      	adds	r6, r4, #3
 8014036:	4699      	mov	r9, r3
 8014038:	f1b9 0f00 	cmp.w	r9, #0
 801403c:	f106 0603 	add.w	r6, r6, #3
 8014040:	dd45      	ble.n	80140ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8014042:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8014046:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801404a:	1417      	asrs	r7, r2, #16
 801404c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014050:	fb0b a707 	mla	r7, fp, r7, sl
 8014054:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8014058:	fb1b fb05 	smulbb	fp, fp, r5
 801405c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014060:	eb08 0a07 	add.w	sl, r8, r7
 8014064:	f818 7007 	ldrb.w	r7, [r8, r7]
 8014068:	fb07 b70e 	mla	r7, r7, lr, fp
 801406c:	b2bf      	uxth	r7, r7
 801406e:	f107 0b01 	add.w	fp, r7, #1
 8014072:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014076:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801407a:	fb1b fb05 	smulbb	fp, fp, r5
 801407e:	123f      	asrs	r7, r7, #8
 8014080:	f806 7c06 	strb.w	r7, [r6, #-6]
 8014084:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8014088:	fb07 b70e 	mla	r7, r7, lr, fp
 801408c:	b2bf      	uxth	r7, r7
 801408e:	f107 0b01 	add.w	fp, r7, #1
 8014092:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014096:	123f      	asrs	r7, r7, #8
 8014098:	f806 7c05 	strb.w	r7, [r6, #-5]
 801409c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80140a0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80140a4:	fb1a fa05 	smulbb	sl, sl, r5
 80140a8:	fb07 a70e 	mla	r7, r7, lr, sl
 80140ac:	b2bf      	uxth	r7, r7
 80140ae:	f107 0a01 	add.w	sl, r7, #1
 80140b2:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80140b6:	123f      	asrs	r7, r7, #8
 80140b8:	f806 7c04 	strb.w	r7, [r6, #-4]
 80140bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80140be:	4438      	add	r0, r7
 80140c0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80140c2:	443a      	add	r2, r7
 80140c4:	e7b8      	b.n	8014038 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80140c6:	2700      	movs	r7, #0
 80140c8:	1bde      	subs	r6, r3, r7
 80140ca:	2e00      	cmp	r6, #0
 80140cc:	dc3f      	bgt.n	801414e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80140ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80140d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80140d6:	441c      	add	r4, r3
 80140d8:	2900      	cmp	r1, #0
 80140da:	f340 808d 	ble.w	80141f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80140de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80140e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80140e8:	3901      	subs	r1, #1
 80140ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80140ee:	eef0 6a62 	vmov.f32	s13, s5
 80140f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80140f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80140fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80140fe:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014102:	eef0 6a43 	vmov.f32	s13, s6
 8014106:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801410a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801410e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014112:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014116:	ee77 2a62 	vsub.f32	s5, s14, s5
 801411a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801411e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014122:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014126:	ee12 2a90 	vmov	r2, s5
 801412a:	eef0 2a47 	vmov.f32	s5, s14
 801412e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014132:	ee13 2a10 	vmov	r2, s6
 8014136:	930f      	str	r3, [sp, #60]	; 0x3c
 8014138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801413a:	eeb0 3a67 	vmov.f32	s6, s15
 801413e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014142:	9a01      	ldr	r2, [sp, #4]
 8014144:	9310      	str	r3, [sp, #64]	; 0x40
 8014146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014148:	bf08      	it	eq
 801414a:	4613      	moveq	r3, r2
 801414c:	e741      	b.n	8013fd2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801414e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014152:	d44b      	bmi.n	80141ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014154:	f8dc b008 	ldr.w	fp, [ip, #8]
 8014158:	45cb      	cmp	fp, r9
 801415a:	dd47      	ble.n	80141ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801415c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014160:	d444      	bmi.n	80141ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014162:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8014166:	4556      	cmp	r6, sl
 8014168:	dd40      	ble.n	80141ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801416a:	fa0f f68b 	sxth.w	r6, fp
 801416e:	fb0a 9906 	mla	r9, sl, r6, r9
 8014172:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8014176:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801417a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801417e:	fb1b fb05 	smulbb	fp, fp, r5
 8014182:	eb08 0a09 	add.w	sl, r8, r9
 8014186:	f818 9009 	ldrb.w	r9, [r8, r9]
 801418a:	fb09 b90e 	mla	r9, r9, lr, fp
 801418e:	fa1f f989 	uxth.w	r9, r9
 8014192:	f109 0b01 	add.w	fp, r9, #1
 8014196:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801419a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801419e:	f804 9006 	strb.w	r9, [r4, r6]
 80141a2:	4426      	add	r6, r4
 80141a4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80141a8:	f896 b001 	ldrb.w	fp, [r6, #1]
 80141ac:	fb1b fb05 	smulbb	fp, fp, r5
 80141b0:	fb09 b90e 	mla	r9, r9, lr, fp
 80141b4:	fa1f f989 	uxth.w	r9, r9
 80141b8:	f109 0b01 	add.w	fp, r9, #1
 80141bc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80141c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80141c4:	f886 9001 	strb.w	r9, [r6, #1]
 80141c8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80141cc:	f896 a002 	ldrb.w	sl, [r6, #2]
 80141d0:	fb1a fa05 	smulbb	sl, sl, r5
 80141d4:	fb09 a90e 	mla	r9, r9, lr, sl
 80141d8:	fa1f f989 	uxth.w	r9, r9
 80141dc:	f109 0a01 	add.w	sl, r9, #1
 80141e0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80141e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80141e8:	f886 9002 	strb.w	r9, [r6, #2]
 80141ec:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80141ee:	3701      	adds	r7, #1
 80141f0:	4430      	add	r0, r6
 80141f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80141f4:	4432      	add	r2, r6
 80141f6:	e767      	b.n	80140c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80141f8:	b003      	add	sp, #12
 80141fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80141fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014202:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014208:	9201      	str	r2, [sp, #4]
 801420a:	6868      	ldr	r0, [r5, #4]
 801420c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801420e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8014212:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8014216:	fb00 2404 	mla	r4, r0, r4, r2
 801421a:	682a      	ldr	r2, [r5, #0]
 801421c:	f8d7 8000 	ldr.w	r8, [r7]
 8014220:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014224:	4414      	add	r4, r2
 8014226:	2900      	cmp	r1, #0
 8014228:	dc03      	bgt.n	8014232 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801422a:	9a01      	ldr	r2, [sp, #4]
 801422c:	2a00      	cmp	r2, #0
 801422e:	f340 80af 	ble.w	8014390 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8014232:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014234:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8014238:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801423c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801423e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8014242:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014246:	2b00      	cmp	r3, #0
 8014248:	dd0c      	ble.n	8014264 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801424a:	1405      	asrs	r5, r0, #16
 801424c:	d405      	bmi.n	801425a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801424e:	4555      	cmp	r5, sl
 8014250:	da03      	bge.n	801425a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014252:	1415      	asrs	r5, r2, #16
 8014254:	d401      	bmi.n	801425a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014256:	454d      	cmp	r5, r9
 8014258:	db05      	blt.n	8014266 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801425a:	4470      	add	r0, lr
 801425c:	4462      	add	r2, ip
 801425e:	3b01      	subs	r3, #1
 8014260:	3403      	adds	r4, #3
 8014262:	e7f0      	b.n	8014246 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014264:	d038      	beq.n	80142d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014266:	1e5d      	subs	r5, r3, #1
 8014268:	fb0e 0605 	mla	r6, lr, r5, r0
 801426c:	1436      	asrs	r6, r6, #16
 801426e:	d42a      	bmi.n	80142c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014270:	4556      	cmp	r6, sl
 8014272:	da28      	bge.n	80142c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014274:	fb0c 2505 	mla	r5, ip, r5, r2
 8014278:	142d      	asrs	r5, r5, #16
 801427a:	d424      	bmi.n	80142c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801427c:	454d      	cmp	r5, r9
 801427e:	da22      	bge.n	80142c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014280:	1ce6      	adds	r6, r4, #3
 8014282:	4699      	mov	r9, r3
 8014284:	f1b9 0f00 	cmp.w	r9, #0
 8014288:	f106 0603 	add.w	r6, r6, #3
 801428c:	dd1f      	ble.n	80142ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801428e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8014292:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014296:	1415      	asrs	r5, r2, #16
 8014298:	4470      	add	r0, lr
 801429a:	4462      	add	r2, ip
 801429c:	f109 39ff 	add.w	r9, r9, #4294967295
 80142a0:	fb0b a505 	mla	r5, fp, r5, sl
 80142a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142a8:	eb08 0a05 	add.w	sl, r8, r5
 80142ac:	f818 5005 	ldrb.w	r5, [r8, r5]
 80142b0:	f806 5c06 	strb.w	r5, [r6, #-6]
 80142b4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80142b8:	f806 5c05 	strb.w	r5, [r6, #-5]
 80142bc:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80142c0:	f806 5c04 	strb.w	r5, [r6, #-4]
 80142c4:	e7de      	b.n	8014284 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80142c6:	2600      	movs	r6, #0
 80142c8:	1b9d      	subs	r5, r3, r6
 80142ca:	2d00      	cmp	r5, #0
 80142cc:	dc38      	bgt.n	8014340 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80142ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80142d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80142d6:	441c      	add	r4, r3
 80142d8:	2900      	cmp	r1, #0
 80142da:	dd59      	ble.n	8014390 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80142dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80142e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80142e6:	3901      	subs	r1, #1
 80142e8:	eeb0 6a62 	vmov.f32	s12, s5
 80142ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80142f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80142f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80142f8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80142fc:	eeb0 6a43 	vmov.f32	s12, s6
 8014300:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014304:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014308:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801430c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014310:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014314:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014318:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801431c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014320:	ee12 2a90 	vmov	r2, s5
 8014324:	eef0 2a47 	vmov.f32	s5, s14
 8014328:	fb92 fef3 	sdiv	lr, r2, r3
 801432c:	ee13 2a10 	vmov	r2, s6
 8014330:	eeb0 3a67 	vmov.f32	s6, s15
 8014334:	fb92 fcf3 	sdiv	ip, r2, r3
 8014338:	9a01      	ldr	r2, [sp, #4]
 801433a:	bf08      	it	eq
 801433c:	4613      	moveq	r3, r2
 801433e:	e772      	b.n	8014226 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8014340:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014344:	d420      	bmi.n	8014388 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014346:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801434a:	45cb      	cmp	fp, r9
 801434c:	dd1c      	ble.n	8014388 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801434e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014352:	d419      	bmi.n	8014388 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014354:	68fd      	ldr	r5, [r7, #12]
 8014356:	4555      	cmp	r5, sl
 8014358:	dd16      	ble.n	8014388 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801435a:	fa0f f58b 	sxth.w	r5, fp
 801435e:	fb0a 9505 	mla	r5, sl, r5, r9
 8014362:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014366:	f818 9005 	ldrb.w	r9, [r8, r5]
 801436a:	eb08 0b05 	add.w	fp, r8, r5
 801436e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8014372:	f804 9005 	strb.w	r9, [r4, r5]
 8014376:	4425      	add	r5, r4
 8014378:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801437c:	f885 9001 	strb.w	r9, [r5, #1]
 8014380:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8014384:	f885 9002 	strb.w	r9, [r5, #2]
 8014388:	4470      	add	r0, lr
 801438a:	4462      	add	r2, ip
 801438c:	3601      	adds	r6, #1
 801438e:	e79b      	b.n	80142c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8014390:	b003      	add	sp, #12
 8014392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014396 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801439a:	b085      	sub	sp, #20
 801439c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80143a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80143a2:	9202      	str	r2, [sp, #8]
 80143a4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80143a8:	6860      	ldr	r0, [r4, #4]
 80143aa:	9203      	str	r2, [sp, #12]
 80143ac:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80143b0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80143b4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80143b8:	fb00 2505 	mla	r5, r0, r5, r2
 80143bc:	6822      	ldr	r2, [r4, #0]
 80143be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143c2:	4415      	add	r5, r2
 80143c4:	f8dc 2000 	ldr.w	r2, [ip]
 80143c8:	9201      	str	r2, [sp, #4]
 80143ca:	2900      	cmp	r1, #0
 80143cc:	dc03      	bgt.n	80143d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80143ce:	9a02      	ldr	r2, [sp, #8]
 80143d0:	2a00      	cmp	r2, #0
 80143d2:	f340 8122 	ble.w	801461a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80143d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80143d8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80143dc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80143e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80143e2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80143e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	dd0d      	ble.n	801440a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80143ee:	1422      	asrs	r2, r4, #16
 80143f0:	d405      	bmi.n	80143fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80143f2:	4542      	cmp	r2, r8
 80143f4:	da03      	bge.n	80143fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80143f6:	1402      	asrs	r2, r0, #16
 80143f8:	d401      	bmi.n	80143fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80143fa:	42ba      	cmp	r2, r7
 80143fc:	db06      	blt.n	801440c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80143fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014400:	4474      	add	r4, lr
 8014402:	3b01      	subs	r3, #1
 8014404:	3503      	adds	r5, #3
 8014406:	4410      	add	r0, r2
 8014408:	e7ef      	b.n	80143ea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801440a:	d072      	beq.n	80144f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801440c:	1e5a      	subs	r2, r3, #1
 801440e:	fb0e 4602 	mla	r6, lr, r2, r4
 8014412:	1436      	asrs	r6, r6, #16
 8014414:	d462      	bmi.n	80144dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014416:	4546      	cmp	r6, r8
 8014418:	da60      	bge.n	80144dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801441a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801441c:	fb06 0202 	mla	r2, r6, r2, r0
 8014420:	1412      	asrs	r2, r2, #16
 8014422:	d45b      	bmi.n	80144dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014424:	42ba      	cmp	r2, r7
 8014426:	da59      	bge.n	80144dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014428:	1cef      	adds	r7, r5, #3
 801442a:	4699      	mov	r9, r3
 801442c:	f1b9 0f00 	cmp.w	r9, #0
 8014430:	dd5a      	ble.n	80144e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014432:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014436:	1426      	asrs	r6, r4, #16
 8014438:	1402      	asrs	r2, r0, #16
 801443a:	fb08 6202 	mla	r2, r8, r2, r6
 801443e:	9e01      	ldr	r6, [sp, #4]
 8014440:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014444:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8014448:	d041      	beq.n	80144ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801444a:	9a03      	ldr	r2, [sp, #12]
 801444c:	fa5f fb86 	uxtb.w	fp, r6
 8014450:	fb02 f808 	mul.w	r8, r2, r8
 8014454:	f108 0201 	add.w	r2, r8, #1
 8014458:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801445c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8014460:	1212      	asrs	r2, r2, #8
 8014462:	fa1f fa82 	uxth.w	sl, r2
 8014466:	43d2      	mvns	r2, r2
 8014468:	fb1b fb0a 	smulbb	fp, fp, sl
 801446c:	b2d2      	uxtb	r2, r2
 801446e:	fb08 b802 	mla	r8, r8, r2, fp
 8014472:	fa1f f888 	uxth.w	r8, r8
 8014476:	f108 0b01 	add.w	fp, r8, #1
 801447a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801447e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014482:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014486:	fb1b fb0a 	smulbb	fp, fp, sl
 801448a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801448e:	fb16 fa0a 	smulbb	sl, r6, sl
 8014492:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014496:	f807 8c03 	strb.w	r8, [r7, #-3]
 801449a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801449e:	fb06 aa02 	mla	sl, r6, r2, sl
 80144a2:	fb08 b802 	mla	r8, r8, r2, fp
 80144a6:	fa1f fa8a 	uxth.w	sl, sl
 80144aa:	fa1f f888 	uxth.w	r8, r8
 80144ae:	f10a 0601 	add.w	r6, sl, #1
 80144b2:	f108 0b01 	add.w	fp, r8, #1
 80144b6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80144ba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80144be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80144c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80144c6:	f807 ac01 	strb.w	sl, [r7, #-1]
 80144ca:	f807 8c02 	strb.w	r8, [r7, #-2]
 80144ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80144d0:	4474      	add	r4, lr
 80144d2:	3703      	adds	r7, #3
 80144d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80144d8:	4410      	add	r0, r2
 80144da:	e7a7      	b.n	801442c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80144dc:	f04f 0800 	mov.w	r8, #0
 80144e0:	eba3 0208 	sub.w	r2, r3, r8
 80144e4:	2a00      	cmp	r2, #0
 80144e6:	dc3b      	bgt.n	8014560 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80144e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80144ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80144f0:	441d      	add	r5, r3
 80144f2:	2900      	cmp	r1, #0
 80144f4:	f340 8091 	ble.w	801461a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80144f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80144fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014502:	3901      	subs	r1, #1
 8014504:	eeb0 6a62 	vmov.f32	s12, s5
 8014508:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801450c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014510:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014514:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014518:	eeb0 6a43 	vmov.f32	s12, s6
 801451c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014520:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014524:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014528:	ee61 7a27 	vmul.f32	s15, s2, s15
 801452c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014530:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014534:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014538:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801453c:	ee12 2a90 	vmov	r2, s5
 8014540:	eef0 2a47 	vmov.f32	s5, s14
 8014544:	fb92 fef3 	sdiv	lr, r2, r3
 8014548:	ee13 2a10 	vmov	r2, s6
 801454c:	eeb0 3a67 	vmov.f32	s6, s15
 8014550:	fb92 f3f3 	sdiv	r3, r2, r3
 8014554:	9a02      	ldr	r2, [sp, #8]
 8014556:	9312      	str	r3, [sp, #72]	; 0x48
 8014558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801455a:	bf08      	it	eq
 801455c:	4613      	moveq	r3, r2
 801455e:	e734      	b.n	80143ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014560:	1427      	asrs	r7, r4, #16
 8014562:	d454      	bmi.n	801460e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014564:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014568:	42be      	cmp	r6, r7
 801456a:	dd50      	ble.n	801460e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801456c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014570:	d44d      	bmi.n	801460e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014572:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014576:	454a      	cmp	r2, r9
 8014578:	dd49      	ble.n	801460e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801457a:	b236      	sxth	r6, r6
 801457c:	9a01      	ldr	r2, [sp, #4]
 801457e:	fb09 7606 	mla	r6, r9, r6, r7
 8014582:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8014586:	0e3a      	lsrs	r2, r7, #24
 8014588:	d041      	beq.n	801460e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801458a:	9e03      	ldr	r6, [sp, #12]
 801458c:	fa5f fb87 	uxtb.w	fp, r7
 8014590:	4372      	muls	r2, r6
 8014592:	1c56      	adds	r6, r2, #1
 8014594:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014598:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801459c:	1212      	asrs	r2, r2, #8
 801459e:	f815 9006 	ldrb.w	r9, [r5, r6]
 80145a2:	fa1f fa82 	uxth.w	sl, r2
 80145a6:	43d2      	mvns	r2, r2
 80145a8:	fb1b fb0a 	smulbb	fp, fp, sl
 80145ac:	b2d2      	uxtb	r2, r2
 80145ae:	fb09 b902 	mla	r9, r9, r2, fp
 80145b2:	fa1f f989 	uxth.w	r9, r9
 80145b6:	f109 0b01 	add.w	fp, r9, #1
 80145ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80145be:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80145c2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80145c6:	fb1b fb0a 	smulbb	fp, fp, sl
 80145ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80145ce:	fb17 fa0a 	smulbb	sl, r7, sl
 80145d2:	f805 9006 	strb.w	r9, [r5, r6]
 80145d6:	442e      	add	r6, r5
 80145d8:	78b7      	ldrb	r7, [r6, #2]
 80145da:	f896 9001 	ldrb.w	r9, [r6, #1]
 80145de:	fb07 aa02 	mla	sl, r7, r2, sl
 80145e2:	fb09 b902 	mla	r9, r9, r2, fp
 80145e6:	fa1f fa8a 	uxth.w	sl, sl
 80145ea:	fa1f f989 	uxth.w	r9, r9
 80145ee:	f10a 0701 	add.w	r7, sl, #1
 80145f2:	f109 0b01 	add.w	fp, r9, #1
 80145f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80145fa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80145fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014602:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014606:	f886 a002 	strb.w	sl, [r6, #2]
 801460a:	f886 9001 	strb.w	r9, [r6, #1]
 801460e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014610:	4474      	add	r4, lr
 8014612:	f108 0801 	add.w	r8, r8, #1
 8014616:	4410      	add	r0, r2
 8014618:	e762      	b.n	80144e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801461a:	b005      	add	sp, #20
 801461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014620 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014624:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801462a:	9201      	str	r2, [sp, #4]
 801462c:	6860      	ldr	r0, [r4, #4]
 801462e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8014632:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8014636:	fb00 2505 	mla	r5, r0, r5, r2
 801463a:	6822      	ldr	r2, [r4, #0]
 801463c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014640:	4415      	add	r5, r2
 8014642:	f8dc 2000 	ldr.w	r2, [ip]
 8014646:	9200      	str	r2, [sp, #0]
 8014648:	2900      	cmp	r1, #0
 801464a:	dc03      	bgt.n	8014654 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801464c:	9a01      	ldr	r2, [sp, #4]
 801464e:	2a00      	cmp	r2, #0
 8014650:	f340 812b 	ble.w	80148aa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014656:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801465a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801465e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014660:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014664:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014668:	2b00      	cmp	r3, #0
 801466a:	dd0e      	ble.n	801468a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801466c:	1422      	asrs	r2, r4, #16
 801466e:	d405      	bmi.n	801467c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014670:	4572      	cmp	r2, lr
 8014672:	da03      	bge.n	801467c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014674:	1402      	asrs	r2, r0, #16
 8014676:	d401      	bmi.n	801467c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014678:	42ba      	cmp	r2, r7
 801467a:	db07      	blt.n	801468c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801467c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801467e:	3b01      	subs	r3, #1
 8014680:	3503      	adds	r5, #3
 8014682:	4414      	add	r4, r2
 8014684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014686:	4410      	add	r0, r2
 8014688:	e7ee      	b.n	8014668 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801468a:	d06f      	beq.n	801476c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801468c:	1e5a      	subs	r2, r3, #1
 801468e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014690:	fb06 4602 	mla	r6, r6, r2, r4
 8014694:	1436      	asrs	r6, r6, #16
 8014696:	d45e      	bmi.n	8014756 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014698:	4576      	cmp	r6, lr
 801469a:	da5c      	bge.n	8014756 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801469c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801469e:	fb06 0202 	mla	r2, r6, r2, r0
 80146a2:	1412      	asrs	r2, r2, #16
 80146a4:	d457      	bmi.n	8014756 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80146a6:	42ba      	cmp	r2, r7
 80146a8:	da55      	bge.n	8014756 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80146aa:	1cee      	adds	r6, r5, #3
 80146ac:	469a      	mov	sl, r3
 80146ae:	f1ba 0f00 	cmp.w	sl, #0
 80146b2:	dd56      	ble.n	8014762 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80146b4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80146b8:	1427      	asrs	r7, r4, #16
 80146ba:	1402      	asrs	r2, r0, #16
 80146bc:	fb0e 7202 	mla	r2, lr, r2, r7
 80146c0:	9f00      	ldr	r7, [sp, #0]
 80146c2:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80146c6:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80146ca:	d03c      	beq.n	8014746 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80146cc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80146d0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80146d4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80146d8:	fa5f f28e 	uxtb.w	r2, lr
 80146dc:	b2ff      	uxtb	r7, r7
 80146de:	f000 80dd 	beq.w	801489c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80146e2:	fa1f f882 	uxth.w	r8, r2
 80146e6:	43d2      	mvns	r2, r2
 80146e8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80146ec:	fb17 f708 	smulbb	r7, r7, r8
 80146f0:	b2d2      	uxtb	r2, r2
 80146f2:	fb19 f908 	smulbb	r9, r9, r8
 80146f6:	fb0e 7702 	mla	r7, lr, r2, r7
 80146fa:	fb1b f808 	smulbb	r8, fp, r8
 80146fe:	b2bf      	uxth	r7, r7
 8014700:	f107 0e01 	add.w	lr, r7, #1
 8014704:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014708:	123f      	asrs	r7, r7, #8
 801470a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801470e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8014712:	fb07 9902 	mla	r9, r7, r2, r9
 8014716:	fa1f f989 	uxth.w	r9, r9
 801471a:	f109 0701 	add.w	r7, r9, #1
 801471e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8014722:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8014726:	fb07 8802 	mla	r8, r7, r2, r8
 801472a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801472e:	fa1f f888 	uxth.w	r8, r8
 8014732:	f806 9c02 	strb.w	r9, [r6, #-2]
 8014736:	f108 0201 	add.w	r2, r8, #1
 801473a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801473e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014742:	f806 8c01 	strb.w	r8, [r6, #-1]
 8014746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014748:	3603      	adds	r6, #3
 801474a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801474e:	4414      	add	r4, r2
 8014750:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014752:	4410      	add	r0, r2
 8014754:	e7ab      	b.n	80146ae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8014756:	f04f 0e00 	mov.w	lr, #0
 801475a:	eba3 020e 	sub.w	r2, r3, lr
 801475e:	2a00      	cmp	r2, #0
 8014760:	dc3d      	bgt.n	80147de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8014762:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014766:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801476a:	441d      	add	r5, r3
 801476c:	2900      	cmp	r1, #0
 801476e:	f340 809c 	ble.w	80148aa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014772:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014778:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801477c:	3901      	subs	r1, #1
 801477e:	eeb0 6a62 	vmov.f32	s12, s5
 8014782:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014786:	ee31 1a05 	vadd.f32	s2, s2, s10
 801478a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801478e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014792:	eeb0 6a43 	vmov.f32	s12, s6
 8014796:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801479a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801479e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80147a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80147a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80147aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80147ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80147b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80147b6:	ee12 2a90 	vmov	r2, s5
 80147ba:	eef0 2a47 	vmov.f32	s5, s14
 80147be:	fb92 f3f3 	sdiv	r3, r2, r3
 80147c2:	ee13 2a10 	vmov	r2, s6
 80147c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80147c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147ca:	eeb0 3a67 	vmov.f32	s6, s15
 80147ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80147d2:	9a01      	ldr	r2, [sp, #4]
 80147d4:	9310      	str	r3, [sp, #64]	; 0x40
 80147d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147d8:	bf08      	it	eq
 80147da:	4613      	moveq	r3, r2
 80147dc:	e734      	b.n	8014648 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80147de:	1427      	asrs	r7, r4, #16
 80147e0:	d44d      	bmi.n	801487e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80147e2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80147e6:	42be      	cmp	r6, r7
 80147e8:	dd49      	ble.n	801487e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80147ea:	ea5f 4820 	movs.w	r8, r0, asr #16
 80147ee:	d446      	bmi.n	801487e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80147f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80147f4:	4542      	cmp	r2, r8
 80147f6:	dd42      	ble.n	801487e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80147f8:	b236      	sxth	r6, r6
 80147fa:	9a00      	ldr	r2, [sp, #0]
 80147fc:	fb08 7606 	mla	r6, r8, r6, r7
 8014800:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8014804:	0e3a      	lsrs	r2, r7, #24
 8014806:	d03a      	beq.n	801487e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014808:	2aff      	cmp	r2, #255	; 0xff
 801480a:	b2d6      	uxtb	r6, r2
 801480c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014810:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8014814:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8014818:	b2ff      	uxtb	r7, r7
 801481a:	d037      	beq.n	801488c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801481c:	fa1f f986 	uxth.w	r9, r6
 8014820:	4472      	add	r2, lr
 8014822:	43f6      	mvns	r6, r6
 8014824:	f815 8002 	ldrb.w	r8, [r5, r2]
 8014828:	fb17 f709 	smulbb	r7, r7, r9
 801482c:	fb1a fa09 	smulbb	sl, sl, r9
 8014830:	b2f6      	uxtb	r6, r6
 8014832:	fb1b f909 	smulbb	r9, fp, r9
 8014836:	fb08 7706 	mla	r7, r8, r6, r7
 801483a:	b2bf      	uxth	r7, r7
 801483c:	f107 0801 	add.w	r8, r7, #1
 8014840:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8014844:	123f      	asrs	r7, r7, #8
 8014846:	54af      	strb	r7, [r5, r2]
 8014848:	442a      	add	r2, r5
 801484a:	7857      	ldrb	r7, [r2, #1]
 801484c:	fb07 aa06 	mla	sl, r7, r6, sl
 8014850:	fa1f fa8a 	uxth.w	sl, sl
 8014854:	f10a 0701 	add.w	r7, sl, #1
 8014858:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801485c:	7897      	ldrb	r7, [r2, #2]
 801485e:	fb07 9906 	mla	r9, r7, r6, r9
 8014862:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014866:	fa1f f989 	uxth.w	r9, r9
 801486a:	f882 a001 	strb.w	sl, [r2, #1]
 801486e:	f109 0601 	add.w	r6, r9, #1
 8014872:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8014876:	ea4f 2929 	mov.w	r9, r9, asr #8
 801487a:	f882 9002 	strb.w	r9, [r2, #2]
 801487e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014880:	f10e 0e01 	add.w	lr, lr, #1
 8014884:	4414      	add	r4, r2
 8014886:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014888:	4410      	add	r0, r2
 801488a:	e766      	b.n	801475a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801488c:	4472      	add	r2, lr
 801488e:	54af      	strb	r7, [r5, r2]
 8014890:	442a      	add	r2, r5
 8014892:	f882 a001 	strb.w	sl, [r2, #1]
 8014896:	f882 b002 	strb.w	fp, [r2, #2]
 801489a:	e7f0      	b.n	801487e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801489c:	f806 7c03 	strb.w	r7, [r6, #-3]
 80148a0:	f806 9c02 	strb.w	r9, [r6, #-2]
 80148a4:	f806 bc01 	strb.w	fp, [r6, #-1]
 80148a8:	e74d      	b.n	8014746 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80148aa:	b003      	add	sp, #12
 80148ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080148b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80148b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b4:	b087      	sub	sp, #28
 80148b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80148ba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80148bc:	9204      	str	r2, [sp, #16]
 80148be:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80148c2:	6860      	ldr	r0, [r4, #4]
 80148c4:	9205      	str	r2, [sp, #20]
 80148c6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80148ca:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80148ce:	9101      	str	r1, [sp, #4]
 80148d0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80148d4:	fb00 2505 	mla	r5, r0, r5, r2
 80148d8:	6822      	ldr	r2, [r4, #0]
 80148da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80148de:	4415      	add	r5, r2
 80148e0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80148e4:	3201      	adds	r2, #1
 80148e6:	f022 0201 	bic.w	r2, r2, #1
 80148ea:	9202      	str	r2, [sp, #8]
 80148ec:	f8dc 2000 	ldr.w	r2, [ip]
 80148f0:	9203      	str	r2, [sp, #12]
 80148f2:	9a01      	ldr	r2, [sp, #4]
 80148f4:	2a00      	cmp	r2, #0
 80148f6:	dc03      	bgt.n	8014900 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80148f8:	9a04      	ldr	r2, [sp, #16]
 80148fa:	2a00      	cmp	r2, #0
 80148fc:	f340 8135 	ble.w	8014b6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8014900:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014902:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014906:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801490a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801490c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014910:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014914:	2b00      	cmp	r3, #0
 8014916:	dd0d      	ble.n	8014934 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8014918:	1422      	asrs	r2, r4, #16
 801491a:	d405      	bmi.n	8014928 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801491c:	4542      	cmp	r2, r8
 801491e:	da03      	bge.n	8014928 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014920:	1402      	asrs	r2, r0, #16
 8014922:	d401      	bmi.n	8014928 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014924:	42ba      	cmp	r2, r7
 8014926:	db06      	blt.n	8014936 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8014928:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801492a:	4474      	add	r4, lr
 801492c:	3b01      	subs	r3, #1
 801492e:	3503      	adds	r5, #3
 8014930:	4410      	add	r0, r2
 8014932:	e7ef      	b.n	8014914 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014934:	d077      	beq.n	8014a26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8014936:	1e5a      	subs	r2, r3, #1
 8014938:	fb0e 4602 	mla	r6, lr, r2, r4
 801493c:	1436      	asrs	r6, r6, #16
 801493e:	d469      	bmi.n	8014a14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014940:	4546      	cmp	r6, r8
 8014942:	da67      	bge.n	8014a14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014944:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8014946:	fb06 0202 	mla	r2, r6, r2, r0
 801494a:	1412      	asrs	r2, r2, #16
 801494c:	d462      	bmi.n	8014a14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801494e:	42ba      	cmp	r2, r7
 8014950:	da60      	bge.n	8014a14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014952:	1cee      	adds	r6, r5, #3
 8014954:	4699      	mov	r9, r3
 8014956:	f1b9 0f00 	cmp.w	r9, #0
 801495a:	dd5f      	ble.n	8014a1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801495c:	1422      	asrs	r2, r4, #16
 801495e:	9902      	ldr	r1, [sp, #8]
 8014960:	1407      	asrs	r7, r0, #16
 8014962:	fb01 2707 	mla	r7, r1, r7, r2
 8014966:	9903      	ldr	r1, [sp, #12]
 8014968:	087a      	lsrs	r2, r7, #1
 801496a:	5c8a      	ldrb	r2, [r1, r2]
 801496c:	07f9      	lsls	r1, r7, #31
 801496e:	bf54      	ite	pl
 8014970:	f002 020f 	andpl.w	r2, r2, #15
 8014974:	1112      	asrmi	r2, r2, #4
 8014976:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801497a:	b2d2      	uxtb	r2, r2
 801497c:	2a00      	cmp	r2, #0
 801497e:	d042      	beq.n	8014a06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8014980:	497b      	ldr	r1, [pc, #492]	; (8014b70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8014982:	680f      	ldr	r7, [r1, #0]
 8014984:	9905      	ldr	r1, [sp, #20]
 8014986:	fa5f fb87 	uxtb.w	fp, r7
 801498a:	434a      	muls	r2, r1
 801498c:	f102 0801 	add.w	r8, r2, #1
 8014990:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8014994:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8014998:	1212      	asrs	r2, r2, #8
 801499a:	fa1f fa82 	uxth.w	sl, r2
 801499e:	43d2      	mvns	r2, r2
 80149a0:	fb1b fb0a 	smulbb	fp, fp, sl
 80149a4:	b2d2      	uxtb	r2, r2
 80149a6:	fb08 b802 	mla	r8, r8, r2, fp
 80149aa:	fa1f f888 	uxth.w	r8, r8
 80149ae:	f108 0b01 	add.w	fp, r8, #1
 80149b2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80149b6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80149ba:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80149be:	fb1b fb0a 	smulbb	fp, fp, sl
 80149c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80149c6:	fb17 fa0a 	smulbb	sl, r7, sl
 80149ca:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80149ce:	f806 8c03 	strb.w	r8, [r6, #-3]
 80149d2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80149d6:	fb07 aa02 	mla	sl, r7, r2, sl
 80149da:	fb08 b802 	mla	r8, r8, r2, fp
 80149de:	fa1f fa8a 	uxth.w	sl, sl
 80149e2:	fa1f f888 	uxth.w	r8, r8
 80149e6:	f10a 0701 	add.w	r7, sl, #1
 80149ea:	f108 0b01 	add.w	fp, r8, #1
 80149ee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80149f2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80149f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80149fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80149fe:	f806 ac01 	strb.w	sl, [r6, #-1]
 8014a02:	f806 8c02 	strb.w	r8, [r6, #-2]
 8014a06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a08:	4474      	add	r4, lr
 8014a0a:	3603      	adds	r6, #3
 8014a0c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014a10:	4410      	add	r0, r2
 8014a12:	e7a0      	b.n	8014956 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8014a14:	2700      	movs	r7, #0
 8014a16:	1bda      	subs	r2, r3, r7
 8014a18:	2a00      	cmp	r2, #0
 8014a1a:	dc3e      	bgt.n	8014a9a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8014a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014a20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014a24:	441d      	add	r5, r3
 8014a26:	9b01      	ldr	r3, [sp, #4]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	f340 809e 	ble.w	8014b6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8014a2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014a38:	eeb0 6a62 	vmov.f32	s12, s5
 8014a3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014a40:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014a44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014a48:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014a4c:	eeb0 6a43 	vmov.f32	s12, s6
 8014a50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014a54:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014a58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014a5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014a60:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014a64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014a68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014a6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014a70:	ee12 2a90 	vmov	r2, s5
 8014a74:	eef0 2a47 	vmov.f32	s5, s14
 8014a78:	fb92 fef3 	sdiv	lr, r2, r3
 8014a7c:	ee13 2a10 	vmov	r2, s6
 8014a80:	eeb0 3a67 	vmov.f32	s6, s15
 8014a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a88:	9314      	str	r3, [sp, #80]	; 0x50
 8014a8a:	9b01      	ldr	r3, [sp, #4]
 8014a8c:	9a04      	ldr	r2, [sp, #16]
 8014a8e:	3b01      	subs	r3, #1
 8014a90:	9301      	str	r3, [sp, #4]
 8014a92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a94:	bf08      	it	eq
 8014a96:	4613      	moveq	r3, r2
 8014a98:	e72b      	b.n	80148f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014a9a:	1426      	asrs	r6, r4, #16
 8014a9c:	d460      	bmi.n	8014b60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014a9e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014aa2:	42b2      	cmp	r2, r6
 8014aa4:	dd5c      	ble.n	8014b60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014aa6:	ea5f 4820 	movs.w	r8, r0, asr #16
 8014aaa:	d459      	bmi.n	8014b60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014aac:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014ab0:	4542      	cmp	r2, r8
 8014ab2:	dd55      	ble.n	8014b60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014ab4:	9a02      	ldr	r2, [sp, #8]
 8014ab6:	9903      	ldr	r1, [sp, #12]
 8014ab8:	fb08 6602 	mla	r6, r8, r2, r6
 8014abc:	0872      	lsrs	r2, r6, #1
 8014abe:	07f6      	lsls	r6, r6, #31
 8014ac0:	5c8a      	ldrb	r2, [r1, r2]
 8014ac2:	bf54      	ite	pl
 8014ac4:	f002 020f 	andpl.w	r2, r2, #15
 8014ac8:	1112      	asrmi	r2, r2, #4
 8014aca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014ace:	b2d2      	uxtb	r2, r2
 8014ad0:	2a00      	cmp	r2, #0
 8014ad2:	d045      	beq.n	8014b60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014ad4:	4926      	ldr	r1, [pc, #152]	; (8014b70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8014ad6:	f8d1 8000 	ldr.w	r8, [r1]
 8014ada:	9905      	ldr	r1, [sp, #20]
 8014adc:	fa5f fb88 	uxtb.w	fp, r8
 8014ae0:	434a      	muls	r2, r1
 8014ae2:	1c56      	adds	r6, r2, #1
 8014ae4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014ae8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8014aec:	1212      	asrs	r2, r2, #8
 8014aee:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014af2:	fa1f fa82 	uxth.w	sl, r2
 8014af6:	43d2      	mvns	r2, r2
 8014af8:	fb1b fb0a 	smulbb	fp, fp, sl
 8014afc:	b2d2      	uxtb	r2, r2
 8014afe:	fb09 b902 	mla	r9, r9, r2, fp
 8014b02:	fa1f f989 	uxth.w	r9, r9
 8014b06:	f109 0b01 	add.w	fp, r9, #1
 8014b0a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014b0e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8014b12:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8014b16:	fb1b fb0a 	smulbb	fp, fp, sl
 8014b1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014b1e:	fb18 fa0a 	smulbb	sl, r8, sl
 8014b22:	f805 9006 	strb.w	r9, [r5, r6]
 8014b26:	442e      	add	r6, r5
 8014b28:	f896 8002 	ldrb.w	r8, [r6, #2]
 8014b2c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014b30:	fb08 aa02 	mla	sl, r8, r2, sl
 8014b34:	fb09 b902 	mla	r9, r9, r2, fp
 8014b38:	fa1f fa8a 	uxth.w	sl, sl
 8014b3c:	fa1f f989 	uxth.w	r9, r9
 8014b40:	f10a 0801 	add.w	r8, sl, #1
 8014b44:	f109 0b01 	add.w	fp, r9, #1
 8014b48:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8014b4c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014b50:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014b54:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014b58:	f886 a002 	strb.w	sl, [r6, #2]
 8014b5c:	f886 9001 	strb.w	r9, [r6, #1]
 8014b60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b62:	4474      	add	r4, lr
 8014b64:	3701      	adds	r7, #1
 8014b66:	4410      	add	r0, r2
 8014b68:	e755      	b.n	8014a16 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8014b6a:	b007      	add	sp, #28
 8014b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b70:	2000df74 	.word	0x2000df74

08014b74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	b085      	sub	sp, #20
 8014b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014b7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014b80:	9203      	str	r2, [sp, #12]
 8014b82:	6860      	ldr	r0, [r4, #4]
 8014b84:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014b88:	9100      	str	r1, [sp, #0]
 8014b8a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8014b8e:	fb00 2606 	mla	r6, r0, r6, r2
 8014b92:	6822      	ldr	r2, [r4, #0]
 8014b94:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014b98:	4416      	add	r6, r2
 8014b9a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014b9e:	3201      	adds	r2, #1
 8014ba0:	f022 0201 	bic.w	r2, r2, #1
 8014ba4:	9201      	str	r2, [sp, #4]
 8014ba6:	f8dc 2000 	ldr.w	r2, [ip]
 8014baa:	9202      	str	r2, [sp, #8]
 8014bac:	9a00      	ldr	r2, [sp, #0]
 8014bae:	2a00      	cmp	r2, #0
 8014bb0:	dc03      	bgt.n	8014bba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8014bb2:	9a03      	ldr	r2, [sp, #12]
 8014bb4:	2a00      	cmp	r2, #0
 8014bb6:	f340 8140 	ble.w	8014e3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8014bba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bbc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014bc0:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8014bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014bc6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014bca:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	dd0e      	ble.n	8014bf0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8014bd2:	142a      	asrs	r2, r5, #16
 8014bd4:	d405      	bmi.n	8014be2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014bd6:	4572      	cmp	r2, lr
 8014bd8:	da03      	bge.n	8014be2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014bda:	1422      	asrs	r2, r4, #16
 8014bdc:	d401      	bmi.n	8014be2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014bde:	42ba      	cmp	r2, r7
 8014be0:	db07      	blt.n	8014bf2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8014be2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014be4:	3b01      	subs	r3, #1
 8014be6:	3603      	adds	r6, #3
 8014be8:	4415      	add	r5, r2
 8014bea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014bec:	4414      	add	r4, r2
 8014bee:	e7ee      	b.n	8014bce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8014bf0:	d072      	beq.n	8014cd8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014bf2:	1e5a      	subs	r2, r3, #1
 8014bf4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014bf6:	fb00 5002 	mla	r0, r0, r2, r5
 8014bfa:	1400      	asrs	r0, r0, #16
 8014bfc:	d463      	bmi.n	8014cc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014bfe:	4570      	cmp	r0, lr
 8014c00:	da61      	bge.n	8014cc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014c02:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014c04:	fb00 4202 	mla	r2, r0, r2, r4
 8014c08:	1412      	asrs	r2, r2, #16
 8014c0a:	d45c      	bmi.n	8014cc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014c0c:	42ba      	cmp	r2, r7
 8014c0e:	da5a      	bge.n	8014cc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014c10:	1cf0      	adds	r0, r6, #3
 8014c12:	469a      	mov	sl, r3
 8014c14:	f1ba 0f00 	cmp.w	sl, #0
 8014c18:	dd59      	ble.n	8014cce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8014c1a:	142a      	asrs	r2, r5, #16
 8014c1c:	9901      	ldr	r1, [sp, #4]
 8014c1e:	1427      	asrs	r7, r4, #16
 8014c20:	fb01 2707 	mla	r7, r1, r7, r2
 8014c24:	9902      	ldr	r1, [sp, #8]
 8014c26:	087a      	lsrs	r2, r7, #1
 8014c28:	5c8a      	ldrb	r2, [r1, r2]
 8014c2a:	07f9      	lsls	r1, r7, #31
 8014c2c:	bf54      	ite	pl
 8014c2e:	f002 020f 	andpl.w	r2, r2, #15
 8014c32:	1112      	asrmi	r2, r2, #4
 8014c34:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014c38:	b2d2      	uxtb	r2, r2
 8014c3a:	2a00      	cmp	r2, #0
 8014c3c:	d03b      	beq.n	8014cb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014c3e:	4980      	ldr	r1, [pc, #512]	; (8014e40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8014c40:	2aff      	cmp	r2, #255	; 0xff
 8014c42:	680f      	ldr	r7, [r1, #0]
 8014c44:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014c48:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014c4c:	b2ff      	uxtb	r7, r7
 8014c4e:	f000 80ed 	beq.w	8014e2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8014c52:	fa1f f882 	uxth.w	r8, r2
 8014c56:	43d2      	mvns	r2, r2
 8014c58:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8014c5c:	fb17 f708 	smulbb	r7, r7, r8
 8014c60:	b2d2      	uxtb	r2, r2
 8014c62:	fb19 f908 	smulbb	r9, r9, r8
 8014c66:	fb0e 7702 	mla	r7, lr, r2, r7
 8014c6a:	fb1b f808 	smulbb	r8, fp, r8
 8014c6e:	b2bf      	uxth	r7, r7
 8014c70:	f107 0e01 	add.w	lr, r7, #1
 8014c74:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014c78:	123f      	asrs	r7, r7, #8
 8014c7a:	f800 7c03 	strb.w	r7, [r0, #-3]
 8014c7e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8014c82:	fb07 9902 	mla	r9, r7, r2, r9
 8014c86:	fa1f f989 	uxth.w	r9, r9
 8014c8a:	f109 0701 	add.w	r7, r9, #1
 8014c8e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8014c92:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8014c96:	fb07 8802 	mla	r8, r7, r2, r8
 8014c9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014c9e:	fa1f f888 	uxth.w	r8, r8
 8014ca2:	f800 9c02 	strb.w	r9, [r0, #-2]
 8014ca6:	f108 0201 	add.w	r2, r8, #1
 8014caa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8014cae:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014cb2:	f800 8c01 	strb.w	r8, [r0, #-1]
 8014cb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014cb8:	3003      	adds	r0, #3
 8014cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014cbe:	4415      	add	r5, r2
 8014cc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cc2:	4414      	add	r4, r2
 8014cc4:	e7a6      	b.n	8014c14 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014cc6:	2700      	movs	r7, #0
 8014cc8:	1bda      	subs	r2, r3, r7
 8014cca:	2a00      	cmp	r2, #0
 8014ccc:	dc40      	bgt.n	8014d50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8014cce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014cd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014cd6:	441e      	add	r6, r3
 8014cd8:	9b00      	ldr	r3, [sp, #0]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	f340 80ad 	ble.w	8014e3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8014ce0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ce6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014cea:	eeb0 6a62 	vmov.f32	s12, s5
 8014cee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014cf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014cf6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014cfa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014cfe:	eeb0 6a43 	vmov.f32	s12, s6
 8014d02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d06:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014d0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014d0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014d12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014d16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014d1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014d1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014d22:	ee12 2a90 	vmov	r2, s5
 8014d26:	eef0 2a47 	vmov.f32	s5, s14
 8014d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014d2e:	ee13 2a10 	vmov	r2, s6
 8014d32:	9311      	str	r3, [sp, #68]	; 0x44
 8014d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d36:	eeb0 3a67 	vmov.f32	s6, s15
 8014d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014d3e:	9312      	str	r3, [sp, #72]	; 0x48
 8014d40:	9b00      	ldr	r3, [sp, #0]
 8014d42:	9a03      	ldr	r2, [sp, #12]
 8014d44:	3b01      	subs	r3, #1
 8014d46:	9300      	str	r3, [sp, #0]
 8014d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d4a:	bf08      	it	eq
 8014d4c:	4613      	moveq	r3, r2
 8014d4e:	e72d      	b.n	8014bac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8014d50:	1428      	asrs	r0, r5, #16
 8014d52:	d45c      	bmi.n	8014e0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014d54:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014d58:	4282      	cmp	r2, r0
 8014d5a:	dd58      	ble.n	8014e0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014d5c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8014d60:	d455      	bmi.n	8014e0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014d62:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014d66:	4572      	cmp	r2, lr
 8014d68:	dd51      	ble.n	8014e0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014d6a:	9a01      	ldr	r2, [sp, #4]
 8014d6c:	9902      	ldr	r1, [sp, #8]
 8014d6e:	fb0e 0002 	mla	r0, lr, r2, r0
 8014d72:	0842      	lsrs	r2, r0, #1
 8014d74:	07c0      	lsls	r0, r0, #31
 8014d76:	5c8a      	ldrb	r2, [r1, r2]
 8014d78:	bf54      	ite	pl
 8014d7a:	f002 020f 	andpl.w	r2, r2, #15
 8014d7e:	1112      	asrmi	r2, r2, #4
 8014d80:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014d84:	b2d2      	uxtb	r2, r2
 8014d86:	2a00      	cmp	r2, #0
 8014d88:	d041      	beq.n	8014e0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014d8a:	492d      	ldr	r1, [pc, #180]	; (8014e40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8014d8c:	2aff      	cmp	r2, #255	; 0xff
 8014d8e:	6808      	ldr	r0, [r1, #0]
 8014d90:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8014d94:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8014d98:	fa5f fe80 	uxtb.w	lr, r0
 8014d9c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8014da0:	d03b      	beq.n	8014e1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8014da2:	fa1f f982 	uxth.w	r9, r2
 8014da6:	4438      	add	r0, r7
 8014da8:	43d2      	mvns	r2, r2
 8014daa:	f816 8000 	ldrb.w	r8, [r6, r0]
 8014dae:	fb1e fe09 	smulbb	lr, lr, r9
 8014db2:	fb1a fa09 	smulbb	sl, sl, r9
 8014db6:	b2d2      	uxtb	r2, r2
 8014db8:	fb1b f909 	smulbb	r9, fp, r9
 8014dbc:	fb08 ee02 	mla	lr, r8, r2, lr
 8014dc0:	fa1f fe8e 	uxth.w	lr, lr
 8014dc4:	f10e 0801 	add.w	r8, lr, #1
 8014dc8:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8014dcc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014dd0:	f806 e000 	strb.w	lr, [r6, r0]
 8014dd4:	4430      	add	r0, r6
 8014dd6:	f890 e001 	ldrb.w	lr, [r0, #1]
 8014dda:	fb0e aa02 	mla	sl, lr, r2, sl
 8014dde:	fa1f fa8a 	uxth.w	sl, sl
 8014de2:	f10a 0e01 	add.w	lr, sl, #1
 8014de6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8014dea:	f890 e002 	ldrb.w	lr, [r0, #2]
 8014dee:	fb0e 9902 	mla	r9, lr, r2, r9
 8014df2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014df6:	fa1f f989 	uxth.w	r9, r9
 8014dfa:	f880 a001 	strb.w	sl, [r0, #1]
 8014dfe:	f109 0201 	add.w	r2, r9, #1
 8014e02:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8014e06:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e0a:	f880 9002 	strb.w	r9, [r0, #2]
 8014e0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014e10:	3701      	adds	r7, #1
 8014e12:	4415      	add	r5, r2
 8014e14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e16:	4414      	add	r4, r2
 8014e18:	e756      	b.n	8014cc8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014e1a:	4438      	add	r0, r7
 8014e1c:	f806 e000 	strb.w	lr, [r6, r0]
 8014e20:	4430      	add	r0, r6
 8014e22:	f880 a001 	strb.w	sl, [r0, #1]
 8014e26:	f880 b002 	strb.w	fp, [r0, #2]
 8014e2a:	e7f0      	b.n	8014e0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014e2c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8014e30:	f800 9c02 	strb.w	r9, [r0, #-2]
 8014e34:	f800 bc01 	strb.w	fp, [r0, #-1]
 8014e38:	e73d      	b.n	8014cb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014e3a:	b005      	add	sp, #20
 8014e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e40:	2000df74 	.word	0x2000df74

08014e44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8014e44:	4770      	bx	lr

08014e46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8014e46:	4770      	bx	lr

08014e48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8014e48:	4770      	bx	lr

08014e4a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8014e4a:	4770      	bx	lr

08014e4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8014e4c:	4770      	bx	lr

08014e4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8014e4e:	4770      	bx	lr

08014e50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8014e50:	4770      	bx	lr

08014e52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8014e52:	4770      	bx	lr

08014e54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8014e54:	4770      	bx	lr

08014e56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8014e56:	4770      	bx	lr

08014e58 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014e58:	4770      	bx	lr

08014e5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8014e5a:	4770      	bx	lr

08014e5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8014e5c:	4770      	bx	lr

08014e5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8014e5e:	4770      	bx	lr

08014e60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8014e60:	4770      	bx	lr

08014e62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8014e62:	4770      	bx	lr

08014e64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8014e64:	4770      	bx	lr

08014e66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8014e66:	4770      	bx	lr

08014e68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014e68:	4770      	bx	lr

08014e6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8014e6a:	4770      	bx	lr

08014e6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014e6c:	2bff      	cmp	r3, #255	; 0xff
 8014e6e:	b508      	push	{r3, lr}
 8014e70:	d04f      	beq.n	8014f12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8014e72:	2a2c      	cmp	r2, #44	; 0x2c
 8014e74:	d032      	beq.n	8014edc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8014e76:	d80f      	bhi.n	8014e98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8014e78:	2a08      	cmp	r2, #8
 8014e7a:	d046      	beq.n	8014f0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8014e7c:	d805      	bhi.n	8014e8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8014e7e:	2a04      	cmp	r2, #4
 8014e80:	d041      	beq.n	8014f06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8014e82:	2a05      	cmp	r2, #5
 8014e84:	d03d      	beq.n	8014f02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8014e86:	2000      	movs	r0, #0
 8014e88:	e027      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014e8a:	2a0a      	cmp	r2, #10
 8014e8c:	d03d      	beq.n	8014f0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8014e8e:	d301      	bcc.n	8014e94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8014e90:	2a0b      	cmp	r2, #11
 8014e92:	d1f8      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014e94:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8014e96:	e020      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014e98:	2a30      	cmp	r2, #48	; 0x30
 8014e9a:	d038      	beq.n	8014f0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014e9c:	d808      	bhi.n	8014eb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8014e9e:	2a2e      	cmp	r2, #46	; 0x2e
 8014ea0:	684b      	ldr	r3, [r1, #4]
 8014ea2:	d029      	beq.n	8014ef8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8014ea4:	d90b      	bls.n	8014ebe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d1ec      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014eac:	6a00      	ldr	r0, [r0, #32]
 8014eae:	e014      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014eb0:	2a32      	cmp	r2, #50	; 0x32
 8014eb2:	d02c      	beq.n	8014f0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014eb4:	d301      	bcc.n	8014eba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8014eb6:	2a33      	cmp	r2, #51	; 0x33
 8014eb8:	d1e5      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014eba:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8014ebc:	e00d      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	2b01      	cmp	r3, #1
 8014ec2:	d009      	beq.n	8014ed8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8014ec4:	d3f2      	bcc.n	8014eac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8014ec6:	2b02      	cmp	r3, #2
 8014ec8:	d1dd      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014eca:	4b39      	ldr	r3, [pc, #228]	; (8014fb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014ecc:	f240 4186 	movw	r1, #1158	; 0x486
 8014ed0:	4a38      	ldr	r2, [pc, #224]	; (8014fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8014ed2:	4839      	ldr	r0, [pc, #228]	; (8014fb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8014ed4:	f006 fd76 	bl	801b9c4 <__assert_func>
 8014ed8:	6900      	ldr	r0, [r0, #16]
 8014eda:	bd08      	pop	{r3, pc}
 8014edc:	684b      	ldr	r3, [r1, #4]
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	2b01      	cmp	r3, #1
 8014ee2:	d007      	beq.n	8014ef4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8014ee4:	d30b      	bcc.n	8014efe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8014ee6:	2b02      	cmp	r3, #2
 8014ee8:	d1cd      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014eea:	4b31      	ldr	r3, [pc, #196]	; (8014fb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014eec:	f240 4192 	movw	r1, #1170	; 0x492
 8014ef0:	4a30      	ldr	r2, [pc, #192]	; (8014fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8014ef2:	e7ee      	b.n	8014ed2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8014ef4:	6880      	ldr	r0, [r0, #8]
 8014ef6:	e7f0      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014ef8:	781b      	ldrb	r3, [r3, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d1c3      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014efe:	6980      	ldr	r0, [r0, #24]
 8014f00:	e7eb      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f02:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014f04:	e7e9      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f06:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014f08:	e7e7      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8014f0c:	e7e5      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f0e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8014f10:	e7e3      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f12:	2a2c      	cmp	r2, #44	; 0x2c
 8014f14:	d030      	beq.n	8014f78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8014f16:	d80f      	bhi.n	8014f38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8014f18:	2a08      	cmp	r2, #8
 8014f1a:	d044      	beq.n	8014fa6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8014f1c:	d805      	bhi.n	8014f2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8014f1e:	2a04      	cmp	r2, #4
 8014f20:	d03f      	beq.n	8014fa2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8014f22:	2a05      	cmp	r2, #5
 8014f24:	d1af      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014f26:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014f28:	e7d7      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f2a:	2a0a      	cmp	r2, #10
 8014f2c:	d03b      	beq.n	8014fa6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8014f2e:	d301      	bcc.n	8014f34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8014f30:	2a0b      	cmp	r2, #11
 8014f32:	d1a8      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014f34:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8014f36:	e7d0      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f38:	2a30      	cmp	r2, #48	; 0x30
 8014f3a:	d036      	beq.n	8014faa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014f3c:	d808      	bhi.n	8014f50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8014f3e:	2a2e      	cmp	r2, #46	; 0x2e
 8014f40:	684b      	ldr	r3, [r1, #4]
 8014f42:	d028      	beq.n	8014f96 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8014f44:	d90b      	bls.n	8014f5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d19c      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014f4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8014f4e:	e7c4      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f50:	2a32      	cmp	r2, #50	; 0x32
 8014f52:	d02a      	beq.n	8014faa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014f54:	d301      	bcc.n	8014f5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8014f56:	2a33      	cmp	r2, #51	; 0x33
 8014f58:	d195      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014f5a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8014f5c:	e7bd      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	2b01      	cmp	r3, #1
 8014f62:	d007      	beq.n	8014f74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8014f64:	d3f2      	bcc.n	8014f4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8014f66:	2b02      	cmp	r3, #2
 8014f68:	d18d      	bne.n	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014f6a:	4b11      	ldr	r3, [pc, #68]	; (8014fb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014f6c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8014f70:	4a10      	ldr	r2, [pc, #64]	; (8014fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8014f72:	e7ae      	b.n	8014ed2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8014f74:	6940      	ldr	r0, [r0, #20]
 8014f76:	e7b0      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f78:	684b      	ldr	r3, [r1, #4]
 8014f7a:	781b      	ldrb	r3, [r3, #0]
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d008      	beq.n	8014f92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8014f80:	d30d      	bcc.n	8014f9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8014f82:	2b02      	cmp	r3, #2
 8014f84:	f47f af7f 	bne.w	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014f88:	4b09      	ldr	r3, [pc, #36]	; (8014fb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014f8a:	f240 41cf 	movw	r1, #1231	; 0x4cf
 8014f8e:	4a09      	ldr	r2, [pc, #36]	; (8014fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8014f90:	e79f      	b.n	8014ed2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8014f92:	68c0      	ldr	r0, [r0, #12]
 8014f94:	e7a1      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	f47f af74 	bne.w	8014e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014f9e:	69c0      	ldr	r0, [r0, #28]
 8014fa0:	e79b      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014fa2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014fa4:	e799      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014fa6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8014fa8:	e797      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014faa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8014fac:	e795      	b.n	8014eda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014fae:	bf00      	nop
 8014fb0:	0801f8a3 	.word	0x0801f8a3
 8014fb4:	080200c8 	.word	0x080200c8
 8014fb8:	0801f8ef 	.word	0x0801f8ef

08014fbc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8014fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fc0:	b085      	sub	sp, #20
 8014fc2:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 8014fc6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014fc8:	f1be 0f00 	cmp.w	lr, #0
 8014fcc:	f000 8114 	beq.w	80151f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 8014fd0:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 8014fd4:	f1bc 0f00 	cmp.w	ip, #0
 8014fd8:	f340 810e 	ble.w	80151f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 8014fdc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	f340 8109 	ble.w	80151f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 8014fe6:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8014fea:	4350      	muls	r0, r2
 8014fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ff0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8014ff4:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 8014ff8:	eba2 060c 	sub.w	r6, r2, ip
 8014ffc:	fb02 3305 	mla	r3, r2, r5, r3
 8015000:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015004:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015008:	fa5f f88b 	uxtb.w	r8, fp
 801500c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015010:	fa5f f78a 	uxtb.w	r7, sl
 8015014:	4419      	add	r1, r3
 8015016:	fa5f f984 	uxtb.w	r9, r4
 801501a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801501e:	4408      	add	r0, r1
 8015020:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8015024:	d03e      	beq.n	80150a4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 8015026:	fa1f f58e 	uxth.w	r5, lr
 801502a:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801502e:	4463      	add	r3, ip
 8015030:	fb08 f405 	mul.w	r4, r8, r5
 8015034:	b292      	uxth	r2, r2
 8015036:	436f      	muls	r7, r5
 8015038:	fb09 f505 	mul.w	r5, r9, r5
 801503c:	4281      	cmp	r1, r0
 801503e:	f080 80db 	bcs.w	80151f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 8015042:	eb01 0c03 	add.w	ip, r1, r3
 8015046:	458c      	cmp	ip, r1
 8015048:	f101 0e03 	add.w	lr, r1, #3
 801504c:	d928      	bls.n	80150a0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801504e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8015052:	fb11 f102 	smulbb	r1, r1, r2
 8015056:	4429      	add	r1, r5
 8015058:	b289      	uxth	r1, r1
 801505a:	f101 0801 	add.w	r8, r1, #1
 801505e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015062:	1209      	asrs	r1, r1, #8
 8015064:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8015068:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801506c:	fb11 f102 	smulbb	r1, r1, r2
 8015070:	4439      	add	r1, r7
 8015072:	b289      	uxth	r1, r1
 8015074:	f101 0801 	add.w	r8, r1, #1
 8015078:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801507c:	1209      	asrs	r1, r1, #8
 801507e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8015082:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8015086:	fb11 f102 	smulbb	r1, r1, r2
 801508a:	4421      	add	r1, r4
 801508c:	b289      	uxth	r1, r1
 801508e:	f101 0801 	add.w	r8, r1, #1
 8015092:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015096:	1209      	asrs	r1, r1, #8
 8015098:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801509c:	4671      	mov	r1, lr
 801509e:	e7d2      	b.n	8015046 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 80150a0:	4431      	add	r1, r6
 80150a2:	e7cb      	b.n	801503c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 80150a4:	f012 0503 	ands.w	r5, r2, #3
 80150a8:	d00f      	beq.n	80150ca <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 80150aa:	4463      	add	r3, ip
 80150ac:	4281      	cmp	r1, r0
 80150ae:	f080 80a3 	bcs.w	80151f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 80150b2:	18ca      	adds	r2, r1, r3
 80150b4:	4291      	cmp	r1, r2
 80150b6:	f080 809d 	bcs.w	80151f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 80150ba:	f881 9000 	strb.w	r9, [r1]
 80150be:	3103      	adds	r1, #3
 80150c0:	f801 7c02 	strb.w	r7, [r1, #-2]
 80150c4:	f801 8c01 	strb.w	r8, [r1, #-1]
 80150c8:	e7f4      	b.n	80150b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 80150ca:	f001 0603 	and.w	r6, r1, #3
 80150ce:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 80150d2:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 80150d6:	4463      	add	r3, ip
 80150d8:	2e02      	cmp	r6, #2
 80150da:	b2bf      	uxth	r7, r7
 80150dc:	fa1f fa8a 	uxth.w	sl, sl
 80150e0:	d017      	beq.n	8015112 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 80150e2:	2e03      	cmp	r6, #3
 80150e4:	d00c      	beq.n	8015100 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 80150e6:	2e01      	cmp	r6, #1
 80150e8:	d11f      	bne.n	801512a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 80150ea:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 80150ee:	460d      	mov	r5, r1
 80150f0:	4285      	cmp	r5, r0
 80150f2:	d230      	bcs.n	8015156 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 80150f4:	f885 9000 	strb.w	r9, [r5]
 80150f8:	f8a5 7001 	strh.w	r7, [r5, #1]
 80150fc:	4435      	add	r5, r6
 80150fe:	e7f7      	b.n	80150f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 8015100:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8015104:	460d      	mov	r5, r1
 8015106:	4285      	cmp	r5, r0
 8015108:	d20c      	bcs.n	8015124 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801510a:	f885 9000 	strb.w	r9, [r5]
 801510e:	4435      	add	r5, r6
 8015110:	e7f9      	b.n	8015106 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8015112:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8015116:	460d      	mov	r5, r1
 8015118:	4285      	cmp	r5, r0
 801511a:	d218      	bcs.n	801514e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801511c:	f8a5 a000 	strh.w	sl, [r5]
 8015120:	4435      	add	r5, r6
 8015122:	e7f9      	b.n	8015118 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 8015124:	3b01      	subs	r3, #1
 8015126:	3101      	adds	r1, #1
 8015128:	2501      	movs	r5, #1
 801512a:	f003 0603 	and.w	r6, r3, #3
 801512e:	2e02      	cmp	r6, #2
 8015130:	d021      	beq.n	8015176 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 8015132:	2e03      	cmp	r6, #3
 8015134:	d013      	beq.n	801515e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 8015136:	2e01      	cmp	r6, #1
 8015138:	d126      	bne.n	8015188 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801513a:	3b01      	subs	r3, #1
 801513c:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8015140:	18ce      	adds	r6, r1, r3
 8015142:	4286      	cmp	r6, r0
 8015144:	d220      	bcs.n	8015188 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 8015146:	f886 8000 	strb.w	r8, [r6]
 801514a:	443e      	add	r6, r7
 801514c:	e7f9      	b.n	8015142 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801514e:	3b02      	subs	r3, #2
 8015150:	3102      	adds	r1, #2
 8015152:	2502      	movs	r5, #2
 8015154:	e7e9      	b.n	801512a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 8015156:	3b03      	subs	r3, #3
 8015158:	3103      	adds	r1, #3
 801515a:	2500      	movs	r5, #0
 801515c:	e7e5      	b.n	801512a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801515e:	3b03      	subs	r3, #3
 8015160:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8015164:	18ce      	adds	r6, r1, r3
 8015166:	4286      	cmp	r6, r0
 8015168:	d20e      	bcs.n	8015188 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801516a:	f8a6 a000 	strh.w	sl, [r6]
 801516e:	f886 8002 	strb.w	r8, [r6, #2]
 8015172:	443e      	add	r6, r7
 8015174:	e7f7      	b.n	8015166 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 8015176:	3b02      	subs	r3, #2
 8015178:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801517c:	18ce      	adds	r6, r1, r3
 801517e:	4286      	cmp	r6, r0
 8015180:	d202      	bcs.n	8015188 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 8015182:	8037      	strh	r7, [r6, #0]
 8015184:	4466      	add	r6, ip
 8015186:	e7fa      	b.n	801517e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 8015188:	079e      	lsls	r6, r3, #30
 801518a:	d006      	beq.n	801519a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801518c:	4b1c      	ldr	r3, [pc, #112]	; (8015200 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801518e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8015192:	4a1c      	ldr	r2, [pc, #112]	; (8015204 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 8015194:	481c      	ldr	r0, [pc, #112]	; (8015208 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 8015196:	f006 fc15 	bl	801b9c4 <__assert_func>
 801519a:	b36b      	cbz	r3, 80151f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801519c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80151a0:	109b      	asrs	r3, r3, #2
 80151a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80151a6:	2703      	movs	r7, #3
 80151a8:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 80151ac:	9601      	str	r6, [sp, #4]
 80151ae:	0426      	lsls	r6, r4, #16
 80151b0:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 80151b4:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 80151b8:	9602      	str	r6, [sp, #8]
 80151ba:	009e      	lsls	r6, r3, #2
 80151bc:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 80151c0:	9403      	str	r4, [sp, #12]
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	4281      	cmp	r1, r0
 80151c6:	d217      	bcs.n	80151f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 80151c8:	eb01 0c06 	add.w	ip, r1, r6
 80151cc:	462a      	mov	r2, r5
 80151ce:	4561      	cmp	r1, ip
 80151d0:	d20e      	bcs.n	80151f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 80151d2:	f10d 0e10 	add.w	lr, sp, #16
 80151d6:	1c54      	adds	r4, r2, #1
 80151d8:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 80151dc:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 80151e0:	f841 2b04 	str.w	r2, [r1], #4
 80151e4:	fb94 f2f7 	sdiv	r2, r4, r7
 80151e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80151ec:	1aa2      	subs	r2, r4, r2
 80151ee:	e7ee      	b.n	80151ce <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 80151f0:	4419      	add	r1, r3
 80151f2:	e7e7      	b.n	80151c4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 80151f4:	4431      	add	r1, r6
 80151f6:	e759      	b.n	80150ac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 80151f8:	b005      	add	sp, #20
 80151fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151fe:	bf00      	nop
 8015200:	0801f7bf 	.word	0x0801f7bf
 8015204:	0801fe12 	.word	0x0801fe12
 8015208:	0801f8ef 	.word	0x0801f8ef

0801520c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801520c:	b508      	push	{r3, lr}
 801520e:	4b06      	ldr	r3, [pc, #24]	; (8015228 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8015210:	8818      	ldrh	r0, [r3, #0]
 8015212:	b928      	cbnz	r0, 8015220 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8015214:	4b05      	ldr	r3, [pc, #20]	; (801522c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8015216:	214d      	movs	r1, #77	; 0x4d
 8015218:	4a05      	ldr	r2, [pc, #20]	; (8015230 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801521a:	4806      	ldr	r0, [pc, #24]	; (8015234 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801521c:	f006 fbd2 	bl	801b9c4 <__assert_func>
 8015220:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015224:	b280      	uxth	r0, r0
 8015226:	bd08      	pop	{r3, pc}
 8015228:	2000df66 	.word	0x2000df66
 801522c:	0801fb3c 	.word	0x0801fb3c
 8015230:	0802008d 	.word	0x0802008d
 8015234:	0801fb7e 	.word	0x0801fb7e

08015238 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8015238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801523c:	b08b      	sub	sp, #44	; 0x2c
 801523e:	460d      	mov	r5, r1
 8015240:	4616      	mov	r6, r2
 8015242:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8015246:	f1b8 0f00 	cmp.w	r8, #0
 801524a:	d045      	beq.n	80152d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801524c:	6810      	ldr	r0, [r2, #0]
 801524e:	ac06      	add	r4, sp, #24
 8015250:	6851      	ldr	r1, [r2, #4]
 8015252:	4f50      	ldr	r7, [pc, #320]	; (8015394 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 8015254:	c403      	stmia	r4!, {r0, r1}
 8015256:	6818      	ldr	r0, [r3, #0]
 8015258:	ac08      	add	r4, sp, #32
 801525a:	6859      	ldr	r1, [r3, #4]
 801525c:	c403      	stmia	r4!, {r0, r1}
 801525e:	a806      	add	r0, sp, #24
 8015260:	f7fb fa16 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015264:	4631      	mov	r1, r6
 8015266:	a808      	add	r0, sp, #32
 8015268:	f7fb f9fa 	bl	8010660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801526c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015270:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015274:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015278:	6838      	ldr	r0, [r7, #0]
 801527a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801527e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8015282:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8015286:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801528a:	440d      	add	r5, r1
 801528c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8015290:	440a      	add	r2, r1
 8015292:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015296:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801529a:	4413      	add	r3, r2
 801529c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80152a0:	6803      	ldr	r3, [r0, #0]
 80152a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80152a4:	4798      	blx	r3
 80152a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80152aa:	d018      	beq.n	80152de <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 80152ac:	f010 0f04 	tst.w	r0, #4
 80152b0:	6838      	ldr	r0, [r7, #0]
 80152b2:	d017      	beq.n	80152e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80152b4:	2700      	movs	r7, #0
 80152b6:	6801      	ldr	r1, [r0, #0]
 80152b8:	b2a4      	uxth	r4, r4
 80152ba:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80152be:	b2b6      	uxth	r6, r6
 80152c0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80152c4:	9401      	str	r4, [sp, #4]
 80152c6:	9600      	str	r6, [sp, #0]
 80152c8:	e9cd 8703 	strd	r8, r7, [sp, #12]
 80152cc:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80152d0:	9702      	str	r7, [sp, #8]
 80152d2:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 80152d4:	4629      	mov	r1, r5
 80152d6:	47a0      	blx	r4
 80152d8:	b00b      	add	sp, #44	; 0x2c
 80152da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152de:	f010 0f01 	tst.w	r0, #1
 80152e2:	e7e5      	b.n	80152b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80152e4:	6803      	ldr	r3, [r0, #0]
 80152e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152e8:	4798      	blx	r3
 80152ea:	4a2b      	ldr	r2, [pc, #172]	; (8015398 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80152ec:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80152f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80152f4:	8813      	ldrh	r3, [r2, #0]
 80152f6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80152fa:	fb03 f404 	mul.w	r4, r3, r4
 80152fe:	fb03 c101 	mla	r1, r3, r1, ip
 8015302:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015306:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801530a:	4408      	add	r0, r1
 801530c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015310:	4404      	add	r4, r0
 8015312:	d02e      	beq.n	8015372 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 8015314:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8015318:	1b9b      	subs	r3, r3, r6
 801531a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801531e:	1b96      	subs	r6, r2, r6
 8015320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015324:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015328:	42a0      	cmp	r0, r4
 801532a:	d22d      	bcs.n	8015388 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801532c:	eb00 0e01 	add.w	lr, r0, r1
 8015330:	4570      	cmp	r0, lr
 8015332:	d210      	bcs.n	8015356 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8015334:	f890 9000 	ldrb.w	r9, [r0]
 8015338:	f815 2b01 	ldrb.w	r2, [r5], #1
 801533c:	fb19 f90c 	smulbb	r9, r9, ip
 8015340:	fb02 9208 	mla	r2, r2, r8, r9
 8015344:	b292      	uxth	r2, r2
 8015346:	f102 0901 	add.w	r9, r2, #1
 801534a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801534e:	1212      	asrs	r2, r2, #8
 8015350:	f800 2b01 	strb.w	r2, [r0], #1
 8015354:	e7ec      	b.n	8015330 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 8015356:	4418      	add	r0, r3
 8015358:	4435      	add	r5, r6
 801535a:	e7e5      	b.n	8015328 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801535c:	8813      	ldrh	r3, [r2, #0]
 801535e:	1b9b      	subs	r3, r3, r6
 8015360:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015364:	4418      	add	r0, r3
 8015366:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801536a:	1b9b      	subs	r3, r3, r6
 801536c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015370:	441d      	add	r5, r3
 8015372:	42a0      	cmp	r0, r4
 8015374:	d208      	bcs.n	8015388 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 8015376:	eb00 0c01 	add.w	ip, r0, r1
 801537a:	4560      	cmp	r0, ip
 801537c:	d2ee      	bcs.n	801535c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801537e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015382:	f800 3b01 	strb.w	r3, [r0], #1
 8015386:	e7f8      	b.n	801537a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 8015388:	6838      	ldr	r0, [r7, #0]
 801538a:	6803      	ldr	r3, [r0, #0]
 801538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801538e:	4798      	blx	r3
 8015390:	e7a2      	b.n	80152d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 8015392:	bf00      	nop
 8015394:	2000df6c 	.word	0x2000df6c
 8015398:	2000df66 	.word	0x2000df66

0801539c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801539c:	b510      	push	{r4, lr}
 801539e:	4604      	mov	r4, r0
 80153a0:	2104      	movs	r1, #4
 80153a2:	f006 fae0 	bl	801b966 <_ZdlPvj>
 80153a6:	4620      	mov	r0, r4
 80153a8:	bd10      	pop	{r4, pc}

080153aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80153aa:	b510      	push	{r4, lr}
 80153ac:	4604      	mov	r4, r0
 80153ae:	2104      	movs	r1, #4
 80153b0:	f006 fad9 	bl	801b966 <_ZdlPvj>
 80153b4:	4620      	mov	r0, r4
 80153b6:	bd10      	pop	{r4, pc}

080153b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80153b8:	b510      	push	{r4, lr}
 80153ba:	4604      	mov	r4, r0
 80153bc:	2104      	movs	r1, #4
 80153be:	f006 fad2 	bl	801b966 <_ZdlPvj>
 80153c2:	4620      	mov	r0, r4
 80153c4:	bd10      	pop	{r4, pc}

080153c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80153c6:	b510      	push	{r4, lr}
 80153c8:	4604      	mov	r4, r0
 80153ca:	2104      	movs	r1, #4
 80153cc:	f006 facb 	bl	801b966 <_ZdlPvj>
 80153d0:	4620      	mov	r0, r4
 80153d2:	bd10      	pop	{r4, pc}

080153d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80153d4:	b510      	push	{r4, lr}
 80153d6:	4604      	mov	r4, r0
 80153d8:	2104      	movs	r1, #4
 80153da:	f006 fac4 	bl	801b966 <_ZdlPvj>
 80153de:	4620      	mov	r0, r4
 80153e0:	bd10      	pop	{r4, pc}

080153e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80153e2:	b510      	push	{r4, lr}
 80153e4:	4604      	mov	r4, r0
 80153e6:	2104      	movs	r1, #4
 80153e8:	f006 fabd 	bl	801b966 <_ZdlPvj>
 80153ec:	4620      	mov	r0, r4
 80153ee:	bd10      	pop	{r4, pc}

080153f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80153f0:	b510      	push	{r4, lr}
 80153f2:	4604      	mov	r4, r0
 80153f4:	2104      	movs	r1, #4
 80153f6:	f006 fab6 	bl	801b966 <_ZdlPvj>
 80153fa:	4620      	mov	r0, r4
 80153fc:	bd10      	pop	{r4, pc}

080153fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80153fe:	b510      	push	{r4, lr}
 8015400:	4604      	mov	r4, r0
 8015402:	2104      	movs	r1, #4
 8015404:	f006 faaf 	bl	801b966 <_ZdlPvj>
 8015408:	4620      	mov	r0, r4
 801540a:	bd10      	pop	{r4, pc}

0801540c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801540c:	b510      	push	{r4, lr}
 801540e:	4604      	mov	r4, r0
 8015410:	2104      	movs	r1, #4
 8015412:	f006 faa8 	bl	801b966 <_ZdlPvj>
 8015416:	4620      	mov	r0, r4
 8015418:	bd10      	pop	{r4, pc}

0801541a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801541a:	b510      	push	{r4, lr}
 801541c:	4604      	mov	r4, r0
 801541e:	2104      	movs	r1, #4
 8015420:	f006 faa1 	bl	801b966 <_ZdlPvj>
 8015424:	4620      	mov	r0, r4
 8015426:	bd10      	pop	{r4, pc}

08015428 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015428:	b510      	push	{r4, lr}
 801542a:	4604      	mov	r4, r0
 801542c:	2104      	movs	r1, #4
 801542e:	f006 fa9a 	bl	801b966 <_ZdlPvj>
 8015432:	4620      	mov	r0, r4
 8015434:	bd10      	pop	{r4, pc}

08015436 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8015436:	b510      	push	{r4, lr}
 8015438:	4604      	mov	r4, r0
 801543a:	2104      	movs	r1, #4
 801543c:	f006 fa93 	bl	801b966 <_ZdlPvj>
 8015440:	4620      	mov	r0, r4
 8015442:	bd10      	pop	{r4, pc}

08015444 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015444:	b510      	push	{r4, lr}
 8015446:	4604      	mov	r4, r0
 8015448:	2104      	movs	r1, #4
 801544a:	f006 fa8c 	bl	801b966 <_ZdlPvj>
 801544e:	4620      	mov	r0, r4
 8015450:	bd10      	pop	{r4, pc}

08015452 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015452:	b510      	push	{r4, lr}
 8015454:	4604      	mov	r4, r0
 8015456:	2104      	movs	r1, #4
 8015458:	f006 fa85 	bl	801b966 <_ZdlPvj>
 801545c:	4620      	mov	r0, r4
 801545e:	bd10      	pop	{r4, pc}

08015460 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015460:	b510      	push	{r4, lr}
 8015462:	4604      	mov	r4, r0
 8015464:	2104      	movs	r1, #4
 8015466:	f006 fa7e 	bl	801b966 <_ZdlPvj>
 801546a:	4620      	mov	r0, r4
 801546c:	bd10      	pop	{r4, pc}

0801546e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801546e:	b510      	push	{r4, lr}
 8015470:	4604      	mov	r4, r0
 8015472:	2104      	movs	r1, #4
 8015474:	f006 fa77 	bl	801b966 <_ZdlPvj>
 8015478:	4620      	mov	r0, r4
 801547a:	bd10      	pop	{r4, pc}

0801547c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801547c:	b510      	push	{r4, lr}
 801547e:	4604      	mov	r4, r0
 8015480:	2104      	movs	r1, #4
 8015482:	f006 fa70 	bl	801b966 <_ZdlPvj>
 8015486:	4620      	mov	r0, r4
 8015488:	bd10      	pop	{r4, pc}

0801548a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801548a:	b510      	push	{r4, lr}
 801548c:	4604      	mov	r4, r0
 801548e:	2104      	movs	r1, #4
 8015490:	f006 fa69 	bl	801b966 <_ZdlPvj>
 8015494:	4620      	mov	r0, r4
 8015496:	bd10      	pop	{r4, pc}

08015498 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8015498:	b510      	push	{r4, lr}
 801549a:	4604      	mov	r4, r0
 801549c:	2104      	movs	r1, #4
 801549e:	f006 fa62 	bl	801b966 <_ZdlPvj>
 80154a2:	4620      	mov	r0, r4
 80154a4:	bd10      	pop	{r4, pc}

080154a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80154a6:	b510      	push	{r4, lr}
 80154a8:	4604      	mov	r4, r0
 80154aa:	2104      	movs	r1, #4
 80154ac:	f006 fa5b 	bl	801b966 <_ZdlPvj>
 80154b0:	4620      	mov	r0, r4
 80154b2:	bd10      	pop	{r4, pc}

080154b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80154b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154b6:	4606      	mov	r6, r0
 80154b8:	b087      	sub	sp, #28
 80154ba:	4615      	mov	r5, r2
 80154bc:	461f      	mov	r7, r3
 80154be:	b343      	cbz	r3, 8015512 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 80154c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	dd24      	ble.n	8015512 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 80154c8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	dd20      	ble.n	8015512 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 80154d0:	6808      	ldr	r0, [r1, #0]
 80154d2:	aa04      	add	r2, sp, #16
 80154d4:	6849      	ldr	r1, [r1, #4]
 80154d6:	4c1a      	ldr	r4, [pc, #104]	; (8015540 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80154d8:	c203      	stmia	r2!, {r0, r1}
 80154da:	a804      	add	r0, sp, #16
 80154dc:	f7fb f8d8 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80154e0:	6820      	ldr	r0, [r4, #0]
 80154e2:	6803      	ldr	r3, [r0, #0]
 80154e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154e6:	4798      	blx	r3
 80154e8:	2fff      	cmp	r7, #255	; 0xff
 80154ea:	d014      	beq.n	8015516 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80154ec:	f010 0f08 	tst.w	r0, #8
 80154f0:	6820      	ldr	r0, [r4, #0]
 80154f2:	d013      	beq.n	801551c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 80154f4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80154f8:	6801      	ldr	r1, [r0, #0]
 80154fa:	9401      	str	r4, [sp, #4]
 80154fc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8015500:	9702      	str	r7, [sp, #8]
 8015502:	9400      	str	r4, [sp, #0]
 8015504:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015508:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801550a:	4629      	mov	r1, r5
 801550c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015510:	47a0      	blx	r4
 8015512:	b007      	add	sp, #28
 8015514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015516:	f010 0f02 	tst.w	r0, #2
 801551a:	e7e9      	b.n	80154f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801551c:	6803      	ldr	r3, [r0, #0]
 801551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015520:	4798      	blx	r3
 8015522:	4b08      	ldr	r3, [pc, #32]	; (8015544 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8015524:	4601      	mov	r1, r0
 8015526:	4630      	mov	r0, r6
 8015528:	881a      	ldrh	r2, [r3, #0]
 801552a:	6833      	ldr	r3, [r6, #0]
 801552c:	e9cd 5700 	strd	r5, r7, [sp]
 8015530:	69dd      	ldr	r5, [r3, #28]
 8015532:	ab04      	add	r3, sp, #16
 8015534:	47a8      	blx	r5
 8015536:	6820      	ldr	r0, [r4, #0]
 8015538:	6803      	ldr	r3, [r0, #0]
 801553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801553c:	4798      	blx	r3
 801553e:	e7e8      	b.n	8015512 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 8015540:	2000df6c 	.word	0x2000df6c
 8015544:	2000df66 	.word	0x2000df66

08015548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8015548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801554c:	4db4      	ldr	r5, [pc, #720]	; (8015820 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801554e:	4690      	mov	r8, r2
 8015550:	b08d      	sub	sp, #52	; 0x34
 8015552:	4604      	mov	r4, r0
 8015554:	682a      	ldr	r2, [r5, #0]
 8015556:	4689      	mov	r9, r1
 8015558:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801555c:	2a02      	cmp	r2, #2
 801555e:	d106      	bne.n	801556e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8015560:	4bb0      	ldr	r3, [pc, #704]	; (8015824 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 8015562:	f240 11ed 	movw	r1, #493	; 0x1ed
 8015566:	4ab0      	ldr	r2, [pc, #704]	; (8015828 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015568:	48b0      	ldr	r0, [pc, #704]	; (801582c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801556a:	f006 fa2b 	bl	801b9c4 <__assert_func>
 801556e:	ae0c      	add	r6, sp, #48	; 0x30
 8015570:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 8015574:	4630      	mov	r0, r6
 8015576:	f7fe f815 	bl	80135a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801557a:	6823      	ldr	r3, [r4, #0]
 801557c:	4607      	mov	r7, r0
 801557e:	4620      	mov	r0, r4
 8015580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015582:	4798      	blx	r3
 8015584:	4287      	cmp	r7, r0
 8015586:	d004      	beq.n	8015592 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8015588:	4ba9      	ldr	r3, [pc, #676]	; (8015830 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801558a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801558e:	4aa6      	ldr	r2, [pc, #664]	; (8015828 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015590:	e7ea      	b.n	8015568 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015592:	4630      	mov	r0, r6
 8015594:	f7fd ff7c 	bl	8013490 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015598:	4607      	mov	r7, r0
 801559a:	b920      	cbnz	r0, 80155a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801559c:	4ba5      	ldr	r3, [pc, #660]	; (8015834 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801559e:	f240 11f1 	movw	r1, #497	; 0x1f1
 80155a2:	4aa1      	ldr	r2, [pc, #644]	; (8015828 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 80155a4:	e7e0      	b.n	8015568 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80155a6:	f8d8 0000 	ldr.w	r0, [r8]
 80155aa:	ab06      	add	r3, sp, #24
 80155ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80155b0:	f9b8 a000 	ldrsh.w	sl, [r8]
 80155b4:	c303      	stmia	r3!, {r0, r1}
 80155b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80155ba:	ab08      	add	r3, sp, #32
 80155bc:	f8d9 0000 	ldr.w	r0, [r9]
 80155c0:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 80155c4:	c303      	stmia	r3!, {r0, r1}
 80155c6:	4630      	mov	r0, r6
 80155c8:	f7fd fe94 	bl	80132f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80155cc:	4680      	mov	r8, r0
 80155ce:	4630      	mov	r0, r6
 80155d0:	f7fd feca 	bl	8013368 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80155d4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80155d8:	f10d 0920 	add.w	r9, sp, #32
 80155dc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80155e0:	a806      	add	r0, sp, #24
 80155e2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80155e6:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 80155ea:	f7fb f851 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80155ee:	4648      	mov	r0, r9
 80155f0:	f7fb f84e 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80155f4:	a80a      	add	r0, sp, #40	; 0x28
 80155f6:	f7fb f84b 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80155fa:	4b8f      	ldr	r3, [pc, #572]	; (8015838 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 80155fc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015600:	881e      	ldrh	r6, [r3, #0]
 8015602:	4b8e      	ldr	r3, [pc, #568]	; (801583c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8015604:	fa0f fb86 	sxth.w	fp, r6
 8015608:	8819      	ldrh	r1, [r3, #0]
 801560a:	4593      	cmp	fp, r2
 801560c:	dd75      	ble.n	80156fa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801560e:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8015612:	4494      	add	ip, r2
 8015614:	fa1f fc8c 	uxth.w	ip, ip
 8015618:	fa0f fa8c 	sxth.w	sl, ip
 801561c:	f1ba 0f00 	cmp.w	sl, #0
 8015620:	dd6b      	ble.n	80156fa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015622:	fa0f f881 	sxth.w	r8, r1
 8015626:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801562a:	4598      	cmp	r8, r3
 801562c:	dd65      	ble.n	80156fa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801562e:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8015632:	4418      	add	r0, r3
 8015634:	b280      	uxth	r0, r0
 8015636:	fa0f fe80 	sxth.w	lr, r0
 801563a:	f1be 0f00 	cmp.w	lr, #0
 801563e:	dd5c      	ble.n	80156fa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015640:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8015644:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015648:	45d3      	cmp	fp, sl
 801564a:	bfc8      	it	gt
 801564c:	4666      	movgt	r6, ip
 801564e:	45f0      	cmp	r8, lr
 8015650:	bfc8      	it	gt
 8015652:	4601      	movgt	r1, r0
 8015654:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015658:	1ab6      	subs	r6, r6, r2
 801565a:	1ac9      	subs	r1, r1, r3
 801565c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015660:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8015664:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8015668:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801566c:	f1bc 0f00 	cmp.w	ip, #0
 8015670:	f340 80aa 	ble.w	80157c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015674:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8015678:	2e00      	cmp	r6, #0
 801567a:	f340 80a5 	ble.w	80157c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801567e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8015682:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8015686:	4288      	cmp	r0, r1
 8015688:	db3b      	blt.n	8015702 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801568a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801568e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015692:	429a      	cmp	r2, r3
 8015694:	db35      	blt.n	8015702 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015696:	4460      	add	r0, ip
 8015698:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801569c:	4461      	add	r1, ip
 801569e:	b200      	sxth	r0, r0
 80156a0:	b209      	sxth	r1, r1
 80156a2:	4288      	cmp	r0, r1
 80156a4:	dc2d      	bgt.n	8015702 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80156a6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80156aa:	4432      	add	r2, r6
 80156ac:	440b      	add	r3, r1
 80156ae:	b212      	sxth	r2, r2
 80156b0:	b21b      	sxth	r3, r3
 80156b2:	429a      	cmp	r2, r3
 80156b4:	dc25      	bgt.n	8015702 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80156b6:	6823      	ldr	r3, [r4, #0]
 80156b8:	4620      	mov	r0, r4
 80156ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156bc:	4798      	blx	r3
 80156be:	4682      	mov	sl, r0
 80156c0:	6828      	ldr	r0, [r5, #0]
 80156c2:	6803      	ldr	r3, [r0, #0]
 80156c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156c6:	4798      	blx	r3
 80156c8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80156cc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80156d0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80156d4:	9303      	str	r3, [sp, #12]
 80156d6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80156da:	1a9b      	subs	r3, r3, r2
 80156dc:	b29b      	uxth	r3, r3
 80156de:	b21c      	sxth	r4, r3
 80156e0:	2c00      	cmp	r4, #0
 80156e2:	dc13      	bgt.n	801570c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 80156e4:	bf18      	it	ne
 80156e6:	f8ad 2020 	strhne.w	r2, [sp, #32]
 80156ea:	463c      	mov	r4, r7
 80156ec:	bf1e      	ittt	ne
 80156ee:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 80156f2:	189b      	addne	r3, r3, r2
 80156f4:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 80156f8:	e00f      	b.n	801571a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 80156fa:	2300      	movs	r3, #0
 80156fc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015700:	e7b2      	b.n	8015668 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 8015702:	4b4f      	ldr	r3, [pc, #316]	; (8015840 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 8015704:	f240 11ff 	movw	r1, #511	; 0x1ff
 8015708:	4a47      	ldr	r2, [pc, #284]	; (8015828 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801570a:	e72d      	b.n	8015568 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801570c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015710:	ebab 0303 	sub.w	r3, fp, r3
 8015714:	443c      	add	r4, r7
 8015716:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801571a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801571e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015722:	1a9b      	subs	r3, r3, r2
 8015724:	b29b      	uxth	r3, r3
 8015726:	b219      	sxth	r1, r3
 8015728:	2900      	cmp	r1, #0
 801572a:	dd51      	ble.n	80157d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801572c:	9a03      	ldr	r2, [sp, #12]
 801572e:	fb02 4401 	mla	r4, r2, r1, r4
 8015732:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8015736:	1ad3      	subs	r3, r2, r3
 8015738:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801573c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8015740:	2b00      	cmp	r3, #0
 8015742:	dd41      	ble.n	80157c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015744:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8015748:	2e00      	cmp	r6, #0
 801574a:	dd3d      	ble.n	80157c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801574c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015750:	f04f 0803 	mov.w	r8, #3
 8015754:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015758:	fb0a f10c 	mul.w	r1, sl, ip
 801575c:	fb12 1808 	smlabb	r8, r2, r8, r1
 8015760:	4935      	ldr	r1, [pc, #212]	; (8015838 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8015762:	4480      	add	r8, r0
 8015764:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8015768:	8809      	ldrh	r1, [r1, #0]
 801576a:	4283      	cmp	r3, r0
 801576c:	eba1 0202 	sub.w	r2, r1, r2
 8015770:	bfa8      	it	ge
 8015772:	4603      	movge	r3, r0
 8015774:	4293      	cmp	r3, r2
 8015776:	bfa8      	it	ge
 8015778:	4613      	movge	r3, r2
 801577a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801577e:	4296      	cmp	r6, r2
 8015780:	bfa8      	it	ge
 8015782:	4616      	movge	r6, r2
 8015784:	4a2d      	ldr	r2, [pc, #180]	; (801583c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8015786:	8812      	ldrh	r2, [r2, #0]
 8015788:	eba2 0c0c 	sub.w	ip, r2, ip
 801578c:	4632      	mov	r2, r6
 801578e:	4566      	cmp	r6, ip
 8015790:	bfa8      	it	ge
 8015792:	4662      	movge	r2, ip
 8015794:	4299      	cmp	r1, r3
 8015796:	9202      	str	r2, [sp, #8]
 8015798:	d12d      	bne.n	80157f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801579a:	4559      	cmp	r1, fp
 801579c:	d12b      	bne.n	80157f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801579e:	6828      	ldr	r0, [r5, #0]
 80157a0:	6803      	ldr	r3, [r0, #0]
 80157a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157a4:	4798      	blx	r3
 80157a6:	07c3      	lsls	r3, r0, #31
 80157a8:	d51b      	bpl.n	80157e2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 80157aa:	6828      	ldr	r0, [r5, #0]
 80157ac:	9b02      	ldr	r3, [sp, #8]
 80157ae:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80157b2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80157b6:	6803      	ldr	r3, [r0, #0]
 80157b8:	f8cd b000 	str.w	fp, [sp]
 80157bc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80157be:	4623      	mov	r3, r4
 80157c0:	e899 0006 	ldmia.w	r9, {r1, r2}
 80157c4:	47a8      	blx	r5
 80157c6:	4607      	mov	r7, r0
 80157c8:	4638      	mov	r0, r7
 80157ca:	b00d      	add	sp, #52	; 0x34
 80157cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157d0:	bf1f      	itttt	ne
 80157d2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 80157d6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 80157da:	189b      	addne	r3, r3, r2
 80157dc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80157e0:	e7ac      	b.n	801573c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 80157e2:	6828      	ldr	r0, [r5, #0]
 80157e4:	4642      	mov	r2, r8
 80157e6:	4621      	mov	r1, r4
 80157e8:	6803      	ldr	r3, [r0, #0]
 80157ea:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80157ec:	9b02      	ldr	r3, [sp, #8]
 80157ee:	fb03 f30a 	mul.w	r3, r3, sl
 80157f2:	47a8      	blx	r5
 80157f4:	e7e8      	b.n	80157c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 80157f6:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 80157fa:	f04f 0900 	mov.w	r9, #0
 80157fe:	9b02      	ldr	r3, [sp, #8]
 8015800:	454b      	cmp	r3, r9
 8015802:	dde1      	ble.n	80157c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015804:	6828      	ldr	r0, [r5, #0]
 8015806:	4642      	mov	r2, r8
 8015808:	4621      	mov	r1, r4
 801580a:	44d0      	add	r8, sl
 801580c:	6803      	ldr	r3, [r0, #0]
 801580e:	f109 0901 	add.w	r9, r9, #1
 8015812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015814:	461e      	mov	r6, r3
 8015816:	465b      	mov	r3, fp
 8015818:	47b0      	blx	r6
 801581a:	9b03      	ldr	r3, [sp, #12]
 801581c:	441c      	add	r4, r3
 801581e:	e7ee      	b.n	80157fe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 8015820:	2000df6c 	.word	0x2000df6c
 8015824:	0801f921 	.word	0x0801f921
 8015828:	08020172 	.word	0x08020172
 801582c:	0801f8ef 	.word	0x0801f8ef
 8015830:	0801f9d3 	.word	0x0801f9d3
 8015834:	0801fa28 	.word	0x0801fa28
 8015838:	2000df66 	.word	0x2000df66
 801583c:	2000df68 	.word	0x2000df68
 8015840:	0801fa66 	.word	0x0801fa66

08015844 <_ZN8touchgfx8LCD24bppC1Ev>:
 8015844:	2200      	movs	r2, #0
 8015846:	490c      	ldr	r1, [pc, #48]	; (8015878 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8015848:	6042      	str	r2, [r0, #4]
 801584a:	6001      	str	r1, [r0, #0]
 801584c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8015850:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8015854:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8015858:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801585c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8015860:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8015864:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8015868:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801586c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8015870:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8015874:	4770      	bx	lr
 8015876:	bf00      	nop
 8015878:	0801fd4c 	.word	0x0801fd4c

0801587c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015880:	4616      	mov	r6, r2
 8015882:	b091      	sub	sp, #68	; 0x44
 8015884:	880a      	ldrh	r2, [r1, #0]
 8015886:	4607      	mov	r7, r0
 8015888:	4688      	mov	r8, r1
 801588a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801588e:	b12a      	cbz	r2, 801589c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8015890:	4b67      	ldr	r3, [pc, #412]	; (8015a30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8015892:	2160      	movs	r1, #96	; 0x60
 8015894:	4a67      	ldr	r2, [pc, #412]	; (8015a34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 8015896:	4868      	ldr	r0, [pc, #416]	; (8015a38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8015898:	f006 f894 	bl	801b9c4 <__assert_func>
 801589c:	6830      	ldr	r0, [r6, #0]
 801589e:	ac0c      	add	r4, sp, #48	; 0x30
 80158a0:	6871      	ldr	r1, [r6, #4]
 80158a2:	4d66      	ldr	r5, [pc, #408]	; (8015a3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80158a4:	f8df a198 	ldr.w	sl, [pc, #408]	; 8015a40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 80158a8:	c403      	stmia	r4!, {r0, r1}
 80158aa:	6818      	ldr	r0, [r3, #0]
 80158ac:	ac0e      	add	r4, sp, #56	; 0x38
 80158ae:	6859      	ldr	r1, [r3, #4]
 80158b0:	c403      	stmia	r4!, {r0, r1}
 80158b2:	a80c      	add	r0, sp, #48	; 0x30
 80158b4:	f7fa feec 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80158b8:	4631      	mov	r1, r6
 80158ba:	a80e      	add	r0, sp, #56	; 0x38
 80158bc:	f7fa fed0 	bl	8010660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80158c0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80158c4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80158c8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80158cc:	6828      	ldr	r0, [r5, #0]
 80158ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 80158d2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80158d6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 80158da:	440f      	add	r7, r1
 80158dc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80158e0:	440a      	add	r2, r1
 80158e2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80158e6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80158ea:	4413      	add	r3, r2
 80158ec:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80158f0:	6803      	ldr	r3, [r0, #0]
 80158f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158f4:	4798      	blx	r3
 80158f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80158fa:	6828      	ldr	r0, [r5, #0]
 80158fc:	d01d      	beq.n	801593a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 80158fe:	2201      	movs	r2, #1
 8015900:	250b      	movs	r5, #11
 8015902:	6801      	ldr	r1, [r0, #0]
 8015904:	b2a4      	uxth	r4, r4
 8015906:	b2b6      	uxth	r6, r6
 8015908:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801590c:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8015910:	f8ba 5000 	ldrh.w	r5, [sl]
 8015914:	f8cd 9010 	str.w	r9, [sp, #16]
 8015918:	9602      	str	r6, [sp, #8]
 801591a:	9401      	str	r4, [sp, #4]
 801591c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8015920:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8015924:	9203      	str	r2, [sp, #12]
 8015926:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801592a:	9200      	str	r2, [sp, #0]
 801592c:	4642      	mov	r2, r8
 801592e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8015930:	4639      	mov	r1, r7
 8015932:	47a0      	blx	r4
 8015934:	b011      	add	sp, #68	; 0x44
 8015936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801593a:	6803      	ldr	r3, [r0, #0]
 801593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801593e:	4798      	blx	r3
 8015940:	f8ba 5000 	ldrh.w	r5, [sl]
 8015944:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015948:	f04f 0e04 	mov.w	lr, #4
 801594c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015950:	436e      	muls	r6, r5
 8015952:	fb05 2303 	mla	r3, r5, r3, r2
 8015956:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801595a:	1b2d      	subs	r5, r5, r4
 801595c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015964:	4418      	add	r0, r3
 8015966:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801596a:	1982      	adds	r2, r0, r6
 801596c:	1b1b      	subs	r3, r3, r4
 801596e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015972:	930b      	str	r3, [sp, #44]	; 0x2c
 8015974:	4290      	cmp	r0, r2
 8015976:	d254      	bcs.n	8015a22 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8015978:	eb00 0a04 	add.w	sl, r0, r4
 801597c:	4550      	cmp	r0, sl
 801597e:	d24c      	bcs.n	8015a1a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 8015980:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015984:	fb1e e101 	smlabb	r1, lr, r1, lr
 8015988:	eb08 0c01 	add.w	ip, r8, r1
 801598c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8015990:	b173      	cbz	r3, 80159b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 8015992:	2bff      	cmp	r3, #255	; 0xff
 8015994:	f818 b001 	ldrb.w	fp, [r8, r1]
 8015998:	d10c      	bne.n	80159b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801599a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801599e:	d109      	bne.n	80159b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 80159a0:	f880 b000 	strb.w	fp, [r0]
 80159a4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80159a8:	7043      	strb	r3, [r0, #1]
 80159aa:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80159ae:	7083      	strb	r3, [r0, #2]
 80159b0:	3003      	adds	r0, #3
 80159b2:	e7e3      	b.n	801597c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 80159b4:	fb09 f103 	mul.w	r1, r9, r3
 80159b8:	1c4b      	adds	r3, r1, #1
 80159ba:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80159be:	7801      	ldrb	r1, [r0, #0]
 80159c0:	121b      	asrs	r3, r3, #8
 80159c2:	b29e      	uxth	r6, r3
 80159c4:	43db      	mvns	r3, r3
 80159c6:	fb1b fb06 	smulbb	fp, fp, r6
 80159ca:	b2db      	uxtb	r3, r3
 80159cc:	fb01 b103 	mla	r1, r1, r3, fp
 80159d0:	b289      	uxth	r1, r1
 80159d2:	f101 0b01 	add.w	fp, r1, #1
 80159d6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80159da:	f890 b001 	ldrb.w	fp, [r0, #1]
 80159de:	fb1b fb03 	smulbb	fp, fp, r3
 80159e2:	1209      	asrs	r1, r1, #8
 80159e4:	7001      	strb	r1, [r0, #0]
 80159e6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80159ea:	fb01 b106 	mla	r1, r1, r6, fp
 80159ee:	b289      	uxth	r1, r1
 80159f0:	f101 0b01 	add.w	fp, r1, #1
 80159f4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80159f8:	1209      	asrs	r1, r1, #8
 80159fa:	7041      	strb	r1, [r0, #1]
 80159fc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8015a00:	f890 c002 	ldrb.w	ip, [r0, #2]
 8015a04:	fb1c f303 	smulbb	r3, ip, r3
 8015a08:	fb01 3606 	mla	r6, r1, r6, r3
 8015a0c:	b2b6      	uxth	r6, r6
 8015a0e:	1c73      	adds	r3, r6, #1
 8015a10:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8015a14:	1236      	asrs	r6, r6, #8
 8015a16:	7086      	strb	r6, [r0, #2]
 8015a18:	e7ca      	b.n	80159b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 8015a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a1c:	4428      	add	r0, r5
 8015a1e:	441f      	add	r7, r3
 8015a20:	e7a8      	b.n	8015974 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8015a22:	4b06      	ldr	r3, [pc, #24]	; (8015a3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8015a24:	6818      	ldr	r0, [r3, #0]
 8015a26:	6803      	ldr	r3, [r0, #0]
 8015a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a2a:	4798      	blx	r3
 8015a2c:	e782      	b.n	8015934 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8015a2e:	bf00      	nop
 8015a30:	0801f853 	.word	0x0801f853
 8015a34:	0801ff94 	.word	0x0801ff94
 8015a38:	0801f8ef 	.word	0x0801f8ef
 8015a3c:	2000df6c 	.word	0x2000df6c
 8015a40:	2000df66 	.word	0x2000df66

08015a44 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8015a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a48:	f8b1 9000 	ldrh.w	r9, [r1]
 8015a4c:	b091      	sub	sp, #68	; 0x44
 8015a4e:	4604      	mov	r4, r0
 8015a50:	460e      	mov	r6, r1
 8015a52:	f1b9 0f01 	cmp.w	r9, #1
 8015a56:	4690      	mov	r8, r2
 8015a58:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015a5c:	d005      	beq.n	8015a6a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8015a5e:	4b68      	ldr	r3, [pc, #416]	; (8015c00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8015a60:	21ae      	movs	r1, #174	; 0xae
 8015a62:	4a68      	ldr	r2, [pc, #416]	; (8015c04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8015a64:	4868      	ldr	r0, [pc, #416]	; (8015c08 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8015a66:	f005 ffad 	bl	801b9c4 <__assert_func>
 8015a6a:	6810      	ldr	r0, [r2, #0]
 8015a6c:	ad0c      	add	r5, sp, #48	; 0x30
 8015a6e:	6851      	ldr	r1, [r2, #4]
 8015a70:	f8df a198 	ldr.w	sl, [pc, #408]	; 8015c0c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8015a74:	f8df b198 	ldr.w	fp, [pc, #408]	; 8015c10 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8015a78:	c503      	stmia	r5!, {r0, r1}
 8015a7a:	6818      	ldr	r0, [r3, #0]
 8015a7c:	ad0e      	add	r5, sp, #56	; 0x38
 8015a7e:	6859      	ldr	r1, [r3, #4]
 8015a80:	c503      	stmia	r5!, {r0, r1}
 8015a82:	a80c      	add	r0, sp, #48	; 0x30
 8015a84:	f7fa fe04 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015a88:	4641      	mov	r1, r8
 8015a8a:	a80e      	add	r0, sp, #56	; 0x38
 8015a8c:	f7fa fde8 	bl	8010660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015a90:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015a94:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015a98:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015a9c:	f8da 0000 	ldr.w	r0, [sl]
 8015aa0:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015aa4:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8015aa8:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8015aac:	440c      	add	r4, r1
 8015aae:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8015ab2:	440a      	add	r2, r1
 8015ab4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8015ab8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015abc:	4413      	add	r3, r2
 8015abe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015ac2:	6803      	ldr	r3, [r0, #0]
 8015ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ac6:	4798      	blx	r3
 8015ac8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015acc:	f8da 0000 	ldr.w	r0, [sl]
 8015ad0:	d01e      	beq.n	8015b10 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8015ad2:	220b      	movs	r2, #11
 8015ad4:	6801      	ldr	r1, [r0, #0]
 8015ad6:	f8cd 9020 	str.w	r9, [sp, #32]
 8015ada:	b2ad      	uxth	r5, r5
 8015adc:	9207      	str	r2, [sp, #28]
 8015ade:	f8bb 2000 	ldrh.w	r2, [fp]
 8015ae2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015ae6:	9206      	str	r2, [sp, #24]
 8015ae8:	2200      	movs	r2, #0
 8015aea:	9502      	str	r5, [sp, #8]
 8015aec:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8015af0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8015af4:	9203      	str	r2, [sp, #12]
 8015af6:	fa1f f288 	uxth.w	r2, r8
 8015afa:	9201      	str	r2, [sp, #4]
 8015afc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015b00:	9200      	str	r2, [sp, #0]
 8015b02:	4632      	mov	r2, r6
 8015b04:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8015b06:	4621      	mov	r1, r4
 8015b08:	47a8      	blx	r5
 8015b0a:	b011      	add	sp, #68	; 0x44
 8015b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b10:	6803      	ldr	r3, [r0, #0]
 8015b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b14:	4798      	blx	r3
 8015b16:	f8bb 2000 	ldrh.w	r2, [fp]
 8015b1a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015b1e:	f04f 0e03 	mov.w	lr, #3
 8015b22:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8015b26:	4355      	muls	r5, r2
 8015b28:	fa1f fc87 	uxth.w	ip, r7
 8015b2c:	fb02 1303 	mla	r3, r2, r3, r1
 8015b30:	eba2 0208 	sub.w	r2, r2, r8
 8015b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015b38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015b3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015b40:	4418      	add	r0, r3
 8015b42:	920b      	str	r2, [sp, #44]	; 0x2c
 8015b44:	1943      	adds	r3, r0, r5
 8015b46:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8015b4a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8015b4e:	eba2 0208 	sub.w	r2, r2, r8
 8015b52:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015b56:	b2ad      	uxth	r5, r5
 8015b58:	4298      	cmp	r0, r3
 8015b5a:	d24a      	bcs.n	8015bf2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8015b5c:	eb00 0908 	add.w	r9, r0, r8
 8015b60:	4621      	mov	r1, r4
 8015b62:	4548      	cmp	r0, r9
 8015b64:	460c      	mov	r4, r1
 8015b66:	d240      	bcs.n	8015bea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8015b68:	f04f 0a04 	mov.w	sl, #4
 8015b6c:	7824      	ldrb	r4, [r4, #0]
 8015b6e:	2fff      	cmp	r7, #255	; 0xff
 8015b70:	f101 0101 	add.w	r1, r1, #1
 8015b74:	fb1e a404 	smlabb	r4, lr, r4, sl
 8015b78:	eb06 0a04 	add.w	sl, r6, r4
 8015b7c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8015b80:	d02b      	beq.n	8015bda <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8015b82:	7804      	ldrb	r4, [r0, #0]
 8015b84:	fb14 f405 	smulbb	r4, r4, r5
 8015b88:	fb0b 440c 	mla	r4, fp, ip, r4
 8015b8c:	b2a4      	uxth	r4, r4
 8015b8e:	f104 0b01 	add.w	fp, r4, #1
 8015b92:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015b96:	f890 b001 	ldrb.w	fp, [r0, #1]
 8015b9a:	fb1b fb05 	smulbb	fp, fp, r5
 8015b9e:	1224      	asrs	r4, r4, #8
 8015ba0:	7004      	strb	r4, [r0, #0]
 8015ba2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015ba6:	fb04 b40c 	mla	r4, r4, ip, fp
 8015baa:	b2a4      	uxth	r4, r4
 8015bac:	f104 0b01 	add.w	fp, r4, #1
 8015bb0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015bb4:	1224      	asrs	r4, r4, #8
 8015bb6:	7044      	strb	r4, [r0, #1]
 8015bb8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8015bbc:	f890 a002 	ldrb.w	sl, [r0, #2]
 8015bc0:	fb1a fa05 	smulbb	sl, sl, r5
 8015bc4:	fb04 a40c 	mla	r4, r4, ip, sl
 8015bc8:	b2a4      	uxth	r4, r4
 8015bca:	f104 0a01 	add.w	sl, r4, #1
 8015bce:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8015bd2:	1224      	asrs	r4, r4, #8
 8015bd4:	7084      	strb	r4, [r0, #2]
 8015bd6:	3003      	adds	r0, #3
 8015bd8:	e7c3      	b.n	8015b62 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 8015bda:	f880 b000 	strb.w	fp, [r0]
 8015bde:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015be2:	7044      	strb	r4, [r0, #1]
 8015be4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8015be8:	e7f4      	b.n	8015bd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 8015bea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015bec:	4420      	add	r0, r4
 8015bee:	188c      	adds	r4, r1, r2
 8015bf0:	e7b2      	b.n	8015b58 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 8015bf2:	4b06      	ldr	r3, [pc, #24]	; (8015c0c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8015bf4:	6818      	ldr	r0, [r3, #0]
 8015bf6:	6803      	ldr	r3, [r0, #0]
 8015bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bfa:	4798      	blx	r3
 8015bfc:	e785      	b.n	8015b0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8015bfe:	bf00      	nop
 8015c00:	0801f7d2 	.word	0x0801f7d2
 8015c04:	0801fe87 	.word	0x0801fe87
 8015c08:	0801f8ef 	.word	0x0801f8ef
 8015c0c:	2000df6c 	.word	0x2000df6c
 8015c10:	2000df66 	.word	0x2000df66

08015c14 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8015c14:	b570      	push	{r4, r5, r6, lr}
 8015c16:	780d      	ldrb	r5, [r1, #0]
 8015c18:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8015c1c:	2d01      	cmp	r5, #1
 8015c1e:	d00d      	beq.n	8015c3c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8015c20:	d307      	bcc.n	8015c32 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8015c22:	2d02      	cmp	r5, #2
 8015c24:	d10f      	bne.n	8015c46 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8015c26:	4b08      	ldr	r3, [pc, #32]	; (8015c48 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8015c28:	2153      	movs	r1, #83	; 0x53
 8015c2a:	4a08      	ldr	r2, [pc, #32]	; (8015c4c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8015c2c:	4808      	ldr	r0, [pc, #32]	; (8015c50 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8015c2e:	f005 fec9 	bl	801b9c4 <__assert_func>
 8015c32:	9404      	str	r4, [sp, #16]
 8015c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c38:	f7ff be20 	b.w	801587c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8015c3c:	9404      	str	r4, [sp, #16]
 8015c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c42:	f7ff beff 	b.w	8015a44 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8015c46:	bd70      	pop	{r4, r5, r6, pc}
 8015c48:	0801f774 	.word	0x0801f774
 8015c4c:	0801fd90 	.word	0x0801fd90
 8015c50:	0801f8ef 	.word	0x0801f8ef

08015c54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8015c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c58:	4605      	mov	r5, r0
 8015c5a:	b08d      	sub	sp, #52	; 0x34
 8015c5c:	460c      	mov	r4, r1
 8015c5e:	461f      	mov	r7, r3
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d051      	beq.n	8015d08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 8015c64:	6808      	ldr	r0, [r1, #0]
 8015c66:	ab08      	add	r3, sp, #32
 8015c68:	6849      	ldr	r1, [r1, #4]
 8015c6a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8015e34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8015c6e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8015e38 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8015c72:	c303      	stmia	r3!, {r0, r1}
 8015c74:	6810      	ldr	r0, [r2, #0]
 8015c76:	ab0a      	add	r3, sp, #40	; 0x28
 8015c78:	6851      	ldr	r1, [r2, #4]
 8015c7a:	c303      	stmia	r3!, {r0, r1}
 8015c7c:	a808      	add	r0, sp, #32
 8015c7e:	f7fa fd07 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015c82:	4621      	mov	r1, r4
 8015c84:	a80a      	add	r0, sp, #40	; 0x28
 8015c86:	f7fa fceb 	bl	8010660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015c8a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015c8e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8015c92:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8015c96:	f8d8 0000 	ldr.w	r0, [r8]
 8015c9a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015c9e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8015ca2:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 8015ca6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8015caa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8015cae:	440a      	add	r2, r1
 8015cb0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015cb4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8015cb8:	4413      	add	r3, r2
 8015cba:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015cbe:	6803      	ldr	r3, [r0, #0]
 8015cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cc2:	4798      	blx	r3
 8015cc4:	2fff      	cmp	r7, #255	; 0xff
 8015cc6:	d022      	beq.n	8015d0e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 8015cc8:	f010 0f04 	tst.w	r0, #4
 8015ccc:	f8d8 0000 	ldr.w	r0, [r8]
 8015cd0:	d020      	beq.n	8015d14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 8015cd2:	2100      	movs	r1, #0
 8015cd4:	f04f 0e01 	mov.w	lr, #1
 8015cd8:	f8d0 c000 	ldr.w	ip, [r0]
 8015cdc:	b2a4      	uxth	r4, r4
 8015cde:	b2b6      	uxth	r6, r6
 8015ce0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8015ce4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8015ce8:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 8015cec:	f8b9 e000 	ldrh.w	lr, [r9]
 8015cf0:	9703      	str	r7, [sp, #12]
 8015cf2:	9401      	str	r4, [sp, #4]
 8015cf4:	9600      	str	r6, [sp, #0]
 8015cf6:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8015cfa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8015cfe:	9102      	str	r1, [sp, #8]
 8015d00:	4629      	mov	r1, r5
 8015d02:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 8015d06:	47a0      	blx	r4
 8015d08:	b00d      	add	sp, #52	; 0x34
 8015d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d0e:	f010 0f01 	tst.w	r0, #1
 8015d12:	e7db      	b.n	8015ccc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8015d14:	6803      	ldr	r3, [r0, #0]
 8015d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d18:	4798      	blx	r3
 8015d1a:	f8b9 1000 	ldrh.w	r1, [r9]
 8015d1e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8015d22:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8015d26:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015d2a:	434c      	muls	r4, r1
 8015d2c:	2fff      	cmp	r7, #255	; 0xff
 8015d2e:	fb01 2303 	mla	r3, r1, r3, r2
 8015d32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015d36:	eba1 0106 	sub.w	r1, r1, r6
 8015d3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015d42:	4418      	add	r0, r3
 8015d44:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8015d48:	eba3 0606 	sub.w	r6, r3, r6
 8015d4c:	4404      	add	r4, r0
 8015d4e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8015d52:	d04a      	beq.n	8015dea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 8015d54:	43fa      	mvns	r2, r7
 8015d56:	b2bb      	uxth	r3, r7
 8015d58:	b2d7      	uxtb	r7, r2
 8015d5a:	42a0      	cmp	r0, r4
 8015d5c:	d263      	bcs.n	8015e26 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 8015d5e:	eb00 0e0c 	add.w	lr, r0, ip
 8015d62:	4586      	cmp	lr, r0
 8015d64:	f100 0803 	add.w	r8, r0, #3
 8015d68:	d93a      	bls.n	8015de0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 8015d6a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8015d6e:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8015d72:	00d0      	lsls	r0, r2, #3
 8015d74:	fb19 f907 	smulbb	r9, r9, r7
 8015d78:	b2c0      	uxtb	r0, r0
 8015d7a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8015d7e:	fb00 9003 	mla	r0, r0, r3, r9
 8015d82:	b280      	uxth	r0, r0
 8015d84:	f100 0901 	add.w	r9, r0, #1
 8015d88:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8015d8c:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8015d90:	fb19 f907 	smulbb	r9, r9, r7
 8015d94:	1200      	asrs	r0, r0, #8
 8015d96:	f808 0c03 	strb.w	r0, [r8, #-3]
 8015d9a:	10d0      	asrs	r0, r2, #3
 8015d9c:	1212      	asrs	r2, r2, #8
 8015d9e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8015da2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8015da6:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8015daa:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8015dae:	fb00 9003 	mla	r0, r0, r3, r9
 8015db2:	b280      	uxth	r0, r0
 8015db4:	f100 0901 	add.w	r9, r0, #1
 8015db8:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8015dbc:	1200      	asrs	r0, r0, #8
 8015dbe:	f808 0c02 	strb.w	r0, [r8, #-2]
 8015dc2:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8015dc6:	fb10 f007 	smulbb	r0, r0, r7
 8015dca:	fb02 0203 	mla	r2, r2, r3, r0
 8015dce:	b292      	uxth	r2, r2
 8015dd0:	1c50      	adds	r0, r2, #1
 8015dd2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015dd6:	4640      	mov	r0, r8
 8015dd8:	1212      	asrs	r2, r2, #8
 8015dda:	f808 2c01 	strb.w	r2, [r8, #-1]
 8015dde:	e7c0      	b.n	8015d62 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 8015de0:	4408      	add	r0, r1
 8015de2:	4435      	add	r5, r6
 8015de4:	e7b9      	b.n	8015d5a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 8015de6:	4408      	add	r0, r1
 8015de8:	4435      	add	r5, r6
 8015dea:	42a0      	cmp	r0, r4
 8015dec:	d21b      	bcs.n	8015e26 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 8015dee:	eb00 070c 	add.w	r7, r0, ip
 8015df2:	42b8      	cmp	r0, r7
 8015df4:	d2f7      	bcs.n	8015de6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 8015df6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8015dfa:	3003      	adds	r0, #3
 8015dfc:	00da      	lsls	r2, r3, #3
 8015dfe:	b2d2      	uxtb	r2, r2
 8015e00:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8015e04:	f800 2c03 	strb.w	r2, [r0, #-3]
 8015e08:	10da      	asrs	r2, r3, #3
 8015e0a:	121b      	asrs	r3, r3, #8
 8015e0c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8015e10:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015e14:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8015e18:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8015e1c:	f800 2c02 	strb.w	r2, [r0, #-2]
 8015e20:	f800 3c01 	strb.w	r3, [r0, #-1]
 8015e24:	e7e5      	b.n	8015df2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 8015e26:	4b03      	ldr	r3, [pc, #12]	; (8015e34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8015e28:	6818      	ldr	r0, [r3, #0]
 8015e2a:	6803      	ldr	r3, [r0, #0]
 8015e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e2e:	4798      	blx	r3
 8015e30:	e76a      	b.n	8015d08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 8015e32:	bf00      	nop
 8015e34:	2000df6c 	.word	0x2000df6c
 8015e38:	2000df66 	.word	0x2000df66

08015e3c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8015e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e40:	b088      	sub	sp, #32
 8015e42:	460d      	mov	r5, r1
 8015e44:	4604      	mov	r4, r0
 8015e46:	461e      	mov	r6, r3
 8015e48:	6808      	ldr	r0, [r1, #0]
 8015e4a:	ab04      	add	r3, sp, #16
 8015e4c:	6849      	ldr	r1, [r1, #4]
 8015e4e:	4f5c      	ldr	r7, [pc, #368]	; (8015fc0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 8015e50:	c303      	stmia	r3!, {r0, r1}
 8015e52:	6810      	ldr	r0, [r2, #0]
 8015e54:	ab06      	add	r3, sp, #24
 8015e56:	6851      	ldr	r1, [r2, #4]
 8015e58:	c303      	stmia	r3!, {r0, r1}
 8015e5a:	a804      	add	r0, sp, #16
 8015e5c:	f7fa fc18 	bl	8010690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015e60:	4629      	mov	r1, r5
 8015e62:	a806      	add	r0, sp, #24
 8015e64:	f7fa fbfc 	bl	8010660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015e68:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8015e6c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015e70:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8015e74:	6838      	ldr	r0, [r7, #0]
 8015e76:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015e7a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8015e7e:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 8015e82:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8015e86:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015e8a:	440a      	add	r2, r1
 8015e8c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015e90:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015e94:	4413      	add	r3, r2
 8015e96:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015e9a:	6803      	ldr	r3, [r0, #0]
 8015e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e9e:	4798      	blx	r3
 8015ea0:	2eff      	cmp	r6, #255	; 0xff
 8015ea2:	d117      	bne.n	8015ed4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8015ea4:	f010 0f20 	tst.w	r0, #32
 8015ea8:	6838      	ldr	r0, [r7, #0]
 8015eaa:	d016      	beq.n	8015eda <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8015eac:	b2ad      	uxth	r5, r5
 8015eae:	6801      	ldr	r1, [r0, #0]
 8015eb0:	9603      	str	r6, [sp, #12]
 8015eb2:	9501      	str	r5, [sp, #4]
 8015eb4:	fa1f f588 	uxth.w	r5, r8
 8015eb8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8015ebc:	9500      	str	r5, [sp, #0]
 8015ebe:	9602      	str	r6, [sp, #8]
 8015ec0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8015ec4:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 8015ec6:	4621      	mov	r1, r4
 8015ec8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8015ecc:	47a8      	blx	r5
 8015ece:	b008      	add	sp, #32
 8015ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ed4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015ed8:	e7e6      	b.n	8015ea8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8015eda:	6803      	ldr	r3, [r0, #0]
 8015edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ede:	4798      	blx	r3
 8015ee0:	4b38      	ldr	r3, [pc, #224]	; (8015fc4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8015ee2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8015ee6:	f8b3 c000 	ldrh.w	ip, [r3]
 8015eea:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015eee:	fb0c f505 	mul.w	r5, ip, r5
 8015ef2:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 8015ef6:	fb0c 2303 	mla	r3, ip, r3, r2
 8015efa:	ebac 0c08 	sub.w	ip, ip, r8
 8015efe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f02:	ebae 0e08 	sub.w	lr, lr, r8
 8015f06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f0a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015f0e:	4418      	add	r0, r3
 8015f10:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8015f14:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8015f18:	4405      	add	r5, r0
 8015f1a:	42a8      	cmp	r0, r5
 8015f1c:	d24a      	bcs.n	8015fb4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 8015f1e:	eb00 0803 	add.w	r8, r0, r3
 8015f22:	4540      	cmp	r0, r8
 8015f24:	d243      	bcs.n	8015fae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 8015f26:	78e2      	ldrb	r2, [r4, #3]
 8015f28:	b15a      	cbz	r2, 8015f42 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8015f2a:	2aff      	cmp	r2, #255	; 0xff
 8015f2c:	f894 9000 	ldrb.w	r9, [r4]
 8015f30:	d10a      	bne.n	8015f48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8015f32:	2eff      	cmp	r6, #255	; 0xff
 8015f34:	d108      	bne.n	8015f48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8015f36:	f880 9000 	strb.w	r9, [r0]
 8015f3a:	7862      	ldrb	r2, [r4, #1]
 8015f3c:	7042      	strb	r2, [r0, #1]
 8015f3e:	78a2      	ldrb	r2, [r4, #2]
 8015f40:	7082      	strb	r2, [r0, #2]
 8015f42:	3003      	adds	r0, #3
 8015f44:	3404      	adds	r4, #4
 8015f46:	e7ec      	b.n	8015f22 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 8015f48:	4372      	muls	r2, r6
 8015f4a:	1c51      	adds	r1, r2, #1
 8015f4c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8015f50:	1209      	asrs	r1, r1, #8
 8015f52:	fa1f fa81 	uxth.w	sl, r1
 8015f56:	43c9      	mvns	r1, r1
 8015f58:	fb19 f90a 	smulbb	r9, r9, sl
 8015f5c:	b2ca      	uxtb	r2, r1
 8015f5e:	7801      	ldrb	r1, [r0, #0]
 8015f60:	fb01 9902 	mla	r9, r1, r2, r9
 8015f64:	fa1f f989 	uxth.w	r9, r9
 8015f68:	f109 0101 	add.w	r1, r9, #1
 8015f6c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8015f70:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015f74:	f880 9000 	strb.w	r9, [r0]
 8015f78:	f890 9001 	ldrb.w	r9, [r0, #1]
 8015f7c:	7861      	ldrb	r1, [r4, #1]
 8015f7e:	fb19 f902 	smulbb	r9, r9, r2
 8015f82:	fb01 910a 	mla	r1, r1, sl, r9
 8015f86:	b289      	uxth	r1, r1
 8015f88:	f101 0901 	add.w	r9, r1, #1
 8015f8c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8015f90:	1209      	asrs	r1, r1, #8
 8015f92:	7041      	strb	r1, [r0, #1]
 8015f94:	7881      	ldrb	r1, [r0, #2]
 8015f96:	f894 9002 	ldrb.w	r9, [r4, #2]
 8015f9a:	fb11 f202 	smulbb	r2, r1, r2
 8015f9e:	fb09 220a 	mla	r2, r9, sl, r2
 8015fa2:	b292      	uxth	r2, r2
 8015fa4:	1c51      	adds	r1, r2, #1
 8015fa6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015faa:	1212      	asrs	r2, r2, #8
 8015fac:	e7c8      	b.n	8015f40 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 8015fae:	4460      	add	r0, ip
 8015fb0:	4474      	add	r4, lr
 8015fb2:	e7b2      	b.n	8015f1a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8015fb4:	6838      	ldr	r0, [r7, #0]
 8015fb6:	6803      	ldr	r3, [r0, #0]
 8015fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fba:	4798      	blx	r3
 8015fbc:	e787      	b.n	8015ece <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 8015fbe:	bf00      	nop
 8015fc0:	2000df6c 	.word	0x2000df6c
 8015fc4:	2000df66 	.word	0x2000df66

08015fc8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8015fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fcc:	b085      	sub	sp, #20
 8015fce:	4606      	mov	r6, r0
 8015fd0:	460c      	mov	r4, r1
 8015fd2:	4691      	mov	r9, r2
 8015fd4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8015fd8:	4698      	mov	r8, r3
 8015fda:	b31d      	cbz	r5, 8016024 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015fdc:	4608      	mov	r0, r1
 8015fde:	f7fd f989 	bl	80132f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015fe2:	4607      	mov	r7, r0
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	f7fd f9bf 	bl	8013368 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015fea:	f8ad 000e 	strh.w	r0, [sp, #14]
 8015fee:	4620      	mov	r0, r4
 8015ff0:	f8ad 9008 	strh.w	r9, [sp, #8]
 8015ff4:	f8ad 800a 	strh.w	r8, [sp, #10]
 8015ff8:	f8ad 700c 	strh.w	r7, [sp, #12]
 8015ffc:	f7fd fad2 	bl	80135a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016000:	280b      	cmp	r0, #11
 8016002:	d838      	bhi.n	8016076 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 8016004:	e8df f000 	tbb	[pc, r0]
 8016008:	37062920 	.word	0x37062920
 801600c:	37373737 	.word	0x37373737
 8016010:	11373737 	.word	0x11373737
 8016014:	4620      	mov	r0, r4
 8016016:	f7fd fa3b 	bl	8013490 <_ZNK8touchgfx6Bitmap7getDataEv>
 801601a:	462b      	mov	r3, r5
 801601c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801601e:	a902      	add	r1, sp, #8
 8016020:	f7ff ff0c 	bl	8015e3c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016024:	b005      	add	sp, #20
 8016026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801602a:	4620      	mov	r0, r4
 801602c:	f7fd fa30 	bl	8013490 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016030:	4606      	mov	r6, r0
 8016032:	4620      	mov	r0, r4
 8016034:	f7fd fa5e 	bl	80134f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8016038:	9500      	str	r5, [sp, #0]
 801603a:	4601      	mov	r1, r0
 801603c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801603e:	aa02      	add	r2, sp, #8
 8016040:	4630      	mov	r0, r6
 8016042:	f7ff fde7 	bl	8015c14 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8016046:	e7ed      	b.n	8016024 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016048:	4620      	mov	r0, r4
 801604a:	f7fd fa21 	bl	8013490 <_ZNK8touchgfx6Bitmap7getDataEv>
 801604e:	462b      	mov	r3, r5
 8016050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016052:	a902      	add	r1, sp, #8
 8016054:	f7ff fdfe 	bl	8015c54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016058:	e7e4      	b.n	8016024 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801605a:	6833      	ldr	r3, [r6, #0]
 801605c:	4620      	mov	r0, r4
 801605e:	68df      	ldr	r7, [r3, #12]
 8016060:	f7fd fa16 	bl	8013490 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016064:	2300      	movs	r3, #0
 8016066:	4601      	mov	r1, r0
 8016068:	aa02      	add	r2, sp, #8
 801606a:	4630      	mov	r0, r6
 801606c:	e9cd 5300 	strd	r5, r3, [sp]
 8016070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016072:	47b8      	blx	r7
 8016074:	e7d6      	b.n	8016024 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016076:	4b03      	ldr	r3, [pc, #12]	; (8016084 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 8016078:	2147      	movs	r1, #71	; 0x47
 801607a:	4a03      	ldr	r2, [pc, #12]	; (8016088 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801607c:	4803      	ldr	r0, [pc, #12]	; (801608c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801607e:	f005 fca1 	bl	801b9c4 <__assert_func>
 8016082:	bf00      	nop
 8016084:	0801f820 	.word	0x0801f820
 8016088:	0801ff10 	.word	0x0801ff10
 801608c:	0801f8ef 	.word	0x0801f8ef

08016090 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8016090:	b570      	push	{r4, r5, r6, lr}
 8016092:	9d04      	ldr	r5, [sp, #16]
 8016094:	460c      	mov	r4, r1
 8016096:	4619      	mov	r1, r3
 8016098:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801609c:	2a0d      	cmp	r2, #13
 801609e:	d826      	bhi.n	80160ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 80160a0:	e8df f002 	tbb	[pc, r2]
 80160a4:	200e1407 	.word	0x200e1407
 80160a8:	20202020 	.word	0x20202020
 80160ac:	20202020 	.word	0x20202020
 80160b0:	2020      	.short	0x2020
 80160b2:	4b0f      	ldr	r3, [pc, #60]	; (80160f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80160b4:	f240 11d3 	movw	r1, #467	; 0x1d3
 80160b8:	4a0e      	ldr	r2, [pc, #56]	; (80160f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80160ba:	480f      	ldr	r0, [pc, #60]	; (80160f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80160bc:	f005 fc82 	bl	801b9c4 <__assert_func>
 80160c0:	462a      	mov	r2, r5
 80160c2:	4620      	mov	r0, r4
 80160c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160c8:	f7ff beb8 	b.w	8015e3c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80160cc:	6802      	ldr	r2, [r0, #0]
 80160ce:	2600      	movs	r6, #0
 80160d0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80160d4:	68d6      	ldr	r6, [r2, #12]
 80160d6:	462b      	mov	r3, r5
 80160d8:	460a      	mov	r2, r1
 80160da:	4621      	mov	r1, r4
 80160dc:	46b4      	mov	ip, r6
 80160de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160e2:	4760      	bx	ip
 80160e4:	4b05      	ldr	r3, [pc, #20]	; (80160fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80160e6:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 80160ea:	4a02      	ldr	r2, [pc, #8]	; (80160f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80160ec:	e7e5      	b.n	80160ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 80160ee:	bd70      	pop	{r4, r5, r6, pc}
 80160f0:	0801fac6 	.word	0x0801fac6
 80160f4:	080201f8 	.word	0x080201f8
 80160f8:	0801f8ef 	.word	0x0801f8ef
 80160fc:	0801fb07 	.word	0x0801fb07

08016100 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8016100:	b158      	cbz	r0, 801611a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8016102:	2902      	cmp	r1, #2
 8016104:	d00f      	beq.n	8016126 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8016106:	2903      	cmp	r1, #3
 8016108:	d010      	beq.n	801612c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801610a:	2901      	cmp	r1, #1
 801610c:	d101      	bne.n	8016112 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801610e:	2001      	movs	r0, #1
 8016110:	4770      	bx	lr
 8016112:	4b08      	ldr	r3, [pc, #32]	; (8016134 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8016114:	8819      	ldrh	r1, [r3, #0]
 8016116:	4248      	negs	r0, r1
 8016118:	4770      	bx	lr
 801611a:	2902      	cmp	r1, #2
 801611c:	d006      	beq.n	801612c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801611e:	2903      	cmp	r1, #3
 8016120:	d0f7      	beq.n	8016112 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8016122:	2901      	cmp	r1, #1
 8016124:	d1f3      	bne.n	801610e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8016126:	4b03      	ldr	r3, [pc, #12]	; (8016134 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8016128:	8818      	ldrh	r0, [r3, #0]
 801612a:	4770      	bx	lr
 801612c:	f04f 30ff 	mov.w	r0, #4294967295
 8016130:	4770      	bx	lr
 8016132:	bf00      	nop
 8016134:	2000df66 	.word	0x2000df66

08016138 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8016138:	b170      	cbz	r0, 8016158 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801613a:	2902      	cmp	r1, #2
 801613c:	d012      	beq.n	8016164 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801613e:	2903      	cmp	r1, #3
 8016140:	d006      	beq.n	8016150 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8016142:	2901      	cmp	r1, #1
 8016144:	d001      	beq.n	801614a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8016146:	2001      	movs	r0, #1
 8016148:	4770      	bx	lr
 801614a:	4b08      	ldr	r3, [pc, #32]	; (801616c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801614c:	8818      	ldrh	r0, [r3, #0]
 801614e:	4770      	bx	lr
 8016150:	4b06      	ldr	r3, [pc, #24]	; (801616c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8016152:	8818      	ldrh	r0, [r3, #0]
 8016154:	4240      	negs	r0, r0
 8016156:	4770      	bx	lr
 8016158:	2902      	cmp	r1, #2
 801615a:	d0f9      	beq.n	8016150 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801615c:	2903      	cmp	r1, #3
 801615e:	d0f2      	beq.n	8016146 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8016160:	2901      	cmp	r1, #1
 8016162:	d1f2      	bne.n	801614a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8016164:	f04f 30ff 	mov.w	r0, #4294967295
 8016168:	4770      	bx	lr
 801616a:	bf00      	nop
 801616c:	2000df66 	.word	0x2000df66

08016170 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8016170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016174:	b095      	sub	sp, #84	; 0x54
 8016176:	9109      	str	r1, [sp, #36]	; 0x24
 8016178:	a910      	add	r1, sp, #64	; 0x40
 801617a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801617e:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 8016182:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 8016186:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801618a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801618e:	e881 000c 	stmia.w	r1, {r2, r3}
 8016192:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 8016196:	9308      	str	r3, [sp, #32]
 8016198:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801619c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 80161a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80161a2:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 80161a6:	798d      	ldrb	r5, [r1, #6]
 80161a8:	930a      	str	r3, [sp, #40]	; 0x28
 80161aa:	7b4b      	ldrb	r3, [r1, #13]
 80161ac:	0158      	lsls	r0, r3, #5
 80161ae:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80161b2:	4328      	orrs	r0, r5
 80161b4:	9007      	str	r0, [sp, #28]
 80161b6:	f000 817a 	beq.w	80164ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80161ba:	011b      	lsls	r3, r3, #4
 80161bc:	79c8      	ldrb	r0, [r1, #7]
 80161be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80161c2:	4303      	orrs	r3, r0
 80161c4:	930c      	str	r3, [sp, #48]	; 0x30
 80161c6:	f000 8172 	beq.w	80164ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80161ca:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	2f00      	cmp	r7, #0
 80161d2:	f000 8117 	beq.w	8016404 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 80161d6:	1aff      	subs	r7, r7, r3
 80161d8:	b2bf      	uxth	r7, r7
 80161da:	043b      	lsls	r3, r7, #16
 80161dc:	d502      	bpl.n	80161e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80161de:	1bf6      	subs	r6, r6, r7
 80161e0:	2700      	movs	r7, #0
 80161e2:	b236      	sxth	r6, r6
 80161e4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80161e8:	a810      	add	r0, sp, #64	; 0x40
 80161ea:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80161ee:	428e      	cmp	r6, r1
 80161f0:	b28b      	uxth	r3, r1
 80161f2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 80161f6:	bfbf      	itttt	lt
 80161f8:	18ff      	addlt	r7, r7, r3
 80161fa:	1bbe      	sublt	r6, r7, r6
 80161fc:	b2b7      	uxthlt	r7, r6
 80161fe:	460e      	movlt	r6, r1
 8016200:	8891      	ldrh	r1, [r2, #4]
 8016202:	440b      	add	r3, r1
 8016204:	4631      	mov	r1, r6
 8016206:	b21b      	sxth	r3, r3
 8016208:	930e      	str	r3, [sp, #56]	; 0x38
 801620a:	88d3      	ldrh	r3, [r2, #6]
 801620c:	9a08      	ldr	r2, [sp, #32]
 801620e:	449a      	add	sl, r3
 8016210:	fa0f f38a 	sxth.w	r3, sl
 8016214:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8016218:	930d      	str	r3, [sp, #52]	; 0x34
 801621a:	4bb4      	ldr	r3, [pc, #720]	; (80164ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801621c:	f893 b000 	ldrb.w	fp, [r3]
 8016220:	f10b 3cff 	add.w	ip, fp, #4294967295
 8016224:	f1dc 0300 	rsbs	r3, ip, #0
 8016228:	eb43 030c 	adc.w	r3, r3, ip
 801622c:	930b      	str	r3, [sp, #44]	; 0x2c
 801622e:	464b      	mov	r3, r9
 8016230:	f7fa f886 	bl	8010340 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8016234:	4631      	mov	r1, r6
 8016236:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801623a:	464b      	mov	r3, r9
 801623c:	9a08      	ldr	r2, [sp, #32]
 801623e:	a810      	add	r0, sp, #64	; 0x40
 8016240:	f7fa f896 	bl	8010370 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8016244:	a914      	add	r1, sp, #80	; 0x50
 8016246:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801624a:	a813      	add	r0, sp, #76	; 0x4c
 801624c:	f7fa f9f2 	bl	8010634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8016250:	f1b9 0f00 	cmp.w	r9, #0
 8016254:	f040 80d9 	bne.w	801640a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 8016258:	f1bb 0f01 	cmp.w	fp, #1
 801625c:	f040 80dd 	bne.w	801641a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8016260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016262:	b153      	cbz	r3, 801627a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8016264:	2508      	movs	r5, #8
 8016266:	9a07      	ldr	r2, [sp, #28]
 8016268:	fb95 f3f8 	sdiv	r3, r5, r8
 801626c:	1e5d      	subs	r5, r3, #1
 801626e:	4415      	add	r5, r2
 8016270:	fb95 f5f3 	sdiv	r5, r5, r3
 8016274:	fb15 f503 	smulbb	r5, r5, r3
 8016278:	b2ad      	uxth	r5, r5
 801627a:	b907      	cbnz	r7, 801627e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801627c:	b16c      	cbz	r4, 801629a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801627e:	fb04 7305 	mla	r3, r4, r5, r7
 8016282:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016284:	ebaa 0a04 	sub.w	sl, sl, r4
 8016288:	fb08 f303 	mul.w	r3, r8, r3
 801628c:	fa1f fa8a 	uxth.w	sl, sl
 8016290:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8016294:	f003 0407 	and.w	r4, r3, #7
 8016298:	9224      	str	r2, [sp, #144]	; 0x90
 801629a:	4649      	mov	r1, r9
 801629c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801629e:	f7ff ff2f 	bl	8016100 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80162a2:	4649      	mov	r1, r9
 80162a4:	4683      	mov	fp, r0
 80162a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80162a8:	f7ff ff46 	bl	8016138 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80162ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162ae:	9a08      	ldr	r2, [sp, #32]
 80162b0:	4681      	mov	r9, r0
 80162b2:	1a9b      	subs	r3, r3, r2
 80162b4:	459a      	cmp	sl, r3
 80162b6:	bfa8      	it	ge
 80162b8:	469a      	movge	sl, r3
 80162ba:	f1ba 0f00 	cmp.w	sl, #0
 80162be:	f340 80f6 	ble.w	80164ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80162c2:	1bf6      	subs	r6, r6, r7
 80162c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162c6:	1b9e      	subs	r6, r3, r6
 80162c8:	9b07      	ldr	r3, [sp, #28]
 80162ca:	429e      	cmp	r6, r3
 80162cc:	bfd4      	ite	le
 80162ce:	ebc7 0706 	rsble	r7, r7, r6
 80162d2:	ebc7 0703 	rsbgt	r7, r7, r3
 80162d6:	2f00      	cmp	r7, #0
 80162d8:	f340 80e9 	ble.w	80164ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80162dc:	1bed      	subs	r5, r5, r7
 80162de:	fb08 f305 	mul.w	r3, r8, r5
 80162e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80162e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80162e6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80162ea:	930c      	str	r3, [sp, #48]	; 0x30
 80162ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80162ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80162f2:	930d      	str	r3, [sp, #52]	; 0x34
 80162f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	930e      	str	r3, [sp, #56]	; 0x38
 80162fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	f040 80db 	bne.w	80164b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8016302:	4b7b      	ldr	r3, [pc, #492]	; (80164f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8016304:	6818      	ldr	r0, [r3, #0]
 8016306:	6803      	ldr	r3, [r0, #0]
 8016308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801630a:	4798      	blx	r3
 801630c:	2301      	movs	r3, #1
 801630e:	4a79      	ldr	r2, [pc, #484]	; (80164f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8016310:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8016314:	fb07 9b1b 	mls	fp, r7, fp, r9
 8016318:	fa03 f308 	lsl.w	r3, r3, r8
 801631c:	8811      	ldrh	r1, [r2, #0]
 801631e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8016322:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8016326:	3b01      	subs	r3, #1
 8016328:	fb06 bb07 	mla	fp, r6, r7, fp
 801632c:	b2db      	uxtb	r3, r3
 801632e:	9308      	str	r3, [sp, #32]
 8016330:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8016334:	fb01 2303 	mla	r3, r1, r3, r2
 8016338:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801633c:	18c3      	adds	r3, r0, r3
 801633e:	9307      	str	r3, [sp, #28]
 8016340:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016342:	781a      	ldrb	r2, [r3, #0]
 8016344:	4122      	asrs	r2, r4
 8016346:	b2d2      	uxtb	r2, r2
 8016348:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801634c:	f0c0 80d4 	bcc.w	80164f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 8016350:	46be      	mov	lr, r7
 8016352:	9907      	ldr	r1, [sp, #28]
 8016354:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8016358:	f0c0 80b7 	bcc.w	80164ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801635c:	9b08      	ldr	r3, [sp, #32]
 801635e:	4013      	ands	r3, r2
 8016360:	d041      	beq.n	80163e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8016362:	20ff      	movs	r0, #255	; 0xff
 8016364:	9d08      	ldr	r5, [sp, #32]
 8016366:	fb90 f5f5 	sdiv	r5, r0, r5
 801636a:	436b      	muls	r3, r5
 801636c:	2bfe      	cmp	r3, #254	; 0xfe
 801636e:	dd03      	ble.n	8016378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8016370:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016372:	4285      	cmp	r5, r0
 8016374:	f000 80a2 	beq.w	80164bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8016378:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801637a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801637c:	fb15 f303 	smulbb	r3, r5, r3
 8016380:	b29b      	uxth	r3, r3
 8016382:	1c5d      	adds	r5, r3, #1
 8016384:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8016388:	780d      	ldrb	r5, [r1, #0]
 801638a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801638e:	fa1f fc83 	uxth.w	ip, r3
 8016392:	43db      	mvns	r3, r3
 8016394:	fb10 f90c 	smulbb	r9, r0, ip
 8016398:	b2db      	uxtb	r3, r3
 801639a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801639c:	fb05 9503 	mla	r5, r5, r3, r9
 80163a0:	b2ad      	uxth	r5, r5
 80163a2:	f105 0901 	add.w	r9, r5, #1
 80163a6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80163aa:	fb10 f90c 	smulbb	r9, r0, ip
 80163ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80163b0:	122d      	asrs	r5, r5, #8
 80163b2:	fb10 fc0c 	smulbb	ip, r0, ip
 80163b6:	700d      	strb	r5, [r1, #0]
 80163b8:	784d      	ldrb	r5, [r1, #1]
 80163ba:	fb05 9503 	mla	r5, r5, r3, r9
 80163be:	b2ad      	uxth	r5, r5
 80163c0:	f105 0901 	add.w	r9, r5, #1
 80163c4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80163c8:	122d      	asrs	r5, r5, #8
 80163ca:	704d      	strb	r5, [r1, #1]
 80163cc:	788d      	ldrb	r5, [r1, #2]
 80163ce:	fb05 cc03 	mla	ip, r5, r3, ip
 80163d2:	fa1f fc8c 	uxth.w	ip, ip
 80163d6:	f10c 0301 	add.w	r3, ip, #1
 80163da:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80163de:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80163e2:	f881 c002 	strb.w	ip, [r1, #2]
 80163e6:	4444      	add	r4, r8
 80163e8:	4431      	add	r1, r6
 80163ea:	b2a4      	uxth	r4, r4
 80163ec:	2c07      	cmp	r4, #7
 80163ee:	bf89      	itett	hi
 80163f0:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 80163f2:	fa42 f208 	asrls.w	r2, r2, r8
 80163f6:	2400      	movhi	r4, #0
 80163f8:	785a      	ldrbhi	r2, [r3, #1]
 80163fa:	bf8a      	itet	hi
 80163fc:	3301      	addhi	r3, #1
 80163fe:	b2d2      	uxtbls	r2, r2
 8016400:	9324      	strhi	r3, [sp, #144]	; 0x90
 8016402:	e7a7      	b.n	8016354 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8016404:	441e      	add	r6, r3
 8016406:	b236      	sxth	r6, r6
 8016408:	e6ec      	b.n	80161e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801640a:	f1b9 0f01 	cmp.w	r9, #1
 801640e:	f47f af27 	bne.w	8016260 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016412:	f1bb 0f01 	cmp.w	fp, #1
 8016416:	f47f af23 	bne.w	8016260 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801641a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80164f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801641e:	f8db 0000 	ldr.w	r0, [fp]
 8016422:	6803      	ldr	r3, [r0, #0]
 8016424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016426:	4798      	blx	r3
 8016428:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801642c:	465a      	mov	r2, fp
 801642e:	d006      	beq.n	801643e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8016430:	f1b8 0f04 	cmp.w	r8, #4
 8016434:	d13e      	bne.n	80164b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016438:	3300      	adds	r3, #0
 801643a:	bf18      	it	ne
 801643c:	2301      	movne	r3, #1
 801643e:	0580      	lsls	r0, r0, #22
 8016440:	d563      	bpl.n	801650a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8016442:	f1b8 0f08 	cmp.w	r8, #8
 8016446:	d160      	bne.n	801650a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8016448:	2b00      	cmp	r3, #0
 801644a:	bf0c      	ite	eq
 801644c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8016450:	f44f 7180 	movne.w	r1, #256	; 0x100
 8016454:	2f00      	cmp	r7, #0
 8016456:	f47f af03 	bne.w	8016260 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801645a:	2c00      	cmp	r4, #0
 801645c:	f47f af00 	bne.w	8016260 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016460:	9b07      	ldr	r3, [sp, #28]
 8016462:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016464:	18f3      	adds	r3, r6, r3
 8016466:	4283      	cmp	r3, r0
 8016468:	f73f aefa 	bgt.w	8016260 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801646c:	9808      	ldr	r0, [sp, #32]
 801646e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016470:	4403      	add	r3, r0
 8016472:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016474:	4283      	cmp	r3, r0
 8016476:	f73f aef3 	bgt.w	8016260 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801647a:	f1b8 0f08 	cmp.w	r8, #8
 801647e:	6810      	ldr	r0, [r2, #0]
 8016480:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8016484:	bf18      	it	ne
 8016486:	3501      	addne	r5, #1
 8016488:	6804      	ldr	r4, [r0, #0]
 801648a:	9105      	str	r1, [sp, #20]
 801648c:	bf18      	it	ne
 801648e:	f025 0501 	bicne.w	r5, r5, #1
 8016492:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016494:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8016498:	bf18      	it	ne
 801649a:	b2ad      	uxthne	r5, r5
 801649c:	9104      	str	r1, [sp, #16]
 801649e:	9926      	ldr	r1, [sp, #152]	; 0x98
 80164a0:	e9cd 5a00 	strd	r5, sl, [sp]
 80164a4:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80164a8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80164aa:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80164ac:	47a0      	blx	r4
 80164ae:	b015      	add	sp, #84	; 0x54
 80164b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b4:	2300      	movs	r3, #0
 80164b6:	e7c2      	b.n	801643e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80164b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164ba:	e727      	b.n	801630c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 80164bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164be:	700b      	strb	r3, [r1, #0]
 80164c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164c2:	704b      	strb	r3, [r1, #1]
 80164c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164c6:	708b      	strb	r3, [r1, #2]
 80164c8:	e78d      	b.n	80163e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 80164ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164cc:	b153      	cbz	r3, 80164e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80164ce:	441c      	add	r4, r3
 80164d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80164d2:	b2a4      	uxth	r4, r4
 80164d4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80164d8:	f004 0407 	and.w	r4, r4, #7
 80164dc:	781a      	ldrb	r2, [r3, #0]
 80164de:	9324      	str	r3, [sp, #144]	; 0x90
 80164e0:	4122      	asrs	r2, r4
 80164e2:	b2d2      	uxtb	r2, r2
 80164e4:	9b07      	ldr	r3, [sp, #28]
 80164e6:	445b      	add	r3, fp
 80164e8:	9307      	str	r3, [sp, #28]
 80164ea:	e72d      	b.n	8016348 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 80164ec:	2000df64 	.word	0x2000df64
 80164f0:	2000df6c 	.word	0x2000df6c
 80164f4:	2000df66 	.word	0x2000df66
 80164f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d1d7      	bne.n	80164ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80164fe:	4b06      	ldr	r3, [pc, #24]	; (8016518 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8016500:	6818      	ldr	r0, [r3, #0]
 8016502:	6803      	ldr	r3, [r0, #0]
 8016504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016506:	4798      	blx	r3
 8016508:	e7d1      	b.n	80164ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801650a:	2b00      	cmp	r3, #0
 801650c:	f43f aea8 	beq.w	8016260 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016514:	e79e      	b.n	8016454 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8016516:	bf00      	nop
 8016518:	2000df6c 	.word	0x2000df6c

0801651c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801651c:	b538      	push	{r3, r4, r5, lr}
 801651e:	4c15      	ldr	r4, [pc, #84]	; (8016574 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8016520:	4605      	mov	r5, r0
 8016522:	7823      	ldrb	r3, [r4, #0]
 8016524:	f3bf 8f5b 	dmb	ish
 8016528:	07da      	lsls	r2, r3, #31
 801652a:	d40b      	bmi.n	8016544 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801652c:	4620      	mov	r0, r4
 801652e:	f005 fa1c 	bl	801b96a <__cxa_guard_acquire>
 8016532:	b138      	cbz	r0, 8016544 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016534:	4620      	mov	r0, r4
 8016536:	f005 fa24 	bl	801b982 <__cxa_guard_release>
 801653a:	4a0f      	ldr	r2, [pc, #60]	; (8016578 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801653c:	490f      	ldr	r1, [pc, #60]	; (801657c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801653e:	4810      	ldr	r0, [pc, #64]	; (8016580 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016540:	f005 fa0c 	bl	801b95c <__aeabi_atexit>
 8016544:	4c0f      	ldr	r4, [pc, #60]	; (8016584 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8016546:	7823      	ldrb	r3, [r4, #0]
 8016548:	f3bf 8f5b 	dmb	ish
 801654c:	07db      	lsls	r3, r3, #31
 801654e:	d40b      	bmi.n	8016568 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016550:	4620      	mov	r0, r4
 8016552:	f005 fa0a 	bl	801b96a <__cxa_guard_acquire>
 8016556:	b138      	cbz	r0, 8016568 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016558:	4620      	mov	r0, r4
 801655a:	f005 fa12 	bl	801b982 <__cxa_guard_release>
 801655e:	4a06      	ldr	r2, [pc, #24]	; (8016578 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016560:	4909      	ldr	r1, [pc, #36]	; (8016588 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8016562:	480a      	ldr	r0, [pc, #40]	; (801658c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016564:	f005 f9fa 	bl	801b95c <__aeabi_atexit>
 8016568:	4b05      	ldr	r3, [pc, #20]	; (8016580 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801656a:	612b      	str	r3, [r5, #16]
 801656c:	4b07      	ldr	r3, [pc, #28]	; (801658c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801656e:	616b      	str	r3, [r5, #20]
 8016570:	bd38      	pop	{r3, r4, r5, pc}
 8016572:	bf00      	nop
 8016574:	2000e038 	.word	0x2000e038
 8016578:	20000000 	.word	0x20000000
 801657c:	08014e67 	.word	0x08014e67
 8016580:	20000060 	.word	0x20000060
 8016584:	2000e03c 	.word	0x2000e03c
 8016588:	08014e65 	.word	0x08014e65
 801658c:	20000064 	.word	0x20000064

08016590 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8016590:	b538      	push	{r3, r4, r5, lr}
 8016592:	4c15      	ldr	r4, [pc, #84]	; (80165e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8016594:	4605      	mov	r5, r0
 8016596:	7823      	ldrb	r3, [r4, #0]
 8016598:	f3bf 8f5b 	dmb	ish
 801659c:	07da      	lsls	r2, r3, #31
 801659e:	d40b      	bmi.n	80165b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80165a0:	4620      	mov	r0, r4
 80165a2:	f005 f9e2 	bl	801b96a <__cxa_guard_acquire>
 80165a6:	b138      	cbz	r0, 80165b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80165a8:	4620      	mov	r0, r4
 80165aa:	f005 f9ea 	bl	801b982 <__cxa_guard_release>
 80165ae:	4a0f      	ldr	r2, [pc, #60]	; (80165ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80165b0:	490f      	ldr	r1, [pc, #60]	; (80165f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80165b2:	4810      	ldr	r0, [pc, #64]	; (80165f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80165b4:	f005 f9d2 	bl	801b95c <__aeabi_atexit>
 80165b8:	4c0f      	ldr	r4, [pc, #60]	; (80165f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80165ba:	7823      	ldrb	r3, [r4, #0]
 80165bc:	f3bf 8f5b 	dmb	ish
 80165c0:	07db      	lsls	r3, r3, #31
 80165c2:	d40b      	bmi.n	80165dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80165c4:	4620      	mov	r0, r4
 80165c6:	f005 f9d0 	bl	801b96a <__cxa_guard_acquire>
 80165ca:	b138      	cbz	r0, 80165dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80165cc:	4620      	mov	r0, r4
 80165ce:	f005 f9d8 	bl	801b982 <__cxa_guard_release>
 80165d2:	4a06      	ldr	r2, [pc, #24]	; (80165ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80165d4:	4909      	ldr	r1, [pc, #36]	; (80165fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80165d6:	480a      	ldr	r0, [pc, #40]	; (8016600 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80165d8:	f005 f9c0 	bl	801b95c <__aeabi_atexit>
 80165dc:	4b05      	ldr	r3, [pc, #20]	; (80165f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80165de:	60ab      	str	r3, [r5, #8]
 80165e0:	4b07      	ldr	r3, [pc, #28]	; (8016600 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80165e2:	60eb      	str	r3, [r5, #12]
 80165e4:	bd38      	pop	{r3, r4, r5, pc}
 80165e6:	bf00      	nop
 80165e8:	2000e018 	.word	0x2000e018
 80165ec:	20000000 	.word	0x20000000
 80165f0:	08014e6b 	.word	0x08014e6b
 80165f4:	20000040 	.word	0x20000040
 80165f8:	2000e01c 	.word	0x2000e01c
 80165fc:	08014e69 	.word	0x08014e69
 8016600:	20000044 	.word	0x20000044

08016604 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8016604:	b510      	push	{r4, lr}
 8016606:	4604      	mov	r4, r0
 8016608:	f7ff ff88 	bl	801651c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801660c:	4620      	mov	r0, r4
 801660e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016612:	f7ff bfbd 	b.w	8016590 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08016618 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8016618:	b538      	push	{r3, r4, r5, lr}
 801661a:	4c15      	ldr	r4, [pc, #84]	; (8016670 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801661c:	4605      	mov	r5, r0
 801661e:	7823      	ldrb	r3, [r4, #0]
 8016620:	f3bf 8f5b 	dmb	ish
 8016624:	07da      	lsls	r2, r3, #31
 8016626:	d40b      	bmi.n	8016640 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016628:	4620      	mov	r0, r4
 801662a:	f005 f99e 	bl	801b96a <__cxa_guard_acquire>
 801662e:	b138      	cbz	r0, 8016640 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016630:	4620      	mov	r0, r4
 8016632:	f005 f9a6 	bl	801b982 <__cxa_guard_release>
 8016636:	4a0f      	ldr	r2, [pc, #60]	; (8016674 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016638:	490f      	ldr	r1, [pc, #60]	; (8016678 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801663a:	4810      	ldr	r0, [pc, #64]	; (801667c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801663c:	f005 f98e 	bl	801b95c <__aeabi_atexit>
 8016640:	4c0f      	ldr	r4, [pc, #60]	; (8016680 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8016642:	7823      	ldrb	r3, [r4, #0]
 8016644:	f3bf 8f5b 	dmb	ish
 8016648:	07db      	lsls	r3, r3, #31
 801664a:	d40b      	bmi.n	8016664 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801664c:	4620      	mov	r0, r4
 801664e:	f005 f98c 	bl	801b96a <__cxa_guard_acquire>
 8016652:	b138      	cbz	r0, 8016664 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016654:	4620      	mov	r0, r4
 8016656:	f005 f994 	bl	801b982 <__cxa_guard_release>
 801665a:	4a06      	ldr	r2, [pc, #24]	; (8016674 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801665c:	4909      	ldr	r1, [pc, #36]	; (8016684 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801665e:	480a      	ldr	r0, [pc, #40]	; (8016688 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016660:	f005 f97c 	bl	801b95c <__aeabi_atexit>
 8016664:	4b05      	ldr	r3, [pc, #20]	; (801667c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016666:	622b      	str	r3, [r5, #32]
 8016668:	4b07      	ldr	r3, [pc, #28]	; (8016688 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801666a:	626b      	str	r3, [r5, #36]	; 0x24
 801666c:	bd38      	pop	{r3, r4, r5, pc}
 801666e:	bf00      	nop
 8016670:	2000e040 	.word	0x2000e040
 8016674:	20000000 	.word	0x20000000
 8016678:	08014e5f 	.word	0x08014e5f
 801667c:	20000068 	.word	0x20000068
 8016680:	2000e044 	.word	0x2000e044
 8016684:	08014e5d 	.word	0x08014e5d
 8016688:	2000006c 	.word	0x2000006c

0801668c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801668c:	b538      	push	{r3, r4, r5, lr}
 801668e:	4c15      	ldr	r4, [pc, #84]	; (80166e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8016690:	4605      	mov	r5, r0
 8016692:	7823      	ldrb	r3, [r4, #0]
 8016694:	f3bf 8f5b 	dmb	ish
 8016698:	07da      	lsls	r2, r3, #31
 801669a:	d40b      	bmi.n	80166b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801669c:	4620      	mov	r0, r4
 801669e:	f005 f964 	bl	801b96a <__cxa_guard_acquire>
 80166a2:	b138      	cbz	r0, 80166b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80166a4:	4620      	mov	r0, r4
 80166a6:	f005 f96c 	bl	801b982 <__cxa_guard_release>
 80166aa:	4a0f      	ldr	r2, [pc, #60]	; (80166e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80166ac:	490f      	ldr	r1, [pc, #60]	; (80166ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80166ae:	4810      	ldr	r0, [pc, #64]	; (80166f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80166b0:	f005 f954 	bl	801b95c <__aeabi_atexit>
 80166b4:	4c0f      	ldr	r4, [pc, #60]	; (80166f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80166b6:	7823      	ldrb	r3, [r4, #0]
 80166b8:	f3bf 8f5b 	dmb	ish
 80166bc:	07db      	lsls	r3, r3, #31
 80166be:	d40b      	bmi.n	80166d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80166c0:	4620      	mov	r0, r4
 80166c2:	f005 f952 	bl	801b96a <__cxa_guard_acquire>
 80166c6:	b138      	cbz	r0, 80166d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80166c8:	4620      	mov	r0, r4
 80166ca:	f005 f95a 	bl	801b982 <__cxa_guard_release>
 80166ce:	4a06      	ldr	r2, [pc, #24]	; (80166e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80166d0:	4909      	ldr	r1, [pc, #36]	; (80166f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80166d2:	480a      	ldr	r0, [pc, #40]	; (80166fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80166d4:	f005 f942 	bl	801b95c <__aeabi_atexit>
 80166d8:	4b05      	ldr	r3, [pc, #20]	; (80166f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80166da:	61ab      	str	r3, [r5, #24]
 80166dc:	4b07      	ldr	r3, [pc, #28]	; (80166fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80166de:	61eb      	str	r3, [r5, #28]
 80166e0:	bd38      	pop	{r3, r4, r5, pc}
 80166e2:	bf00      	nop
 80166e4:	2000e020 	.word	0x2000e020
 80166e8:	20000000 	.word	0x20000000
 80166ec:	08014e63 	.word	0x08014e63
 80166f0:	20000048 	.word	0x20000048
 80166f4:	2000e024 	.word	0x2000e024
 80166f8:	08014e61 	.word	0x08014e61
 80166fc:	2000004c 	.word	0x2000004c

08016700 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8016700:	b510      	push	{r4, lr}
 8016702:	4604      	mov	r4, r0
 8016704:	f7ff ff88 	bl	8016618 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8016708:	4620      	mov	r0, r4
 801670a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801670e:	f7ff bfbd 	b.w	801668c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08016714 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8016714:	b538      	push	{r3, r4, r5, lr}
 8016716:	4c15      	ldr	r4, [pc, #84]	; (801676c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8016718:	4605      	mov	r5, r0
 801671a:	7823      	ldrb	r3, [r4, #0]
 801671c:	f3bf 8f5b 	dmb	ish
 8016720:	07da      	lsls	r2, r3, #31
 8016722:	d40b      	bmi.n	801673c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016724:	4620      	mov	r0, r4
 8016726:	f005 f920 	bl	801b96a <__cxa_guard_acquire>
 801672a:	b138      	cbz	r0, 801673c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801672c:	4620      	mov	r0, r4
 801672e:	f005 f928 	bl	801b982 <__cxa_guard_release>
 8016732:	4a0f      	ldr	r2, [pc, #60]	; (8016770 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016734:	490f      	ldr	r1, [pc, #60]	; (8016774 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8016736:	4810      	ldr	r0, [pc, #64]	; (8016778 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016738:	f005 f910 	bl	801b95c <__aeabi_atexit>
 801673c:	4c0f      	ldr	r4, [pc, #60]	; (801677c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801673e:	7823      	ldrb	r3, [r4, #0]
 8016740:	f3bf 8f5b 	dmb	ish
 8016744:	07db      	lsls	r3, r3, #31
 8016746:	d40b      	bmi.n	8016760 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016748:	4620      	mov	r0, r4
 801674a:	f005 f90e 	bl	801b96a <__cxa_guard_acquire>
 801674e:	b138      	cbz	r0, 8016760 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016750:	4620      	mov	r0, r4
 8016752:	f005 f916 	bl	801b982 <__cxa_guard_release>
 8016756:	4a06      	ldr	r2, [pc, #24]	; (8016770 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016758:	4909      	ldr	r1, [pc, #36]	; (8016780 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801675a:	480a      	ldr	r0, [pc, #40]	; (8016784 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801675c:	f005 f8fe 	bl	801b95c <__aeabi_atexit>
 8016760:	4b05      	ldr	r3, [pc, #20]	; (8016778 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016762:	632b      	str	r3, [r5, #48]	; 0x30
 8016764:	4b07      	ldr	r3, [pc, #28]	; (8016784 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016766:	636b      	str	r3, [r5, #52]	; 0x34
 8016768:	bd38      	pop	{r3, r4, r5, pc}
 801676a:	bf00      	nop
 801676c:	2000e028 	.word	0x2000e028
 8016770:	20000000 	.word	0x20000000
 8016774:	08014e57 	.word	0x08014e57
 8016778:	20000050 	.word	0x20000050
 801677c:	2000e02c 	.word	0x2000e02c
 8016780:	08014e55 	.word	0x08014e55
 8016784:	20000054 	.word	0x20000054

08016788 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8016788:	b538      	push	{r3, r4, r5, lr}
 801678a:	4c15      	ldr	r4, [pc, #84]	; (80167e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801678c:	4605      	mov	r5, r0
 801678e:	7823      	ldrb	r3, [r4, #0]
 8016790:	f3bf 8f5b 	dmb	ish
 8016794:	07da      	lsls	r2, r3, #31
 8016796:	d40b      	bmi.n	80167b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016798:	4620      	mov	r0, r4
 801679a:	f005 f8e6 	bl	801b96a <__cxa_guard_acquire>
 801679e:	b138      	cbz	r0, 80167b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80167a0:	4620      	mov	r0, r4
 80167a2:	f005 f8ee 	bl	801b982 <__cxa_guard_release>
 80167a6:	4a0f      	ldr	r2, [pc, #60]	; (80167e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80167a8:	490f      	ldr	r1, [pc, #60]	; (80167e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80167aa:	4810      	ldr	r0, [pc, #64]	; (80167ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80167ac:	f005 f8d6 	bl	801b95c <__aeabi_atexit>
 80167b0:	4c0f      	ldr	r4, [pc, #60]	; (80167f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80167b2:	7823      	ldrb	r3, [r4, #0]
 80167b4:	f3bf 8f5b 	dmb	ish
 80167b8:	07db      	lsls	r3, r3, #31
 80167ba:	d40b      	bmi.n	80167d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80167bc:	4620      	mov	r0, r4
 80167be:	f005 f8d4 	bl	801b96a <__cxa_guard_acquire>
 80167c2:	b138      	cbz	r0, 80167d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80167c4:	4620      	mov	r0, r4
 80167c6:	f005 f8dc 	bl	801b982 <__cxa_guard_release>
 80167ca:	4a06      	ldr	r2, [pc, #24]	; (80167e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80167cc:	4909      	ldr	r1, [pc, #36]	; (80167f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80167ce:	480a      	ldr	r0, [pc, #40]	; (80167f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80167d0:	f005 f8c4 	bl	801b95c <__aeabi_atexit>
 80167d4:	4b05      	ldr	r3, [pc, #20]	; (80167ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80167d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80167d8:	4b07      	ldr	r3, [pc, #28]	; (80167f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80167da:	62eb      	str	r3, [r5, #44]	; 0x2c
 80167dc:	bd38      	pop	{r3, r4, r5, pc}
 80167de:	bf00      	nop
 80167e0:	2000e000 	.word	0x2000e000
 80167e4:	20000000 	.word	0x20000000
 80167e8:	08014e5b 	.word	0x08014e5b
 80167ec:	20000028 	.word	0x20000028
 80167f0:	2000e004 	.word	0x2000e004
 80167f4:	08014e59 	.word	0x08014e59
 80167f8:	2000002c 	.word	0x2000002c

080167fc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80167fc:	b510      	push	{r4, lr}
 80167fe:	4604      	mov	r4, r0
 8016800:	f7ff ff88 	bl	8016714 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8016804:	4620      	mov	r0, r4
 8016806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801680a:	f7ff bfbd 	b.w	8016788 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08016810 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8016810:	b538      	push	{r3, r4, r5, lr}
 8016812:	4c15      	ldr	r4, [pc, #84]	; (8016868 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8016814:	4605      	mov	r5, r0
 8016816:	7823      	ldrb	r3, [r4, #0]
 8016818:	f3bf 8f5b 	dmb	ish
 801681c:	07da      	lsls	r2, r3, #31
 801681e:	d40b      	bmi.n	8016838 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016820:	4620      	mov	r0, r4
 8016822:	f005 f8a2 	bl	801b96a <__cxa_guard_acquire>
 8016826:	b138      	cbz	r0, 8016838 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016828:	4620      	mov	r0, r4
 801682a:	f005 f8aa 	bl	801b982 <__cxa_guard_release>
 801682e:	4a0f      	ldr	r2, [pc, #60]	; (801686c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016830:	490f      	ldr	r1, [pc, #60]	; (8016870 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8016832:	4810      	ldr	r0, [pc, #64]	; (8016874 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016834:	f005 f892 	bl	801b95c <__aeabi_atexit>
 8016838:	4c0f      	ldr	r4, [pc, #60]	; (8016878 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801683a:	7823      	ldrb	r3, [r4, #0]
 801683c:	f3bf 8f5b 	dmb	ish
 8016840:	07db      	lsls	r3, r3, #31
 8016842:	d40b      	bmi.n	801685c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016844:	4620      	mov	r0, r4
 8016846:	f005 f890 	bl	801b96a <__cxa_guard_acquire>
 801684a:	b138      	cbz	r0, 801685c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801684c:	4620      	mov	r0, r4
 801684e:	f005 f898 	bl	801b982 <__cxa_guard_release>
 8016852:	4a06      	ldr	r2, [pc, #24]	; (801686c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016854:	4909      	ldr	r1, [pc, #36]	; (801687c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8016856:	480a      	ldr	r0, [pc, #40]	; (8016880 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016858:	f005 f880 	bl	801b95c <__aeabi_atexit>
 801685c:	4b05      	ldr	r3, [pc, #20]	; (8016874 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801685e:	642b      	str	r3, [r5, #64]	; 0x40
 8016860:	4b07      	ldr	r3, [pc, #28]	; (8016880 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016862:	646b      	str	r3, [r5, #68]	; 0x44
 8016864:	bd38      	pop	{r3, r4, r5, pc}
 8016866:	bf00      	nop
 8016868:	2000e030 	.word	0x2000e030
 801686c:	20000000 	.word	0x20000000
 8016870:	08014e4f 	.word	0x08014e4f
 8016874:	20000058 	.word	0x20000058
 8016878:	2000e034 	.word	0x2000e034
 801687c:	08014e4d 	.word	0x08014e4d
 8016880:	2000005c 	.word	0x2000005c

08016884 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8016884:	b538      	push	{r3, r4, r5, lr}
 8016886:	4c15      	ldr	r4, [pc, #84]	; (80168dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8016888:	4605      	mov	r5, r0
 801688a:	7823      	ldrb	r3, [r4, #0]
 801688c:	f3bf 8f5b 	dmb	ish
 8016890:	07da      	lsls	r2, r3, #31
 8016892:	d40b      	bmi.n	80168ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016894:	4620      	mov	r0, r4
 8016896:	f005 f868 	bl	801b96a <__cxa_guard_acquire>
 801689a:	b138      	cbz	r0, 80168ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801689c:	4620      	mov	r0, r4
 801689e:	f005 f870 	bl	801b982 <__cxa_guard_release>
 80168a2:	4a0f      	ldr	r2, [pc, #60]	; (80168e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80168a4:	490f      	ldr	r1, [pc, #60]	; (80168e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80168a6:	4810      	ldr	r0, [pc, #64]	; (80168e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80168a8:	f005 f858 	bl	801b95c <__aeabi_atexit>
 80168ac:	4c0f      	ldr	r4, [pc, #60]	; (80168ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80168ae:	7823      	ldrb	r3, [r4, #0]
 80168b0:	f3bf 8f5b 	dmb	ish
 80168b4:	07db      	lsls	r3, r3, #31
 80168b6:	d40b      	bmi.n	80168d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80168b8:	4620      	mov	r0, r4
 80168ba:	f005 f856 	bl	801b96a <__cxa_guard_acquire>
 80168be:	b138      	cbz	r0, 80168d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80168c0:	4620      	mov	r0, r4
 80168c2:	f005 f85e 	bl	801b982 <__cxa_guard_release>
 80168c6:	4a06      	ldr	r2, [pc, #24]	; (80168e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80168c8:	4909      	ldr	r1, [pc, #36]	; (80168f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80168ca:	480a      	ldr	r0, [pc, #40]	; (80168f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80168cc:	f005 f846 	bl	801b95c <__aeabi_atexit>
 80168d0:	4b05      	ldr	r3, [pc, #20]	; (80168e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80168d2:	63ab      	str	r3, [r5, #56]	; 0x38
 80168d4:	4b07      	ldr	r3, [pc, #28]	; (80168f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80168d6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80168d8:	bd38      	pop	{r3, r4, r5, pc}
 80168da:	bf00      	nop
 80168dc:	2000e010 	.word	0x2000e010
 80168e0:	20000000 	.word	0x20000000
 80168e4:	08014e53 	.word	0x08014e53
 80168e8:	20000038 	.word	0x20000038
 80168ec:	2000e014 	.word	0x2000e014
 80168f0:	08014e51 	.word	0x08014e51
 80168f4:	2000003c 	.word	0x2000003c

080168f8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80168f8:	b510      	push	{r4, lr}
 80168fa:	4604      	mov	r4, r0
 80168fc:	f7ff ff88 	bl	8016810 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8016900:	4620      	mov	r0, r4
 8016902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016906:	f7ff bfbd 	b.w	8016884 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801690c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801690c:	b538      	push	{r3, r4, r5, lr}
 801690e:	4c15      	ldr	r4, [pc, #84]	; (8016964 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8016910:	4605      	mov	r5, r0
 8016912:	7823      	ldrb	r3, [r4, #0]
 8016914:	f3bf 8f5b 	dmb	ish
 8016918:	07da      	lsls	r2, r3, #31
 801691a:	d40b      	bmi.n	8016934 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801691c:	4620      	mov	r0, r4
 801691e:	f005 f824 	bl	801b96a <__cxa_guard_acquire>
 8016922:	b138      	cbz	r0, 8016934 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8016924:	4620      	mov	r0, r4
 8016926:	f005 f82c 	bl	801b982 <__cxa_guard_release>
 801692a:	4a0f      	ldr	r2, [pc, #60]	; (8016968 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801692c:	490f      	ldr	r1, [pc, #60]	; (801696c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801692e:	4810      	ldr	r0, [pc, #64]	; (8016970 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8016930:	f005 f814 	bl	801b95c <__aeabi_atexit>
 8016934:	4c0f      	ldr	r4, [pc, #60]	; (8016974 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8016936:	7823      	ldrb	r3, [r4, #0]
 8016938:	f3bf 8f5b 	dmb	ish
 801693c:	07db      	lsls	r3, r3, #31
 801693e:	d40b      	bmi.n	8016958 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016940:	4620      	mov	r0, r4
 8016942:	f005 f812 	bl	801b96a <__cxa_guard_acquire>
 8016946:	b138      	cbz	r0, 8016958 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016948:	4620      	mov	r0, r4
 801694a:	f005 f81a 	bl	801b982 <__cxa_guard_release>
 801694e:	4a06      	ldr	r2, [pc, #24]	; (8016968 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8016950:	4909      	ldr	r1, [pc, #36]	; (8016978 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8016952:	480a      	ldr	r0, [pc, #40]	; (801697c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8016954:	f005 f802 	bl	801b95c <__aeabi_atexit>
 8016958:	4b05      	ldr	r3, [pc, #20]	; (8016970 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801695a:	652b      	str	r3, [r5, #80]	; 0x50
 801695c:	4b07      	ldr	r3, [pc, #28]	; (801697c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801695e:	656b      	str	r3, [r5, #84]	; 0x54
 8016960:	bd38      	pop	{r3, r4, r5, pc}
 8016962:	bf00      	nop
 8016964:	2000e008 	.word	0x2000e008
 8016968:	20000000 	.word	0x20000000
 801696c:	08014e47 	.word	0x08014e47
 8016970:	20000030 	.word	0x20000030
 8016974:	2000e00c 	.word	0x2000e00c
 8016978:	08014e45 	.word	0x08014e45
 801697c:	20000034 	.word	0x20000034

08016980 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8016980:	b538      	push	{r3, r4, r5, lr}
 8016982:	4c15      	ldr	r4, [pc, #84]	; (80169d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8016984:	4605      	mov	r5, r0
 8016986:	7823      	ldrb	r3, [r4, #0]
 8016988:	f3bf 8f5b 	dmb	ish
 801698c:	07da      	lsls	r2, r3, #31
 801698e:	d40b      	bmi.n	80169a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016990:	4620      	mov	r0, r4
 8016992:	f004 ffea 	bl	801b96a <__cxa_guard_acquire>
 8016996:	b138      	cbz	r0, 80169a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016998:	4620      	mov	r0, r4
 801699a:	f004 fff2 	bl	801b982 <__cxa_guard_release>
 801699e:	4a0f      	ldr	r2, [pc, #60]	; (80169dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80169a0:	490f      	ldr	r1, [pc, #60]	; (80169e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80169a2:	4810      	ldr	r0, [pc, #64]	; (80169e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80169a4:	f004 ffda 	bl	801b95c <__aeabi_atexit>
 80169a8:	4c0f      	ldr	r4, [pc, #60]	; (80169e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80169aa:	7823      	ldrb	r3, [r4, #0]
 80169ac:	f3bf 8f5b 	dmb	ish
 80169b0:	07db      	lsls	r3, r3, #31
 80169b2:	d40b      	bmi.n	80169cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80169b4:	4620      	mov	r0, r4
 80169b6:	f004 ffd8 	bl	801b96a <__cxa_guard_acquire>
 80169ba:	b138      	cbz	r0, 80169cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80169bc:	4620      	mov	r0, r4
 80169be:	f004 ffe0 	bl	801b982 <__cxa_guard_release>
 80169c2:	4a06      	ldr	r2, [pc, #24]	; (80169dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80169c4:	4909      	ldr	r1, [pc, #36]	; (80169ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80169c6:	480a      	ldr	r0, [pc, #40]	; (80169f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80169c8:	f004 ffc8 	bl	801b95c <__aeabi_atexit>
 80169cc:	4b05      	ldr	r3, [pc, #20]	; (80169e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80169ce:	64ab      	str	r3, [r5, #72]	; 0x48
 80169d0:	4b07      	ldr	r3, [pc, #28]	; (80169f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80169d2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80169d4:	bd38      	pop	{r3, r4, r5, pc}
 80169d6:	bf00      	nop
 80169d8:	2000dff8 	.word	0x2000dff8
 80169dc:	20000000 	.word	0x20000000
 80169e0:	08014e4b 	.word	0x08014e4b
 80169e4:	20000020 	.word	0x20000020
 80169e8:	2000dffc 	.word	0x2000dffc
 80169ec:	08014e49 	.word	0x08014e49
 80169f0:	20000024 	.word	0x20000024

080169f4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80169f4:	b510      	push	{r4, lr}
 80169f6:	4604      	mov	r4, r0
 80169f8:	f7ff ff88 	bl	801690c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80169fc:	4620      	mov	r0, r4
 80169fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a02:	f7ff bfbd 	b.w	8016980 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08016a06 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8016a06:	b510      	push	{r4, lr}
 8016a08:	4604      	mov	r4, r0
 8016a0a:	f7ff fff3 	bl	80169f4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8016a0e:	4620      	mov	r0, r4
 8016a10:	f7ff ff72 	bl	80168f8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8016a14:	4620      	mov	r0, r4
 8016a16:	f7ff fe73 	bl	8016700 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8016a1a:	4620      	mov	r0, r4
 8016a1c:	f7ff fdf2 	bl	8016604 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8016a20:	4620      	mov	r0, r4
 8016a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a26:	f7ff bee9 	b.w	80167fc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08016a2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8016a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a30:	b087      	sub	sp, #28
 8016a32:	7888      	ldrb	r0, [r1, #2]
 8016a34:	4616      	mov	r6, r2
 8016a36:	9001      	str	r0, [sp, #4]
 8016a38:	7848      	ldrb	r0, [r1, #1]
 8016a3a:	9100      	str	r1, [sp, #0]
 8016a3c:	9002      	str	r0, [sp, #8]
 8016a3e:	7808      	ldrb	r0, [r1, #0]
 8016a40:	9901      	ldr	r1, [sp, #4]
 8016a42:	9003      	str	r0, [sp, #12]
 8016a44:	9802      	ldr	r0, [sp, #8]
 8016a46:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8016a4a:	0200      	lsls	r0, r0, #8
 8016a4c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8016a50:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8016a54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8016a58:	9903      	ldr	r1, [sp, #12]
 8016a5a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8016a5e:	4308      	orrs	r0, r1
 8016a60:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016a64:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8016a68:	9005      	str	r0, [sp, #20]
 8016a6a:	fb05 ca0e 	mla	sl, r5, lr, ip
 8016a6e:	2d00      	cmp	r5, #0
 8016a70:	eb06 080a 	add.w	r8, r6, sl
 8016a74:	db4a      	blt.n	8016b0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8016a76:	45a9      	cmp	r9, r5
 8016a78:	dd48      	ble.n	8016b0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8016a7a:	f1bc 0f00 	cmp.w	ip, #0
 8016a7e:	db43      	blt.n	8016b08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8016a80:	45e6      	cmp	lr, ip
 8016a82:	dd41      	ble.n	8016b08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8016a84:	f816 600a 	ldrb.w	r6, [r6, sl]
 8016a88:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016a8c:	441e      	add	r6, r3
 8016a8e:	f11c 0001 	adds.w	r0, ip, #1
 8016a92:	d43e      	bmi.n	8016b12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8016a94:	4586      	cmp	lr, r0
 8016a96:	dd3c      	ble.n	8016b12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8016a98:	2a00      	cmp	r2, #0
 8016a9a:	d03a      	beq.n	8016b12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8016a9c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016aa0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016aa4:	4418      	add	r0, r3
 8016aa6:	3501      	adds	r5, #1
 8016aa8:	d437      	bmi.n	8016b1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8016aaa:	45a9      	cmp	r9, r5
 8016aac:	dd35      	ble.n	8016b1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8016aae:	b3a4      	cbz	r4, 8016b1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8016ab0:	f1bc 0f00 	cmp.w	ip, #0
 8016ab4:	db2f      	blt.n	8016b16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8016ab6:	45e6      	cmp	lr, ip
 8016ab8:	dd2d      	ble.n	8016b16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8016aba:	f818 500e 	ldrb.w	r5, [r8, lr]
 8016abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ac2:	441d      	add	r5, r3
 8016ac4:	f11c 0c01 	adds.w	ip, ip, #1
 8016ac8:	d42a      	bmi.n	8016b20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8016aca:	45e6      	cmp	lr, ip
 8016acc:	dd28      	ble.n	8016b20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8016ace:	b33a      	cbz	r2, 8016b20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8016ad0:	44c6      	add	lr, r8
 8016ad2:	f89e c001 	ldrb.w	ip, [lr, #1]
 8016ad6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016ada:	4463      	add	r3, ip
 8016adc:	ea6f 0c07 	mvn.w	ip, r7
 8016ae0:	2a0f      	cmp	r2, #15
 8016ae2:	f896 a000 	ldrb.w	sl, [r6]
 8016ae6:	fa5f fc8c 	uxtb.w	ip, ip
 8016aea:	f890 b000 	ldrb.w	fp, [r0]
 8016aee:	f895 9000 	ldrb.w	r9, [r5]
 8016af2:	7819      	ldrb	r1, [r3, #0]
 8016af4:	d801      	bhi.n	8016afa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8016af6:	2c0f      	cmp	r4, #15
 8016af8:	d914      	bls.n	8016b24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8016afa:	4b40      	ldr	r3, [pc, #256]	; (8016bfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8016afc:	f240 1157 	movw	r1, #343	; 0x157
 8016b00:	4a3f      	ldr	r2, [pc, #252]	; (8016c00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8016b02:	4840      	ldr	r0, [pc, #256]	; (8016c04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8016b04:	f004 ff5e 	bl	801b9c4 <__assert_func>
 8016b08:	ae05      	add	r6, sp, #20
 8016b0a:	e7c0      	b.n	8016a8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8016b0c:	a805      	add	r0, sp, #20
 8016b0e:	4606      	mov	r6, r0
 8016b10:	e7c9      	b.n	8016aa6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8016b12:	a805      	add	r0, sp, #20
 8016b14:	e7c7      	b.n	8016aa6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8016b16:	ad05      	add	r5, sp, #20
 8016b18:	e7d4      	b.n	8016ac4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8016b1a:	ab05      	add	r3, sp, #20
 8016b1c:	461d      	mov	r5, r3
 8016b1e:	e7dd      	b.n	8016adc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8016b20:	ab05      	add	r3, sp, #20
 8016b22:	e7db      	b.n	8016adc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8016b24:	b292      	uxth	r2, r2
 8016b26:	b2a4      	uxth	r4, r4
 8016b28:	fa1f fc8c 	uxth.w	ip, ip
 8016b2c:	fb02 f804 	mul.w	r8, r2, r4
 8016b30:	0112      	lsls	r2, r2, #4
 8016b32:	b2bf      	uxth	r7, r7
 8016b34:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8016b38:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8016b3c:	eba2 0208 	sub.w	r2, r2, r8
 8016b40:	b2a4      	uxth	r4, r4
 8016b42:	b292      	uxth	r2, r2
 8016b44:	ebae 0e04 	sub.w	lr, lr, r4
 8016b48:	fb02 fb0b 	mul.w	fp, r2, fp
 8016b4c:	fa1f fe8e 	uxth.w	lr, lr
 8016b50:	fb0e ba0a 	mla	sl, lr, sl, fp
 8016b54:	fb04 aa09 	mla	sl, r4, r9, sl
 8016b58:	fb08 aa01 	mla	sl, r8, r1, sl
 8016b5c:	9903      	ldr	r1, [sp, #12]
 8016b5e:	fb11 f90c 	smulbb	r9, r1, ip
 8016b62:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8016b66:	9900      	ldr	r1, [sp, #0]
 8016b68:	fb0a 9a07 	mla	sl, sl, r7, r9
 8016b6c:	fa1f fa8a 	uxth.w	sl, sl
 8016b70:	f10a 0901 	add.w	r9, sl, #1
 8016b74:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8016b78:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016b7c:	f881 a000 	strb.w	sl, [r1]
 8016b80:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016b84:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016b88:	fb02 fa0a 	mul.w	sl, r2, sl
 8016b8c:	9902      	ldr	r1, [sp, #8]
 8016b8e:	fb0e aa09 	mla	sl, lr, r9, sl
 8016b92:	f895 9001 	ldrb.w	r9, [r5, #1]
 8016b96:	fb04 aa09 	mla	sl, r4, r9, sl
 8016b9a:	f893 9001 	ldrb.w	r9, [r3, #1]
 8016b9e:	fb08 a909 	mla	r9, r8, r9, sl
 8016ba2:	fb11 fa0c 	smulbb	sl, r1, ip
 8016ba6:	9900      	ldr	r1, [sp, #0]
 8016ba8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8016bac:	fb09 a907 	mla	r9, r9, r7, sl
 8016bb0:	fa1f f989 	uxth.w	r9, r9
 8016bb4:	f109 0a01 	add.w	sl, r9, #1
 8016bb8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016bbc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016bc0:	f881 9001 	strb.w	r9, [r1, #1]
 8016bc4:	7880      	ldrb	r0, [r0, #2]
 8016bc6:	78b6      	ldrb	r6, [r6, #2]
 8016bc8:	4342      	muls	r2, r0
 8016bca:	78a8      	ldrb	r0, [r5, #2]
 8016bcc:	789b      	ldrb	r3, [r3, #2]
 8016bce:	fb0e 2206 	mla	r2, lr, r6, r2
 8016bd2:	fb04 2400 	mla	r4, r4, r0, r2
 8016bd6:	fb08 4803 	mla	r8, r8, r3, r4
 8016bda:	9b01      	ldr	r3, [sp, #4]
 8016bdc:	fb13 fc0c 	smulbb	ip, r3, ip
 8016be0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8016be4:	fb08 c707 	mla	r7, r8, r7, ip
 8016be8:	b2bf      	uxth	r7, r7
 8016bea:	f107 0c01 	add.w	ip, r7, #1
 8016bee:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8016bf2:	123f      	asrs	r7, r7, #8
 8016bf4:	708f      	strb	r7, [r1, #2]
 8016bf6:	b007      	add	sp, #28
 8016bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bfc:	0801fab5 	.word	0x0801fab5
 8016c00:	0802001f 	.word	0x0802001f
 8016c04:	0801fb7e 	.word	0x0801fb7e

08016c08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c0c:	ed2d 8b08 	vpush	{d8-d11}
 8016c10:	b093      	sub	sp, #76	; 0x4c
 8016c12:	eeb0 aa40 	vmov.f32	s20, s0
 8016c16:	eef0 9a60 	vmov.f32	s19, s1
 8016c1a:	9210      	str	r2, [sp, #64]	; 0x40
 8016c1c:	eeb0 9a41 	vmov.f32	s18, s2
 8016c20:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016c22:	eeb0 8a62 	vmov.f32	s16, s5
 8016c26:	9309      	str	r3, [sp, #36]	; 0x24
 8016c28:	eef0 8a43 	vmov.f32	s17, s6
 8016c2c:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8016c30:	eef0 ba44 	vmov.f32	s23, s8
 8016c34:	9011      	str	r0, [sp, #68]	; 0x44
 8016c36:	eeb0 ba64 	vmov.f32	s22, s9
 8016c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8016c3c:	eef0 aa45 	vmov.f32	s21, s10
 8016c40:	6850      	ldr	r0, [r2, #4]
 8016c42:	910d      	str	r1, [sp, #52]	; 0x34
 8016c44:	6812      	ldr	r2, [r2, #0]
 8016c46:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8016c4a:	fb00 1303 	mla	r3, r0, r3, r1
 8016c4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016c52:	18d3      	adds	r3, r2, r3
 8016c54:	930a      	str	r3, [sp, #40]	; 0x28
 8016c56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8016c5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016c5e:	685c      	ldr	r4, [r3, #4]
 8016c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c62:	3404      	adds	r4, #4
 8016c64:	43db      	mvns	r3, r3
 8016c66:	b2db      	uxtb	r3, r3
 8016c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	dc03      	bgt.n	8016c78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016c70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f340 8250 	ble.w	8017118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8016c78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016c7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016c7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016c82:	1e48      	subs	r0, r1, #1
 8016c84:	1e55      	subs	r5, r2, #1
 8016c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	f340 80ee 	ble.w	8016e6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8016c8e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8016c90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c92:	1436      	asrs	r6, r6, #16
 8016c94:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016c98:	d406      	bmi.n	8016ca8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016c9a:	4286      	cmp	r6, r0
 8016c9c:	da04      	bge.n	8016ca8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	db02      	blt.n	8016ca8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016ca2:	42ab      	cmp	r3, r5
 8016ca4:	f2c0 80e2 	blt.w	8016e6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8016ca8:	3601      	adds	r6, #1
 8016caa:	f100 80cf 	bmi.w	8016e4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016cae:	42b1      	cmp	r1, r6
 8016cb0:	f2c0 80cc 	blt.w	8016e4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016cb4:	3301      	adds	r3, #1
 8016cb6:	f100 80c9 	bmi.w	8016e4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	f2c0 80c6 	blt.w	8016e4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016cc0:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8016cc4:	f1bb 0f00 	cmp.w	fp, #0
 8016cc8:	f340 80f1 	ble.w	8016eae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8016ccc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016cce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016cd0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016cd2:	141d      	asrs	r5, r3, #16
 8016cd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016cd6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8016cda:	68c7      	ldr	r7, [r0, #12]
 8016cdc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8016cde:	1418      	asrs	r0, r3, #16
 8016ce0:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8016ce4:	6892      	ldr	r2, [r2, #8]
 8016ce6:	f100 8137 	bmi.w	8016f58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8016cea:	f102 3cff 	add.w	ip, r2, #4294967295
 8016cee:	4560      	cmp	r0, ip
 8016cf0:	f280 8132 	bge.w	8016f58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8016cf4:	2d00      	cmp	r5, #0
 8016cf6:	f2c0 812f 	blt.w	8016f58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8016cfa:	f107 3cff 	add.w	ip, r7, #4294967295
 8016cfe:	4565      	cmp	r5, ip
 8016d00:	f280 812a 	bge.w	8016f58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8016d04:	b212      	sxth	r2, r2
 8016d06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016d08:	fb05 0002 	mla	r0, r5, r2, r0
 8016d0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016d0e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8016d12:	4405      	add	r5, r0
 8016d14:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016d18:	eb04 0e0c 	add.w	lr, r4, ip
 8016d1c:	f1b8 0f00 	cmp.w	r8, #0
 8016d20:	f000 810c 	beq.w	8016f3c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8016d24:	786f      	ldrb	r7, [r5, #1]
 8016d26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016d2a:	4427      	add	r7, r4
 8016d2c:	2900      	cmp	r1, #0
 8016d2e:	f000 810d 	beq.w	8016f4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016d32:	18a8      	adds	r0, r5, r2
 8016d34:	5caa      	ldrb	r2, [r5, r2]
 8016d36:	7840      	ldrb	r0, [r0, #1]
 8016d38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016d3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016d40:	4422      	add	r2, r4
 8016d42:	4420      	add	r0, r4
 8016d44:	fa1f f388 	uxth.w	r3, r8
 8016d48:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8016d4c:	b289      	uxth	r1, r1
 8016d4e:	f897 c000 	ldrb.w	ip, [r7]
 8016d52:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016d56:	fb03 f901 	mul.w	r9, r3, r1
 8016d5a:	011b      	lsls	r3, r3, #4
 8016d5c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8016d60:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8016d64:	eba3 0309 	sub.w	r3, r3, r9
 8016d68:	b289      	uxth	r1, r1
 8016d6a:	b29b      	uxth	r3, r3
 8016d6c:	eba8 0801 	sub.w	r8, r8, r1
 8016d70:	fb03 fc0c 	mul.w	ip, r3, ip
 8016d74:	fa1f f888 	uxth.w	r8, r8
 8016d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d7c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8016d80:	f892 a000 	ldrb.w	sl, [r2]
 8016d84:	fb01 cc0a 	mla	ip, r1, sl, ip
 8016d88:	f890 a000 	ldrb.w	sl, [r0]
 8016d8c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8016d90:	f896 a000 	ldrb.w	sl, [r6]
 8016d94:	fb1a fa03 	smulbb	sl, sl, r3
 8016d98:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d9e:	fb0c ac05 	mla	ip, ip, r5, sl
 8016da2:	fa1f fc8c 	uxth.w	ip, ip
 8016da6:	f10c 0a01 	add.w	sl, ip, #1
 8016daa:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8016dae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016db2:	f886 a000 	strb.w	sl, [r6]
 8016db6:	f897 c001 	ldrb.w	ip, [r7, #1]
 8016dba:	f89e a001 	ldrb.w	sl, [lr, #1]
 8016dbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8016dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dc4:	fb08 cc0a 	mla	ip, r8, sl, ip
 8016dc8:	f892 a001 	ldrb.w	sl, [r2, #1]
 8016dcc:	fb01 cc0a 	mla	ip, r1, sl, ip
 8016dd0:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016dd4:	fb09 cc0a 	mla	ip, r9, sl, ip
 8016dd8:	f896 a001 	ldrb.w	sl, [r6, #1]
 8016ddc:	fb1a fa03 	smulbb	sl, sl, r3
 8016de0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016de6:	fb0c ac05 	mla	ip, ip, r5, sl
 8016dea:	fa1f fc8c 	uxth.w	ip, ip
 8016dee:	f10c 0a01 	add.w	sl, ip, #1
 8016df2:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8016df6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016dfa:	f886 c001 	strb.w	ip, [r6, #1]
 8016dfe:	78bf      	ldrb	r7, [r7, #2]
 8016e00:	f89e c002 	ldrb.w	ip, [lr, #2]
 8016e04:	437b      	muls	r3, r7
 8016e06:	fb08 330c 	mla	r3, r8, ip, r3
 8016e0a:	f892 c002 	ldrb.w	ip, [r2, #2]
 8016e0e:	7882      	ldrb	r2, [r0, #2]
 8016e10:	fb01 310c 	mla	r1, r1, ip, r3
 8016e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e16:	fb09 1902 	mla	r9, r9, r2, r1
 8016e1a:	78b1      	ldrb	r1, [r6, #2]
 8016e1c:	fb11 f103 	smulbb	r1, r1, r3
 8016e20:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8016e24:	fb09 1505 	mla	r5, r9, r5, r1
 8016e28:	b2ad      	uxth	r5, r5
 8016e2a:	1c6b      	adds	r3, r5, #1
 8016e2c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8016e30:	122d      	asrs	r5, r5, #8
 8016e32:	70b5      	strb	r5, [r6, #2]
 8016e34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016e36:	3603      	adds	r6, #3
 8016e38:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016e3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016e3e:	4413      	add	r3, r2
 8016e40:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016e42:	9325      	str	r3, [sp, #148]	; 0x94
 8016e44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016e46:	4413      	add	r3, r2
 8016e48:	9326      	str	r3, [sp, #152]	; 0x98
 8016e4a:	e73b      	b.n	8016cc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8016e4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016e4e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8016e50:	4433      	add	r3, r6
 8016e52:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8016e54:	9325      	str	r3, [sp, #148]	; 0x94
 8016e56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016e58:	4433      	add	r3, r6
 8016e5a:	9326      	str	r3, [sp, #152]	; 0x98
 8016e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e5e:	3b01      	subs	r3, #1
 8016e60:	9309      	str	r3, [sp, #36]	; 0x24
 8016e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e64:	3303      	adds	r3, #3
 8016e66:	930a      	str	r3, [sp, #40]	; 0x28
 8016e68:	e70d      	b.n	8016c86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016e6a:	d028      	beq.n	8016ebe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8016e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e6e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8016e70:	3b01      	subs	r3, #1
 8016e72:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8016e74:	fb00 5003 	mla	r0, r0, r3, r5
 8016e78:	1400      	asrs	r0, r0, #16
 8016e7a:	f53f af21 	bmi.w	8016cc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016e7e:	3901      	subs	r1, #1
 8016e80:	4288      	cmp	r0, r1
 8016e82:	f6bf af1d 	bge.w	8016cc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016e86:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016e88:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016e8a:	fb01 0303 	mla	r3, r1, r3, r0
 8016e8e:	141b      	asrs	r3, r3, #16
 8016e90:	f53f af16 	bmi.w	8016cc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016e94:	3a01      	subs	r2, #1
 8016e96:	4293      	cmp	r3, r2
 8016e98:	f6bf af12 	bge.w	8016cc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e9e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016ea2:	1cdf      	adds	r7, r3, #3
 8016ea4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8016ea8:	f1b9 0f00 	cmp.w	r9, #0
 8016eac:	dc73      	bgt.n	8016f96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8016eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016eb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016eb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016eba:	441a      	add	r2, r3
 8016ebc:	920a      	str	r2, [sp, #40]	; 0x28
 8016ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	f340 8129 	ble.w	8017118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8016ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016eca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016ecc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016ed0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016ed4:	eef0 6a48 	vmov.f32	s13, s16
 8016ed8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016edc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016ee0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016ee4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8016ee8:	eef0 6a68 	vmov.f32	s13, s17
 8016eec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016ef0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8016ef4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016ef8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016efc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016f00:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016f04:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016f08:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016f0c:	ee18 2a10 	vmov	r2, s16
 8016f10:	eeb0 8a47 	vmov.f32	s16, s14
 8016f14:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f18:	ee18 2a90 	vmov	r2, s17
 8016f1c:	9327      	str	r3, [sp, #156]	; 0x9c
 8016f1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016f20:	eef0 8a67 	vmov.f32	s17, s15
 8016f24:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f28:	9328      	str	r3, [sp, #160]	; 0xa0
 8016f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016f2e:	3b01      	subs	r3, #1
 8016f30:	930d      	str	r3, [sp, #52]	; 0x34
 8016f32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016f34:	bf08      	it	eq
 8016f36:	4613      	moveq	r3, r2
 8016f38:	9309      	str	r3, [sp, #36]	; 0x24
 8016f3a:	e696      	b.n	8016c6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016f3c:	b149      	cbz	r1, 8016f52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8016f3e:	5caa      	ldrb	r2, [r5, r2]
 8016f40:	4670      	mov	r0, lr
 8016f42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016f46:	4422      	add	r2, r4
 8016f48:	4677      	mov	r7, lr
 8016f4a:	e6fb      	b.n	8016d44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8016f4c:	4670      	mov	r0, lr
 8016f4e:	4672      	mov	r2, lr
 8016f50:	e6f8      	b.n	8016d44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8016f52:	4670      	mov	r0, lr
 8016f54:	4672      	mov	r2, lr
 8016f56:	e7f7      	b.n	8016f48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8016f58:	f110 0c01 	adds.w	ip, r0, #1
 8016f5c:	f53f af6a 	bmi.w	8016e34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016f60:	4562      	cmp	r2, ip
 8016f62:	f6ff af67 	blt.w	8016e34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016f66:	f115 0c01 	adds.w	ip, r5, #1
 8016f6a:	f53f af63 	bmi.w	8016e34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016f6e:	4567      	cmp	r7, ip
 8016f70:	f6ff af60 	blt.w	8016e34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f76:	b23f      	sxth	r7, r7
 8016f78:	b212      	sxth	r2, r2
 8016f7a:	9002      	str	r0, [sp, #8]
 8016f7c:	9701      	str	r7, [sp, #4]
 8016f7e:	9200      	str	r2, [sp, #0]
 8016f80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f84:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8016f88:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8016f8c:	4623      	mov	r3, r4
 8016f8e:	4631      	mov	r1, r6
 8016f90:	f7ff fd4c 	bl	8016a2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8016f94:	e74e      	b.n	8016e34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016f96:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016f98:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016f9a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8016f9e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8016fa0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8016fa2:	1400      	asrs	r0, r0, #16
 8016fa4:	142d      	asrs	r5, r5, #16
 8016fa6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016fa8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8016fac:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8016fb0:	fb02 5000 	mla	r0, r2, r0, r5
 8016fb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016fb6:	f815 e000 	ldrb.w	lr, [r5, r0]
 8016fba:	eb05 0c00 	add.w	ip, r5, r0
 8016fbe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016fc2:	eb04 060e 	add.w	r6, r4, lr
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	f000 8097 	beq.w	80170fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8016fcc:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8016fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fd4:	4425      	add	r5, r4
 8016fd6:	2900      	cmp	r1, #0
 8016fd8:	f000 8098 	beq.w	801710c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8016fdc:	eb0c 0002 	add.w	r0, ip, r2
 8016fe0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016fe4:	7840      	ldrb	r0, [r0, #1]
 8016fe6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016fea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016fee:	4422      	add	r2, r4
 8016ff0:	4420      	add	r0, r4
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8016ff8:	b289      	uxth	r1, r1
 8016ffa:	f895 e000 	ldrb.w	lr, [r5]
 8016ffe:	3703      	adds	r7, #3
 8017000:	f109 39ff 	add.w	r9, r9, #4294967295
 8017004:	fb03 f801 	mul.w	r8, r3, r1
 8017008:	011b      	lsls	r3, r3, #4
 801700a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801700e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8017012:	eba3 0308 	sub.w	r3, r3, r8
 8017016:	b289      	uxth	r1, r1
 8017018:	b29b      	uxth	r3, r3
 801701a:	ebac 0c01 	sub.w	ip, ip, r1
 801701e:	fb03 fe0e 	mul.w	lr, r3, lr
 8017022:	fa1f fc8c 	uxth.w	ip, ip
 8017026:	930f      	str	r3, [sp, #60]	; 0x3c
 8017028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801702a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801702e:	f892 b000 	ldrb.w	fp, [r2]
 8017032:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017036:	f890 b000 	ldrb.w	fp, [r0]
 801703a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801703e:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8017042:	fb1b fb03 	smulbb	fp, fp, r3
 8017046:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801704a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801704c:	fb0e be0a 	mla	lr, lr, sl, fp
 8017050:	fa1f fe8e 	uxth.w	lr, lr
 8017054:	f10e 0b01 	add.w	fp, lr, #1
 8017058:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801705c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017060:	f807 ec06 	strb.w	lr, [r7, #-6]
 8017064:	f895 e001 	ldrb.w	lr, [r5, #1]
 8017068:	f896 b001 	ldrb.w	fp, [r6, #1]
 801706c:	fb03 fe0e 	mul.w	lr, r3, lr
 8017070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017072:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017076:	f892 b001 	ldrb.w	fp, [r2, #1]
 801707a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801707e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017082:	fb08 ee0b 	mla	lr, r8, fp, lr
 8017086:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801708a:	fb1b fb03 	smulbb	fp, fp, r3
 801708e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8017092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017094:	fb0e be0a 	mla	lr, lr, sl, fp
 8017098:	fa1f fe8e 	uxth.w	lr, lr
 801709c:	f10e 0b01 	add.w	fp, lr, #1
 80170a0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80170a4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80170a8:	f807 ec05 	strb.w	lr, [r7, #-5]
 80170ac:	78ad      	ldrb	r5, [r5, #2]
 80170ae:	78b6      	ldrb	r6, [r6, #2]
 80170b0:	436b      	muls	r3, r5
 80170b2:	7895      	ldrb	r5, [r2, #2]
 80170b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80170b6:	fb0c 3306 	mla	r3, ip, r6, r3
 80170ba:	fb01 3305 	mla	r3, r1, r5, r3
 80170be:	7885      	ldrb	r5, [r0, #2]
 80170c0:	fb08 3805 	mla	r8, r8, r5, r3
 80170c4:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80170c8:	fb13 f302 	smulbb	r3, r3, r2
 80170cc:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80170d0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80170d2:	fb08 380a 	mla	r8, r8, sl, r3
 80170d6:	fa1f f888 	uxth.w	r8, r8
 80170da:	f108 0301 	add.w	r3, r8, #1
 80170de:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80170e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80170e4:	4413      	add	r3, r2
 80170e6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80170e8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80170ec:	9325      	str	r3, [sp, #148]	; 0x94
 80170ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80170f0:	f807 8c04 	strb.w	r8, [r7, #-4]
 80170f4:	4413      	add	r3, r2
 80170f6:	9326      	str	r3, [sp, #152]	; 0x98
 80170f8:	e6d6      	b.n	8016ea8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80170fa:	b151      	cbz	r1, 8017112 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80170fc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017100:	4630      	mov	r0, r6
 8017102:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017106:	4422      	add	r2, r4
 8017108:	4635      	mov	r5, r6
 801710a:	e772      	b.n	8016ff2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801710c:	4630      	mov	r0, r6
 801710e:	4632      	mov	r2, r6
 8017110:	e76f      	b.n	8016ff2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8017112:	4630      	mov	r0, r6
 8017114:	4632      	mov	r2, r6
 8017116:	e7f7      	b.n	8017108 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8017118:	b013      	add	sp, #76	; 0x4c
 801711a:	ecbd 8b08 	vpop	{d8-d11}
 801711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017124 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8017124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017128:	784d      	ldrb	r5, [r1, #1]
 801712a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801712e:	022d      	lsls	r5, r5, #8
 8017130:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8017134:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8017138:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801713c:	f891 9000 	ldrb.w	r9, [r1]
 8017140:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8017144:	ea45 0509 	orr.w	r5, r5, r9
 8017148:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801714c:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8017150:	9501      	str	r5, [sp, #4]
 8017152:	fb06 470c 	mla	r7, r6, ip, r4
 8017156:	2e00      	cmp	r6, #0
 8017158:	eb02 0e07 	add.w	lr, r2, r7
 801715c:	db46      	blt.n	80171ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801715e:	45b0      	cmp	r8, r6
 8017160:	dd44      	ble.n	80171ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8017162:	2c00      	cmp	r4, #0
 8017164:	db40      	blt.n	80171e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8017166:	45a4      	cmp	ip, r4
 8017168:	dd3e      	ble.n	80171e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801716a:	5dd7      	ldrb	r7, [r2, r7]
 801716c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017170:	441f      	add	r7, r3
 8017172:	1c62      	adds	r2, r4, #1
 8017174:	d43d      	bmi.n	80171f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8017176:	4594      	cmp	ip, r2
 8017178:	dd3b      	ble.n	80171f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801717a:	f1ba 0f00 	cmp.w	sl, #0
 801717e:	d038      	beq.n	80171f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8017180:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8017184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017188:	441d      	add	r5, r3
 801718a:	3601      	adds	r6, #1
 801718c:	d435      	bmi.n	80171fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801718e:	45b0      	cmp	r8, r6
 8017190:	dd33      	ble.n	80171fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8017192:	b390      	cbz	r0, 80171fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8017194:	2c00      	cmp	r4, #0
 8017196:	db2e      	blt.n	80171f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8017198:	45a4      	cmp	ip, r4
 801719a:	dd2c      	ble.n	80171f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801719c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80171a0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80171a4:	441e      	add	r6, r3
 80171a6:	1c62      	adds	r2, r4, #1
 80171a8:	d42a      	bmi.n	8017200 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80171aa:	4594      	cmp	ip, r2
 80171ac:	dd28      	ble.n	8017200 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80171ae:	f1ba 0f00 	cmp.w	sl, #0
 80171b2:	d025      	beq.n	8017200 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80171b4:	44f4      	add	ip, lr
 80171b6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80171ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80171be:	4413      	add	r3, r2
 80171c0:	f1ba 0f0f 	cmp.w	sl, #15
 80171c4:	f897 8000 	ldrb.w	r8, [r7]
 80171c8:	f895 9000 	ldrb.w	r9, [r5]
 80171cc:	f896 e000 	ldrb.w	lr, [r6]
 80171d0:	f893 c000 	ldrb.w	ip, [r3]
 80171d4:	d801      	bhi.n	80171da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 80171d6:	280f      	cmp	r0, #15
 80171d8:	d914      	bls.n	8017204 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 80171da:	4b29      	ldr	r3, [pc, #164]	; (8017280 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 80171dc:	f240 1157 	movw	r1, #343	; 0x157
 80171e0:	4a28      	ldr	r2, [pc, #160]	; (8017284 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80171e2:	4829      	ldr	r0, [pc, #164]	; (8017288 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80171e4:	f004 fbee 	bl	801b9c4 <__assert_func>
 80171e8:	af01      	add	r7, sp, #4
 80171ea:	e7c2      	b.n	8017172 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80171ec:	ad01      	add	r5, sp, #4
 80171ee:	462f      	mov	r7, r5
 80171f0:	e7cb      	b.n	801718a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80171f2:	ad01      	add	r5, sp, #4
 80171f4:	e7c9      	b.n	801718a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80171f6:	ae01      	add	r6, sp, #4
 80171f8:	e7d5      	b.n	80171a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80171fa:	ab01      	add	r3, sp, #4
 80171fc:	461e      	mov	r6, r3
 80171fe:	e7df      	b.n	80171c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8017200:	ab01      	add	r3, sp, #4
 8017202:	e7dd      	b.n	80171c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8017204:	fa1f f48a 	uxth.w	r4, sl
 8017208:	b280      	uxth	r0, r0
 801720a:	fb04 fa00 	mul.w	sl, r4, r0
 801720e:	0124      	lsls	r4, r4, #4
 8017210:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8017214:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8017218:	b282      	uxth	r2, r0
 801721a:	eba4 000a 	sub.w	r0, r4, sl
 801721e:	ebab 0b02 	sub.w	fp, fp, r2
 8017222:	b280      	uxth	r0, r0
 8017224:	fa1f fb8b 	uxth.w	fp, fp
 8017228:	fb00 f909 	mul.w	r9, r0, r9
 801722c:	fb0b 9808 	mla	r8, fp, r8, r9
 8017230:	fb02 8e0e 	mla	lr, r2, lr, r8
 8017234:	fb0a ec0c 	mla	ip, sl, ip, lr
 8017238:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801723c:	f881 c000 	strb.w	ip, [r1]
 8017240:	786c      	ldrb	r4, [r5, #1]
 8017242:	f897 c001 	ldrb.w	ip, [r7, #1]
 8017246:	4344      	muls	r4, r0
 8017248:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801724c:	7874      	ldrb	r4, [r6, #1]
 801724e:	fb02 cc04 	mla	ip, r2, r4, ip
 8017252:	785c      	ldrb	r4, [r3, #1]
 8017254:	fb0a c404 	mla	r4, sl, r4, ip
 8017258:	1224      	asrs	r4, r4, #8
 801725a:	704c      	strb	r4, [r1, #1]
 801725c:	78ad      	ldrb	r5, [r5, #2]
 801725e:	78bc      	ldrb	r4, [r7, #2]
 8017260:	4368      	muls	r0, r5
 8017262:	fb0b 0b04 	mla	fp, fp, r4, r0
 8017266:	78b0      	ldrb	r0, [r6, #2]
 8017268:	fb02 b000 	mla	r0, r2, r0, fp
 801726c:	789a      	ldrb	r2, [r3, #2]
 801726e:	fb0a 0a02 	mla	sl, sl, r2, r0
 8017272:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017276:	f881 a002 	strb.w	sl, [r1, #2]
 801727a:	b003      	add	sp, #12
 801727c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017280:	0801fab5 	.word	0x0801fab5
 8017284:	0802001f 	.word	0x0802001f
 8017288:	0801fb7e 	.word	0x0801fb7e

0801728c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017290:	ed2d 8b0a 	vpush	{d8-d12}
 8017294:	b08d      	sub	sp, #52	; 0x34
 8017296:	eeb0 aa40 	vmov.f32	s20, s0
 801729a:	eef0 9a60 	vmov.f32	s19, s1
 801729e:	900b      	str	r0, [sp, #44]	; 0x2c
 80172a0:	eeb0 9a41 	vmov.f32	s18, s2
 80172a4:	9306      	str	r3, [sp, #24]
 80172a6:	eeb0 8a62 	vmov.f32	s16, s5
 80172aa:	eef0 8a43 	vmov.f32	s17, s6
 80172ae:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80172b0:	eeb0 ca44 	vmov.f32	s24, s8
 80172b4:	eef0 ba64 	vmov.f32	s23, s9
 80172b8:	eeb0 ba45 	vmov.f32	s22, s10
 80172bc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80172c0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80172c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80172c6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80172ca:	6850      	ldr	r0, [r2, #4]
 80172cc:	6812      	ldr	r2, [r2, #0]
 80172ce:	fb00 1303 	mla	r3, r0, r3, r1
 80172d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80172d6:	18d3      	adds	r3, r2, r3
 80172d8:	9307      	str	r3, [sp, #28]
 80172da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	9308      	str	r3, [sp, #32]
 80172e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80172e2:	685d      	ldr	r5, [r3, #4]
 80172e4:	3504      	adds	r5, #4
 80172e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	dc03      	bgt.n	80172f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80172ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	f340 81e6 	ble.w	80176c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80172f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80172f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80172fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80172fe:	1e48      	subs	r0, r1, #1
 8017300:	1e56      	subs	r6, r2, #1
 8017302:	9b06      	ldr	r3, [sp, #24]
 8017304:	2b00      	cmp	r3, #0
 8017306:	f340 80bd 	ble.w	8017484 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801730a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801730c:	1427      	asrs	r7, r4, #16
 801730e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017312:	d406      	bmi.n	8017322 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017314:	4287      	cmp	r7, r0
 8017316:	da04      	bge.n	8017322 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017318:	2b00      	cmp	r3, #0
 801731a:	db02      	blt.n	8017322 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801731c:	42b3      	cmp	r3, r6
 801731e:	f2c0 80b2 	blt.w	8017486 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017322:	3701      	adds	r7, #1
 8017324:	f100 80a1 	bmi.w	801746a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017328:	42b9      	cmp	r1, r7
 801732a:	f2c0 809e 	blt.w	801746a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801732e:	3301      	adds	r3, #1
 8017330:	f100 809b 	bmi.w	801746a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017334:	429a      	cmp	r2, r3
 8017336:	f2c0 8098 	blt.w	801746a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801733a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801733e:	f1bb 0f00 	cmp.w	fp, #0
 8017342:	f340 80bf 	ble.w	80174c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8017346:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017348:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801734a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801734c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017350:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017354:	1420      	asrs	r0, r4, #16
 8017356:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017358:	ea4f 4723 	mov.w	r7, r3, asr #16
 801735c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017360:	6892      	ldr	r2, [r2, #8]
 8017362:	f100 8103 	bmi.w	801756c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017366:	f102 3eff 	add.w	lr, r2, #4294967295
 801736a:	4570      	cmp	r0, lr
 801736c:	f280 80fe 	bge.w	801756c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017370:	2f00      	cmp	r7, #0
 8017372:	f2c0 80fb 	blt.w	801756c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017376:	f10c 3eff 	add.w	lr, ip, #4294967295
 801737a:	4577      	cmp	r7, lr
 801737c:	f280 80f6 	bge.w	801756c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017380:	b212      	sxth	r2, r2
 8017382:	fb07 0002 	mla	r0, r7, r2, r0
 8017386:	9f08      	ldr	r7, [sp, #32]
 8017388:	f817 8000 	ldrb.w	r8, [r7, r0]
 801738c:	eb07 0e00 	add.w	lr, r7, r0
 8017390:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017394:	eb05 0c08 	add.w	ip, r5, r8
 8017398:	2b00      	cmp	r3, #0
 801739a:	f000 80d8 	beq.w	801754e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801739e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80173a2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80173a6:	442f      	add	r7, r5
 80173a8:	2900      	cmp	r1, #0
 80173aa:	f000 80d9 	beq.w	8017560 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80173ae:	eb0e 0002 	add.w	r0, lr, r2
 80173b2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80173b6:	7840      	ldrb	r0, [r0, #1]
 80173b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80173bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80173c0:	442a      	add	r2, r5
 80173c2:	4428      	add	r0, r5
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	f815 a008 	ldrb.w	sl, [r5, r8]
 80173ca:	b289      	uxth	r1, r1
 80173cc:	f897 8000 	ldrb.w	r8, [r7]
 80173d0:	fb03 f901 	mul.w	r9, r3, r1
 80173d4:	011b      	lsls	r3, r3, #4
 80173d6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80173da:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80173de:	eba3 0309 	sub.w	r3, r3, r9
 80173e2:	b289      	uxth	r1, r1
 80173e4:	b29b      	uxth	r3, r3
 80173e6:	ebae 0e01 	sub.w	lr, lr, r1
 80173ea:	fb03 f808 	mul.w	r8, r3, r8
 80173ee:	fa1f fe8e 	uxth.w	lr, lr
 80173f2:	fb0e 880a 	mla	r8, lr, sl, r8
 80173f6:	f892 a000 	ldrb.w	sl, [r2]
 80173fa:	fb01 880a 	mla	r8, r1, sl, r8
 80173fe:	f890 a000 	ldrb.w	sl, [r0]
 8017402:	fb09 880a 	mla	r8, r9, sl, r8
 8017406:	ea4f 2828 	mov.w	r8, r8, asr #8
 801740a:	f886 8000 	strb.w	r8, [r6]
 801740e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017412:	f89c a001 	ldrb.w	sl, [ip, #1]
 8017416:	fb03 f808 	mul.w	r8, r3, r8
 801741a:	fb0e 880a 	mla	r8, lr, sl, r8
 801741e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017422:	fb01 880a 	mla	r8, r1, sl, r8
 8017426:	f890 a001 	ldrb.w	sl, [r0, #1]
 801742a:	fb09 880a 	mla	r8, r9, sl, r8
 801742e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017432:	f886 8001 	strb.w	r8, [r6, #1]
 8017436:	78bf      	ldrb	r7, [r7, #2]
 8017438:	f89c c002 	ldrb.w	ip, [ip, #2]
 801743c:	437b      	muls	r3, r7
 801743e:	7892      	ldrb	r2, [r2, #2]
 8017440:	fb0e 330c 	mla	r3, lr, ip, r3
 8017444:	fb01 3102 	mla	r1, r1, r2, r3
 8017448:	7882      	ldrb	r2, [r0, #2]
 801744a:	fb09 1902 	mla	r9, r9, r2, r1
 801744e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017452:	f886 9002 	strb.w	r9, [r6, #2]
 8017456:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017458:	3603      	adds	r6, #3
 801745a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801745c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017460:	441c      	add	r4, r3
 8017462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017464:	4413      	add	r3, r2
 8017466:	9322      	str	r3, [sp, #136]	; 0x88
 8017468:	e769      	b.n	801733e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801746a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801746c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801746e:	441c      	add	r4, r3
 8017470:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017472:	443b      	add	r3, r7
 8017474:	9322      	str	r3, [sp, #136]	; 0x88
 8017476:	9b06      	ldr	r3, [sp, #24]
 8017478:	3b01      	subs	r3, #1
 801747a:	9306      	str	r3, [sp, #24]
 801747c:	9b07      	ldr	r3, [sp, #28]
 801747e:	3303      	adds	r3, #3
 8017480:	9307      	str	r3, [sp, #28]
 8017482:	e73e      	b.n	8017302 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017484:	d026      	beq.n	80174d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8017486:	9b06      	ldr	r3, [sp, #24]
 8017488:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801748a:	3b01      	subs	r3, #1
 801748c:	fb00 4003 	mla	r0, r0, r3, r4
 8017490:	1400      	asrs	r0, r0, #16
 8017492:	f53f af52 	bmi.w	801733a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017496:	3901      	subs	r1, #1
 8017498:	4288      	cmp	r0, r1
 801749a:	f6bf af4e 	bge.w	801733a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801749e:	9924      	ldr	r1, [sp, #144]	; 0x90
 80174a0:	9822      	ldr	r0, [sp, #136]	; 0x88
 80174a2:	fb01 0303 	mla	r3, r1, r3, r0
 80174a6:	141b      	asrs	r3, r3, #16
 80174a8:	f53f af47 	bmi.w	801733a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80174ac:	3a01      	subs	r2, #1
 80174ae:	4293      	cmp	r3, r2
 80174b0:	f6bf af43 	bge.w	801733a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80174b4:	9b07      	ldr	r3, [sp, #28]
 80174b6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80174ba:	f103 0803 	add.w	r8, r3, #3
 80174be:	f1ba 0f00 	cmp.w	sl, #0
 80174c2:	dc71      	bgt.n	80175a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80174c4:	9b06      	ldr	r3, [sp, #24]
 80174c6:	9a07      	ldr	r2, [sp, #28]
 80174c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80174cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80174d0:	441a      	add	r2, r3
 80174d2:	9207      	str	r2, [sp, #28]
 80174d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	f340 80f2 	ble.w	80176c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80174dc:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80174e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174e2:	ee79 9aab 	vadd.f32	s19, s19, s23
 80174e6:	eef0 6a48 	vmov.f32	s13, s16
 80174ea:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80174ee:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80174f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80174f6:	ee16 4a90 	vmov	r4, s13
 80174fa:	eef0 6a68 	vmov.f32	s13, s17
 80174fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017502:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8017506:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801750a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801750e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017512:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017516:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801751a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801751e:	ee18 2a10 	vmov	r2, s16
 8017522:	eeb0 8a47 	vmov.f32	s16, s14
 8017526:	fb92 f3f3 	sdiv	r3, r2, r3
 801752a:	ee18 2a90 	vmov	r2, s17
 801752e:	9323      	str	r3, [sp, #140]	; 0x8c
 8017530:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017532:	eef0 8a67 	vmov.f32	s17, s15
 8017536:	fb92 f3f3 	sdiv	r3, r2, r3
 801753a:	9324      	str	r3, [sp, #144]	; 0x90
 801753c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801753e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017540:	3b01      	subs	r3, #1
 8017542:	9309      	str	r3, [sp, #36]	; 0x24
 8017544:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017546:	bf08      	it	eq
 8017548:	4613      	moveq	r3, r2
 801754a:	9306      	str	r3, [sp, #24]
 801754c:	e6cb      	b.n	80172e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801754e:	b151      	cbz	r1, 8017566 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8017550:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017554:	4660      	mov	r0, ip
 8017556:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801755a:	442a      	add	r2, r5
 801755c:	4667      	mov	r7, ip
 801755e:	e731      	b.n	80173c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017560:	4660      	mov	r0, ip
 8017562:	4662      	mov	r2, ip
 8017564:	e72e      	b.n	80173c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017566:	4660      	mov	r0, ip
 8017568:	4662      	mov	r2, ip
 801756a:	e7f7      	b.n	801755c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801756c:	f110 0e01 	adds.w	lr, r0, #1
 8017570:	f53f af71 	bmi.w	8017456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017574:	4572      	cmp	r2, lr
 8017576:	f6ff af6e 	blt.w	8017456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801757a:	f117 0e01 	adds.w	lr, r7, #1
 801757e:	f53f af6a 	bmi.w	8017456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017582:	45f4      	cmp	ip, lr
 8017584:	f6ff af67 	blt.w	8017456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017588:	b212      	sxth	r2, r2
 801758a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801758e:	fa0f f38c 	sxth.w	r3, ip
 8017592:	9200      	str	r2, [sp, #0]
 8017594:	4631      	mov	r1, r6
 8017596:	9a08      	ldr	r2, [sp, #32]
 8017598:	9301      	str	r3, [sp, #4]
 801759a:	462b      	mov	r3, r5
 801759c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80175a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80175a2:	f7ff fdbf 	bl	8017124 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80175a6:	e756      	b.n	8017456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80175a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80175aa:	1426      	asrs	r6, r4, #16
 80175ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 80175ae:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80175b2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80175b6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80175b8:	1400      	asrs	r0, r0, #16
 80175ba:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80175be:	fb02 6000 	mla	r0, r2, r0, r6
 80175c2:	9e08      	ldr	r6, [sp, #32]
 80175c4:	f816 e000 	ldrb.w	lr, [r6, r0]
 80175c8:	eb06 0c00 	add.w	ip, r6, r0
 80175cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80175d0:	eb05 070e 	add.w	r7, r5, lr
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d064      	beq.n	80176a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 80175d8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80175dc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80175e0:	442e      	add	r6, r5
 80175e2:	2900      	cmp	r1, #0
 80175e4:	d066      	beq.n	80176b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80175e6:	eb0c 0002 	add.w	r0, ip, r2
 80175ea:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80175ee:	7840      	ldrb	r0, [r0, #1]
 80175f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80175f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80175f8:	442a      	add	r2, r5
 80175fa:	4428      	add	r0, r5
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8017602:	b289      	uxth	r1, r1
 8017604:	f896 e000 	ldrb.w	lr, [r6]
 8017608:	f108 0803 	add.w	r8, r8, #3
 801760c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017610:	fb03 f901 	mul.w	r9, r3, r1
 8017614:	011b      	lsls	r3, r3, #4
 8017616:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801761a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801761e:	eba3 0309 	sub.w	r3, r3, r9
 8017622:	b289      	uxth	r1, r1
 8017624:	b29b      	uxth	r3, r3
 8017626:	ebac 0c01 	sub.w	ip, ip, r1
 801762a:	fb03 fe0e 	mul.w	lr, r3, lr
 801762e:	fa1f fc8c 	uxth.w	ip, ip
 8017632:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017636:	f892 b000 	ldrb.w	fp, [r2]
 801763a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801763e:	f890 b000 	ldrb.w	fp, [r0]
 8017642:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017646:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801764a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801764e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8017652:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017656:	fb03 fe0e 	mul.w	lr, r3, lr
 801765a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801765e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017662:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017666:	f890 b001 	ldrb.w	fp, [r0, #1]
 801766a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801766e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017672:	f808 ec05 	strb.w	lr, [r8, #-5]
 8017676:	78b6      	ldrb	r6, [r6, #2]
 8017678:	78bf      	ldrb	r7, [r7, #2]
 801767a:	4373      	muls	r3, r6
 801767c:	7896      	ldrb	r6, [r2, #2]
 801767e:	7882      	ldrb	r2, [r0, #2]
 8017680:	fb0c 3307 	mla	r3, ip, r7, r3
 8017684:	fb01 3306 	mla	r3, r1, r6, r3
 8017688:	fb09 3902 	mla	r9, r9, r2, r3
 801768c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801768e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017690:	441c      	add	r4, r3
 8017692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017694:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017698:	4413      	add	r3, r2
 801769a:	f808 9c04 	strb.w	r9, [r8, #-4]
 801769e:	9322      	str	r3, [sp, #136]	; 0x88
 80176a0:	e70d      	b.n	80174be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80176a2:	b151      	cbz	r1, 80176ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80176a4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80176a8:	4638      	mov	r0, r7
 80176aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176ae:	442a      	add	r2, r5
 80176b0:	463e      	mov	r6, r7
 80176b2:	e7a3      	b.n	80175fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80176b4:	4638      	mov	r0, r7
 80176b6:	463a      	mov	r2, r7
 80176b8:	e7a0      	b.n	80175fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80176ba:	4638      	mov	r0, r7
 80176bc:	463a      	mov	r2, r7
 80176be:	e7f7      	b.n	80176b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80176c0:	b00d      	add	sp, #52	; 0x34
 80176c2:	ecbd 8b0a 	vpop	{d8-d12}
 80176c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080176cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80176cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176d0:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 80176d4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80176d8:	2d00      	cmp	r5, #0
 80176da:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80176de:	fb05 040e 	mla	r4, r5, lr, r0
 80176e2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80176e6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80176ea:	eb02 0804 	add.w	r8, r2, r4
 80176ee:	db40      	blt.n	8017772 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80176f0:	45a9      	cmp	r9, r5
 80176f2:	dd3e      	ble.n	8017772 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80176f4:	2800      	cmp	r0, #0
 80176f6:	db3a      	blt.n	801776e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80176f8:	4586      	cmp	lr, r0
 80176fa:	dd38      	ble.n	801776e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80176fc:	5d12      	ldrb	r2, [r2, r4]
 80176fe:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017702:	1c42      	adds	r2, r0, #1
 8017704:	d438      	bmi.n	8017778 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8017706:	4596      	cmp	lr, r2
 8017708:	dd36      	ble.n	8017778 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 801770a:	b3bf      	cbz	r7, 801777c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 801770c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017710:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8017714:	3501      	adds	r5, #1
 8017716:	d435      	bmi.n	8017784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8017718:	45a9      	cmp	r9, r5
 801771a:	dd33      	ble.n	8017784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 801771c:	f1bc 0f00 	cmp.w	ip, #0
 8017720:	d033      	beq.n	801778a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8017722:	2800      	cmp	r0, #0
 8017724:	db2c      	blt.n	8017780 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8017726:	4586      	cmp	lr, r0
 8017728:	dd2a      	ble.n	8017780 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 801772a:	f818 200e 	ldrb.w	r2, [r8, lr]
 801772e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017732:	3001      	adds	r0, #1
 8017734:	d42c      	bmi.n	8017790 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8017736:	4586      	cmp	lr, r0
 8017738:	dd2a      	ble.n	8017790 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 801773a:	b35f      	cbz	r7, 8017794 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 801773c:	44c6      	add	lr, r8
 801773e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017742:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017746:	2f0f      	cmp	r7, #15
 8017748:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801774c:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8017750:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8017754:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8017758:	d802      	bhi.n	8017760 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 801775a:	f1bc 0f0f 	cmp.w	ip, #15
 801775e:	d91b      	bls.n	8017798 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8017760:	4b77      	ldr	r3, [pc, #476]	; (8017940 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8017762:	f240 1157 	movw	r1, #343	; 0x157
 8017766:	4a77      	ldr	r2, [pc, #476]	; (8017944 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8017768:	4877      	ldr	r0, [pc, #476]	; (8017948 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 801776a:	f004 f92b 	bl	801b9c4 <__assert_func>
 801776e:	2600      	movs	r6, #0
 8017770:	e7c7      	b.n	8017702 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8017772:	2400      	movs	r4, #0
 8017774:	4626      	mov	r6, r4
 8017776:	e7cd      	b.n	8017714 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017778:	2400      	movs	r4, #0
 801777a:	e7cb      	b.n	8017714 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801777c:	463c      	mov	r4, r7
 801777e:	e7c9      	b.n	8017714 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017780:	2500      	movs	r5, #0
 8017782:	e7d6      	b.n	8017732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8017784:	2200      	movs	r2, #0
 8017786:	4615      	mov	r5, r2
 8017788:	e7dd      	b.n	8017746 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801778a:	4662      	mov	r2, ip
 801778c:	4665      	mov	r5, ip
 801778e:	e7da      	b.n	8017746 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017790:	2200      	movs	r2, #0
 8017792:	e7d8      	b.n	8017746 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017794:	463a      	mov	r2, r7
 8017796:	e7d6      	b.n	8017746 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017798:	b2bf      	uxth	r7, r7
 801779a:	fa1f f08c 	uxth.w	r0, ip
 801779e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 80177a2:	fb00 fe07 	mul.w	lr, r0, r7
 80177a6:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80177aa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80177ae:	ebac 070e 	sub.w	r7, ip, lr
 80177b2:	b280      	uxth	r0, r0
 80177b4:	b2bf      	uxth	r7, r7
 80177b6:	1a1b      	subs	r3, r3, r0
 80177b8:	fb07 fc0a 	mul.w	ip, r7, sl
 80177bc:	b29b      	uxth	r3, r3
 80177be:	fb03 cc0b 	mla	ip, r3, fp, ip
 80177c2:	9300      	str	r3, [sp, #0]
 80177c4:	fb00 cc09 	mla	ip, r0, r9, ip
 80177c8:	fb0e cc08 	mla	ip, lr, r8, ip
 80177cc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80177d0:	9301      	str	r3, [sp, #4]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f000 80b0 	beq.w	8017938 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 80177d8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80177dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80177e0:	fb0b fc0c 	mul.w	ip, fp, ip
 80177e4:	fb0b f606 	mul.w	r6, fp, r6
 80177e8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80177ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80177f0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80177f4:	44dc      	add	ip, fp
 80177f6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80177fa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80177fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017802:	fb0a fb0b 	mul.w	fp, sl, fp
 8017806:	fb0a fa04 	mul.w	sl, sl, r4
 801780a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801780e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8017812:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8017816:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801781a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801781e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017822:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8017826:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801782a:	0a36      	lsrs	r6, r6, #8
 801782c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017830:	44dc      	add	ip, fp
 8017832:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8017836:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801783a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801783e:	fb09 fb0b 	mul.w	fp, r9, fp
 8017842:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017846:	fb09 f905 	mul.w	r9, r9, r5
 801784a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801784e:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8017852:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017856:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801785a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801785e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017862:	fb0c fc07 	mul.w	ip, ip, r7
 8017866:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801786a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801786e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017872:	445c      	add	r4, fp
 8017874:	fb08 f505 	mul.w	r5, r8, r5
 8017878:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801787c:	fb08 f802 	mul.w	r8, r8, r2
 8017880:	0a24      	lsrs	r4, r4, #8
 8017882:	0a2a      	lsrs	r2, r5, #8
 8017884:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8017888:	fb07 f70a 	mul.w	r7, r7, sl
 801788c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017890:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017894:	4415      	add	r5, r2
 8017896:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801789a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801789e:	9a00      	ldr	r2, [sp, #0]
 80178a0:	0a2d      	lsrs	r5, r5, #8
 80178a2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80178a6:	fb03 cc02 	mla	ip, r3, r2, ip
 80178aa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80178ae:	fb02 7306 	mla	r3, r2, r6, r7
 80178b2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80178b6:	9a01      	ldr	r2, [sp, #4]
 80178b8:	fb05 c50e 	mla	r5, r5, lr, ip
 80178bc:	fb0e 3e08 	mla	lr, lr, r8, r3
 80178c0:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 80178c4:	fb04 5400 	mla	r4, r4, r0, r5
 80178c8:	fb00 e303 	mla	r3, r0, r3, lr
 80178cc:	0a24      	lsrs	r4, r4, #8
 80178ce:	0a1b      	lsrs	r3, r3, #8
 80178d0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80178d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80178d8:	431c      	orrs	r4, r3
 80178da:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80178de:	b29b      	uxth	r3, r3
 80178e0:	b2e0      	uxtb	r0, r4
 80178e2:	435a      	muls	r2, r3
 80178e4:	fb10 f003 	smulbb	r0, r0, r3
 80178e8:	1c55      	adds	r5, r2, #1
 80178ea:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 80178ee:	780a      	ldrb	r2, [r1, #0]
 80178f0:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 80178f4:	b2ed      	uxtb	r5, r5
 80178f6:	fb02 0205 	mla	r2, r2, r5, r0
 80178fa:	b292      	uxth	r2, r2
 80178fc:	1c50      	adds	r0, r2, #1
 80178fe:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017902:	7848      	ldrb	r0, [r1, #1]
 8017904:	fb10 f005 	smulbb	r0, r0, r5
 8017908:	1212      	asrs	r2, r2, #8
 801790a:	700a      	strb	r2, [r1, #0]
 801790c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8017910:	0c24      	lsrs	r4, r4, #16
 8017912:	fb02 0203 	mla	r2, r2, r3, r0
 8017916:	b292      	uxth	r2, r2
 8017918:	1c50      	adds	r0, r2, #1
 801791a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801791e:	1212      	asrs	r2, r2, #8
 8017920:	704a      	strb	r2, [r1, #1]
 8017922:	788a      	ldrb	r2, [r1, #2]
 8017924:	fb12 f505 	smulbb	r5, r2, r5
 8017928:	fb04 5303 	mla	r3, r4, r3, r5
 801792c:	b29b      	uxth	r3, r3
 801792e:	1c5a      	adds	r2, r3, #1
 8017930:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017934:	121b      	asrs	r3, r3, #8
 8017936:	708b      	strb	r3, [r1, #2]
 8017938:	b003      	add	sp, #12
 801793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801793e:	bf00      	nop
 8017940:	0801fab5 	.word	0x0801fab5
 8017944:	0802001f 	.word	0x0802001f
 8017948:	0801fb7e 	.word	0x0801fb7e

0801794c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017950:	ed2d 8b08 	vpush	{d8-d11}
 8017954:	b09f      	sub	sp, #124	; 0x7c
 8017956:	eeb0 aa40 	vmov.f32	s20, s0
 801795a:	eef0 9a60 	vmov.f32	s19, s1
 801795e:	921b      	str	r2, [sp, #108]	; 0x6c
 8017960:	eeb0 9a41 	vmov.f32	s18, s2
 8017964:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8017966:	eeb0 8a62 	vmov.f32	s16, s5
 801796a:	9309      	str	r3, [sp, #36]	; 0x24
 801796c:	eef0 8a43 	vmov.f32	s17, s6
 8017970:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8017974:	eef0 ba44 	vmov.f32	s23, s8
 8017978:	901d      	str	r0, [sp, #116]	; 0x74
 801797a:	eeb0 ba64 	vmov.f32	s22, s9
 801797e:	931c      	str	r3, [sp, #112]	; 0x70
 8017980:	eef0 aa45 	vmov.f32	s21, s10
 8017984:	6850      	ldr	r0, [r2, #4]
 8017986:	9119      	str	r1, [sp, #100]	; 0x64
 8017988:	6812      	ldr	r2, [r2, #0]
 801798a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801798c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8017990:	fb00 1303 	mla	r3, r0, r3, r1
 8017994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017998:	18d3      	adds	r3, r2, r3
 801799a:	930c      	str	r3, [sp, #48]	; 0x30
 801799c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	9312      	str	r3, [sp, #72]	; 0x48
 80179a2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80179a4:	685e      	ldr	r6, [r3, #4]
 80179a6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80179aa:	3604      	adds	r6, #4
 80179ac:	930d      	str	r3, [sp, #52]	; 0x34
 80179ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	dc03      	bgt.n	80179bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80179b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	f340 8378 	ble.w	80180ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80179bc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80179be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80179c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80179c6:	1e48      	subs	r0, r1, #1
 80179c8:	1e57      	subs	r7, r2, #1
 80179ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	f340 818c 	ble.w	8017cea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80179d2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80179d4:	142b      	asrs	r3, r5, #16
 80179d6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80179da:	d406      	bmi.n	80179ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80179dc:	4584      	cmp	ip, r0
 80179de:	da04      	bge.n	80179ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	db02      	blt.n	80179ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80179e4:	42bb      	cmp	r3, r7
 80179e6:	f2c0 8181 	blt.w	8017cec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 80179ea:	f11c 0c01 	adds.w	ip, ip, #1
 80179ee:	f100 816f 	bmi.w	8017cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80179f2:	4561      	cmp	r1, ip
 80179f4:	f2c0 816c 	blt.w	8017cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80179f8:	3301      	adds	r3, #1
 80179fa:	f100 8169 	bmi.w	8017cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80179fe:	429a      	cmp	r2, r3
 8017a00:	f2c0 8166 	blt.w	8017cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8017a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017a08:	931a      	str	r3, [sp, #104]	; 0x68
 8017a0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	f340 818c 	ble.w	8017d2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8017a12:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017a14:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8017a18:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017a1c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017a20:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8017a22:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8017a26:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017a28:	141b      	asrs	r3, r3, #16
 8017a2a:	f100 81d0 	bmi.w	8017dce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8017a2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8017a32:	4543      	cmp	r3, r8
 8017a34:	f280 81cb 	bge.w	8017dce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8017a38:	f1bc 0f00 	cmp.w	ip, #0
 8017a3c:	f2c0 81c7 	blt.w	8017dce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8017a40:	f10e 38ff 	add.w	r8, lr, #4294967295
 8017a44:	45c4      	cmp	ip, r8
 8017a46:	f280 81c2 	bge.w	8017dce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8017a4a:	b200      	sxth	r0, r0
 8017a4c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017a4e:	fb0c 3300 	mla	r3, ip, r0, r3
 8017a52:	eb04 0803 	add.w	r8, r4, r3
 8017a56:	5ce3      	ldrb	r3, [r4, r3]
 8017a58:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017a5c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8017a60:	2a00      	cmp	r2, #0
 8017a62:	f000 81a9 	beq.w	8017db8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8017a66:	f898 c001 	ldrb.w	ip, [r8, #1]
 8017a6a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8017a6e:	940e      	str	r4, [sp, #56]	; 0x38
 8017a70:	0e24      	lsrs	r4, r4, #24
 8017a72:	9415      	str	r4, [sp, #84]	; 0x54
 8017a74:	b179      	cbz	r1, 8017a96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017a76:	eb08 0c00 	add.w	ip, r8, r0
 8017a7a:	f818 0000 	ldrb.w	r0, [r8, r0]
 8017a7e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017a82:	900a      	str	r0, [sp, #40]	; 0x28
 8017a84:	0e00      	lsrs	r0, r0, #24
 8017a86:	9013      	str	r0, [sp, #76]	; 0x4c
 8017a88:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8017a8c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017a90:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a92:	0e00      	lsrs	r0, r0, #24
 8017a94:	9016      	str	r0, [sp, #88]	; 0x58
 8017a96:	b292      	uxth	r2, r2
 8017a98:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017a9a:	b289      	uxth	r1, r1
 8017a9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017a9e:	fb02 f901 	mul.w	r9, r2, r1
 8017aa2:	0112      	lsls	r2, r2, #4
 8017aa4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017aa8:	eba2 0809 	sub.w	r8, r2, r9
 8017aac:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017ab0:	b289      	uxth	r1, r1
 8017ab2:	fa1f f888 	uxth.w	r8, r8
 8017ab6:	1a52      	subs	r2, r2, r1
 8017ab8:	fb08 f000 	mul.w	r0, r8, r0
 8017abc:	b292      	uxth	r2, r2
 8017abe:	fb02 000e 	mla	r0, r2, lr, r0
 8017ac2:	fb01 0004 	mla	r0, r1, r4, r0
 8017ac6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017ac8:	fb09 0004 	mla	r0, r9, r4, r0
 8017acc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017ad0:	2800      	cmp	r0, #0
 8017ad2:	f000 80f2 	beq.w	8017cba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017ad6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017ada:	d01b      	beq.n	8017b14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017adc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017ae0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017ae4:	fb0e fa0a 	mul.w	sl, lr, sl
 8017ae8:	fb0e fe03 	mul.w	lr, lr, r3
 8017aec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017af0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017af4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017af8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017afc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017b00:	4453      	add	r3, sl
 8017b02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017b06:	0a1b      	lsrs	r3, r3, #8
 8017b08:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017b0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017b10:	ea43 030c 	orr.w	r3, r3, ip
 8017b14:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017b16:	2cff      	cmp	r4, #255	; 0xff
 8017b18:	d021      	beq.n	8017b5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8017b1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017b1c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017b20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017b22:	fb04 fb0b 	mul.w	fp, r4, fp
 8017b26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017b28:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017b2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017b2e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017b32:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017b36:	fb04 fa0a 	mul.w	sl, r4, sl
 8017b3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017b3e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017b42:	44de      	add	lr, fp
 8017b44:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017b48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017b4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017b50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017b54:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017b58:	ea4e 040a 	orr.w	r4, lr, sl
 8017b5c:	940e      	str	r4, [sp, #56]	; 0x38
 8017b5e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017b60:	2cff      	cmp	r4, #255	; 0xff
 8017b62:	d021      	beq.n	8017ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8017b64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017b66:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017b6a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017b6c:	fb04 fb0b 	mul.w	fp, r4, fp
 8017b70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017b72:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017b76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017b78:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017b7c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017b80:	fb04 fa0a 	mul.w	sl, r4, sl
 8017b84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017b88:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017b8c:	44de      	add	lr, fp
 8017b8e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017b92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017b96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017b9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017b9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017ba2:	ea4e 040a 	orr.w	r4, lr, sl
 8017ba6:	940a      	str	r4, [sp, #40]	; 0x28
 8017ba8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017baa:	2cff      	cmp	r4, #255	; 0xff
 8017bac:	d021      	beq.n	8017bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8017bae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017bb0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017bb4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017bb6:	fb04 fb0b 	mul.w	fp, r4, fp
 8017bba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017bbc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017bc0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017bc2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017bc6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017bca:	fb04 fa0a 	mul.w	sl, r4, sl
 8017bce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017bd2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017bd6:	44de      	add	lr, fp
 8017bd8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017bdc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017be0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017be4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017be8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017bec:	ea4e 040a 	orr.w	r4, lr, sl
 8017bf0:	940f      	str	r4, [sp, #60]	; 0x3c
 8017bf2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017bf4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8017bf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017bfc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017c00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017c02:	fb08 fc0c 	mul.w	ip, r8, ip
 8017c06:	fb02 cc0e 	mla	ip, r2, lr, ip
 8017c0a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017c0e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017c10:	fb01 cc0e 	mla	ip, r1, lr, ip
 8017c14:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017c18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017c1a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8017c1e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017c22:	fb08 f80e 	mul.w	r8, r8, lr
 8017c26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017c2a:	fb02 8303 	mla	r3, r2, r3, r8
 8017c2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017c34:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017c3a:	fb01 330a 	mla	r3, r1, sl, r3
 8017c3e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8017c42:	fb09 3901 	mla	r9, r9, r1, r3
 8017c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017c4a:	4343      	muls	r3, r0
 8017c4c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017c50:	1c58      	adds	r0, r3, #1
 8017c52:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017c56:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017c5a:	ea4c 0c09 	orr.w	ip, ip, r9
 8017c5e:	783b      	ldrb	r3, [r7, #0]
 8017c60:	fa5f f28c 	uxtb.w	r2, ip
 8017c64:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8017c68:	fb12 f201 	smulbb	r2, r2, r1
 8017c6c:	b2c0      	uxtb	r0, r0
 8017c6e:	fb03 2300 	mla	r3, r3, r0, r2
 8017c72:	b29b      	uxth	r3, r3
 8017c74:	1c5a      	adds	r2, r3, #1
 8017c76:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017c7a:	787a      	ldrb	r2, [r7, #1]
 8017c7c:	fb12 f200 	smulbb	r2, r2, r0
 8017c80:	121b      	asrs	r3, r3, #8
 8017c82:	703b      	strb	r3, [r7, #0]
 8017c84:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017c88:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017c8c:	fb03 2301 	mla	r3, r3, r1, r2
 8017c90:	b29b      	uxth	r3, r3
 8017c92:	1c5a      	adds	r2, r3, #1
 8017c94:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017c98:	121b      	asrs	r3, r3, #8
 8017c9a:	707b      	strb	r3, [r7, #1]
 8017c9c:	78bb      	ldrb	r3, [r7, #2]
 8017c9e:	fb13 f000 	smulbb	r0, r3, r0
 8017ca2:	fb0c 0c01 	mla	ip, ip, r1, r0
 8017ca6:	fa1f fc8c 	uxth.w	ip, ip
 8017caa:	f10c 0301 	add.w	r3, ip, #1
 8017cae:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017cb2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017cb6:	f887 c002 	strb.w	ip, [r7, #2]
 8017cba:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017cbc:	3703      	adds	r7, #3
 8017cbe:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8017cc0:	441a      	add	r2, r3
 8017cc2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017cc4:	441d      	add	r5, r3
 8017cc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017cc8:	9231      	str	r2, [sp, #196]	; 0xc4
 8017cca:	3b01      	subs	r3, #1
 8017ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8017cce:	e69c      	b.n	8017a0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8017cd0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017cd2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8017cd4:	441c      	add	r4, r3
 8017cd6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017cd8:	441d      	add	r5, r3
 8017cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cdc:	9431      	str	r4, [sp, #196]	; 0xc4
 8017cde:	3b01      	subs	r3, #1
 8017ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ce4:	3303      	adds	r3, #3
 8017ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8017ce8:	e66f      	b.n	80179ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017cea:	d026      	beq.n	8017d3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8017cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cee:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8017cf0:	3b01      	subs	r3, #1
 8017cf2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8017cf4:	fb00 4003 	mla	r0, r0, r3, r4
 8017cf8:	1400      	asrs	r0, r0, #16
 8017cfa:	f53f ae83 	bmi.w	8017a04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017cfe:	3901      	subs	r1, #1
 8017d00:	4288      	cmp	r0, r1
 8017d02:	f6bf ae7f 	bge.w	8017a04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017d06:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8017d08:	fb01 5303 	mla	r3, r1, r3, r5
 8017d0c:	141b      	asrs	r3, r3, #16
 8017d0e:	f53f ae79 	bmi.w	8017a04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017d12:	3a01      	subs	r2, #1
 8017d14:	4293      	cmp	r3, r2
 8017d16:	f6bf ae75 	bge.w	8017a04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d1c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8017d20:	f103 0e03 	add.w	lr, r3, #3
 8017d24:	f1bb 0f00 	cmp.w	fp, #0
 8017d28:	dc71      	bgt.n	8017e0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8017d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d2c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017d36:	4423      	add	r3, r4
 8017d38:	930c      	str	r3, [sp, #48]	; 0x30
 8017d3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	f340 81b5 	ble.w	80180ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8017d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017d46:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017d48:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017d4c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017d50:	eef0 6a48 	vmov.f32	s13, s16
 8017d54:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017d58:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017d5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017d60:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8017d64:	eef0 6a68 	vmov.f32	s13, s17
 8017d68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017d6c:	ee16 5a90 	vmov	r5, s13
 8017d70:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017d74:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017d78:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017d7c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017d80:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017d84:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017d88:	ee18 2a10 	vmov	r2, s16
 8017d8c:	eeb0 8a47 	vmov.f32	s16, s14
 8017d90:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d94:	ee18 2a90 	vmov	r2, s17
 8017d98:	9333      	str	r3, [sp, #204]	; 0xcc
 8017d9a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017d9c:	eef0 8a67 	vmov.f32	s17, s15
 8017da0:	fb92 f3f3 	sdiv	r3, r2, r3
 8017da4:	9334      	str	r3, [sp, #208]	; 0xd0
 8017da6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017da8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017daa:	3b01      	subs	r3, #1
 8017dac:	9319      	str	r3, [sp, #100]	; 0x64
 8017dae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017db0:	bf08      	it	eq
 8017db2:	4613      	moveq	r3, r2
 8017db4:	9309      	str	r3, [sp, #36]	; 0x24
 8017db6:	e5fa      	b.n	80179ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017db8:	2900      	cmp	r1, #0
 8017dba:	f43f ae6c 	beq.w	8017a96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017dbe:	f818 0000 	ldrb.w	r0, [r8, r0]
 8017dc2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017dc6:	900a      	str	r0, [sp, #40]	; 0x28
 8017dc8:	0e00      	lsrs	r0, r0, #24
 8017dca:	9013      	str	r0, [sp, #76]	; 0x4c
 8017dcc:	e663      	b.n	8017a96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017dce:	f113 0801 	adds.w	r8, r3, #1
 8017dd2:	f53f af72 	bmi.w	8017cba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017dd6:	4540      	cmp	r0, r8
 8017dd8:	f6ff af6f 	blt.w	8017cba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017ddc:	f11c 0801 	adds.w	r8, ip, #1
 8017de0:	f53f af6b 	bmi.w	8017cba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017de4:	45c6      	cmp	lr, r8
 8017de6:	f6ff af68 	blt.w	8017cba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017dea:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017dec:	b200      	sxth	r0, r0
 8017dee:	9302      	str	r3, [sp, #8]
 8017df0:	fa0f f38e 	sxth.w	r3, lr
 8017df4:	9000      	str	r0, [sp, #0]
 8017df6:	9301      	str	r3, [sp, #4]
 8017df8:	4633      	mov	r3, r6
 8017dfa:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017dfc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8017e00:	e9cd c203 	strd	ip, r2, [sp, #12]
 8017e04:	4639      	mov	r1, r7
 8017e06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017e08:	f7ff fc60 	bl	80176cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8017e0c:	e755      	b.n	8017cba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017e0e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017e10:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8017e14:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8017e16:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017e1a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8017e1c:	1427      	asrs	r7, r4, #16
 8017e1e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017e20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017e24:	142b      	asrs	r3, r5, #16
 8017e26:	fb01 7303 	mla	r3, r1, r3, r7
 8017e2a:	18e7      	adds	r7, r4, r3
 8017e2c:	5ce3      	ldrb	r3, [r4, r3]
 8017e2e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017e32:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8017e36:	2a00      	cmp	r2, #0
 8017e38:	f000 812e 	beq.w	8018098 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8017e3c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017e40:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8017e44:	9410      	str	r4, [sp, #64]	; 0x40
 8017e46:	0e24      	lsrs	r4, r4, #24
 8017e48:	9417      	str	r4, [sp, #92]	; 0x5c
 8017e4a:	b170      	cbz	r0, 8017e6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8017e4c:	eb07 0801 	add.w	r8, r7, r1
 8017e50:	5c79      	ldrb	r1, [r7, r1]
 8017e52:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017e56:	910b      	str	r1, [sp, #44]	; 0x2c
 8017e58:	0e09      	lsrs	r1, r1, #24
 8017e5a:	9114      	str	r1, [sp, #80]	; 0x50
 8017e5c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8017e60:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017e64:	9111      	str	r1, [sp, #68]	; 0x44
 8017e66:	0e09      	lsrs	r1, r1, #24
 8017e68:	9118      	str	r1, [sp, #96]	; 0x60
 8017e6a:	b292      	uxth	r2, r2
 8017e6c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8017e6e:	b280      	uxth	r0, r0
 8017e70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017e72:	fb02 f900 	mul.w	r9, r2, r0
 8017e76:	0112      	lsls	r2, r2, #4
 8017e78:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017e7c:	eba2 0809 	sub.w	r8, r2, r9
 8017e80:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017e84:	b280      	uxth	r0, r0
 8017e86:	fa1f f888 	uxth.w	r8, r8
 8017e8a:	1a12      	subs	r2, r2, r0
 8017e8c:	fb08 f101 	mul.w	r1, r8, r1
 8017e90:	b292      	uxth	r2, r2
 8017e92:	fb02 110c 	mla	r1, r2, ip, r1
 8017e96:	fb00 1104 	mla	r1, r0, r4, r1
 8017e9a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017e9c:	fb09 1104 	mla	r1, r9, r4, r1
 8017ea0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017ea4:	2900      	cmp	r1, #0
 8017ea6:	f000 80ec 	beq.w	8018082 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8017eaa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8017eae:	d019      	beq.n	8017ee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8017eb0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017eb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017eb8:	fb0c fa0a 	mul.w	sl, ip, sl
 8017ebc:	fb0c fc03 	mul.w	ip, ip, r3
 8017ec0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017ec4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017ec8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8017ecc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017ed0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8017ed4:	4453      	add	r3, sl
 8017ed6:	0a3f      	lsrs	r7, r7, #8
 8017ed8:	0a1b      	lsrs	r3, r3, #8
 8017eda:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017ede:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017ee2:	433b      	orrs	r3, r7
 8017ee4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017ee6:	2cff      	cmp	r4, #255	; 0xff
 8017ee8:	d020      	beq.n	8017f2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 8017eea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017eec:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017ef0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017ef2:	4367      	muls	r7, r4
 8017ef4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017ef6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017efa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017efe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017f00:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017f04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f08:	fb04 fa0a 	mul.w	sl, r4, sl
 8017f0c:	44bc      	add	ip, r7
 8017f0e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017f12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017f16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017f1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017f22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017f26:	ea4c 040a 	orr.w	r4, ip, sl
 8017f2a:	9410      	str	r4, [sp, #64]	; 0x40
 8017f2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017f2e:	2cff      	cmp	r4, #255	; 0xff
 8017f30:	d020      	beq.n	8017f74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 8017f32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017f34:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017f38:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017f3a:	4367      	muls	r7, r4
 8017f3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017f3e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017f42:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017f46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017f48:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017f4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f50:	fb04 fa0a 	mul.w	sl, r4, sl
 8017f54:	44bc      	add	ip, r7
 8017f56:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017f5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017f5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017f62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017f6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017f6e:	ea4c 040a 	orr.w	r4, ip, sl
 8017f72:	940b      	str	r4, [sp, #44]	; 0x2c
 8017f74:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017f76:	2cff      	cmp	r4, #255	; 0xff
 8017f78:	d020      	beq.n	8017fbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8017f7a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017f7c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017f80:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017f82:	4367      	muls	r7, r4
 8017f84:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017f86:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017f8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017f8e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017f90:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017f94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f98:	fb04 fa0a 	mul.w	sl, r4, sl
 8017f9c:	44bc      	add	ip, r7
 8017f9e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017fa2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017fa6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017faa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017fae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017fb2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017fb6:	ea4c 040a 	orr.w	r4, ip, sl
 8017fba:	9411      	str	r4, [sp, #68]	; 0x44
 8017fbc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017fbe:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8017fc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017fc6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017fca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017fcc:	fb08 f707 	mul.w	r7, r8, r7
 8017fd0:	fb02 770c 	mla	r7, r2, ip, r7
 8017fd4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017fd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017fda:	fb00 770c 	mla	r7, r0, ip, r7
 8017fde:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017fe2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017fe4:	fb09 770c 	mla	r7, r9, ip, r7
 8017fe8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8017fec:	fb08 f80c 	mul.w	r8, r8, ip
 8017ff0:	0a3f      	lsrs	r7, r7, #8
 8017ff2:	fb02 8303 	mla	r3, r2, r3, r8
 8017ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017ff8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017ffc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018000:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018002:	fb00 330a 	mla	r3, r0, sl, r3
 8018006:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801800a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801800c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8018010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018012:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018016:	434b      	muls	r3, r1
 8018018:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801801c:	1c59      	adds	r1, r3, #1
 801801e:	ea47 070c 	orr.w	r7, r7, ip
 8018022:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018026:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801802a:	b2fa      	uxtb	r2, r7
 801802c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8018030:	fb12 f200 	smulbb	r2, r2, r0
 8018034:	b2c9      	uxtb	r1, r1
 8018036:	fb03 2301 	mla	r3, r3, r1, r2
 801803a:	b29b      	uxth	r3, r3
 801803c:	1c5a      	adds	r2, r3, #1
 801803e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018042:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8018046:	fb12 f201 	smulbb	r2, r2, r1
 801804a:	121b      	asrs	r3, r3, #8
 801804c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8018050:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8018054:	0c3f      	lsrs	r7, r7, #16
 8018056:	fb03 2300 	mla	r3, r3, r0, r2
 801805a:	b29b      	uxth	r3, r3
 801805c:	1c5a      	adds	r2, r3, #1
 801805e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018062:	121b      	asrs	r3, r3, #8
 8018064:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018068:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801806c:	fb13 f101 	smulbb	r1, r3, r1
 8018070:	fb07 1700 	mla	r7, r7, r0, r1
 8018074:	b2bf      	uxth	r7, r7
 8018076:	1c7b      	adds	r3, r7, #1
 8018078:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801807c:	123f      	asrs	r7, r7, #8
 801807e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8018082:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018084:	f10e 0e03 	add.w	lr, lr, #3
 8018088:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801808a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801808e:	441a      	add	r2, r3
 8018090:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018092:	9231      	str	r2, [sp, #196]	; 0xc4
 8018094:	441d      	add	r5, r3
 8018096:	e645      	b.n	8017d24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8018098:	2800      	cmp	r0, #0
 801809a:	f43f aee6 	beq.w	8017e6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801809e:	5c79      	ldrb	r1, [r7, r1]
 80180a0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80180a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80180a6:	0e09      	lsrs	r1, r1, #24
 80180a8:	9114      	str	r1, [sp, #80]	; 0x50
 80180aa:	e6de      	b.n	8017e6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80180ac:	b01f      	add	sp, #124	; 0x7c
 80180ae:	ecbd 8b08 	vpop	{d8-d11}
 80180b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080180b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80180b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180bc:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 80180c0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80180c4:	2c00      	cmp	r4, #0
 80180c6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80180ca:	fb04 060c 	mla	r6, r4, ip, r0
 80180ce:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80180d2:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80180d6:	eb02 0e06 	add.w	lr, r2, r6
 80180da:	db3d      	blt.n	8018158 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80180dc:	45a0      	cmp	r8, r4
 80180de:	dd3b      	ble.n	8018158 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80180e0:	2800      	cmp	r0, #0
 80180e2:	db37      	blt.n	8018154 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80180e4:	4584      	cmp	ip, r0
 80180e6:	dd35      	ble.n	8018154 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80180e8:	5d92      	ldrb	r2, [r2, r6]
 80180ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80180ee:	1c46      	adds	r6, r0, #1
 80180f0:	d435      	bmi.n	801815e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80180f2:	45b4      	cmp	ip, r6
 80180f4:	dd33      	ble.n	801815e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80180f6:	b3a5      	cbz	r5, 8018162 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80180f8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80180fc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8018100:	3401      	adds	r4, #1
 8018102:	d432      	bmi.n	801816a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8018104:	45a0      	cmp	r8, r4
 8018106:	dd30      	ble.n	801816a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8018108:	b397      	cbz	r7, 8018170 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 801810a:	2800      	cmp	r0, #0
 801810c:	db2b      	blt.n	8018166 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801810e:	4584      	cmp	ip, r0
 8018110:	dd29      	ble.n	8018166 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8018112:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8018116:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801811a:	3001      	adds	r0, #1
 801811c:	d42b      	bmi.n	8018176 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801811e:	4584      	cmp	ip, r0
 8018120:	dd29      	ble.n	8018176 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8018122:	b355      	cbz	r5, 801817a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8018124:	44f4      	add	ip, lr
 8018126:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801812a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801812e:	2d0f      	cmp	r5, #15
 8018130:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018134:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018138:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801813c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8018140:	d801      	bhi.n	8018146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8018142:	2f0f      	cmp	r7, #15
 8018144:	d91b      	bls.n	801817e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8018146:	4b7f      	ldr	r3, [pc, #508]	; (8018344 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8018148:	f240 1157 	movw	r1, #343	; 0x157
 801814c:	4a7e      	ldr	r2, [pc, #504]	; (8018348 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801814e:	487f      	ldr	r0, [pc, #508]	; (801834c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8018150:	f003 fc38 	bl	801b9c4 <__assert_func>
 8018154:	2200      	movs	r2, #0
 8018156:	e7ca      	b.n	80180ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8018158:	2600      	movs	r6, #0
 801815a:	4632      	mov	r2, r6
 801815c:	e7d0      	b.n	8018100 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801815e:	2600      	movs	r6, #0
 8018160:	e7ce      	b.n	8018100 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8018162:	462e      	mov	r6, r5
 8018164:	e7cc      	b.n	8018100 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8018166:	2400      	movs	r4, #0
 8018168:	e7d7      	b.n	801811a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 801816a:	2300      	movs	r3, #0
 801816c:	461c      	mov	r4, r3
 801816e:	e7de      	b.n	801812e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8018170:	463b      	mov	r3, r7
 8018172:	463c      	mov	r4, r7
 8018174:	e7db      	b.n	801812e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8018176:	2300      	movs	r3, #0
 8018178:	e7d9      	b.n	801812e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801817a:	462b      	mov	r3, r5
 801817c:	e7d7      	b.n	801812e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801817e:	b2a8      	uxth	r0, r5
 8018180:	b2bf      	uxth	r7, r7
 8018182:	fb07 fe00 	mul.w	lr, r7, r0
 8018186:	0100      	lsls	r0, r0, #4
 8018188:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801818c:	eba0 0c0e 	sub.w	ip, r0, lr
 8018190:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8018194:	b2bf      	uxth	r7, r7
 8018196:	fa1f fc8c 	uxth.w	ip, ip
 801819a:	1bc5      	subs	r5, r0, r7
 801819c:	fb0c f00a 	mul.w	r0, ip, sl
 80181a0:	b2ad      	uxth	r5, r5
 80181a2:	fb05 000b 	mla	r0, r5, fp, r0
 80181a6:	fb07 0009 	mla	r0, r7, r9, r0
 80181aa:	fb0e 0008 	mla	r0, lr, r8, r0
 80181ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80181b2:	9001      	str	r0, [sp, #4]
 80181b4:	2800      	cmp	r0, #0
 80181b6:	f000 80c2 	beq.w	801833e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 80181ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80181be:	d018      	beq.n	80181f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 80181c0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80181c4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80181c8:	fb0b f000 	mul.w	r0, fp, r0
 80181cc:	fb0b fb02 	mul.w	fp, fp, r2
 80181d0:	0a02      	lsrs	r2, r0, #8
 80181d2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80181d6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80181da:	4402      	add	r2, r0
 80181dc:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80181e0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80181e4:	0a12      	lsrs	r2, r2, #8
 80181e6:	0a00      	lsrs	r0, r0, #8
 80181e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80181ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80181f0:	4302      	orrs	r2, r0
 80181f2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80181f6:	d01a      	beq.n	801822e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80181f8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80181fc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018200:	fb0a f000 	mul.w	r0, sl, r0
 8018204:	fb0a fa06 	mul.w	sl, sl, r6
 8018208:	0a06      	lsrs	r6, r0, #8
 801820a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801820e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018212:	4406      	add	r6, r0
 8018214:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018218:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801821c:	0a36      	lsrs	r6, r6, #8
 801821e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018222:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018226:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801822a:	ea46 060a 	orr.w	r6, r6, sl
 801822e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018232:	d01b      	beq.n	801826c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8018234:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018238:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801823c:	fb09 fa0a 	mul.w	sl, r9, sl
 8018240:	fb09 f004 	mul.w	r0, r9, r4
 8018244:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018248:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801824c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8018250:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018254:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8018258:	4454      	add	r4, sl
 801825a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801825e:	0a24      	lsrs	r4, r4, #8
 8018260:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018264:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018268:	ea44 0409 	orr.w	r4, r4, r9
 801826c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018270:	d01b      	beq.n	80182aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8018272:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8018276:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801827a:	fb08 f909 	mul.w	r9, r8, r9
 801827e:	fb08 f003 	mul.w	r0, r8, r3
 8018282:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018286:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801828a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801828e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018292:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8018296:	444b      	add	r3, r9
 8018298:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801829c:	0a1b      	lsrs	r3, r3, #8
 801829e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80182a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80182a6:	ea43 0308 	orr.w	r3, r3, r8
 80182aa:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80182ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80182b2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80182b6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80182ba:	fb0c f000 	mul.w	r0, ip, r0
 80182be:	fb0c f606 	mul.w	r6, ip, r6
 80182c2:	fb05 0808 	mla	r8, r5, r8, r0
 80182c6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80182ca:	fb05 6502 	mla	r5, r5, r2, r6
 80182ce:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80182d2:	fb07 8800 	mla	r8, r7, r0, r8
 80182d6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80182da:	fb07 5704 	mla	r7, r7, r4, r5
 80182de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80182e2:	fb0e 8000 	mla	r0, lr, r0, r8
 80182e6:	780a      	ldrb	r2, [r1, #0]
 80182e8:	fb0e 7e03 	mla	lr, lr, r3, r7
 80182ec:	9b01      	ldr	r3, [sp, #4]
 80182ee:	0a00      	lsrs	r0, r0, #8
 80182f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80182f4:	43db      	mvns	r3, r3
 80182f6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80182fa:	b2db      	uxtb	r3, r3
 80182fc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018300:	ea40 0e0e 	orr.w	lr, r0, lr
 8018304:	fb02 f003 	mul.w	r0, r2, r3
 8018308:	1c42      	adds	r2, r0, #1
 801830a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801830e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8018312:	700a      	strb	r2, [r1, #0]
 8018314:	784a      	ldrb	r2, [r1, #1]
 8018316:	435a      	muls	r2, r3
 8018318:	1c50      	adds	r0, r2, #1
 801831a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801831e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8018322:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8018326:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801832a:	704a      	strb	r2, [r1, #1]
 801832c:	788a      	ldrb	r2, [r1, #2]
 801832e:	4353      	muls	r3, r2
 8018330:	1c5a      	adds	r2, r3, #1
 8018332:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018336:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801833a:	f881 e002 	strb.w	lr, [r1, #2]
 801833e:	b003      	add	sp, #12
 8018340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018344:	0801fab5 	.word	0x0801fab5
 8018348:	0802001f 	.word	0x0802001f
 801834c:	0801fb7e 	.word	0x0801fb7e

08018350 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018354:	ed2d 8b0a 	vpush	{d8-d12}
 8018358:	b09b      	sub	sp, #108	; 0x6c
 801835a:	eeb0 aa40 	vmov.f32	s20, s0
 801835e:	eef0 9a60 	vmov.f32	s19, s1
 8018362:	9218      	str	r2, [sp, #96]	; 0x60
 8018364:	eeb0 9a41 	vmov.f32	s18, s2
 8018368:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801836a:	eeb0 8a62 	vmov.f32	s16, s5
 801836e:	9019      	str	r0, [sp, #100]	; 0x64
 8018370:	eef0 8a43 	vmov.f32	s17, s6
 8018374:	6850      	ldr	r0, [r2, #4]
 8018376:	eeb0 ca44 	vmov.f32	s24, s8
 801837a:	9116      	str	r1, [sp, #88]	; 0x58
 801837c:	eef0 ba64 	vmov.f32	s23, s9
 8018380:	9307      	str	r3, [sp, #28]
 8018382:	eeb0 ba45 	vmov.f32	s22, s10
 8018386:	6812      	ldr	r2, [r2, #0]
 8018388:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801838c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801838e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8018392:	fb00 1303 	mla	r3, r0, r3, r1
 8018396:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801839a:	18d3      	adds	r3, r2, r3
 801839c:	930a      	str	r3, [sp, #40]	; 0x28
 801839e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80183a4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80183a6:	685e      	ldr	r6, [r3, #4]
 80183a8:	3604      	adds	r6, #4
 80183aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	dc03      	bgt.n	80183b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80183b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	f340 834f 	ble.w	8018a56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80183b8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80183ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80183be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80183c2:	1e48      	subs	r0, r1, #1
 80183c4:	1e57      	subs	r7, r2, #1
 80183c6:	9b07      	ldr	r3, [sp, #28]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	f340 8178 	ble.w	80186be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80183ce:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80183d0:	142b      	asrs	r3, r5, #16
 80183d2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80183d6:	d406      	bmi.n	80183e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80183d8:	4584      	cmp	ip, r0
 80183da:	da04      	bge.n	80183e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80183dc:	2b00      	cmp	r3, #0
 80183de:	db02      	blt.n	80183e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80183e0:	42bb      	cmp	r3, r7
 80183e2:	f2c0 816d 	blt.w	80186c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80183e6:	f11c 0c01 	adds.w	ip, ip, #1
 80183ea:	f100 815b 	bmi.w	80186a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80183ee:	4561      	cmp	r1, ip
 80183f0:	f2c0 8158 	blt.w	80186a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80183f4:	3301      	adds	r3, #1
 80183f6:	f100 8155 	bmi.w	80186a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80183fa:	429a      	cmp	r2, r3
 80183fc:	f2c0 8152 	blt.w	80186a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018400:	9b07      	ldr	r3, [sp, #28]
 8018402:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018404:	9317      	str	r3, [sp, #92]	; 0x5c
 8018406:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018408:	2b00      	cmp	r3, #0
 801840a:	f340 8178 	ble.w	80186fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801840e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018410:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018414:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018418:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801841c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801841e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8018422:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018424:	141b      	asrs	r3, r3, #16
 8018426:	f100 81ba 	bmi.w	801879e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801842a:	f101 38ff 	add.w	r8, r1, #4294967295
 801842e:	4543      	cmp	r3, r8
 8018430:	f280 81b5 	bge.w	801879e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018434:	f1bc 0f00 	cmp.w	ip, #0
 8018438:	f2c0 81b1 	blt.w	801879e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801843c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018440:	45c4      	cmp	ip, r8
 8018442:	f280 81ac 	bge.w	801879e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018446:	b209      	sxth	r1, r1
 8018448:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801844a:	fb0c 3301 	mla	r3, ip, r1, r3
 801844e:	eb04 0803 	add.w	r8, r4, r3
 8018452:	5ce3      	ldrb	r3, [r4, r3]
 8018454:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018458:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801845c:	2a00      	cmp	r2, #0
 801845e:	f000 8193 	beq.w	8018788 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8018462:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018466:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801846a:	940b      	str	r4, [sp, #44]	; 0x2c
 801846c:	0e24      	lsrs	r4, r4, #24
 801846e:	9412      	str	r4, [sp, #72]	; 0x48
 8018470:	b178      	cbz	r0, 8018492 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018472:	eb08 0c01 	add.w	ip, r8, r1
 8018476:	f818 1001 	ldrb.w	r1, [r8, r1]
 801847a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801847e:	9108      	str	r1, [sp, #32]
 8018480:	0e09      	lsrs	r1, r1, #24
 8018482:	9110      	str	r1, [sp, #64]	; 0x40
 8018484:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018488:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801848c:	910c      	str	r1, [sp, #48]	; 0x30
 801848e:	0e09      	lsrs	r1, r1, #24
 8018490:	9113      	str	r1, [sp, #76]	; 0x4c
 8018492:	b292      	uxth	r2, r2
 8018494:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018496:	b280      	uxth	r0, r0
 8018498:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801849a:	fb02 f900 	mul.w	r9, r2, r0
 801849e:	0112      	lsls	r2, r2, #4
 80184a0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80184a4:	eba2 0809 	sub.w	r8, r2, r9
 80184a8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80184ac:	b280      	uxth	r0, r0
 80184ae:	fa1f f888 	uxth.w	r8, r8
 80184b2:	1a12      	subs	r2, r2, r0
 80184b4:	fb08 f101 	mul.w	r1, r8, r1
 80184b8:	b292      	uxth	r2, r2
 80184ba:	fb02 110e 	mla	r1, r2, lr, r1
 80184be:	fb00 1104 	mla	r1, r0, r4, r1
 80184c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80184c4:	fb09 1104 	mla	r1, r9, r4, r1
 80184c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80184cc:	2900      	cmp	r1, #0
 80184ce:	f000 80de 	beq.w	801868e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80184d2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80184d6:	d01b      	beq.n	8018510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80184d8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80184dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80184e0:	fb0e fa0a 	mul.w	sl, lr, sl
 80184e4:	fb0e fe03 	mul.w	lr, lr, r3
 80184e8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80184ec:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80184f0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80184f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80184f8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80184fc:	4453      	add	r3, sl
 80184fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018502:	0a1b      	lsrs	r3, r3, #8
 8018504:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018508:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801850c:	ea43 030c 	orr.w	r3, r3, ip
 8018510:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018512:	2cff      	cmp	r4, #255	; 0xff
 8018514:	d021      	beq.n	801855a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8018516:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018518:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801851c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801851e:	fb04 fb0b 	mul.w	fp, r4, fp
 8018522:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018524:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018528:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801852a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801852e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018532:	fb04 fa0a 	mul.w	sl, r4, sl
 8018536:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801853a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801853e:	44de      	add	lr, fp
 8018540:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018544:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018548:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801854c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018550:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018554:	ea4e 040a 	orr.w	r4, lr, sl
 8018558:	940b      	str	r4, [sp, #44]	; 0x2c
 801855a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801855c:	2cff      	cmp	r4, #255	; 0xff
 801855e:	d021      	beq.n	80185a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018560:	9c08      	ldr	r4, [sp, #32]
 8018562:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018566:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018568:	fb04 fb0b 	mul.w	fp, r4, fp
 801856c:	9c08      	ldr	r4, [sp, #32]
 801856e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018572:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018574:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018578:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801857c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018580:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018584:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018588:	44de      	add	lr, fp
 801858a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801858e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018592:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018596:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801859a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801859e:	ea4e 040a 	orr.w	r4, lr, sl
 80185a2:	9408      	str	r4, [sp, #32]
 80185a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80185a6:	2cff      	cmp	r4, #255	; 0xff
 80185a8:	d021      	beq.n	80185ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80185aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80185ac:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80185b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80185b2:	fb04 fb0b 	mul.w	fp, r4, fp
 80185b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80185b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80185bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80185be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80185c2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80185c6:	fb04 fa0a 	mul.w	sl, r4, sl
 80185ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80185ce:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80185d2:	44de      	add	lr, fp
 80185d4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80185d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80185dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80185e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80185e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80185e8:	ea4e 040a 	orr.w	r4, lr, sl
 80185ec:	940c      	str	r4, [sp, #48]	; 0x30
 80185ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80185f0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80185f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80185f8:	43c9      	mvns	r1, r1
 80185fa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80185fe:	9c08      	ldr	r4, [sp, #32]
 8018600:	b2c9      	uxtb	r1, r1
 8018602:	fb08 fc0c 	mul.w	ip, r8, ip
 8018606:	fb02 cc0e 	mla	ip, r2, lr, ip
 801860a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801860e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018610:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018614:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018618:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801861a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801861e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018622:	fb08 f80e 	mul.w	r8, r8, lr
 8018626:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801862a:	fb02 8303 	mla	r3, r2, r3, r8
 801862e:	9a08      	ldr	r2, [sp, #32]
 8018630:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018634:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801863a:	fb00 330a 	mla	r3, r0, sl, r3
 801863e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8018642:	fb09 3900 	mla	r9, r9, r0, r3
 8018646:	783b      	ldrb	r3, [r7, #0]
 8018648:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801864c:	fb03 f201 	mul.w	r2, r3, r1
 8018650:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018654:	1c53      	adds	r3, r2, #1
 8018656:	ea4c 0c09 	orr.w	ip, ip, r9
 801865a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801865e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8018662:	703b      	strb	r3, [r7, #0]
 8018664:	787b      	ldrb	r3, [r7, #1]
 8018666:	434b      	muls	r3, r1
 8018668:	1c5a      	adds	r2, r3, #1
 801866a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801866e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8018672:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018676:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801867a:	707b      	strb	r3, [r7, #1]
 801867c:	78bb      	ldrb	r3, [r7, #2]
 801867e:	4359      	muls	r1, r3
 8018680:	1c4b      	adds	r3, r1, #1
 8018682:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8018686:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801868a:	f887 c002 	strb.w	ip, [r7, #2]
 801868e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018690:	3703      	adds	r7, #3
 8018692:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018694:	441a      	add	r2, r3
 8018696:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018698:	441d      	add	r5, r3
 801869a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801869c:	922f      	str	r2, [sp, #188]	; 0xbc
 801869e:	3b01      	subs	r3, #1
 80186a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80186a2:	e6b0      	b.n	8018406 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80186a4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80186a6:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80186a8:	441c      	add	r4, r3
 80186aa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80186ac:	441d      	add	r5, r3
 80186ae:	9b07      	ldr	r3, [sp, #28]
 80186b0:	942f      	str	r4, [sp, #188]	; 0xbc
 80186b2:	3b01      	subs	r3, #1
 80186b4:	9307      	str	r3, [sp, #28]
 80186b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186b8:	3303      	adds	r3, #3
 80186ba:	930a      	str	r3, [sp, #40]	; 0x28
 80186bc:	e683      	b.n	80183c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80186be:	d026      	beq.n	801870e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80186c0:	9b07      	ldr	r3, [sp, #28]
 80186c2:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80186c4:	3b01      	subs	r3, #1
 80186c6:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80186c8:	fb00 4003 	mla	r0, r0, r3, r4
 80186cc:	1400      	asrs	r0, r0, #16
 80186ce:	f53f ae97 	bmi.w	8018400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80186d2:	3901      	subs	r1, #1
 80186d4:	4288      	cmp	r0, r1
 80186d6:	f6bf ae93 	bge.w	8018400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80186da:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80186dc:	fb01 5303 	mla	r3, r1, r3, r5
 80186e0:	141b      	asrs	r3, r3, #16
 80186e2:	f53f ae8d 	bmi.w	8018400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80186e6:	3a01      	subs	r2, #1
 80186e8:	4293      	cmp	r3, r2
 80186ea:	f6bf ae89 	bge.w	8018400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80186ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186f0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80186f4:	f103 0e03 	add.w	lr, r3, #3
 80186f8:	f1bb 0f00 	cmp.w	fp, #0
 80186fc:	dc6d      	bgt.n	80187da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80186fe:	9b07      	ldr	r3, [sp, #28]
 8018700:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018706:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801870a:	4423      	add	r3, r4
 801870c:	930a      	str	r3, [sp, #40]	; 0x28
 801870e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018710:	2b00      	cmp	r3, #0
 8018712:	f340 81a0 	ble.w	8018a56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8018716:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801871a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801871c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8018720:	eef0 6a48 	vmov.f32	s13, s16
 8018724:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8018728:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801872c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018730:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8018734:	eef0 6a68 	vmov.f32	s13, s17
 8018738:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801873c:	ee16 5a90 	vmov	r5, s13
 8018740:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018744:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018748:	ee37 8a48 	vsub.f32	s16, s14, s16
 801874c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018750:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018754:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018758:	ee18 2a10 	vmov	r2, s16
 801875c:	eeb0 8a47 	vmov.f32	s16, s14
 8018760:	fb92 f3f3 	sdiv	r3, r2, r3
 8018764:	ee18 2a90 	vmov	r2, s17
 8018768:	9331      	str	r3, [sp, #196]	; 0xc4
 801876a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801876c:	eef0 8a67 	vmov.f32	s17, s15
 8018770:	fb92 f3f3 	sdiv	r3, r2, r3
 8018774:	9332      	str	r3, [sp, #200]	; 0xc8
 8018776:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018778:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801877a:	3b01      	subs	r3, #1
 801877c:	9316      	str	r3, [sp, #88]	; 0x58
 801877e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018780:	bf08      	it	eq
 8018782:	4613      	moveq	r3, r2
 8018784:	9307      	str	r3, [sp, #28]
 8018786:	e610      	b.n	80183aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018788:	2800      	cmp	r0, #0
 801878a:	f43f ae82 	beq.w	8018492 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801878e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018792:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018796:	9108      	str	r1, [sp, #32]
 8018798:	0e09      	lsrs	r1, r1, #24
 801879a:	9110      	str	r1, [sp, #64]	; 0x40
 801879c:	e679      	b.n	8018492 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801879e:	f113 0801 	adds.w	r8, r3, #1
 80187a2:	f53f af74 	bmi.w	801868e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80187a6:	4541      	cmp	r1, r8
 80187a8:	f6ff af71 	blt.w	801868e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80187ac:	f11c 0801 	adds.w	r8, ip, #1
 80187b0:	f53f af6d 	bmi.w	801868e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80187b4:	45c6      	cmp	lr, r8
 80187b6:	f6ff af6a 	blt.w	801868e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80187ba:	b209      	sxth	r1, r1
 80187bc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80187c0:	fa0f f38e 	sxth.w	r3, lr
 80187c4:	9100      	str	r1, [sp, #0]
 80187c6:	4639      	mov	r1, r7
 80187c8:	9301      	str	r3, [sp, #4]
 80187ca:	4633      	mov	r3, r6
 80187cc:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80187d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80187d2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80187d4:	f7ff fc70 	bl	80180b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80187d8:	e759      	b.n	801868e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80187da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80187dc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80187e0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80187e2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80187e6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80187e8:	1427      	asrs	r7, r4, #16
 80187ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80187ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80187f0:	142b      	asrs	r3, r5, #16
 80187f2:	fb01 7303 	mla	r3, r1, r3, r7
 80187f6:	18e7      	adds	r7, r4, r3
 80187f8:	5ce3      	ldrb	r3, [r4, r3]
 80187fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80187fe:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018802:	2a00      	cmp	r2, #0
 8018804:	f000 811d 	beq.w	8018a42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8018808:	f897 8001 	ldrb.w	r8, [r7, #1]
 801880c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018810:	940d      	str	r4, [sp, #52]	; 0x34
 8018812:	0e24      	lsrs	r4, r4, #24
 8018814:	9414      	str	r4, [sp, #80]	; 0x50
 8018816:	b170      	cbz	r0, 8018836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8018818:	eb07 0801 	add.w	r8, r7, r1
 801881c:	5c79      	ldrb	r1, [r7, r1]
 801881e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018822:	9109      	str	r1, [sp, #36]	; 0x24
 8018824:	0e09      	lsrs	r1, r1, #24
 8018826:	9111      	str	r1, [sp, #68]	; 0x44
 8018828:	f898 1001 	ldrb.w	r1, [r8, #1]
 801882c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018830:	910e      	str	r1, [sp, #56]	; 0x38
 8018832:	0e09      	lsrs	r1, r1, #24
 8018834:	9115      	str	r1, [sp, #84]	; 0x54
 8018836:	b292      	uxth	r2, r2
 8018838:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801883a:	b280      	uxth	r0, r0
 801883c:	fb02 f900 	mul.w	r9, r2, r0
 8018840:	0112      	lsls	r2, r2, #4
 8018842:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018846:	eba2 0809 	sub.w	r8, r2, r9
 801884a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801884e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018850:	b280      	uxth	r0, r0
 8018852:	fa1f f888 	uxth.w	r8, r8
 8018856:	1a09      	subs	r1, r1, r0
 8018858:	fb08 f202 	mul.w	r2, r8, r2
 801885c:	b289      	uxth	r1, r1
 801885e:	fb01 220c 	mla	r2, r1, ip, r2
 8018862:	fb00 2204 	mla	r2, r0, r4, r2
 8018866:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018868:	fb09 2204 	mla	r2, r9, r4, r2
 801886c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018870:	2a00      	cmp	r2, #0
 8018872:	f000 80db 	beq.w	8018a2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8018876:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801887a:	d019      	beq.n	80188b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 801887c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018880:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018884:	fb0c fa0a 	mul.w	sl, ip, sl
 8018888:	fb0c fc03 	mul.w	ip, ip, r3
 801888c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018890:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018894:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8018898:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801889c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80188a0:	4453      	add	r3, sl
 80188a2:	0a3f      	lsrs	r7, r7, #8
 80188a4:	0a1b      	lsrs	r3, r3, #8
 80188a6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80188aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80188ae:	433b      	orrs	r3, r7
 80188b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80188b2:	2cff      	cmp	r4, #255	; 0xff
 80188b4:	d020      	beq.n	80188f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 80188b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80188b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80188bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80188be:	4367      	muls	r7, r4
 80188c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80188c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80188c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80188ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80188cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80188d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80188d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80188d8:	44bc      	add	ip, r7
 80188da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80188de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80188e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80188e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80188ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80188ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80188f2:	ea4c 040a 	orr.w	r4, ip, sl
 80188f6:	940d      	str	r4, [sp, #52]	; 0x34
 80188f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80188fa:	2cff      	cmp	r4, #255	; 0xff
 80188fc:	d020      	beq.n	8018940 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 80188fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018900:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018904:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018906:	4367      	muls	r7, r4
 8018908:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801890a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801890e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018912:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018914:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018918:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801891c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018920:	44bc      	add	ip, r7
 8018922:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018926:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801892a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801892e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018932:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018936:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801893a:	ea4c 040a 	orr.w	r4, ip, sl
 801893e:	9409      	str	r4, [sp, #36]	; 0x24
 8018940:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018942:	2cff      	cmp	r4, #255	; 0xff
 8018944:	d020      	beq.n	8018988 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8018946:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018948:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801894c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801894e:	4367      	muls	r7, r4
 8018950:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018952:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018956:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801895a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801895c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018960:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018964:	fb04 fa0a 	mul.w	sl, r4, sl
 8018968:	44bc      	add	ip, r7
 801896a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801896e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018972:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018976:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801897a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801897e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018982:	ea4c 040a 	orr.w	r4, ip, sl
 8018986:	940e      	str	r4, [sp, #56]	; 0x38
 8018988:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801898a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801898e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018992:	43d2      	mvns	r2, r2
 8018994:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018998:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801899a:	b2d2      	uxtb	r2, r2
 801899c:	fb08 f707 	mul.w	r7, r8, r7
 80189a0:	fb01 770c 	mla	r7, r1, ip, r7
 80189a4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80189a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80189aa:	fb00 770c 	mla	r7, r0, ip, r7
 80189ae:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80189b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80189b4:	fb09 770c 	mla	r7, r9, ip, r7
 80189b8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80189bc:	fb08 f80c 	mul.w	r8, r8, ip
 80189c0:	0a3f      	lsrs	r7, r7, #8
 80189c2:	fb01 8303 	mla	r3, r1, r3, r8
 80189c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80189c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80189cc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80189d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80189d2:	fb00 330a 	mla	r3, r0, sl, r3
 80189d6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80189da:	fb09 3c0c 	mla	ip, r9, ip, r3
 80189de:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80189e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80189e6:	fb03 f102 	mul.w	r1, r3, r2
 80189ea:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80189ee:	1c4b      	adds	r3, r1, #1
 80189f0:	ea47 070c 	orr.w	r7, r7, ip
 80189f4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80189f8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80189fc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8018a00:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8018a04:	4353      	muls	r3, r2
 8018a06:	1c59      	adds	r1, r3, #1
 8018a08:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018a0c:	0a3b      	lsrs	r3, r7, #8
 8018a0e:	0c3f      	lsrs	r7, r7, #16
 8018a10:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018a14:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018a18:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8018a1c:	435a      	muls	r2, r3
 8018a1e:	1c53      	adds	r3, r2, #1
 8018a20:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8018a24:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8018a28:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8018a2c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018a2e:	f10e 0e03 	add.w	lr, lr, #3
 8018a32:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018a34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018a38:	441a      	add	r2, r3
 8018a3a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018a3c:	922f      	str	r2, [sp, #188]	; 0xbc
 8018a3e:	441d      	add	r5, r3
 8018a40:	e65a      	b.n	80186f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8018a42:	2800      	cmp	r0, #0
 8018a44:	f43f aef7 	beq.w	8018836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8018a48:	5c79      	ldrb	r1, [r7, r1]
 8018a4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018a4e:	9109      	str	r1, [sp, #36]	; 0x24
 8018a50:	0e09      	lsrs	r1, r1, #24
 8018a52:	9111      	str	r1, [sp, #68]	; 0x44
 8018a54:	e6ef      	b.n	8018836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8018a56:	b01b      	add	sp, #108	; 0x6c
 8018a58:	ecbd 8b0a 	vpop	{d8-d12}
 8018a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8018a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a64:	b08d      	sub	sp, #52	; 0x34
 8018a66:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8018a6a:	9103      	str	r1, [sp, #12]
 8018a6c:	fb07 5803 	mla	r8, r7, r3, r5
 8018a70:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8018a74:	9803      	ldr	r0, [sp, #12]
 8018a76:	2f00      	cmp	r7, #0
 8018a78:	910b      	str	r1, [sp, #44]	; 0x2c
 8018a7a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018a7e:	9903      	ldr	r1, [sp, #12]
 8018a80:	9c03      	ldr	r4, [sp, #12]
 8018a82:	eb02 0608 	add.w	r6, r2, r8
 8018a86:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8018a8a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8018a8e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8018a92:	7809      	ldrb	r1, [r1, #0]
 8018a94:	7840      	ldrb	r0, [r0, #1]
 8018a96:	78a4      	ldrb	r4, [r4, #2]
 8018a98:	db51      	blt.n	8018b3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8018a9a:	45be      	cmp	lr, r7
 8018a9c:	dd4f      	ble.n	8018b3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8018a9e:	2d00      	cmp	r5, #0
 8018aa0:	db49      	blt.n	8018b36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8018aa2:	42ab      	cmp	r3, r5
 8018aa4:	dd47      	ble.n	8018b36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8018aa6:	f812 2008 	ldrb.w	r2, [r2, r8]
 8018aaa:	9204      	str	r2, [sp, #16]
 8018aac:	7872      	ldrb	r2, [r6, #1]
 8018aae:	9205      	str	r2, [sp, #20]
 8018ab0:	78b2      	ldrb	r2, [r6, #2]
 8018ab2:	9206      	str	r2, [sp, #24]
 8018ab4:	1c6a      	adds	r2, r5, #1
 8018ab6:	d449      	bmi.n	8018b4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8018ab8:	4293      	cmp	r3, r2
 8018aba:	dd47      	ble.n	8018b4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8018abc:	f1bc 0f00 	cmp.w	ip, #0
 8018ac0:	d044      	beq.n	8018b4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8018ac2:	7972      	ldrb	r2, [r6, #5]
 8018ac4:	f896 b003 	ldrb.w	fp, [r6, #3]
 8018ac8:	f896 a004 	ldrb.w	sl, [r6, #4]
 8018acc:	9201      	str	r2, [sp, #4]
 8018ace:	3701      	adds	r7, #1
 8018ad0:	d444      	bmi.n	8018b5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8018ad2:	45be      	cmp	lr, r7
 8018ad4:	dd42      	ble.n	8018b5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8018ad6:	f1b9 0f00 	cmp.w	r9, #0
 8018ada:	f000 80c1 	beq.w	8018c60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8018ade:	2d00      	cmp	r5, #0
 8018ae0:	db38      	blt.n	8018b54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8018ae2:	42ab      	cmp	r3, r5
 8018ae4:	dd36      	ble.n	8018b54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8018ae6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018aea:	f816 8002 	ldrb.w	r8, [r6, r2]
 8018aee:	2203      	movs	r2, #3
 8018af0:	fb03 6702 	mla	r7, r3, r2, r6
 8018af4:	fb03 6202 	mla	r2, r3, r2, r6
 8018af8:	787f      	ldrb	r7, [r7, #1]
 8018afa:	f892 e002 	ldrb.w	lr, [r2, #2]
 8018afe:	9702      	str	r7, [sp, #8]
 8018b00:	3501      	adds	r5, #1
 8018b02:	d432      	bmi.n	8018b6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8018b04:	42ab      	cmp	r3, r5
 8018b06:	dd30      	ble.n	8018b6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8018b08:	f1bc 0f00 	cmp.w	ip, #0
 8018b0c:	d031      	beq.n	8018b72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8018b0e:	2703      	movs	r7, #3
 8018b10:	fb13 7207 	smlabb	r2, r3, r7, r7
 8018b14:	5cb5      	ldrb	r5, [r6, r2]
 8018b16:	fb03 6207 	mla	r2, r3, r7, r6
 8018b1a:	fb03 6307 	mla	r3, r3, r7, r6
 8018b1e:	7912      	ldrb	r2, [r2, #4]
 8018b20:	795e      	ldrb	r6, [r3, #5]
 8018b22:	f1bc 0f0f 	cmp.w	ip, #15
 8018b26:	d927      	bls.n	8018b78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8018b28:	4b53      	ldr	r3, [pc, #332]	; (8018c78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8018b2a:	f240 1157 	movw	r1, #343	; 0x157
 8018b2e:	4a53      	ldr	r2, [pc, #332]	; (8018c7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8018b30:	4853      	ldr	r0, [pc, #332]	; (8018c80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8018b32:	f002 ff47 	bl	801b9c4 <__assert_func>
 8018b36:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8018b3a:	9104      	str	r1, [sp, #16]
 8018b3c:	e7ba      	b.n	8018ab4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8018b3e:	9401      	str	r4, [sp, #4]
 8018b40:	4682      	mov	sl, r0
 8018b42:	468b      	mov	fp, r1
 8018b44:	9104      	str	r1, [sp, #16]
 8018b46:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8018b4a:	e7c0      	b.n	8018ace <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8018b4c:	9401      	str	r4, [sp, #4]
 8018b4e:	4682      	mov	sl, r0
 8018b50:	468b      	mov	fp, r1
 8018b52:	e7bc      	b.n	8018ace <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8018b54:	46a6      	mov	lr, r4
 8018b56:	9002      	str	r0, [sp, #8]
 8018b58:	4688      	mov	r8, r1
 8018b5a:	e7d1      	b.n	8018b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8018b5c:	4626      	mov	r6, r4
 8018b5e:	4602      	mov	r2, r0
 8018b60:	460d      	mov	r5, r1
 8018b62:	46a6      	mov	lr, r4
 8018b64:	9002      	str	r0, [sp, #8]
 8018b66:	4688      	mov	r8, r1
 8018b68:	e7db      	b.n	8018b22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8018b6a:	4626      	mov	r6, r4
 8018b6c:	4602      	mov	r2, r0
 8018b6e:	460d      	mov	r5, r1
 8018b70:	e7d7      	b.n	8018b22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8018b72:	4626      	mov	r6, r4
 8018b74:	4602      	mov	r2, r0
 8018b76:	460d      	mov	r5, r1
 8018b78:	f1b9 0f0f 	cmp.w	r9, #15
 8018b7c:	d8d4      	bhi.n	8018b28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8018b7e:	fa1f f38c 	uxth.w	r3, ip
 8018b82:	fa1f fc89 	uxth.w	ip, r9
 8018b86:	fb03 f70c 	mul.w	r7, r3, ip
 8018b8a:	011b      	lsls	r3, r3, #4
 8018b8c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8018b90:	9707      	str	r7, [sp, #28]
 8018b92:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8018b96:	fa1f fc8c 	uxth.w	ip, ip
 8018b9a:	eba7 070c 	sub.w	r7, r7, ip
 8018b9e:	b2bf      	uxth	r7, r7
 8018ba0:	9709      	str	r7, [sp, #36]	; 0x24
 8018ba2:	9f07      	ldr	r7, [sp, #28]
 8018ba4:	1bdb      	subs	r3, r3, r7
 8018ba6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8018baa:	b29b      	uxth	r3, r3
 8018bac:	9708      	str	r7, [sp, #32]
 8018bae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018bb0:	930a      	str	r3, [sp, #40]	; 0x28
 8018bb2:	ea6f 0907 	mvn.w	r9, r7
 8018bb6:	fb03 fb0b 	mul.w	fp, r3, fp
 8018bba:	9f04      	ldr	r7, [sp, #16]
 8018bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bbe:	fa5f f989 	uxtb.w	r9, r9
 8018bc2:	fb03 bb07 	mla	fp, r3, r7, fp
 8018bc6:	9f07      	ldr	r7, [sp, #28]
 8018bc8:	fb11 f109 	smulbb	r1, r1, r9
 8018bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018bce:	fb0c b808 	mla	r8, ip, r8, fp
 8018bd2:	fb10 f009 	smulbb	r0, r0, r9
 8018bd6:	fb14 f409 	smulbb	r4, r4, r9
 8018bda:	fb07 8805 	mla	r8, r7, r5, r8
 8018bde:	9d08      	ldr	r5, [sp, #32]
 8018be0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018be2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018be6:	fb08 1805 	mla	r8, r8, r5, r1
 8018bea:	9d05      	ldr	r5, [sp, #20]
 8018bec:	fa1f f888 	uxth.w	r8, r8
 8018bf0:	f108 0101 	add.w	r1, r8, #1
 8018bf4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8018bf8:	9903      	ldr	r1, [sp, #12]
 8018bfa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018bfe:	f881 8000 	strb.w	r8, [r1]
 8018c02:	fb03 f10a 	mul.w	r1, r3, sl
 8018c06:	fb07 1105 	mla	r1, r7, r5, r1
 8018c0a:	9d02      	ldr	r5, [sp, #8]
 8018c0c:	fb0c 1105 	mla	r1, ip, r5, r1
 8018c10:	9d07      	ldr	r5, [sp, #28]
 8018c12:	fb05 1102 	mla	r1, r5, r2, r1
 8018c16:	9a08      	ldr	r2, [sp, #32]
 8018c18:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018c1c:	fb01 0102 	mla	r1, r1, r2, r0
 8018c20:	9a03      	ldr	r2, [sp, #12]
 8018c22:	b289      	uxth	r1, r1
 8018c24:	1c48      	adds	r0, r1, #1
 8018c26:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8018c2a:	1209      	asrs	r1, r1, #8
 8018c2c:	7051      	strb	r1, [r2, #1]
 8018c2e:	9a01      	ldr	r2, [sp, #4]
 8018c30:	4353      	muls	r3, r2
 8018c32:	9a06      	ldr	r2, [sp, #24]
 8018c34:	fb07 3702 	mla	r7, r7, r2, r3
 8018c38:	9b08      	ldr	r3, [sp, #32]
 8018c3a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8018c3e:	fb05 c606 	mla	r6, r5, r6, ip
 8018c42:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018c46:	fb06 4603 	mla	r6, r6, r3, r4
 8018c4a:	9b03      	ldr	r3, [sp, #12]
 8018c4c:	b2b6      	uxth	r6, r6
 8018c4e:	f106 0e01 	add.w	lr, r6, #1
 8018c52:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8018c56:	1236      	asrs	r6, r6, #8
 8018c58:	709e      	strb	r6, [r3, #2]
 8018c5a:	b00d      	add	sp, #52	; 0x34
 8018c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c60:	f1bc 0f0f 	cmp.w	ip, #15
 8018c64:	f63f af60 	bhi.w	8018b28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8018c68:	4626      	mov	r6, r4
 8018c6a:	4602      	mov	r2, r0
 8018c6c:	460d      	mov	r5, r1
 8018c6e:	46a6      	mov	lr, r4
 8018c70:	9002      	str	r0, [sp, #8]
 8018c72:	4688      	mov	r8, r1
 8018c74:	e783      	b.n	8018b7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8018c76:	bf00      	nop
 8018c78:	0801fab5 	.word	0x0801fab5
 8018c7c:	0802001f 	.word	0x0802001f
 8018c80:	0801fb7e 	.word	0x0801fb7e

08018c84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c88:	ed2d 8b08 	vpush	{d8-d11}
 8018c8c:	b09f      	sub	sp, #124	; 0x7c
 8018c8e:	eeb0 aa40 	vmov.f32	s20, s0
 8018c92:	eef0 9a60 	vmov.f32	s19, s1
 8018c96:	920e      	str	r2, [sp, #56]	; 0x38
 8018c98:	eeb0 9a41 	vmov.f32	s18, s2
 8018c9c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8018c9e:	eeb0 8a62 	vmov.f32	s16, s5
 8018ca2:	9307      	str	r3, [sp, #28]
 8018ca4:	eef0 8a43 	vmov.f32	s17, s6
 8018ca8:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8018cac:	eef0 ba44 	vmov.f32	s23, s8
 8018cb0:	901d      	str	r0, [sp, #116]	; 0x74
 8018cb2:	eeb0 ba64 	vmov.f32	s22, s9
 8018cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8018cb8:	eef0 aa45 	vmov.f32	s21, s10
 8018cbc:	6850      	ldr	r0, [r2, #4]
 8018cbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8018cc0:	6812      	ldr	r2, [r2, #0]
 8018cc2:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8018cc6:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8018cca:	fb00 1303 	mla	r3, r0, r3, r1
 8018cce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018cd2:	18d3      	adds	r3, r2, r3
 8018cd4:	9308      	str	r3, [sp, #32]
 8018cd6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	930a      	str	r3, [sp, #40]	; 0x28
 8018cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018cde:	43db      	mvns	r3, r3
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	dc03      	bgt.n	8018cf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	f340 81f5 	ble.w	80190dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8018cf2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018cf4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018cf8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018cfc:	1e48      	subs	r0, r1, #1
 8018cfe:	1e54      	subs	r4, r2, #1
 8018d00:	9b07      	ldr	r3, [sp, #28]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	f340 80d5 	ble.w	8018eb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8018d08:	ea5f 452a 	movs.w	r5, sl, asr #16
 8018d0c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8018d10:	d406      	bmi.n	8018d20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018d12:	4285      	cmp	r5, r0
 8018d14:	da04      	bge.n	8018d20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	db02      	blt.n	8018d20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018d1a:	42a3      	cmp	r3, r4
 8018d1c:	f2c0 80ca 	blt.w	8018eb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8018d20:	3501      	adds	r5, #1
 8018d22:	f100 80bb 	bmi.w	8018e9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8018d26:	42a9      	cmp	r1, r5
 8018d28:	f2c0 80b8 	blt.w	8018e9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8018d2c:	3301      	adds	r3, #1
 8018d2e:	f100 80b5 	bmi.w	8018e9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8018d32:	429a      	cmp	r2, r3
 8018d34:	f2c0 80b2 	blt.w	8018e9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8018d38:	9b07      	ldr	r3, [sp, #28]
 8018d3a:	9d08      	ldr	r5, [sp, #32]
 8018d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8018d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	f340 80d6 	ble.w	8018ef2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8018d46:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8018d48:	ea4f 4428 	mov.w	r4, r8, asr #16
 8018d4c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018d4e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8018d52:	68c6      	ldr	r6, [r0, #12]
 8018d54:	ea5f 402a 	movs.w	r0, sl, asr #16
 8018d58:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8018d5c:	689b      	ldr	r3, [r3, #8]
 8018d5e:	f100 810f 	bmi.w	8018f80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8018d62:	1e5f      	subs	r7, r3, #1
 8018d64:	42b8      	cmp	r0, r7
 8018d66:	f280 810b 	bge.w	8018f80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8018d6a:	2c00      	cmp	r4, #0
 8018d6c:	f2c0 8108 	blt.w	8018f80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8018d70:	1e77      	subs	r7, r6, #1
 8018d72:	42bc      	cmp	r4, r7
 8018d74:	f280 8104 	bge.w	8018f80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8018d78:	b21b      	sxth	r3, r3
 8018d7a:	fb04 0003 	mla	r0, r4, r3, r0
 8018d7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018d80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018d84:	1826      	adds	r6, r4, r0
 8018d86:	5c24      	ldrb	r4, [r4, r0]
 8018d88:	78b7      	ldrb	r7, [r6, #2]
 8018d8a:	7870      	ldrb	r0, [r6, #1]
 8018d8c:	970f      	str	r7, [sp, #60]	; 0x3c
 8018d8e:	7977      	ldrb	r7, [r6, #5]
 8018d90:	f896 e003 	ldrb.w	lr, [r6, #3]
 8018d94:	f896 c004 	ldrb.w	ip, [r6, #4]
 8018d98:	9710      	str	r7, [sp, #64]	; 0x40
 8018d9a:	b1c9      	cbz	r1, 8018dd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018d9c:	f04f 0b03 	mov.w	fp, #3
 8018da0:	f06f 0904 	mvn.w	r9, #4
 8018da4:	3605      	adds	r6, #5
 8018da6:	fb13 930b 	smlabb	r3, r3, fp, r9
 8018daa:	eb06 0b03 	add.w	fp, r6, r3
 8018dae:	5cf3      	ldrb	r3, [r6, r3]
 8018db0:	9311      	str	r3, [sp, #68]	; 0x44
 8018db2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8018db6:	9313      	str	r3, [sp, #76]	; 0x4c
 8018db8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8018dbc:	9315      	str	r3, [sp, #84]	; 0x54
 8018dbe:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8018dc2:	9312      	str	r3, [sp, #72]	; 0x48
 8018dc4:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8018dc8:	9314      	str	r3, [sp, #80]	; 0x50
 8018dca:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8018dce:	9316      	str	r3, [sp, #88]	; 0x58
 8018dd0:	b292      	uxth	r2, r2
 8018dd2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8018dd4:	b289      	uxth	r1, r1
 8018dd6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8018dda:	fb02 f601 	mul.w	r6, r2, r1
 8018dde:	0112      	lsls	r2, r2, #4
 8018de0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8018de4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8018de8:	1b92      	subs	r2, r2, r6
 8018dea:	b289      	uxth	r1, r1
 8018dec:	b292      	uxth	r2, r2
 8018dee:	eba9 0901 	sub.w	r9, r9, r1
 8018df2:	fb02 fe0e 	mul.w	lr, r2, lr
 8018df6:	fa1f f989 	uxth.w	r9, r9
 8018dfa:	fb02 fc0c 	mul.w	ip, r2, ip
 8018dfe:	fb09 e404 	mla	r4, r9, r4, lr
 8018e02:	f895 e000 	ldrb.w	lr, [r5]
 8018e06:	fb09 c000 	mla	r0, r9, r0, ip
 8018e0a:	fb01 4407 	mla	r4, r1, r7, r4
 8018e0e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8018e10:	fb06 4407 	mla	r4, r6, r7, r4
 8018e14:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018e16:	fb1e fe07 	smulbb	lr, lr, r7
 8018e1a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018e1e:	fb04 e403 	mla	r4, r4, r3, lr
 8018e22:	b2a4      	uxth	r4, r4
 8018e24:	f104 0e01 	add.w	lr, r4, #1
 8018e28:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8018e2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018e2e:	fb01 0004 	mla	r0, r1, r4, r0
 8018e32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018e34:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018e38:	fb06 0004 	mla	r0, r6, r4, r0
 8018e3c:	786c      	ldrb	r4, [r5, #1]
 8018e3e:	f885 e000 	strb.w	lr, [r5]
 8018e42:	fb14 f407 	smulbb	r4, r4, r7
 8018e46:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018e4a:	fb00 4003 	mla	r0, r0, r3, r4
 8018e4e:	b280      	uxth	r0, r0
 8018e50:	1c44      	adds	r4, r0, #1
 8018e52:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8018e56:	1200      	asrs	r0, r0, #8
 8018e58:	7068      	strb	r0, [r5, #1]
 8018e5a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018e5c:	4342      	muls	r2, r0
 8018e5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018e60:	fb09 2200 	mla	r2, r9, r0, r2
 8018e64:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018e66:	fb01 2100 	mla	r1, r1, r0, r2
 8018e6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018e6c:	fb06 1602 	mla	r6, r6, r2, r1
 8018e70:	78a9      	ldrb	r1, [r5, #2]
 8018e72:	fb11 f107 	smulbb	r1, r1, r7
 8018e76:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018e7a:	fb06 1303 	mla	r3, r6, r3, r1
 8018e7e:	b29b      	uxth	r3, r3
 8018e80:	1c5e      	adds	r6, r3, #1
 8018e82:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8018e86:	121b      	asrs	r3, r3, #8
 8018e88:	70ab      	strb	r3, [r5, #2]
 8018e8a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018e8c:	3503      	adds	r5, #3
 8018e8e:	449a      	add	sl, r3
 8018e90:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018e92:	4498      	add	r8, r3
 8018e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e96:	3b01      	subs	r3, #1
 8018e98:	930d      	str	r3, [sp, #52]	; 0x34
 8018e9a:	e750      	b.n	8018d3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8018e9c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018e9e:	449a      	add	sl, r3
 8018ea0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018ea2:	4498      	add	r8, r3
 8018ea4:	9b07      	ldr	r3, [sp, #28]
 8018ea6:	3b01      	subs	r3, #1
 8018ea8:	9307      	str	r3, [sp, #28]
 8018eaa:	9b08      	ldr	r3, [sp, #32]
 8018eac:	3303      	adds	r3, #3
 8018eae:	9308      	str	r3, [sp, #32]
 8018eb0:	e726      	b.n	8018d00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018eb2:	d026      	beq.n	8018f02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018eb4:	9b07      	ldr	r3, [sp, #28]
 8018eb6:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8018eb8:	3b01      	subs	r3, #1
 8018eba:	fb00 a003 	mla	r0, r0, r3, sl
 8018ebe:	1400      	asrs	r0, r0, #16
 8018ec0:	f53f af3a 	bmi.w	8018d38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018ec4:	3901      	subs	r1, #1
 8018ec6:	4288      	cmp	r0, r1
 8018ec8:	f6bf af36 	bge.w	8018d38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018ecc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8018ece:	fb01 8303 	mla	r3, r1, r3, r8
 8018ed2:	141b      	asrs	r3, r3, #16
 8018ed4:	f53f af30 	bmi.w	8018d38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018ed8:	3a01      	subs	r2, #1
 8018eda:	4293      	cmp	r3, r2
 8018edc:	f6bf af2c 	bge.w	8018d38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018ee0:	9b08      	ldr	r3, [sp, #32]
 8018ee2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018ee6:	1cdd      	adds	r5, r3, #3
 8018ee8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8018eec:	f1bc 0f00 	cmp.w	ip, #0
 8018ef0:	dc5f      	bgt.n	8018fb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8018ef2:	9b07      	ldr	r3, [sp, #28]
 8018ef4:	9a08      	ldr	r2, [sp, #32]
 8018ef6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018efa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018efe:	441a      	add	r2, r3
 8018f00:	9208      	str	r2, [sp, #32]
 8018f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	f340 80e9 	ble.w	80190dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8018f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018f0e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018f10:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018f14:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018f18:	eef0 6a48 	vmov.f32	s13, s16
 8018f1c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018f20:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018f24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018f28:	ee16 aa90 	vmov	sl, s13
 8018f2c:	eef0 6a68 	vmov.f32	s13, s17
 8018f30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018f34:	ee16 8a90 	vmov	r8, s13
 8018f38:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018f3c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018f40:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018f44:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018f48:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018f4c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018f50:	ee18 2a10 	vmov	r2, s16
 8018f54:	eeb0 8a47 	vmov.f32	s16, s14
 8018f58:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f5c:	ee18 2a90 	vmov	r2, s17
 8018f60:	9333      	str	r3, [sp, #204]	; 0xcc
 8018f62:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018f64:	eef0 8a67 	vmov.f32	s17, s15
 8018f68:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f6c:	9334      	str	r3, [sp, #208]	; 0xd0
 8018f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018f72:	3b01      	subs	r3, #1
 8018f74:	930b      	str	r3, [sp, #44]	; 0x2c
 8018f76:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018f78:	bf08      	it	eq
 8018f7a:	4613      	moveq	r3, r2
 8018f7c:	9307      	str	r3, [sp, #28]
 8018f7e:	e6b1      	b.n	8018ce4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018f80:	1c47      	adds	r7, r0, #1
 8018f82:	d482      	bmi.n	8018e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018f84:	42bb      	cmp	r3, r7
 8018f86:	db80      	blt.n	8018e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018f88:	1c67      	adds	r7, r4, #1
 8018f8a:	f53f af7e 	bmi.w	8018e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018f8e:	42be      	cmp	r6, r7
 8018f90:	f6ff af7b 	blt.w	8018e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018f94:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018f96:	b236      	sxth	r6, r6
 8018f98:	9001      	str	r0, [sp, #4]
 8018f9a:	b21b      	sxth	r3, r3
 8018f9c:	9600      	str	r6, [sp, #0]
 8018f9e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018fa0:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8018fa4:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8018fa8:	4629      	mov	r1, r5
 8018faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018fac:	f7ff fd58 	bl	8018a60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8018fb0:	e76b      	b.n	8018e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018fb2:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8018fb4:	ea4f 402a 	mov.w	r0, sl, asr #16
 8018fb8:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8018fbc:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8018fc0:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8018fc4:	ea4f 4128 	mov.w	r1, r8, asr #16
 8018fc8:	fb07 0101 	mla	r1, r7, r1, r0
 8018fcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018fce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018fd2:	1844      	adds	r4, r0, r1
 8018fd4:	5c40      	ldrb	r0, [r0, r1]
 8018fd6:	78a6      	ldrb	r6, [r4, #2]
 8018fd8:	7861      	ldrb	r1, [r4, #1]
 8018fda:	960f      	str	r6, [sp, #60]	; 0x3c
 8018fdc:	78e6      	ldrb	r6, [r4, #3]
 8018fde:	910d      	str	r1, [sp, #52]	; 0x34
 8018fe0:	9610      	str	r6, [sp, #64]	; 0x40
 8018fe2:	f894 9004 	ldrb.w	r9, [r4, #4]
 8018fe6:	f894 b005 	ldrb.w	fp, [r4, #5]
 8018fea:	b192      	cbz	r2, 8019012 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8018fec:	f06f 0604 	mvn.w	r6, #4
 8018ff0:	2103      	movs	r1, #3
 8018ff2:	3405      	adds	r4, #5
 8018ff4:	fb17 6701 	smlabb	r7, r7, r1, r6
 8018ff8:	19e6      	adds	r6, r4, r7
 8018ffa:	5de4      	ldrb	r4, [r4, r7]
 8018ffc:	9417      	str	r4, [sp, #92]	; 0x5c
 8018ffe:	7874      	ldrb	r4, [r6, #1]
 8019000:	9419      	str	r4, [sp, #100]	; 0x64
 8019002:	78b4      	ldrb	r4, [r6, #2]
 8019004:	941b      	str	r4, [sp, #108]	; 0x6c
 8019006:	78f4      	ldrb	r4, [r6, #3]
 8019008:	9418      	str	r4, [sp, #96]	; 0x60
 801900a:	7934      	ldrb	r4, [r6, #4]
 801900c:	941a      	str	r4, [sp, #104]	; 0x68
 801900e:	7974      	ldrb	r4, [r6, #5]
 8019010:	941c      	str	r4, [sp, #112]	; 0x70
 8019012:	b29b      	uxth	r3, r3
 8019014:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019016:	b292      	uxth	r2, r2
 8019018:	9909      	ldr	r1, [sp, #36]	; 0x24
 801901a:	3503      	adds	r5, #3
 801901c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019020:	fb03 f402 	mul.w	r4, r3, r2
 8019024:	011b      	lsls	r3, r3, #4
 8019026:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801902a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801902e:	1b1b      	subs	r3, r3, r4
 8019030:	b292      	uxth	r2, r2
 8019032:	b29b      	uxth	r3, r3
 8019034:	1ab6      	subs	r6, r6, r2
 8019036:	435f      	muls	r7, r3
 8019038:	b2b6      	uxth	r6, r6
 801903a:	fb03 f909 	mul.w	r9, r3, r9
 801903e:	fb03 fb0b 	mul.w	fp, r3, fp
 8019042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019044:	fb06 7000 	mla	r0, r6, r0, r7
 8019048:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801904a:	fb06 bb03 	mla	fp, r6, r3, fp
 801904e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019050:	fb02 0007 	mla	r0, r2, r7, r0
 8019054:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8019056:	fb02 bb03 	mla	fp, r2, r3, fp
 801905a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801905c:	fb04 0007 	mla	r0, r4, r7, r0
 8019060:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8019064:	fb17 f701 	smulbb	r7, r7, r1
 8019068:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801906c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801906e:	fb00 700e 	mla	r0, r0, lr, r7
 8019072:	fb06 9101 	mla	r1, r6, r1, r9
 8019076:	b280      	uxth	r0, r0
 8019078:	1c47      	adds	r7, r0, #1
 801907a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801907e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019080:	1200      	asrs	r0, r0, #8
 8019082:	f805 0c06 	strb.w	r0, [r5, #-6]
 8019086:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019088:	fb02 1100 	mla	r1, r2, r0, r1
 801908c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801908e:	fb04 1100 	mla	r1, r4, r0, r1
 8019092:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8019096:	fb04 b403 	mla	r4, r4, r3, fp
 801909a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801909e:	fb10 f007 	smulbb	r0, r0, r7
 80190a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80190a6:	fb13 f307 	smulbb	r3, r3, r7
 80190aa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80190ae:	fb01 010e 	mla	r1, r1, lr, r0
 80190b2:	fb04 340e 	mla	r4, r4, lr, r3
 80190b6:	b289      	uxth	r1, r1
 80190b8:	b2a4      	uxth	r4, r4
 80190ba:	1c48      	adds	r0, r1, #1
 80190bc:	1c63      	adds	r3, r4, #1
 80190be:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80190c2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80190c6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80190c8:	1209      	asrs	r1, r1, #8
 80190ca:	1224      	asrs	r4, r4, #8
 80190cc:	449a      	add	sl, r3
 80190ce:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80190d0:	f805 1c05 	strb.w	r1, [r5, #-5]
 80190d4:	f805 4c04 	strb.w	r4, [r5, #-4]
 80190d8:	4498      	add	r8, r3
 80190da:	e707      	b.n	8018eec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80190dc:	b01f      	add	sp, #124	; 0x7c
 80190de:	ecbd 8b08 	vpop	{d8-d11}
 80190e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080190e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80190e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190ec:	b085      	sub	sp, #20
 80190ee:	784d      	ldrb	r5, [r1, #1]
 80190f0:	788e      	ldrb	r6, [r1, #2]
 80190f2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80190f6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80190fa:	9403      	str	r4, [sp, #12]
 80190fc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8019100:	780c      	ldrb	r4, [r1, #0]
 8019102:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8019106:	fb07 ce03 	mla	lr, r7, r3, ip
 801910a:	2f00      	cmp	r7, #0
 801910c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019110:	eb02 0b0e 	add.w	fp, r2, lr
 8019114:	db56      	blt.n	80191c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8019116:	45b9      	cmp	r9, r7
 8019118:	dd54      	ble.n	80191c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801911a:	f1bc 0f00 	cmp.w	ip, #0
 801911e:	db4d      	blt.n	80191bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8019120:	4563      	cmp	r3, ip
 8019122:	dd4b      	ble.n	80191bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8019124:	f812 200e 	ldrb.w	r2, [r2, lr]
 8019128:	9200      	str	r2, [sp, #0]
 801912a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801912e:	9201      	str	r2, [sp, #4]
 8019130:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8019134:	9202      	str	r2, [sp, #8]
 8019136:	f11c 0201 	adds.w	r2, ip, #1
 801913a:	d44a      	bmi.n	80191d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801913c:	4293      	cmp	r3, r2
 801913e:	dd48      	ble.n	80191d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8019140:	2800      	cmp	r0, #0
 8019142:	d046      	beq.n	80191d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8019144:	f89b e003 	ldrb.w	lr, [fp, #3]
 8019148:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801914c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8019150:	3701      	adds	r7, #1
 8019152:	d446      	bmi.n	80191e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8019154:	45b9      	cmp	r9, r7
 8019156:	dd44      	ble.n	80191e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8019158:	9a03      	ldr	r2, [sp, #12]
 801915a:	2a00      	cmp	r2, #0
 801915c:	d045      	beq.n	80191ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801915e:	f1bc 0f00 	cmp.w	ip, #0
 8019162:	db3a      	blt.n	80191da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8019164:	4563      	cmp	r3, ip
 8019166:	dd38      	ble.n	80191da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8019168:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801916c:	f04f 0903 	mov.w	r9, #3
 8019170:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8019174:	fb03 b209 	mla	r2, r3, r9, fp
 8019178:	fb03 b909 	mla	r9, r3, r9, fp
 801917c:	7852      	ldrb	r2, [r2, #1]
 801917e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8019182:	f11c 0c01 	adds.w	ip, ip, #1
 8019186:	d40d      	bmi.n	80191a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8019188:	4563      	cmp	r3, ip
 801918a:	dd0b      	ble.n	80191a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801918c:	b160      	cbz	r0, 80191a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801918e:	2603      	movs	r6, #3
 8019190:	fb13 6406 	smlabb	r4, r3, r6, r6
 8019194:	fb03 b506 	mla	r5, r3, r6, fp
 8019198:	fb03 b306 	mla	r3, r3, r6, fp
 801919c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80191a0:	792d      	ldrb	r5, [r5, #4]
 80191a2:	795e      	ldrb	r6, [r3, #5]
 80191a4:	280f      	cmp	r0, #15
 80191a6:	d802      	bhi.n	80191ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80191a8:	9b03      	ldr	r3, [sp, #12]
 80191aa:	2b0f      	cmp	r3, #15
 80191ac:	d922      	bls.n	80191f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80191ae:	4b2f      	ldr	r3, [pc, #188]	; (801926c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80191b0:	f240 1157 	movw	r1, #343	; 0x157
 80191b4:	4a2e      	ldr	r2, [pc, #184]	; (8019270 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80191b6:	482f      	ldr	r0, [pc, #188]	; (8019274 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80191b8:	f002 fc04 	bl	801b9c4 <__assert_func>
 80191bc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80191c0:	9400      	str	r4, [sp, #0]
 80191c2:	e7b8      	b.n	8019136 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80191c4:	46b2      	mov	sl, r6
 80191c6:	46a8      	mov	r8, r5
 80191c8:	46a6      	mov	lr, r4
 80191ca:	9400      	str	r4, [sp, #0]
 80191cc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80191d0:	e7be      	b.n	8019150 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80191d2:	46b2      	mov	sl, r6
 80191d4:	46a8      	mov	r8, r5
 80191d6:	46a6      	mov	lr, r4
 80191d8:	e7ba      	b.n	8019150 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80191da:	46b1      	mov	r9, r6
 80191dc:	462a      	mov	r2, r5
 80191de:	4627      	mov	r7, r4
 80191e0:	e7cf      	b.n	8019182 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80191e2:	46b1      	mov	r9, r6
 80191e4:	462a      	mov	r2, r5
 80191e6:	4627      	mov	r7, r4
 80191e8:	e7dc      	b.n	80191a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80191ea:	280f      	cmp	r0, #15
 80191ec:	d8df      	bhi.n	80191ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80191ee:	46b1      	mov	r9, r6
 80191f0:	462a      	mov	r2, r5
 80191f2:	4627      	mov	r7, r4
 80191f4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80191f8:	b280      	uxth	r0, r0
 80191fa:	fb00 f30b 	mul.w	r3, r0, fp
 80191fe:	0100      	lsls	r0, r0, #4
 8019200:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8019204:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8019208:	1ac0      	subs	r0, r0, r3
 801920a:	fa1f fb8b 	uxth.w	fp, fp
 801920e:	b280      	uxth	r0, r0
 8019210:	ebac 0c0b 	sub.w	ip, ip, fp
 8019214:	9003      	str	r0, [sp, #12]
 8019216:	fa1f fc8c 	uxth.w	ip, ip
 801921a:	fb00 fe0e 	mul.w	lr, r0, lr
 801921e:	9800      	ldr	r0, [sp, #0]
 8019220:	fb0c ee00 	mla	lr, ip, r0, lr
 8019224:	9803      	ldr	r0, [sp, #12]
 8019226:	fb00 f808 	mul.w	r8, r0, r8
 801922a:	9801      	ldr	r0, [sp, #4]
 801922c:	fb0b ee07 	mla	lr, fp, r7, lr
 8019230:	fb0c 8800 	mla	r8, ip, r0, r8
 8019234:	fb03 ee04 	mla	lr, r3, r4, lr
 8019238:	fb0b 8202 	mla	r2, fp, r2, r8
 801923c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019240:	fb03 2505 	mla	r5, r3, r5, r2
 8019244:	9a03      	ldr	r2, [sp, #12]
 8019246:	f881 e000 	strb.w	lr, [r1]
 801924a:	fb02 f00a 	mul.w	r0, r2, sl
 801924e:	9a02      	ldr	r2, [sp, #8]
 8019250:	122d      	asrs	r5, r5, #8
 8019252:	fb0c 0c02 	mla	ip, ip, r2, r0
 8019256:	704d      	strb	r5, [r1, #1]
 8019258:	fb0b c909 	mla	r9, fp, r9, ip
 801925c:	fb03 9606 	mla	r6, r3, r6, r9
 8019260:	1236      	asrs	r6, r6, #8
 8019262:	708e      	strb	r6, [r1, #2]
 8019264:	b005      	add	sp, #20
 8019266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801926a:	bf00      	nop
 801926c:	0801fab5 	.word	0x0801fab5
 8019270:	0802001f 	.word	0x0802001f
 8019274:	0801fb7e 	.word	0x0801fb7e

08019278 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801927c:	ed2d 8b08 	vpush	{d8-d11}
 8019280:	b09b      	sub	sp, #108	; 0x6c
 8019282:	eeb0 aa40 	vmov.f32	s20, s0
 8019286:	eef0 9a60 	vmov.f32	s19, s1
 801928a:	920b      	str	r2, [sp, #44]	; 0x2c
 801928c:	eeb0 9a41 	vmov.f32	s18, s2
 8019290:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8019292:	eeb0 8a62 	vmov.f32	s16, s5
 8019296:	9019      	str	r0, [sp, #100]	; 0x64
 8019298:	eef0 8a43 	vmov.f32	s17, s6
 801929c:	6850      	ldr	r0, [r2, #4]
 801929e:	eef0 ba44 	vmov.f32	s23, s8
 80192a2:	9109      	str	r1, [sp, #36]	; 0x24
 80192a4:	eeb0 ba64 	vmov.f32	s22, s9
 80192a8:	9306      	str	r3, [sp, #24]
 80192aa:	eef0 aa45 	vmov.f32	s21, s10
 80192ae:	6812      	ldr	r2, [r2, #0]
 80192b0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80192b4:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 80192b8:	fb00 1303 	mla	r3, r0, r3, r1
 80192bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192c0:	18d3      	adds	r3, r2, r3
 80192c2:	9307      	str	r3, [sp, #28]
 80192c4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	9308      	str	r3, [sp, #32]
 80192ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	dc03      	bgt.n	80192d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80192d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	f340 81ab 	ble.w	801962e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 80192d8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80192da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80192de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80192e2:	1e48      	subs	r0, r1, #1
 80192e4:	1e55      	subs	r5, r2, #1
 80192e6:	9b06      	ldr	r3, [sp, #24]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	f340 80b1 	ble.w	8019450 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80192ee:	ea5f 462b 	movs.w	r6, fp, asr #16
 80192f2:	ea4f 4324 	mov.w	r3, r4, asr #16
 80192f6:	d406      	bmi.n	8019306 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80192f8:	4286      	cmp	r6, r0
 80192fa:	da04      	bge.n	8019306 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	db02      	blt.n	8019306 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019300:	42ab      	cmp	r3, r5
 8019302:	f2c0 80a6 	blt.w	8019452 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8019306:	3601      	adds	r6, #1
 8019308:	f100 8097 	bmi.w	801943a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801930c:	42b1      	cmp	r1, r6
 801930e:	f2c0 8094 	blt.w	801943a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019312:	3301      	adds	r3, #1
 8019314:	f100 8091 	bmi.w	801943a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019318:	429a      	cmp	r2, r3
 801931a:	f2c0 808e 	blt.w	801943a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801931e:	9b06      	ldr	r3, [sp, #24]
 8019320:	9e07      	ldr	r6, [sp, #28]
 8019322:	930a      	str	r3, [sp, #40]	; 0x28
 8019324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019326:	2b00      	cmp	r3, #0
 8019328:	f340 80b0 	ble.w	801948c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801932c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801932e:	1425      	asrs	r5, r4, #16
 8019330:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019332:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8019336:	68c7      	ldr	r7, [r0, #12]
 8019338:	ea5f 402b 	movs.w	r0, fp, asr #16
 801933c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8019340:	689b      	ldr	r3, [r3, #8]
 8019342:	f100 80ea 	bmi.w	801951a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019346:	f103 3cff 	add.w	ip, r3, #4294967295
 801934a:	4560      	cmp	r0, ip
 801934c:	f280 80e5 	bge.w	801951a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019350:	2d00      	cmp	r5, #0
 8019352:	f2c0 80e2 	blt.w	801951a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019356:	f107 3cff 	add.w	ip, r7, #4294967295
 801935a:	4565      	cmp	r5, ip
 801935c:	f280 80dd 	bge.w	801951a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019360:	b21b      	sxth	r3, r3
 8019362:	fb05 0003 	mla	r0, r5, r3, r0
 8019366:	9d08      	ldr	r5, [sp, #32]
 8019368:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801936c:	182f      	adds	r7, r5, r0
 801936e:	5c2d      	ldrb	r5, [r5, r0]
 8019370:	7878      	ldrb	r0, [r7, #1]
 8019372:	f897 e002 	ldrb.w	lr, [r7, #2]
 8019376:	900c      	str	r0, [sp, #48]	; 0x30
 8019378:	f897 9003 	ldrb.w	r9, [r7, #3]
 801937c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8019380:	f897 a005 	ldrb.w	sl, [r7, #5]
 8019384:	b1c9      	cbz	r1, 80193ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019386:	f04f 0c03 	mov.w	ip, #3
 801938a:	f06f 0004 	mvn.w	r0, #4
 801938e:	3705      	adds	r7, #5
 8019390:	fb13 030c 	smlabb	r3, r3, ip, r0
 8019394:	eb07 0c03 	add.w	ip, r7, r3
 8019398:	5cfb      	ldrb	r3, [r7, r3]
 801939a:	930d      	str	r3, [sp, #52]	; 0x34
 801939c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80193a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80193a2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80193a6:	9311      	str	r3, [sp, #68]	; 0x44
 80193a8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80193ac:	930e      	str	r3, [sp, #56]	; 0x38
 80193ae:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80193b2:	9310      	str	r3, [sp, #64]	; 0x40
 80193b4:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80193b8:	9312      	str	r3, [sp, #72]	; 0x48
 80193ba:	b292      	uxth	r2, r2
 80193bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80193be:	b289      	uxth	r1, r1
 80193c0:	fb02 f301 	mul.w	r3, r2, r1
 80193c4:	0112      	lsls	r2, r2, #4
 80193c6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80193ca:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80193ce:	1ad2      	subs	r2, r2, r3
 80193d0:	b289      	uxth	r1, r1
 80193d2:	b292      	uxth	r2, r2
 80193d4:	1a7f      	subs	r7, r7, r1
 80193d6:	fb02 f909 	mul.w	r9, r2, r9
 80193da:	b2bf      	uxth	r7, r7
 80193dc:	fb02 f808 	mul.w	r8, r2, r8
 80193e0:	fb02 fa0a 	mul.w	sl, r2, sl
 80193e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80193e6:	fb07 9905 	mla	r9, r7, r5, r9
 80193ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80193ec:	fb07 8800 	mla	r8, r7, r0, r8
 80193f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80193f2:	fb07 aa0e 	mla	sl, r7, lr, sl
 80193f6:	fb01 9905 	mla	r9, r1, r5, r9
 80193fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80193fc:	fb01 8800 	mla	r8, r1, r0, r8
 8019400:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019402:	fb01 a102 	mla	r1, r1, r2, sl
 8019406:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019408:	fb03 9905 	mla	r9, r3, r5, r9
 801940c:	fb03 8800 	mla	r8, r3, r0, r8
 8019410:	fb03 1302 	mla	r3, r3, r2, r1
 8019414:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019418:	ea4f 2828 	mov.w	r8, r8, asr #8
 801941c:	121b      	asrs	r3, r3, #8
 801941e:	f886 9000 	strb.w	r9, [r6]
 8019422:	f886 8001 	strb.w	r8, [r6, #1]
 8019426:	70b3      	strb	r3, [r6, #2]
 8019428:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801942a:	3603      	adds	r6, #3
 801942c:	449b      	add	fp, r3
 801942e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019430:	441c      	add	r4, r3
 8019432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019434:	3b01      	subs	r3, #1
 8019436:	930a      	str	r3, [sp, #40]	; 0x28
 8019438:	e774      	b.n	8019324 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801943a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801943c:	449b      	add	fp, r3
 801943e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019440:	441c      	add	r4, r3
 8019442:	9b06      	ldr	r3, [sp, #24]
 8019444:	3b01      	subs	r3, #1
 8019446:	9306      	str	r3, [sp, #24]
 8019448:	9b07      	ldr	r3, [sp, #28]
 801944a:	3303      	adds	r3, #3
 801944c:	9307      	str	r3, [sp, #28]
 801944e:	e74a      	b.n	80192e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019450:	d024      	beq.n	801949c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8019452:	9b06      	ldr	r3, [sp, #24]
 8019454:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8019456:	3b01      	subs	r3, #1
 8019458:	fb00 b003 	mla	r0, r0, r3, fp
 801945c:	1400      	asrs	r0, r0, #16
 801945e:	f53f af5e 	bmi.w	801931e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019462:	3901      	subs	r1, #1
 8019464:	4288      	cmp	r0, r1
 8019466:	f6bf af5a 	bge.w	801931e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801946a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801946c:	fb01 4303 	mla	r3, r1, r3, r4
 8019470:	141b      	asrs	r3, r3, #16
 8019472:	f53f af54 	bmi.w	801931e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019476:	3a01      	subs	r2, #1
 8019478:	4293      	cmp	r3, r2
 801947a:	f6bf af50 	bge.w	801931e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801947e:	9b07      	ldr	r3, [sp, #28]
 8019480:	f8dd e018 	ldr.w	lr, [sp, #24]
 8019484:	1cde      	adds	r6, r3, #3
 8019486:	f1be 0f00 	cmp.w	lr, #0
 801948a:	dc5f      	bgt.n	801954c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801948c:	9b06      	ldr	r3, [sp, #24]
 801948e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019492:	9b07      	ldr	r3, [sp, #28]
 8019494:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019498:	4423      	add	r3, r4
 801949a:	9307      	str	r3, [sp, #28]
 801949c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801949e:	2b00      	cmp	r3, #0
 80194a0:	f340 80c5 	ble.w	801962e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 80194a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80194a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80194aa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80194ae:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80194b2:	eef0 6a48 	vmov.f32	s13, s16
 80194b6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80194ba:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80194be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80194c2:	ee16 ba90 	vmov	fp, s13
 80194c6:	eef0 6a68 	vmov.f32	s13, s17
 80194ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80194ce:	ee16 4a90 	vmov	r4, s13
 80194d2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80194d6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80194da:	ee37 8a48 	vsub.f32	s16, s14, s16
 80194de:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80194e2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80194e6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80194ea:	ee18 2a10 	vmov	r2, s16
 80194ee:	eeb0 8a47 	vmov.f32	s16, s14
 80194f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80194f6:	ee18 2a90 	vmov	r2, s17
 80194fa:	932f      	str	r3, [sp, #188]	; 0xbc
 80194fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80194fe:	eef0 8a67 	vmov.f32	s17, s15
 8019502:	fb92 f3f3 	sdiv	r3, r2, r3
 8019506:	9330      	str	r3, [sp, #192]	; 0xc0
 8019508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801950a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801950c:	3b01      	subs	r3, #1
 801950e:	9309      	str	r3, [sp, #36]	; 0x24
 8019510:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019512:	bf08      	it	eq
 8019514:	4613      	moveq	r3, r2
 8019516:	9306      	str	r3, [sp, #24]
 8019518:	e6d7      	b.n	80192ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801951a:	f110 0c01 	adds.w	ip, r0, #1
 801951e:	d483      	bmi.n	8019428 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019520:	4563      	cmp	r3, ip
 8019522:	db81      	blt.n	8019428 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019524:	f115 0c01 	adds.w	ip, r5, #1
 8019528:	f53f af7e 	bmi.w	8019428 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801952c:	4567      	cmp	r7, ip
 801952e:	f6ff af7b 	blt.w	8019428 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019532:	b23f      	sxth	r7, r7
 8019534:	b21b      	sxth	r3, r3
 8019536:	9700      	str	r7, [sp, #0]
 8019538:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801953c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8019540:	9a08      	ldr	r2, [sp, #32]
 8019542:	4631      	mov	r1, r6
 8019544:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019546:	f7ff fdcf 	bl	80190e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801954a:	e76d      	b.n	8019428 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801954c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801954e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8019552:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8019556:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801955a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801955e:	1421      	asrs	r1, r4, #16
 8019560:	930a      	str	r3, [sp, #40]	; 0x28
 8019562:	fb0c 0101 	mla	r1, ip, r1, r0
 8019566:	9808      	ldr	r0, [sp, #32]
 8019568:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801956c:	1845      	adds	r5, r0, r1
 801956e:	5c40      	ldrb	r0, [r0, r1]
 8019570:	796f      	ldrb	r7, [r5, #5]
 8019572:	7869      	ldrb	r1, [r5, #1]
 8019574:	f895 8002 	ldrb.w	r8, [r5, #2]
 8019578:	f895 a003 	ldrb.w	sl, [r5, #3]
 801957c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8019580:	970c      	str	r7, [sp, #48]	; 0x30
 8019582:	b1a2      	cbz	r2, 80195ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8019584:	2703      	movs	r7, #3
 8019586:	f06f 0304 	mvn.w	r3, #4
 801958a:	3505      	adds	r5, #5
 801958c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8019590:	eb05 070c 	add.w	r7, r5, ip
 8019594:	f815 500c 	ldrb.w	r5, [r5, ip]
 8019598:	9513      	str	r5, [sp, #76]	; 0x4c
 801959a:	787d      	ldrb	r5, [r7, #1]
 801959c:	9515      	str	r5, [sp, #84]	; 0x54
 801959e:	78bd      	ldrb	r5, [r7, #2]
 80195a0:	9517      	str	r5, [sp, #92]	; 0x5c
 80195a2:	78fd      	ldrb	r5, [r7, #3]
 80195a4:	9514      	str	r5, [sp, #80]	; 0x50
 80195a6:	793d      	ldrb	r5, [r7, #4]
 80195a8:	9516      	str	r5, [sp, #88]	; 0x58
 80195aa:	797d      	ldrb	r5, [r7, #5]
 80195ac:	9518      	str	r5, [sp, #96]	; 0x60
 80195ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80195b2:	b292      	uxth	r2, r2
 80195b4:	3603      	adds	r6, #3
 80195b6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80195ba:	fb03 f502 	mul.w	r5, r3, r2
 80195be:	011b      	lsls	r3, r3, #4
 80195c0:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80195c4:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80195c8:	1b5b      	subs	r3, r3, r5
 80195ca:	b292      	uxth	r2, r2
 80195cc:	b29b      	uxth	r3, r3
 80195ce:	1abf      	subs	r7, r7, r2
 80195d0:	fb03 f909 	mul.w	r9, r3, r9
 80195d4:	b2bf      	uxth	r7, r7
 80195d6:	fb03 fa0a 	mul.w	sl, r3, sl
 80195da:	fb07 9901 	mla	r9, r7, r1, r9
 80195de:	9915      	ldr	r1, [sp, #84]	; 0x54
 80195e0:	fb07 aa00 	mla	sl, r7, r0, sl
 80195e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80195e6:	fb02 9901 	mla	r9, r2, r1, r9
 80195ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 80195ec:	fb02 aa00 	mla	sl, r2, r0, sl
 80195f0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80195f2:	fb05 9901 	mla	r9, r5, r1, r9
 80195f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80195f8:	fb05 aa00 	mla	sl, r5, r0, sl
 80195fc:	434b      	muls	r3, r1
 80195fe:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019600:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019604:	fb07 3308 	mla	r3, r7, r8, r3
 8019608:	ea4f 2929 	mov.w	r9, r9, asr #8
 801960c:	f806 ac06 	strb.w	sl, [r6, #-6]
 8019610:	fb02 3201 	mla	r2, r2, r1, r3
 8019614:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019616:	f806 9c05 	strb.w	r9, [r6, #-5]
 801961a:	fb05 2503 	mla	r5, r5, r3, r2
 801961e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019620:	122d      	asrs	r5, r5, #8
 8019622:	449b      	add	fp, r3
 8019624:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019626:	f806 5c04 	strb.w	r5, [r6, #-4]
 801962a:	441c      	add	r4, r3
 801962c:	e72b      	b.n	8019486 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801962e:	b01b      	add	sp, #108	; 0x6c
 8019630:	ecbd 8b08 	vpop	{d8-d11}
 8019634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019638 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8019638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801963c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8019640:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019644:	fb04 5603 	mla	r6, r4, r3, r5
 8019648:	2c00      	cmp	r4, #0
 801964a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801964e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019652:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8019656:	db36      	blt.n	80196c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8019658:	45a6      	cmp	lr, r4
 801965a:	dd34      	ble.n	80196c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 801965c:	2d00      	cmp	r5, #0
 801965e:	db30      	blt.n	80196c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8019660:	42ab      	cmp	r3, r5
 8019662:	dd2e      	ble.n	80196c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8019664:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8019668:	1c6e      	adds	r6, r5, #1
 801966a:	d42f      	bmi.n	80196cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801966c:	42b3      	cmp	r3, r6
 801966e:	dd2d      	ble.n	80196cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8019670:	b370      	cbz	r0, 80196d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8019672:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8019676:	3401      	adds	r4, #1
 8019678:	d42e      	bmi.n	80196d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801967a:	45a6      	cmp	lr, r4
 801967c:	dd2c      	ble.n	80196d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801967e:	b377      	cbz	r7, 80196de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8019680:	2d00      	cmp	r5, #0
 8019682:	db27      	blt.n	80196d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8019684:	42ab      	cmp	r3, r5
 8019686:	dd25      	ble.n	80196d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8019688:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801968c:	3501      	adds	r5, #1
 801968e:	d429      	bmi.n	80196e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019690:	42ab      	cmp	r3, r5
 8019692:	dd27      	ble.n	80196e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019694:	b340      	cbz	r0, 80196e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8019696:	3301      	adds	r3, #1
 8019698:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801969c:	280f      	cmp	r0, #15
 801969e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80196a2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80196a6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80196aa:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80196ae:	d801      	bhi.n	80196b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 80196b0:	2f0f      	cmp	r7, #15
 80196b2:	d91b      	bls.n	80196ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 80196b4:	4b89      	ldr	r3, [pc, #548]	; (80198dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 80196b6:	f240 1157 	movw	r1, #343	; 0x157
 80196ba:	4a89      	ldr	r2, [pc, #548]	; (80198e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80196bc:	4889      	ldr	r0, [pc, #548]	; (80198e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80196be:	f002 f981 	bl	801b9c4 <__assert_func>
 80196c2:	2200      	movs	r2, #0
 80196c4:	e7d0      	b.n	8019668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 80196c6:	2600      	movs	r6, #0
 80196c8:	4632      	mov	r2, r6
 80196ca:	e7d4      	b.n	8019676 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80196cc:	2600      	movs	r6, #0
 80196ce:	e7d2      	b.n	8019676 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80196d0:	4606      	mov	r6, r0
 80196d2:	e7d0      	b.n	8019676 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80196d4:	2400      	movs	r4, #0
 80196d6:	e7d9      	b.n	801968c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 80196d8:	2300      	movs	r3, #0
 80196da:	461c      	mov	r4, r3
 80196dc:	e7de      	b.n	801969c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80196de:	463b      	mov	r3, r7
 80196e0:	463c      	mov	r4, r7
 80196e2:	e7db      	b.n	801969c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80196e4:	2300      	movs	r3, #0
 80196e6:	e7d9      	b.n	801969c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80196e8:	4603      	mov	r3, r0
 80196ea:	e7d7      	b.n	801969c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80196ec:	b280      	uxth	r0, r0
 80196ee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80196f2:	b2bf      	uxth	r7, r7
 80196f4:	fb00 fe07 	mul.w	lr, r0, r7
 80196f8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80196fc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8019700:	eba0 0c0e 	sub.w	ip, r0, lr
 8019704:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8019708:	b2bf      	uxth	r7, r7
 801970a:	fa1f fc8c 	uxth.w	ip, ip
 801970e:	eba5 0507 	sub.w	r5, r5, r7
 8019712:	fb0c f00a 	mul.w	r0, ip, sl
 8019716:	b2ad      	uxth	r5, r5
 8019718:	fb05 000b 	mla	r0, r5, fp, r0
 801971c:	fb07 0009 	mla	r0, r7, r9, r0
 8019720:	fb0e 0008 	mla	r0, lr, r8, r0
 8019724:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019728:	9001      	str	r0, [sp, #4]
 801972a:	d018      	beq.n	801975e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 801972c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8019730:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019734:	fb0b f000 	mul.w	r0, fp, r0
 8019738:	fb0b fb02 	mul.w	fp, fp, r2
 801973c:	0a02      	lsrs	r2, r0, #8
 801973e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019742:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019746:	4402      	add	r2, r0
 8019748:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801974c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019750:	0a12      	lsrs	r2, r2, #8
 8019752:	0a00      	lsrs	r0, r0, #8
 8019754:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019758:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801975c:	4302      	orrs	r2, r0
 801975e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019762:	d01a      	beq.n	801979a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8019764:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8019768:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801976c:	fb0a f000 	mul.w	r0, sl, r0
 8019770:	fb0a fa06 	mul.w	sl, sl, r6
 8019774:	0a06      	lsrs	r6, r0, #8
 8019776:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801977a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801977e:	4406      	add	r6, r0
 8019780:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019784:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019788:	0a36      	lsrs	r6, r6, #8
 801978a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801978e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019792:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019796:	ea46 060a 	orr.w	r6, r6, sl
 801979a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801979e:	d01b      	beq.n	80197d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 80197a0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80197a4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80197a8:	fb09 fa0a 	mul.w	sl, r9, sl
 80197ac:	fb09 f004 	mul.w	r0, r9, r4
 80197b0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80197b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80197b8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80197bc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80197c0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80197c4:	4454      	add	r4, sl
 80197c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80197ca:	0a24      	lsrs	r4, r4, #8
 80197cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80197d0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80197d4:	ea44 0409 	orr.w	r4, r4, r9
 80197d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80197dc:	d01b      	beq.n	8019816 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 80197de:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80197e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80197e6:	fb08 f909 	mul.w	r9, r8, r9
 80197ea:	fb08 f003 	mul.w	r0, r8, r3
 80197ee:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80197f2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80197f6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80197fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80197fe:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8019802:	444b      	add	r3, r9
 8019804:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019808:	0a1b      	lsrs	r3, r3, #8
 801980a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801980e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019812:	ea43 0308 	orr.w	r3, r3, r8
 8019816:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801981a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801981e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8019822:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019826:	fb0c f000 	mul.w	r0, ip, r0
 801982a:	fb0c f606 	mul.w	r6, ip, r6
 801982e:	fb05 0808 	mla	r8, r5, r8, r0
 8019832:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8019836:	fb05 6502 	mla	r5, r5, r2, r6
 801983a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801983e:	fb07 8800 	mla	r8, r7, r0, r8
 8019842:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8019846:	fb07 5704 	mla	r7, r7, r4, r5
 801984a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801984e:	fb0e 8000 	mla	r0, lr, r0, r8
 8019852:	fb0e 7e03 	mla	lr, lr, r3, r7
 8019856:	9b01      	ldr	r3, [sp, #4]
 8019858:	0a00      	lsrs	r0, r0, #8
 801985a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801985e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019862:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019866:	ea40 0e0e 	orr.w	lr, r0, lr
 801986a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801986e:	b280      	uxth	r0, r0
 8019870:	fa5f f48e 	uxtb.w	r4, lr
 8019874:	4343      	muls	r3, r0
 8019876:	fb14 f400 	smulbb	r4, r4, r0
 801987a:	1c5a      	adds	r2, r3, #1
 801987c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019880:	780b      	ldrb	r3, [r1, #0]
 8019882:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8019886:	b2d2      	uxtb	r2, r2
 8019888:	fb03 4302 	mla	r3, r3, r2, r4
 801988c:	b29b      	uxth	r3, r3
 801988e:	1c5c      	adds	r4, r3, #1
 8019890:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019894:	784c      	ldrb	r4, [r1, #1]
 8019896:	fb14 f402 	smulbb	r4, r4, r2
 801989a:	121b      	asrs	r3, r3, #8
 801989c:	700b      	strb	r3, [r1, #0]
 801989e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 80198a2:	fb03 4300 	mla	r3, r3, r0, r4
 80198a6:	b29b      	uxth	r3, r3
 80198a8:	1c5c      	adds	r4, r3, #1
 80198aa:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80198ae:	121b      	asrs	r3, r3, #8
 80198b0:	704b      	strb	r3, [r1, #1]
 80198b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80198b6:	f891 e002 	ldrb.w	lr, [r1, #2]
 80198ba:	fb1e fe02 	smulbb	lr, lr, r2
 80198be:	fb03 ee00 	mla	lr, r3, r0, lr
 80198c2:	fa1f fe8e 	uxth.w	lr, lr
 80198c6:	f10e 0301 	add.w	r3, lr, #1
 80198ca:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80198ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80198d2:	f881 e002 	strb.w	lr, [r1, #2]
 80198d6:	b003      	add	sp, #12
 80198d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198dc:	0801fab5 	.word	0x0801fab5
 80198e0:	0802001f 	.word	0x0802001f
 80198e4:	0801fb7e 	.word	0x0801fb7e

080198e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80198e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ec:	ed2d 8b08 	vpush	{d8-d11}
 80198f0:	b09d      	sub	sp, #116	; 0x74
 80198f2:	eeb0 aa40 	vmov.f32	s20, s0
 80198f6:	eef0 9a60 	vmov.f32	s19, s1
 80198fa:	9219      	str	r2, [sp, #100]	; 0x64
 80198fc:	eeb0 9a41 	vmov.f32	s18, s2
 8019900:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8019902:	eeb0 8a62 	vmov.f32	s16, s5
 8019906:	9307      	str	r3, [sp, #28]
 8019908:	eef0 8a43 	vmov.f32	s17, s6
 801990c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8019910:	eef0 ba44 	vmov.f32	s23, s8
 8019914:	901b      	str	r0, [sp, #108]	; 0x6c
 8019916:	eeb0 ba64 	vmov.f32	s22, s9
 801991a:	931a      	str	r3, [sp, #104]	; 0x68
 801991c:	eef0 aa45 	vmov.f32	s21, s10
 8019920:	6850      	ldr	r0, [r2, #4]
 8019922:	9117      	str	r1, [sp, #92]	; 0x5c
 8019924:	6812      	ldr	r2, [r2, #0]
 8019926:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801992a:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 801992e:	fb00 1303 	mla	r3, r0, r3, r1
 8019932:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019936:	18d3      	adds	r3, r2, r3
 8019938:	930a      	str	r3, [sp, #40]	; 0x28
 801993a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	9310      	str	r3, [sp, #64]	; 0x40
 8019940:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8019944:	930b      	str	r3, [sp, #44]	; 0x2c
 8019946:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019948:	2b00      	cmp	r3, #0
 801994a:	dc03      	bgt.n	8019954 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801994c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801994e:	2b00      	cmp	r3, #0
 8019950:	f340 8368 	ble.w	801a024 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8019954:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8019956:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801995a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801995e:	1e48      	subs	r0, r1, #1
 8019960:	1e57      	subs	r7, r2, #1
 8019962:	9b07      	ldr	r3, [sp, #28]
 8019964:	2b00      	cmp	r3, #0
 8019966:	f340 8187 	ble.w	8019c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801996a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801996e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8019972:	d406      	bmi.n	8019982 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019974:	4584      	cmp	ip, r0
 8019976:	da04      	bge.n	8019982 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019978:	2b00      	cmp	r3, #0
 801997a:	db02      	blt.n	8019982 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801997c:	42bb      	cmp	r3, r7
 801997e:	f2c0 817c 	blt.w	8019c7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019982:	f11c 0c01 	adds.w	ip, ip, #1
 8019986:	f100 816c 	bmi.w	8019c62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801998a:	4561      	cmp	r1, ip
 801998c:	f2c0 8169 	blt.w	8019c62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8019990:	3301      	adds	r3, #1
 8019992:	f100 8166 	bmi.w	8019c62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8019996:	429a      	cmp	r2, r3
 8019998:	f2c0 8163 	blt.w	8019c62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801999c:	9b07      	ldr	r3, [sp, #28]
 801999e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80199a0:	9318      	str	r3, [sp, #96]	; 0x60
 80199a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	f340 8186 	ble.w	8019cb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80199aa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80199ac:	142a      	asrs	r2, r5, #16
 80199ae:	ea4f 4026 	mov.w	r0, r6, asr #16
 80199b2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80199b6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80199ba:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80199be:	f100 81cb 	bmi.w	8019d58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80199c2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80199c6:	4542      	cmp	r2, r8
 80199c8:	f280 81c6 	bge.w	8019d58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80199cc:	2800      	cmp	r0, #0
 80199ce:	f2c0 81c3 	blt.w	8019d58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80199d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80199d6:	4540      	cmp	r0, r8
 80199d8:	f280 81be 	bge.w	8019d58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80199dc:	fa0f f38e 	sxth.w	r3, lr
 80199e0:	fb00 2203 	mla	r2, r0, r3, r2
 80199e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80199e6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80199ea:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80199ee:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80199f2:	2900      	cmp	r1, #0
 80199f4:	f000 81a6 	beq.w	8019d44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 80199f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80199fc:	900c      	str	r0, [sp, #48]	; 0x30
 80199fe:	0e00      	lsrs	r0, r0, #24
 8019a00:	9013      	str	r0, [sp, #76]	; 0x4c
 8019a02:	f1bc 0f00 	cmp.w	ip, #0
 8019a06:	d00f      	beq.n	8019a28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019a0c:	3b01      	subs	r3, #1
 8019a0e:	009b      	lsls	r3, r3, #2
 8019a10:	3304      	adds	r3, #4
 8019a12:	eb08 0003 	add.w	r0, r8, r3
 8019a16:	f858 3003 	ldr.w	r3, [r8, r3]
 8019a1a:	9308      	str	r3, [sp, #32]
 8019a1c:	0e1b      	lsrs	r3, r3, #24
 8019a1e:	9311      	str	r3, [sp, #68]	; 0x44
 8019a20:	6843      	ldr	r3, [r0, #4]
 8019a22:	930d      	str	r3, [sp, #52]	; 0x34
 8019a24:	0e1b      	lsrs	r3, r3, #24
 8019a26:	9314      	str	r3, [sp, #80]	; 0x50
 8019a28:	b289      	uxth	r1, r1
 8019a2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019a2c:	fa1f fc8c 	uxth.w	ip, ip
 8019a30:	0108      	lsls	r0, r1, #4
 8019a32:	fb01 f90c 	mul.w	r9, r1, ip
 8019a36:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8019a3a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8019a3e:	eba0 0809 	sub.w	r8, r0, r9
 8019a42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019a44:	fa1f f18c 	uxth.w	r1, ip
 8019a48:	fa1f f888 	uxth.w	r8, r8
 8019a4c:	1a5b      	subs	r3, r3, r1
 8019a4e:	fb08 f000 	mul.w	r0, r8, r0
 8019a52:	b29b      	uxth	r3, r3
 8019a54:	fb03 000e 	mla	r0, r3, lr, r0
 8019a58:	fb01 0004 	mla	r0, r1, r4, r0
 8019a5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019a5e:	fb09 0004 	mla	r0, r9, r4, r0
 8019a62:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019a66:	2800      	cmp	r0, #0
 8019a68:	f000 80f2 	beq.w	8019c50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019a6c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019a70:	d01b      	beq.n	8019aaa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019a72:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8019a76:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019a7a:	fb0e fa0a 	mul.w	sl, lr, sl
 8019a7e:	fb0e fe02 	mul.w	lr, lr, r2
 8019a82:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8019a86:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019a8a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019a8e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019a92:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019a96:	4452      	add	r2, sl
 8019a98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a9c:	0a12      	lsrs	r2, r2, #8
 8019a9e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019aa2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019aa6:	ea42 020c 	orr.w	r2, r2, ip
 8019aaa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019aac:	2cff      	cmp	r4, #255	; 0xff
 8019aae:	d021      	beq.n	8019af4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8019ab0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019ab2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019ab6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019ab8:	fb04 fb0b 	mul.w	fp, r4, fp
 8019abc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019abe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019ac2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019ac4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019ac8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019acc:	fb04 fa0a 	mul.w	sl, r4, sl
 8019ad0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019ad4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019ad8:	44de      	add	lr, fp
 8019ada:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019ade:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019ae2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019ae6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019aea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019aee:	ea4e 040a 	orr.w	r4, lr, sl
 8019af2:	940c      	str	r4, [sp, #48]	; 0x30
 8019af4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019af6:	2cff      	cmp	r4, #255	; 0xff
 8019af8:	d021      	beq.n	8019b3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8019afa:	9c08      	ldr	r4, [sp, #32]
 8019afc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019b00:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019b02:	fb04 fb0b 	mul.w	fp, r4, fp
 8019b06:	9c08      	ldr	r4, [sp, #32]
 8019b08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019b0c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019b0e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019b12:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019b16:	fb04 fa0a 	mul.w	sl, r4, sl
 8019b1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019b1e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019b22:	44de      	add	lr, fp
 8019b24:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019b28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019b2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019b30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019b34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019b38:	ea4e 040a 	orr.w	r4, lr, sl
 8019b3c:	9408      	str	r4, [sp, #32]
 8019b3e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019b40:	2cff      	cmp	r4, #255	; 0xff
 8019b42:	d021      	beq.n	8019b88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8019b44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019b46:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019b4a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019b4c:	fb04 fb0b 	mul.w	fp, r4, fp
 8019b50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019b52:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019b56:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019b58:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019b5c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019b60:	fb04 fa0a 	mul.w	sl, r4, sl
 8019b64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019b68:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019b6c:	44de      	add	lr, fp
 8019b6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019b72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019b76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019b7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019b7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019b82:	ea4e 040a 	orr.w	r4, lr, sl
 8019b86:	940d      	str	r4, [sp, #52]	; 0x34
 8019b88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019b8a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8019b8e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019b92:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019b96:	9c08      	ldr	r4, [sp, #32]
 8019b98:	fb08 fc0c 	mul.w	ip, r8, ip
 8019b9c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8019ba0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019ba4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019ba6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019baa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019bae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019bb0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019bb4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019bb8:	fb08 f80e 	mul.w	r8, r8, lr
 8019bbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019bc0:	fb03 8202 	mla	r2, r3, r2, r8
 8019bc4:	9b08      	ldr	r3, [sp, #32]
 8019bc6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019bca:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8019bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bd0:	fb01 220a 	mla	r2, r1, sl, r2
 8019bd4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8019bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019bda:	fb09 2901 	mla	r9, r9, r1, r2
 8019bde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019be0:	4343      	muls	r3, r0
 8019be2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019be6:	1c58      	adds	r0, r3, #1
 8019be8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019bec:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019bf0:	783b      	ldrb	r3, [r7, #0]
 8019bf2:	ea4c 0c09 	orr.w	ip, ip, r9
 8019bf6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019bfa:	fa5f f28c 	uxtb.w	r2, ip
 8019bfe:	b2c0      	uxtb	r0, r0
 8019c00:	fb12 f201 	smulbb	r2, r2, r1
 8019c04:	fb03 2300 	mla	r3, r3, r0, r2
 8019c08:	b29b      	uxth	r3, r3
 8019c0a:	1c5a      	adds	r2, r3, #1
 8019c0c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019c10:	787a      	ldrb	r2, [r7, #1]
 8019c12:	fb12 f200 	smulbb	r2, r2, r0
 8019c16:	121b      	asrs	r3, r3, #8
 8019c18:	703b      	strb	r3, [r7, #0]
 8019c1a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019c1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019c22:	fb03 2301 	mla	r3, r3, r1, r2
 8019c26:	b29b      	uxth	r3, r3
 8019c28:	1c5a      	adds	r2, r3, #1
 8019c2a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019c2e:	121b      	asrs	r3, r3, #8
 8019c30:	707b      	strb	r3, [r7, #1]
 8019c32:	78bb      	ldrb	r3, [r7, #2]
 8019c34:	fb13 f000 	smulbb	r0, r3, r0
 8019c38:	fb0c 0c01 	mla	ip, ip, r1, r0
 8019c3c:	fa1f fc8c 	uxth.w	ip, ip
 8019c40:	f10c 0301 	add.w	r3, ip, #1
 8019c44:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019c48:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019c4c:	f887 c002 	strb.w	ip, [r7, #2]
 8019c50:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019c52:	3703      	adds	r7, #3
 8019c54:	441d      	add	r5, r3
 8019c56:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019c58:	441e      	add	r6, r3
 8019c5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019c5c:	3b01      	subs	r3, #1
 8019c5e:	9318      	str	r3, [sp, #96]	; 0x60
 8019c60:	e69f      	b.n	80199a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8019c62:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019c64:	441d      	add	r5, r3
 8019c66:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019c68:	441e      	add	r6, r3
 8019c6a:	9b07      	ldr	r3, [sp, #28]
 8019c6c:	3b01      	subs	r3, #1
 8019c6e:	9307      	str	r3, [sp, #28]
 8019c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c72:	3303      	adds	r3, #3
 8019c74:	930a      	str	r3, [sp, #40]	; 0x28
 8019c76:	e674      	b.n	8019962 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019c78:	d025      	beq.n	8019cc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8019c7a:	9b07      	ldr	r3, [sp, #28]
 8019c7c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8019c7e:	3b01      	subs	r3, #1
 8019c80:	fb00 5003 	mla	r0, r0, r3, r5
 8019c84:	1400      	asrs	r0, r0, #16
 8019c86:	f53f ae89 	bmi.w	801999c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019c8a:	3901      	subs	r1, #1
 8019c8c:	4288      	cmp	r0, r1
 8019c8e:	f6bf ae85 	bge.w	801999c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019c92:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8019c94:	fb01 6303 	mla	r3, r1, r3, r6
 8019c98:	141b      	asrs	r3, r3, #16
 8019c9a:	f53f ae7f 	bmi.w	801999c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019c9e:	3a01      	subs	r2, #1
 8019ca0:	4293      	cmp	r3, r2
 8019ca2:	f6bf ae7b 	bge.w	801999c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ca8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019cac:	f103 0e03 	add.w	lr, r3, #3
 8019cb0:	f1bb 0f00 	cmp.w	fp, #0
 8019cb4:	dc6e      	bgt.n	8019d94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8019cb6:	9b07      	ldr	r3, [sp, #28]
 8019cb8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019cc2:	4423      	add	r3, r4
 8019cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8019cc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	f340 81ab 	ble.w	801a024 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8019cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019cd2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019cd4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019cd8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019cdc:	eef0 6a48 	vmov.f32	s13, s16
 8019ce0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019ce4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019ce8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019cec:	ee16 5a90 	vmov	r5, s13
 8019cf0:	eef0 6a68 	vmov.f32	s13, s17
 8019cf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019cf8:	ee16 6a90 	vmov	r6, s13
 8019cfc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019d00:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019d04:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019d08:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019d0c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019d10:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019d14:	ee18 2a10 	vmov	r2, s16
 8019d18:	eeb0 8a47 	vmov.f32	s16, s14
 8019d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d20:	ee18 2a90 	vmov	r2, s17
 8019d24:	9331      	str	r3, [sp, #196]	; 0xc4
 8019d26:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019d28:	eef0 8a67 	vmov.f32	s17, s15
 8019d2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d30:	9332      	str	r3, [sp, #200]	; 0xc8
 8019d32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019d34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019d36:	3b01      	subs	r3, #1
 8019d38:	9317      	str	r3, [sp, #92]	; 0x5c
 8019d3a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019d3c:	bf08      	it	eq
 8019d3e:	4613      	moveq	r3, r2
 8019d40:	9307      	str	r3, [sp, #28]
 8019d42:	e600      	b.n	8019946 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019d44:	f1bc 0f00 	cmp.w	ip, #0
 8019d48:	f43f ae6e 	beq.w	8019a28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019d4c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8019d50:	9308      	str	r3, [sp, #32]
 8019d52:	0e1b      	lsrs	r3, r3, #24
 8019d54:	9311      	str	r3, [sp, #68]	; 0x44
 8019d56:	e667      	b.n	8019a28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019d58:	f112 0801 	adds.w	r8, r2, #1
 8019d5c:	f53f af78 	bmi.w	8019c50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019d60:	45c6      	cmp	lr, r8
 8019d62:	f6ff af75 	blt.w	8019c50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019d66:	f110 0801 	adds.w	r8, r0, #1
 8019d6a:	f53f af71 	bmi.w	8019c50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019d6e:	4543      	cmp	r3, r8
 8019d70:	f6ff af6e 	blt.w	8019c50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019d74:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019d76:	b21b      	sxth	r3, r3
 8019d78:	9201      	str	r2, [sp, #4]
 8019d7a:	9300      	str	r3, [sp, #0]
 8019d7c:	fa0f f38e 	sxth.w	r3, lr
 8019d80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019d86:	e9cd c404 	strd	ip, r4, [sp, #16]
 8019d8a:	4639      	mov	r1, r7
 8019d8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8019d8e:	f7ff fc53 	bl	8019638 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8019d92:	e75d      	b.n	8019c50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019d94:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8019d96:	142f      	asrs	r7, r5, #16
 8019d98:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d9a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019d9e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8019da2:	1433      	asrs	r3, r6, #16
 8019da4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019da8:	fb02 7303 	mla	r3, r2, r3, r7
 8019dac:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8019db0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019db4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019db8:	2900      	cmp	r1, #0
 8019dba:	f000 812a 	beq.w	801a012 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 8019dbe:	687c      	ldr	r4, [r7, #4]
 8019dc0:	940e      	str	r4, [sp, #56]	; 0x38
 8019dc2:	0e24      	lsrs	r4, r4, #24
 8019dc4:	9415      	str	r4, [sp, #84]	; 0x54
 8019dc6:	b178      	cbz	r0, 8019de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8019dc8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8019dcc:	3a01      	subs	r2, #1
 8019dce:	0092      	lsls	r2, r2, #2
 8019dd0:	3204      	adds	r2, #4
 8019dd2:	eb07 0802 	add.w	r8, r7, r2
 8019dd6:	58ba      	ldr	r2, [r7, r2]
 8019dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8019dda:	0e12      	lsrs	r2, r2, #24
 8019ddc:	9212      	str	r2, [sp, #72]	; 0x48
 8019dde:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8019de2:	920f      	str	r2, [sp, #60]	; 0x3c
 8019de4:	0e12      	lsrs	r2, r2, #24
 8019de6:	9216      	str	r2, [sp, #88]	; 0x58
 8019de8:	b289      	uxth	r1, r1
 8019dea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019dec:	b280      	uxth	r0, r0
 8019dee:	fb01 f900 	mul.w	r9, r1, r0
 8019df2:	0109      	lsls	r1, r1, #4
 8019df4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019df8:	eba1 0809 	sub.w	r8, r1, r9
 8019dfc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8019e00:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019e02:	b280      	uxth	r0, r0
 8019e04:	fa1f f888 	uxth.w	r8, r8
 8019e08:	1a12      	subs	r2, r2, r0
 8019e0a:	fb08 f101 	mul.w	r1, r8, r1
 8019e0e:	b292      	uxth	r2, r2
 8019e10:	fb02 110c 	mla	r1, r2, ip, r1
 8019e14:	fb00 1104 	mla	r1, r0, r4, r1
 8019e18:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019e1a:	fb09 1104 	mla	r1, r9, r4, r1
 8019e1e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019e22:	2900      	cmp	r1, #0
 8019e24:	f000 80ec 	beq.w	801a000 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8019e28:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019e2c:	d019      	beq.n	8019e62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 8019e2e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019e32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019e36:	fb0c fa0a 	mul.w	sl, ip, sl
 8019e3a:	fb0c fc03 	mul.w	ip, ip, r3
 8019e3e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019e42:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019e46:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8019e4a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019e4e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019e52:	4453      	add	r3, sl
 8019e54:	0a3f      	lsrs	r7, r7, #8
 8019e56:	0a1b      	lsrs	r3, r3, #8
 8019e58:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019e5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019e60:	433b      	orrs	r3, r7
 8019e62:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019e64:	2cff      	cmp	r4, #255	; 0xff
 8019e66:	d020      	beq.n	8019eaa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8019e68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019e6a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019e6e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019e70:	4367      	muls	r7, r4
 8019e72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019e74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019e78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019e7c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019e7e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019e82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e86:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e8a:	44bc      	add	ip, r7
 8019e8c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019e90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019e94:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019e98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019ea0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019ea4:	ea4c 040a 	orr.w	r4, ip, sl
 8019ea8:	940e      	str	r4, [sp, #56]	; 0x38
 8019eaa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019eac:	2cff      	cmp	r4, #255	; 0xff
 8019eae:	d020      	beq.n	8019ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8019eb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019eb2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019eb6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019eb8:	4367      	muls	r7, r4
 8019eba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019ebc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019ec0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019ec4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019ec6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019eca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019ece:	fb04 fa0a 	mul.w	sl, r4, sl
 8019ed2:	44bc      	add	ip, r7
 8019ed4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019ed8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019edc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019ee0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019ee4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019ee8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019eec:	ea4c 040a 	orr.w	r4, ip, sl
 8019ef0:	9409      	str	r4, [sp, #36]	; 0x24
 8019ef2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019ef4:	2cff      	cmp	r4, #255	; 0xff
 8019ef6:	d020      	beq.n	8019f3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8019ef8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019efa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019efe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019f00:	4367      	muls	r7, r4
 8019f02:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019f04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019f08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019f0c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019f0e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019f12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019f16:	fb04 fa0a 	mul.w	sl, r4, sl
 8019f1a:	44bc      	add	ip, r7
 8019f1c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019f20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019f24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019f28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019f2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019f30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019f34:	ea4c 040a 	orr.w	r4, ip, sl
 8019f38:	940f      	str	r4, [sp, #60]	; 0x3c
 8019f3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019f3c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019f40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019f44:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019f48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019f4a:	fb08 f707 	mul.w	r7, r8, r7
 8019f4e:	fb02 770c 	mla	r7, r2, ip, r7
 8019f52:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019f56:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019f58:	fb00 770c 	mla	r7, r0, ip, r7
 8019f5c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019f60:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019f62:	fb09 770c 	mla	r7, r9, ip, r7
 8019f66:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019f6a:	fb08 f80c 	mul.w	r8, r8, ip
 8019f6e:	0a3f      	lsrs	r7, r7, #8
 8019f70:	fb02 8303 	mla	r3, r2, r3, r8
 8019f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f76:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019f7a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019f7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019f80:	fb00 330a 	mla	r3, r0, sl, r3
 8019f84:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019f88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019f8a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8019f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019f94:	434b      	muls	r3, r1
 8019f96:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019f9a:	1c59      	adds	r1, r3, #1
 8019f9c:	ea47 070c 	orr.w	r7, r7, ip
 8019fa0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019fa4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019fa8:	b2fa      	uxtb	r2, r7
 8019faa:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8019fae:	fb12 f200 	smulbb	r2, r2, r0
 8019fb2:	b2c9      	uxtb	r1, r1
 8019fb4:	fb03 2301 	mla	r3, r3, r1, r2
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	1c5a      	adds	r2, r3, #1
 8019fbc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019fc0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8019fc4:	fb12 f201 	smulbb	r2, r2, r1
 8019fc8:	121b      	asrs	r3, r3, #8
 8019fca:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8019fce:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8019fd2:	0c3f      	lsrs	r7, r7, #16
 8019fd4:	fb03 2300 	mla	r3, r3, r0, r2
 8019fd8:	b29b      	uxth	r3, r3
 8019fda:	1c5a      	adds	r2, r3, #1
 8019fdc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019fe0:	121b      	asrs	r3, r3, #8
 8019fe2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019fe6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019fea:	fb13 f101 	smulbb	r1, r3, r1
 8019fee:	fb07 1700 	mla	r7, r7, r0, r1
 8019ff2:	b2bf      	uxth	r7, r7
 8019ff4:	1c79      	adds	r1, r7, #1
 8019ff6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8019ffa:	123f      	asrs	r7, r7, #8
 8019ffc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a000:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a002:	f10e 0e03 	add.w	lr, lr, #3
 801a006:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a00a:	441d      	add	r5, r3
 801a00c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a00e:	441e      	add	r6, r3
 801a010:	e64e      	b.n	8019cb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801a012:	2800      	cmp	r0, #0
 801a014:	f43f aee8 	beq.w	8019de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a018:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801a01c:	9209      	str	r2, [sp, #36]	; 0x24
 801a01e:	0e12      	lsrs	r2, r2, #24
 801a020:	9212      	str	r2, [sp, #72]	; 0x48
 801a022:	e6e1      	b.n	8019de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a024:	b01d      	add	sp, #116	; 0x74
 801a026:	ecbd 8b08 	vpop	{d8-d11}
 801a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a030 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801a030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a034:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801a038:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801a03c:	fb04 5603 	mla	r6, r4, r3, r5
 801a040:	2c00      	cmp	r4, #0
 801a042:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801a046:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801a04a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801a04e:	db36      	blt.n	801a0be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801a050:	45a6      	cmp	lr, r4
 801a052:	dd34      	ble.n	801a0be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801a054:	2d00      	cmp	r5, #0
 801a056:	db30      	blt.n	801a0ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801a058:	42ab      	cmp	r3, r5
 801a05a:	dd2e      	ble.n	801a0ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801a05c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801a060:	1c6e      	adds	r6, r5, #1
 801a062:	d42f      	bmi.n	801a0c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801a064:	42b3      	cmp	r3, r6
 801a066:	dd2d      	ble.n	801a0c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801a068:	b370      	cbz	r0, 801a0c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 801a06a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801a06e:	3401      	adds	r4, #1
 801a070:	d42e      	bmi.n	801a0d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801a072:	45a6      	cmp	lr, r4
 801a074:	dd2c      	ble.n	801a0d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801a076:	b377      	cbz	r7, 801a0d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 801a078:	2d00      	cmp	r5, #0
 801a07a:	db27      	blt.n	801a0cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801a07c:	42ab      	cmp	r3, r5
 801a07e:	dd25      	ble.n	801a0cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801a080:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801a084:	3501      	adds	r5, #1
 801a086:	d429      	bmi.n	801a0dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801a088:	42ab      	cmp	r3, r5
 801a08a:	dd27      	ble.n	801a0dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801a08c:	b340      	cbz	r0, 801a0e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801a08e:	3301      	adds	r3, #1
 801a090:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801a094:	280f      	cmp	r0, #15
 801a096:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a09a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a09e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a0a2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801a0a6:	d801      	bhi.n	801a0ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 801a0a8:	2f0f      	cmp	r7, #15
 801a0aa:	d91b      	bls.n	801a0e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 801a0ac:	4b7e      	ldr	r3, [pc, #504]	; (801a2a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801a0ae:	f240 1157 	movw	r1, #343	; 0x157
 801a0b2:	4a7e      	ldr	r2, [pc, #504]	; (801a2ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 801a0b4:	487e      	ldr	r0, [pc, #504]	; (801a2b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801a0b6:	f001 fc85 	bl	801b9c4 <__assert_func>
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	e7d0      	b.n	801a060 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801a0be:	2600      	movs	r6, #0
 801a0c0:	4632      	mov	r2, r6
 801a0c2:	e7d4      	b.n	801a06e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a0c4:	2600      	movs	r6, #0
 801a0c6:	e7d2      	b.n	801a06e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a0c8:	4606      	mov	r6, r0
 801a0ca:	e7d0      	b.n	801a06e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a0cc:	2400      	movs	r4, #0
 801a0ce:	e7d9      	b.n	801a084 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	461c      	mov	r4, r3
 801a0d4:	e7de      	b.n	801a094 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a0d6:	463b      	mov	r3, r7
 801a0d8:	463c      	mov	r4, r7
 801a0da:	e7db      	b.n	801a094 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a0dc:	2300      	movs	r3, #0
 801a0de:	e7d9      	b.n	801a094 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a0e0:	4603      	mov	r3, r0
 801a0e2:	e7d7      	b.n	801a094 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a0e4:	b280      	uxth	r0, r0
 801a0e6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a0ea:	b2bf      	uxth	r7, r7
 801a0ec:	fb00 fe07 	mul.w	lr, r0, r7
 801a0f0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a0f4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a0f8:	eba0 0c0e 	sub.w	ip, r0, lr
 801a0fc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801a100:	b2bf      	uxth	r7, r7
 801a102:	fa1f fc8c 	uxth.w	ip, ip
 801a106:	eba0 0507 	sub.w	r5, r0, r7
 801a10a:	fb0c f00a 	mul.w	r0, ip, sl
 801a10e:	b2ad      	uxth	r5, r5
 801a110:	fb05 000b 	mla	r0, r5, fp, r0
 801a114:	fb07 0009 	mla	r0, r7, r9, r0
 801a118:	fb0e 0008 	mla	r0, lr, r8, r0
 801a11c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a120:	9001      	str	r0, [sp, #4]
 801a122:	d018      	beq.n	801a156 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 801a124:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801a128:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a12c:	fb0b f000 	mul.w	r0, fp, r0
 801a130:	fb0b fb02 	mul.w	fp, fp, r2
 801a134:	0a02      	lsrs	r2, r0, #8
 801a136:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a13a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a13e:	4402      	add	r2, r0
 801a140:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801a144:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a148:	0a12      	lsrs	r2, r2, #8
 801a14a:	0a00      	lsrs	r0, r0, #8
 801a14c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a150:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a154:	4302      	orrs	r2, r0
 801a156:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a15a:	d01a      	beq.n	801a192 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 801a15c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a160:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a164:	fb0a f000 	mul.w	r0, sl, r0
 801a168:	fb0a fa06 	mul.w	sl, sl, r6
 801a16c:	0a06      	lsrs	r6, r0, #8
 801a16e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a172:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a176:	4406      	add	r6, r0
 801a178:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a17c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a180:	0a36      	lsrs	r6, r6, #8
 801a182:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a186:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a18a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a18e:	ea46 060a 	orr.w	r6, r6, sl
 801a192:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a196:	d01b      	beq.n	801a1d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 801a198:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a19c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a1a0:	fb09 fa0a 	mul.w	sl, r9, sl
 801a1a4:	fb09 f004 	mul.w	r0, r9, r4
 801a1a8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a1ac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a1b0:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801a1b4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a1b8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801a1bc:	4454      	add	r4, sl
 801a1be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a1c2:	0a24      	lsrs	r4, r4, #8
 801a1c4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a1c8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a1cc:	ea44 0409 	orr.w	r4, r4, r9
 801a1d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a1d4:	d01b      	beq.n	801a20e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 801a1d6:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801a1da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a1de:	fb08 f909 	mul.w	r9, r8, r9
 801a1e2:	fb08 f003 	mul.w	r0, r8, r3
 801a1e6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a1ea:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a1ee:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801a1f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a1f6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801a1fa:	444b      	add	r3, r9
 801a1fc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a200:	0a1b      	lsrs	r3, r3, #8
 801a202:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a206:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a20a:	ea43 0308 	orr.w	r3, r3, r8
 801a20e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a212:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a216:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801a21a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a21e:	fb0c f000 	mul.w	r0, ip, r0
 801a222:	fb0c f606 	mul.w	r6, ip, r6
 801a226:	fb05 0808 	mla	r8, r5, r8, r0
 801a22a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801a22e:	fb05 6502 	mla	r5, r5, r2, r6
 801a232:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a236:	fb07 8800 	mla	r8, r7, r0, r8
 801a23a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801a23e:	fb07 5704 	mla	r7, r7, r4, r5
 801a242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a246:	fb0e 8000 	mla	r0, lr, r0, r8
 801a24a:	780a      	ldrb	r2, [r1, #0]
 801a24c:	fb0e 7e03 	mla	lr, lr, r3, r7
 801a250:	9b01      	ldr	r3, [sp, #4]
 801a252:	0a00      	lsrs	r0, r0, #8
 801a254:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a258:	43db      	mvns	r3, r3
 801a25a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a25e:	b2db      	uxtb	r3, r3
 801a260:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a264:	ea40 0e0e 	orr.w	lr, r0, lr
 801a268:	fb02 f003 	mul.w	r0, r2, r3
 801a26c:	1c42      	adds	r2, r0, #1
 801a26e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a272:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801a276:	700a      	strb	r2, [r1, #0]
 801a278:	784a      	ldrb	r2, [r1, #1]
 801a27a:	435a      	muls	r2, r3
 801a27c:	1c50      	adds	r0, r2, #1
 801a27e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a282:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801a286:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a28a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a28e:	704a      	strb	r2, [r1, #1]
 801a290:	788a      	ldrb	r2, [r1, #2]
 801a292:	4353      	muls	r3, r2
 801a294:	1c5a      	adds	r2, r3, #1
 801a296:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a29a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a29e:	f881 e002 	strb.w	lr, [r1, #2]
 801a2a2:	b003      	add	sp, #12
 801a2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2a8:	0801fab5 	.word	0x0801fab5
 801a2ac:	0802001f 	.word	0x0802001f
 801a2b0:	0801fb7e 	.word	0x0801fb7e

0801a2b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2b8:	ed2d 8b08 	vpush	{d8-d11}
 801a2bc:	b099      	sub	sp, #100	; 0x64
 801a2be:	eeb0 aa40 	vmov.f32	s20, s0
 801a2c2:	eef0 9a60 	vmov.f32	s19, s1
 801a2c6:	9017      	str	r0, [sp, #92]	; 0x5c
 801a2c8:	eeb0 9a41 	vmov.f32	s18, s2
 801a2cc:	9306      	str	r3, [sp, #24]
 801a2ce:	eeb0 8a62 	vmov.f32	s16, s5
 801a2d2:	eef0 8a43 	vmov.f32	s17, s6
 801a2d6:	eef0 ba44 	vmov.f32	s23, s8
 801a2da:	eeb0 ba64 	vmov.f32	s22, s9
 801a2de:	eef0 aa45 	vmov.f32	s21, s10
 801a2e2:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801a2e6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a2e8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801a2ec:	6850      	ldr	r0, [r2, #4]
 801a2ee:	6812      	ldr	r2, [r2, #0]
 801a2f0:	fb00 1303 	mla	r3, r0, r3, r1
 801a2f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a2f8:	18d3      	adds	r3, r2, r3
 801a2fa:	9309      	str	r3, [sp, #36]	; 0x24
 801a2fc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a2fe:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	930e      	str	r3, [sp, #56]	; 0x38
 801a306:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a308:	2b00      	cmp	r3, #0
 801a30a:	dc03      	bgt.n	801a314 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a30c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a30e:	2b00      	cmp	r3, #0
 801a310:	f340 8360 	ble.w	801a9d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801a314:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a316:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a31a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a31e:	1e48      	subs	r0, r1, #1
 801a320:	1e57      	subs	r7, r2, #1
 801a322:	9b06      	ldr	r3, [sp, #24]
 801a324:	2b00      	cmp	r3, #0
 801a326:	f340 817b 	ble.w	801a620 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801a32a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a32e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a332:	d406      	bmi.n	801a342 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801a334:	4584      	cmp	ip, r0
 801a336:	da04      	bge.n	801a342 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801a338:	2b00      	cmp	r3, #0
 801a33a:	db02      	blt.n	801a342 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801a33c:	42bb      	cmp	r3, r7
 801a33e:	f2c0 8170 	blt.w	801a622 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a342:	f11c 0c01 	adds.w	ip, ip, #1
 801a346:	f100 8160 	bmi.w	801a60a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a34a:	4561      	cmp	r1, ip
 801a34c:	f2c0 815d 	blt.w	801a60a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a350:	3301      	adds	r3, #1
 801a352:	f100 815a 	bmi.w	801a60a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a356:	429a      	cmp	r2, r3
 801a358:	f2c0 8157 	blt.w	801a60a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a35c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a360:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a362:	f1b8 0f00 	cmp.w	r8, #0
 801a366:	f340 8179 	ble.w	801a65c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801a36a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801a36c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801a370:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a372:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a376:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801a37a:	142a      	asrs	r2, r5, #16
 801a37c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a380:	689b      	ldr	r3, [r3, #8]
 801a382:	f100 81be 	bmi.w	801a702 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a386:	f103 39ff 	add.w	r9, r3, #4294967295
 801a38a:	454a      	cmp	r2, r9
 801a38c:	f280 81b9 	bge.w	801a702 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a390:	f1bc 0f00 	cmp.w	ip, #0
 801a394:	f2c0 81b5 	blt.w	801a702 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a398:	f10e 39ff 	add.w	r9, lr, #4294967295
 801a39c:	45cc      	cmp	ip, r9
 801a39e:	f280 81b0 	bge.w	801a702 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a3a2:	b21b      	sxth	r3, r3
 801a3a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a3a6:	fb0c 2203 	mla	r2, ip, r3, r2
 801a3aa:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801a3ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a3b2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801a3b6:	2900      	cmp	r1, #0
 801a3b8:	f000 8197 	beq.w	801a6ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 801a3bc:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801a3c0:	940a      	str	r4, [sp, #40]	; 0x28
 801a3c2:	0e24      	lsrs	r4, r4, #24
 801a3c4:	9411      	str	r4, [sp, #68]	; 0x44
 801a3c6:	b180      	cbz	r0, 801a3ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a3c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a3cc:	3b01      	subs	r3, #1
 801a3ce:	009b      	lsls	r3, r3, #2
 801a3d0:	3304      	adds	r3, #4
 801a3d2:	eb09 0c03 	add.w	ip, r9, r3
 801a3d6:	f859 3003 	ldr.w	r3, [r9, r3]
 801a3da:	9307      	str	r3, [sp, #28]
 801a3dc:	0e1b      	lsrs	r3, r3, #24
 801a3de:	930f      	str	r3, [sp, #60]	; 0x3c
 801a3e0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801a3e4:	930b      	str	r3, [sp, #44]	; 0x2c
 801a3e6:	0e1b      	lsrs	r3, r3, #24
 801a3e8:	9312      	str	r3, [sp, #72]	; 0x48
 801a3ea:	b289      	uxth	r1, r1
 801a3ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a3ee:	b280      	uxth	r0, r0
 801a3f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a3f2:	fb01 fa00 	mul.w	sl, r1, r0
 801a3f6:	0109      	lsls	r1, r1, #4
 801a3f8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801a3fc:	eba1 090a 	sub.w	r9, r1, sl
 801a400:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801a404:	b280      	uxth	r0, r0
 801a406:	fa1f f989 	uxth.w	r9, r9
 801a40a:	1a09      	subs	r1, r1, r0
 801a40c:	fb09 f303 	mul.w	r3, r9, r3
 801a410:	b289      	uxth	r1, r1
 801a412:	fb01 330e 	mla	r3, r1, lr, r3
 801a416:	fb00 3304 	mla	r3, r0, r4, r3
 801a41a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a41c:	fb0a 3304 	mla	r3, sl, r4, r3
 801a420:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a424:	2b00      	cmp	r3, #0
 801a426:	f000 80e8 	beq.w	801a5fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a42a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a42e:	d01b      	beq.n	801a468 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801a430:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801a434:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a438:	fb0e fb0b 	mul.w	fp, lr, fp
 801a43c:	fb0e fe02 	mul.w	lr, lr, r2
 801a440:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801a444:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a448:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a44c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a450:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a454:	445a      	add	r2, fp
 801a456:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a45a:	0a12      	lsrs	r2, r2, #8
 801a45c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a460:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a464:	ea42 020c 	orr.w	r2, r2, ip
 801a468:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a46a:	2cff      	cmp	r4, #255	; 0xff
 801a46c:	d021      	beq.n	801a4b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801a46e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a470:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a474:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a476:	fb04 fc0c 	mul.w	ip, r4, ip
 801a47a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a47c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a480:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801a484:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a486:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a48a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a48e:	fb04 fb0b 	mul.w	fp, r4, fp
 801a492:	44e6      	add	lr, ip
 801a494:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801a498:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a49c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a4a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a4a4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a4a8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a4ac:	ea4e 040b 	orr.w	r4, lr, fp
 801a4b0:	940a      	str	r4, [sp, #40]	; 0x28
 801a4b2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a4b4:	2cff      	cmp	r4, #255	; 0xff
 801a4b6:	d021      	beq.n	801a4fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a4b8:	9c07      	ldr	r4, [sp, #28]
 801a4ba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a4be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a4c0:	fb04 fc0c 	mul.w	ip, r4, ip
 801a4c4:	9c07      	ldr	r4, [sp, #28]
 801a4c6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a4ca:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801a4ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a4d0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a4d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a4d8:	fb04 fb0b 	mul.w	fp, r4, fp
 801a4dc:	44e6      	add	lr, ip
 801a4de:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801a4e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a4e6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a4ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a4ee:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a4f2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a4f6:	ea4e 040b 	orr.w	r4, lr, fp
 801a4fa:	9407      	str	r4, [sp, #28]
 801a4fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a4fe:	2cff      	cmp	r4, #255	; 0xff
 801a500:	d021      	beq.n	801a546 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a502:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a504:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a508:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a50a:	fb04 fc0c 	mul.w	ip, r4, ip
 801a50e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a510:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a514:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801a518:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a51a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a51e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a522:	fb04 fb0b 	mul.w	fp, r4, fp
 801a526:	44e6      	add	lr, ip
 801a528:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801a52c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a530:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a534:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a538:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a53c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a540:	ea4e 040b 	orr.w	r4, lr, fp
 801a544:	940b      	str	r4, [sp, #44]	; 0x2c
 801a546:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a548:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a54c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a550:	2bff      	cmp	r3, #255	; 0xff
 801a552:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a556:	9c07      	ldr	r4, [sp, #28]
 801a558:	fb09 fc0c 	mul.w	ip, r9, ip
 801a55c:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a560:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a564:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a566:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a56a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a56e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a570:	fb0a cc0e 	mla	ip, sl, lr, ip
 801a574:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a578:	fb09 f90e 	mul.w	r9, r9, lr
 801a57c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a580:	fb01 9202 	mla	r2, r1, r2, r9
 801a584:	9907      	ldr	r1, [sp, #28]
 801a586:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a58a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801a58e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a590:	fb00 220b 	mla	r2, r0, fp, r2
 801a594:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801a598:	fb0a 2a00 	mla	sl, sl, r0, r2
 801a59c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5a4:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a5a8:	fa5f f08c 	uxtb.w	r0, ip
 801a5ac:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801a5b0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a5b4:	f000 80a2 	beq.w	801a6fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801a5b8:	43db      	mvns	r3, r3
 801a5ba:	783a      	ldrb	r2, [r7, #0]
 801a5bc:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	fb02 fe03 	mul.w	lr, r2, r3
 801a5c6:	fb0a fa03 	mul.w	sl, sl, r3
 801a5ca:	f10e 0201 	add.w	r2, lr, #1
 801a5ce:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801a5d2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a5d6:	703a      	strb	r2, [r7, #0]
 801a5d8:	787a      	ldrb	r2, [r7, #1]
 801a5da:	fb02 f003 	mul.w	r0, r2, r3
 801a5de:	f10a 0301 	add.w	r3, sl, #1
 801a5e2:	1c42      	adds	r2, r0, #1
 801a5e4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801a5e8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a5ec:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a5f0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a5f4:	707a      	strb	r2, [r7, #1]
 801a5f6:	f887 c002 	strb.w	ip, [r7, #2]
 801a5fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a5fc:	3703      	adds	r7, #3
 801a5fe:	f108 38ff 	add.w	r8, r8, #4294967295
 801a602:	441d      	add	r5, r3
 801a604:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a606:	441e      	add	r6, r3
 801a608:	e6ab      	b.n	801a362 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a60a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a60c:	441d      	add	r5, r3
 801a60e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a610:	441e      	add	r6, r3
 801a612:	9b06      	ldr	r3, [sp, #24]
 801a614:	3b01      	subs	r3, #1
 801a616:	9306      	str	r3, [sp, #24]
 801a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a61a:	3303      	adds	r3, #3
 801a61c:	9309      	str	r3, [sp, #36]	; 0x24
 801a61e:	e680      	b.n	801a322 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a620:	d024      	beq.n	801a66c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 801a622:	9b06      	ldr	r3, [sp, #24]
 801a624:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801a626:	3b01      	subs	r3, #1
 801a628:	fb00 5003 	mla	r0, r0, r3, r5
 801a62c:	1400      	asrs	r0, r0, #16
 801a62e:	f53f ae95 	bmi.w	801a35c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a632:	3901      	subs	r1, #1
 801a634:	4288      	cmp	r0, r1
 801a636:	f6bf ae91 	bge.w	801a35c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a63a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801a63c:	fb01 6303 	mla	r3, r1, r3, r6
 801a640:	141b      	asrs	r3, r3, #16
 801a642:	f53f ae8b 	bmi.w	801a35c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a646:	3a01      	subs	r2, #1
 801a648:	4293      	cmp	r3, r2
 801a64a:	f6bf ae87 	bge.w	801a35c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a650:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a654:	1cdf      	adds	r7, r3, #3
 801a656:	f1bb 0f00 	cmp.w	fp, #0
 801a65a:	dc6e      	bgt.n	801a73a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801a65c:	9b06      	ldr	r3, [sp, #24]
 801a65e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a664:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a668:	4423      	add	r3, r4
 801a66a:	9309      	str	r3, [sp, #36]	; 0x24
 801a66c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a66e:	2b00      	cmp	r3, #0
 801a670:	f340 81b0 	ble.w	801a9d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801a674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a678:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a67a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a67e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a682:	eef0 6a48 	vmov.f32	s13, s16
 801a686:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a68a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a68e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a692:	ee16 5a90 	vmov	r5, s13
 801a696:	eef0 6a68 	vmov.f32	s13, s17
 801a69a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a69e:	ee16 6a90 	vmov	r6, s13
 801a6a2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a6a6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a6aa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a6ae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a6b2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a6b6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a6ba:	ee18 2a10 	vmov	r2, s16
 801a6be:	eeb0 8a47 	vmov.f32	s16, s14
 801a6c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a6c6:	ee18 2a90 	vmov	r2, s17
 801a6ca:	932d      	str	r3, [sp, #180]	; 0xb4
 801a6cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a6ce:	eef0 8a67 	vmov.f32	s17, s15
 801a6d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a6d6:	932e      	str	r3, [sp, #184]	; 0xb8
 801a6d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a6da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a6dc:	3b01      	subs	r3, #1
 801a6de:	9315      	str	r3, [sp, #84]	; 0x54
 801a6e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a6e2:	bf08      	it	eq
 801a6e4:	4613      	moveq	r3, r2
 801a6e6:	9306      	str	r3, [sp, #24]
 801a6e8:	e60d      	b.n	801a306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a6ea:	2800      	cmp	r0, #0
 801a6ec:	f43f ae7d 	beq.w	801a3ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a6f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801a6f4:	9307      	str	r3, [sp, #28]
 801a6f6:	0e1b      	lsrs	r3, r3, #24
 801a6f8:	930f      	str	r3, [sp, #60]	; 0x3c
 801a6fa:	e676      	b.n	801a3ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a6fc:	7038      	strb	r0, [r7, #0]
 801a6fe:	7079      	strb	r1, [r7, #1]
 801a700:	e779      	b.n	801a5f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801a702:	f112 0901 	adds.w	r9, r2, #1
 801a706:	f53f af78 	bmi.w	801a5fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a70a:	454b      	cmp	r3, r9
 801a70c:	f6ff af75 	blt.w	801a5fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a710:	f11c 0901 	adds.w	r9, ip, #1
 801a714:	f53f af71 	bmi.w	801a5fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a718:	45ce      	cmp	lr, r9
 801a71a:	f6ff af6e 	blt.w	801a5fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a71e:	b21b      	sxth	r3, r3
 801a720:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801a724:	fa0f f28e 	sxth.w	r2, lr
 801a728:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801a72c:	9200      	str	r2, [sp, #0]
 801a72e:	4639      	mov	r1, r7
 801a730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a732:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a734:	f7ff fc7c 	bl	801a030 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801a738:	e75f      	b.n	801a5fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a73a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a73c:	1429      	asrs	r1, r5, #16
 801a73e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a740:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801a744:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801a748:	1433      	asrs	r3, r6, #16
 801a74a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a74e:	fb0c 1303 	mla	r3, ip, r3, r1
 801a752:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a754:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a758:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a75c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a760:	2a00      	cmp	r2, #0
 801a762:	f000 8129 	beq.w	801a9b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801a766:	684c      	ldr	r4, [r1, #4]
 801a768:	940c      	str	r4, [sp, #48]	; 0x30
 801a76a:	0e24      	lsrs	r4, r4, #24
 801a76c:	9413      	str	r4, [sp, #76]	; 0x4c
 801a76e:	b198      	cbz	r0, 801a798 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801a770:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801a774:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a778:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801a77c:	f10c 0c04 	add.w	ip, ip, #4
 801a780:	eb01 080c 	add.w	r8, r1, ip
 801a784:	f851 100c 	ldr.w	r1, [r1, ip]
 801a788:	9108      	str	r1, [sp, #32]
 801a78a:	0e09      	lsrs	r1, r1, #24
 801a78c:	9110      	str	r1, [sp, #64]	; 0x40
 801a78e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a792:	910d      	str	r1, [sp, #52]	; 0x34
 801a794:	0e09      	lsrs	r1, r1, #24
 801a796:	9114      	str	r1, [sp, #80]	; 0x50
 801a798:	b292      	uxth	r2, r2
 801a79a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a79c:	b280      	uxth	r0, r0
 801a79e:	fb02 f900 	mul.w	r9, r2, r0
 801a7a2:	0112      	lsls	r2, r2, #4
 801a7a4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a7a8:	eba2 0809 	sub.w	r8, r2, r9
 801a7ac:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a7b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a7b2:	b280      	uxth	r0, r0
 801a7b4:	fa1f f888 	uxth.w	r8, r8
 801a7b8:	1a09      	subs	r1, r1, r0
 801a7ba:	fb08 f202 	mul.w	r2, r8, r2
 801a7be:	b289      	uxth	r1, r1
 801a7c0:	fb01 220e 	mla	r2, r1, lr, r2
 801a7c4:	fb00 2204 	mla	r2, r0, r4, r2
 801a7c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a7ca:	fb09 2204 	mla	r2, r9, r4, r2
 801a7ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a7d2:	2a00      	cmp	r2, #0
 801a7d4:	f000 80e8 	beq.w	801a9a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801a7d8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a7dc:	d01b      	beq.n	801a816 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 801a7de:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a7e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a7e6:	fb0e fa0a 	mul.w	sl, lr, sl
 801a7ea:	fb0e fe03 	mul.w	lr, lr, r3
 801a7ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a7f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a7f6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a7fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a7fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a802:	4453      	add	r3, sl
 801a804:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a808:	0a1b      	lsrs	r3, r3, #8
 801a80a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a80e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a812:	ea43 030c 	orr.w	r3, r3, ip
 801a816:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a818:	2cff      	cmp	r4, #255	; 0xff
 801a81a:	d021      	beq.n	801a860 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 801a81c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a81e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a822:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a824:	fb04 fc0c 	mul.w	ip, r4, ip
 801a828:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a82a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a82e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a832:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a834:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a838:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a83c:	fb04 fa0a 	mul.w	sl, r4, sl
 801a840:	44e6      	add	lr, ip
 801a842:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a846:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a84a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a84e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a852:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a856:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a85a:	ea4e 040a 	orr.w	r4, lr, sl
 801a85e:	940c      	str	r4, [sp, #48]	; 0x30
 801a860:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a862:	2cff      	cmp	r4, #255	; 0xff
 801a864:	d021      	beq.n	801a8aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 801a866:	9c08      	ldr	r4, [sp, #32]
 801a868:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a86c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a86e:	fb04 fc0c 	mul.w	ip, r4, ip
 801a872:	9c08      	ldr	r4, [sp, #32]
 801a874:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a878:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a87a:	fb04 fa0e 	mul.w	sl, r4, lr
 801a87e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a882:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a886:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a88a:	44e6      	add	lr, ip
 801a88c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a890:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a894:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a898:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a89c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a8a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a8a4:	ea4e 040a 	orr.w	r4, lr, sl
 801a8a8:	9408      	str	r4, [sp, #32]
 801a8aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a8ac:	2cff      	cmp	r4, #255	; 0xff
 801a8ae:	d021      	beq.n	801a8f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801a8b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a8b2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a8b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a8b8:	fb04 fc0c 	mul.w	ip, r4, ip
 801a8bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a8be:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a8c2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a8c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a8c8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a8cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a8d0:	fb04 fa0a 	mul.w	sl, r4, sl
 801a8d4:	44e6      	add	lr, ip
 801a8d6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a8da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a8de:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a8e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a8e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a8ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a8ee:	ea4e 040a 	orr.w	r4, lr, sl
 801a8f2:	940d      	str	r4, [sp, #52]	; 0x34
 801a8f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a8f6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a8fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a8fe:	2aff      	cmp	r2, #255	; 0xff
 801a900:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a904:	9c08      	ldr	r4, [sp, #32]
 801a906:	fb08 fc0c 	mul.w	ip, r8, ip
 801a90a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a90e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a912:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a914:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a918:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a91c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a91e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a922:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a926:	fb08 f80e 	mul.w	r8, r8, lr
 801a92a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a92e:	fb01 8303 	mla	r3, r1, r3, r8
 801a932:	9908      	ldr	r1, [sp, #32]
 801a934:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a938:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801a93c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a93e:	fb00 330a 	mla	r3, r0, sl, r3
 801a942:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801a946:	fb09 3e0e 	mla	lr, r9, lr, r3
 801a94a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a94e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a952:	ea4c 0c0e 	orr.w	ip, ip, lr
 801a956:	fa5f f08c 	uxtb.w	r0, ip
 801a95a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801a95e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a962:	d032      	beq.n	801a9ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 801a964:	43d2      	mvns	r2, r2
 801a966:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801a96a:	b2d2      	uxtb	r2, r2
 801a96c:	fb0e fe02 	mul.w	lr, lr, r2
 801a970:	f10e 0301 	add.w	r3, lr, #1
 801a974:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801a978:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a97c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801a980:	4350      	muls	r0, r2
 801a982:	f807 3c03 	strb.w	r3, [r7, #-3]
 801a986:	1c43      	adds	r3, r0, #1
 801a988:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a98c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a990:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801a994:	4353      	muls	r3, r2
 801a996:	f807 1c02 	strb.w	r1, [r7, #-2]
 801a99a:	1c5a      	adds	r2, r3, #1
 801a99c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a9a0:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801a9a4:	f807 cc01 	strb.w	ip, [r7, #-1]
 801a9a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a9aa:	3703      	adds	r7, #3
 801a9ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a9b0:	441d      	add	r5, r3
 801a9b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a9b4:	441e      	add	r6, r3
 801a9b6:	e64e      	b.n	801a656 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801a9b8:	2800      	cmp	r0, #0
 801a9ba:	f43f aeed 	beq.w	801a798 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801a9be:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801a9c2:	9108      	str	r1, [sp, #32]
 801a9c4:	0e09      	lsrs	r1, r1, #24
 801a9c6:	9110      	str	r1, [sp, #64]	; 0x40
 801a9c8:	e6e6      	b.n	801a798 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801a9ca:	f807 0c03 	strb.w	r0, [r7, #-3]
 801a9ce:	f807 1c02 	strb.w	r1, [r7, #-2]
 801a9d2:	e7e7      	b.n	801a9a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 801a9d4:	b019      	add	sp, #100	; 0x64
 801a9d6:	ecbd 8b08 	vpop	{d8-d11}
 801a9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a9e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801a9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9e4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801a9e8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801a9ec:	2800      	cmp	r0, #0
 801a9ee:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801a9f2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801a9f6:	fb0c 0e03 	mla	lr, ip, r3, r0
 801a9fa:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801a9fe:	db6b      	blt.n	801aad8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801aa00:	4580      	cmp	r8, r0
 801aa02:	dd69      	ble.n	801aad8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801aa04:	f1bc 0f00 	cmp.w	ip, #0
 801aa08:	db66      	blt.n	801aad8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801aa0a:	45e1      	cmp	r9, ip
 801aa0c:	dd64      	ble.n	801aad8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801aa0e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801aa12:	f01e 0f01 	tst.w	lr, #1
 801aa16:	5d16      	ldrb	r6, [r2, r4]
 801aa18:	bf0c      	ite	eq
 801aa1a:	f006 060f 	andeq.w	r6, r6, #15
 801aa1e:	1136      	asrne	r6, r6, #4
 801aa20:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801aa24:	b2f6      	uxtb	r6, r6
 801aa26:	f110 0a01 	adds.w	sl, r0, #1
 801aa2a:	d457      	bmi.n	801aadc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801aa2c:	45d0      	cmp	r8, sl
 801aa2e:	dd55      	ble.n	801aadc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801aa30:	f1bc 0f00 	cmp.w	ip, #0
 801aa34:	db52      	blt.n	801aadc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801aa36:	45e1      	cmp	r9, ip
 801aa38:	dd50      	ble.n	801aadc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801aa3a:	2f00      	cmp	r7, #0
 801aa3c:	f000 80ac 	beq.w	801ab98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801aa40:	f10e 0b01 	add.w	fp, lr, #1
 801aa44:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801aa48:	f01b 0f01 	tst.w	fp, #1
 801aa4c:	5d14      	ldrb	r4, [r2, r4]
 801aa4e:	bf0c      	ite	eq
 801aa50:	f004 040f 	andeq.w	r4, r4, #15
 801aa54:	1124      	asrne	r4, r4, #4
 801aa56:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801aa5a:	b2e4      	uxtb	r4, r4
 801aa5c:	2d00      	cmp	r5, #0
 801aa5e:	f000 8096 	beq.w	801ab8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801aa62:	2800      	cmp	r0, #0
 801aa64:	f10c 0c01 	add.w	ip, ip, #1
 801aa68:	db3c      	blt.n	801aae4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801aa6a:	4580      	cmp	r8, r0
 801aa6c:	dd3a      	ble.n	801aae4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801aa6e:	f1bc 0f00 	cmp.w	ip, #0
 801aa72:	db37      	blt.n	801aae4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801aa74:	45e1      	cmp	r9, ip
 801aa76:	dd35      	ble.n	801aae4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801aa78:	eb03 0b0e 	add.w	fp, r3, lr
 801aa7c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801aa80:	f01b 0f01 	tst.w	fp, #1
 801aa84:	5c10      	ldrb	r0, [r2, r0]
 801aa86:	bf0c      	ite	eq
 801aa88:	f000 000f 	andeq.w	r0, r0, #15
 801aa8c:	1100      	asrne	r0, r0, #4
 801aa8e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801aa92:	b2c0      	uxtb	r0, r0
 801aa94:	f1ba 0f00 	cmp.w	sl, #0
 801aa98:	db26      	blt.n	801aae8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801aa9a:	45d0      	cmp	r8, sl
 801aa9c:	dd24      	ble.n	801aae8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801aa9e:	f1bc 0f00 	cmp.w	ip, #0
 801aaa2:	db21      	blt.n	801aae8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801aaa4:	45e1      	cmp	r9, ip
 801aaa6:	dd1f      	ble.n	801aae8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801aaa8:	b307      	cbz	r7, 801aaec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801aaaa:	3301      	adds	r3, #1
 801aaac:	449e      	add	lr, r3
 801aaae:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801aab2:	f01e 0f01 	tst.w	lr, #1
 801aab6:	5cd3      	ldrb	r3, [r2, r3]
 801aab8:	bf0c      	ite	eq
 801aaba:	f003 030f 	andeq.w	r3, r3, #15
 801aabe:	111b      	asrne	r3, r3, #4
 801aac0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801aac4:	b2db      	uxtb	r3, r3
 801aac6:	2f0f      	cmp	r7, #15
 801aac8:	d911      	bls.n	801aaee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801aaca:	4b35      	ldr	r3, [pc, #212]	; (801aba0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801aacc:	f240 1157 	movw	r1, #343	; 0x157
 801aad0:	4a34      	ldr	r2, [pc, #208]	; (801aba4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801aad2:	4835      	ldr	r0, [pc, #212]	; (801aba8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801aad4:	f000 ff76 	bl	801b9c4 <__assert_func>
 801aad8:	2600      	movs	r6, #0
 801aada:	e7a4      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801aadc:	2400      	movs	r4, #0
 801aade:	e7bd      	b.n	801aa5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801aae0:	463c      	mov	r4, r7
 801aae2:	e7be      	b.n	801aa62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801aae4:	2000      	movs	r0, #0
 801aae6:	e7d5      	b.n	801aa94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801aae8:	2300      	movs	r3, #0
 801aaea:	e7ec      	b.n	801aac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801aaec:	463b      	mov	r3, r7
 801aaee:	2d0f      	cmp	r5, #15
 801aaf0:	d8eb      	bhi.n	801aaca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801aaf2:	b2bf      	uxth	r7, r7
 801aaf4:	b2ad      	uxth	r5, r5
 801aaf6:	fb07 f205 	mul.w	r2, r7, r5
 801aafa:	013f      	lsls	r7, r7, #4
 801aafc:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801ab00:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801ab04:	1abf      	subs	r7, r7, r2
 801ab06:	b2ad      	uxth	r5, r5
 801ab08:	b2bf      	uxth	r7, r7
 801ab0a:	ebac 0c05 	sub.w	ip, ip, r5
 801ab0e:	437c      	muls	r4, r7
 801ab10:	fa1f fc8c 	uxth.w	ip, ip
 801ab14:	fb06 440c 	mla	r4, r6, ip, r4
 801ab18:	fb05 4400 	mla	r4, r5, r0, r4
 801ab1c:	fb02 4203 	mla	r2, r2, r3, r4
 801ab20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ab24:	b38a      	cbz	r2, 801ab8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801ab26:	4b21      	ldr	r3, [pc, #132]	; (801abac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801ab28:	681c      	ldr	r4, [r3, #0]
 801ab2a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801ab2e:	b2e5      	uxtb	r5, r4
 801ab30:	4353      	muls	r3, r2
 801ab32:	1c5a      	adds	r2, r3, #1
 801ab34:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ab38:	1212      	asrs	r2, r2, #8
 801ab3a:	b290      	uxth	r0, r2
 801ab3c:	43d2      	mvns	r2, r2
 801ab3e:	fb15 f500 	smulbb	r5, r5, r0
 801ab42:	b2d3      	uxtb	r3, r2
 801ab44:	780a      	ldrb	r2, [r1, #0]
 801ab46:	fb02 5203 	mla	r2, r2, r3, r5
 801ab4a:	b292      	uxth	r2, r2
 801ab4c:	1c55      	adds	r5, r2, #1
 801ab4e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801ab52:	784d      	ldrb	r5, [r1, #1]
 801ab54:	fb15 f503 	smulbb	r5, r5, r3
 801ab58:	1212      	asrs	r2, r2, #8
 801ab5a:	700a      	strb	r2, [r1, #0]
 801ab5c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801ab60:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801ab64:	fb02 5200 	mla	r2, r2, r0, r5
 801ab68:	b292      	uxth	r2, r2
 801ab6a:	1c55      	adds	r5, r2, #1
 801ab6c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801ab70:	1212      	asrs	r2, r2, #8
 801ab72:	704a      	strb	r2, [r1, #1]
 801ab74:	788a      	ldrb	r2, [r1, #2]
 801ab76:	fb12 f303 	smulbb	r3, r2, r3
 801ab7a:	fb04 3300 	mla	r3, r4, r0, r3
 801ab7e:	b29b      	uxth	r3, r3
 801ab80:	1c5a      	adds	r2, r3, #1
 801ab82:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ab86:	121b      	asrs	r3, r3, #8
 801ab88:	708b      	strb	r3, [r1, #2]
 801ab8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab8e:	2f0f      	cmp	r7, #15
 801ab90:	d89b      	bhi.n	801aaca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801ab92:	462b      	mov	r3, r5
 801ab94:	4628      	mov	r0, r5
 801ab96:	e7ac      	b.n	801aaf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801ab98:	2d00      	cmp	r5, #0
 801ab9a:	d1a1      	bne.n	801aae0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801ab9c:	462c      	mov	r4, r5
 801ab9e:	e7f8      	b.n	801ab92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801aba0:	0801fab5 	.word	0x0801fab5
 801aba4:	0802001f 	.word	0x0802001f
 801aba8:	0801fb7e 	.word	0x0801fb7e
 801abac:	2000df74 	.word	0x2000df74

0801abb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abb4:	ed2d 8b08 	vpush	{d8-d11}
 801abb8:	b097      	sub	sp, #92	; 0x5c
 801abba:	eeb0 aa40 	vmov.f32	s20, s0
 801abbe:	eef0 9a60 	vmov.f32	s19, s1
 801abc2:	9214      	str	r2, [sp, #80]	; 0x50
 801abc4:	eeb0 9a41 	vmov.f32	s18, s2
 801abc8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801abca:	eeb0 8a62 	vmov.f32	s16, s5
 801abce:	9309      	str	r3, [sp, #36]	; 0x24
 801abd0:	eef0 8a43 	vmov.f32	s17, s6
 801abd4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801abd8:	eef0 ba44 	vmov.f32	s23, s8
 801abdc:	9015      	str	r0, [sp, #84]	; 0x54
 801abde:	eeb0 ba64 	vmov.f32	s22, s9
 801abe2:	6850      	ldr	r0, [r2, #4]
 801abe4:	eef0 aa45 	vmov.f32	s21, s10
 801abe8:	910c      	str	r1, [sp, #48]	; 0x30
 801abea:	930e      	str	r3, [sp, #56]	; 0x38
 801abec:	6812      	ldr	r2, [r2, #0]
 801abee:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801abf2:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801abf6:	fb00 1303 	mla	r3, r0, r3, r1
 801abfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abfe:	eb02 0a03 	add.w	sl, r2, r3
 801ac02:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ac04:	689b      	ldr	r3, [r3, #8]
 801ac06:	3301      	adds	r3, #1
 801ac08:	f023 0301 	bic.w	r3, r3, #1
 801ac0c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ac0e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ac10:	681f      	ldr	r7, [r3, #0]
 801ac12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	dc03      	bgt.n	801ac20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ac18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	f340 8247 	ble.w	801b0ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801ac20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ac22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ac26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ac2a:	1e48      	subs	r0, r1, #1
 801ac2c:	f102 3cff 	add.w	ip, r2, #4294967295
 801ac30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	f340 80e5 	ble.w	801ae02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ac38:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801ac3c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ac40:	d406      	bmi.n	801ac50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ac42:	4586      	cmp	lr, r0
 801ac44:	da04      	bge.n	801ac50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	db02      	blt.n	801ac50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ac4a:	4563      	cmp	r3, ip
 801ac4c:	f2c0 80da 	blt.w	801ae04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ac50:	f11e 0e01 	adds.w	lr, lr, #1
 801ac54:	f100 80cb 	bmi.w	801adee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801ac58:	4571      	cmp	r1, lr
 801ac5a:	f2c0 80c8 	blt.w	801adee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801ac5e:	3301      	adds	r3, #1
 801ac60:	f100 80c5 	bmi.w	801adee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801ac64:	429a      	cmp	r2, r3
 801ac66:	f2c0 80c2 	blt.w	801adee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801ac6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac6c:	46d0      	mov	r8, sl
 801ac6e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801ac72:	930d      	str	r3, [sp, #52]	; 0x34
 801ac74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	f340 80e3 	ble.w	801ae42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801ac7c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ac7e:	1430      	asrs	r0, r6, #16
 801ac80:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ac84:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ac88:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801ac8c:	142b      	asrs	r3, r5, #16
 801ac8e:	f100 812e 	bmi.w	801aeee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ac92:	f10c 3bff 	add.w	fp, ip, #4294967295
 801ac96:	455b      	cmp	r3, fp
 801ac98:	f280 8129 	bge.w	801aeee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ac9c:	2800      	cmp	r0, #0
 801ac9e:	f2c0 8126 	blt.w	801aeee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801aca2:	f10e 3bff 	add.w	fp, lr, #4294967295
 801aca6:	4558      	cmp	r0, fp
 801aca8:	f280 8121 	bge.w	801aeee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801acac:	fb00 3309 	mla	r3, r0, r9, r3
 801acb0:	0858      	lsrs	r0, r3, #1
 801acb2:	07dc      	lsls	r4, r3, #31
 801acb4:	f817 c000 	ldrb.w	ip, [r7, r0]
 801acb8:	bf54      	ite	pl
 801acba:	f00c 0c0f 	andpl.w	ip, ip, #15
 801acbe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801acc2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801acc6:	fa5f fc8c 	uxtb.w	ip, ip
 801acca:	2a00      	cmp	r2, #0
 801accc:	f000 80fe 	beq.w	801aecc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801acd0:	1c58      	adds	r0, r3, #1
 801acd2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801acd6:	07c0      	lsls	r0, r0, #31
 801acd8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801acdc:	bf54      	ite	pl
 801acde:	f00e 0e0f 	andpl.w	lr, lr, #15
 801ace2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801ace6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801acea:	fa5f f08e 	uxtb.w	r0, lr
 801acee:	9010      	str	r0, [sp, #64]	; 0x40
 801acf0:	b1d9      	cbz	r1, 801ad2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801acf2:	444b      	add	r3, r9
 801acf4:	0858      	lsrs	r0, r3, #1
 801acf6:	07dc      	lsls	r4, r3, #31
 801acf8:	f103 0301 	add.w	r3, r3, #1
 801acfc:	5c38      	ldrb	r0, [r7, r0]
 801acfe:	bf54      	ite	pl
 801ad00:	f000 000f 	andpl.w	r0, r0, #15
 801ad04:	1100      	asrmi	r0, r0, #4
 801ad06:	07dc      	lsls	r4, r3, #31
 801ad08:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ad0c:	b2c0      	uxtb	r0, r0
 801ad0e:	900a      	str	r0, [sp, #40]	; 0x28
 801ad10:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801ad14:	f817 e000 	ldrb.w	lr, [r7, r0]
 801ad18:	bf54      	ite	pl
 801ad1a:	f00e 030f 	andpl.w	r3, lr, #15
 801ad1e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801ad22:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ad26:	b2db      	uxtb	r3, r3
 801ad28:	9311      	str	r3, [sp, #68]	; 0x44
 801ad2a:	b292      	uxth	r2, r2
 801ad2c:	b289      	uxth	r1, r1
 801ad2e:	0113      	lsls	r3, r2, #4
 801ad30:	fb02 f001 	mul.w	r0, r2, r1
 801ad34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad36:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ad3a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801ad3e:	1a1b      	subs	r3, r3, r0
 801ad40:	b289      	uxth	r1, r1
 801ad42:	b29b      	uxth	r3, r3
 801ad44:	ebae 0e01 	sub.w	lr, lr, r1
 801ad48:	4353      	muls	r3, r2
 801ad4a:	fa1f fe8e 	uxth.w	lr, lr
 801ad4e:	fb0c 320e 	mla	r2, ip, lr, r3
 801ad52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad54:	fb01 2203 	mla	r2, r1, r3, r2
 801ad58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ad5a:	fb00 2203 	mla	r2, r0, r3, r2
 801ad5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ad62:	2a00      	cmp	r2, #0
 801ad64:	d039      	beq.n	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801ad66:	4bc7      	ldr	r3, [pc, #796]	; (801b084 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801ad68:	6819      	ldr	r1, [r3, #0]
 801ad6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad6c:	fa5f fc81 	uxtb.w	ip, r1
 801ad70:	435a      	muls	r2, r3
 801ad72:	1c53      	adds	r3, r2, #1
 801ad74:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ad78:	1212      	asrs	r2, r2, #8
 801ad7a:	b290      	uxth	r0, r2
 801ad7c:	43d2      	mvns	r2, r2
 801ad7e:	fb1c fc00 	smulbb	ip, ip, r0
 801ad82:	b2d3      	uxtb	r3, r2
 801ad84:	f898 2000 	ldrb.w	r2, [r8]
 801ad88:	fb02 c203 	mla	r2, r2, r3, ip
 801ad8c:	b292      	uxth	r2, r2
 801ad8e:	f102 0c01 	add.w	ip, r2, #1
 801ad92:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ad96:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ad9a:	fb1c fc03 	smulbb	ip, ip, r3
 801ad9e:	1212      	asrs	r2, r2, #8
 801ada0:	f888 2000 	strb.w	r2, [r8]
 801ada4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801ada8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801adac:	fb02 c200 	mla	r2, r2, r0, ip
 801adb0:	b292      	uxth	r2, r2
 801adb2:	f102 0c01 	add.w	ip, r2, #1
 801adb6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801adba:	1212      	asrs	r2, r2, #8
 801adbc:	f888 2001 	strb.w	r2, [r8, #1]
 801adc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801adc4:	fb12 f303 	smulbb	r3, r2, r3
 801adc8:	fb01 3300 	mla	r3, r1, r0, r3
 801adcc:	b29b      	uxth	r3, r3
 801adce:	1c5a      	adds	r2, r3, #1
 801add0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801add4:	121b      	asrs	r3, r3, #8
 801add6:	f888 3002 	strb.w	r3, [r8, #2]
 801adda:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801addc:	f108 0803 	add.w	r8, r8, #3
 801ade0:	441d      	add	r5, r3
 801ade2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ade4:	441e      	add	r6, r3
 801ade6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ade8:	3b01      	subs	r3, #1
 801adea:	930d      	str	r3, [sp, #52]	; 0x34
 801adec:	e742      	b.n	801ac74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801adee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801adf0:	f10a 0a03 	add.w	sl, sl, #3
 801adf4:	441d      	add	r5, r3
 801adf6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801adf8:	441e      	add	r6, r3
 801adfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adfc:	3b01      	subs	r3, #1
 801adfe:	9309      	str	r3, [sp, #36]	; 0x24
 801ae00:	e716      	b.n	801ac30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ae02:	d024      	beq.n	801ae4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ae04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae06:	982b      	ldr	r0, [sp, #172]	; 0xac
 801ae08:	3b01      	subs	r3, #1
 801ae0a:	fb00 5003 	mla	r0, r0, r3, r5
 801ae0e:	1400      	asrs	r0, r0, #16
 801ae10:	f53f af2b 	bmi.w	801ac6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801ae14:	3901      	subs	r1, #1
 801ae16:	4288      	cmp	r0, r1
 801ae18:	f6bf af27 	bge.w	801ac6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801ae1c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ae1e:	fb01 6303 	mla	r3, r1, r3, r6
 801ae22:	141b      	asrs	r3, r3, #16
 801ae24:	f53f af21 	bmi.w	801ac6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801ae28:	3a01      	subs	r2, #1
 801ae2a:	4293      	cmp	r3, r2
 801ae2c:	f6bf af1d 	bge.w	801ac6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801ae30:	f10a 0e03 	add.w	lr, sl, #3
 801ae34:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801ae38:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801ae3c:	f1b8 0f00 	cmp.w	r8, #0
 801ae40:	dc76      	bgt.n	801af30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801ae42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae44:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ae48:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ae4c:	44a2      	add	sl, r4
 801ae4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	f340 812c 	ble.w	801b0ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801ae56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ae5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae5c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ae60:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ae64:	eef0 6a48 	vmov.f32	s13, s16
 801ae68:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ae6c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ae70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ae74:	ee16 5a90 	vmov	r5, s13
 801ae78:	eef0 6a68 	vmov.f32	s13, s17
 801ae7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ae80:	ee16 6a90 	vmov	r6, s13
 801ae84:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ae88:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ae8c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ae90:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ae94:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ae98:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ae9c:	ee18 2a10 	vmov	r2, s16
 801aea0:	eeb0 8a47 	vmov.f32	s16, s14
 801aea4:	fb92 f3f3 	sdiv	r3, r2, r3
 801aea8:	ee18 2a90 	vmov	r2, s17
 801aeac:	932b      	str	r3, [sp, #172]	; 0xac
 801aeae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aeb0:	eef0 8a67 	vmov.f32	s17, s15
 801aeb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801aeb8:	932c      	str	r3, [sp, #176]	; 0xb0
 801aeba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aebc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aebe:	3b01      	subs	r3, #1
 801aec0:	930c      	str	r3, [sp, #48]	; 0x30
 801aec2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aec4:	bf08      	it	eq
 801aec6:	4613      	moveq	r3, r2
 801aec8:	9309      	str	r3, [sp, #36]	; 0x24
 801aeca:	e6a2      	b.n	801ac12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801aecc:	2900      	cmp	r1, #0
 801aece:	f43f af2c 	beq.w	801ad2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801aed2:	eb09 0003 	add.w	r0, r9, r3
 801aed6:	0843      	lsrs	r3, r0, #1
 801aed8:	07c0      	lsls	r0, r0, #31
 801aeda:	5cfb      	ldrb	r3, [r7, r3]
 801aedc:	bf54      	ite	pl
 801aede:	f003 030f 	andpl.w	r3, r3, #15
 801aee2:	111b      	asrmi	r3, r3, #4
 801aee4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801aee8:	b2db      	uxtb	r3, r3
 801aeea:	930a      	str	r3, [sp, #40]	; 0x28
 801aeec:	e71d      	b.n	801ad2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801aeee:	f113 0b01 	adds.w	fp, r3, #1
 801aef2:	f53f af72 	bmi.w	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801aef6:	45dc      	cmp	ip, fp
 801aef8:	f6ff af6f 	blt.w	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801aefc:	f110 0b01 	adds.w	fp, r0, #1
 801af00:	f53f af6b 	bmi.w	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801af04:	45de      	cmp	lr, fp
 801af06:	f6ff af68 	blt.w	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801af0a:	9302      	str	r3, [sp, #8]
 801af0c:	fa0f f38e 	sxth.w	r3, lr
 801af10:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801af12:	9301      	str	r3, [sp, #4]
 801af14:	fa0f f38c 	sxth.w	r3, ip
 801af18:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801af1c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801af20:	9300      	str	r3, [sp, #0]
 801af22:	463a      	mov	r2, r7
 801af24:	464b      	mov	r3, r9
 801af26:	4641      	mov	r1, r8
 801af28:	9815      	ldr	r0, [sp, #84]	; 0x54
 801af2a:	f7ff fd59 	bl	801a9e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801af2e:	e754      	b.n	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801af30:	142a      	asrs	r2, r5, #16
 801af32:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801af36:	1433      	asrs	r3, r6, #16
 801af38:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801af3c:	fb09 2303 	mla	r3, r9, r3, r2
 801af40:	085a      	lsrs	r2, r3, #1
 801af42:	07dc      	lsls	r4, r3, #31
 801af44:	5cba      	ldrb	r2, [r7, r2]
 801af46:	bf54      	ite	pl
 801af48:	f002 020f 	andpl.w	r2, r2, #15
 801af4c:	1112      	asrmi	r2, r2, #4
 801af4e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801af52:	b2d2      	uxtb	r2, r2
 801af54:	2900      	cmp	r1, #0
 801af56:	f000 8097 	beq.w	801b088 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801af5a:	f103 0b01 	add.w	fp, r3, #1
 801af5e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801af62:	f01b 0f01 	tst.w	fp, #1
 801af66:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801af6a:	bf0c      	ite	eq
 801af6c:	f00c 0c0f 	andeq.w	ip, ip, #15
 801af70:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801af74:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801af78:	fa5f f48c 	uxtb.w	r4, ip
 801af7c:	9412      	str	r4, [sp, #72]	; 0x48
 801af7e:	b300      	cbz	r0, 801afc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801af80:	444b      	add	r3, r9
 801af82:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801af86:	07dc      	lsls	r4, r3, #31
 801af88:	f103 0301 	add.w	r3, r3, #1
 801af8c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801af90:	bf54      	ite	pl
 801af92:	f00c 0c0f 	andpl.w	ip, ip, #15
 801af96:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801af9a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801af9e:	fa5f f48c 	uxtb.w	r4, ip
 801afa2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801afa6:	940b      	str	r4, [sp, #44]	; 0x2c
 801afa8:	07dc      	lsls	r4, r3, #31
 801afaa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801afae:	bf54      	ite	pl
 801afb0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801afb4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801afb8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801afbc:	fa5f f38c 	uxtb.w	r3, ip
 801afc0:	9313      	str	r3, [sp, #76]	; 0x4c
 801afc2:	b289      	uxth	r1, r1
 801afc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801afc6:	b280      	uxth	r0, r0
 801afc8:	fb01 f300 	mul.w	r3, r1, r0
 801afcc:	0109      	lsls	r1, r1, #4
 801afce:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801afd2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801afd6:	1ac9      	subs	r1, r1, r3
 801afd8:	b280      	uxth	r0, r0
 801afda:	b289      	uxth	r1, r1
 801afdc:	ebac 0c00 	sub.w	ip, ip, r0
 801afe0:	4361      	muls	r1, r4
 801afe2:	fa1f fc8c 	uxth.w	ip, ip
 801afe6:	fb02 120c 	mla	r2, r2, ip, r1
 801afea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801afec:	fb00 2001 	mla	r0, r0, r1, r2
 801aff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aff2:	fb03 0302 	mla	r3, r3, r2, r0
 801aff6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801affa:	2b00      	cmp	r3, #0
 801affc:	d039      	beq.n	801b072 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801affe:	4a21      	ldr	r2, [pc, #132]	; (801b084 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801b000:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b004:	6810      	ldr	r0, [r2, #0]
 801b006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b008:	fa5f fc80 	uxtb.w	ip, r0
 801b00c:	4353      	muls	r3, r2
 801b00e:	1c5a      	adds	r2, r3, #1
 801b010:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b014:	121b      	asrs	r3, r3, #8
 801b016:	b29a      	uxth	r2, r3
 801b018:	43db      	mvns	r3, r3
 801b01a:	fb1c fc02 	smulbb	ip, ip, r2
 801b01e:	b2db      	uxtb	r3, r3
 801b020:	fb01 c103 	mla	r1, r1, r3, ip
 801b024:	b289      	uxth	r1, r1
 801b026:	f101 0c01 	add.w	ip, r1, #1
 801b02a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b02e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801b032:	fb1c fc03 	smulbb	ip, ip, r3
 801b036:	1209      	asrs	r1, r1, #8
 801b038:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b03c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801b040:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801b044:	fb01 c102 	mla	r1, r1, r2, ip
 801b048:	b289      	uxth	r1, r1
 801b04a:	f101 0c01 	add.w	ip, r1, #1
 801b04e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b052:	1209      	asrs	r1, r1, #8
 801b054:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b058:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b05c:	fb11 f303 	smulbb	r3, r1, r3
 801b060:	fb00 3002 	mla	r0, r0, r2, r3
 801b064:	b280      	uxth	r0, r0
 801b066:	1c42      	adds	r2, r0, #1
 801b068:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b06c:	1200      	asrs	r0, r0, #8
 801b06e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801b072:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b074:	f10e 0e03 	add.w	lr, lr, #3
 801b078:	f108 38ff 	add.w	r8, r8, #4294967295
 801b07c:	441d      	add	r5, r3
 801b07e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b080:	441e      	add	r6, r3
 801b082:	e6db      	b.n	801ae3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b084:	2000df74 	.word	0x2000df74
 801b088:	2800      	cmp	r0, #0
 801b08a:	d09a      	beq.n	801afc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b08c:	444b      	add	r3, r9
 801b08e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b092:	07db      	lsls	r3, r3, #31
 801b094:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b098:	bf54      	ite	pl
 801b09a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b09e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b0a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b0a6:	fa5f f38c 	uxtb.w	r3, ip
 801b0aa:	930b      	str	r3, [sp, #44]	; 0x2c
 801b0ac:	e789      	b.n	801afc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b0ae:	b017      	add	sp, #92	; 0x5c
 801b0b0:	ecbd 8b08 	vpop	{d8-d11}
 801b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801b0b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0bc:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801b0c0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b0c4:	2800      	cmp	r0, #0
 801b0c6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801b0ca:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b0ce:	fb0c 0e03 	mla	lr, ip, r3, r0
 801b0d2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801b0d6:	db6b      	blt.n	801b1b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b0d8:	4580      	cmp	r8, r0
 801b0da:	dd69      	ble.n	801b1b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b0dc:	f1bc 0f00 	cmp.w	ip, #0
 801b0e0:	db66      	blt.n	801b1b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b0e2:	45e1      	cmp	r9, ip
 801b0e4:	dd64      	ble.n	801b1b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b0e6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801b0ea:	f01e 0f01 	tst.w	lr, #1
 801b0ee:	5d16      	ldrb	r6, [r2, r4]
 801b0f0:	bf0c      	ite	eq
 801b0f2:	f006 060f 	andeq.w	r6, r6, #15
 801b0f6:	1136      	asrne	r6, r6, #4
 801b0f8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b0fc:	b2f6      	uxtb	r6, r6
 801b0fe:	f110 0a01 	adds.w	sl, r0, #1
 801b102:	d457      	bmi.n	801b1b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b104:	45d0      	cmp	r8, sl
 801b106:	dd55      	ble.n	801b1b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b108:	f1bc 0f00 	cmp.w	ip, #0
 801b10c:	db52      	blt.n	801b1b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b10e:	45e1      	cmp	r9, ip
 801b110:	dd50      	ble.n	801b1b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b112:	2f00      	cmp	r7, #0
 801b114:	f000 80a5 	beq.w	801b262 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801b118:	f10e 0b01 	add.w	fp, lr, #1
 801b11c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b120:	f01b 0f01 	tst.w	fp, #1
 801b124:	5d14      	ldrb	r4, [r2, r4]
 801b126:	bf0c      	ite	eq
 801b128:	f004 040f 	andeq.w	r4, r4, #15
 801b12c:	1124      	asrne	r4, r4, #4
 801b12e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b132:	b2e4      	uxtb	r4, r4
 801b134:	2d00      	cmp	r5, #0
 801b136:	f000 808f 	beq.w	801b258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801b13a:	2800      	cmp	r0, #0
 801b13c:	f10c 0c01 	add.w	ip, ip, #1
 801b140:	db3c      	blt.n	801b1bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b142:	4580      	cmp	r8, r0
 801b144:	dd3a      	ble.n	801b1bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b146:	f1bc 0f00 	cmp.w	ip, #0
 801b14a:	db37      	blt.n	801b1bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b14c:	45e1      	cmp	r9, ip
 801b14e:	dd35      	ble.n	801b1bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b150:	eb03 0b0e 	add.w	fp, r3, lr
 801b154:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801b158:	f01b 0f01 	tst.w	fp, #1
 801b15c:	5c10      	ldrb	r0, [r2, r0]
 801b15e:	bf0c      	ite	eq
 801b160:	f000 000f 	andeq.w	r0, r0, #15
 801b164:	1100      	asrne	r0, r0, #4
 801b166:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b16a:	b2c0      	uxtb	r0, r0
 801b16c:	f1ba 0f00 	cmp.w	sl, #0
 801b170:	db26      	blt.n	801b1c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b172:	45d0      	cmp	r8, sl
 801b174:	dd24      	ble.n	801b1c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b176:	f1bc 0f00 	cmp.w	ip, #0
 801b17a:	db21      	blt.n	801b1c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b17c:	45e1      	cmp	r9, ip
 801b17e:	dd1f      	ble.n	801b1c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b180:	b307      	cbz	r7, 801b1c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801b182:	3301      	adds	r3, #1
 801b184:	449e      	add	lr, r3
 801b186:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b18a:	f01e 0f01 	tst.w	lr, #1
 801b18e:	5cd3      	ldrb	r3, [r2, r3]
 801b190:	bf0c      	ite	eq
 801b192:	f003 030f 	andeq.w	r3, r3, #15
 801b196:	111b      	asrne	r3, r3, #4
 801b198:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b19c:	b2db      	uxtb	r3, r3
 801b19e:	2f0f      	cmp	r7, #15
 801b1a0:	d911      	bls.n	801b1c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801b1a2:	4b32      	ldr	r3, [pc, #200]	; (801b26c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801b1a4:	f240 1157 	movw	r1, #343	; 0x157
 801b1a8:	4a31      	ldr	r2, [pc, #196]	; (801b270 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801b1aa:	4832      	ldr	r0, [pc, #200]	; (801b274 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801b1ac:	f000 fc0a 	bl	801b9c4 <__assert_func>
 801b1b0:	2600      	movs	r6, #0
 801b1b2:	e7a4      	b.n	801b0fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801b1b4:	2400      	movs	r4, #0
 801b1b6:	e7bd      	b.n	801b134 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801b1b8:	463c      	mov	r4, r7
 801b1ba:	e7be      	b.n	801b13a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801b1bc:	2000      	movs	r0, #0
 801b1be:	e7d5      	b.n	801b16c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	e7ec      	b.n	801b19e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801b1c4:	463b      	mov	r3, r7
 801b1c6:	2d0f      	cmp	r5, #15
 801b1c8:	d8eb      	bhi.n	801b1a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b1ca:	b2bf      	uxth	r7, r7
 801b1cc:	b2ad      	uxth	r5, r5
 801b1ce:	fb07 f205 	mul.w	r2, r7, r5
 801b1d2:	013f      	lsls	r7, r7, #4
 801b1d4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801b1d8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801b1dc:	1abf      	subs	r7, r7, r2
 801b1de:	b2ad      	uxth	r5, r5
 801b1e0:	b2bf      	uxth	r7, r7
 801b1e2:	ebac 0c05 	sub.w	ip, ip, r5
 801b1e6:	437c      	muls	r4, r7
 801b1e8:	fa1f fc8c 	uxth.w	ip, ip
 801b1ec:	fb06 440c 	mla	r4, r6, ip, r4
 801b1f0:	fb05 4400 	mla	r4, r5, r0, r4
 801b1f4:	fb02 4303 	mla	r3, r2, r3, r4
 801b1f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b1fc:	b353      	cbz	r3, 801b254 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801b1fe:	4a1e      	ldr	r2, [pc, #120]	; (801b278 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801b200:	7808      	ldrb	r0, [r1, #0]
 801b202:	6814      	ldr	r4, [r2, #0]
 801b204:	b29a      	uxth	r2, r3
 801b206:	43db      	mvns	r3, r3
 801b208:	b2e5      	uxtb	r5, r4
 801b20a:	b2db      	uxtb	r3, r3
 801b20c:	fb15 f502 	smulbb	r5, r5, r2
 801b210:	fb00 5003 	mla	r0, r0, r3, r5
 801b214:	b280      	uxth	r0, r0
 801b216:	1c45      	adds	r5, r0, #1
 801b218:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b21c:	784d      	ldrb	r5, [r1, #1]
 801b21e:	fb15 f503 	smulbb	r5, r5, r3
 801b222:	1200      	asrs	r0, r0, #8
 801b224:	7008      	strb	r0, [r1, #0]
 801b226:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801b22a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b22e:	fb00 5002 	mla	r0, r0, r2, r5
 801b232:	b280      	uxth	r0, r0
 801b234:	1c45      	adds	r5, r0, #1
 801b236:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b23a:	1200      	asrs	r0, r0, #8
 801b23c:	7048      	strb	r0, [r1, #1]
 801b23e:	7888      	ldrb	r0, [r1, #2]
 801b240:	fb10 f303 	smulbb	r3, r0, r3
 801b244:	fb04 3202 	mla	r2, r4, r2, r3
 801b248:	b292      	uxth	r2, r2
 801b24a:	1c53      	adds	r3, r2, #1
 801b24c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b250:	1212      	asrs	r2, r2, #8
 801b252:	708a      	strb	r2, [r1, #2]
 801b254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b258:	2f0f      	cmp	r7, #15
 801b25a:	d8a2      	bhi.n	801b1a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b25c:	462b      	mov	r3, r5
 801b25e:	4628      	mov	r0, r5
 801b260:	e7b3      	b.n	801b1ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801b262:	2d00      	cmp	r5, #0
 801b264:	d1a8      	bne.n	801b1b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801b266:	462c      	mov	r4, r5
 801b268:	e7f8      	b.n	801b25c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801b26a:	bf00      	nop
 801b26c:	0801fab5 	.word	0x0801fab5
 801b270:	0802001f 	.word	0x0802001f
 801b274:	0801fb7e 	.word	0x0801fb7e
 801b278:	2000df74 	.word	0x2000df74

0801b27c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b280:	ed2d 8b08 	vpush	{d8-d11}
 801b284:	b093      	sub	sp, #76	; 0x4c
 801b286:	461c      	mov	r4, r3
 801b288:	eeb0 aa40 	vmov.f32	s20, s0
 801b28c:	920c      	str	r2, [sp, #48]	; 0x30
 801b28e:	eef0 9a60 	vmov.f32	s19, s1
 801b292:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b294:	eeb0 9a41 	vmov.f32	s18, s2
 801b298:	9011      	str	r0, [sp, #68]	; 0x44
 801b29a:	eeb0 8a62 	vmov.f32	s16, s5
 801b29e:	6850      	ldr	r0, [r2, #4]
 801b2a0:	eef0 8a43 	vmov.f32	s17, s6
 801b2a4:	9107      	str	r1, [sp, #28]
 801b2a6:	eef0 ba44 	vmov.f32	s23, s8
 801b2aa:	6812      	ldr	r2, [r2, #0]
 801b2ac:	eeb0 ba64 	vmov.f32	s22, s9
 801b2b0:	eef0 aa45 	vmov.f32	s21, s10
 801b2b4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801b2b8:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801b2bc:	fb00 1303 	mla	r3, r0, r3, r1
 801b2c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2c4:	eb02 0b03 	add.w	fp, r2, r3
 801b2c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b2ca:	689b      	ldr	r3, [r3, #8]
 801b2cc:	3301      	adds	r3, #1
 801b2ce:	f023 0301 	bic.w	r3, r3, #1
 801b2d2:	9309      	str	r3, [sp, #36]	; 0x24
 801b2d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b2d6:	f8d3 8000 	ldr.w	r8, [r3]
 801b2da:	9b07      	ldr	r3, [sp, #28]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	dc03      	bgt.n	801b2e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	f340 822b 	ble.w	801b73e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801b2e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b2ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b2ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b2f2:	1e48      	subs	r0, r1, #1
 801b2f4:	1e57      	subs	r7, r2, #1
 801b2f6:	2c00      	cmp	r4, #0
 801b2f8:	f340 80d7 	ble.w	801b4aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801b2fc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801b300:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b304:	d406      	bmi.n	801b314 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b306:	4584      	cmp	ip, r0
 801b308:	da04      	bge.n	801b314 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	db02      	blt.n	801b314 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b30e:	42bb      	cmp	r3, r7
 801b310:	f2c0 80cc 	blt.w	801b4ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b314:	f11c 0c01 	adds.w	ip, ip, #1
 801b318:	f100 80bf 	bmi.w	801b49a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801b31c:	4561      	cmp	r1, ip
 801b31e:	f2c0 80bc 	blt.w	801b49a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801b322:	3301      	adds	r3, #1
 801b324:	f100 80b9 	bmi.w	801b49a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801b328:	429a      	cmp	r2, r3
 801b32a:	f2c0 80b6 	blt.w	801b49a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801b32e:	46a2      	mov	sl, r4
 801b330:	465f      	mov	r7, fp
 801b332:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801b336:	f1ba 0f00 	cmp.w	sl, #0
 801b33a:	f340 80d4 	ble.w	801b4e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b33e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801b342:	1430      	asrs	r0, r6, #16
 801b344:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b348:	9308      	str	r3, [sp, #32]
 801b34a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b34c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801b350:	142b      	asrs	r3, r5, #16
 801b352:	f100 8124 	bmi.w	801b59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b356:	f10c 32ff 	add.w	r2, ip, #4294967295
 801b35a:	4293      	cmp	r3, r2
 801b35c:	f280 811f 	bge.w	801b59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b360:	2800      	cmp	r0, #0
 801b362:	f2c0 811c 	blt.w	801b59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b366:	f10e 32ff 	add.w	r2, lr, #4294967295
 801b36a:	4290      	cmp	r0, r2
 801b36c:	f280 8117 	bge.w	801b59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b370:	fb00 3309 	mla	r3, r0, r9, r3
 801b374:	0858      	lsrs	r0, r3, #1
 801b376:	07da      	lsls	r2, r3, #31
 801b378:	9a08      	ldr	r2, [sp, #32]
 801b37a:	f818 c000 	ldrb.w	ip, [r8, r0]
 801b37e:	bf54      	ite	pl
 801b380:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b384:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b388:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b38c:	fa5f fc8c 	uxtb.w	ip, ip
 801b390:	2a00      	cmp	r2, #0
 801b392:	f000 80ed 	beq.w	801b570 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b396:	1c58      	adds	r0, r3, #1
 801b398:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b39c:	07c0      	lsls	r0, r0, #31
 801b39e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801b3a2:	bf54      	ite	pl
 801b3a4:	f00e 0e0f 	andpl.w	lr, lr, #15
 801b3a8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801b3ac:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801b3b0:	fa5f fe8e 	uxtb.w	lr, lr
 801b3b4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801b3b8:	b1c9      	cbz	r1, 801b3ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801b3ba:	444b      	add	r3, r9
 801b3bc:	0858      	lsrs	r0, r3, #1
 801b3be:	07da      	lsls	r2, r3, #31
 801b3c0:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b3c4:	bf54      	ite	pl
 801b3c6:	f000 000f 	andpl.w	r0, r0, #15
 801b3ca:	1100      	asrmi	r0, r0, #4
 801b3cc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b3d0:	b2c0      	uxtb	r0, r0
 801b3d2:	900a      	str	r0, [sp, #40]	; 0x28
 801b3d4:	1c58      	adds	r0, r3, #1
 801b3d6:	0843      	lsrs	r3, r0, #1
 801b3d8:	07c2      	lsls	r2, r0, #31
 801b3da:	f818 3003 	ldrb.w	r3, [r8, r3]
 801b3de:	bf54      	ite	pl
 801b3e0:	f003 030f 	andpl.w	r3, r3, #15
 801b3e4:	111b      	asrmi	r3, r3, #4
 801b3e6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b3ea:	b2db      	uxtb	r3, r3
 801b3ec:	930e      	str	r3, [sp, #56]	; 0x38
 801b3ee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b3f2:	b289      	uxth	r1, r1
 801b3f4:	fb02 f301 	mul.w	r3, r2, r1
 801b3f8:	0112      	lsls	r2, r2, #4
 801b3fa:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b3fe:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801b402:	1ad2      	subs	r2, r2, r3
 801b404:	b289      	uxth	r1, r1
 801b406:	b292      	uxth	r2, r2
 801b408:	1a40      	subs	r0, r0, r1
 801b40a:	fa1f fe80 	uxth.w	lr, r0
 801b40e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b410:	4342      	muls	r2, r0
 801b412:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801b416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b418:	fb01 c102 	mla	r1, r1, r2, ip
 801b41c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b41e:	fb03 1302 	mla	r3, r3, r2, r1
 801b422:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b426:	b383      	cbz	r3, 801b48a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b428:	4ac7      	ldr	r2, [pc, #796]	; (801b748 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801b42a:	2bff      	cmp	r3, #255	; 0xff
 801b42c:	6812      	ldr	r2, [r2, #0]
 801b42e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801b432:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801b436:	b2d2      	uxtb	r2, r2
 801b438:	f000 80ac 	beq.w	801b594 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801b43c:	b299      	uxth	r1, r3
 801b43e:	43db      	mvns	r3, r3
 801b440:	f897 c000 	ldrb.w	ip, [r7]
 801b444:	fb12 f201 	smulbb	r2, r2, r1
 801b448:	b2db      	uxtb	r3, r3
 801b44a:	fb10 f001 	smulbb	r0, r0, r1
 801b44e:	fb0c 2203 	mla	r2, ip, r3, r2
 801b452:	fb1e f101 	smulbb	r1, lr, r1
 801b456:	b292      	uxth	r2, r2
 801b458:	f102 0c01 	add.w	ip, r2, #1
 801b45c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b460:	1212      	asrs	r2, r2, #8
 801b462:	703a      	strb	r2, [r7, #0]
 801b464:	787a      	ldrb	r2, [r7, #1]
 801b466:	fb02 0003 	mla	r0, r2, r3, r0
 801b46a:	b280      	uxth	r0, r0
 801b46c:	1c42      	adds	r2, r0, #1
 801b46e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b472:	78ba      	ldrb	r2, [r7, #2]
 801b474:	fb02 1303 	mla	r3, r2, r3, r1
 801b478:	1200      	asrs	r0, r0, #8
 801b47a:	b29b      	uxth	r3, r3
 801b47c:	7078      	strb	r0, [r7, #1]
 801b47e:	f103 0e01 	add.w	lr, r3, #1
 801b482:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801b486:	121b      	asrs	r3, r3, #8
 801b488:	70bb      	strb	r3, [r7, #2]
 801b48a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b48c:	3703      	adds	r7, #3
 801b48e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b492:	441d      	add	r5, r3
 801b494:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b496:	441e      	add	r6, r3
 801b498:	e74d      	b.n	801b336 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b49a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b49c:	3c01      	subs	r4, #1
 801b49e:	f10b 0b03 	add.w	fp, fp, #3
 801b4a2:	441d      	add	r5, r3
 801b4a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b4a6:	441e      	add	r6, r3
 801b4a8:	e725      	b.n	801b2f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b4aa:	d021      	beq.n	801b4f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801b4ac:	1e63      	subs	r3, r4, #1
 801b4ae:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801b4b0:	fb00 5003 	mla	r0, r0, r3, r5
 801b4b4:	1400      	asrs	r0, r0, #16
 801b4b6:	f53f af3a 	bmi.w	801b32e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b4ba:	3901      	subs	r1, #1
 801b4bc:	4288      	cmp	r0, r1
 801b4be:	f6bf af36 	bge.w	801b32e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b4c2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b4c4:	fb01 6303 	mla	r3, r1, r3, r6
 801b4c8:	141b      	asrs	r3, r3, #16
 801b4ca:	f53f af30 	bmi.w	801b32e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b4ce:	3a01      	subs	r2, #1
 801b4d0:	4293      	cmp	r3, r2
 801b4d2:	f6bf af2c 	bge.w	801b32e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b4d6:	f10b 0c03 	add.w	ip, fp, #3
 801b4da:	46a6      	mov	lr, r4
 801b4dc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801b4e0:	f1be 0f00 	cmp.w	lr, #0
 801b4e4:	dc79      	bgt.n	801b5da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801b4e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801b4ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b4ee:	44a3      	add	fp, r4
 801b4f0:	9b07      	ldr	r3, [sp, #28]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	f340 8123 	ble.w	801b73e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801b4f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b4fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b4fe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b502:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b506:	eef0 6a48 	vmov.f32	s13, s16
 801b50a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b50e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b512:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b516:	ee16 5a90 	vmov	r5, s13
 801b51a:	eef0 6a68 	vmov.f32	s13, s17
 801b51e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b522:	ee16 6a90 	vmov	r6, s13
 801b526:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b52a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b52e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b532:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b536:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b53a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b53e:	ee18 2a10 	vmov	r2, s16
 801b542:	eeb0 8a47 	vmov.f32	s16, s14
 801b546:	fb92 f3f3 	sdiv	r3, r2, r3
 801b54a:	ee18 2a90 	vmov	r2, s17
 801b54e:	9327      	str	r3, [sp, #156]	; 0x9c
 801b550:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b552:	eef0 8a67 	vmov.f32	s17, s15
 801b556:	fb92 f3f3 	sdiv	r3, r2, r3
 801b55a:	9328      	str	r3, [sp, #160]	; 0xa0
 801b55c:	9b07      	ldr	r3, [sp, #28]
 801b55e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b560:	3b01      	subs	r3, #1
 801b562:	9307      	str	r3, [sp, #28]
 801b564:	bf08      	it	eq
 801b566:	4614      	moveq	r4, r2
 801b568:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b56a:	bf18      	it	ne
 801b56c:	461c      	movne	r4, r3
 801b56e:	e6b4      	b.n	801b2da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b570:	2900      	cmp	r1, #0
 801b572:	f43f af3c 	beq.w	801b3ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801b576:	eb09 0003 	add.w	r0, r9, r3
 801b57a:	0843      	lsrs	r3, r0, #1
 801b57c:	07c0      	lsls	r0, r0, #31
 801b57e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801b582:	bf54      	ite	pl
 801b584:	f003 030f 	andpl.w	r3, r3, #15
 801b588:	111b      	asrmi	r3, r3, #4
 801b58a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b58e:	b2db      	uxtb	r3, r3
 801b590:	930a      	str	r3, [sp, #40]	; 0x28
 801b592:	e72c      	b.n	801b3ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801b594:	703a      	strb	r2, [r7, #0]
 801b596:	7078      	strb	r0, [r7, #1]
 801b598:	f887 e002 	strb.w	lr, [r7, #2]
 801b59c:	e775      	b.n	801b48a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b59e:	1c5a      	adds	r2, r3, #1
 801b5a0:	f53f af73 	bmi.w	801b48a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b5a4:	4594      	cmp	ip, r2
 801b5a6:	f6ff af70 	blt.w	801b48a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b5aa:	1c42      	adds	r2, r0, #1
 801b5ac:	f53f af6d 	bmi.w	801b48a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b5b0:	4596      	cmp	lr, r2
 801b5b2:	f6ff af6a 	blt.w	801b48a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b5b6:	9302      	str	r3, [sp, #8]
 801b5b8:	fa0f f38e 	sxth.w	r3, lr
 801b5bc:	9a08      	ldr	r2, [sp, #32]
 801b5be:	9301      	str	r3, [sp, #4]
 801b5c0:	fa0f f38c 	sxth.w	r3, ip
 801b5c4:	9105      	str	r1, [sp, #20]
 801b5c6:	4639      	mov	r1, r7
 801b5c8:	9300      	str	r3, [sp, #0]
 801b5ca:	464b      	mov	r3, r9
 801b5cc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b5d0:	4642      	mov	r2, r8
 801b5d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b5d4:	f7ff fd70 	bl	801b0b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801b5d8:	e757      	b.n	801b48a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b5da:	142a      	asrs	r2, r5, #16
 801b5dc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b5e0:	1433      	asrs	r3, r6, #16
 801b5e2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801b5e6:	fb09 2303 	mla	r3, r9, r3, r2
 801b5ea:	085a      	lsrs	r2, r3, #1
 801b5ec:	07d9      	lsls	r1, r3, #31
 801b5ee:	f818 2002 	ldrb.w	r2, [r8, r2]
 801b5f2:	bf54      	ite	pl
 801b5f4:	f002 020f 	andpl.w	r2, r2, #15
 801b5f8:	1112      	asrmi	r2, r2, #4
 801b5fa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b5fe:	b2d2      	uxtb	r2, r2
 801b600:	2800      	cmp	r0, #0
 801b602:	f000 8085 	beq.w	801b710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801b606:	f103 0a01 	add.w	sl, r3, #1
 801b60a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801b60e:	f01a 0f01 	tst.w	sl, #1
 801b612:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b616:	bf0c      	ite	eq
 801b618:	f001 010f 	andeq.w	r1, r1, #15
 801b61c:	1109      	asrne	r1, r1, #4
 801b61e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b622:	b2c9      	uxtb	r1, r1
 801b624:	910f      	str	r1, [sp, #60]	; 0x3c
 801b626:	b1df      	cbz	r7, 801b660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801b628:	444b      	add	r3, r9
 801b62a:	0859      	lsrs	r1, r3, #1
 801b62c:	f013 0f01 	tst.w	r3, #1
 801b630:	f103 0301 	add.w	r3, r3, #1
 801b634:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b638:	bf0c      	ite	eq
 801b63a:	f001 010f 	andeq.w	r1, r1, #15
 801b63e:	1109      	asrne	r1, r1, #4
 801b640:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b644:	b2c9      	uxtb	r1, r1
 801b646:	910b      	str	r1, [sp, #44]	; 0x2c
 801b648:	0859      	lsrs	r1, r3, #1
 801b64a:	07db      	lsls	r3, r3, #31
 801b64c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b650:	bf54      	ite	pl
 801b652:	f001 010f 	andpl.w	r1, r1, #15
 801b656:	1109      	asrmi	r1, r1, #4
 801b658:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b65c:	b2c9      	uxtb	r1, r1
 801b65e:	9110      	str	r1, [sp, #64]	; 0x40
 801b660:	b280      	uxth	r0, r0
 801b662:	b2bf      	uxth	r7, r7
 801b664:	fb00 f307 	mul.w	r3, r0, r7
 801b668:	0100      	lsls	r0, r0, #4
 801b66a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801b66e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801b672:	1ac0      	subs	r0, r0, r3
 801b674:	b2bf      	uxth	r7, r7
 801b676:	b280      	uxth	r0, r0
 801b678:	1bc9      	subs	r1, r1, r7
 801b67a:	fa1f fa81 	uxth.w	sl, r1
 801b67e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b680:	4348      	muls	r0, r1
 801b682:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b684:	fb02 020a 	mla	r2, r2, sl, r0
 801b688:	fb07 2701 	mla	r7, r7, r1, r2
 801b68c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b68e:	fb03 7302 	mla	r3, r3, r2, r7
 801b692:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b696:	b393      	cbz	r3, 801b6fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801b698:	4a2b      	ldr	r2, [pc, #172]	; (801b748 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801b69a:	2bff      	cmp	r3, #255	; 0xff
 801b69c:	6811      	ldr	r1, [r2, #0]
 801b69e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801b6a2:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801b6a6:	b2c9      	uxtb	r1, r1
 801b6a8:	d042      	beq.n	801b730 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801b6aa:	b298      	uxth	r0, r3
 801b6ac:	43db      	mvns	r3, r3
 801b6ae:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801b6b2:	fb11 f100 	smulbb	r1, r1, r0
 801b6b6:	b2db      	uxtb	r3, r3
 801b6b8:	fb17 f700 	smulbb	r7, r7, r0
 801b6bc:	fb02 1103 	mla	r1, r2, r3, r1
 801b6c0:	fb1a f000 	smulbb	r0, sl, r0
 801b6c4:	b289      	uxth	r1, r1
 801b6c6:	1c4a      	adds	r2, r1, #1
 801b6c8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b6cc:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801b6d0:	fb02 7703 	mla	r7, r2, r3, r7
 801b6d4:	1209      	asrs	r1, r1, #8
 801b6d6:	b2bf      	uxth	r7, r7
 801b6d8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801b6dc:	1c7a      	adds	r2, r7, #1
 801b6de:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b6e2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801b6e6:	fb02 0303 	mla	r3, r2, r3, r0
 801b6ea:	123f      	asrs	r7, r7, #8
 801b6ec:	b29b      	uxth	r3, r3
 801b6ee:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801b6f2:	1c5a      	adds	r2, r3, #1
 801b6f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b6f8:	121b      	asrs	r3, r3, #8
 801b6fa:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801b6fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b700:	f10c 0c03 	add.w	ip, ip, #3
 801b704:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b708:	441d      	add	r5, r3
 801b70a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b70c:	441e      	add	r6, r3
 801b70e:	e6e7      	b.n	801b4e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b710:	2f00      	cmp	r7, #0
 801b712:	d0a5      	beq.n	801b660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801b714:	444b      	add	r3, r9
 801b716:	0859      	lsrs	r1, r3, #1
 801b718:	07db      	lsls	r3, r3, #31
 801b71a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b71e:	bf54      	ite	pl
 801b720:	f001 010f 	andpl.w	r1, r1, #15
 801b724:	1109      	asrmi	r1, r1, #4
 801b726:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b72a:	b2c9      	uxtb	r1, r1
 801b72c:	910b      	str	r1, [sp, #44]	; 0x2c
 801b72e:	e797      	b.n	801b660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801b730:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801b734:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801b738:	f80c ac01 	strb.w	sl, [ip, #-1]
 801b73c:	e7df      	b.n	801b6fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801b73e:	b013      	add	sp, #76	; 0x4c
 801b740:	ecbd 8b08 	vpop	{d8-d11}
 801b744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b748:	2000df74 	.word	0x2000df74

0801b74c <CRC_Lock>:
 801b74c:	4a20      	ldr	r2, [pc, #128]	; (801b7d0 <CRC_Lock+0x84>)
 801b74e:	b530      	push	{r4, r5, lr}
 801b750:	6813      	ldr	r3, [r2, #0]
 801b752:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801b756:	f24c 2540 	movw	r5, #49728	; 0xc240
 801b75a:	f023 0301 	bic.w	r3, r3, #1
 801b75e:	6013      	str	r3, [r2, #0]
 801b760:	4b1c      	ldr	r3, [pc, #112]	; (801b7d4 <CRC_Lock+0x88>)
 801b762:	681a      	ldr	r2, [r3, #0]
 801b764:	4022      	ands	r2, r4
 801b766:	42aa      	cmp	r2, r5
 801b768:	d005      	beq.n	801b776 <CRC_Lock+0x2a>
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	f24c 2270 	movw	r2, #49776	; 0xc270
 801b770:	4023      	ands	r3, r4
 801b772:	4293      	cmp	r3, r2
 801b774:	d124      	bne.n	801b7c0 <CRC_Lock+0x74>
 801b776:	4b18      	ldr	r3, [pc, #96]	; (801b7d8 <CRC_Lock+0x8c>)
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	bb0b      	cbnz	r3, 801b7c0 <CRC_Lock+0x74>
 801b77c:	4b17      	ldr	r3, [pc, #92]	; (801b7dc <CRC_Lock+0x90>)
 801b77e:	681a      	ldr	r2, [r3, #0]
 801b780:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801b784:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b788:	d00d      	beq.n	801b7a6 <CRC_Lock+0x5a>
 801b78a:	681a      	ldr	r2, [r3, #0]
 801b78c:	f240 4483 	movw	r4, #1155	; 0x483
 801b790:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801b794:	42a2      	cmp	r2, r4
 801b796:	d006      	beq.n	801b7a6 <CRC_Lock+0x5a>
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	f240 4285 	movw	r2, #1157	; 0x485
 801b79e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b7a2:	4293      	cmp	r3, r2
 801b7a4:	d10c      	bne.n	801b7c0 <CRC_Lock+0x74>
 801b7a6:	4b0e      	ldr	r3, [pc, #56]	; (801b7e0 <CRC_Lock+0x94>)
 801b7a8:	2201      	movs	r2, #1
 801b7aa:	601a      	str	r2, [r3, #0]
 801b7ac:	681a      	ldr	r2, [r3, #0]
 801b7ae:	2a00      	cmp	r2, #0
 801b7b0:	d1fc      	bne.n	801b7ac <CRC_Lock+0x60>
 801b7b2:	4b0c      	ldr	r3, [pc, #48]	; (801b7e4 <CRC_Lock+0x98>)
 801b7b4:	6018      	str	r0, [r3, #0]
 801b7b6:	6818      	ldr	r0, [r3, #0]
 801b7b8:	1a43      	subs	r3, r0, r1
 801b7ba:	4258      	negs	r0, r3
 801b7bc:	4158      	adcs	r0, r3
 801b7be:	bd30      	pop	{r4, r5, pc}
 801b7c0:	4b09      	ldr	r3, [pc, #36]	; (801b7e8 <CRC_Lock+0x9c>)
 801b7c2:	2201      	movs	r2, #1
 801b7c4:	601a      	str	r2, [r3, #0]
 801b7c6:	681a      	ldr	r2, [r3, #0]
 801b7c8:	2a00      	cmp	r2, #0
 801b7ca:	d1fc      	bne.n	801b7c6 <CRC_Lock+0x7a>
 801b7cc:	4b07      	ldr	r3, [pc, #28]	; (801b7ec <CRC_Lock+0xa0>)
 801b7ce:	e7f1      	b.n	801b7b4 <CRC_Lock+0x68>
 801b7d0:	e0002000 	.word	0xe0002000
 801b7d4:	e000ed00 	.word	0xe000ed00
 801b7d8:	e0042000 	.word	0xe0042000
 801b7dc:	5c001000 	.word	0x5c001000
 801b7e0:	58024c08 	.word	0x58024c08
 801b7e4:	58024c00 	.word	0x58024c00
 801b7e8:	40023008 	.word	0x40023008
 801b7ec:	40023000 	.word	0x40023000

0801b7f0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801b7f0:	6101      	str	r1, [r0, #16]
 801b7f2:	4770      	bx	lr

0801b7f4 <_ZN8touchgfx8Gestures4tickEv>:
 801b7f4:	7b83      	ldrb	r3, [r0, #14]
 801b7f6:	b14b      	cbz	r3, 801b80c <_ZN8touchgfx8Gestures4tickEv+0x18>
 801b7f8:	8903      	ldrh	r3, [r0, #8]
 801b7fa:	3301      	adds	r3, #1
 801b7fc:	b29b      	uxth	r3, r3
 801b7fe:	2b07      	cmp	r3, #7
 801b800:	8103      	strh	r3, [r0, #8]
 801b802:	bf81      	itttt	hi
 801b804:	2300      	movhi	r3, #0
 801b806:	8143      	strhhi	r3, [r0, #10]
 801b808:	8183      	strhhi	r3, [r0, #12]
 801b80a:	7383      	strbhi	r3, [r0, #14]
 801b80c:	4770      	bx	lr
	...

0801b810 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801b810:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b814:	4604      	mov	r4, r0
 801b816:	4698      	mov	r8, r3
 801b818:	8880      	ldrh	r0, [r0, #4]
 801b81a:	4617      	mov	r7, r2
 801b81c:	4b1d      	ldr	r3, [pc, #116]	; (801b894 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801b81e:	460e      	mov	r6, r1
 801b820:	f8ad 0006 	strh.w	r0, [sp, #6]
 801b824:	eba8 0000 	sub.w	r0, r8, r0
 801b828:	9300      	str	r3, [sp, #0]
 801b82a:	2300      	movs	r3, #0
 801b82c:	b280      	uxth	r0, r0
 801b82e:	8aa2      	ldrh	r2, [r4, #20]
 801b830:	f88d 3004 	strb.w	r3, [sp, #4]
 801b834:	b203      	sxth	r3, r0
 801b836:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801b83a:	88e1      	ldrh	r1, [r4, #6]
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b842:	f8ad 1008 	strh.w	r1, [sp, #8]
 801b846:	bfb8      	it	lt
 801b848:	4240      	neglt	r0, r0
 801b84a:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b84e:	bfb8      	it	lt
 801b850:	b203      	sxthlt	r3, r0
 801b852:	4293      	cmp	r3, r2
 801b854:	dc08      	bgt.n	801b868 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801b856:	1a69      	subs	r1, r5, r1
 801b858:	b289      	uxth	r1, r1
 801b85a:	b20b      	sxth	r3, r1
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	bfbc      	itt	lt
 801b860:	4249      	neglt	r1, r1
 801b862:	b20b      	sxthlt	r3, r1
 801b864:	429a      	cmp	r2, r3
 801b866:	da13      	bge.n	801b890 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801b868:	6920      	ldr	r0, [r4, #16]
 801b86a:	4669      	mov	r1, sp
 801b86c:	eba8 0606 	sub.w	r6, r8, r6
 801b870:	1bef      	subs	r7, r5, r7
 801b872:	6803      	ldr	r3, [r0, #0]
 801b874:	685b      	ldr	r3, [r3, #4]
 801b876:	4798      	blx	r3
 801b878:	2300      	movs	r3, #0
 801b87a:	2001      	movs	r0, #1
 801b87c:	8166      	strh	r6, [r4, #10]
 801b87e:	8123      	strh	r3, [r4, #8]
 801b880:	81a7      	strh	r7, [r4, #12]
 801b882:	f8a4 8004 	strh.w	r8, [r4, #4]
 801b886:	80e5      	strh	r5, [r4, #6]
 801b888:	73a0      	strb	r0, [r4, #14]
 801b88a:	b004      	add	sp, #16
 801b88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b890:	2000      	movs	r0, #0
 801b892:	e7fa      	b.n	801b88a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801b894:	0801ef18 	.word	0x0801ef18

0801b898 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801b898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b89a:	461e      	mov	r6, r3
 801b89c:	1e4b      	subs	r3, r1, #1
 801b89e:	b085      	sub	sp, #20
 801b8a0:	4604      	mov	r4, r0
 801b8a2:	2b01      	cmp	r3, #1
 801b8a4:	460d      	mov	r5, r1
 801b8a6:	4617      	mov	r7, r2
 801b8a8:	d84b      	bhi.n	801b942 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801b8aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b8ae:	1cd3      	adds	r3, r2, #3
 801b8b0:	b29b      	uxth	r3, r3
 801b8b2:	2b06      	cmp	r3, #6
 801b8b4:	d916      	bls.n	801b8e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801b8b6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801b958 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b8ba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b8be:	f8cd c004 	str.w	ip, [sp, #4]
 801b8c2:	f04f 0c00 	mov.w	ip, #0
 801b8c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b8ca:	6900      	ldr	r0, [r0, #16]
 801b8cc:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b8d0:	a901      	add	r1, sp, #4
 801b8d2:	f88d c008 	strb.w	ip, [sp, #8]
 801b8d6:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b8da:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b8de:	6803      	ldr	r3, [r0, #0]
 801b8e0:	689b      	ldr	r3, [r3, #8]
 801b8e2:	4798      	blx	r3
 801b8e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b8e8:	1cd3      	adds	r3, r2, #3
 801b8ea:	b29b      	uxth	r3, r3
 801b8ec:	2b06      	cmp	r3, #6
 801b8ee:	d916      	bls.n	801b91e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b8f0:	f8df c064 	ldr.w	ip, [pc, #100]	; 801b958 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b8f4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b8f8:	f8cd c004 	str.w	ip, [sp, #4]
 801b8fc:	f04f 0c01 	mov.w	ip, #1
 801b900:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b904:	6920      	ldr	r0, [r4, #16]
 801b906:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b90a:	a901      	add	r1, sp, #4
 801b90c:	f88d c008 	strb.w	ip, [sp, #8]
 801b910:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b914:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b918:	6803      	ldr	r3, [r0, #0]
 801b91a:	689b      	ldr	r3, [r3, #8]
 801b91c:	4798      	blx	r3
 801b91e:	4b0d      	ldr	r3, [pc, #52]	; (801b954 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801b920:	a901      	add	r1, sp, #4
 801b922:	6920      	ldr	r0, [r4, #16]
 801b924:	9301      	str	r3, [sp, #4]
 801b926:	2300      	movs	r3, #0
 801b928:	f88d 5008 	strb.w	r5, [sp, #8]
 801b92c:	f8ad 700a 	strh.w	r7, [sp, #10]
 801b930:	f8ad 600c 	strh.w	r6, [sp, #12]
 801b934:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b938:	6803      	ldr	r3, [r0, #0]
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	4798      	blx	r3
 801b93e:	b005      	add	sp, #20
 801b940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b942:	2900      	cmp	r1, #0
 801b944:	d1eb      	bne.n	801b91e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b946:	80a2      	strh	r2, [r4, #4]
 801b948:	80c6      	strh	r6, [r0, #6]
 801b94a:	60a1      	str	r1, [r4, #8]
 801b94c:	81a1      	strh	r1, [r4, #12]
 801b94e:	73a1      	strb	r1, [r4, #14]
 801b950:	e7e5      	b.n	801b91e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b952:	bf00      	nop
 801b954:	0801ef04 	.word	0x0801ef04
 801b958:	0801ef2c 	.word	0x0801ef2c

0801b95c <__aeabi_atexit>:
 801b95c:	460b      	mov	r3, r1
 801b95e:	4601      	mov	r1, r0
 801b960:	4618      	mov	r0, r3
 801b962:	f000 b853 	b.w	801ba0c <__cxa_atexit>

0801b966 <_ZdlPvj>:
 801b966:	f000 b812 	b.w	801b98e <_ZdlPv>

0801b96a <__cxa_guard_acquire>:
 801b96a:	6803      	ldr	r3, [r0, #0]
 801b96c:	07db      	lsls	r3, r3, #31
 801b96e:	d406      	bmi.n	801b97e <__cxa_guard_acquire+0x14>
 801b970:	7843      	ldrb	r3, [r0, #1]
 801b972:	b103      	cbz	r3, 801b976 <__cxa_guard_acquire+0xc>
 801b974:	deff      	udf	#255	; 0xff
 801b976:	2301      	movs	r3, #1
 801b978:	7043      	strb	r3, [r0, #1]
 801b97a:	4618      	mov	r0, r3
 801b97c:	4770      	bx	lr
 801b97e:	2000      	movs	r0, #0
 801b980:	4770      	bx	lr

0801b982 <__cxa_guard_release>:
 801b982:	2301      	movs	r3, #1
 801b984:	6003      	str	r3, [r0, #0]
 801b986:	4770      	bx	lr

0801b988 <__cxa_pure_virtual>:
 801b988:	b508      	push	{r3, lr}
 801b98a:	f000 f80f 	bl	801b9ac <_ZSt9terminatev>

0801b98e <_ZdlPv>:
 801b98e:	f000 b88f 	b.w	801bab0 <free>

0801b992 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801b992:	b508      	push	{r3, lr}
 801b994:	4780      	blx	r0
 801b996:	f000 f80e 	bl	801b9b6 <abort>
	...

0801b99c <_ZSt13get_terminatev>:
 801b99c:	4b02      	ldr	r3, [pc, #8]	; (801b9a8 <_ZSt13get_terminatev+0xc>)
 801b99e:	6818      	ldr	r0, [r3, #0]
 801b9a0:	f3bf 8f5b 	dmb	ish
 801b9a4:	4770      	bx	lr
 801b9a6:	bf00      	nop
 801b9a8:	20000070 	.word	0x20000070

0801b9ac <_ZSt9terminatev>:
 801b9ac:	b508      	push	{r3, lr}
 801b9ae:	f7ff fff5 	bl	801b99c <_ZSt13get_terminatev>
 801b9b2:	f7ff ffee 	bl	801b992 <_ZN10__cxxabiv111__terminateEPFvvE>

0801b9b6 <abort>:
 801b9b6:	b508      	push	{r3, lr}
 801b9b8:	2006      	movs	r0, #6
 801b9ba:	f000 fc67 	bl	801c28c <raise>
 801b9be:	2001      	movs	r0, #1
 801b9c0:	f7e5 fdc8 	bl	8001554 <_exit>

0801b9c4 <__assert_func>:
 801b9c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b9c6:	4614      	mov	r4, r2
 801b9c8:	461a      	mov	r2, r3
 801b9ca:	4b09      	ldr	r3, [pc, #36]	; (801b9f0 <__assert_func+0x2c>)
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	4605      	mov	r5, r0
 801b9d0:	68d8      	ldr	r0, [r3, #12]
 801b9d2:	b14c      	cbz	r4, 801b9e8 <__assert_func+0x24>
 801b9d4:	4b07      	ldr	r3, [pc, #28]	; (801b9f4 <__assert_func+0x30>)
 801b9d6:	9100      	str	r1, [sp, #0]
 801b9d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b9dc:	4906      	ldr	r1, [pc, #24]	; (801b9f8 <__assert_func+0x34>)
 801b9de:	462b      	mov	r3, r5
 801b9e0:	f000 f828 	bl	801ba34 <fiprintf>
 801b9e4:	f7ff ffe7 	bl	801b9b6 <abort>
 801b9e8:	4b04      	ldr	r3, [pc, #16]	; (801b9fc <__assert_func+0x38>)
 801b9ea:	461c      	mov	r4, r3
 801b9ec:	e7f3      	b.n	801b9d6 <__assert_func+0x12>
 801b9ee:	bf00      	nop
 801b9f0:	20000074 	.word	0x20000074
 801b9f4:	0802028f 	.word	0x0802028f
 801b9f8:	0802029c 	.word	0x0802029c
 801b9fc:	080202ca 	.word	0x080202ca

0801ba00 <atexit>:
 801ba00:	2300      	movs	r3, #0
 801ba02:	4601      	mov	r1, r0
 801ba04:	461a      	mov	r2, r3
 801ba06:	4618      	mov	r0, r3
 801ba08:	f000 bd1c 	b.w	801c444 <__register_exitproc>

0801ba0c <__cxa_atexit>:
 801ba0c:	b510      	push	{r4, lr}
 801ba0e:	4c05      	ldr	r4, [pc, #20]	; (801ba24 <__cxa_atexit+0x18>)
 801ba10:	4613      	mov	r3, r2
 801ba12:	b12c      	cbz	r4, 801ba20 <__cxa_atexit+0x14>
 801ba14:	460a      	mov	r2, r1
 801ba16:	4601      	mov	r1, r0
 801ba18:	2002      	movs	r0, #2
 801ba1a:	f000 fd13 	bl	801c444 <__register_exitproc>
 801ba1e:	bd10      	pop	{r4, pc}
 801ba20:	4620      	mov	r0, r4
 801ba22:	e7fc      	b.n	801ba1e <__cxa_atexit+0x12>
 801ba24:	0801c445 	.word	0x0801c445

0801ba28 <__errno>:
 801ba28:	4b01      	ldr	r3, [pc, #4]	; (801ba30 <__errno+0x8>)
 801ba2a:	6818      	ldr	r0, [r3, #0]
 801ba2c:	4770      	bx	lr
 801ba2e:	bf00      	nop
 801ba30:	20000074 	.word	0x20000074

0801ba34 <fiprintf>:
 801ba34:	b40e      	push	{r1, r2, r3}
 801ba36:	b503      	push	{r0, r1, lr}
 801ba38:	4601      	mov	r1, r0
 801ba3a:	ab03      	add	r3, sp, #12
 801ba3c:	4805      	ldr	r0, [pc, #20]	; (801ba54 <fiprintf+0x20>)
 801ba3e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba42:	6800      	ldr	r0, [r0, #0]
 801ba44:	9301      	str	r3, [sp, #4]
 801ba46:	f000 f925 	bl	801bc94 <_vfiprintf_r>
 801ba4a:	b002      	add	sp, #8
 801ba4c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba50:	b003      	add	sp, #12
 801ba52:	4770      	bx	lr
 801ba54:	20000074 	.word	0x20000074

0801ba58 <__libc_init_array>:
 801ba58:	b570      	push	{r4, r5, r6, lr}
 801ba5a:	4d0d      	ldr	r5, [pc, #52]	; (801ba90 <__libc_init_array+0x38>)
 801ba5c:	4c0d      	ldr	r4, [pc, #52]	; (801ba94 <__libc_init_array+0x3c>)
 801ba5e:	1b64      	subs	r4, r4, r5
 801ba60:	10a4      	asrs	r4, r4, #2
 801ba62:	2600      	movs	r6, #0
 801ba64:	42a6      	cmp	r6, r4
 801ba66:	d109      	bne.n	801ba7c <__libc_init_array+0x24>
 801ba68:	4d0b      	ldr	r5, [pc, #44]	; (801ba98 <__libc_init_array+0x40>)
 801ba6a:	4c0c      	ldr	r4, [pc, #48]	; (801ba9c <__libc_init_array+0x44>)
 801ba6c:	f001 f824 	bl	801cab8 <_init>
 801ba70:	1b64      	subs	r4, r4, r5
 801ba72:	10a4      	asrs	r4, r4, #2
 801ba74:	2600      	movs	r6, #0
 801ba76:	42a6      	cmp	r6, r4
 801ba78:	d105      	bne.n	801ba86 <__libc_init_array+0x2e>
 801ba7a:	bd70      	pop	{r4, r5, r6, pc}
 801ba7c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba80:	4798      	blx	r3
 801ba82:	3601      	adds	r6, #1
 801ba84:	e7ee      	b.n	801ba64 <__libc_init_array+0xc>
 801ba86:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba8a:	4798      	blx	r3
 801ba8c:	3601      	adds	r6, #1
 801ba8e:	e7f2      	b.n	801ba76 <__libc_init_array+0x1e>
 801ba90:	0802e578 	.word	0x0802e578
 801ba94:	0802e578 	.word	0x0802e578
 801ba98:	0802e578 	.word	0x0802e578
 801ba9c:	0802e58c 	.word	0x0802e58c

0801baa0 <malloc>:
 801baa0:	4b02      	ldr	r3, [pc, #8]	; (801baac <malloc+0xc>)
 801baa2:	4601      	mov	r1, r0
 801baa4:	6818      	ldr	r0, [r3, #0]
 801baa6:	f000 b871 	b.w	801bb8c <_malloc_r>
 801baaa:	bf00      	nop
 801baac:	20000074 	.word	0x20000074

0801bab0 <free>:
 801bab0:	4b02      	ldr	r3, [pc, #8]	; (801babc <free+0xc>)
 801bab2:	4601      	mov	r1, r0
 801bab4:	6818      	ldr	r0, [r3, #0]
 801bab6:	f000 b819 	b.w	801baec <_free_r>
 801baba:	bf00      	nop
 801babc:	20000074 	.word	0x20000074

0801bac0 <memcpy>:
 801bac0:	440a      	add	r2, r1
 801bac2:	4291      	cmp	r1, r2
 801bac4:	f100 33ff 	add.w	r3, r0, #4294967295
 801bac8:	d100      	bne.n	801bacc <memcpy+0xc>
 801baca:	4770      	bx	lr
 801bacc:	b510      	push	{r4, lr}
 801bace:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bad6:	4291      	cmp	r1, r2
 801bad8:	d1f9      	bne.n	801bace <memcpy+0xe>
 801bada:	bd10      	pop	{r4, pc}

0801badc <memset>:
 801badc:	4402      	add	r2, r0
 801bade:	4603      	mov	r3, r0
 801bae0:	4293      	cmp	r3, r2
 801bae2:	d100      	bne.n	801bae6 <memset+0xa>
 801bae4:	4770      	bx	lr
 801bae6:	f803 1b01 	strb.w	r1, [r3], #1
 801baea:	e7f9      	b.n	801bae0 <memset+0x4>

0801baec <_free_r>:
 801baec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801baee:	2900      	cmp	r1, #0
 801baf0:	d048      	beq.n	801bb84 <_free_r+0x98>
 801baf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801baf6:	9001      	str	r0, [sp, #4]
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	f1a1 0404 	sub.w	r4, r1, #4
 801bafe:	bfb8      	it	lt
 801bb00:	18e4      	addlt	r4, r4, r3
 801bb02:	f000 ff21 	bl	801c948 <__malloc_lock>
 801bb06:	4a20      	ldr	r2, [pc, #128]	; (801bb88 <_free_r+0x9c>)
 801bb08:	9801      	ldr	r0, [sp, #4]
 801bb0a:	6813      	ldr	r3, [r2, #0]
 801bb0c:	4615      	mov	r5, r2
 801bb0e:	b933      	cbnz	r3, 801bb1e <_free_r+0x32>
 801bb10:	6063      	str	r3, [r4, #4]
 801bb12:	6014      	str	r4, [r2, #0]
 801bb14:	b003      	add	sp, #12
 801bb16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bb1a:	f000 bf1b 	b.w	801c954 <__malloc_unlock>
 801bb1e:	42a3      	cmp	r3, r4
 801bb20:	d90b      	bls.n	801bb3a <_free_r+0x4e>
 801bb22:	6821      	ldr	r1, [r4, #0]
 801bb24:	1862      	adds	r2, r4, r1
 801bb26:	4293      	cmp	r3, r2
 801bb28:	bf04      	itt	eq
 801bb2a:	681a      	ldreq	r2, [r3, #0]
 801bb2c:	685b      	ldreq	r3, [r3, #4]
 801bb2e:	6063      	str	r3, [r4, #4]
 801bb30:	bf04      	itt	eq
 801bb32:	1852      	addeq	r2, r2, r1
 801bb34:	6022      	streq	r2, [r4, #0]
 801bb36:	602c      	str	r4, [r5, #0]
 801bb38:	e7ec      	b.n	801bb14 <_free_r+0x28>
 801bb3a:	461a      	mov	r2, r3
 801bb3c:	685b      	ldr	r3, [r3, #4]
 801bb3e:	b10b      	cbz	r3, 801bb44 <_free_r+0x58>
 801bb40:	42a3      	cmp	r3, r4
 801bb42:	d9fa      	bls.n	801bb3a <_free_r+0x4e>
 801bb44:	6811      	ldr	r1, [r2, #0]
 801bb46:	1855      	adds	r5, r2, r1
 801bb48:	42a5      	cmp	r5, r4
 801bb4a:	d10b      	bne.n	801bb64 <_free_r+0x78>
 801bb4c:	6824      	ldr	r4, [r4, #0]
 801bb4e:	4421      	add	r1, r4
 801bb50:	1854      	adds	r4, r2, r1
 801bb52:	42a3      	cmp	r3, r4
 801bb54:	6011      	str	r1, [r2, #0]
 801bb56:	d1dd      	bne.n	801bb14 <_free_r+0x28>
 801bb58:	681c      	ldr	r4, [r3, #0]
 801bb5a:	685b      	ldr	r3, [r3, #4]
 801bb5c:	6053      	str	r3, [r2, #4]
 801bb5e:	4421      	add	r1, r4
 801bb60:	6011      	str	r1, [r2, #0]
 801bb62:	e7d7      	b.n	801bb14 <_free_r+0x28>
 801bb64:	d902      	bls.n	801bb6c <_free_r+0x80>
 801bb66:	230c      	movs	r3, #12
 801bb68:	6003      	str	r3, [r0, #0]
 801bb6a:	e7d3      	b.n	801bb14 <_free_r+0x28>
 801bb6c:	6825      	ldr	r5, [r4, #0]
 801bb6e:	1961      	adds	r1, r4, r5
 801bb70:	428b      	cmp	r3, r1
 801bb72:	bf04      	itt	eq
 801bb74:	6819      	ldreq	r1, [r3, #0]
 801bb76:	685b      	ldreq	r3, [r3, #4]
 801bb78:	6063      	str	r3, [r4, #4]
 801bb7a:	bf04      	itt	eq
 801bb7c:	1949      	addeq	r1, r1, r5
 801bb7e:	6021      	streq	r1, [r4, #0]
 801bb80:	6054      	str	r4, [r2, #4]
 801bb82:	e7c7      	b.n	801bb14 <_free_r+0x28>
 801bb84:	b003      	add	sp, #12
 801bb86:	bd30      	pop	{r4, r5, pc}
 801bb88:	2000e048 	.word	0x2000e048

0801bb8c <_malloc_r>:
 801bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb8e:	1ccd      	adds	r5, r1, #3
 801bb90:	f025 0503 	bic.w	r5, r5, #3
 801bb94:	3508      	adds	r5, #8
 801bb96:	2d0c      	cmp	r5, #12
 801bb98:	bf38      	it	cc
 801bb9a:	250c      	movcc	r5, #12
 801bb9c:	2d00      	cmp	r5, #0
 801bb9e:	4606      	mov	r6, r0
 801bba0:	db01      	blt.n	801bba6 <_malloc_r+0x1a>
 801bba2:	42a9      	cmp	r1, r5
 801bba4:	d903      	bls.n	801bbae <_malloc_r+0x22>
 801bba6:	230c      	movs	r3, #12
 801bba8:	6033      	str	r3, [r6, #0]
 801bbaa:	2000      	movs	r0, #0
 801bbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbae:	f000 fecb 	bl	801c948 <__malloc_lock>
 801bbb2:	4921      	ldr	r1, [pc, #132]	; (801bc38 <_malloc_r+0xac>)
 801bbb4:	680a      	ldr	r2, [r1, #0]
 801bbb6:	4614      	mov	r4, r2
 801bbb8:	b99c      	cbnz	r4, 801bbe2 <_malloc_r+0x56>
 801bbba:	4f20      	ldr	r7, [pc, #128]	; (801bc3c <_malloc_r+0xb0>)
 801bbbc:	683b      	ldr	r3, [r7, #0]
 801bbbe:	b923      	cbnz	r3, 801bbca <_malloc_r+0x3e>
 801bbc0:	4621      	mov	r1, r4
 801bbc2:	4630      	mov	r0, r6
 801bbc4:	f000 fb2a 	bl	801c21c <_sbrk_r>
 801bbc8:	6038      	str	r0, [r7, #0]
 801bbca:	4629      	mov	r1, r5
 801bbcc:	4630      	mov	r0, r6
 801bbce:	f000 fb25 	bl	801c21c <_sbrk_r>
 801bbd2:	1c43      	adds	r3, r0, #1
 801bbd4:	d123      	bne.n	801bc1e <_malloc_r+0x92>
 801bbd6:	230c      	movs	r3, #12
 801bbd8:	6033      	str	r3, [r6, #0]
 801bbda:	4630      	mov	r0, r6
 801bbdc:	f000 feba 	bl	801c954 <__malloc_unlock>
 801bbe0:	e7e3      	b.n	801bbaa <_malloc_r+0x1e>
 801bbe2:	6823      	ldr	r3, [r4, #0]
 801bbe4:	1b5b      	subs	r3, r3, r5
 801bbe6:	d417      	bmi.n	801bc18 <_malloc_r+0x8c>
 801bbe8:	2b0b      	cmp	r3, #11
 801bbea:	d903      	bls.n	801bbf4 <_malloc_r+0x68>
 801bbec:	6023      	str	r3, [r4, #0]
 801bbee:	441c      	add	r4, r3
 801bbf0:	6025      	str	r5, [r4, #0]
 801bbf2:	e004      	b.n	801bbfe <_malloc_r+0x72>
 801bbf4:	6863      	ldr	r3, [r4, #4]
 801bbf6:	42a2      	cmp	r2, r4
 801bbf8:	bf0c      	ite	eq
 801bbfa:	600b      	streq	r3, [r1, #0]
 801bbfc:	6053      	strne	r3, [r2, #4]
 801bbfe:	4630      	mov	r0, r6
 801bc00:	f000 fea8 	bl	801c954 <__malloc_unlock>
 801bc04:	f104 000b 	add.w	r0, r4, #11
 801bc08:	1d23      	adds	r3, r4, #4
 801bc0a:	f020 0007 	bic.w	r0, r0, #7
 801bc0e:	1ac2      	subs	r2, r0, r3
 801bc10:	d0cc      	beq.n	801bbac <_malloc_r+0x20>
 801bc12:	1a1b      	subs	r3, r3, r0
 801bc14:	50a3      	str	r3, [r4, r2]
 801bc16:	e7c9      	b.n	801bbac <_malloc_r+0x20>
 801bc18:	4622      	mov	r2, r4
 801bc1a:	6864      	ldr	r4, [r4, #4]
 801bc1c:	e7cc      	b.n	801bbb8 <_malloc_r+0x2c>
 801bc1e:	1cc4      	adds	r4, r0, #3
 801bc20:	f024 0403 	bic.w	r4, r4, #3
 801bc24:	42a0      	cmp	r0, r4
 801bc26:	d0e3      	beq.n	801bbf0 <_malloc_r+0x64>
 801bc28:	1a21      	subs	r1, r4, r0
 801bc2a:	4630      	mov	r0, r6
 801bc2c:	f000 faf6 	bl	801c21c <_sbrk_r>
 801bc30:	3001      	adds	r0, #1
 801bc32:	d1dd      	bne.n	801bbf0 <_malloc_r+0x64>
 801bc34:	e7cf      	b.n	801bbd6 <_malloc_r+0x4a>
 801bc36:	bf00      	nop
 801bc38:	2000e048 	.word	0x2000e048
 801bc3c:	2000e04c 	.word	0x2000e04c

0801bc40 <__sfputc_r>:
 801bc40:	6893      	ldr	r3, [r2, #8]
 801bc42:	3b01      	subs	r3, #1
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	b410      	push	{r4}
 801bc48:	6093      	str	r3, [r2, #8]
 801bc4a:	da08      	bge.n	801bc5e <__sfputc_r+0x1e>
 801bc4c:	6994      	ldr	r4, [r2, #24]
 801bc4e:	42a3      	cmp	r3, r4
 801bc50:	db01      	blt.n	801bc56 <__sfputc_r+0x16>
 801bc52:	290a      	cmp	r1, #10
 801bc54:	d103      	bne.n	801bc5e <__sfputc_r+0x1e>
 801bc56:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc5a:	f000 bb33 	b.w	801c2c4 <__swbuf_r>
 801bc5e:	6813      	ldr	r3, [r2, #0]
 801bc60:	1c58      	adds	r0, r3, #1
 801bc62:	6010      	str	r0, [r2, #0]
 801bc64:	7019      	strb	r1, [r3, #0]
 801bc66:	4608      	mov	r0, r1
 801bc68:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc6c:	4770      	bx	lr

0801bc6e <__sfputs_r>:
 801bc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc70:	4606      	mov	r6, r0
 801bc72:	460f      	mov	r7, r1
 801bc74:	4614      	mov	r4, r2
 801bc76:	18d5      	adds	r5, r2, r3
 801bc78:	42ac      	cmp	r4, r5
 801bc7a:	d101      	bne.n	801bc80 <__sfputs_r+0x12>
 801bc7c:	2000      	movs	r0, #0
 801bc7e:	e007      	b.n	801bc90 <__sfputs_r+0x22>
 801bc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc84:	463a      	mov	r2, r7
 801bc86:	4630      	mov	r0, r6
 801bc88:	f7ff ffda 	bl	801bc40 <__sfputc_r>
 801bc8c:	1c43      	adds	r3, r0, #1
 801bc8e:	d1f3      	bne.n	801bc78 <__sfputs_r+0xa>
 801bc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bc94 <_vfiprintf_r>:
 801bc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc98:	460d      	mov	r5, r1
 801bc9a:	b09d      	sub	sp, #116	; 0x74
 801bc9c:	4614      	mov	r4, r2
 801bc9e:	4698      	mov	r8, r3
 801bca0:	4606      	mov	r6, r0
 801bca2:	b118      	cbz	r0, 801bcac <_vfiprintf_r+0x18>
 801bca4:	6983      	ldr	r3, [r0, #24]
 801bca6:	b90b      	cbnz	r3, 801bcac <_vfiprintf_r+0x18>
 801bca8:	f000 fd48 	bl	801c73c <__sinit>
 801bcac:	4b89      	ldr	r3, [pc, #548]	; (801bed4 <_vfiprintf_r+0x240>)
 801bcae:	429d      	cmp	r5, r3
 801bcb0:	d11b      	bne.n	801bcea <_vfiprintf_r+0x56>
 801bcb2:	6875      	ldr	r5, [r6, #4]
 801bcb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bcb6:	07d9      	lsls	r1, r3, #31
 801bcb8:	d405      	bmi.n	801bcc6 <_vfiprintf_r+0x32>
 801bcba:	89ab      	ldrh	r3, [r5, #12]
 801bcbc:	059a      	lsls	r2, r3, #22
 801bcbe:	d402      	bmi.n	801bcc6 <_vfiprintf_r+0x32>
 801bcc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcc2:	f000 fdd9 	bl	801c878 <__retarget_lock_acquire_recursive>
 801bcc6:	89ab      	ldrh	r3, [r5, #12]
 801bcc8:	071b      	lsls	r3, r3, #28
 801bcca:	d501      	bpl.n	801bcd0 <_vfiprintf_r+0x3c>
 801bccc:	692b      	ldr	r3, [r5, #16]
 801bcce:	b9eb      	cbnz	r3, 801bd0c <_vfiprintf_r+0x78>
 801bcd0:	4629      	mov	r1, r5
 801bcd2:	4630      	mov	r0, r6
 801bcd4:	f000 fb48 	bl	801c368 <__swsetup_r>
 801bcd8:	b1c0      	cbz	r0, 801bd0c <_vfiprintf_r+0x78>
 801bcda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bcdc:	07dc      	lsls	r4, r3, #31
 801bcde:	d50e      	bpl.n	801bcfe <_vfiprintf_r+0x6a>
 801bce0:	f04f 30ff 	mov.w	r0, #4294967295
 801bce4:	b01d      	add	sp, #116	; 0x74
 801bce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcea:	4b7b      	ldr	r3, [pc, #492]	; (801bed8 <_vfiprintf_r+0x244>)
 801bcec:	429d      	cmp	r5, r3
 801bcee:	d101      	bne.n	801bcf4 <_vfiprintf_r+0x60>
 801bcf0:	68b5      	ldr	r5, [r6, #8]
 801bcf2:	e7df      	b.n	801bcb4 <_vfiprintf_r+0x20>
 801bcf4:	4b79      	ldr	r3, [pc, #484]	; (801bedc <_vfiprintf_r+0x248>)
 801bcf6:	429d      	cmp	r5, r3
 801bcf8:	bf08      	it	eq
 801bcfa:	68f5      	ldreq	r5, [r6, #12]
 801bcfc:	e7da      	b.n	801bcb4 <_vfiprintf_r+0x20>
 801bcfe:	89ab      	ldrh	r3, [r5, #12]
 801bd00:	0598      	lsls	r0, r3, #22
 801bd02:	d4ed      	bmi.n	801bce0 <_vfiprintf_r+0x4c>
 801bd04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd06:	f000 fdb9 	bl	801c87c <__retarget_lock_release_recursive>
 801bd0a:	e7e9      	b.n	801bce0 <_vfiprintf_r+0x4c>
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	9309      	str	r3, [sp, #36]	; 0x24
 801bd10:	2320      	movs	r3, #32
 801bd12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bd16:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd1a:	2330      	movs	r3, #48	; 0x30
 801bd1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801bee0 <_vfiprintf_r+0x24c>
 801bd20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bd24:	f04f 0901 	mov.w	r9, #1
 801bd28:	4623      	mov	r3, r4
 801bd2a:	469a      	mov	sl, r3
 801bd2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd30:	b10a      	cbz	r2, 801bd36 <_vfiprintf_r+0xa2>
 801bd32:	2a25      	cmp	r2, #37	; 0x25
 801bd34:	d1f9      	bne.n	801bd2a <_vfiprintf_r+0x96>
 801bd36:	ebba 0b04 	subs.w	fp, sl, r4
 801bd3a:	d00b      	beq.n	801bd54 <_vfiprintf_r+0xc0>
 801bd3c:	465b      	mov	r3, fp
 801bd3e:	4622      	mov	r2, r4
 801bd40:	4629      	mov	r1, r5
 801bd42:	4630      	mov	r0, r6
 801bd44:	f7ff ff93 	bl	801bc6e <__sfputs_r>
 801bd48:	3001      	adds	r0, #1
 801bd4a:	f000 80aa 	beq.w	801bea2 <_vfiprintf_r+0x20e>
 801bd4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd50:	445a      	add	r2, fp
 801bd52:	9209      	str	r2, [sp, #36]	; 0x24
 801bd54:	f89a 3000 	ldrb.w	r3, [sl]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	f000 80a2 	beq.w	801bea2 <_vfiprintf_r+0x20e>
 801bd5e:	2300      	movs	r3, #0
 801bd60:	f04f 32ff 	mov.w	r2, #4294967295
 801bd64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd68:	f10a 0a01 	add.w	sl, sl, #1
 801bd6c:	9304      	str	r3, [sp, #16]
 801bd6e:	9307      	str	r3, [sp, #28]
 801bd70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bd74:	931a      	str	r3, [sp, #104]	; 0x68
 801bd76:	4654      	mov	r4, sl
 801bd78:	2205      	movs	r2, #5
 801bd7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd7e:	4858      	ldr	r0, [pc, #352]	; (801bee0 <_vfiprintf_r+0x24c>)
 801bd80:	f7e4 fa5e 	bl	8000240 <memchr>
 801bd84:	9a04      	ldr	r2, [sp, #16]
 801bd86:	b9d8      	cbnz	r0, 801bdc0 <_vfiprintf_r+0x12c>
 801bd88:	06d1      	lsls	r1, r2, #27
 801bd8a:	bf44      	itt	mi
 801bd8c:	2320      	movmi	r3, #32
 801bd8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd92:	0713      	lsls	r3, r2, #28
 801bd94:	bf44      	itt	mi
 801bd96:	232b      	movmi	r3, #43	; 0x2b
 801bd98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd9c:	f89a 3000 	ldrb.w	r3, [sl]
 801bda0:	2b2a      	cmp	r3, #42	; 0x2a
 801bda2:	d015      	beq.n	801bdd0 <_vfiprintf_r+0x13c>
 801bda4:	9a07      	ldr	r2, [sp, #28]
 801bda6:	4654      	mov	r4, sl
 801bda8:	2000      	movs	r0, #0
 801bdaa:	f04f 0c0a 	mov.w	ip, #10
 801bdae:	4621      	mov	r1, r4
 801bdb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bdb4:	3b30      	subs	r3, #48	; 0x30
 801bdb6:	2b09      	cmp	r3, #9
 801bdb8:	d94e      	bls.n	801be58 <_vfiprintf_r+0x1c4>
 801bdba:	b1b0      	cbz	r0, 801bdea <_vfiprintf_r+0x156>
 801bdbc:	9207      	str	r2, [sp, #28]
 801bdbe:	e014      	b.n	801bdea <_vfiprintf_r+0x156>
 801bdc0:	eba0 0308 	sub.w	r3, r0, r8
 801bdc4:	fa09 f303 	lsl.w	r3, r9, r3
 801bdc8:	4313      	orrs	r3, r2
 801bdca:	9304      	str	r3, [sp, #16]
 801bdcc:	46a2      	mov	sl, r4
 801bdce:	e7d2      	b.n	801bd76 <_vfiprintf_r+0xe2>
 801bdd0:	9b03      	ldr	r3, [sp, #12]
 801bdd2:	1d19      	adds	r1, r3, #4
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	9103      	str	r1, [sp, #12]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	bfbb      	ittet	lt
 801bddc:	425b      	neglt	r3, r3
 801bdde:	f042 0202 	orrlt.w	r2, r2, #2
 801bde2:	9307      	strge	r3, [sp, #28]
 801bde4:	9307      	strlt	r3, [sp, #28]
 801bde6:	bfb8      	it	lt
 801bde8:	9204      	strlt	r2, [sp, #16]
 801bdea:	7823      	ldrb	r3, [r4, #0]
 801bdec:	2b2e      	cmp	r3, #46	; 0x2e
 801bdee:	d10c      	bne.n	801be0a <_vfiprintf_r+0x176>
 801bdf0:	7863      	ldrb	r3, [r4, #1]
 801bdf2:	2b2a      	cmp	r3, #42	; 0x2a
 801bdf4:	d135      	bne.n	801be62 <_vfiprintf_r+0x1ce>
 801bdf6:	9b03      	ldr	r3, [sp, #12]
 801bdf8:	1d1a      	adds	r2, r3, #4
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	9203      	str	r2, [sp, #12]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	bfb8      	it	lt
 801be02:	f04f 33ff 	movlt.w	r3, #4294967295
 801be06:	3402      	adds	r4, #2
 801be08:	9305      	str	r3, [sp, #20]
 801be0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801bef0 <_vfiprintf_r+0x25c>
 801be0e:	7821      	ldrb	r1, [r4, #0]
 801be10:	2203      	movs	r2, #3
 801be12:	4650      	mov	r0, sl
 801be14:	f7e4 fa14 	bl	8000240 <memchr>
 801be18:	b140      	cbz	r0, 801be2c <_vfiprintf_r+0x198>
 801be1a:	2340      	movs	r3, #64	; 0x40
 801be1c:	eba0 000a 	sub.w	r0, r0, sl
 801be20:	fa03 f000 	lsl.w	r0, r3, r0
 801be24:	9b04      	ldr	r3, [sp, #16]
 801be26:	4303      	orrs	r3, r0
 801be28:	3401      	adds	r4, #1
 801be2a:	9304      	str	r3, [sp, #16]
 801be2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be30:	482c      	ldr	r0, [pc, #176]	; (801bee4 <_vfiprintf_r+0x250>)
 801be32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be36:	2206      	movs	r2, #6
 801be38:	f7e4 fa02 	bl	8000240 <memchr>
 801be3c:	2800      	cmp	r0, #0
 801be3e:	d03f      	beq.n	801bec0 <_vfiprintf_r+0x22c>
 801be40:	4b29      	ldr	r3, [pc, #164]	; (801bee8 <_vfiprintf_r+0x254>)
 801be42:	bb1b      	cbnz	r3, 801be8c <_vfiprintf_r+0x1f8>
 801be44:	9b03      	ldr	r3, [sp, #12]
 801be46:	3307      	adds	r3, #7
 801be48:	f023 0307 	bic.w	r3, r3, #7
 801be4c:	3308      	adds	r3, #8
 801be4e:	9303      	str	r3, [sp, #12]
 801be50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be52:	443b      	add	r3, r7
 801be54:	9309      	str	r3, [sp, #36]	; 0x24
 801be56:	e767      	b.n	801bd28 <_vfiprintf_r+0x94>
 801be58:	fb0c 3202 	mla	r2, ip, r2, r3
 801be5c:	460c      	mov	r4, r1
 801be5e:	2001      	movs	r0, #1
 801be60:	e7a5      	b.n	801bdae <_vfiprintf_r+0x11a>
 801be62:	2300      	movs	r3, #0
 801be64:	3401      	adds	r4, #1
 801be66:	9305      	str	r3, [sp, #20]
 801be68:	4619      	mov	r1, r3
 801be6a:	f04f 0c0a 	mov.w	ip, #10
 801be6e:	4620      	mov	r0, r4
 801be70:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be74:	3a30      	subs	r2, #48	; 0x30
 801be76:	2a09      	cmp	r2, #9
 801be78:	d903      	bls.n	801be82 <_vfiprintf_r+0x1ee>
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d0c5      	beq.n	801be0a <_vfiprintf_r+0x176>
 801be7e:	9105      	str	r1, [sp, #20]
 801be80:	e7c3      	b.n	801be0a <_vfiprintf_r+0x176>
 801be82:	fb0c 2101 	mla	r1, ip, r1, r2
 801be86:	4604      	mov	r4, r0
 801be88:	2301      	movs	r3, #1
 801be8a:	e7f0      	b.n	801be6e <_vfiprintf_r+0x1da>
 801be8c:	ab03      	add	r3, sp, #12
 801be8e:	9300      	str	r3, [sp, #0]
 801be90:	462a      	mov	r2, r5
 801be92:	4b16      	ldr	r3, [pc, #88]	; (801beec <_vfiprintf_r+0x258>)
 801be94:	a904      	add	r1, sp, #16
 801be96:	4630      	mov	r0, r6
 801be98:	f3af 8000 	nop.w
 801be9c:	4607      	mov	r7, r0
 801be9e:	1c78      	adds	r0, r7, #1
 801bea0:	d1d6      	bne.n	801be50 <_vfiprintf_r+0x1bc>
 801bea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bea4:	07d9      	lsls	r1, r3, #31
 801bea6:	d405      	bmi.n	801beb4 <_vfiprintf_r+0x220>
 801bea8:	89ab      	ldrh	r3, [r5, #12]
 801beaa:	059a      	lsls	r2, r3, #22
 801beac:	d402      	bmi.n	801beb4 <_vfiprintf_r+0x220>
 801beae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801beb0:	f000 fce4 	bl	801c87c <__retarget_lock_release_recursive>
 801beb4:	89ab      	ldrh	r3, [r5, #12]
 801beb6:	065b      	lsls	r3, r3, #25
 801beb8:	f53f af12 	bmi.w	801bce0 <_vfiprintf_r+0x4c>
 801bebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bebe:	e711      	b.n	801bce4 <_vfiprintf_r+0x50>
 801bec0:	ab03      	add	r3, sp, #12
 801bec2:	9300      	str	r3, [sp, #0]
 801bec4:	462a      	mov	r2, r5
 801bec6:	4b09      	ldr	r3, [pc, #36]	; (801beec <_vfiprintf_r+0x258>)
 801bec8:	a904      	add	r1, sp, #16
 801beca:	4630      	mov	r0, r6
 801becc:	f000 f880 	bl	801bfd0 <_printf_i>
 801bed0:	e7e4      	b.n	801be9c <_vfiprintf_r+0x208>
 801bed2:	bf00      	nop
 801bed4:	08020328 	.word	0x08020328
 801bed8:	08020348 	.word	0x08020348
 801bedc:	08020308 	.word	0x08020308
 801bee0:	080202d0 	.word	0x080202d0
 801bee4:	080202da 	.word	0x080202da
 801bee8:	00000000 	.word	0x00000000
 801beec:	0801bc6f 	.word	0x0801bc6f
 801bef0:	080202d6 	.word	0x080202d6

0801bef4 <_printf_common>:
 801bef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bef8:	4616      	mov	r6, r2
 801befa:	4699      	mov	r9, r3
 801befc:	688a      	ldr	r2, [r1, #8]
 801befe:	690b      	ldr	r3, [r1, #16]
 801bf00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bf04:	4293      	cmp	r3, r2
 801bf06:	bfb8      	it	lt
 801bf08:	4613      	movlt	r3, r2
 801bf0a:	6033      	str	r3, [r6, #0]
 801bf0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bf10:	4607      	mov	r7, r0
 801bf12:	460c      	mov	r4, r1
 801bf14:	b10a      	cbz	r2, 801bf1a <_printf_common+0x26>
 801bf16:	3301      	adds	r3, #1
 801bf18:	6033      	str	r3, [r6, #0]
 801bf1a:	6823      	ldr	r3, [r4, #0]
 801bf1c:	0699      	lsls	r1, r3, #26
 801bf1e:	bf42      	ittt	mi
 801bf20:	6833      	ldrmi	r3, [r6, #0]
 801bf22:	3302      	addmi	r3, #2
 801bf24:	6033      	strmi	r3, [r6, #0]
 801bf26:	6825      	ldr	r5, [r4, #0]
 801bf28:	f015 0506 	ands.w	r5, r5, #6
 801bf2c:	d106      	bne.n	801bf3c <_printf_common+0x48>
 801bf2e:	f104 0a19 	add.w	sl, r4, #25
 801bf32:	68e3      	ldr	r3, [r4, #12]
 801bf34:	6832      	ldr	r2, [r6, #0]
 801bf36:	1a9b      	subs	r3, r3, r2
 801bf38:	42ab      	cmp	r3, r5
 801bf3a:	dc26      	bgt.n	801bf8a <_printf_common+0x96>
 801bf3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bf40:	1e13      	subs	r3, r2, #0
 801bf42:	6822      	ldr	r2, [r4, #0]
 801bf44:	bf18      	it	ne
 801bf46:	2301      	movne	r3, #1
 801bf48:	0692      	lsls	r2, r2, #26
 801bf4a:	d42b      	bmi.n	801bfa4 <_printf_common+0xb0>
 801bf4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bf50:	4649      	mov	r1, r9
 801bf52:	4638      	mov	r0, r7
 801bf54:	47c0      	blx	r8
 801bf56:	3001      	adds	r0, #1
 801bf58:	d01e      	beq.n	801bf98 <_printf_common+0xa4>
 801bf5a:	6823      	ldr	r3, [r4, #0]
 801bf5c:	68e5      	ldr	r5, [r4, #12]
 801bf5e:	6832      	ldr	r2, [r6, #0]
 801bf60:	f003 0306 	and.w	r3, r3, #6
 801bf64:	2b04      	cmp	r3, #4
 801bf66:	bf08      	it	eq
 801bf68:	1aad      	subeq	r5, r5, r2
 801bf6a:	68a3      	ldr	r3, [r4, #8]
 801bf6c:	6922      	ldr	r2, [r4, #16]
 801bf6e:	bf0c      	ite	eq
 801bf70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bf74:	2500      	movne	r5, #0
 801bf76:	4293      	cmp	r3, r2
 801bf78:	bfc4      	itt	gt
 801bf7a:	1a9b      	subgt	r3, r3, r2
 801bf7c:	18ed      	addgt	r5, r5, r3
 801bf7e:	2600      	movs	r6, #0
 801bf80:	341a      	adds	r4, #26
 801bf82:	42b5      	cmp	r5, r6
 801bf84:	d11a      	bne.n	801bfbc <_printf_common+0xc8>
 801bf86:	2000      	movs	r0, #0
 801bf88:	e008      	b.n	801bf9c <_printf_common+0xa8>
 801bf8a:	2301      	movs	r3, #1
 801bf8c:	4652      	mov	r2, sl
 801bf8e:	4649      	mov	r1, r9
 801bf90:	4638      	mov	r0, r7
 801bf92:	47c0      	blx	r8
 801bf94:	3001      	adds	r0, #1
 801bf96:	d103      	bne.n	801bfa0 <_printf_common+0xac>
 801bf98:	f04f 30ff 	mov.w	r0, #4294967295
 801bf9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfa0:	3501      	adds	r5, #1
 801bfa2:	e7c6      	b.n	801bf32 <_printf_common+0x3e>
 801bfa4:	18e1      	adds	r1, r4, r3
 801bfa6:	1c5a      	adds	r2, r3, #1
 801bfa8:	2030      	movs	r0, #48	; 0x30
 801bfaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bfae:	4422      	add	r2, r4
 801bfb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bfb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bfb8:	3302      	adds	r3, #2
 801bfba:	e7c7      	b.n	801bf4c <_printf_common+0x58>
 801bfbc:	2301      	movs	r3, #1
 801bfbe:	4622      	mov	r2, r4
 801bfc0:	4649      	mov	r1, r9
 801bfc2:	4638      	mov	r0, r7
 801bfc4:	47c0      	blx	r8
 801bfc6:	3001      	adds	r0, #1
 801bfc8:	d0e6      	beq.n	801bf98 <_printf_common+0xa4>
 801bfca:	3601      	adds	r6, #1
 801bfcc:	e7d9      	b.n	801bf82 <_printf_common+0x8e>
	...

0801bfd0 <_printf_i>:
 801bfd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bfd4:	460c      	mov	r4, r1
 801bfd6:	4691      	mov	r9, r2
 801bfd8:	7e27      	ldrb	r7, [r4, #24]
 801bfda:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bfdc:	2f78      	cmp	r7, #120	; 0x78
 801bfde:	4680      	mov	r8, r0
 801bfe0:	469a      	mov	sl, r3
 801bfe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bfe6:	d807      	bhi.n	801bff8 <_printf_i+0x28>
 801bfe8:	2f62      	cmp	r7, #98	; 0x62
 801bfea:	d80a      	bhi.n	801c002 <_printf_i+0x32>
 801bfec:	2f00      	cmp	r7, #0
 801bfee:	f000 80d8 	beq.w	801c1a2 <_printf_i+0x1d2>
 801bff2:	2f58      	cmp	r7, #88	; 0x58
 801bff4:	f000 80a3 	beq.w	801c13e <_printf_i+0x16e>
 801bff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c000:	e03a      	b.n	801c078 <_printf_i+0xa8>
 801c002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c006:	2b15      	cmp	r3, #21
 801c008:	d8f6      	bhi.n	801bff8 <_printf_i+0x28>
 801c00a:	a001      	add	r0, pc, #4	; (adr r0, 801c010 <_printf_i+0x40>)
 801c00c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c010:	0801c069 	.word	0x0801c069
 801c014:	0801c07d 	.word	0x0801c07d
 801c018:	0801bff9 	.word	0x0801bff9
 801c01c:	0801bff9 	.word	0x0801bff9
 801c020:	0801bff9 	.word	0x0801bff9
 801c024:	0801bff9 	.word	0x0801bff9
 801c028:	0801c07d 	.word	0x0801c07d
 801c02c:	0801bff9 	.word	0x0801bff9
 801c030:	0801bff9 	.word	0x0801bff9
 801c034:	0801bff9 	.word	0x0801bff9
 801c038:	0801bff9 	.word	0x0801bff9
 801c03c:	0801c189 	.word	0x0801c189
 801c040:	0801c0ad 	.word	0x0801c0ad
 801c044:	0801c16b 	.word	0x0801c16b
 801c048:	0801bff9 	.word	0x0801bff9
 801c04c:	0801bff9 	.word	0x0801bff9
 801c050:	0801c1ab 	.word	0x0801c1ab
 801c054:	0801bff9 	.word	0x0801bff9
 801c058:	0801c0ad 	.word	0x0801c0ad
 801c05c:	0801bff9 	.word	0x0801bff9
 801c060:	0801bff9 	.word	0x0801bff9
 801c064:	0801c173 	.word	0x0801c173
 801c068:	680b      	ldr	r3, [r1, #0]
 801c06a:	1d1a      	adds	r2, r3, #4
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	600a      	str	r2, [r1, #0]
 801c070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c078:	2301      	movs	r3, #1
 801c07a:	e0a3      	b.n	801c1c4 <_printf_i+0x1f4>
 801c07c:	6825      	ldr	r5, [r4, #0]
 801c07e:	6808      	ldr	r0, [r1, #0]
 801c080:	062e      	lsls	r6, r5, #24
 801c082:	f100 0304 	add.w	r3, r0, #4
 801c086:	d50a      	bpl.n	801c09e <_printf_i+0xce>
 801c088:	6805      	ldr	r5, [r0, #0]
 801c08a:	600b      	str	r3, [r1, #0]
 801c08c:	2d00      	cmp	r5, #0
 801c08e:	da03      	bge.n	801c098 <_printf_i+0xc8>
 801c090:	232d      	movs	r3, #45	; 0x2d
 801c092:	426d      	negs	r5, r5
 801c094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c098:	485e      	ldr	r0, [pc, #376]	; (801c214 <_printf_i+0x244>)
 801c09a:	230a      	movs	r3, #10
 801c09c:	e019      	b.n	801c0d2 <_printf_i+0x102>
 801c09e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c0a2:	6805      	ldr	r5, [r0, #0]
 801c0a4:	600b      	str	r3, [r1, #0]
 801c0a6:	bf18      	it	ne
 801c0a8:	b22d      	sxthne	r5, r5
 801c0aa:	e7ef      	b.n	801c08c <_printf_i+0xbc>
 801c0ac:	680b      	ldr	r3, [r1, #0]
 801c0ae:	6825      	ldr	r5, [r4, #0]
 801c0b0:	1d18      	adds	r0, r3, #4
 801c0b2:	6008      	str	r0, [r1, #0]
 801c0b4:	0628      	lsls	r0, r5, #24
 801c0b6:	d501      	bpl.n	801c0bc <_printf_i+0xec>
 801c0b8:	681d      	ldr	r5, [r3, #0]
 801c0ba:	e002      	b.n	801c0c2 <_printf_i+0xf2>
 801c0bc:	0669      	lsls	r1, r5, #25
 801c0be:	d5fb      	bpl.n	801c0b8 <_printf_i+0xe8>
 801c0c0:	881d      	ldrh	r5, [r3, #0]
 801c0c2:	4854      	ldr	r0, [pc, #336]	; (801c214 <_printf_i+0x244>)
 801c0c4:	2f6f      	cmp	r7, #111	; 0x6f
 801c0c6:	bf0c      	ite	eq
 801c0c8:	2308      	moveq	r3, #8
 801c0ca:	230a      	movne	r3, #10
 801c0cc:	2100      	movs	r1, #0
 801c0ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c0d2:	6866      	ldr	r6, [r4, #4]
 801c0d4:	60a6      	str	r6, [r4, #8]
 801c0d6:	2e00      	cmp	r6, #0
 801c0d8:	bfa2      	ittt	ge
 801c0da:	6821      	ldrge	r1, [r4, #0]
 801c0dc:	f021 0104 	bicge.w	r1, r1, #4
 801c0e0:	6021      	strge	r1, [r4, #0]
 801c0e2:	b90d      	cbnz	r5, 801c0e8 <_printf_i+0x118>
 801c0e4:	2e00      	cmp	r6, #0
 801c0e6:	d04d      	beq.n	801c184 <_printf_i+0x1b4>
 801c0e8:	4616      	mov	r6, r2
 801c0ea:	fbb5 f1f3 	udiv	r1, r5, r3
 801c0ee:	fb03 5711 	mls	r7, r3, r1, r5
 801c0f2:	5dc7      	ldrb	r7, [r0, r7]
 801c0f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c0f8:	462f      	mov	r7, r5
 801c0fa:	42bb      	cmp	r3, r7
 801c0fc:	460d      	mov	r5, r1
 801c0fe:	d9f4      	bls.n	801c0ea <_printf_i+0x11a>
 801c100:	2b08      	cmp	r3, #8
 801c102:	d10b      	bne.n	801c11c <_printf_i+0x14c>
 801c104:	6823      	ldr	r3, [r4, #0]
 801c106:	07df      	lsls	r7, r3, #31
 801c108:	d508      	bpl.n	801c11c <_printf_i+0x14c>
 801c10a:	6923      	ldr	r3, [r4, #16]
 801c10c:	6861      	ldr	r1, [r4, #4]
 801c10e:	4299      	cmp	r1, r3
 801c110:	bfde      	ittt	le
 801c112:	2330      	movle	r3, #48	; 0x30
 801c114:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c118:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c11c:	1b92      	subs	r2, r2, r6
 801c11e:	6122      	str	r2, [r4, #16]
 801c120:	f8cd a000 	str.w	sl, [sp]
 801c124:	464b      	mov	r3, r9
 801c126:	aa03      	add	r2, sp, #12
 801c128:	4621      	mov	r1, r4
 801c12a:	4640      	mov	r0, r8
 801c12c:	f7ff fee2 	bl	801bef4 <_printf_common>
 801c130:	3001      	adds	r0, #1
 801c132:	d14c      	bne.n	801c1ce <_printf_i+0x1fe>
 801c134:	f04f 30ff 	mov.w	r0, #4294967295
 801c138:	b004      	add	sp, #16
 801c13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c13e:	4835      	ldr	r0, [pc, #212]	; (801c214 <_printf_i+0x244>)
 801c140:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c144:	6823      	ldr	r3, [r4, #0]
 801c146:	680e      	ldr	r6, [r1, #0]
 801c148:	061f      	lsls	r7, r3, #24
 801c14a:	f856 5b04 	ldr.w	r5, [r6], #4
 801c14e:	600e      	str	r6, [r1, #0]
 801c150:	d514      	bpl.n	801c17c <_printf_i+0x1ac>
 801c152:	07d9      	lsls	r1, r3, #31
 801c154:	bf44      	itt	mi
 801c156:	f043 0320 	orrmi.w	r3, r3, #32
 801c15a:	6023      	strmi	r3, [r4, #0]
 801c15c:	b91d      	cbnz	r5, 801c166 <_printf_i+0x196>
 801c15e:	6823      	ldr	r3, [r4, #0]
 801c160:	f023 0320 	bic.w	r3, r3, #32
 801c164:	6023      	str	r3, [r4, #0]
 801c166:	2310      	movs	r3, #16
 801c168:	e7b0      	b.n	801c0cc <_printf_i+0xfc>
 801c16a:	6823      	ldr	r3, [r4, #0]
 801c16c:	f043 0320 	orr.w	r3, r3, #32
 801c170:	6023      	str	r3, [r4, #0]
 801c172:	2378      	movs	r3, #120	; 0x78
 801c174:	4828      	ldr	r0, [pc, #160]	; (801c218 <_printf_i+0x248>)
 801c176:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c17a:	e7e3      	b.n	801c144 <_printf_i+0x174>
 801c17c:	065e      	lsls	r6, r3, #25
 801c17e:	bf48      	it	mi
 801c180:	b2ad      	uxthmi	r5, r5
 801c182:	e7e6      	b.n	801c152 <_printf_i+0x182>
 801c184:	4616      	mov	r6, r2
 801c186:	e7bb      	b.n	801c100 <_printf_i+0x130>
 801c188:	680b      	ldr	r3, [r1, #0]
 801c18a:	6826      	ldr	r6, [r4, #0]
 801c18c:	6960      	ldr	r0, [r4, #20]
 801c18e:	1d1d      	adds	r5, r3, #4
 801c190:	600d      	str	r5, [r1, #0]
 801c192:	0635      	lsls	r5, r6, #24
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	d501      	bpl.n	801c19c <_printf_i+0x1cc>
 801c198:	6018      	str	r0, [r3, #0]
 801c19a:	e002      	b.n	801c1a2 <_printf_i+0x1d2>
 801c19c:	0671      	lsls	r1, r6, #25
 801c19e:	d5fb      	bpl.n	801c198 <_printf_i+0x1c8>
 801c1a0:	8018      	strh	r0, [r3, #0]
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	6123      	str	r3, [r4, #16]
 801c1a6:	4616      	mov	r6, r2
 801c1a8:	e7ba      	b.n	801c120 <_printf_i+0x150>
 801c1aa:	680b      	ldr	r3, [r1, #0]
 801c1ac:	1d1a      	adds	r2, r3, #4
 801c1ae:	600a      	str	r2, [r1, #0]
 801c1b0:	681e      	ldr	r6, [r3, #0]
 801c1b2:	6862      	ldr	r2, [r4, #4]
 801c1b4:	2100      	movs	r1, #0
 801c1b6:	4630      	mov	r0, r6
 801c1b8:	f7e4 f842 	bl	8000240 <memchr>
 801c1bc:	b108      	cbz	r0, 801c1c2 <_printf_i+0x1f2>
 801c1be:	1b80      	subs	r0, r0, r6
 801c1c0:	6060      	str	r0, [r4, #4]
 801c1c2:	6863      	ldr	r3, [r4, #4]
 801c1c4:	6123      	str	r3, [r4, #16]
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c1cc:	e7a8      	b.n	801c120 <_printf_i+0x150>
 801c1ce:	6923      	ldr	r3, [r4, #16]
 801c1d0:	4632      	mov	r2, r6
 801c1d2:	4649      	mov	r1, r9
 801c1d4:	4640      	mov	r0, r8
 801c1d6:	47d0      	blx	sl
 801c1d8:	3001      	adds	r0, #1
 801c1da:	d0ab      	beq.n	801c134 <_printf_i+0x164>
 801c1dc:	6823      	ldr	r3, [r4, #0]
 801c1de:	079b      	lsls	r3, r3, #30
 801c1e0:	d413      	bmi.n	801c20a <_printf_i+0x23a>
 801c1e2:	68e0      	ldr	r0, [r4, #12]
 801c1e4:	9b03      	ldr	r3, [sp, #12]
 801c1e6:	4298      	cmp	r0, r3
 801c1e8:	bfb8      	it	lt
 801c1ea:	4618      	movlt	r0, r3
 801c1ec:	e7a4      	b.n	801c138 <_printf_i+0x168>
 801c1ee:	2301      	movs	r3, #1
 801c1f0:	4632      	mov	r2, r6
 801c1f2:	4649      	mov	r1, r9
 801c1f4:	4640      	mov	r0, r8
 801c1f6:	47d0      	blx	sl
 801c1f8:	3001      	adds	r0, #1
 801c1fa:	d09b      	beq.n	801c134 <_printf_i+0x164>
 801c1fc:	3501      	adds	r5, #1
 801c1fe:	68e3      	ldr	r3, [r4, #12]
 801c200:	9903      	ldr	r1, [sp, #12]
 801c202:	1a5b      	subs	r3, r3, r1
 801c204:	42ab      	cmp	r3, r5
 801c206:	dcf2      	bgt.n	801c1ee <_printf_i+0x21e>
 801c208:	e7eb      	b.n	801c1e2 <_printf_i+0x212>
 801c20a:	2500      	movs	r5, #0
 801c20c:	f104 0619 	add.w	r6, r4, #25
 801c210:	e7f5      	b.n	801c1fe <_printf_i+0x22e>
 801c212:	bf00      	nop
 801c214:	080202e1 	.word	0x080202e1
 801c218:	080202f2 	.word	0x080202f2

0801c21c <_sbrk_r>:
 801c21c:	b538      	push	{r3, r4, r5, lr}
 801c21e:	4d06      	ldr	r5, [pc, #24]	; (801c238 <_sbrk_r+0x1c>)
 801c220:	2300      	movs	r3, #0
 801c222:	4604      	mov	r4, r0
 801c224:	4608      	mov	r0, r1
 801c226:	602b      	str	r3, [r5, #0]
 801c228:	f7e5 fa0c 	bl	8001644 <_sbrk>
 801c22c:	1c43      	adds	r3, r0, #1
 801c22e:	d102      	bne.n	801c236 <_sbrk_r+0x1a>
 801c230:	682b      	ldr	r3, [r5, #0]
 801c232:	b103      	cbz	r3, 801c236 <_sbrk_r+0x1a>
 801c234:	6023      	str	r3, [r4, #0]
 801c236:	bd38      	pop	{r3, r4, r5, pc}
 801c238:	2000e54c 	.word	0x2000e54c

0801c23c <_raise_r>:
 801c23c:	291f      	cmp	r1, #31
 801c23e:	b538      	push	{r3, r4, r5, lr}
 801c240:	4604      	mov	r4, r0
 801c242:	460d      	mov	r5, r1
 801c244:	d904      	bls.n	801c250 <_raise_r+0x14>
 801c246:	2316      	movs	r3, #22
 801c248:	6003      	str	r3, [r0, #0]
 801c24a:	f04f 30ff 	mov.w	r0, #4294967295
 801c24e:	bd38      	pop	{r3, r4, r5, pc}
 801c250:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c252:	b112      	cbz	r2, 801c25a <_raise_r+0x1e>
 801c254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c258:	b94b      	cbnz	r3, 801c26e <_raise_r+0x32>
 801c25a:	4620      	mov	r0, r4
 801c25c:	f000 f830 	bl	801c2c0 <_getpid_r>
 801c260:	462a      	mov	r2, r5
 801c262:	4601      	mov	r1, r0
 801c264:	4620      	mov	r0, r4
 801c266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c26a:	f000 b817 	b.w	801c29c <_kill_r>
 801c26e:	2b01      	cmp	r3, #1
 801c270:	d00a      	beq.n	801c288 <_raise_r+0x4c>
 801c272:	1c59      	adds	r1, r3, #1
 801c274:	d103      	bne.n	801c27e <_raise_r+0x42>
 801c276:	2316      	movs	r3, #22
 801c278:	6003      	str	r3, [r0, #0]
 801c27a:	2001      	movs	r0, #1
 801c27c:	e7e7      	b.n	801c24e <_raise_r+0x12>
 801c27e:	2400      	movs	r4, #0
 801c280:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c284:	4628      	mov	r0, r5
 801c286:	4798      	blx	r3
 801c288:	2000      	movs	r0, #0
 801c28a:	e7e0      	b.n	801c24e <_raise_r+0x12>

0801c28c <raise>:
 801c28c:	4b02      	ldr	r3, [pc, #8]	; (801c298 <raise+0xc>)
 801c28e:	4601      	mov	r1, r0
 801c290:	6818      	ldr	r0, [r3, #0]
 801c292:	f7ff bfd3 	b.w	801c23c <_raise_r>
 801c296:	bf00      	nop
 801c298:	20000074 	.word	0x20000074

0801c29c <_kill_r>:
 801c29c:	b538      	push	{r3, r4, r5, lr}
 801c29e:	4d07      	ldr	r5, [pc, #28]	; (801c2bc <_kill_r+0x20>)
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	4604      	mov	r4, r0
 801c2a4:	4608      	mov	r0, r1
 801c2a6:	4611      	mov	r1, r2
 801c2a8:	602b      	str	r3, [r5, #0]
 801c2aa:	f7e5 f943 	bl	8001534 <_kill>
 801c2ae:	1c43      	adds	r3, r0, #1
 801c2b0:	d102      	bne.n	801c2b8 <_kill_r+0x1c>
 801c2b2:	682b      	ldr	r3, [r5, #0]
 801c2b4:	b103      	cbz	r3, 801c2b8 <_kill_r+0x1c>
 801c2b6:	6023      	str	r3, [r4, #0]
 801c2b8:	bd38      	pop	{r3, r4, r5, pc}
 801c2ba:	bf00      	nop
 801c2bc:	2000e54c 	.word	0x2000e54c

0801c2c0 <_getpid_r>:
 801c2c0:	f7e5 b930 	b.w	8001524 <_getpid>

0801c2c4 <__swbuf_r>:
 801c2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2c6:	460e      	mov	r6, r1
 801c2c8:	4614      	mov	r4, r2
 801c2ca:	4605      	mov	r5, r0
 801c2cc:	b118      	cbz	r0, 801c2d6 <__swbuf_r+0x12>
 801c2ce:	6983      	ldr	r3, [r0, #24]
 801c2d0:	b90b      	cbnz	r3, 801c2d6 <__swbuf_r+0x12>
 801c2d2:	f000 fa33 	bl	801c73c <__sinit>
 801c2d6:	4b21      	ldr	r3, [pc, #132]	; (801c35c <__swbuf_r+0x98>)
 801c2d8:	429c      	cmp	r4, r3
 801c2da:	d12b      	bne.n	801c334 <__swbuf_r+0x70>
 801c2dc:	686c      	ldr	r4, [r5, #4]
 801c2de:	69a3      	ldr	r3, [r4, #24]
 801c2e0:	60a3      	str	r3, [r4, #8]
 801c2e2:	89a3      	ldrh	r3, [r4, #12]
 801c2e4:	071a      	lsls	r2, r3, #28
 801c2e6:	d52f      	bpl.n	801c348 <__swbuf_r+0x84>
 801c2e8:	6923      	ldr	r3, [r4, #16]
 801c2ea:	b36b      	cbz	r3, 801c348 <__swbuf_r+0x84>
 801c2ec:	6923      	ldr	r3, [r4, #16]
 801c2ee:	6820      	ldr	r0, [r4, #0]
 801c2f0:	1ac0      	subs	r0, r0, r3
 801c2f2:	6963      	ldr	r3, [r4, #20]
 801c2f4:	b2f6      	uxtb	r6, r6
 801c2f6:	4283      	cmp	r3, r0
 801c2f8:	4637      	mov	r7, r6
 801c2fa:	dc04      	bgt.n	801c306 <__swbuf_r+0x42>
 801c2fc:	4621      	mov	r1, r4
 801c2fe:	4628      	mov	r0, r5
 801c300:	f000 f988 	bl	801c614 <_fflush_r>
 801c304:	bb30      	cbnz	r0, 801c354 <__swbuf_r+0x90>
 801c306:	68a3      	ldr	r3, [r4, #8]
 801c308:	3b01      	subs	r3, #1
 801c30a:	60a3      	str	r3, [r4, #8]
 801c30c:	6823      	ldr	r3, [r4, #0]
 801c30e:	1c5a      	adds	r2, r3, #1
 801c310:	6022      	str	r2, [r4, #0]
 801c312:	701e      	strb	r6, [r3, #0]
 801c314:	6963      	ldr	r3, [r4, #20]
 801c316:	3001      	adds	r0, #1
 801c318:	4283      	cmp	r3, r0
 801c31a:	d004      	beq.n	801c326 <__swbuf_r+0x62>
 801c31c:	89a3      	ldrh	r3, [r4, #12]
 801c31e:	07db      	lsls	r3, r3, #31
 801c320:	d506      	bpl.n	801c330 <__swbuf_r+0x6c>
 801c322:	2e0a      	cmp	r6, #10
 801c324:	d104      	bne.n	801c330 <__swbuf_r+0x6c>
 801c326:	4621      	mov	r1, r4
 801c328:	4628      	mov	r0, r5
 801c32a:	f000 f973 	bl	801c614 <_fflush_r>
 801c32e:	b988      	cbnz	r0, 801c354 <__swbuf_r+0x90>
 801c330:	4638      	mov	r0, r7
 801c332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c334:	4b0a      	ldr	r3, [pc, #40]	; (801c360 <__swbuf_r+0x9c>)
 801c336:	429c      	cmp	r4, r3
 801c338:	d101      	bne.n	801c33e <__swbuf_r+0x7a>
 801c33a:	68ac      	ldr	r4, [r5, #8]
 801c33c:	e7cf      	b.n	801c2de <__swbuf_r+0x1a>
 801c33e:	4b09      	ldr	r3, [pc, #36]	; (801c364 <__swbuf_r+0xa0>)
 801c340:	429c      	cmp	r4, r3
 801c342:	bf08      	it	eq
 801c344:	68ec      	ldreq	r4, [r5, #12]
 801c346:	e7ca      	b.n	801c2de <__swbuf_r+0x1a>
 801c348:	4621      	mov	r1, r4
 801c34a:	4628      	mov	r0, r5
 801c34c:	f000 f80c 	bl	801c368 <__swsetup_r>
 801c350:	2800      	cmp	r0, #0
 801c352:	d0cb      	beq.n	801c2ec <__swbuf_r+0x28>
 801c354:	f04f 37ff 	mov.w	r7, #4294967295
 801c358:	e7ea      	b.n	801c330 <__swbuf_r+0x6c>
 801c35a:	bf00      	nop
 801c35c:	08020328 	.word	0x08020328
 801c360:	08020348 	.word	0x08020348
 801c364:	08020308 	.word	0x08020308

0801c368 <__swsetup_r>:
 801c368:	4b32      	ldr	r3, [pc, #200]	; (801c434 <__swsetup_r+0xcc>)
 801c36a:	b570      	push	{r4, r5, r6, lr}
 801c36c:	681d      	ldr	r5, [r3, #0]
 801c36e:	4606      	mov	r6, r0
 801c370:	460c      	mov	r4, r1
 801c372:	b125      	cbz	r5, 801c37e <__swsetup_r+0x16>
 801c374:	69ab      	ldr	r3, [r5, #24]
 801c376:	b913      	cbnz	r3, 801c37e <__swsetup_r+0x16>
 801c378:	4628      	mov	r0, r5
 801c37a:	f000 f9df 	bl	801c73c <__sinit>
 801c37e:	4b2e      	ldr	r3, [pc, #184]	; (801c438 <__swsetup_r+0xd0>)
 801c380:	429c      	cmp	r4, r3
 801c382:	d10f      	bne.n	801c3a4 <__swsetup_r+0x3c>
 801c384:	686c      	ldr	r4, [r5, #4]
 801c386:	89a3      	ldrh	r3, [r4, #12]
 801c388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c38c:	0719      	lsls	r1, r3, #28
 801c38e:	d42c      	bmi.n	801c3ea <__swsetup_r+0x82>
 801c390:	06dd      	lsls	r5, r3, #27
 801c392:	d411      	bmi.n	801c3b8 <__swsetup_r+0x50>
 801c394:	2309      	movs	r3, #9
 801c396:	6033      	str	r3, [r6, #0]
 801c398:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c39c:	81a3      	strh	r3, [r4, #12]
 801c39e:	f04f 30ff 	mov.w	r0, #4294967295
 801c3a2:	e03e      	b.n	801c422 <__swsetup_r+0xba>
 801c3a4:	4b25      	ldr	r3, [pc, #148]	; (801c43c <__swsetup_r+0xd4>)
 801c3a6:	429c      	cmp	r4, r3
 801c3a8:	d101      	bne.n	801c3ae <__swsetup_r+0x46>
 801c3aa:	68ac      	ldr	r4, [r5, #8]
 801c3ac:	e7eb      	b.n	801c386 <__swsetup_r+0x1e>
 801c3ae:	4b24      	ldr	r3, [pc, #144]	; (801c440 <__swsetup_r+0xd8>)
 801c3b0:	429c      	cmp	r4, r3
 801c3b2:	bf08      	it	eq
 801c3b4:	68ec      	ldreq	r4, [r5, #12]
 801c3b6:	e7e6      	b.n	801c386 <__swsetup_r+0x1e>
 801c3b8:	0758      	lsls	r0, r3, #29
 801c3ba:	d512      	bpl.n	801c3e2 <__swsetup_r+0x7a>
 801c3bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c3be:	b141      	cbz	r1, 801c3d2 <__swsetup_r+0x6a>
 801c3c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c3c4:	4299      	cmp	r1, r3
 801c3c6:	d002      	beq.n	801c3ce <__swsetup_r+0x66>
 801c3c8:	4630      	mov	r0, r6
 801c3ca:	f7ff fb8f 	bl	801baec <_free_r>
 801c3ce:	2300      	movs	r3, #0
 801c3d0:	6363      	str	r3, [r4, #52]	; 0x34
 801c3d2:	89a3      	ldrh	r3, [r4, #12]
 801c3d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c3d8:	81a3      	strh	r3, [r4, #12]
 801c3da:	2300      	movs	r3, #0
 801c3dc:	6063      	str	r3, [r4, #4]
 801c3de:	6923      	ldr	r3, [r4, #16]
 801c3e0:	6023      	str	r3, [r4, #0]
 801c3e2:	89a3      	ldrh	r3, [r4, #12]
 801c3e4:	f043 0308 	orr.w	r3, r3, #8
 801c3e8:	81a3      	strh	r3, [r4, #12]
 801c3ea:	6923      	ldr	r3, [r4, #16]
 801c3ec:	b94b      	cbnz	r3, 801c402 <__swsetup_r+0x9a>
 801c3ee:	89a3      	ldrh	r3, [r4, #12]
 801c3f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c3f8:	d003      	beq.n	801c402 <__swsetup_r+0x9a>
 801c3fa:	4621      	mov	r1, r4
 801c3fc:	4630      	mov	r0, r6
 801c3fe:	f000 fa63 	bl	801c8c8 <__smakebuf_r>
 801c402:	89a0      	ldrh	r0, [r4, #12]
 801c404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c408:	f010 0301 	ands.w	r3, r0, #1
 801c40c:	d00a      	beq.n	801c424 <__swsetup_r+0xbc>
 801c40e:	2300      	movs	r3, #0
 801c410:	60a3      	str	r3, [r4, #8]
 801c412:	6963      	ldr	r3, [r4, #20]
 801c414:	425b      	negs	r3, r3
 801c416:	61a3      	str	r3, [r4, #24]
 801c418:	6923      	ldr	r3, [r4, #16]
 801c41a:	b943      	cbnz	r3, 801c42e <__swsetup_r+0xc6>
 801c41c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c420:	d1ba      	bne.n	801c398 <__swsetup_r+0x30>
 801c422:	bd70      	pop	{r4, r5, r6, pc}
 801c424:	0781      	lsls	r1, r0, #30
 801c426:	bf58      	it	pl
 801c428:	6963      	ldrpl	r3, [r4, #20]
 801c42a:	60a3      	str	r3, [r4, #8]
 801c42c:	e7f4      	b.n	801c418 <__swsetup_r+0xb0>
 801c42e:	2000      	movs	r0, #0
 801c430:	e7f7      	b.n	801c422 <__swsetup_r+0xba>
 801c432:	bf00      	nop
 801c434:	20000074 	.word	0x20000074
 801c438:	08020328 	.word	0x08020328
 801c43c:	08020348 	.word	0x08020348
 801c440:	08020308 	.word	0x08020308

0801c444 <__register_exitproc>:
 801c444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c448:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801c504 <__register_exitproc+0xc0>
 801c44c:	4606      	mov	r6, r0
 801c44e:	f8d8 0000 	ldr.w	r0, [r8]
 801c452:	461f      	mov	r7, r3
 801c454:	460d      	mov	r5, r1
 801c456:	4691      	mov	r9, r2
 801c458:	f000 fa0e 	bl	801c878 <__retarget_lock_acquire_recursive>
 801c45c:	4b25      	ldr	r3, [pc, #148]	; (801c4f4 <__register_exitproc+0xb0>)
 801c45e:	681c      	ldr	r4, [r3, #0]
 801c460:	b934      	cbnz	r4, 801c470 <__register_exitproc+0x2c>
 801c462:	4c25      	ldr	r4, [pc, #148]	; (801c4f8 <__register_exitproc+0xb4>)
 801c464:	601c      	str	r4, [r3, #0]
 801c466:	4b25      	ldr	r3, [pc, #148]	; (801c4fc <__register_exitproc+0xb8>)
 801c468:	b113      	cbz	r3, 801c470 <__register_exitproc+0x2c>
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801c470:	6863      	ldr	r3, [r4, #4]
 801c472:	2b1f      	cmp	r3, #31
 801c474:	dd07      	ble.n	801c486 <__register_exitproc+0x42>
 801c476:	f8d8 0000 	ldr.w	r0, [r8]
 801c47a:	f000 f9ff 	bl	801c87c <__retarget_lock_release_recursive>
 801c47e:	f04f 30ff 	mov.w	r0, #4294967295
 801c482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c486:	b34e      	cbz	r6, 801c4dc <__register_exitproc+0x98>
 801c488:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801c48c:	b988      	cbnz	r0, 801c4b2 <__register_exitproc+0x6e>
 801c48e:	4b1c      	ldr	r3, [pc, #112]	; (801c500 <__register_exitproc+0xbc>)
 801c490:	b923      	cbnz	r3, 801c49c <__register_exitproc+0x58>
 801c492:	f8d8 0000 	ldr.w	r0, [r8]
 801c496:	f000 f9f0 	bl	801c87a <__retarget_lock_release>
 801c49a:	e7f0      	b.n	801c47e <__register_exitproc+0x3a>
 801c49c:	f44f 7084 	mov.w	r0, #264	; 0x108
 801c4a0:	f7ff fafe 	bl	801baa0 <malloc>
 801c4a4:	2800      	cmp	r0, #0
 801c4a6:	d0f4      	beq.n	801c492 <__register_exitproc+0x4e>
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801c4ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801c4b2:	6863      	ldr	r3, [r4, #4]
 801c4b4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801c4b8:	2201      	movs	r2, #1
 801c4ba:	409a      	lsls	r2, r3
 801c4bc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801c4c0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801c4c4:	4313      	orrs	r3, r2
 801c4c6:	2e02      	cmp	r6, #2
 801c4c8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801c4cc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801c4d0:	bf02      	ittt	eq
 801c4d2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801c4d6:	431a      	orreq	r2, r3
 801c4d8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801c4dc:	6863      	ldr	r3, [r4, #4]
 801c4de:	f8d8 0000 	ldr.w	r0, [r8]
 801c4e2:	1c5a      	adds	r2, r3, #1
 801c4e4:	3302      	adds	r3, #2
 801c4e6:	6062      	str	r2, [r4, #4]
 801c4e8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801c4ec:	f000 f9c6 	bl	801c87c <__retarget_lock_release_recursive>
 801c4f0:	2000      	movs	r0, #0
 801c4f2:	e7c6      	b.n	801c482 <__register_exitproc+0x3e>
 801c4f4:	2000e1e4 	.word	0x2000e1e4
 801c4f8:	2000e158 	.word	0x2000e158
 801c4fc:	08020304 	.word	0x08020304
 801c500:	0801baa1 	.word	0x0801baa1
 801c504:	200000d8 	.word	0x200000d8

0801c508 <__sflush_r>:
 801c508:	898a      	ldrh	r2, [r1, #12]
 801c50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c50e:	4605      	mov	r5, r0
 801c510:	0710      	lsls	r0, r2, #28
 801c512:	460c      	mov	r4, r1
 801c514:	d458      	bmi.n	801c5c8 <__sflush_r+0xc0>
 801c516:	684b      	ldr	r3, [r1, #4]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	dc05      	bgt.n	801c528 <__sflush_r+0x20>
 801c51c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c51e:	2b00      	cmp	r3, #0
 801c520:	dc02      	bgt.n	801c528 <__sflush_r+0x20>
 801c522:	2000      	movs	r0, #0
 801c524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c52a:	2e00      	cmp	r6, #0
 801c52c:	d0f9      	beq.n	801c522 <__sflush_r+0x1a>
 801c52e:	2300      	movs	r3, #0
 801c530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c534:	682f      	ldr	r7, [r5, #0]
 801c536:	602b      	str	r3, [r5, #0]
 801c538:	d032      	beq.n	801c5a0 <__sflush_r+0x98>
 801c53a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c53c:	89a3      	ldrh	r3, [r4, #12]
 801c53e:	075a      	lsls	r2, r3, #29
 801c540:	d505      	bpl.n	801c54e <__sflush_r+0x46>
 801c542:	6863      	ldr	r3, [r4, #4]
 801c544:	1ac0      	subs	r0, r0, r3
 801c546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c548:	b10b      	cbz	r3, 801c54e <__sflush_r+0x46>
 801c54a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c54c:	1ac0      	subs	r0, r0, r3
 801c54e:	2300      	movs	r3, #0
 801c550:	4602      	mov	r2, r0
 801c552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c554:	6a21      	ldr	r1, [r4, #32]
 801c556:	4628      	mov	r0, r5
 801c558:	47b0      	blx	r6
 801c55a:	1c43      	adds	r3, r0, #1
 801c55c:	89a3      	ldrh	r3, [r4, #12]
 801c55e:	d106      	bne.n	801c56e <__sflush_r+0x66>
 801c560:	6829      	ldr	r1, [r5, #0]
 801c562:	291d      	cmp	r1, #29
 801c564:	d82c      	bhi.n	801c5c0 <__sflush_r+0xb8>
 801c566:	4a2a      	ldr	r2, [pc, #168]	; (801c610 <__sflush_r+0x108>)
 801c568:	40ca      	lsrs	r2, r1
 801c56a:	07d6      	lsls	r6, r2, #31
 801c56c:	d528      	bpl.n	801c5c0 <__sflush_r+0xb8>
 801c56e:	2200      	movs	r2, #0
 801c570:	6062      	str	r2, [r4, #4]
 801c572:	04d9      	lsls	r1, r3, #19
 801c574:	6922      	ldr	r2, [r4, #16]
 801c576:	6022      	str	r2, [r4, #0]
 801c578:	d504      	bpl.n	801c584 <__sflush_r+0x7c>
 801c57a:	1c42      	adds	r2, r0, #1
 801c57c:	d101      	bne.n	801c582 <__sflush_r+0x7a>
 801c57e:	682b      	ldr	r3, [r5, #0]
 801c580:	b903      	cbnz	r3, 801c584 <__sflush_r+0x7c>
 801c582:	6560      	str	r0, [r4, #84]	; 0x54
 801c584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c586:	602f      	str	r7, [r5, #0]
 801c588:	2900      	cmp	r1, #0
 801c58a:	d0ca      	beq.n	801c522 <__sflush_r+0x1a>
 801c58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c590:	4299      	cmp	r1, r3
 801c592:	d002      	beq.n	801c59a <__sflush_r+0x92>
 801c594:	4628      	mov	r0, r5
 801c596:	f7ff faa9 	bl	801baec <_free_r>
 801c59a:	2000      	movs	r0, #0
 801c59c:	6360      	str	r0, [r4, #52]	; 0x34
 801c59e:	e7c1      	b.n	801c524 <__sflush_r+0x1c>
 801c5a0:	6a21      	ldr	r1, [r4, #32]
 801c5a2:	2301      	movs	r3, #1
 801c5a4:	4628      	mov	r0, r5
 801c5a6:	47b0      	blx	r6
 801c5a8:	1c41      	adds	r1, r0, #1
 801c5aa:	d1c7      	bne.n	801c53c <__sflush_r+0x34>
 801c5ac:	682b      	ldr	r3, [r5, #0]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d0c4      	beq.n	801c53c <__sflush_r+0x34>
 801c5b2:	2b1d      	cmp	r3, #29
 801c5b4:	d001      	beq.n	801c5ba <__sflush_r+0xb2>
 801c5b6:	2b16      	cmp	r3, #22
 801c5b8:	d101      	bne.n	801c5be <__sflush_r+0xb6>
 801c5ba:	602f      	str	r7, [r5, #0]
 801c5bc:	e7b1      	b.n	801c522 <__sflush_r+0x1a>
 801c5be:	89a3      	ldrh	r3, [r4, #12]
 801c5c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5c4:	81a3      	strh	r3, [r4, #12]
 801c5c6:	e7ad      	b.n	801c524 <__sflush_r+0x1c>
 801c5c8:	690f      	ldr	r7, [r1, #16]
 801c5ca:	2f00      	cmp	r7, #0
 801c5cc:	d0a9      	beq.n	801c522 <__sflush_r+0x1a>
 801c5ce:	0793      	lsls	r3, r2, #30
 801c5d0:	680e      	ldr	r6, [r1, #0]
 801c5d2:	bf08      	it	eq
 801c5d4:	694b      	ldreq	r3, [r1, #20]
 801c5d6:	600f      	str	r7, [r1, #0]
 801c5d8:	bf18      	it	ne
 801c5da:	2300      	movne	r3, #0
 801c5dc:	eba6 0807 	sub.w	r8, r6, r7
 801c5e0:	608b      	str	r3, [r1, #8]
 801c5e2:	f1b8 0f00 	cmp.w	r8, #0
 801c5e6:	dd9c      	ble.n	801c522 <__sflush_r+0x1a>
 801c5e8:	6a21      	ldr	r1, [r4, #32]
 801c5ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c5ec:	4643      	mov	r3, r8
 801c5ee:	463a      	mov	r2, r7
 801c5f0:	4628      	mov	r0, r5
 801c5f2:	47b0      	blx	r6
 801c5f4:	2800      	cmp	r0, #0
 801c5f6:	dc06      	bgt.n	801c606 <__sflush_r+0xfe>
 801c5f8:	89a3      	ldrh	r3, [r4, #12]
 801c5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5fe:	81a3      	strh	r3, [r4, #12]
 801c600:	f04f 30ff 	mov.w	r0, #4294967295
 801c604:	e78e      	b.n	801c524 <__sflush_r+0x1c>
 801c606:	4407      	add	r7, r0
 801c608:	eba8 0800 	sub.w	r8, r8, r0
 801c60c:	e7e9      	b.n	801c5e2 <__sflush_r+0xda>
 801c60e:	bf00      	nop
 801c610:	20400001 	.word	0x20400001

0801c614 <_fflush_r>:
 801c614:	b538      	push	{r3, r4, r5, lr}
 801c616:	690b      	ldr	r3, [r1, #16]
 801c618:	4605      	mov	r5, r0
 801c61a:	460c      	mov	r4, r1
 801c61c:	b913      	cbnz	r3, 801c624 <_fflush_r+0x10>
 801c61e:	2500      	movs	r5, #0
 801c620:	4628      	mov	r0, r5
 801c622:	bd38      	pop	{r3, r4, r5, pc}
 801c624:	b118      	cbz	r0, 801c62e <_fflush_r+0x1a>
 801c626:	6983      	ldr	r3, [r0, #24]
 801c628:	b90b      	cbnz	r3, 801c62e <_fflush_r+0x1a>
 801c62a:	f000 f887 	bl	801c73c <__sinit>
 801c62e:	4b14      	ldr	r3, [pc, #80]	; (801c680 <_fflush_r+0x6c>)
 801c630:	429c      	cmp	r4, r3
 801c632:	d11b      	bne.n	801c66c <_fflush_r+0x58>
 801c634:	686c      	ldr	r4, [r5, #4]
 801c636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d0ef      	beq.n	801c61e <_fflush_r+0xa>
 801c63e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c640:	07d0      	lsls	r0, r2, #31
 801c642:	d404      	bmi.n	801c64e <_fflush_r+0x3a>
 801c644:	0599      	lsls	r1, r3, #22
 801c646:	d402      	bmi.n	801c64e <_fflush_r+0x3a>
 801c648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c64a:	f000 f915 	bl	801c878 <__retarget_lock_acquire_recursive>
 801c64e:	4628      	mov	r0, r5
 801c650:	4621      	mov	r1, r4
 801c652:	f7ff ff59 	bl	801c508 <__sflush_r>
 801c656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c658:	07da      	lsls	r2, r3, #31
 801c65a:	4605      	mov	r5, r0
 801c65c:	d4e0      	bmi.n	801c620 <_fflush_r+0xc>
 801c65e:	89a3      	ldrh	r3, [r4, #12]
 801c660:	059b      	lsls	r3, r3, #22
 801c662:	d4dd      	bmi.n	801c620 <_fflush_r+0xc>
 801c664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c666:	f000 f909 	bl	801c87c <__retarget_lock_release_recursive>
 801c66a:	e7d9      	b.n	801c620 <_fflush_r+0xc>
 801c66c:	4b05      	ldr	r3, [pc, #20]	; (801c684 <_fflush_r+0x70>)
 801c66e:	429c      	cmp	r4, r3
 801c670:	d101      	bne.n	801c676 <_fflush_r+0x62>
 801c672:	68ac      	ldr	r4, [r5, #8]
 801c674:	e7df      	b.n	801c636 <_fflush_r+0x22>
 801c676:	4b04      	ldr	r3, [pc, #16]	; (801c688 <_fflush_r+0x74>)
 801c678:	429c      	cmp	r4, r3
 801c67a:	bf08      	it	eq
 801c67c:	68ec      	ldreq	r4, [r5, #12]
 801c67e:	e7da      	b.n	801c636 <_fflush_r+0x22>
 801c680:	08020328 	.word	0x08020328
 801c684:	08020348 	.word	0x08020348
 801c688:	08020308 	.word	0x08020308

0801c68c <std>:
 801c68c:	2300      	movs	r3, #0
 801c68e:	b510      	push	{r4, lr}
 801c690:	4604      	mov	r4, r0
 801c692:	e9c0 3300 	strd	r3, r3, [r0]
 801c696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c69a:	6083      	str	r3, [r0, #8]
 801c69c:	8181      	strh	r1, [r0, #12]
 801c69e:	6643      	str	r3, [r0, #100]	; 0x64
 801c6a0:	81c2      	strh	r2, [r0, #14]
 801c6a2:	6183      	str	r3, [r0, #24]
 801c6a4:	4619      	mov	r1, r3
 801c6a6:	2208      	movs	r2, #8
 801c6a8:	305c      	adds	r0, #92	; 0x5c
 801c6aa:	f7ff fa17 	bl	801badc <memset>
 801c6ae:	4b05      	ldr	r3, [pc, #20]	; (801c6c4 <std+0x38>)
 801c6b0:	6263      	str	r3, [r4, #36]	; 0x24
 801c6b2:	4b05      	ldr	r3, [pc, #20]	; (801c6c8 <std+0x3c>)
 801c6b4:	62a3      	str	r3, [r4, #40]	; 0x28
 801c6b6:	4b05      	ldr	r3, [pc, #20]	; (801c6cc <std+0x40>)
 801c6b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c6ba:	4b05      	ldr	r3, [pc, #20]	; (801c6d0 <std+0x44>)
 801c6bc:	6224      	str	r4, [r4, #32]
 801c6be:	6323      	str	r3, [r4, #48]	; 0x30
 801c6c0:	bd10      	pop	{r4, pc}
 801c6c2:	bf00      	nop
 801c6c4:	0801c961 	.word	0x0801c961
 801c6c8:	0801c983 	.word	0x0801c983
 801c6cc:	0801c9bb 	.word	0x0801c9bb
 801c6d0:	0801c9df 	.word	0x0801c9df

0801c6d4 <_cleanup_r>:
 801c6d4:	4901      	ldr	r1, [pc, #4]	; (801c6dc <_cleanup_r+0x8>)
 801c6d6:	f000 b8af 	b.w	801c838 <_fwalk_reent>
 801c6da:	bf00      	nop
 801c6dc:	0801c615 	.word	0x0801c615

0801c6e0 <__sfmoreglue>:
 801c6e0:	b570      	push	{r4, r5, r6, lr}
 801c6e2:	1e4a      	subs	r2, r1, #1
 801c6e4:	2568      	movs	r5, #104	; 0x68
 801c6e6:	4355      	muls	r5, r2
 801c6e8:	460e      	mov	r6, r1
 801c6ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c6ee:	f7ff fa4d 	bl	801bb8c <_malloc_r>
 801c6f2:	4604      	mov	r4, r0
 801c6f4:	b140      	cbz	r0, 801c708 <__sfmoreglue+0x28>
 801c6f6:	2100      	movs	r1, #0
 801c6f8:	e9c0 1600 	strd	r1, r6, [r0]
 801c6fc:	300c      	adds	r0, #12
 801c6fe:	60a0      	str	r0, [r4, #8]
 801c700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c704:	f7ff f9ea 	bl	801badc <memset>
 801c708:	4620      	mov	r0, r4
 801c70a:	bd70      	pop	{r4, r5, r6, pc}

0801c70c <__sfp_lock_acquire>:
 801c70c:	4801      	ldr	r0, [pc, #4]	; (801c714 <__sfp_lock_acquire+0x8>)
 801c70e:	f000 b8b3 	b.w	801c878 <__retarget_lock_acquire_recursive>
 801c712:	bf00      	nop
 801c714:	2000e548 	.word	0x2000e548

0801c718 <__sfp_lock_release>:
 801c718:	4801      	ldr	r0, [pc, #4]	; (801c720 <__sfp_lock_release+0x8>)
 801c71a:	f000 b8af 	b.w	801c87c <__retarget_lock_release_recursive>
 801c71e:	bf00      	nop
 801c720:	2000e548 	.word	0x2000e548

0801c724 <__sinit_lock_acquire>:
 801c724:	4801      	ldr	r0, [pc, #4]	; (801c72c <__sinit_lock_acquire+0x8>)
 801c726:	f000 b8a7 	b.w	801c878 <__retarget_lock_acquire_recursive>
 801c72a:	bf00      	nop
 801c72c:	2000e543 	.word	0x2000e543

0801c730 <__sinit_lock_release>:
 801c730:	4801      	ldr	r0, [pc, #4]	; (801c738 <__sinit_lock_release+0x8>)
 801c732:	f000 b8a3 	b.w	801c87c <__retarget_lock_release_recursive>
 801c736:	bf00      	nop
 801c738:	2000e543 	.word	0x2000e543

0801c73c <__sinit>:
 801c73c:	b510      	push	{r4, lr}
 801c73e:	4604      	mov	r4, r0
 801c740:	f7ff fff0 	bl	801c724 <__sinit_lock_acquire>
 801c744:	69a3      	ldr	r3, [r4, #24]
 801c746:	b11b      	cbz	r3, 801c750 <__sinit+0x14>
 801c748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c74c:	f7ff bff0 	b.w	801c730 <__sinit_lock_release>
 801c750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c754:	6523      	str	r3, [r4, #80]	; 0x50
 801c756:	4b13      	ldr	r3, [pc, #76]	; (801c7a4 <__sinit+0x68>)
 801c758:	4a13      	ldr	r2, [pc, #76]	; (801c7a8 <__sinit+0x6c>)
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	62a2      	str	r2, [r4, #40]	; 0x28
 801c75e:	42a3      	cmp	r3, r4
 801c760:	bf04      	itt	eq
 801c762:	2301      	moveq	r3, #1
 801c764:	61a3      	streq	r3, [r4, #24]
 801c766:	4620      	mov	r0, r4
 801c768:	f000 f820 	bl	801c7ac <__sfp>
 801c76c:	6060      	str	r0, [r4, #4]
 801c76e:	4620      	mov	r0, r4
 801c770:	f000 f81c 	bl	801c7ac <__sfp>
 801c774:	60a0      	str	r0, [r4, #8]
 801c776:	4620      	mov	r0, r4
 801c778:	f000 f818 	bl	801c7ac <__sfp>
 801c77c:	2200      	movs	r2, #0
 801c77e:	60e0      	str	r0, [r4, #12]
 801c780:	2104      	movs	r1, #4
 801c782:	6860      	ldr	r0, [r4, #4]
 801c784:	f7ff ff82 	bl	801c68c <std>
 801c788:	68a0      	ldr	r0, [r4, #8]
 801c78a:	2201      	movs	r2, #1
 801c78c:	2109      	movs	r1, #9
 801c78e:	f7ff ff7d 	bl	801c68c <std>
 801c792:	68e0      	ldr	r0, [r4, #12]
 801c794:	2202      	movs	r2, #2
 801c796:	2112      	movs	r1, #18
 801c798:	f7ff ff78 	bl	801c68c <std>
 801c79c:	2301      	movs	r3, #1
 801c79e:	61a3      	str	r3, [r4, #24]
 801c7a0:	e7d2      	b.n	801c748 <__sinit+0xc>
 801c7a2:	bf00      	nop
 801c7a4:	080202cc 	.word	0x080202cc
 801c7a8:	0801c6d5 	.word	0x0801c6d5

0801c7ac <__sfp>:
 801c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7ae:	4607      	mov	r7, r0
 801c7b0:	f7ff ffac 	bl	801c70c <__sfp_lock_acquire>
 801c7b4:	4b1e      	ldr	r3, [pc, #120]	; (801c830 <__sfp+0x84>)
 801c7b6:	681e      	ldr	r6, [r3, #0]
 801c7b8:	69b3      	ldr	r3, [r6, #24]
 801c7ba:	b913      	cbnz	r3, 801c7c2 <__sfp+0x16>
 801c7bc:	4630      	mov	r0, r6
 801c7be:	f7ff ffbd 	bl	801c73c <__sinit>
 801c7c2:	3648      	adds	r6, #72	; 0x48
 801c7c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c7c8:	3b01      	subs	r3, #1
 801c7ca:	d503      	bpl.n	801c7d4 <__sfp+0x28>
 801c7cc:	6833      	ldr	r3, [r6, #0]
 801c7ce:	b30b      	cbz	r3, 801c814 <__sfp+0x68>
 801c7d0:	6836      	ldr	r6, [r6, #0]
 801c7d2:	e7f7      	b.n	801c7c4 <__sfp+0x18>
 801c7d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c7d8:	b9d5      	cbnz	r5, 801c810 <__sfp+0x64>
 801c7da:	4b16      	ldr	r3, [pc, #88]	; (801c834 <__sfp+0x88>)
 801c7dc:	60e3      	str	r3, [r4, #12]
 801c7de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c7e2:	6665      	str	r5, [r4, #100]	; 0x64
 801c7e4:	f000 f847 	bl	801c876 <__retarget_lock_init_recursive>
 801c7e8:	f7ff ff96 	bl	801c718 <__sfp_lock_release>
 801c7ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c7f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c7f4:	6025      	str	r5, [r4, #0]
 801c7f6:	61a5      	str	r5, [r4, #24]
 801c7f8:	2208      	movs	r2, #8
 801c7fa:	4629      	mov	r1, r5
 801c7fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c800:	f7ff f96c 	bl	801badc <memset>
 801c804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c80c:	4620      	mov	r0, r4
 801c80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c810:	3468      	adds	r4, #104	; 0x68
 801c812:	e7d9      	b.n	801c7c8 <__sfp+0x1c>
 801c814:	2104      	movs	r1, #4
 801c816:	4638      	mov	r0, r7
 801c818:	f7ff ff62 	bl	801c6e0 <__sfmoreglue>
 801c81c:	4604      	mov	r4, r0
 801c81e:	6030      	str	r0, [r6, #0]
 801c820:	2800      	cmp	r0, #0
 801c822:	d1d5      	bne.n	801c7d0 <__sfp+0x24>
 801c824:	f7ff ff78 	bl	801c718 <__sfp_lock_release>
 801c828:	230c      	movs	r3, #12
 801c82a:	603b      	str	r3, [r7, #0]
 801c82c:	e7ee      	b.n	801c80c <__sfp+0x60>
 801c82e:	bf00      	nop
 801c830:	080202cc 	.word	0x080202cc
 801c834:	ffff0001 	.word	0xffff0001

0801c838 <_fwalk_reent>:
 801c838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c83c:	4606      	mov	r6, r0
 801c83e:	4688      	mov	r8, r1
 801c840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c844:	2700      	movs	r7, #0
 801c846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c84a:	f1b9 0901 	subs.w	r9, r9, #1
 801c84e:	d505      	bpl.n	801c85c <_fwalk_reent+0x24>
 801c850:	6824      	ldr	r4, [r4, #0]
 801c852:	2c00      	cmp	r4, #0
 801c854:	d1f7      	bne.n	801c846 <_fwalk_reent+0xe>
 801c856:	4638      	mov	r0, r7
 801c858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c85c:	89ab      	ldrh	r3, [r5, #12]
 801c85e:	2b01      	cmp	r3, #1
 801c860:	d907      	bls.n	801c872 <_fwalk_reent+0x3a>
 801c862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c866:	3301      	adds	r3, #1
 801c868:	d003      	beq.n	801c872 <_fwalk_reent+0x3a>
 801c86a:	4629      	mov	r1, r5
 801c86c:	4630      	mov	r0, r6
 801c86e:	47c0      	blx	r8
 801c870:	4307      	orrs	r7, r0
 801c872:	3568      	adds	r5, #104	; 0x68
 801c874:	e7e9      	b.n	801c84a <_fwalk_reent+0x12>

0801c876 <__retarget_lock_init_recursive>:
 801c876:	4770      	bx	lr

0801c878 <__retarget_lock_acquire_recursive>:
 801c878:	4770      	bx	lr

0801c87a <__retarget_lock_release>:
 801c87a:	4770      	bx	lr

0801c87c <__retarget_lock_release_recursive>:
 801c87c:	4770      	bx	lr

0801c87e <__swhatbuf_r>:
 801c87e:	b570      	push	{r4, r5, r6, lr}
 801c880:	460e      	mov	r6, r1
 801c882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c886:	2900      	cmp	r1, #0
 801c888:	b096      	sub	sp, #88	; 0x58
 801c88a:	4614      	mov	r4, r2
 801c88c:	461d      	mov	r5, r3
 801c88e:	da07      	bge.n	801c8a0 <__swhatbuf_r+0x22>
 801c890:	2300      	movs	r3, #0
 801c892:	602b      	str	r3, [r5, #0]
 801c894:	89b3      	ldrh	r3, [r6, #12]
 801c896:	061a      	lsls	r2, r3, #24
 801c898:	d410      	bmi.n	801c8bc <__swhatbuf_r+0x3e>
 801c89a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c89e:	e00e      	b.n	801c8be <__swhatbuf_r+0x40>
 801c8a0:	466a      	mov	r2, sp
 801c8a2:	f000 f8c3 	bl	801ca2c <_fstat_r>
 801c8a6:	2800      	cmp	r0, #0
 801c8a8:	dbf2      	blt.n	801c890 <__swhatbuf_r+0x12>
 801c8aa:	9a01      	ldr	r2, [sp, #4]
 801c8ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c8b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c8b4:	425a      	negs	r2, r3
 801c8b6:	415a      	adcs	r2, r3
 801c8b8:	602a      	str	r2, [r5, #0]
 801c8ba:	e7ee      	b.n	801c89a <__swhatbuf_r+0x1c>
 801c8bc:	2340      	movs	r3, #64	; 0x40
 801c8be:	2000      	movs	r0, #0
 801c8c0:	6023      	str	r3, [r4, #0]
 801c8c2:	b016      	add	sp, #88	; 0x58
 801c8c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c8c8 <__smakebuf_r>:
 801c8c8:	898b      	ldrh	r3, [r1, #12]
 801c8ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c8cc:	079d      	lsls	r5, r3, #30
 801c8ce:	4606      	mov	r6, r0
 801c8d0:	460c      	mov	r4, r1
 801c8d2:	d507      	bpl.n	801c8e4 <__smakebuf_r+0x1c>
 801c8d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c8d8:	6023      	str	r3, [r4, #0]
 801c8da:	6123      	str	r3, [r4, #16]
 801c8dc:	2301      	movs	r3, #1
 801c8de:	6163      	str	r3, [r4, #20]
 801c8e0:	b002      	add	sp, #8
 801c8e2:	bd70      	pop	{r4, r5, r6, pc}
 801c8e4:	ab01      	add	r3, sp, #4
 801c8e6:	466a      	mov	r2, sp
 801c8e8:	f7ff ffc9 	bl	801c87e <__swhatbuf_r>
 801c8ec:	9900      	ldr	r1, [sp, #0]
 801c8ee:	4605      	mov	r5, r0
 801c8f0:	4630      	mov	r0, r6
 801c8f2:	f7ff f94b 	bl	801bb8c <_malloc_r>
 801c8f6:	b948      	cbnz	r0, 801c90c <__smakebuf_r+0x44>
 801c8f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8fc:	059a      	lsls	r2, r3, #22
 801c8fe:	d4ef      	bmi.n	801c8e0 <__smakebuf_r+0x18>
 801c900:	f023 0303 	bic.w	r3, r3, #3
 801c904:	f043 0302 	orr.w	r3, r3, #2
 801c908:	81a3      	strh	r3, [r4, #12]
 801c90a:	e7e3      	b.n	801c8d4 <__smakebuf_r+0xc>
 801c90c:	4b0d      	ldr	r3, [pc, #52]	; (801c944 <__smakebuf_r+0x7c>)
 801c90e:	62b3      	str	r3, [r6, #40]	; 0x28
 801c910:	89a3      	ldrh	r3, [r4, #12]
 801c912:	6020      	str	r0, [r4, #0]
 801c914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c918:	81a3      	strh	r3, [r4, #12]
 801c91a:	9b00      	ldr	r3, [sp, #0]
 801c91c:	6163      	str	r3, [r4, #20]
 801c91e:	9b01      	ldr	r3, [sp, #4]
 801c920:	6120      	str	r0, [r4, #16]
 801c922:	b15b      	cbz	r3, 801c93c <__smakebuf_r+0x74>
 801c924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c928:	4630      	mov	r0, r6
 801c92a:	f000 f891 	bl	801ca50 <_isatty_r>
 801c92e:	b128      	cbz	r0, 801c93c <__smakebuf_r+0x74>
 801c930:	89a3      	ldrh	r3, [r4, #12]
 801c932:	f023 0303 	bic.w	r3, r3, #3
 801c936:	f043 0301 	orr.w	r3, r3, #1
 801c93a:	81a3      	strh	r3, [r4, #12]
 801c93c:	89a0      	ldrh	r0, [r4, #12]
 801c93e:	4305      	orrs	r5, r0
 801c940:	81a5      	strh	r5, [r4, #12]
 801c942:	e7cd      	b.n	801c8e0 <__smakebuf_r+0x18>
 801c944:	0801c6d5 	.word	0x0801c6d5

0801c948 <__malloc_lock>:
 801c948:	4801      	ldr	r0, [pc, #4]	; (801c950 <__malloc_lock+0x8>)
 801c94a:	f7ff bf95 	b.w	801c878 <__retarget_lock_acquire_recursive>
 801c94e:	bf00      	nop
 801c950:	2000e544 	.word	0x2000e544

0801c954 <__malloc_unlock>:
 801c954:	4801      	ldr	r0, [pc, #4]	; (801c95c <__malloc_unlock+0x8>)
 801c956:	f7ff bf91 	b.w	801c87c <__retarget_lock_release_recursive>
 801c95a:	bf00      	nop
 801c95c:	2000e544 	.word	0x2000e544

0801c960 <__sread>:
 801c960:	b510      	push	{r4, lr}
 801c962:	460c      	mov	r4, r1
 801c964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c968:	f000 f894 	bl	801ca94 <_read_r>
 801c96c:	2800      	cmp	r0, #0
 801c96e:	bfab      	itete	ge
 801c970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c972:	89a3      	ldrhlt	r3, [r4, #12]
 801c974:	181b      	addge	r3, r3, r0
 801c976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c97a:	bfac      	ite	ge
 801c97c:	6563      	strge	r3, [r4, #84]	; 0x54
 801c97e:	81a3      	strhlt	r3, [r4, #12]
 801c980:	bd10      	pop	{r4, pc}

0801c982 <__swrite>:
 801c982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c986:	461f      	mov	r7, r3
 801c988:	898b      	ldrh	r3, [r1, #12]
 801c98a:	05db      	lsls	r3, r3, #23
 801c98c:	4605      	mov	r5, r0
 801c98e:	460c      	mov	r4, r1
 801c990:	4616      	mov	r6, r2
 801c992:	d505      	bpl.n	801c9a0 <__swrite+0x1e>
 801c994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c998:	2302      	movs	r3, #2
 801c99a:	2200      	movs	r2, #0
 801c99c:	f000 f868 	bl	801ca70 <_lseek_r>
 801c9a0:	89a3      	ldrh	r3, [r4, #12]
 801c9a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c9a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c9aa:	81a3      	strh	r3, [r4, #12]
 801c9ac:	4632      	mov	r2, r6
 801c9ae:	463b      	mov	r3, r7
 801c9b0:	4628      	mov	r0, r5
 801c9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c9b6:	f000 b817 	b.w	801c9e8 <_write_r>

0801c9ba <__sseek>:
 801c9ba:	b510      	push	{r4, lr}
 801c9bc:	460c      	mov	r4, r1
 801c9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c9c2:	f000 f855 	bl	801ca70 <_lseek_r>
 801c9c6:	1c43      	adds	r3, r0, #1
 801c9c8:	89a3      	ldrh	r3, [r4, #12]
 801c9ca:	bf15      	itete	ne
 801c9cc:	6560      	strne	r0, [r4, #84]	; 0x54
 801c9ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c9d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c9d6:	81a3      	strheq	r3, [r4, #12]
 801c9d8:	bf18      	it	ne
 801c9da:	81a3      	strhne	r3, [r4, #12]
 801c9dc:	bd10      	pop	{r4, pc}

0801c9de <__sclose>:
 801c9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c9e2:	f000 b813 	b.w	801ca0c <_close_r>
	...

0801c9e8 <_write_r>:
 801c9e8:	b538      	push	{r3, r4, r5, lr}
 801c9ea:	4d07      	ldr	r5, [pc, #28]	; (801ca08 <_write_r+0x20>)
 801c9ec:	4604      	mov	r4, r0
 801c9ee:	4608      	mov	r0, r1
 801c9f0:	4611      	mov	r1, r2
 801c9f2:	2200      	movs	r2, #0
 801c9f4:	602a      	str	r2, [r5, #0]
 801c9f6:	461a      	mov	r2, r3
 801c9f8:	f7e4 fdd3 	bl	80015a2 <_write>
 801c9fc:	1c43      	adds	r3, r0, #1
 801c9fe:	d102      	bne.n	801ca06 <_write_r+0x1e>
 801ca00:	682b      	ldr	r3, [r5, #0]
 801ca02:	b103      	cbz	r3, 801ca06 <_write_r+0x1e>
 801ca04:	6023      	str	r3, [r4, #0]
 801ca06:	bd38      	pop	{r3, r4, r5, pc}
 801ca08:	2000e54c 	.word	0x2000e54c

0801ca0c <_close_r>:
 801ca0c:	b538      	push	{r3, r4, r5, lr}
 801ca0e:	4d06      	ldr	r5, [pc, #24]	; (801ca28 <_close_r+0x1c>)
 801ca10:	2300      	movs	r3, #0
 801ca12:	4604      	mov	r4, r0
 801ca14:	4608      	mov	r0, r1
 801ca16:	602b      	str	r3, [r5, #0]
 801ca18:	f7e4 fddf 	bl	80015da <_close>
 801ca1c:	1c43      	adds	r3, r0, #1
 801ca1e:	d102      	bne.n	801ca26 <_close_r+0x1a>
 801ca20:	682b      	ldr	r3, [r5, #0]
 801ca22:	b103      	cbz	r3, 801ca26 <_close_r+0x1a>
 801ca24:	6023      	str	r3, [r4, #0]
 801ca26:	bd38      	pop	{r3, r4, r5, pc}
 801ca28:	2000e54c 	.word	0x2000e54c

0801ca2c <_fstat_r>:
 801ca2c:	b538      	push	{r3, r4, r5, lr}
 801ca2e:	4d07      	ldr	r5, [pc, #28]	; (801ca4c <_fstat_r+0x20>)
 801ca30:	2300      	movs	r3, #0
 801ca32:	4604      	mov	r4, r0
 801ca34:	4608      	mov	r0, r1
 801ca36:	4611      	mov	r1, r2
 801ca38:	602b      	str	r3, [r5, #0]
 801ca3a:	f7e4 fdda 	bl	80015f2 <_fstat>
 801ca3e:	1c43      	adds	r3, r0, #1
 801ca40:	d102      	bne.n	801ca48 <_fstat_r+0x1c>
 801ca42:	682b      	ldr	r3, [r5, #0]
 801ca44:	b103      	cbz	r3, 801ca48 <_fstat_r+0x1c>
 801ca46:	6023      	str	r3, [r4, #0]
 801ca48:	bd38      	pop	{r3, r4, r5, pc}
 801ca4a:	bf00      	nop
 801ca4c:	2000e54c 	.word	0x2000e54c

0801ca50 <_isatty_r>:
 801ca50:	b538      	push	{r3, r4, r5, lr}
 801ca52:	4d06      	ldr	r5, [pc, #24]	; (801ca6c <_isatty_r+0x1c>)
 801ca54:	2300      	movs	r3, #0
 801ca56:	4604      	mov	r4, r0
 801ca58:	4608      	mov	r0, r1
 801ca5a:	602b      	str	r3, [r5, #0]
 801ca5c:	f7e4 fdd9 	bl	8001612 <_isatty>
 801ca60:	1c43      	adds	r3, r0, #1
 801ca62:	d102      	bne.n	801ca6a <_isatty_r+0x1a>
 801ca64:	682b      	ldr	r3, [r5, #0]
 801ca66:	b103      	cbz	r3, 801ca6a <_isatty_r+0x1a>
 801ca68:	6023      	str	r3, [r4, #0]
 801ca6a:	bd38      	pop	{r3, r4, r5, pc}
 801ca6c:	2000e54c 	.word	0x2000e54c

0801ca70 <_lseek_r>:
 801ca70:	b538      	push	{r3, r4, r5, lr}
 801ca72:	4d07      	ldr	r5, [pc, #28]	; (801ca90 <_lseek_r+0x20>)
 801ca74:	4604      	mov	r4, r0
 801ca76:	4608      	mov	r0, r1
 801ca78:	4611      	mov	r1, r2
 801ca7a:	2200      	movs	r2, #0
 801ca7c:	602a      	str	r2, [r5, #0]
 801ca7e:	461a      	mov	r2, r3
 801ca80:	f7e4 fdd2 	bl	8001628 <_lseek>
 801ca84:	1c43      	adds	r3, r0, #1
 801ca86:	d102      	bne.n	801ca8e <_lseek_r+0x1e>
 801ca88:	682b      	ldr	r3, [r5, #0]
 801ca8a:	b103      	cbz	r3, 801ca8e <_lseek_r+0x1e>
 801ca8c:	6023      	str	r3, [r4, #0]
 801ca8e:	bd38      	pop	{r3, r4, r5, pc}
 801ca90:	2000e54c 	.word	0x2000e54c

0801ca94 <_read_r>:
 801ca94:	b538      	push	{r3, r4, r5, lr}
 801ca96:	4d07      	ldr	r5, [pc, #28]	; (801cab4 <_read_r+0x20>)
 801ca98:	4604      	mov	r4, r0
 801ca9a:	4608      	mov	r0, r1
 801ca9c:	4611      	mov	r1, r2
 801ca9e:	2200      	movs	r2, #0
 801caa0:	602a      	str	r2, [r5, #0]
 801caa2:	461a      	mov	r2, r3
 801caa4:	f7e4 fd60 	bl	8001568 <_read>
 801caa8:	1c43      	adds	r3, r0, #1
 801caaa:	d102      	bne.n	801cab2 <_read_r+0x1e>
 801caac:	682b      	ldr	r3, [r5, #0]
 801caae:	b103      	cbz	r3, 801cab2 <_read_r+0x1e>
 801cab0:	6023      	str	r3, [r4, #0]
 801cab2:	bd38      	pop	{r3, r4, r5, pc}
 801cab4:	2000e54c 	.word	0x2000e54c

0801cab8 <_init>:
 801cab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801caba:	bf00      	nop
 801cabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cabe:	bc08      	pop	{r3}
 801cac0:	469e      	mov	lr, r3
 801cac2:	4770      	bx	lr

0801cac4 <_fini>:
 801cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cac6:	bf00      	nop
 801cac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801caca:	bc08      	pop	{r3}
 801cacc:	469e      	mov	lr, r3
 801cace:	4770      	bx	lr
